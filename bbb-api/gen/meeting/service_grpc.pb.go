// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: meeting/service.proto

package meeting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MeetingService_IsMeetingRunning_FullMethodName   = "/org.bigbluebutton.protos.MeetingService/isMeetingRunning"
	MeetingService_GetMeetingInfo_FullMethodName     = "/org.bigbluebutton.protos.MeetingService/getMeetingInfo"
	MeetingService_ListMeetings_FullMethodName       = "/org.bigbluebutton.protos.MeetingService/listMeetings"
	MeetingService_GetMeetingsStream_FullMethodName  = "/org.bigbluebutton.protos.MeetingService/getMeetingsStream"
	MeetingService_IsVoiceBridgeInUse_FullMethodName = "/org.bigbluebutton.protos.MeetingService/isVoiceBridgeInUse"
	MeetingService_CreateMeeting_FullMethodName      = "/org.bigbluebutton.protos.MeetingService/createMeeting"
)

// MeetingServiceClient is the client API for MeetingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeetingServiceClient interface {
	IsMeetingRunning(ctx context.Context, in *MeetingRunningRequest, opts ...grpc.CallOption) (*MeetingRunningResponse, error)
	GetMeetingInfo(ctx context.Context, in *MeetingInfoRequest, opts ...grpc.CallOption) (*MeetingInfoResponse, error)
	ListMeetings(ctx context.Context, in *ListMeetingsRequest, opts ...grpc.CallOption) (*ListMeetingsResponse, error)
	GetMeetingsStream(ctx context.Context, in *GetMeetingsStreamRequest, opts ...grpc.CallOption) (MeetingService_GetMeetingsStreamClient, error)
	IsVoiceBridgeInUse(ctx context.Context, in *VoiceBridgeInUseRequest, opts ...grpc.CallOption) (*VoiceBridgeInUseResponse, error)
	CreateMeeting(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*CreateMeetingResponse, error)
}

type meetingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeetingServiceClient(cc grpc.ClientConnInterface) MeetingServiceClient {
	return &meetingServiceClient{cc}
}

func (c *meetingServiceClient) IsMeetingRunning(ctx context.Context, in *MeetingRunningRequest, opts ...grpc.CallOption) (*MeetingRunningResponse, error) {
	out := new(MeetingRunningResponse)
	err := c.cc.Invoke(ctx, MeetingService_IsMeetingRunning_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) GetMeetingInfo(ctx context.Context, in *MeetingInfoRequest, opts ...grpc.CallOption) (*MeetingInfoResponse, error) {
	out := new(MeetingInfoResponse)
	err := c.cc.Invoke(ctx, MeetingService_GetMeetingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) ListMeetings(ctx context.Context, in *ListMeetingsRequest, opts ...grpc.CallOption) (*ListMeetingsResponse, error) {
	out := new(ListMeetingsResponse)
	err := c.cc.Invoke(ctx, MeetingService_ListMeetings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) GetMeetingsStream(ctx context.Context, in *GetMeetingsStreamRequest, opts ...grpc.CallOption) (MeetingService_GetMeetingsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MeetingService_ServiceDesc.Streams[0], MeetingService_GetMeetingsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &meetingServiceGetMeetingsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeetingService_GetMeetingsStreamClient interface {
	Recv() (*MeetingInfoResponse, error)
	grpc.ClientStream
}

type meetingServiceGetMeetingsStreamClient struct {
	grpc.ClientStream
}

func (x *meetingServiceGetMeetingsStreamClient) Recv() (*MeetingInfoResponse, error) {
	m := new(MeetingInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *meetingServiceClient) IsVoiceBridgeInUse(ctx context.Context, in *VoiceBridgeInUseRequest, opts ...grpc.CallOption) (*VoiceBridgeInUseResponse, error) {
	out := new(VoiceBridgeInUseResponse)
	err := c.cc.Invoke(ctx, MeetingService_IsVoiceBridgeInUse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meetingServiceClient) CreateMeeting(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*CreateMeetingResponse, error) {
	out := new(CreateMeetingResponse)
	err := c.cc.Invoke(ctx, MeetingService_CreateMeeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeetingServiceServer is the server API for MeetingService service.
// All implementations must embed UnimplementedMeetingServiceServer
// for forward compatibility
type MeetingServiceServer interface {
	IsMeetingRunning(context.Context, *MeetingRunningRequest) (*MeetingRunningResponse, error)
	GetMeetingInfo(context.Context, *MeetingInfoRequest) (*MeetingInfoResponse, error)
	ListMeetings(context.Context, *ListMeetingsRequest) (*ListMeetingsResponse, error)
	GetMeetingsStream(*GetMeetingsStreamRequest, MeetingService_GetMeetingsStreamServer) error
	IsVoiceBridgeInUse(context.Context, *VoiceBridgeInUseRequest) (*VoiceBridgeInUseResponse, error)
	CreateMeeting(context.Context, *CreateMeetingRequest) (*CreateMeetingResponse, error)
	mustEmbedUnimplementedMeetingServiceServer()
}

// UnimplementedMeetingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeetingServiceServer struct {
}

func (UnimplementedMeetingServiceServer) IsMeetingRunning(context.Context, *MeetingRunningRequest) (*MeetingRunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMeetingRunning not implemented")
}
func (UnimplementedMeetingServiceServer) GetMeetingInfo(context.Context, *MeetingInfoRequest) (*MeetingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetingInfo not implemented")
}
func (UnimplementedMeetingServiceServer) ListMeetings(context.Context, *ListMeetingsRequest) (*ListMeetingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeetings not implemented")
}
func (UnimplementedMeetingServiceServer) GetMeetingsStream(*GetMeetingsStreamRequest, MeetingService_GetMeetingsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMeetingsStream not implemented")
}
func (UnimplementedMeetingServiceServer) IsVoiceBridgeInUse(context.Context, *VoiceBridgeInUseRequest) (*VoiceBridgeInUseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsVoiceBridgeInUse not implemented")
}
func (UnimplementedMeetingServiceServer) CreateMeeting(context.Context, *CreateMeetingRequest) (*CreateMeetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeeting not implemented")
}
func (UnimplementedMeetingServiceServer) mustEmbedUnimplementedMeetingServiceServer() {}

// UnsafeMeetingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeetingServiceServer will
// result in compilation errors.
type UnsafeMeetingServiceServer interface {
	mustEmbedUnimplementedMeetingServiceServer()
}

func RegisterMeetingServiceServer(s grpc.ServiceRegistrar, srv MeetingServiceServer) {
	s.RegisterService(&MeetingService_ServiceDesc, srv)
}

func _MeetingService_IsMeetingRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetingRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).IsMeetingRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetingService_IsMeetingRunning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).IsMeetingRunning(ctx, req.(*MeetingRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_GetMeetingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).GetMeetingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetingService_GetMeetingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).GetMeetingInfo(ctx, req.(*MeetingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_ListMeetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeetingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).ListMeetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetingService_ListMeetings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).ListMeetings(ctx, req.(*ListMeetingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_GetMeetingsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMeetingsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeetingServiceServer).GetMeetingsStream(m, &meetingServiceGetMeetingsStreamServer{stream})
}

type MeetingService_GetMeetingsStreamServer interface {
	Send(*MeetingInfoResponse) error
	grpc.ServerStream
}

type meetingServiceGetMeetingsStreamServer struct {
	grpc.ServerStream
}

func (x *meetingServiceGetMeetingsStreamServer) Send(m *MeetingInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MeetingService_IsVoiceBridgeInUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceBridgeInUseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).IsVoiceBridgeInUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetingService_IsVoiceBridgeInUse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).IsVoiceBridgeInUse(ctx, req.(*VoiceBridgeInUseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeetingService_CreateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeetingServiceServer).CreateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MeetingService_CreateMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeetingServiceServer).CreateMeeting(ctx, req.(*CreateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeetingService_ServiceDesc is the grpc.ServiceDesc for MeetingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeetingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.bigbluebutton.protos.MeetingService",
	HandlerType: (*MeetingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "isMeetingRunning",
			Handler:    _MeetingService_IsMeetingRunning_Handler,
		},
		{
			MethodName: "getMeetingInfo",
			Handler:    _MeetingService_GetMeetingInfo_Handler,
		},
		{
			MethodName: "listMeetings",
			Handler:    _MeetingService_ListMeetings_Handler,
		},
		{
			MethodName: "isVoiceBridgeInUse",
			Handler:    _MeetingService_IsVoiceBridgeInUse_Handler,
		},
		{
			MethodName: "createMeeting",
			Handler:    _MeetingService_CreateMeeting_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getMeetingsStream",
			Handler:       _MeetingService_GetMeetingsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "meeting/service.proto",
}
