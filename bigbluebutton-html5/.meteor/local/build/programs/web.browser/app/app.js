var require = meteorInstall({"imports":{"ui":{"components":{"chat":{"chat-graphql":{"chat-message-list":{"page":{"chat-message":{"message-content":{"poll-content":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-content/poll-content/component. //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Bar, BarChart, ResponsiveContainer, XAxis, YAxis;
module.link("recharts", {
  Bar(v) {
    Bar = v;
  },
  BarChart(v) {
    BarChart = v;
  },
  ResponsiveContainer(v) {
    ResponsiveContainer = v;
  },
  XAxis(v) {
    XAxis = v;
  },
  YAxis(v) {
    YAxis = v;
  }
}, 1);
let caseInsensitiveReducer;
module.link("/imports/utils/caseInsensitiveReducer", {
  default(v) {
    caseInsensitiveReducer = v;
  }
}, 2);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const intlMessages = defineMessages({
  true: {
    id: 'app.poll.t',
    description: 'Poll true option value'
  },
  false: {
    id: 'app.poll.f',
    description: 'Poll false option value'
  },
  yes: {
    id: 'app.poll.y',
    description: 'Poll yes option value'
  },
  no: {
    id: 'app.poll.n',
    description: 'Poll no option value'
  },
  abstention: {
    id: 'app.poll.abstention',
    description: 'Poll Abstention option value'
  }
});
function assertAsMetadata(metadata) {
  if (typeof metadata !== 'object' || metadata === null) {
    throw new Error('metadata is not an object');
  }
  if (typeof metadata.id !== 'string') {
    throw new Error('metadata.id is not a string');
  }
  if (typeof metadata.numRespondents !== 'number') {
    throw new Error('metadata.numRespondents is not a number');
  }
  if (typeof metadata.numResponders !== 'number') {
    throw new Error('metadata.numResponders is not a number');
  }
  if (typeof metadata.questionText !== 'string') {
    throw new Error('metadata.questionText is not a string');
  }
  if (typeof metadata.questionType !== 'string') {
    throw new Error('metadata.questionType is not a string');
  }
  if (!Array.isArray(metadata.answers)) {
    throw new Error('metadata.answers is not an array');
  }
}
const ChatPollContent = _ref => {
  let {
    metadata: string,
    height = undefined
  } = _ref;
  const intl = useIntl();
  const pollData = JSON.parse(string);
  assertAsMetadata(pollData);
  const answers = pollData.answers.reduce(caseInsensitiveReducer, []);
  const translatedAnswers = answers.map(answer => {
    const translationKey = intlMessages[answer.key.toLowerCase()];
    const pollAnswer = translationKey ? intl.formatMessage(translationKey) : answer.key;
    return _objectSpread(_objectSpread({}, answer), {}, {
      pollAnswer
    });
  });
  const useHeight = height || translatedAnswers.length * 50;
  return /*#__PURE__*/React.createElement(Styled.PollWrapper, {
    "data-test": "chatPollMessageText"
  }, /*#__PURE__*/React.createElement(Styled.PollText, null, pollData.questionText), /*#__PURE__*/React.createElement(ResponsiveContainer, {
    width: "90%",
    height: useHeight
  }, /*#__PURE__*/React.createElement(BarChart, {
    data: translatedAnswers,
    layout: "vertical"
  }, /*#__PURE__*/React.createElement(XAxis, {
    type: "number"
  }), /*#__PURE__*/React.createElement(YAxis, {
    width: 80,
    type: "category",
    dataKey: "pollAnswer"
  }), /*#__PURE__*/React.createElement(Bar, {
    dataKey: "numVotes",
    fill: "#0C57A7"
  }))));
};
module.exportDefault(ChatPollContent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-content/poll-content/styles.ts  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  PollText: () => PollText,
  PollWrapper: () => PollWrapper
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorText;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorText(v) {
    colorText = v;
  }
}, 1);
const PollText = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  font-size: 1.25rem;\n  font-weight: 500;\n  margin-left: 2.75rem;\n  color: ", ";\n  word-break: break-word;\n"])), colorText);
const PollWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  width: 100%;\n"])));
module.exportDefault({
  PollText,
  PollWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation-content":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-content/presentation-content/co //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
function assertAsMetadata(metadata) {
  if (typeof metadata !== 'object' || metadata === null) {
    throw new Error('metadata is not an object');
  }
  if (typeof metadata.fileURI !== 'string') {
    throw new Error('metadata.fileURI is not a string');
  }
  if (typeof metadata.filename !== 'string') {
    throw new Error('metadata.fileName is not a string');
  }
}
const intlMessages = defineMessages({
  download: {
    id: 'app.presentation.downloadLabel',
    description: 'used as label for presentation download link'
  },
  withWhiteboardAnnotations: {
    id: 'app.presentationUploader.export.withWhiteboardAnnotations',
    description: 'used for indicating that presentation has annotations'
  }
});
const ChatMessagePresentationContent = _ref => {
  let {
    metadata: string
  } = _ref;
  const intl = useIntl();
  const presentationData = JSON.parse(string);
  assertAsMetadata(presentationData);
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore - temporary, while meteor exists in the project
  const APP_CONFIG = window.meetingClientSettings.public.app;
  const downloadUrl = "".concat(APP_CONFIG.bbbWebBase, "/").concat(presentationData.fileURI);
  const parseFilename = function () {
    let filename = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    const substrings = filename.split('.');
    substrings.pop();
    const filenameWithoutExtension = substrings.join('');
    return filenameWithoutExtension;
  };
  const parsedFileName = parseFilename(presentationData.filename);
  return /*#__PURE__*/React.createElement(Styled.ChatDowloadContainer, {
    "data-test": "downloadPresentationContainer"
  }, /*#__PURE__*/React.createElement("span", null, presentationData.filename, "\xA0 (", intl.formatMessage(intlMessages.withWhiteboardAnnotations), ")"), /*#__PURE__*/React.createElement(Styled.ChatLink, {
    href: downloadUrl,
    type: "application/pdf",
    rel: "noopener, noreferrer",
    download: "".concat(parsedFileName, ".pdf")
  }, intl.formatMessage(intlMessages.download)));
};
module.exportDefault(ChatMessagePresentationContent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-content/presentation-content/st //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  ChatDowloadContainer: () => ChatDowloadContainer,
  ChatLink: () => ChatLink
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorText, colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorText(v) {
    colorText = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 1);
const ChatDowloadContainer = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  color: ", ";\n  word-break: break-word;\n"])), colorText);
const ChatLink = styled.a(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  color: ", ";\n"])), colorPrimary);
module.exportDefault({
  ChatDowloadContainer,
  ChatLink
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"text-content":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-content/text-content/component. //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let ReactMarkdown;
module.link("react-markdown", {
  default(v) {
    ReactMarkdown = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
const ChatMessageTextContent = _ref => {
  let {
    text,
    emphasizedMessage,
    systemMsg
  } = _ref;
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore - temporary, while meteor exists in the project
  const {
    allowedElements
  } = window.meetingClientSettings.public.chat;
  return /*#__PURE__*/React.createElement(Styled.ChatMessage, {
    systemMsg: systemMsg,
    emphasizedMessage: emphasizedMessage,
    "data-test": "messageContent"
  }, /*#__PURE__*/React.createElement(ReactMarkdown, {
    linkTarget: "_blank",
    allowedElements: allowedElements,
    unwrapDisallowed: true
  }, text));
};
module.exportDefault(ChatMessageTextContent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-content/text-content/styles.ts  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  ChatMessage: () => ChatMessage
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let systemMessageBackgroundColor, systemMessageBorderColor, colorText;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  systemMessageBackgroundColor(v) {
    systemMessageBackgroundColor = v;
  },
  systemMessageBorderColor(v) {
    systemMessageBorderColor = v;
  },
  colorText(v) {
    colorText = v;
  }
}, 1);
let fontSizeBase, btnFontWeight;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  btnFontWeight(v) {
    btnFontWeight = v;
  }
}, 2);
const ChatMessage = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  flex: 1;\n  display: flex;\n  flex-flow: row;\n  flex-direction: column;\n  color: ", ";\n  word-break: break-word;\n  ", "\n  ", "\n\n  & img {\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  & p {\n    margin: 0;\n    white-space: pre-wrap;\n  }\n\n  & code {\n    white-space: pre-wrap;\n  }\n"])), colorText, _ref => {
  let {
    systemMsg
  } = _ref;
  return systemMsg && "\n  background: ".concat(systemMessageBackgroundColor, ";\n  border: 1px solid ").concat(systemMessageBorderColor, ";\n  font-weight: ").concat(btnFontWeight, ";\n  padding: ").concat(fontSizeBase, ";\n  text-color: #1f252b;\n  margin-top: 0;\n  margin-bottom: 0;\n  overflow-wrap: break-word;\n  ");
}, _ref2 => {
  let {
    emphasizedMessage
  } = _ref2;
  return emphasizedMessage && "\n    font-weight: bold;\n  ";
});
module.exportDefault({
  ChatMessage
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"message-header":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-header/component.tsx            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useIntl, defineMessages, FormattedTime;
module.link("react-intl", {
  useIntl(v) {
    useIntl = v;
  },
  defineMessages(v) {
    defineMessages = v;
  },
  FormattedTime(v) {
    FormattedTime = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
const intlMessages = defineMessages({
  offline: {
    id: 'app.chat.offline',
    description: 'Offline'
  }
});
const ChatMessageHeader = _ref => {
  let {
    sameSender,
    name,
    isOnline,
    dateTime
  } = _ref;
  const intl = useIntl();
  if (sameSender) return null;
  return /*#__PURE__*/React.createElement(Styled.HeaderContent, null, /*#__PURE__*/React.createElement(Styled.ChatHeaderText, null, /*#__PURE__*/React.createElement(Styled.ChatUserName, {
    isOnline: isOnline
  }, name), isOnline ? null : /*#__PURE__*/React.createElement(Styled.ChatUserOffline, null, "(".concat(intl.formatMessage(intlMessages.offline), ")")), /*#__PURE__*/React.createElement(Styled.ChatTime, null, /*#__PURE__*/React.createElement(FormattedTime, {
    value: dateTime
  }))));
};
module.exportDefault(ChatMessageHeader);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-header/styles.ts                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  HeaderContent: () => HeaderContent,
  ChatUserName: () => ChatUserName,
  ChatUserOffline: () => ChatUserOffline,
  ChatTime: () => ChatTime,
  ChatHeaderText: () => ChatHeaderText
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorHeading, palettePlaceholderText, colorGrayLight;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorHeading(v) {
    colorHeading = v;
  },
  palettePlaceholderText(v) {
    palettePlaceholderText = v;
  },
  colorGrayLight(v) {
    colorGrayLight = v;
  }
}, 1);
let lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 2);
const HeaderContent = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  width: 100%;\n"])));
const ChatUserName = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  min-width: 0;\n  font-weight: 600;\n  position: relative;\n\n  margin-right: calc(", " / 2);\n\n  min-width: 0;\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ", "\n\n  ", "\n"])), lineHeightComputed, _ref => {
  let {
    isOnline
  } = _ref;
  return isOnline && "\n    color: ".concat(colorHeading, ";\n  ");
}, _ref2 => {
  let {
    isOnline
  } = _ref2;
  return !isOnline && "\n    text-transform: capitalize;\n    font-style: italic;\n\n    & > span {\n      text-align: right;\n      padding: 0 .1rem 0 0;\n\n      [dir=\"rtl\"] & {\n        text-align: left;\n        padding: 0 0 0 .1rem;\n      }\n    }\n  ";
});
const ChatUserOffline = styled.span(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-weight: 100;\n  text-transform: lowercase;\n  font-style: italic;\n  font-size: 90%;\n  line-height: 1;\n  user-select: none;\n"])), colorGrayLight);
const ChatTime = styled.time(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  flex-shrink: 0;\n  flex-grow: 0;\n  flex-basis: 3.5rem;\n  color: ", ";\n  text-transform: uppercase;\n  font-size: 75%;\n  [dir='rtl'] & {\n    margin: 0 calc(", " / 2) 0 0;\n  }\n\n  & > span {\n    vertical-align: sub;\n  }\n"])), palettePlaceholderText, lineHeightComputed);
const ChatHeaderText = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: baseline;\n  width: 100%;\n"])));
module.exportDefault({
  HeaderContent,
  ChatTime,
  ChatUserOffline,
  ChatUserName,
  ChatHeaderText
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"message-read-confirmation":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-read-confirmation/component.tsx //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useIntl, defineMessages;
module.link("react-intl", {
  useIntl(v) {
    useIntl = v;
  },
  defineMessages(v) {
    defineMessages = v;
  }
}, 1);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 2);
let Tooltip;
module.link("/imports/ui/components/common/tooltip/component", {
  default(v) {
    Tooltip = v;
  }
}, 3);
let ReadIcon, IconWrapper;
module.link("./styles", {
  ReadIcon(v) {
    ReadIcon = v;
  },
  IconWrapper(v) {
    IconWrapper = v;
  }
}, 4);
const intlMessages = defineMessages({
  messageReadLabel: {
    id: 'app.chat.messageRead',
    description: 'Label for the message read indicator'
  }
});
const CONFIRMATION_READ_ICON = 'check';
const MessageReadConfirmation = _ref => {
  var _message$user;
  let {
    message
  } = _ref;
  const intl = useIntl();
  const isFromMe = Auth.userID === (message === null || message === void 0 ? void 0 : (_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.userId);
  if (!isFromMe || !message.recipientHasSeen) return null;
  return /*#__PURE__*/React.createElement(Tooltip, {
    title: intl.formatMessage(intlMessages.messageReadLabel)
  }, /*#__PURE__*/React.createElement(IconWrapper, null, /*#__PURE__*/React.createElement(ReadIcon, {
    iconName: CONFIRMATION_READ_ICON
  })));
};
module.exportDefault(MessageReadConfirmation);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-read-confirmation/styles.ts     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  ReadIcon: () => ReadIcon,
  IconWrapper: () => IconWrapper
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 1);
let Icon;
module.link("/imports/ui/components/common/icon/icon-ts/component", {
  default(v) {
    Icon = v;
  }
}, 2);
const ReadIcon = styled(Icon)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  color: ", ";\n"])), colorPrimary);
const IconWrapper = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/component.tsx                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback, useEffect, useMemo;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let ChatMessageHeader;
module.link("./message-header/component", {
  default(v) {
    ChatMessageHeader = v;
  }
}, 2);
let ChatMessageTextContent;
module.link("./message-content/text-content/component", {
  default(v) {
    ChatMessageTextContent = v;
  }
}, 3);
let ChatPollContent;
module.link("./message-content/poll-content/component", {
  default(v) {
    ChatPollContent = v;
  }
}, 4);
let ChatMessagePresentationContent;
module.link("./message-content/presentation-content/component", {
  default(v) {
    ChatMessagePresentationContent = v;
  }
}, 5);
let ChatWrapper, ChatContent, ChatAvatar, MessageItemWrapper;
module.link("./styles", {
  ChatWrapper(v) {
    ChatWrapper = v;
  },
  ChatContent(v) {
    ChatContent = v;
  },
  ChatAvatar(v) {
    ChatAvatar = v;
  },
  MessageItemWrapper(v) {
    MessageItemWrapper = v;
  }
}, 6);
let ChatMessageType;
module.link("/imports/ui/core/enums/chat", {
  ChatMessageType(v) {
    ChatMessageType = v;
  }
}, 7);
let MessageReadConfirmation;
module.link("./message-read-confirmation/component", {
  default(v) {
    MessageReadConfirmation = v;
  }
}, 8);
const intlMessages = defineMessages({
  pollResult: {
    id: 'app.chat.pollResult',
    description: 'used in place of user name who published poll to chat'
  },
  systemLabel: {
    id: 'app.toast.chat.system',
    description: 'presentation area element label'
  },
  chatClear: {
    id: 'app.chat.clearPublicChatMessage',
    description: 'message of when clear the public chat'
  },
  userAway: {
    id: 'app.chat.away',
    description: 'message when user is away'
  },
  userNotAway: {
    id: 'app.chat.notAway',
    description: 'message when user is no longer away'
  }
});
function isInViewport(el) {
  const rect = el.getBoundingClientRect();
  return rect.top <= (window.innerHeight || document.documentElement.clientHeight) && rect.bottom >= 0;
}
const messageRef = /*#__PURE__*/React.createRef();
const ChatMesssage = _ref => {
  var _previousMessage$user, _message$user, _message$user5, _message$user6, _message$user$isOnlin, _message$user7;
  let {
    previousMessage,
    lastSenderPreviousPage,
    scrollRef,
    message,
    setMessagesRequestedFromPlugin,
    markMessageAsSeen,
    messageReadFeedbackEnabled
  } = _ref;
  const intl = useIntl();
  const markMessageAsSeenOnScrollEnd = useCallback(() => {
    if (messageRef.current && isInViewport(messageRef.current)) {
      markMessageAsSeen(message);
    }
  }, [message, messageRef]);
  const messageContentRef = /*#__PURE__*/React.createRef();
  useEffect(() => {
    setMessagesRequestedFromPlugin(messages => {
      if (messageContentRef.current && !messages.some(m => m.messageId === message.messageId)) {
        messages.push({
          messageId: message.messageId,
          message: messageContentRef.current
        });
      }
      return messages;
    });
  }, [messageContentRef]);
  useEffect(() => {
    const callbackFunction = () => {
      if (messageRef.current && isInViewport(messageRef.current)) {
        markMessageAsSeen(message); // Pass the 'message' argument here
      }
    };

    if (message && scrollRef.current && messageRef.current) {
      if (isInViewport(messageRef.current)) {
        markMessageAsSeen(message);
      } else {
        scrollRef.current.addEventListener('scrollend', callbackFunction);
      }
    }
    return () => {
      var _scrollRef$current;
      scrollRef === null || scrollRef === void 0 ? void 0 : (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.removeEventListener('scrollend', callbackFunction);
    };
  }, [message, messageRef, markMessageAsSeenOnScrollEnd]);
  if (!message) return null;
  const sameSender = ((previousMessage === null || previousMessage === void 0 ? void 0 : (_previousMessage$user = previousMessage.user) === null || _previousMessage$user === void 0 ? void 0 : _previousMessage$user.userId) || lastSenderPreviousPage) === (message === null || message === void 0 ? void 0 : (_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.userId);
  const isSystemSender = message.messageType === ChatMessageType.BREAKOUT_ROOM;
  const dateTime = new Date(message === null || message === void 0 ? void 0 : message.createdAt);
  const formattedTime = intl.formatTime(dateTime, {
    hour: 'numeric',
    minute: 'numeric'
  });
  const msgTime = formattedTime;
  const clearMessage = "".concat(msgTime, " ").concat(intl.formatMessage(intlMessages.chatClear));
  const messageContent = useMemo(() => {
    var _message$user2, _message$user3, _message$user4;
    switch (message.messageType) {
      case ChatMessageType.POLL:
        return {
          name: intl.formatMessage(intlMessages.pollResult),
          color: '#3B48A9',
          isModerator: true,
          component: /*#__PURE__*/React.createElement(ChatPollContent, {
            metadata: message.messageMetadata
          }),
          avatarIcon: 'icon-bbb-polling'
        };
      case ChatMessageType.PRESENTATION:
        return {
          name: '',
          color: '#0F70D7',
          isModerator: false,
          isPresentationUpload: true,
          component: /*#__PURE__*/React.createElement(ChatMessagePresentationContent, {
            metadata: message.messageMetadata
          }),
          avatarIcon: 'icon-bbb-download'
        };
      case ChatMessageType.CHAT_CLEAR:
        return {
          name: intl.formatMessage(intlMessages.systemLabel),
          color: '',
          isModerator: false,
          isSystemSender: true,
          component: /*#__PURE__*/React.createElement(ChatMessageTextContent, {
            emphasizedMessage: false,
            text: clearMessage,
            systemMsg: true
          })
        };
      case ChatMessageType.BREAKOUT_ROOM:
        return {
          name: message.senderName,
          color: '#0F70D7',
          isModerator: true,
          isSystemSender: true,
          component: /*#__PURE__*/React.createElement(ChatMessageTextContent, {
            systemMsg: false,
            emphasizedMessage: true,
            text: message.message
          })
        };
      case ChatMessageType.API:
        return {
          name: message.senderName,
          color: '#0F70D7',
          isModerator: true,
          isSystemSender: true,
          component: /*#__PURE__*/React.createElement(ChatMessageTextContent, {
            systemMsg: true,
            emphasizedMessage: true,
            text: message.message
          })
        };
      case ChatMessageType.USER_AWAY_STATUS_MSG:
        {
          const {
            away
          } = JSON.parse(message.messageMetadata);
          const awayMessage = away ? "".concat(intl.formatMessage(intlMessages.userAway)) : "".concat(intl.formatMessage(intlMessages.userNotAway));
          return {
            name: message.senderName,
            color: '#0F70D7',
            isModerator: true,
            isSystemSender: true,
            component: /*#__PURE__*/React.createElement(ChatMessageTextContent, {
              emphasizedMessage: false,
              text: awayMessage,
              systemMsg: true
            })
          };
        }
      case ChatMessageType.TEXT:
      default:
        return {
          name: (_message$user2 = message.user) === null || _message$user2 === void 0 ? void 0 : _message$user2.name,
          color: (_message$user3 = message.user) === null || _message$user3 === void 0 ? void 0 : _message$user3.color,
          isModerator: (_message$user4 = message.user) === null || _message$user4 === void 0 ? void 0 : _message$user4.isModerator,
          isSystemSender: ChatMessageType.BREAKOUT_ROOM,
          component: /*#__PURE__*/React.createElement(ChatMessageTextContent, {
            emphasizedMessage: message.chatEmphasizedText,
            text: message.message,
            systemMsg: false
          })
        };
    }
  }, []);
  return /*#__PURE__*/React.createElement(ChatWrapper, {
    isSystemSender: isSystemSender,
    sameSender: sameSender,
    ref: messageRef,
    isPresentationUpload: messageContent.isPresentationUpload
  }, (!(message !== null && message !== void 0 && message.user) || !sameSender) && message.messageType !== ChatMessageType.USER_AWAY_STATUS_MSG && message.messageType !== ChatMessageType.API && message.messageType !== ChatMessageType.CHAT_CLEAR && /*#__PURE__*/React.createElement(ChatAvatar, {
    avatar: (_message$user5 = message.user) === null || _message$user5 === void 0 ? void 0 : _message$user5.avatar,
    color: messageContent.color,
    moderator: messageContent.isModerator
  }, !messageContent.avatarIcon ? !message.user || (((_message$user6 = message.user) === null || _message$user6 === void 0 ? void 0 : _message$user6.avatar.length) === 0 ? messageContent.name.toLowerCase().slice(0, 2) : '') : /*#__PURE__*/React.createElement("i", {
    className: messageContent.avatarIcon
  })), /*#__PURE__*/React.createElement(ChatContent, {
    ref: messageContentRef,
    sameSender: message !== null && message !== void 0 && message.user ? sameSender : false,
    "data-chat-message-id": message === null || message === void 0 ? void 0 : message.messageId
  }, message.messageType !== ChatMessageType.CHAT_CLEAR && /*#__PURE__*/React.createElement(ChatMessageHeader, {
    sameSender: message !== null && message !== void 0 && message.user ? sameSender : false,
    name: messageContent.name,
    isOnline: (_message$user$isOnlin = (_message$user7 = message.user) === null || _message$user7 === void 0 ? void 0 : _message$user7.isOnline) !== null && _message$user$isOnlin !== void 0 ? _message$user$isOnlin : true,
    dateTime: dateTime
  }), /*#__PURE__*/React.createElement(MessageItemWrapper, null, messageContent.component, messageReadFeedbackEnabled && /*#__PURE__*/React.createElement(MessageReadConfirmation, {
    message: message
  }))));
};
module.exportDefault(ChatMesssage);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/styles.ts                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  ChatWrapper: () => ChatWrapper,
  ChatContent: () => ChatContent,
  ChatHeader: () => ChatHeader,
  ChatAvatar: () => ChatAvatar,
  MessageItemWrapper: () => MessageItemWrapper
});
let styled, css;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  }
}, 0);
let borderSize, userIndicatorsOffset, smPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  userIndicatorsOffset(v) {
    userIndicatorsOffset = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  }
}, 1);
let lineHeightComputed, fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  },
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 2);
let colorWhite, userListBg, colorSuccess;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  userListBg(v) {
    userListBg = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  }
}, 3);
let Header;
module.link("/imports/ui/components/common/control-header/component", {
  default(v) {
    Header = v;
  }
}, 4);
const ChatWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  pointer-events: auto;\n  [dir='rtl'] & {\n    direction: rtl;\n  }\n  display: flex;\n  flex-flow: row;\n  position: relative;\n  ", "\n  ", "\n  ", "\n  [dir=\"rtl\"] & {\n    margin: ", " ", " 0 0;\n  }\n  font-size: ", ";\n  ", "\n"])), _ref => {
  let {
    isPresentationUpload
  } = _ref;
  return isPresentationUpload && "\n      border-left: 2px solid #0F70D7;\n      margin-top: 1rem;\n      padding: 0.5rem;\n      word-break: break-word;\n      background-color: #F3F6F9;\n    ";
}, _ref2 => {
  let {
    sameSender
  } = _ref2;
  return sameSender && "\n    flex: 1;\n    margin: ".concat(borderSize, " 0 0 ").concat(borderSize, ";\n    margin-top: calc(").concat(lineHeightComputed, " / 3);\n  ");
}, _ref3 => {
  let {
    sameSender
  } = _ref3;
  return !sameSender && "\n    padding-top:".concat(lineHeightComputed, ";\n  ");
}, borderSize, borderSize, fontSizeBase, _ref4 => {
  let {
    isSystemSender
  } = _ref4;
  return isSystemSender && "\n    background-color: #fef9f1;\n    border-left: 2px solid #f5c67f;\n    border-radius: 0px 3px 3px 0px;\n    padding: 8px 2px;\n  ";
});
const ChatContent = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  width: 100%;\n  \n  ", "\n"])), _ref5 => {
  let {
    sameSender
  } = _ref5;
  return sameSender && "\n    margin-left: 2.6rem;\n  ";
});
const ChatHeader = styled(Header)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n"])), _ref6 => {
  let {
    isRTL
  } = _ref6;
  return isRTL && "\n    padding-left: ".concat(smPaddingX, ";\n  ");
}, _ref7 => {
  let {
    isRTL
  } = _ref7;
  return !isRTL && "\n    padding-right: ".concat(smPaddingX, ";\n  ");
});
const ChatAvatar = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  flex: 0 0 2.25rem;\n  margin: 0px calc(0.5rem) 0px 0px;\n  box-flex: 0;\n  position: relative;\n  height: 2.25rem;\n  width: 2.25rem;\n  border-radius: 50%;\n  text-align: center;\n  font-size: .85rem;\n  border: 2px solid transparent;\n  user-select: none;\n  ", "\n  }\n\n  &:after,\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 0;\n    height: 0;\n    padding-top: .5rem;\n    padding-right: 0;\n    padding-left: 0;\n    padding-bottom: 0;\n    color: inherit;\n    top: auto;\n    left: auto;\n    bottom: ", ";\n    right: ", ";\n    border: 1.5px solid ", ";\n    border-radius: 50%;\n    background-color: ", ";\n    color: ", ";\n    opacity: 0;\n    font-family: 'bbb-icons';\n    font-size: .65rem;\n    line-height: 0;\n    text-align: center;\n    vertical-align: middle;\n    letter-spacing: -.65rem;\n    z-index: 1;\n\n    [dir=\"rtl\"] & {\n      left: ", ";\n      right: auto;\n      padding-right: .65rem;\n      padding-left: 0;\n    }\n  }\n\n  ", "\n  \n  // ================ image ================\n  ", "\n  // ================ image ================\n\n  // ================ content ================\n  color: ", ";\n  font-size: 110%;\n  text-transform: capitalize;\n  display: flex;\n  justify-content: center;\n  align-items:center;\n  // ================ content ================\n  \n  & .react-loading-skeleton {\n    height: 2.25rem;\n    width: 2.25rem;\n  }\n"])), _ref8 => {
  let {
    color
  } = _ref8;
  return css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n    background-color: ", ";\n  "])), color);
}, userIndicatorsOffset, userIndicatorsOffset, userListBg, colorSuccess, colorWhite, userIndicatorsOffset, _ref9 => {
  let {
    moderator
  } = _ref9;
  return moderator && "\n    border-radius: 5px;\n  ";
}, _ref10 => {
  let {
    avatar,
    emoji,
    color
  } = _ref10;
  return (avatar === null || avatar === void 0 ? void 0 : avatar.length) !== 0 && !emoji && css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n      background-image: url(", ");\n      background-repeat: no-repeat;\n      background-size: contain;\n      border: 2px solid ", ";\n    "])), avatar, color);
}, colorWhite);
const MessageItemWrapper = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/component.tsx                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useContext, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 2);
let DomElementManipulationHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/dom-element-manipulation/enums", {
  DomElementManipulationHooks(v) {
    DomElementManipulationHooks = v;
  }
}, 3);
let CHAT_MESSAGE_PUBLIC_SUBSCRIPTION, CHAT_MESSAGE_PRIVATE_SUBSCRIPTION;
module.link("./queries", {
  CHAT_MESSAGE_PUBLIC_SUBSCRIPTION(v) {
    CHAT_MESSAGE_PUBLIC_SUBSCRIPTION = v;
  },
  CHAT_MESSAGE_PRIVATE_SUBSCRIPTION(v) {
    CHAT_MESSAGE_PRIVATE_SUBSCRIPTION = v;
  }
}, 4);
let ChatMessage;
module.link("./chat-message/component", {
  default(v) {
    ChatMessage = v;
  }
}, 5);
let useCreateUseSubscription;
module.link("/imports/ui/core/hooks/createUseSubscription", {
  useCreateUseSubscription(v) {
    useCreateUseSubscription = v;
  }
}, 6);
let setLoadedMessageGathering;
module.link("/imports/ui/core/hooks/useLoadedChatMessages", {
  setLoadedMessageGathering(v) {
    setLoadedMessageGathering = v;
  }
}, 7);
let ChatLoading;
module.link("../../component", {
  ChatLoading(v) {
    ChatLoading = v;
  }
}, 8);
const ChatListPage = _ref => {
  let {
    messages,
    messageReadFeedbackEnabled,
    lastSenderPreviousPage,
    page,
    markMessageAsSeen,
    scrollRef
  } = _ref;
  const {
    domElementManipulationMessageIds
  } = useContext(PluginsContext);
  const [messagesRequestedFromPlugin, setMessagesRequestedFromPlugin] = useState([]);
  useEffect(() => {
    const dataToSend = messagesRequestedFromPlugin.filter(message => domElementManipulationMessageIds.indexOf(message.messageId) !== -1);
    window.dispatchEvent(new CustomEvent(HookEvents.UPDATED, {
      detail: {
        hook: DomElementManipulationHooks.CHAT_MESSAGE,
        data: dataToSend
      }
    }));
  }, [domElementManipulationMessageIds]);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-filename-extension
    React.createElement("div", {
      key: "messagePage-".concat(page),
      id: "".concat(page)
    }, messages.map((message, index, messagesArray) => {
      const previousMessage = messagesArray[index - 1];
      return /*#__PURE__*/React.createElement(ChatMessage, {
        key: message.createdAt,
        message: message,
        previousMessage: previousMessage,
        setMessagesRequestedFromPlugin: setMessagesRequestedFromPlugin,
        lastSenderPreviousPage: !previousMessage ? lastSenderPreviousPage : null,
        scrollRef: scrollRef,
        markMessageAsSeen: markMessageAsSeen,
        messageReadFeedbackEnabled: messageReadFeedbackEnabled
      });
    }))
  );
};
const ChatListPageContainer = _ref2 => {
  var _chatMessageData$user;
  let {
    page,
    pageSize,
    setLastSender,
    lastSenderPreviousPage,
    chatId,
    markMessageAsSeen,
    scrollRef
  } = _ref2;
  // @ts-ignore - temporary, while meteor exists in the project
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  const PUBLIC_GROUP_CHAT_KEY = CHAT_CONFIG.public_group_id;
  const PRIVATE_MESSAGE_READ_FEEDBACK_ENABLED = CHAT_CONFIG.privateMessageReadFeedback.enabled;
  const isPublicChat = chatId === PUBLIC_GROUP_CHAT_KEY;
  const chatQuery = isPublicChat ? CHAT_MESSAGE_PUBLIC_SUBSCRIPTION : CHAT_MESSAGE_PRIVATE_SUBSCRIPTION;
  const defaultVariables = {
    offset: page * pageSize,
    limit: pageSize
  };
  const variables = isPublicChat ? defaultVariables : _objectSpread(_objectSpread({}, defaultVariables), {}, {
    requestedChatId: chatId
  });
  const isPrivateReadFeedbackEnabled = !isPublicChat && PRIVATE_MESSAGE_READ_FEEDBACK_ENABLED;
  const useChatMessageSubscription = useCreateUseSubscription(chatQuery, variables, true);
  const {
    data: chatMessageData
  } = useChatMessageSubscription(msg => msg);
  useEffect(() => {
    // component will unmount
    return () => {
      setLoadedMessageGathering(page, []);
    };
  }, []);
  if (!chatMessageData) return null;
  if (chatMessageData.length > 0 && chatId !== chatMessageData[0].chatId) return /*#__PURE__*/React.createElement(ChatLoading, {
    isRTL: document.dir === 'rtl'
  });
  if (chatMessageData.length > 0 && (_chatMessageData$user = chatMessageData[chatMessageData.length - 1].user) !== null && _chatMessageData$user !== void 0 && _chatMessageData$user.userId) {
    var _chatMessageData$user2;
    setLastSender(page, (_chatMessageData$user2 = chatMessageData[chatMessageData.length - 1].user) === null || _chatMessageData$user2 === void 0 ? void 0 : _chatMessageData$user2.userId);
  }
  setLoadedMessageGathering(page, chatMessageData);
  return /*#__PURE__*/React.createElement(ChatListPage, {
    messages: chatMessageData,
    lastSenderPreviousPage: lastSenderPreviousPage,
    messageReadFeedbackEnabled: isPrivateReadFeedbackEnabled,
    page: page,
    markMessageAsSeen: markMessageAsSeen,
    scrollRef: scrollRef
  });
};
module.exportDefault(ChatListPageContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/page/queries.ts                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  CHAT_MESSAGE_PUBLIC_SUBSCRIPTION: () => CHAT_MESSAGE_PUBLIC_SUBSCRIPTION,
  CHAT_MESSAGE_PRIVATE_SUBSCRIPTION: () => CHAT_MESSAGE_PRIVATE_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CHAT_MESSAGE_PUBLIC_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription chatMessages($limit: Int!, $offset: Int!) {\n    chat_message_public(limit: $limit, offset: $offset, order_by: { createdAt: asc }) {\n      user {\n        name\n        userId\n        avatar\n        isOnline\n        isModerator\n        color\n      }\n      messageType\n      chatEmphasizedText\n      chatId\n      message\n      messageId\n      createdAt\n      messageMetadata\n      senderName\n      senderRole\n    }\n  }\n"])));
const CHAT_MESSAGE_PRIVATE_SUBSCRIPTION = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  subscription chatMessages($limit: Int!, $offset: Int!, $requestedChatId: String!) {\n    chat_message_private(\n      limit: $limit\n      offset: $offset\n      where: { chatId: { _eq: $requestedChatId } }\n      order_by: { createdAt: asc }\n    ) {\n      user {\n        name\n        userId\n        avatar\n        isOnline\n        isModerator\n        color\n      }\n      chatId\n      message\n      messageType\n      chatEmphasizedText\n      messageId\n      createdAt\n      messageMetadata\n      recipientHasSeen\n    }\n  }\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/component.tsx                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useCallback, useEffect, useState, useMemo;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let makeVar, useMutation;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let ChatPopupContainer;
module.link("/imports/ui/components/chat/chat-graphql/chat-popup/component", {
  default(v) {
    ChatPopupContainer = v;
  }
}, 3);
let useChat;
module.link("/imports/ui/core/hooks/useChat", {
  default(v) {
    useChat = v;
  }
}, 4);
let useIntersectionObserver;
module.link("/imports/ui/hooks/useIntersectionObserver", {
  default(v) {
    useIntersectionObserver = v;
  }
}, 5);
let ChatEvents;
module.link("/imports/ui/core/enums/chat", {
  ChatEvents(v) {
    ChatEvents = v;
  }
}, 6);
let layoutSelect;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 7);
let ChatListPage;
module.link("./page/component", {
  default(v) {
    ChatListPage = v;
  }
}, 8);
let LAST_SEEN_MUTATION;
module.link("./queries", {
  default(v) {
    LAST_SEEN_MUTATION = v;
  }
}, 9);
let ButtonLoadMore, MessageList, MessageListWrapper, UnreadButton, ChatMessages;
module.link("./styles", {
  ButtonLoadMore(v) {
    ButtonLoadMore = v;
  },
  MessageList(v) {
    MessageList = v;
  },
  MessageListWrapper(v) {
    MessageListWrapper = v;
  },
  UnreadButton(v) {
    UnreadButton = v;
  },
  ChatMessages(v) {
    ChatMessages = v;
  }
}, 10);
let useReactiveRef;
module.link("/imports/ui/hooks/useReactiveRef", {
  default(v) {
    useReactiveRef = v;
  }
}, 11);
let useStickyScroll;
module.link("/imports/ui/hooks/useStickyScroll", {
  default(v) {
    useStickyScroll = v;
  }
}, 12);
const PAGE_SIZE = 50;
const intlMessages = defineMessages({
  loadMoreButtonLabel: {
    id: 'app.chat.loadMoreButtonLabel',
    description: 'Label for load more button'
  },
  moreMessages: {
    id: 'app.chat.moreMessages',
    description: 'Chat message when the user has unread messages below the scroll'
  }
});
const isElement = el => {
  return el instanceof HTMLElement;
};
const isMap = map => {
  return map instanceof Map;
};
let elHeight = 0;
const scrollObserver = new ResizeObserver(entries => {
  entries.forEach(entry => {
    const el = entry.target;
    if (isElement(el) && isElement(el.parentElement)) {
      if (el.offsetHeight > elHeight) {
        elHeight = el.offsetHeight;
        el.parentElement.scrollTop = el.parentElement.scrollHeight + el.parentElement.clientHeight;
      } else {
        elHeight = 0;
      }
    }
  });
});
const setLastSender = lastSenderPerPage => {
  return (page, sender) => {
    if (isMap(lastSenderPerPage)) {
      lastSenderPerPage.set(page, sender);
    }
  };
};
const lastSeenQueue = makeVar({});
const setter = makeVar({});
const lastSeenAtVar = makeVar({});
const chatIdVar = makeVar('');
const dispatchLastSeen = () => setTimeout(() => {
  const lastSeenQueueValue = lastSeenQueue();
  if (lastSeenQueueValue[chatIdVar()]) {
    var _lastSeenAtVarValue$c;
    const lastTimeQueue = Array.from(lastSeenQueueValue[chatIdVar()]);
    const lastSeenTime = Math.max(...lastTimeQueue);
    const lastSeenAtVarValue = lastSeenAtVar();
    if (lastSeenTime > ((_lastSeenAtVarValue$c = lastSeenAtVarValue[chatIdVar()]) !== null && _lastSeenAtVarValue$c !== void 0 ? _lastSeenAtVarValue$c : 0)) {
      lastSeenAtVar(_objectSpread(_objectSpread({}, lastSeenAtVar()), {}, {
        [chatIdVar()]: lastSeenTime
      }));
      setter()[chatIdVar()](new Date(lastSeenTime).toISOString());
    }
  }
}, 500);
const ChatMessageList = _ref => {
  let {
    totalPages,
    chatId,
    setMessageAsSeenMutation,
    totalUnread,
    isRTL
  } = _ref;
  const intl = useIntl();
  const contentRef = React.useRef(null);
  // I used a ref here because I don't want to re-render the component when the last sender changes
  const lastSenderPerPage = React.useRef(new Map());
  const sentinelRef = React.useRef(null);
  const {
    ref: messageListRef,
    current: currentMessageList
  } = useReactiveRef(null);
  const [userLoadedBackUntilPage, setUserLoadedBackUntilPage] = useState(null);
  const [lastMessageCreatedAt, setLastMessageCreatedAt] = useState('');
  const [followingTail, setFollowingTail] = React.useState(true);
  const {
    childRefProxy: sentinelRefProxy,
    intersecting: isSentinelVisible,
    parentRefProxy: messageListRefProxy
  } = useIntersectionObserver(messageListRef, sentinelRef);
  const {
    startObserving,
    stopObserving
  } = useStickyScroll(currentMessageList);
  useEffect(() => {
    if (isSentinelVisible) startObserving();else stopObserving();
    toggleFollowingTail(isSentinelVisible);
  }, [isSentinelVisible]);
  useEffect(() => {
    setter(_objectSpread(_objectSpread({}, setter()), {}, {
      [chatId]: setLastMessageCreatedAt
    }));
    chatIdVar(chatId);
    setLastMessageCreatedAt('');
  }, [chatId]);
  useEffect(() => {
    if (lastMessageCreatedAt !== '') {
      setMessageAsSeenMutation({
        variables: {
          chatId,
          lastSeenAt: lastMessageCreatedAt
        }
      });
    }
  }, [lastMessageCreatedAt]);
  const markMessageAsSeen = useCallback(message => {
    if (new Date(message.createdAt).getTime() > new Date(lastMessageCreatedAt || 0).getTime()) {
      dispatchLastSeen();
      const lastSeenQueueValue = lastSeenQueue();
      if (lastSeenQueueValue[chatId]) {
        lastSeenQueueValue[chatId].add(new Date(message.createdAt).getTime());
        lastSeenQueue(lastSeenQueueValue);
      } else {
        lastSeenQueueValue[chatId] = new Set([new Date(message.createdAt).getTime()]);
        lastSeenQueue(lastSeenQueueValue);
      }
    }
  }, [lastMessageCreatedAt, chatId]);
  const setScrollToTailEventHandler = () => {
    toggleFollowingTail(isSentinelVisible);
  };
  const toggleFollowingTail = toggle => {
    setFollowingTail(toggle);
    if (isElement(contentRef.current)) {
      if (toggle) {
        scrollObserver.observe(contentRef.current);
      } else {
        if (userLoadedBackUntilPage === null) {
          setUserLoadedBackUntilPage(Math.max(totalPages - 2, 0));
        }
        scrollObserver.unobserve(contentRef.current);
      }
    }
  };
  const renderUnreadNotification = useMemo(() => {
    if (totalUnread && !followingTail) {
      return /*#__PURE__*/React.createElement(UnreadButton, {
        "aria-hidden": "true",
        color: "primary",
        size: "sm",
        key: "unread-messages",
        label: intl.formatMessage(intlMessages.moreMessages),
        onClick: () => {
          if (sentinelRef.current) {
            sentinelRef.current.scrollIntoView({
              behavior: 'smooth'
            });
          }
        }
      });
    }
    return null;
  }, [totalUnread, followingTail]);
  useEffect(() => {
    const scrollToTailEventHandler = () => {
      if (isElement(sentinelRef.current)) {
        sentinelRef.current.scrollIntoView();
      }
    };
    window.addEventListener(ChatEvents.SENT_MESSAGE, scrollToTailEventHandler);
    return () => {
      window.removeEventListener(ChatEvents.SENT_MESSAGE, scrollToTailEventHandler);
    };
  }, []);
  useEffect(() => {
    if (followingTail) {
      setUserLoadedBackUntilPage(null);
    }
  }, [followingTail]);
  useEffect(() => {
    if (isElement(sentinelRef.current)) {
      sentinelRef.current.scrollIntoView();
    }
  }, []);
  const firstPageToLoad = userLoadedBackUntilPage !== null ? userLoadedBackUntilPage : Math.max(totalPages - 2, 0);
  const pagesToLoad = totalPages - firstPageToLoad || 1;
  return /*#__PURE__*/React.createElement(React.Fragment, null, [/*#__PURE__*/React.createElement(MessageListWrapper, {
    key: "message-list-wrapper",
    id: "chat-list"
  }, /*#__PURE__*/React.createElement(MessageList, {
    ref: messageListRefProxy,
    onMouseUp: () => {
      setScrollToTailEventHandler();
    },
    onTouchEnd: () => {
      setScrollToTailEventHandler();
    }
  }, /*#__PURE__*/React.createElement("span", null, userLoadedBackUntilPage ? /*#__PURE__*/React.createElement(ButtonLoadMore, {
    onClick: () => {
      if (followingTail) {
        toggleFollowingTail(false);
      }
      setUserLoadedBackUntilPage(userLoadedBackUntilPage - 1);
    }
  }, intl.formatMessage(intlMessages.loadMoreButtonLabel)) : null), /*#__PURE__*/React.createElement(ChatMessages, {
    id: "contentRef",
    ref: contentRef,
    "data-test": "chatMessages",
    isRTL: isRTL
  }, /*#__PURE__*/React.createElement(ChatPopupContainer, null),
  // @ts-ignore
  Array.from({
    length: pagesToLoad
  }, (v, k) => k + firstPageToLoad).map(page => {
    return /*#__PURE__*/React.createElement(ChatListPage, {
      key: "page-".concat(page),
      page: page,
      pageSize: PAGE_SIZE,
      setLastSender: () => setLastSender(lastSenderPerPage.current),
      lastSenderPreviousPage: page ? lastSenderPerPage.current.get(page - 1) : undefined,
      chatId: chatId,
      markMessageAsSeen: markMessageAsSeen,
      scrollRef: messageListRef
    });
  })), /*#__PURE__*/React.createElement("div", {
    ref: sentinelRefProxy,
    style: {
      height: 1,
      background: 'none'
    }
  }))), renderUnreadNotification]);
};
const ChatMessageListContainer = () => {
  const idChatOpen = layoutSelect(i => i.idChatOpen);
  const isRTL = layoutSelect(i => i.isRTL);
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  const PUBLIC_CHAT_KEY = CHAT_CONFIG.public_id;
  const PUBLIC_GROUP_CHAT_KEY = CHAT_CONFIG.public_group_id;
  const isPublicChat = idChatOpen === PUBLIC_CHAT_KEY;
  const chatId = !isPublicChat ? idChatOpen : PUBLIC_GROUP_CHAT_KEY;
  const {
    data: currentChat
  } = useChat(chat => {
    return {
      chatId: chat.chatId,
      totalMessages: chat.totalMessages,
      totalUnread: chat.totalUnread,
      lastSeenAt: chat.lastSeenAt
    };
  }, chatId);
  const [setMessageAsSeenMutation] = useMutation(LAST_SEEN_MUTATION);
  const totalMessages = (currentChat === null || currentChat === void 0 ? void 0 : currentChat.totalMessages) || 0;
  const totalPages = Math.ceil(totalMessages / PAGE_SIZE);
  return /*#__PURE__*/React.createElement(ChatMessageList, {
    totalPages: totalPages,
    chatId: chatId,
    setMessageAsSeenMutation: setMessageAsSeenMutation,
    totalUnread: (currentChat === null || currentChat === void 0 ? void 0 : currentChat.totalUnread) || 0,
    isRTL: isRTL
  });
};
module.exportDefault(ChatMessageListContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/queries.ts                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const LAST_SEEN_MUTATION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation UpdateChatLastSeen($chatId: String, $lastSeenAt: String) {\n    chatSetLastSeen(\n      chatId: $chatId\n      lastSeenAt: $lastSeenAt\n    )\n  }\n"])));
module.exportDefault(LAST_SEEN_MUTATION);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-list/styles.ts                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  MessageListWrapper: () => MessageListWrapper,
  ChatMessages: () => ChatMessages,
  MessageList: () => MessageList,
  ButtonLoadMore: () => ButtonLoadMore,
  UnreadButton: () => UnreadButton
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let mdPaddingX, smPaddingX, borderRadius;
module.link("/imports/ui/stylesheets/styled-components/general", {
  mdPaddingX(v) {
    mdPaddingX = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  borderRadius(v) {
    borderRadius = v;
  }
}, 1);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 2);
let colorGrayDark;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  }
}, 3);
let ButtonElipsis;
module.link("/imports/ui/stylesheets/styled-components/placeholders", {
  ButtonElipsis(v) {
    ButtonElipsis = v;
  }
}, 4);
const MessageListWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: 100%;\n  display: flex;\n  flex-flow: column;\n  flex-shrink: 1;\n  position: relative;\n  overflow-x: hidden;\n  overflow-y: auto;\n  z-index: 2;\n"])));
const ChatMessages = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n\n  padding-bottom: ", ";\n"])), _ref => {
  let {
    isRTL
  } = _ref;
  return isRTL && "\n    padding-left: ".concat(smPaddingX, ";\n  ");
}, _ref2 => {
  let {
    isRTL
  } = _ref2;
  return !isRTL && "\n    padding-right: ".concat(smPaddingX, ";\n  ");
}, smPaddingX);
const MessageList = styled(ScrollboxVertical)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  flex-flow: column;\n  flex-shrink: 1;\n  right: 0 ", " 0 0;\n  padding-top: 0;\n  outline-style: none;\n  overflow-x: hidden;\n\n  [dir='rtl'] & {\n    margin: 0 0 0 auto;\n    padding: 0 0 0 ", ";\n  }\n  display: block;\n"])), mdPaddingX, mdPaddingX);
const ButtonLoadMore = styled.button(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  width: 100%;\n  min-height: 1.5rem;\n  margin-bottom: 0.75rem;\n  background-color: transparent;\n  border-radius: ", ";\n  border: 1px ridge ", ";\n"])), borderRadius, colorGrayDark);
const UnreadButton = styled(ButtonElipsis)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  flex-shrink: 0;\n  width: 100%;\n  text-transform: uppercase;\n  margin-bottom: .25rem;\n  z-index: 3;\n"])));
module.exportDefault({
  MessageListWrapper,
  MessageList,
  UnreadButton,
  ChatMessages
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"alert":{"push-alert":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/alert/push-alert/component.tsx                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let injectNotify;
module.link("/imports/ui/components/common/toast/inject-notify/component", {
  default(v) {
    injectNotify = v;
  }
}, 1);
let PANELS, ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 2);
const ChatPushAlert = props => {
  useEffect(() => {
    showNotify();
  });
  const link = (title, chatId) => {
    const {
      layoutContextDispatch
    } = props;
    return /*#__PURE__*/React.createElement("div", {
      key: chatId,
      role: "button",
      tabIndex: 0,
      onClick: () => {
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: true
        });
        layoutContextDispatch({
          type: ACTIONS.SET_ID_CHAT_OPEN,
          value: chatId
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.CHAT
        });
      },
      onKeyDown: () => null
    }, title);
  };
  const showNotify = () => {
    const {
      notify,
      chatId,
      title,
      content,
      alertDuration
    } = props;
    return notify(link(title, chatId), 'info', 'chat', {
      autoClose: alertDuration
    }, link(content, chatId), true);
  };
  return null;
};
module.exportDefault(injectNotify(ChatPushAlert));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/alert/component.tsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let isEqual;
module.link("radash", {
  isEqual(v) {
    isEqual = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let layoutSelect, layoutSelectInput, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 3);
let PANELS;
module.link("/imports/ui/components/layout/enums", {
  PANELS(v) {
    PANELS = v;
  }
}, 4);
let usePreviousValue;
module.link("/imports/ui/hooks/usePreviousValue", {
  default(v) {
    usePreviousValue = v;
  }
}, 5);
let stripTags, unescapeHtml;
module.link("/imports/utils/string-utils", {
  stripTags(v) {
    stripTags = v;
  },
  unescapeHtml(v) {
    unescapeHtml = v;
  }
}, 6);
let ChatMessageType;
module.link("/imports/ui/core/enums/chat", {
  ChatMessageType(v) {
    ChatMessageType = v;
  }
}, 7);
let CHAT_MESSAGE_PRIVATE_STREAM, CHAT_MESSAGE_PUBLIC_STREAM;
module.link("./queries", {
  CHAT_MESSAGE_PRIVATE_STREAM(v) {
    CHAT_MESSAGE_PRIVATE_STREAM = v;
  },
  CHAT_MESSAGE_PUBLIC_STREAM(v) {
    CHAT_MESSAGE_PUBLIC_STREAM = v;
  }
}, 8);
let ChatPushAlert;
module.link("./push-alert/component", {
  default(v) {
    ChatPushAlert = v;
  }
}, 9);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 10);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 11);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 12);
const intlMessages = defineMessages({
  appToastChatPublic: {
    id: 'app.toast.chat.public',
    description: 'when entry various message'
  },
  appToastChatPrivate: {
    id: 'app.toast.chat.private',
    description: 'when entry various message'
  },
  appToastChatSystem: {
    id: 'app.toast.chat.system',
    description: 'system for use'
  },
  publicChatClear: {
    id: 'app.chat.clearPublicChatMessage',
    description: 'message of when clear the public chat'
  },
  publicChatMsg: {
    id: 'app.toast.chat.public',
    description: 'public chat toast message title'
  },
  privateChatMsg: {
    id: 'app.toast.chat.private',
    description: 'private chat toast message title'
  },
  pollResults: {
    id: 'app.toast.chat.poll',
    description: 'chat toast message for polls'
  },
  pollResultsClick: {
    id: 'app.toast.chat.pollClick',
    description: 'chat toast click message for polls'
  }
});
const ALERT_DURATION = 4000; // 4 seconds
const ChatAlertGraphql = props => {
  const {
    audioAlertEnabled,
    idChatOpen,
    layoutContextDispatch,
    pushAlertEnabled,
    publicUnreadMessages,
    privateUnreadMessages
  } = props;
  const intl = useIntl();
  const history = useRef(new Set());
  const prevPublicUnreadMessages = usePreviousValue(publicUnreadMessages);
  const prevPrivateUnreadMessages = usePreviousValue(privateUnreadMessages);
  const publicMessagesDidChange = !isEqual(prevPublicUnreadMessages, publicUnreadMessages);
  const privateMessagesDidChange = !isEqual(prevPrivateUnreadMessages, privateUnreadMessages);
  const shouldRenderPublicChatAlerts = publicMessagesDidChange && !!publicUnreadMessages && publicUnreadMessages.length > 0;
  const shouldRenderPrivateChatAlerts = privateMessagesDidChange && !!privateUnreadMessages && privateUnreadMessages.length > 0;
  const shouldPlayAudioAlert = useCallback(m => (m.chatId !== idChatOpen || document.hidden) && !history.current.has(m.messageId), [idChatOpen, history.current]);
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  const PUBLIC_CHAT_ID = CHAT_CONFIG.public_id;
  const PUBLIC_GROUP_CHAT_ID = CHAT_CONFIG.public_group_id;
  useEffect(() => {
    if (shouldRenderPublicChatAlerts) {
      publicUnreadMessages.forEach(m => {
        history.current.add(m.messageId);
      });
    }
    if (shouldRenderPrivateChatAlerts) {
      privateUnreadMessages.forEach(m => {
        history.current.add(m.messageId);
      });
    }
  });
  let playAudioAlert = false;
  if (shouldRenderPublicChatAlerts) {
    playAudioAlert = publicUnreadMessages.some(shouldPlayAudioAlert);
  }
  if (shouldRenderPrivateChatAlerts && !playAudioAlert) {
    playAudioAlert = privateUnreadMessages.some(shouldPlayAudioAlert);
  }
  if (audioAlertEnabled && playAudioAlert) {
    Service.playAlertSound();
  }
  const mapTextContent = msg => {
    if (msg.messageType === ChatMessageType.CHAT_CLEAR) {
      return intl.formatMessage(intlMessages.publicChatClear);
    }
    return unescapeHtml(stripTags(msg.message));
  };
  const createMessage = msg => /*#__PURE__*/React.createElement(Styled.PushMessageContent, null, /*#__PURE__*/React.createElement(Styled.UserNameMessage, null, msg.senderName), /*#__PURE__*/React.createElement(Styled.ContentMessage, null, mapTextContent(msg)));
  const createPollMessage = () => /*#__PURE__*/React.createElement(Styled.PushMessageContent, null, /*#__PURE__*/React.createElement(Styled.UserNameMessage, null, intl.formatMessage(intlMessages.pollResults)), /*#__PURE__*/React.createElement(Styled.ContentMessagePoll, null, intl.formatMessage(intlMessages.pollResultsClick)));
  const renderToast = message => {
    if (history.current.has(message.messageId)) return null;
    if (message.chatId === idChatOpen) return null;
    const messageChatId = message.chatId === PUBLIC_GROUP_CHAT_ID ? PUBLIC_CHAT_ID : message.chatId;
    const isPollResult = message.messageType === ChatMessageType.POLL;
    let content;
    if (isPollResult) {
      content = createPollMessage();
    } else {
      content = createMessage(message);
    }
    return /*#__PURE__*/React.createElement(ChatPushAlert, {
      key: messageChatId,
      chatId: messageChatId,
      content: content,
      title: messageChatId === PUBLIC_CHAT_ID ? /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.appToastChatPublic)) : /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.appToastChatPrivate)),
      alertDuration: ALERT_DURATION,
      layoutContextDispatch: layoutContextDispatch
    });
  };
  return pushAlertEnabled ? [shouldRenderPublicChatAlerts && publicUnreadMessages.map(renderToast), shouldRenderPrivateChatAlerts && privateUnreadMessages.map(renderToast)] : null;
};
const ChatAlertContainerGraphql = props => {
  var _publicMessages$chat_, _privateMessages$chat;
  const cursor = useRef(new Date());
  const {
    data: publicMessages
  } = useDeduplicatedSubscription(CHAT_MESSAGE_PUBLIC_STREAM, {
    variables: {
      createdAt: cursor.current.toISOString()
    }
  });
  const {
    data: privateMessages
  } = useDeduplicatedSubscription(CHAT_MESSAGE_PRIVATE_STREAM, {
    variables: {
      createdAt: cursor.current.toISOString()
    }
  });
  const idChatOpen = layoutSelect(i => i.idChatOpen);
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    sidebarContentPanel
  } = sidebarContent;
  const layoutContextDispatch = layoutDispatch();
  const {
    audioAlertEnabled,
    pushAlertEnabled
  } = props;
  const idChat = sidebarContentPanel === PANELS.CHAT ? idChatOpen : '';
  if (!publicMessages && !privateMessages) return null;
  return /*#__PURE__*/React.createElement(ChatAlertGraphql, {
    audioAlertEnabled: audioAlertEnabled,
    idChatOpen: idChat,
    layoutContextDispatch: layoutContextDispatch,
    pushAlertEnabled: pushAlertEnabled,
    publicUnreadMessages: (_publicMessages$chat_ = publicMessages === null || publicMessages === void 0 ? void 0 : publicMessages.chat_message_public_stream) !== null && _publicMessages$chat_ !== void 0 ? _publicMessages$chat_ : null,
    privateUnreadMessages: (_privateMessages$chat = privateMessages === null || privateMessages === void 0 ? void 0 : privateMessages.chat_message_private_stream) !== null && _privateMessages$chat !== void 0 ? _privateMessages$chat : null
  });
};
module.exportDefault(ChatAlertContainerGraphql);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/alert/queries.ts                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  CHAT_MESSAGE_PUBLIC_STREAM: () => CHAT_MESSAGE_PUBLIC_STREAM,
  CHAT_MESSAGE_PRIVATE_STREAM: () => CHAT_MESSAGE_PRIVATE_STREAM
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CHAT_MESSAGE_PUBLIC_STREAM = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription chatMessages($createdAt: timestamptz!) {\n    chat_message_public_stream(\n      cursor: { initial_value: { createdAt: $createdAt }, ordering: ASC},\n      batch_size: 10\n    ) {\n      chatId\n      createdAt\n      message\n      messageId\n      messageMetadata\n      messageType\n      senderName\n      senderRole\n    }\n  }\n"])));
const CHAT_MESSAGE_PRIVATE_STREAM = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  subscription chatMessages($createdAt: timestamptz!) {\n    chat_message_private_stream(\n      cursor: { initial_value: { createdAt: $createdAt }, ordering: ASC},\n      batch_size: 10\n    ) {\n      chatId\n      createdAt\n      message\n      messageId\n      messageMetadata\n      messageType\n      senderName\n      senderRole\n    }\n  }\n"])));
module.exportDefault({
  CHAT_MESSAGE_PRIVATE_STREAM,
  CHAT_MESSAGE_PUBLIC_STREAM
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/alert/service.ts                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let AudioService;
module.link("/imports/ui/components/audio/service", {
  default(v) {
    AudioService = v;
  }
}, 0);
const playAlertSound = () => {
  AudioService.playAlertSound("".concat(window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId) + '/resources/sounds/notify.mp3');
};
module.exportDefault({
  playAlertSound
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/alert/styles.ts                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGrayDark;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  }
}, 1);
let borderRadius;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderRadius(v) {
    borderRadius = v;
  }
}, 2);
let fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 3);
const PushMessageContent = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-top: 1.4rem;\n  margin-bottom: .4rem;\n  margin-left: .4rem;\n  margin-right: .4rem;\n  background-color: inherit;\n  width: 98%;\n"])));
const UserNameMessage = styled.h3(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin: 0;\n  font-size: 80%;\n  color: ", ";\n  font-weight: bold;\n  background-color: inherit;\n  position: relative;\n  white-space: nowrap; \n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: 1em;\n  max-height: 1em;\n"])), colorGrayDark);
const ContentMessage = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin-top: ", ";\n  font-size: 80%;\n  background-color: inherit;\n  position: relative;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  line-height: ", ";\n  max-height: calc(", " * 10);\n"])), borderRadius, fontSizeSmall, fontSizeSmall);
const ContentMessagePoll = styled(ContentMessage)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin-top: ", ";\n"])), fontSizeSmall);
module.exportDefault({
  PushMessageContent,
  UserNameMessage,
  ContentMessage,
  ContentMessagePoll
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"chat-header":{"chat-actions":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-header/chat-actions/component.tsx                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useMemo, useRef, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 2);
let layoutSelect;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 3);
let useLazyQuery, useMutation, useQuery;
module.link("@apollo/client", {
  useLazyQuery(v) {
    useLazyQuery = v;
  },
  useMutation(v) {
    useMutation = v;
  },
  useQuery(v) {
    useQuery = v;
  }
}, 4);
let uid;
module.link("radash", {
  uid(v) {
    uid = v;
  }
}, 5);
let isEmpty;
module.link("ramda", {
  isEmpty(v) {
    isEmpty = v;
  }
}, 6);
let GET_CHAT_MESSAGE_HISTORY;
module.link("./queries", {
  GET_CHAT_MESSAGE_HISTORY(v) {
    GET_CHAT_MESSAGE_HISTORY = v;
  }
}, 7);
let Trigger;
module.link("/imports/ui/components/common/control-header/right/component", {
  default(v) {
    Trigger = v;
  }
}, 8);
let generateExportedMessages;
module.link("./services", {
  generateExportedMessages(v) {
    generateExportedMessages = v;
  }
}, 9);
let getDateString;
module.link("/imports/utils/string-utils", {
  getDateString(v) {
    getDateString = v;
  }
}, 10);
let ChatCommands;
module.link("/imports/ui/core/enums/chat", {
  ChatCommands(v) {
    ChatCommands = v;
  }
}, 11);
let CHAT_PUBLIC_CLEAR_HISTORY;
module.link("./mutations", {
  CHAT_PUBLIC_CLEAR_HISTORY(v) {
    CHAT_PUBLIC_CLEAR_HISTORY = v;
  }
}, 12);
let useMeetingSettings;
module.link("/imports/ui/core/local-states/useMeetingSettings", {
  default(v) {
    useMeetingSettings = v;
  }
}, 13);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 14);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 15);
let GET_WELCOME_MESSAGE;
module.link("/imports/ui/components/chat/chat-graphql/chat-popup/queries", {
  GET_WELCOME_MESSAGE(v) {
    GET_WELCOME_MESSAGE = v;
  }
}, 16);
const intlMessages = defineMessages({
  clear: {
    id: 'app.chat.dropdown.clear',
    description: 'Clear button label'
  },
  save: {
    id: 'app.chat.dropdown.save',
    description: 'Clear button label'
  },
  copy: {
    id: 'app.chat.dropdown.copy',
    description: 'Copy button label'
  },
  copySuccess: {
    id: 'app.chat.copySuccess',
    description: 'aria success alert'
  },
  copyErr: {
    id: 'app.chat.copyErr',
    description: 'aria error alert'
  },
  options: {
    id: 'app.chat.dropdown.options',
    description: 'Chat Options'
  },
  showWelcomeMessage: {
    id: 'app.chat.dropdown.showWelcomeMessage',
    description: 'Restore button label'
  }
});
const ChatActions = () => {
  const [MeetingSettings] = useMeetingSettings();
  const chatConfig = MeetingSettings.public.chat;
  const {
    enableSaveAndCopyPublicChat
  } = chatConfig;
  const intl = useIntl();
  const isRTL = layoutSelect(i => i.isRTL);
  const uniqueIdsRef = useRef([uid(1), uid(2), uid(3), uid(4)]);
  const downloadOrCopyRef = useRef(null);
  const [userIsModerator, setUserIsmoderator] = useState(false);
  const [meetingIsBreakout, setMeetingIsBreakout] = useState(false);
  const [showShowWelcomeMessages, setShowShowWelcomeMessages] = useState(false);
  const [chatPublicClearHistory] = useMutation(CHAT_PUBLIC_CLEAR_HISTORY);
  const {
    data: currentUserData,
    loading: currentUserLoading
  } = useCurrentUser(u => ({
    isModerator: u.isModerator
  }));
  const {
    data: meetingData,
    loading: meetingLoading
  } = useMeeting(m => ({
    isBreakout: m.isBreakout,
    name: m.name
  }));
  const {
    data: welcomeData
  } = useQuery(GET_WELCOME_MESSAGE);
  const [getChatMessageHistory, {
    error: errorHistory,
    data: dataHistory
  }] = useLazyQuery(GET_CHAT_MESSAGE_HISTORY, {
    fetchPolicy: 'no-cache'
  });
  useEffect(() => {
    if (dataHistory) {
      const exportedString = generateExportedMessages(dataHistory.chat_message_public, dataHistory.user_welcomeMsgs[0], intl);
      if (downloadOrCopyRef.current === 'download') {
        const link = document.createElement('a');
        const mimeType = 'text/plain';
        link.setAttribute('download', "bbb-".concat(dataHistory.meeting[0].name, "[public-chat]_").concat(getDateString(), ".txt"));
        link.setAttribute('href', "data: ".concat(mimeType, ";charset=utf-8,") + "".concat(encodeURIComponent(exportedString)));
        link.dispatchEvent(new MouseEvent('click', {
          bubbles: false,
          cancelable: true,
          view: window
        }));
        downloadOrCopyRef.current = null;
      } else if (downloadOrCopyRef.current === 'copy') {
        navigator.clipboard.writeText(exportedString);
        downloadOrCopyRef.current = null;
      }
    }
  }, [dataHistory]);
  useEffect(() => {
    if (currentUserData) {
      setUserIsmoderator(!!currentUserData.isModerator);
    }
    if (meetingData) {
      setMeetingIsBreakout(!!meetingData.isBreakout);
    }
  }, [currentUserData, meetingData]);
  useEffect(() => {
    if (welcomeData) {
      var _welcomeData$user_wel, _welcomeData$user_wel2;
      if (!isEmpty(((_welcomeData$user_wel = welcomeData.user_welcomeMsgs[0]) === null || _welcomeData$user_wel === void 0 ? void 0 : _welcomeData$user_wel.welcomeMsg) || '') || !isEmpty(((_welcomeData$user_wel2 = welcomeData.user_welcomeMsgs[0]) === null || _welcomeData$user_wel2 === void 0 ? void 0 : _welcomeData$user_wel2.welcomeMsgForModerators) || '')) {
        setShowShowWelcomeMessages(true);
      }
    }
  }, [welcomeData]);
  const actions = useMemo(() => {
    const dropdownActions = [{
      key: uniqueIdsRef.current[0],
      enable: enableSaveAndCopyPublicChat,
      icon: 'download',
      dataTest: 'chatSave',
      label: intl.formatMessage(intlMessages.save),
      onClick: () => {
        getChatMessageHistory();
        downloadOrCopyRef.current = 'download';
      }
    }, {
      key: uniqueIdsRef.current[1],
      enable: enableSaveAndCopyPublicChat,
      icon: 'copy',
      id: 'clipboardButton',
      dataTest: 'chatCopy',
      label: intl.formatMessage(intlMessages.copy),
      onClick: () => {
        getChatMessageHistory();
        downloadOrCopyRef.current = 'copy';
      }
    }, {
      key: uniqueIdsRef.current[2],
      enable: true,
      disabled: !userIsModerator || meetingIsBreakout,
      icon: 'delete',
      dataTest: 'chatClear',
      label: intl.formatMessage(intlMessages.clear),
      onClick: () => chatPublicClearHistory(),
      loading: currentUserLoading || meetingLoading
    }, {
      key: uniqueIdsRef.current[3],
      enable: true,
      disabled: !showShowWelcomeMessages,
      icon: 'about',
      dataTest: 'restoreWelcomeMessages',
      label: intl.formatMessage(intlMessages.showWelcomeMessage),
      onClick: () => {
        const restoreWelcomeMessagesEvent = new CustomEvent(ChatCommands.RESTORE_WELCOME_MESSAGES);
        window.dispatchEvent(restoreWelcomeMessagesEvent);
      },
      loading: currentUserLoading
    }];
    return dropdownActions.filter(action => action.enable);
  }, [userIsModerator, meetingIsBreakout, showShowWelcomeMessages, currentUserLoading, meetingLoading]);
  if (errorHistory) {
    return /*#__PURE__*/React.createElement("p", null, "Error loading chat history:", JSON.stringify(errorHistory));
  }
  return /*#__PURE__*/React.createElement(BBBMenu, {
    trigger: /*#__PURE__*/React.createElement(Trigger, {
      label: intl.formatMessage(intlMessages.options),
      "aria-label": intl.formatMessage(intlMessages.options),
      hideLabel: true,
      icon: "more",
      "data-test": "chatOptionsMenu",
      onClick: () => {}
    }),
    opts: {
      id: 'chat-options-dropdown-menu',
      keepMounted: true,
      transitionDuration: 0,
      elevation: 3,
      getcontentanchorel: null,
      fullwidth: 'true',
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: isRTL ? 'right' : 'left'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: isRTL ? 'right' : 'left'
      }
    },
    actions: actions
  });
};
module.exportDefault(ChatActions);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-header/chat-actions/mutations.tsx                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  CHAT_PUBLIC_CLEAR_HISTORY: () => CHAT_PUBLIC_CLEAR_HISTORY
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CHAT_PUBLIC_CLEAR_HISTORY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation {\n    chatPublicClearHistory\n  }\n"])));
module.exportDefault({
  CHAT_PUBLIC_CLEAR_HISTORY
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-header/chat-actions/queries.ts                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  GET_CHAT_MESSAGE_HISTORY: () => GET_CHAT_MESSAGE_HISTORY
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const GET_CHAT_MESSAGE_HISTORY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\nquery getChatMessageHistory {\n  chat_message_public(order_by: {createdAt: asc}) {\n    message\n    messageId\n    messageType\n    messageMetadata\n    senderName\n    chatEmphasizedText\n    createdAt\n    user {\n      userId\n      name\n      role\n    }\n  }\n  meeting {\n    name\n  }\n  user_welcomeMsgs {\n    welcomeMsg\n    welcomeMsgForModerators\n  }\n}\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"services.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-header/chat-actions/services.ts                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  htmlDecode: () => htmlDecode,
  generateExportedMessages: () => generateExportedMessages,
  getDateString: () => getDateString
});
let stripTags, unescapeHtml;
module.link("/imports/utils/string-utils", {
  stripTags(v) {
    stripTags = v;
  },
  unescapeHtml(v) {
    unescapeHtml = v;
  }
}, 0);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 1);
let ChatMessageType;
module.link("/imports/ui/core/enums/chat", {
  ChatMessageType(v) {
    ChatMessageType = v;
  }
}, 2);
let PollService;
module.link("/imports/ui/components/poll/service", {
  default(v) {
    PollService = v;
  }
}, 3);
const intlMessages = defineMessages({
  chatClear: {
    id: 'app.chat.clearPublicChatMessage',
    description: 'message of when clear the public chat'
  },
  pollResult: {
    id: 'app.chat.pollResult',
    description: 'used in place of user name who published poll to chat'
  },
  userAway: {
    id: 'app.chat.away',
    description: 'message when user is away'
  },
  userNotAway: {
    id: 'app.chat.notAway',
    description: 'message when user is no longer away'
  }
});
const htmlDecode = input => {
  const replacedBRs = input.replaceAll('<br/>', '\n');
  return unescapeHtml(stripTags(replacedBRs));
};
const generateExportedMessages = (messages, welcomeSettings, intl) => {
  const welcomeMessage = htmlDecode(welcomeSettings.welcomeMsg);
  const welcomeMsgForModerators = welcomeSettings.welcomeMsgForModerators && htmlDecode(welcomeSettings.welcomeMsgForModerators);
  const systemMessages = "".concat(welcomeMessage ? "system: ".concat(welcomeMessage) : '', "\n \n  ").concat(welcomeMsgForModerators ? "system: ".concat(welcomeMsgForModerators) : '', "\n");
  const text = messages.reduce((acc, message) => {
    const date = new Date(message.createdAt);
    const hour = date.getHours().toString().padStart(2, '0');
    const min = date.getMinutes().toString().padStart(2, '0');
    const hourMin = "[".concat(hour, ":").concat(min, "]");
    let userName = message.user ? "[".concat(message.user.name, " : ").concat(message.user.role, "]: ") : '';
    let messageText = '';
    switch (message.messageType) {
      case ChatMessageType.CHAT_CLEAR:
        messageText = intl.formatMessage(intlMessages.chatClear);
        break;
      case ChatMessageType.POLL:
        {
          userName = "".concat(intl.formatMessage(intlMessages.pollResult), ":\n");
          const metadata = JSON.parse(message.messageMetadata);
          const pollText = htmlDecode(PollService.getPollResultString(metadata, intl).split('<br/>').join('\n'));
          // remove last \n to avoid empty line
          messageText = pollText.slice(0, -1);
          break;
        }
      case ChatMessageType.USER_AWAY_STATUS_MSG:
        {
          const {
            away
          } = JSON.parse(message.messageMetadata);
          messageText = away ? "".concat(message.senderName, " ").concat(intl.formatMessage(intlMessages.userAway)) : "".concat(message.senderName, " ").concat(intl.formatMessage(intlMessages.userNotAway));
          break;
        }
      case ChatMessageType.TEXT:
      default:
        messageText = htmlDecode(message.message);
        break;
    }
    return "".concat(acc).concat(hourMin, " ").concat(userName).concat(messageText, "\n");
  }, welcomeMessage ? systemMessages : '');
  return text;
};
const getDateString = function () {
  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const dayOfMonth = date.getDate().toString().padStart(2, '0');
  const time = "".concat(hours, "-").concat(minutes);
  const dateString = "".concat(date.getFullYear(), "-").concat(month, "-").concat(dayOfMonth, "_").concat(time);
  return dateString;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-header/component.tsx                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation, useQuery;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useQuery(v) {
    useQuery = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let GET_CHAT_DATA, CLOSE_PRIVATE_CHAT_MUTATION;
module.link("./queries", {
  GET_CHAT_DATA(v) {
    GET_CHAT_DATA = v;
  },
  CLOSE_PRIVATE_CHAT_MUTATION(v) {
    CLOSE_PRIVATE_CHAT_MUTATION = v;
  }
}, 3);
let closePrivateChat;
module.link("./services", {
  default(v) {
    closePrivateChat = v;
  }
}, 4);
let layoutSelect, layoutDispatch;
module.link("../../../layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 5);
let useShortcut;
module.link("../../../../core/hooks/useShortcut", {
  useShortcut(v) {
    useShortcut = v;
  }
}, 6);
let ACTIONS, PANELS;
module.link("../../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 7);
let ChatActions;
module.link("./chat-actions/component", {
  default(v) {
    ChatActions = v;
  }
}, 8);
let Header;
module.link("../chat-message-list/page/chat-message/styles", {
  ChatHeader(v) {
    Header = v;
  }
}, 9);
const intlMessages = defineMessages({
  closeChatLabel: {
    id: 'app.chat.closeChatLabel',
    description: 'aria-label for closing chat button'
  },
  hideChatLabel: {
    id: 'app.chat.hideChatLabel',
    description: 'aria-label for hiding chat button'
  },
  titlePublic: {
    id: 'app.chat.titlePublic',
    description: 'Public chat title'
  },
  titlePrivate: {
    id: 'app.chat.titlePrivate',
    description: 'Private chat title'
  }
});
const ChatHeader = _ref => {
  let {
    chatId,
    isPublicChat,
    title,
    isRTL
  } = _ref;
  const HIDE_CHAT_AK = useShortcut('hideprivatechat');
  const CLOSE_CHAT_AK = useShortcut('closeprivatechat');
  const layoutContextDispatch = layoutDispatch();
  const intl = useIntl();
  const [updateVisible] = useMutation(CLOSE_PRIVATE_CHAT_MUTATION);
  return /*#__PURE__*/React.createElement(Header, {
    isRTL: isRTL,
    "data-test": "chatTitle",
    leftButtonProps: {
      accessKey: chatId !== 'public' ? HIDE_CHAT_AK : null,
      'aria-label': intl.formatMessage(intlMessages.hideChatLabel, {
        0: title
      }),
      'data-test': isPublicChat ? 'hidePublicChat' : 'hidePrivateChat',
      label: title,
      onClick: () => {
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: false
        });
        layoutContextDispatch({
          type: ACTIONS.SET_ID_CHAT_OPEN,
          value: ''
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.NONE
        });
      }
    },
    rightButtonProps: {
      accessKey: CLOSE_CHAT_AK,
      'aria-label': intl.formatMessage(intlMessages.closeChatLabel, {
        0: title
      }),
      'data-test': 'closePrivateChat',
      icon: 'close',
      label: intl.formatMessage(intlMessages.closeChatLabel, {
        0: title
      }),
      onClick: () => {
        updateVisible({
          variables: {
            chatId,
            visible: false
          }
        });
        closePrivateChat(chatId);
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: false
        });
        layoutContextDispatch({
          type: ACTIONS.SET_ID_CHAT_OPEN,
          value: ''
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.NONE
        });
      }
    },
    customRightButton: isPublicChat ? /*#__PURE__*/React.createElement(ChatActions, null) : null
  });
};
const isChatResponse = data => {
  return data.chat !== undefined;
};
const ChatHeaderContainer = () => {
  var _chatData$chat$, _chatData$chat$2, _chatData$chat$2$part;
  const intl = useIntl();
  const idChatOpen = layoutSelect(i => i.idChatOpen);
  const isRTL = layoutSelect(i => i.isRTL);
  const {
    data: chatData,
    loading: chatDataLoading,
    error: chatDataError
  } = useQuery(GET_CHAT_DATA, {
    variables: {
      chatId: idChatOpen
    }
  });
  if (chatDataLoading) return null;
  if (chatDataError) {
    return /*#__PURE__*/React.createElement("div", null, "Error:", JSON.stringify(chatDataError));
  }
  if (!isChatResponse(chatData)) {
    return /*#__PURE__*/React.createElement("div", null, "Error:", JSON.stringify(chatData));
  }
  const isPublicChat = (_chatData$chat$ = chatData.chat[0]) === null || _chatData$chat$ === void 0 ? void 0 : _chatData$chat$.public;
  const title = isPublicChat ? intl.formatMessage(intlMessages.titlePublic) : intl.formatMessage(intlMessages.titlePrivate, {
    0: chatData === null || chatData === void 0 ? void 0 : (_chatData$chat$2 = chatData.chat[0]) === null || _chatData$chat$2 === void 0 ? void 0 : (_chatData$chat$2$part = _chatData$chat$2.participant) === null || _chatData$chat$2$part === void 0 ? void 0 : _chatData$chat$2$part.name
  });
  return /*#__PURE__*/React.createElement(ChatHeader, {
    chatId: idChatOpen,
    isPublicChat: isPublicChat,
    title: title,
    isRTL: isRTL
  });
};
module.exportDefault(ChatHeaderContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-header/queries.ts                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  GET_CHAT_DATA: () => GET_CHAT_DATA,
  CLOSE_PRIVATE_CHAT_MUTATION: () => CLOSE_PRIVATE_CHAT_MUTATION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const GET_CHAT_DATA = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  query GetChatData($chatId: String!) {\n    chat(where: { chatId: { _eq: $chatId } }) {\n      chatId\n      public\n      participant {\n        name\n      }\n    }\n  }\n"])));
const CLOSE_PRIVATE_CHAT_MUTATION = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation UpdateChatVisible($chatId: String, $visible: Boolean) {\n    chatSetVisible(\n      chatId: $chatId\n      visible: $visible\n    )\n  }\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"services.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-header/services.ts                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 0);
let indexOf;
module.link("/imports/utils/array-utils", {
  indexOf(v) {
    indexOf = v;
  }
}, 1);
// old code
const CLOSED_CHAT_LIST_KEY = 'closedChatList';
const closePrivateChat = chatId => {
  const currentClosedChats = Storage.getItem(CLOSED_CHAT_LIST_KEY) || [];
  if (indexOf(currentClosedChats, chatId) < 0) {
    currentClosedChats.push(chatId);
    Storage.setItem(CLOSED_CHAT_LIST_KEY, currentClosedChats);
  }
};
module.exportDefault(closePrivateChat);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"chat-message-form":{"chat-offline-indicator":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-form/chat-offline-indicator/component.tsx                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
const intlMessages = defineMessages({
  partnerDisconnected: {
    id: 'app.chat.partnerDisconnected',
    description: 'System chat message when the private chat partner disconnect from the meeting'
  }
});
const ChatOfflineIndicator = _ref => {
  let {
    participantName
  } = _ref;
  const intl = useIntl();
  return /*#__PURE__*/React.createElement(Styled.ChatOfflineIndicator, null, /*#__PURE__*/React.createElement("span", {
    "data-test": "partnerDisconnected"
  }, intl.formatMessage(intlMessages.partnerDisconnected, {
    0: participantName
  })));
};
module.exportDefault(ChatOfflineIndicator);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-form/chat-offline-indicator/styles.ts                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  ChatOfflineIndicator: () => ChatOfflineIndicator
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorText, colorGrayLighter;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorText(v) {
    colorText = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  }
}, 1);
const ChatOfflineIndicator = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  position: relative;\n  margin-top: 0.2rem;\n  padding: 0.5rem;\n  border-radius: 2px;\n  border-top: 1px solid ", ";\n  & > span {\n    color: ", ";\n    font-size: 1rem;\n  }\n"])), colorGrayLighter, colorText);
module.exportDefault({
  ChatOfflineIndicator
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-form/component.tsx                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useRef, useMemo;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let ChatFormCommandsEnum;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/ui-commands/chat/form/enums", {
  ChatFormCommandsEnum(v) {
    ChatFormCommandsEnum = v;
  }
}, 1);
let UI_DATA_LISTENER_SUBSCRIBED;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/ui-data-hooks/consts", {
  UI_DATA_LISTENER_SUBSCRIBED(v) {
    UI_DATA_LISTENER_SUBSCRIBED = v;
  }
}, 2);
let PluginSdk;
module.link("bigbluebutton-html-plugin-sdk", {
  "*"(v) {
    PluginSdk = v;
  }
}, 3);
let layoutSelect;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 4);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 5);
let useIsChatEnabled;
module.link("/imports/ui/services/features", {
  useIsChatEnabled(v) {
    useIsChatEnabled = v;
  }
}, 6);
let ClickOutside;
module.link("/imports/ui/components/click-outside/component", {
  default(v) {
    ClickOutside = v;
  }
}, 7);
let checkText;
module.link("smile2emoji", {
  checkText(v) {
    checkText = v;
  }
}, 8);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 9);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 10);
let usePreviousValue;
module.link("/imports/ui/hooks/usePreviousValue", {
  default(v) {
    usePreviousValue = v;
  }
}, 11);
let useChat;
module.link("/imports/ui/core/hooks/useChat", {
  default(v) {
    useChat = v;
  }
}, 12);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 13);
let textToMarkdown;
module.link("./service", {
  textToMarkdown(v) {
    textToMarkdown = v;
  }
}, 14);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 15);
let ChatOfflineIndicator;
module.link("./chat-offline-indicator/component", {
  default(v) {
    ChatOfflineIndicator = v;
  }
}, 16);
let ChatEvents;
module.link("/imports/ui/core/enums/chat", {
  ChatEvents(v) {
    ChatEvents = v;
  }
}, 17);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 18);
let CHAT_SEND_MESSAGE, CHAT_SET_TYPING;
module.link("./mutations", {
  CHAT_SEND_MESSAGE(v) {
    CHAT_SEND_MESSAGE = v;
  },
  CHAT_SET_TYPING(v) {
    CHAT_SET_TYPING = v;
  }
}, 19);
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 20);
let indexOf, without;
module.link("/imports/utils/array-utils", {
  indexOf(v) {
    indexOf = v;
  },
  without(v) {
    without = v;
  }
}, 21);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 22);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 23);
const CLOSED_CHAT_LIST_KEY = 'closedChatList';
const START_TYPING_THROTTLE_INTERVAL = 1000;
const messages = defineMessages({
  submitLabel: {
    id: 'app.chat.submitLabel',
    description: 'Chat submit button label'
  },
  inputLabel: {
    id: 'app.chat.inputLabel',
    description: 'Chat message input label'
  },
  emojiButtonLabel: {
    id: 'app.chat.emojiButtonLabel',
    description: 'Chat message emoji picker button label'
  },
  inputPlaceholder: {
    id: 'app.chat.inputPlaceholder',
    description: 'Chat message input placeholder'
  },
  errorMaxMessageLength: {
    id: 'app.chat.errorMaxMessageLength'
  },
  errorOnSendMessage: {
    id: 'app.chat.errorOnSendMessage'
  },
  errorServerDisconnected: {
    id: 'app.chat.disconnected'
  },
  errorChatLocked: {
    id: 'app.chat.locked'
  },
  singularTyping: {
    id: 'app.chat.singularTyping',
    description: 'used to indicate when 1 user is typing'
  },
  pluralTyping: {
    id: 'app.chat.pluralTyping',
    description: 'used to indicate when multiple user are typing'
  },
  severalPeople: {
    id: 'app.chat.severalPeople',
    description: 'displayed when 4 or more users are typing'
  },
  titlePublic: {
    id: 'app.chat.titlePublic',
    description: 'Public chat title'
  },
  titlePrivate: {
    id: 'app.chat.titlePrivate',
    description: 'Private chat title'
  },
  partnerDisconnected: {
    id: 'app.chat.partnerDisconnected',
    description: 'System chat message when the private chat partnet disconnect from the meeting'
  }
});
const ChatMessageForm = _ref => {
  let {
    handleClickOutside,
    title,
    disabled,
    partnerIsLoggedOut,
    minMessageLength,
    maxMessageLength,
    chatId,
    connected,
    locked,
    isRTL
  } = _ref;
  const isChatEnabled = useIsChatEnabled();
  if (!isChatEnabled) return null;
  const intl = useIntl();
  const [hasErrors, setHasErrors] = React.useState(false);
  const [error, setError] = React.useState(null);
  const [message, setMessage] = React.useState('');
  const [showEmojiPicker, setShowEmojiPicker] = React.useState(false);
  const [isTextAreaFocused, setIsTextAreaFocused] = React.useState(false);
  const textAreaRef = useRef(null);
  const {
    isMobile
  } = deviceInfo;
  const prevChatId = usePreviousValue(chatId);
  const messageRef = useRef('');
  messageRef.current = message;
  const updateUnreadMessages = (chatId, message) => {
    const storedData = localStorage.getItem('unsentMessages') || '{}';
    const unsentMessages = JSON.parse(storedData);
    unsentMessages[chatId] = message;
    localStorage.setItem('unsentMessages', JSON.stringify(unsentMessages));
  };
  const [chatSetTyping] = useMutation(CHAT_SET_TYPING);
  const [chatSendMessage, {
    loading: chatSendMessageLoading,
    error: chatSendMessageError
  }] = useMutation(CHAT_SEND_MESSAGE);
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  const PUBLIC_CHAT_ID = CHAT_CONFIG.public_id;
  const PUBLIC_GROUP_CHAT_ID = CHAT_CONFIG.public_group_id;
  const AUTO_CONVERT_EMOJI = window.meetingClientSettings.public.chat.autoConvertEmoji;
  const ENABLE_EMOJI_PICKER = window.meetingClientSettings.public.chat.emojiPicker.enable;
  const ENABLE_TYPING_INDICATOR = CHAT_CONFIG.typingIndicator.enabled;
  const handleUserTyping = hasError => {
    if (hasError || !ENABLE_TYPING_INDICATOR) return;
    chatSetTyping({
      variables: {
        chatId: chatId === PUBLIC_CHAT_ID ? PUBLIC_GROUP_CHAT_ID : chatId
      }
    });
  };
  const throttleHandleUserTyping = useMemo(() => throttle(handleUserTyping, START_TYPING_THROTTLE_INTERVAL, {
    leading: true,
    trailing: false
  }), [chatId]);
  useEffect(() => {
    setMessageHint();
    if (!isMobile) {
      if (textAreaRef !== null && textAreaRef !== void 0 && textAreaRef.current) textAreaRef.current.textarea.focus();
    }
    return () => {
      const unsentMessage = messageRef.current;
      updateUnreadMessages(chatId, unsentMessage);
    };
  }, []);
  useEffect(() => {
    const storedData = localStorage.getItem('unsentMessages') || '{}';
    const unsentMessages = JSON.parse(storedData);
    if (prevChatId) {
      updateUnreadMessages(prevChatId, message);
    }
    const unsentMessage = unsentMessages[chatId] || '';
    setMessage(unsentMessage);
    if (!isMobile) {
      if (textAreaRef !== null && textAreaRef !== void 0 && textAreaRef.current) textAreaRef.current.textarea.focus();
    }
    setError(null);
    setHasErrors(false);
  }, [chatId]);
  useEffect(() => {
    setMessageHint();
  }, [connected, locked, partnerIsLoggedOut]);
  useEffect(() => {
    const shouldRestoreFocus = textAreaRef.current && !chatSendMessageLoading && isTextAreaFocused && document.activeElement !== textAreaRef.current.textarea;
    if (shouldRestoreFocus) {
      textAreaRef.current.textarea.focus();
    }
  }, [chatSendMessageLoading, textAreaRef.current]);
  const setMessageHint = () => {
    let chatDisabledHint = null;
    if (disabled && !partnerIsLoggedOut) {
      if (connected) {
        if (locked) {
          chatDisabledHint = messages.errorChatLocked;
        }
      } else {
        chatDisabledHint = messages.errorServerDisconnected;
      }
    }
    setHasErrors(disabled);
    setError(chatDisabledHint ? intl.formatMessage(chatDisabledHint) : null);
  };
  const handleEmojiSelect = emojiObject => {
    var _textAreaRef$current;
    const txtArea = textAreaRef === null || textAreaRef === void 0 ? void 0 : (_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.textarea;
    if (!txtArea) return;
    const cursor = txtArea.selectionStart;
    setMessage(message.slice(0, cursor) + emojiObject.native + message.slice(cursor));
    const newCursor = cursor + emojiObject.native.length;
    setTimeout(() => txtArea.setSelectionRange(newCursor, newCursor), 10);
  };
  const handleMessageChange = e => {
    let newMessage = null;
    let newError = null;
    if (AUTO_CONVERT_EMOJI) {
      newMessage = checkText(e.target.value);
    } else {
      newMessage = e.target.value;
    }
    if (newMessage.length > maxMessageLength) {
      newError = intl.formatMessage(messages.errorMaxMessageLength, {
        0: maxMessageLength
      });
      newMessage = newMessage.substring(0, maxMessageLength);
    }
    setMessage(newMessage);
    setError(newError);
    throttleHandleUserTyping(newError != null);
  };
  useEffect(() => {
    window.dispatchEvent(new CustomEvent(PluginSdk.ChatFormUiDataNames.CURRENT_CHAT_INPUT_TEXT, {
      detail: {
        text: message
      }
    }));
  }, [message]);
  const renderForm = () => {
    const formRef = useRef(null);
    const handleSubmit = e => {
      e.preventDefault();
      const msg = textToMarkdown(message);
      if (msg.length < minMessageLength || chatSendMessageLoading) return;
      if (disabled || msg.length > maxMessageLength) {
        setHasErrors(true);
        return;
      }
      if (!chatSendMessageLoading) {
        chatSendMessage({
          variables: {
            chatMessageInMarkdownFormat: msg,
            chatId: chatId === PUBLIC_CHAT_ID ? PUBLIC_GROUP_CHAT_ID : chatId
          }
        });
      }
      const currentClosedChats = Storage.getItem(CLOSED_CHAT_LIST_KEY);
      // Remove the chat that user send messages from the session.
      if (indexOf(currentClosedChats, chatId) > -1) {
        Storage.setItem(CLOSED_CHAT_LIST_KEY, without(currentClosedChats, chatId));
      }
      setMessage('');
      updateUnreadMessages(chatId, '');
      setError(null);
      setHasErrors(false);
      setShowEmojiPicker(false);
      const sentMessageEvent = new CustomEvent(ChatEvents.SENT_MESSAGE);
      window.dispatchEvent(sentMessageEvent);
    };
    const handleMessageKeyDown = e => {
      // TODO Prevent send message pressing enter on mobile and/or virtual keyboard
      if (e.keyCode === 13 && !e.shiftKey) {
        e.preventDefault();
        const event = new Event('submit', {
          bubbles: true,
          cancelable: true
        });
        handleSubmit(event);
      }
    };
    const handleFillChatFormThroughPlugin = event => setMessage(event.detail.text);
    useEffect(() => {
      // Define functions to first inform ui data hooks that subscribe to these events
      const updateUiDataHookChatFormChangedForPlugin = () => {
        window.dispatchEvent(new CustomEvent(PluginSdk.ChatFormUiDataNames.CHAT_INPUT_IS_FOCUSED, {
          detail: {
            value: isTextAreaFocused
          }
        }));
      };
      const updateUiDataHookChatInputTextPlugin = () => {
        window.dispatchEvent(new CustomEvent(PluginSdk.ChatFormUiDataNames.CURRENT_CHAT_INPUT_TEXT, {
          detail: {
            text: message
          }
        }));
      };
      // When component mount, add event listener to send first information
      // about these ui data hooks to plugin
      window.addEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.ChatFormUiDataNames.CHAT_INPUT_IS_FOCUSED), updateUiDataHookChatFormChangedForPlugin);
      window.addEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.ChatFormUiDataNames.CURRENT_CHAT_INPUT_TEXT), updateUiDataHookChatInputTextPlugin);
      window.addEventListener(ChatFormCommandsEnum.FILL, handleFillChatFormThroughPlugin);
      // Before component unmount, remove event listeners for plugin ui data hooks
      return () => {
        window.removeEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.ChatFormUiDataNames.CHAT_INPUT_IS_FOCUSED), updateUiDataHookChatFormChangedForPlugin);
        window.removeEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.ChatFormUiDataNames.CURRENT_CHAT_INPUT_TEXT), updateUiDataHookChatInputTextPlugin);
        window.removeEventListener(ChatFormCommandsEnum.FILL, handleFillChatFormThroughPlugin);
      };
    }, []);
    document.addEventListener('click', event => {
      const chatList = document.getElementById('chat-list');
      if (chatList !== null && chatList !== void 0 && chatList.contains(event.target)) {
        var _window$getSelection;
        const selection = (_window$getSelection = window.getSelection()) === null || _window$getSelection === void 0 ? void 0 : _window$getSelection.toString();
        if ((selection === null || selection === void 0 ? void 0 : selection.length) === 0) {
          var _textAreaRef$current2;
          (_textAreaRef$current2 = textAreaRef.current) === null || _textAreaRef$current2 === void 0 ? void 0 : _textAreaRef$current2.textarea.focus();
        }
      }
    });
    useEffect(() => {
      if (chatSendMessageError && error == null) {
        logger.debug('Error on sending chat message: ', chatSendMessageError === null || chatSendMessageError === void 0 ? void 0 : chatSendMessageError.message);
        setError(intl.formatMessage(messages.errorOnSendMessage));
      }
    }, [chatSendMessageError]);
    return /*#__PURE__*/React.createElement(Styled.Form, {
      ref: formRef,
      onSubmit: handleSubmit,
      isRTL: isRTL
    }, showEmojiPicker ? /*#__PURE__*/React.createElement(Styled.EmojiPickerWrapper, null, /*#__PURE__*/React.createElement(Styled.EmojiPicker, {
      onEmojiSelect: emojiObject => handleEmojiSelect(emojiObject),
      showPreview: false,
      showSkinTones: false
    })) : null, /*#__PURE__*/React.createElement(Styled.Wrapper, null, /*#__PURE__*/React.createElement(Styled.Input, {
      id: "message-input",
      ref: textAreaRef,
      placeholder: intl.formatMessage(messages.inputPlaceholder, {
        0: title
      }),
      "aria-label": intl.formatMessage(messages.inputLabel, {
        0: title
      }),
      "aria-invalid": hasErrors ? 'true' : 'false',
      autoCorrect: "off",
      autoComplete: "off",
      spellCheck: "true",
      disabled: disabled || partnerIsLoggedOut,
      value: message,
      onFocus: () => {
        window.dispatchEvent(new CustomEvent(PluginSdk.ChatFormUiDataNames.CHAT_INPUT_IS_FOCUSED, {
          detail: {
            value: true
          }
        }));
        setIsTextAreaFocused(true);
      },
      onBlur: () => {
        window.dispatchEvent(new CustomEvent(PluginSdk.ChatFormUiDataNames.CHAT_INPUT_IS_FOCUSED, {
          detail: {
            value: false
          }
        }));
      },
      onChange: handleMessageChange,
      onKeyDown: handleMessageKeyDown,
      onPaste: e => {
        e.stopPropagation();
      },
      onCut: e => {
        e.stopPropagation();
      },
      onCopy: e => {
        e.stopPropagation();
      },
      async: true
    }), ENABLE_EMOJI_PICKER ? /*#__PURE__*/React.createElement(Styled.EmojiButton, {
      onClick: () => setShowEmojiPicker(!showEmojiPicker),
      icon: "happy",
      color: "light",
      ghost: true,
      type: "button",
      circle: true,
      hideLabel: true,
      label: intl.formatMessage(messages.emojiButtonLabel),
      "data-test": "emojiPickerButton"
    }) : null, /*#__PURE__*/React.createElement(Styled.SendButton, {
      hideLabel: true,
      circle: true,
      "aria-label": intl.formatMessage(messages.submitLabel),
      type: "submit",
      disabled: disabled || partnerIsLoggedOut || chatSendMessageLoading,
      label: intl.formatMessage(messages.submitLabel),
      color: "primary",
      icon: "send",
      onClick: () => {},
      "data-test": "sendMessageButton"
    })), error && /*#__PURE__*/React.createElement(Styled.ChatMessageError, {
      "data-test": "errorTypingIndicator"
    }, error));
  };
  return ENABLE_EMOJI_PICKER ? /*#__PURE__*/React.createElement(ClickOutside, {
    onClick: () => handleClickOutside()
  }, renderForm()) : renderForm();
};
// eslint-disable-next-line no-empty-pattern
const ChatMessageFormContainer = _ref2 => {
  var _chat$participant, _chat$participant2, _meeting$lockSettings, _meeting$lockSettings2, _locked, _chat$participant3, _locked2;
  let {} = _ref2;
  const intl = useIntl();
  const [showEmojiPicker, setShowEmojiPicker] = React.useState(false);
  const idChatOpen = layoutSelect(i => i.idChatOpen);
  const isRTL = layoutSelect(i => i.isRTL);
  const {
    data: chat
  } = useChat(c => ({
    participant: c === null || c === void 0 ? void 0 : c.participant,
    chatId: c === null || c === void 0 ? void 0 : c.chatId,
    public: c === null || c === void 0 ? void 0 : c.public
  }), idChatOpen);
  const {
    data: currentUser
  } = useCurrentUser(c => ({
    isModerator: c === null || c === void 0 ? void 0 : c.isModerator,
    locked: c === null || c === void 0 ? void 0 : c.locked
  }));
  const title = chat !== null && chat !== void 0 && (_chat$participant = chat.participant) !== null && _chat$participant !== void 0 && _chat$participant.name ? intl.formatMessage(messages.titlePrivate, {
    0: chat === null || chat === void 0 ? void 0 : (_chat$participant2 = chat.participant) === null || _chat$participant2 === void 0 ? void 0 : _chat$participant2.name
  }) : intl.formatMessage(messages.titlePublic);
  const {
    data: meeting
  } = useMeeting(m => ({
    lockSettings: m === null || m === void 0 ? void 0 : m.lockSettings
  }));
  const isModerator = currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator;
  const isPublicChat = chat === null || chat === void 0 ? void 0 : chat.public;
  const isLocked = currentUser === null || currentUser === void 0 ? void 0 : currentUser.locked;
  const disablePublicChat = meeting === null || meeting === void 0 ? void 0 : (_meeting$lockSettings = meeting.lockSettings) === null || _meeting$lockSettings === void 0 ? void 0 : _meeting$lockSettings.disablePublicChat;
  const disablePrivateChat = meeting === null || meeting === void 0 ? void 0 : (_meeting$lockSettings2 = meeting.lockSettings) === null || _meeting$lockSettings2 === void 0 ? void 0 : _meeting$lockSettings2.disablePrivateChat;
  let locked = false;
  if (!isModerator) {
    if (isPublicChat) {
      locked = isLocked && disablePublicChat || false;
    } else {
      locked = isLocked && disablePrivateChat || false;
    }
  }
  const handleClickOutside = () => {
    if (showEmojiPicker) {
      setShowEmojiPicker(false);
    }
  };
  if (chat !== null && chat !== void 0 && chat.participant && !chat.participant.isOnline) {
    return /*#__PURE__*/React.createElement(ChatOfflineIndicator, {
      participantName: chat.participant.name
    });
  }
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  return /*#__PURE__*/React.createElement(ChatMessageForm, {
    minMessageLength: CHAT_CONFIG.min_message_length,
    maxMessageLength: CHAT_CONFIG.max_message_length,
    idChatOpen,
    handleClickOutside,
    chatId: idChatOpen,
    connected: true,
    disabled: (_locked = locked) !== null && _locked !== void 0 ? _locked : false,
    title,
    isRTL,
    // if participant is not defined, it means that the chat is public
    partnerIsLoggedOut: chat !== null && chat !== void 0 && chat.participant ? !(chat !== null && chat !== void 0 && (_chat$participant3 = chat.participant) !== null && _chat$participant3 !== void 0 && _chat$participant3.isOnline) : false,
    locked: (_locked2 = locked) !== null && _locked2 !== void 0 ? _locked2 : false
  });
};
module.exportDefault(ChatMessageFormContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-form/mutations.tsx                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  CHAT_SEND_MESSAGE: () => CHAT_SEND_MESSAGE,
  CHAT_SET_TYPING: () => CHAT_SET_TYPING
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CHAT_SEND_MESSAGE = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation ChatSendMessage($chatId: String!, $chatMessageInMarkdownFormat: String!) {\n    chatSendMessage(\n      chatId: $chatId,\n      chatMessageInMarkdownFormat: $chatMessageInMarkdownFormat\n    )\n  }\n"])));
const CHAT_SET_TYPING = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation ChatSetTyping($chatId: String!) {\n    chatSetTyping(\n      chatId: $chatId,\n    )\n  }\n"])));
module.exportDefault({
  CHAT_SEND_MESSAGE,
  CHAT_SET_TYPING
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-form/service.ts                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  textToMarkdown: () => textToMarkdown
});
const textToMarkdown = message => {
  const parsedMessage = message || '';
  const CODE_BLOCK_REGEX = /```([\s\S]*?)```/g;
  const isCode = parsedMessage.search(CODE_BLOCK_REGEX);
  // regular expression to match urls
  const urlRegex = /(http(s)?:\/\/.)?(www\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g;
  // regular expression to match URLs with IP addresses
  const ipUrlRegex = /\b(?:https?:\/\/)?(?:\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?::\d{1,5})?(?:\/\S*)?\b/g;
  // regular expression to match Markdown links
  const mdRegex = /\[([^\]]+)\]\(([^)]+)\)/g;
  // regular expression to match new lines
  const newLineRegex = /\n\r?/g;
  // append https:// to URLs that don't have it
  const appendHttps = (match, text, url) => {
    if (!/^https?:\/\//.test(url)) {
      return "[".concat(text, "](https://").concat(url, ")");
    }
    return match;
  };
  if (isCode !== -1) {
    return parsedMessage.trim();
  }
  return parsedMessage.trim().replace(urlRegex, '[$&]($&)').replace(ipUrlRegex, '[$&]($&)').replace(mdRegex, appendHttps).replace(newLineRegex, '  \n');
};
module.exportDefault({
  textToMarkdown
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-message-form/styles.ts                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorBlueLight, colorText, colorGrayLighter, colorPrimary, colorDanger, colorGrayDark;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorBlueLight(v) {
    colorBlueLight = v;
  },
  colorText(v) {
    colorText = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  }
}, 1);
let smPaddingX, smPaddingY, borderRadius, borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  borderSize(v) {
    borderSize = v;
  }
}, 2);
let fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 3);
let TextareaAutosize;
module.link("react-autosize-textarea", {
  default(v) {
    TextareaAutosize = v;
  }
}, 4);
let EmojiPickerComponent;
module.link("/imports/ui/components/emoji-picker/component", {
  default(v) {
    EmojiPickerComponent = v;
  }
}, 5);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 6);
const Form = styled.form(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  flex-grow: 0;\n  flex-shrink: 0;\n  align-self: flex-end;\n  width: 100%;\n  position: relative;\n  margin-top: .2rem;\n\n  ", "\n\n  ", "\n"])), _ref => {
  let {
    isRTL
  } = _ref;
  return isRTL && "\n    padding-left: ".concat(smPaddingX, ";\n  ");
}, _ref2 => {
  let {
    isRTL
  } = _ref2;
  return !isRTL && "\n    padding-right: ".concat(smPaddingX, ";\n  ");
});
const Wrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n"])));
const Input = styled(TextareaAutosize)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  flex: 1;\n  background: #fff;\n  background-clip: padding-box;\n  margin: 0;\n  color: ", ";\n  -webkit-appearance: none;\n  padding: calc(", " * 2.5) calc(", " * 1.25);\n  resize: none;\n  transition: none;\n  border-radius: ", ";\n  font-size: ", ";\n  line-height: 1;\n  min-height: 2.5rem;\n  max-height: 10rem;\n  border: 1px solid ", ";\n  box-shadow: 0 0 0 1px ", ";\n\n  &:disabled,\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: .75;\n    background-color: rgba(167,179,189,0.25);\n  }\n\n  &:focus {\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n  }\n\n  &:hover,\n  &:active,\n  &:focus {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n"])), colorText, smPaddingY, smPaddingX, borderRadius, fontSizeBase, colorGrayLighter, colorGrayLighter, borderSize, borderSize, colorBlueLight, colorPrimary, borderSize);
// @ts-ignore - as button comes from JS, we can't provide its props
const SendButton = styled(Button)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin:0 0 0 ", ";\n  align-self: center;\n  font-size: 0.9rem;\n\n  [dir=\"rtl\"]  & {\n    margin: 0 ", " 0 0;\n    -webkit-transform: scale(-1, 1);\n    -moz-transform: scale(-1, 1);\n    -ms-transform: scale(-1, 1);\n    -o-transform: scale(-1, 1);\n    transform: scale(-1, 1);\n  }\n"])), smPaddingX, smPaddingX);
const EmojiButtonWrapper = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""])));
// @ts-ignore - as button comes from JS, we can't provide its props
const EmojiButton = styled(Button)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  margin:0 0 0 ", ";\n  align-self: center;\n  font-size: 0.5rem;\n\n  [dir=\"rtl\"]  & {\n    margin: 0 ", " 0 0;\n    -webkit-transform: scale(-1, 1);\n    -moz-transform: scale(-1, 1);\n    -ms-transform: scale(-1, 1);\n    -o-transform: scale(-1, 1);\n    transform: scale(-1, 1);\n  }\n"])), smPaddingX, smPaddingX);
const EmojiPickerWrapper = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  .emoji-mart {\n    max-width: 100% !important;\n  }\n  .emoji-mart-anchor {\n    cursor: pointer;\n  }\n  .emoji-mart-emoji {\n    cursor: pointer !important;\n  }\n  .emoji-mart-category-list {\n    span {\n      cursor: pointer !important;\n      display: inline-block !important;\n    }\n  }\n"])));
const ChatMessageError = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: calc(", " * .75);\n  color: ", ";\n  text-align: left;\n  padding: ", " 0;\n  word-break: break-word;\n  position: relative;\n  margin-right: 0.05rem;\n  margin-left: 0.05rem;\n"])), colorDanger, fontSizeBase, colorGrayDark, borderSize);
const EmojiPicker = styled(EmojiPickerComponent)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([""])));
module.exportDefault({
  Form,
  Wrapper,
  Input,
  SendButton,
  EmojiButton,
  EmojiButtonWrapper,
  EmojiPicker,
  EmojiPickerWrapper,
  ChatMessageError
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"chat-popup":{"popup-content":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-popup/popup-content/component.tsx                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let PopupContentBox, PopupContentHeader, PopupContentBody, CloseButton;
module.link("./styles", {
  PopupContentBox(v) {
    PopupContentBox = v;
  },
  PopupContentHeader(v) {
    PopupContentHeader = v;
  },
  PopupContentBody(v) {
    PopupContentBody = v;
  },
  CloseButton(v) {
    CloseButton = v;
  }
}, 2);
const intlMessages = defineMessages({
  closePopup: {
    id: 'app.chat.closePopup',
    description: 'close popup button label'
  }
});
const PopupContent = _ref => {
  let {
    message,
    closePopup
  } = _ref;
  const intl = useIntl();
  const [showPopup, setShowPopup] = React.useState(true);
  if (!showPopup) return null;
  return /*#__PURE__*/React.createElement(PopupContentBox, {
    "data-test": "welcomeMessage"
  }, /*#__PURE__*/React.createElement(PopupContentHeader, null, /*#__PURE__*/React.createElement(CloseButton, {
    size: "sm",
    label: intl.formatMessage(intlMessages.closePopup),
    hideLabel: true,
    icon: "close",
    onClick: () => {
      setShowPopup(false);
      if (closePopup) closePopup();
    },
    "data-test": "closePopup"
  })), /*#__PURE__*/React.createElement(PopupContentBody, {
    dangerouslySetInnerHTML: {
      __html: message
    }
  }));
};
module.exportDefault(PopupContent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-popup/popup-content/styles.ts                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  PopupContentBox: () => PopupContentBox,
  PopupContentHeader: () => PopupContentHeader,
  PopupContentBody: () => PopupContentBody,
  CloseButton: () => CloseButton
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let borderRadius;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderRadius(v) {
    borderRadius = v;
  }
}, 1);
let fontSizeBase, btnFontWeight;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  btnFontWeight(v) {
    btnFontWeight = v;
  }
}, 2);
let systemMessageBackgroundColor, systemMessageBorderColor, systemMessageFontColor;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  systemMessageBackgroundColor(v) {
    systemMessageBackgroundColor = v;
  },
  systemMessageBorderColor(v) {
    systemMessageBorderColor = v;
  },
  systemMessageFontColor(v) {
    systemMessageFontColor = v;
  }
}, 3);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 4);
const PopupContentBox = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: inherit;\n  flex-direction: column;\n  align-items: flex-start;\n  background-color: ", ";\n  border: 1px solid ", ";\n  border-radius: ", ";\n  padding: ", ";\n  margin-top: 0;\n  margin-bottom: 1rem;\n  z-index: 10;\n"])), systemMessageBackgroundColor, systemMessageBorderColor, borderRadius, fontSizeBase);
const PopupContentHeader = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  align-self: flex-end;\n"])));
const PopupContentBody = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-weight: ", ";\n  overflow-wrap: break-word;\n  word-break: break-word;\n"])), systemMessageFontColor, btnFontWeight);
const CloseButton = styled(Button)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  border: none;\n  background-color: transparent;\n  grid-area: 1 / 1 / 2 / 2;\n  justify-self: end;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  float: right;\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-popup/component.tsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let PopupContainer, PopupContents;
module.link("./styles", {
  PopupContainer(v) {
    PopupContainer = v;
  },
  PopupContents(v) {
    PopupContents = v;
  }
}, 1);
let GET_WELCOME_MESSAGE;
module.link("./queries", {
  GET_WELCOME_MESSAGE(v) {
    GET_WELCOME_MESSAGE = v;
  }
}, 2);
let useQuery;
module.link("@apollo/client", {
  useQuery(v) {
    useQuery = v;
  }
}, 3);
let PopupContent;
module.link("./popup-content/component", {
  default(v) {
    PopupContent = v;
  }
}, 4);
let layoutSelect;
module.link("../../../layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 5);
let ChatCommands;
module.link("/imports/ui/core/enums/chat", {
  ChatCommands(v) {
    ChatCommands = v;
  }
}, 6);
const WELCOME_MSG_KEY = 'welcomeMsg';
const WELCOME_MSG_FOR_MODERATORS_KEY = 'welcomeMsgForModerators';
const setWelcomeMsgsOnSession = (key, value) => {
  sessionStorage.setItem(key, String(value));
};
const isBoolean = v => {
  if (v === 'true') {
    return true;
  }
  if (v === 'false') {
    return false;
  }
  // if v is not defined it shouldn't be considered on comparison, so it returns true
  return true;
};
const ChatPopup = _ref => {
  let {
    welcomeMessage,
    welcomeMsgForModerators
  } = _ref;
  const [showWelcomeMessage, setShowWelcomeMessage] = React.useState(welcomeMessage && isBoolean(sessionStorage.getItem(WELCOME_MSG_KEY)));
  const [showWelcomeMessageForModerators, setShowWelcomeMessageForModerators] = React.useState(welcomeMsgForModerators && isBoolean(sessionStorage.getItem(WELCOME_MSG_FOR_MODERATORS_KEY)));
  useEffect(() => {
    const eventCallback = () => {
      if (welcomeMessage) {
        setShowWelcomeMessage(true);
        setWelcomeMsgsOnSession(WELCOME_MSG_KEY, true);
      }
      if (welcomeMsgForModerators) {
        setShowWelcomeMessageForModerators(true);
        setWelcomeMsgsOnSession(WELCOME_MSG_FOR_MODERATORS_KEY, true);
      }
    };
    window.addEventListener(ChatCommands.RESTORE_WELCOME_MESSAGES, eventCallback);
    return () => {
      // eslint-disable-next-line no-restricted-globals
      removeEventListener(ChatCommands.RESTORE_WELCOME_MESSAGES, eventCallback);
    };
  }, []);
  if (!showWelcomeMessage && !showWelcomeMessageForModerators) return null;
  return /*#__PURE__*/React.createElement(PopupContainer, null, /*#__PURE__*/React.createElement(PopupContents, null, showWelcomeMessage && welcomeMessage && /*#__PURE__*/React.createElement(PopupContent, {
    message: welcomeMessage,
    closePopup: () => {
      setShowWelcomeMessage(false);
      setWelcomeMsgsOnSession(WELCOME_MSG_KEY, false);
    }
  }), showWelcomeMessageForModerators && welcomeMsgForModerators && /*#__PURE__*/React.createElement(PopupContent, {
    message: welcomeMsgForModerators,
    closePopup: () => {
      setShowWelcomeMessageForModerators(false);
      setWelcomeMsgsOnSession(WELCOME_MSG_FOR_MODERATORS_KEY, false);
    }
  })));
};
const ChatPopupContainer = () => {
  var _welcomeData$user_wel, _welcomeData$user_wel2;
  const {
    data: welcomeData,
    loading: welcomeLoading,
    error: welcomeError
  } = useQuery(GET_WELCOME_MESSAGE);
  const idChatOpen = layoutSelect(i => i.idChatOpen);
  const PUBLIC_GROUP_CHAT_KEY = window.meetingClientSettings.public.chat.public_group_id;
  if (idChatOpen !== PUBLIC_GROUP_CHAT_KEY) return null;
  if (welcomeLoading) return null;
  if (welcomeError) return /*#__PURE__*/React.createElement("div", null, JSON.stringify(welcomeError));
  if (!welcomeData) return null;
  return /*#__PURE__*/React.createElement(ChatPopup, {
    welcomeMessage: (_welcomeData$user_wel = welcomeData.user_welcomeMsgs[0]) === null || _welcomeData$user_wel === void 0 ? void 0 : _welcomeData$user_wel.welcomeMsg,
    welcomeMsgForModerators: (_welcomeData$user_wel2 = welcomeData.user_welcomeMsgs[0]) === null || _welcomeData$user_wel2 === void 0 ? void 0 : _welcomeData$user_wel2.welcomeMsgForModerators
  });
};
module.exportDefault(ChatPopupContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-popup/queries.ts                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  GET_WELCOME_MESSAGE: () => GET_WELCOME_MESSAGE
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const GET_WELCOME_MESSAGE = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  query getWelcomeMessage{\n    user_welcomeMsgs {\n      welcomeMsg\n      welcomeMsgForModerators\n    }\n  }\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-popup/styles.ts                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  PopupContainer: () => PopupContainer,
  PopupContents: () => PopupContents
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 1);
const PopupContainer = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: sticky;\n  top: 0;\n  max-height: 80%;\n  z-index: 3;\n  background-color: white;\n"])));
const PopupContents = styled(ScrollboxVertical)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: 100%;\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"chat-typing-indicator":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-typing-indicator/component.tsx                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let IS_TYPING_PUBLIC_SUBSCRIPTION, IS_TYPING_PRIVATE_SUBSCRIPTION;
module.link("./queries", {
  IS_TYPING_PUBLIC_SUBSCRIPTION(v) {
    IS_TYPING_PUBLIC_SUBSCRIPTION = v;
  },
  IS_TYPING_PRIVATE_SUBSCRIPTION(v) {
    IS_TYPING_PRIVATE_SUBSCRIPTION = v;
  }
}, 1);
let defineMessages, FormattedMessage, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  FormattedMessage(v) {
    FormattedMessage = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 4);
let layoutSelect;
module.link("../../../layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 5);
let useChat;
module.link("/imports/ui/core/hooks/useChat", {
  default(v) {
    useChat = v;
  }
}, 6);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 7);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 8);
const DEBUG_CONSOLE = false;
const messages = defineMessages({
  severalPeople: {
    id: 'app.chat.multi.typing',
    description: 'displayed when 4 or more users are typing'
  }
});
const TypingIndicator = _ref => {
  let {
    typingUsers,
    intl
  } = _ref;
  const {
    length
  } = typingUsers;
  const isSingleTyper = length === 1;
  const isCoupleTyper = length === 2;
  const isMultiTypers = length > 2;
  let element = null;
  if (isSingleTyper) {
    var _typingUsers$;
    const name = (_typingUsers$ = typingUsers[0]) === null || _typingUsers$ === void 0 ? void 0 : _typingUsers$.name;
    element = /*#__PURE__*/React.createElement(FormattedMessage, {
      id: "app.chat.one.typing",
      description: "label used when one user is typing",
      values: {
        0: /*#__PURE__*/React.createElement(Styled.SingleTyper, null, "".concat(name), "\xA0")
      }
    });
  }
  if (isCoupleTyper) {
    var _typingUsers$2, _typingUsers$3;
    const name = (_typingUsers$2 = typingUsers[0]) === null || _typingUsers$2 === void 0 ? void 0 : _typingUsers$2.name;
    const name2 = (_typingUsers$3 = typingUsers[1]) === null || _typingUsers$3 === void 0 ? void 0 : _typingUsers$3.name;
    element = /*#__PURE__*/React.createElement(FormattedMessage, {
      id: "app.chat.two.typing",
      description: "label used when two users are typing",
      values: {
        0: /*#__PURE__*/React.createElement(Styled.CoupleTyper, null, "".concat(name), "\xA0"),
        1: /*#__PURE__*/React.createElement(Styled.CoupleTyper, null, "\xA0", "".concat(name2), "\xA0")
      }
    });
  }
  if (isMultiTypers) {
    element = /*#__PURE__*/React.createElement("span", null, "".concat(intl.formatMessage(messages.severalPeople)));
  }
  return /*#__PURE__*/React.createElement(Styled.TypingIndicatorWrapper, null, /*#__PURE__*/React.createElement(Styled.TypingIndicator, {
    "data-test": "typingIndicator"
  }, element));
};
const TypingIndicatorContainer = () => {
  var _meeting$lockSettings, _meeting$lockSettings2;
  const idChatOpen = layoutSelect(i => i.idChatOpen);
  const intl = useIntl();
  const {
    data: currentUser
  } = useCurrentUser(user => {
    return {
      userId: user.userId,
      isModerator: user.isModerator,
      locked: user.locked
    };
  });
  // eslint-disable-next-line no-unused-expressions, no-console
  DEBUG_CONSOLE && console.log('TypingIndicatorContainer:currentUser', currentUser);
  const {
    data: chat
  } = useChat(c => {
    return {
      participant: c === null || c === void 0 ? void 0 : c.participant,
      chatId: c === null || c === void 0 ? void 0 : c.chatId,
      public: c === null || c === void 0 ? void 0 : c.public
    };
  }, idChatOpen);
  const {
    data: meeting
  } = useMeeting(m => ({
    lockSettings: m === null || m === void 0 ? void 0 : m.lockSettings
  }));
  const isLocked = currentUser === null || currentUser === void 0 ? void 0 : currentUser.locked;
  const isModerator = currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator;
  const isPublicChat = chat === null || chat === void 0 ? void 0 : chat.public;
  const disablePublicChat = meeting === null || meeting === void 0 ? void 0 : (_meeting$lockSettings = meeting.lockSettings) === null || _meeting$lockSettings === void 0 ? void 0 : _meeting$lockSettings.disablePublicChat;
  const disablePrivateChat = meeting === null || meeting === void 0 ? void 0 : (_meeting$lockSettings2 = meeting.lockSettings) === null || _meeting$lockSettings2 === void 0 ? void 0 : _meeting$lockSettings2.disablePrivateChat;
  let locked = false;
  if (!isModerator) {
    if (isPublicChat) {
      locked = isLocked && disablePublicChat || false;
    } else {
      locked = isLocked && disablePrivateChat || false;
    }
  }
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  const PUBLIC_GROUP_CHAT_KEY = CHAT_CONFIG.public_group_id;
  const TYPING_INDICATOR_ENABLED = CHAT_CONFIG.typingIndicator.enabled;
  // eslint-disable-next-line no-unused-expressions, no-console
  DEBUG_CONSOLE && console.log('TypingIndicatorContainer:chat', chat);
  const typingQuery = idChatOpen === PUBLIC_GROUP_CHAT_KEY ? IS_TYPING_PUBLIC_SUBSCRIPTION : IS_TYPING_PRIVATE_SUBSCRIPTION;
  const {
    data: typingUsersData,
    error: typingUsersError
  } = useDeduplicatedSubscription(typingQuery, {
    variables: {
      chatId: idChatOpen
    }
  });
  // eslint-disable-next-line no-unused-expressions, no-console
  DEBUG_CONSOLE && console.log('TypingIndicatorContainer:typingUsersData', typingUsersData);
  if (typingUsersError) {
    return /*#__PURE__*/React.createElement("div", null, "Error:", JSON.stringify(typingUsersError));
  }
  const publicTypingUsers = (typingUsersData === null || typingUsersData === void 0 ? void 0 : typingUsersData.user_typing_public) || [];
  const privateTypingUsers = (typingUsersData === null || typingUsersData === void 0 ? void 0 : typingUsersData.user_typing_private) || [];
  const typingUsers = privateTypingUsers.concat(publicTypingUsers);
  const typingUsersArray = typingUsers.filter(user => (user === null || user === void 0 ? void 0 : user.user) && (user === null || user === void 0 ? void 0 : user.userId) !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId)).map(user => user.user);
  if (locked || !TYPING_INDICATOR_ENABLED || !typingUsers) return null;
  return /*#__PURE__*/React.createElement(TypingIndicator, {
    typingUsers: typingUsersArray,
    intl: intl
  });
};
module.exportDefault(TypingIndicatorContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-typing-indicator/queries.ts                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  IS_TYPING_PUBLIC_SUBSCRIPTION: () => IS_TYPING_PUBLIC_SUBSCRIPTION,
  IS_TYPING_PRIVATE_SUBSCRIPTION: () => IS_TYPING_PRIVATE_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const IS_TYPING_PUBLIC_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["subscription IsTyping($chatId: String!) {\n  user_typing_public(\n      order_by: {startedTypingAt: asc}\n      limit: 4,\n      where: {\n        isCurrentlyTyping: {_eq: true}\n        chatId: {_eq: $chatId}\n      }\n    ) {\n    chatId\n    userId\n    isCurrentlyTyping\n    user {\n      name\n    }\n  }  \n}"])));
const IS_TYPING_PRIVATE_SUBSCRIPTION = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["subscription IsTyping($chatId: String!) {\n  user_typing_private(\n      where: {\n        isCurrentlyTyping: {_eq: true}\n        chatId: {_eq: $chatId}\n      }\n    ) {\n    chatId\n    userId\n    isCurrentlyTyping\n    user {\n      name\n    }\n  }\n}"])));
module.exportDefault({
  IS_TYPING_PUBLIC_SUBSCRIPTION,
  IS_TYPING_PRIVATE_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/chat-typing-indicator/styles.ts                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGrayDark;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  }
}, 1);
let smPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingY(v) {
    smPaddingY = v;
  }
}, 2);
let fontSizeSmaller, fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmaller(v) {
    fontSizeSmaller = v;
  },
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 3);
const SingleTyper = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-weight: bold;\n  font-size: ", ";\n  max-width: 70%;\n"])), fontSizeSmaller);
const CoupleTyper = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-weight: bold;\n  font-size: ", ";\n  max-width: 25%;\n"])), fontSizeSmaller);
const TypingIndicator = styled.span(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n\n  > span {\n    display: block;\n    margin-right: 0.05rem;\n    margin-left: 0.05rem;\n  }\n\n  text-align: left;\n  [dir=\"rtl\"] & {\n    text-align: right;\n  }\n"])));
const TypingIndicatorWrapper = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  font-size: calc(", " * .75);\n  color: ", ";\n  text-align: left;\n  vertical-align: top;\n  padding: ", " 0;\n  height: 1.5rem;\n  max-height: 1.5rem;\n  line-height: 1;\n  overflow-y: hidden;\n"])), fontSizeBase, colorGrayDark, smPaddingY);
module.exportDefault({
  SingleTyper,
  CoupleTyper,
  TypingIndicator,
  TypingIndicatorWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/component.tsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  ChatLoading: () => ChatLoading
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let ChatHeader;
module.link("./chat-header/component", {
  default(v) {
    ChatHeader = v;
  }
}, 1);
let layoutSelect, layoutSelectInput;
module.link("../../layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let ChatMessageListContainer;
module.link("./chat-message-list/component", {
  default(v) {
    ChatMessageListContainer = v;
  }
}, 4);
let ChatMessageFormContainer;
module.link("./chat-message-form/component", {
  default(v) {
    ChatMessageFormContainer = v;
  }
}, 5);
let ChatTypingIndicatorContainer;
module.link("./chat-typing-indicator/component", {
  default(v) {
    ChatTypingIndicatorContainer = v;
  }
}, 6);
let PANELS, ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 7);
let CircularProgress;
module.link("@mui/material", {
  CircularProgress(v) {
    CircularProgress = v;
  }
}, 8);
let usePendingChat;
module.link("/imports/ui/core/local-states/usePendingChat", {
  default(v) {
    usePendingChat = v;
  }
}, 9);
let useChat;
module.link("/imports/ui/core/hooks/useChat", {
  default(v) {
    useChat = v;
  }
}, 10);
let layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 11);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 12);
const Chat = _ref => {
  let {
    isRTL
  } = _ref;
  const {
    isChrome
  } = browserInfo;
  return /*#__PURE__*/React.createElement(Styled.Chat, {
    isRTL: isRTL,
    isChrome: isChrome
  }, /*#__PURE__*/React.createElement(ChatHeader, null), /*#__PURE__*/React.createElement(ChatMessageListContainer, null), /*#__PURE__*/React.createElement(ChatMessageFormContainer, null), /*#__PURE__*/React.createElement(ChatTypingIndicatorContainer, null));
};
const ChatLoading = _ref2 => {
  let {
    isRTL
  } = _ref2;
  const {
    isChrome
  } = browserInfo;
  return /*#__PURE__*/React.createElement(Styled.Chat, {
    isRTL: isRTL,
    isChrome: isChrome
  }, /*#__PURE__*/React.createElement(CircularProgress, {
    style: {
      alignSelf: 'center'
    }
  }));
};
const ChatContainer = () => {
  const idChatOpen = layoutSelect(i => i.idChatOpen);
  const isRTL = layoutSelect(i => i.isRTL);
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const layoutContextDispatch = layoutDispatch();
  const {
    data: chats
  } = useChat(chat => {
    return {
      chatId: chat.chatId,
      participant: chat.participant
    };
  });
  const [pendingChat, setPendingChat] = usePendingChat();
  if (pendingChat && chats) {
    const chat = chats.find(c => {
      var _c$participant;
      return ((_c$participant = c.participant) === null || _c$participant === void 0 ? void 0 : _c$participant.userId) === pendingChat;
    });
    if (chat) {
      setPendingChat('');
      layoutContextDispatch({
        type: ACTIONS.SET_ID_CHAT_OPEN,
        value: chat.chatId
      });
    }
  }
  if (sidebarContent.sidebarContentPanel !== PANELS.CHAT) return null;
  if (!idChatOpen) return /*#__PURE__*/React.createElement(ChatLoading, {
    isRTL: isRTL
  });
  return /*#__PURE__*/React.createElement(Chat, {
    isRTL: isRTL
  });
};
module.exportDefault(ChatContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-graphql/styles.ts                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  Chat: () => Chat
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite, colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 1);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 2);
let smPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  }
}, 3);
const Chat = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: ", ";\n  padding: ", ";\n  padding-bottom: 0;\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  justify-content: space-around;\n  overflow: hidden;\n  height: 100%;\n\n  ", "\n\n  ", "\n\n  a {\n    color: ", ";\n    text-decoration: none;\n\n    &:focus {\n      color: ", ";\n      text-decoration: underline;\n    }\n    &:hover {\n      filter: brightness(90%);\n      text-decoration: underline;\n    }\n    &:active {\n      filter: brightness(85%);\n      text-decoration: underline;\n    }\n    &:hover:focus {\n      filter: brightness(90%);\n      text-decoration: underline;\n    }\n    &:focus:active {\n      filter: brightness(85%);\n      text-decoration: underline;\n    }\n  }\n  u {\n    text-decoration-line: none;\n  }\n\n  ", "\n\n  @media ", " {\n    transform: none !important;\n  }\n"])), colorWhite, smPaddingX, _ref => {
  let {
    isRTL
  } = _ref;
  return isRTL && "\n    padding-left: 0.1rem;\n  ";
}, _ref2 => {
  let {
    isRTL
  } = _ref2;
  return !isRTL && "\n    padding-right: 0.1rem;\n  ";
}, colorPrimary, colorPrimary, _ref3 => {
  let {
    isChrome
  } = _ref3;
  return isChrome && "\n    transform: translateZ(0);\n  ";
}, smallOnly);
const ChatContent = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: 100%;\n  display: contents;\n"])));
const ChatMessages = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
module.exportDefault({
  Chat,
  ChatMessages,
  ChatContent
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"chat-logger":{"ChatLogger.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/chat/chat-logger/ChatLogger.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
class ChatLogger {
  constructor() {
    this.logLevel = 'info';
    this.levels = Object.freeze({
      error: 1,
      info: 2,
      debug: 3,
      trace: 4
    });
    Object.keys(this.levels).forEach(i => {
      this[i] = this.logger.bind(this, i);
    });
  }
  setLogLevel(level) {
    if (this.levels[level]) {
      this.logLevel = level;
    } else {
      throw new Error('This Level not exist');
    }
  }
  getLogLevel() {
    return this.logLevel;
  }
  logger(level) {
    const logLevel = this.levels[level];
    if (this.levels[this.logLevel] >= logLevel) {
      for (var _len = arguments.length, text = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        text[_key - 1] = arguments[_key];
      }
      console.log("".concat(level, ":"), ...text);
    }
  }
}
module.exportDefault(new ChatLogger());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"user-list":{"user-list-content":{"user-participants":{"user-list-participants":{"list-item":{"skeleton":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/list-item/skeleton/compo //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Skeleton, SkeletonTheme;
module.link("react-loading-skeleton", {
  default(v) {
    Skeleton = v;
  },
  SkeletonTheme(v) {
    SkeletonTheme = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let listItemStyles;
module.link("../styles", {
  default(v) {
    listItemStyles = v;
  }
}, 3);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 4);
const SkeletonUserListItem = _ref => {
  let {
    enableAnimation = true
  } = _ref;
  const Settings = getSettingsSingletonInstance();
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore - temporary while settings are still in .js
  const {
    isRTL
  } = Settings.application;
  return /*#__PURE__*/React.createElement(Styled.SkeletonUserItemContents, null, /*#__PURE__*/React.createElement(SkeletonTheme, {
    baseColor: "#DCE4EC",
    enableAnimation: enableAnimation
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      direction: isRTL ? 'rtl' : 'ltr',
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(listItemStyles.UserItemContents, null, /*#__PURE__*/React.createElement(Styled.UserAvatar, {
    "data-test": "userAvatar"
  }, /*#__PURE__*/React.createElement(listItemStyles.Avatar, {
    isSkeleton: true
  }, /*#__PURE__*/React.createElement(Skeleton, {
    circle: true
  }))), /*#__PURE__*/React.createElement(listItemStyles.UserNameContainer, null, /*#__PURE__*/React.createElement(listItemStyles.UserName, null, /*#__PURE__*/React.createElement(Styled.SkeletonWrapper, null, /*#__PURE__*/React.createElement(Skeleton, null))), /*#__PURE__*/React.createElement(listItemStyles.UserNameSub, null, /*#__PURE__*/React.createElement(Styled.SkeletonWrapper, null, /*#__PURE__*/React.createElement(Skeleton, null))))))));
};
module.exportDefault(SkeletonUserListItem);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/list-item/skeleton/style //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const SkeletonUserItemContents = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: static;\n  padding: .45rem;\n  margin-left: .5rem;\n  margin-right: .5rem;\n  width: auto;\n"])));
const UserAvatar = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  flex: 0 0 2.25rem;\n"])));
const SkeletonWrapper = styled.span(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: 100%;\n"])));
module.exportDefault({
  SkeletonUserItemContents,
  UserAvatar,
  SkeletonWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/list-item/component.tsx  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let UserListItemAdditionalInformationType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/user-list-item-additional-information/enums", {
  UserListItemAdditionalInformationType(v) {
    UserListItemAdditionalInformationType = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 3);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 4);
let Icon;
module.link("/imports/ui/components/common/icon/icon-ts/component", {
  default(v) {
    Icon = v;
  }
}, 5);
let TooltipContainer;
module.link("/imports/ui/components/common/tooltip/container", {
  default(v) {
    TooltipContainer = v;
  }
}, 6);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 7);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 8);
let convertRemToPixels;
module.link("/imports/utils/dom-utils", {
  convertRemToPixels(v) {
    convertRemToPixels = v;
  }
}, 9);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 10);
let useIsReactionsEnabled;
module.link("/imports/ui/services/features", {
  useIsReactionsEnabled(v) {
    useIsReactionsEnabled = v;
  }
}, 11);
let useWhoIsTalking;
module.link("/imports/ui/core/hooks/useWhoIsTalking", {
  default(v) {
    useWhoIsTalking = v;
  }
}, 12);
let useWhoIsUnmuted;
module.link("/imports/ui/core/hooks/useWhoIsUnmuted", {
  default(v) {
    useWhoIsUnmuted = v;
  }
}, 13);
const messages = defineMessages({
  moderator: {
    id: 'app.userList.moderator',
    description: 'Text for identifying moderator user'
  },
  mobile: {
    id: 'app.userList.mobile',
    description: 'Text for identifying mobile user'
  },
  guest: {
    id: 'app.userList.guest',
    description: 'Text for identifying guest user'
  },
  sharingWebcam: {
    id: 'app.userList.sharingWebcam',
    description: 'Text for identifying who is sharing webcam'
  },
  locked: {
    id: 'app.userList.locked',
    description: 'Text for identifying locked user'
  },
  breakoutRoom: {
    id: 'app.createBreakoutRoom.room',
    description: 'breakout room'
  },
  you: {
    id: 'app.userList.you',
    description: 'Text for identifying your user'
  }
});
const {
  isChrome,
  isFirefox,
  isEdge
} = browserInfo;
const renderUserListItemIconsFromPlugin = userItemsFromPlugin => userItemsFromPlugin.filter(item => item.type === UserListItemAdditionalInformationType.ICON).map(item => {
  const itemToRender = item;
  return /*#__PURE__*/React.createElement(Styled.IconRightContainer, {
    key: item.id
  }, /*#__PURE__*/React.createElement(Icon, {
    iconName: itemToRender.icon
  }));
});
const Emoji = _ref => {
  let {
    emoji,
    native,
    size
  } = _ref;
  return /*#__PURE__*/React.createElement("em-emoji", {
    emoji: emoji,
    native: native,
    size: size
  });
};
const UserListItem = _ref2 => {
  var _user$lastBreakoutRoo, _user$lastBreakoutRoo5, _user$lastBreakoutRoo6, _user$presPagesWritab;
  let {
    user,
    lockSettings
  } = _ref2;
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let userItemsFromPlugin = [];
  if (pluginsExtensibleAreasAggregatedState.userListItemAdditionalInformation) {
    userItemsFromPlugin = pluginsExtensibleAreasAggregatedState.userListItemAdditionalInformation.filter(item => {
      const userListItem = item;
      return userListItem.userId === user.userId;
    });
  }
  const intl = useIntl();
  const {
    data: talkingUsers
  } = useWhoIsTalking();
  const {
    data: unmutedUsers
  } = useWhoIsUnmuted();
  const voiceUser = _objectSpread(_objectSpread({}, user.voice), {}, {
    talking: talkingUsers[user.userId],
    muted: !unmutedUsers[user.userId]
  });
  const subs = [];
  const LABEL = window.meetingClientSettings.public.user.label;
  if (user.isModerator && LABEL.moderator) {
    subs.push(intl.formatMessage(messages.moderator));
  }
  if (user.guest && LABEL.guest) {
    subs.push(intl.formatMessage(messages.guest));
  }
  if (user.mobile && LABEL.mobile) {
    subs.push(intl.formatMessage(messages.mobile));
  }
  if (user.locked && lockSettings !== null && lockSettings !== void 0 && lockSettings.hasActiveLockSetting && !user.isModerator) {
    subs.push( /*#__PURE__*/React.createElement("span", {
      key: uniqueId('lock-')
    }, /*#__PURE__*/React.createElement(Icon, {
      iconName: "lock"
    }), "\xA0", intl.formatMessage(messages.locked)));
  }
  if ((_user$lastBreakoutRoo = user.lastBreakoutRoom) !== null && _user$lastBreakoutRoo !== void 0 && _user$lastBreakoutRoo.currentlyInRoom) {
    var _user$lastBreakoutRoo2, _user$lastBreakoutRoo3, _user$lastBreakoutRoo4;
    subs.push( /*#__PURE__*/React.createElement("span", {
      key: uniqueId('breakout-')
    }, /*#__PURE__*/React.createElement(Icon, {
      iconName: "rooms"
    }), "\xA0", (_user$lastBreakoutRoo2 = user.lastBreakoutRoom) !== null && _user$lastBreakoutRoo2 !== void 0 && _user$lastBreakoutRoo2.shortName ? intl.formatMessage(messages.breakoutRoom, {
      0: (_user$lastBreakoutRoo3 = user.lastBreakoutRoom) === null || _user$lastBreakoutRoo3 === void 0 ? void 0 : _user$lastBreakoutRoo3.sequence
    }) : (_user$lastBreakoutRoo4 = user.lastBreakoutRoom) === null || _user$lastBreakoutRoo4 === void 0 ? void 0 : _user$lastBreakoutRoo4.shortName));
  }
  if (user.cameras.length > 0 && LABEL.sharingWebcam) {
    subs.push( /*#__PURE__*/React.createElement("span", {
      key: uniqueId('breakout-')
    }, user.pinned === true ? /*#__PURE__*/React.createElement(Icon, {
      iconName: "pin-video_on"
    }) : /*#__PURE__*/React.createElement(Icon, {
      iconName: "video"
    }), "\xA0", intl.formatMessage(messages.sharingWebcam)));
  }
  userItemsFromPlugin.filter(item => item.type === UserListItemAdditionalInformationType.LABEL).forEach(item => {
    const itemToRender = item;
    subs.push( /*#__PURE__*/React.createElement("span", {
      key: itemToRender.id
    }, itemToRender.icon && /*#__PURE__*/React.createElement(Styled.UserAdditionalInformationIcon, {
      iconName: itemToRender.icon
    }), itemToRender.label));
  });
  const reactionsEnabled = useIsReactionsEnabled();
  const userAvatarFiltered = user.raiseHand === true || user.away === true || user.reactionEmoji && user.reactionEmoji !== 'none' ? '' : user.avatar;
  const emojiIcons = [{
    id: 'hand',
    native: '✋'
  }, {
    id: 'clock7',
    native: '⏰'
  }];
  const getIconUser = () => {
    const emojiSize = convertRemToPixels(1.3);
    if (user.isDialIn) {
      return /*#__PURE__*/React.createElement(Icon, {
        iconName: "volume_level_2"
      });
    }
    if (user.raiseHand === true) {
      return reactionsEnabled ? /*#__PURE__*/React.createElement(Emoji, {
        key: emojiIcons[0].id,
        emoji: emojiIcons[0],
        native: emojiIcons[0].native,
        size: emojiSize
      }) : /*#__PURE__*/React.createElement(Icon, {
        iconName: "hand"
      });
    }
    if (user.away === true) {
      return reactionsEnabled ? /*#__PURE__*/React.createElement(Emoji, {
        key: "away",
        emoji: emojiIcons[1],
        native: emojiIcons[1].native,
        size: emojiSize
      }) : /*#__PURE__*/React.createElement(Icon, {
        iconName: "time"
      });
    }
    if (user.reactionEmoji && user.reactionEmoji !== 'none') {
      return user.reactionEmoji;
    }
    if (user.name && userAvatarFiltered.length === 0) {
      return user.name.toLowerCase().slice(0, 2);
    }
    return '';
  };
  const avatarContent = (_user$lastBreakoutRoo5 = user.lastBreakoutRoom) !== null && _user$lastBreakoutRoo5 !== void 0 && _user$lastBreakoutRoo5.currentlyInRoom && userAvatarFiltered.length === 0 ? (_user$lastBreakoutRoo6 = user.lastBreakoutRoom) === null || _user$lastBreakoutRoo6 === void 0 ? void 0 : _user$lastBreakoutRoo6.sequence : getIconUser();
  const hasWhiteboardAccess = user === null || user === void 0 ? void 0 : (_user$presPagesWritab = user.presPagesWritable) === null || _user$presPagesWritab === void 0 ? void 0 : _user$presPagesWritab.some(page => page.isCurrentPage);
  function addSeparator(elements) {
    const modifiedElements = [];
    elements.forEach((element, index) => {
      modifiedElements.push(element);
      if (index !== elements.length - 1) {
        modifiedElements.push( /*#__PURE__*/React.createElement("span", {
          key: uniqueId('separator-')
        }, " | "));
      }
    });
    return modifiedElements;
  }
  return /*#__PURE__*/React.createElement(Styled.UserItemContents, {
    tabIndex: -1,
    "data-test": user.userId === Auth.userID ? 'userListItemCurrent' : 'userListItem'
  }, /*#__PURE__*/React.createElement(Styled.Avatar, {
    "data-test": user.isModerator ? 'moderatorAvatar' : 'viewerAvatar',
    "data-test-presenter": user.presenter ? '' : undefined,
    "data-test-avatar": "userAvatar",
    moderator: user.isModerator,
    presenter: user.presenter,
    talking: voiceUser === null || voiceUser === void 0 ? void 0 : voiceUser.talking,
    muted: voiceUser === null || voiceUser === void 0 ? void 0 : voiceUser.muted,
    listenOnly: voiceUser === null || voiceUser === void 0 ? void 0 : voiceUser.listenOnly,
    voice: voiceUser === null || voiceUser === void 0 ? void 0 : voiceUser.joined,
    noVoice: !(voiceUser !== null && voiceUser !== void 0 && voiceUser.joined),
    color: user.color,
    whiteboardAccess: hasWhiteboardAccess,
    animations: true,
    avatar: userAvatarFiltered,
    isChrome: isChrome,
    isFirefox: isFirefox,
    isEdge: isEdge
  }, avatarContent), /*#__PURE__*/React.createElement(Styled.UserNameContainer, null, /*#__PURE__*/React.createElement(Styled.UserName, null, /*#__PURE__*/React.createElement(TooltipContainer, {
    title: user.name
  }, /*#__PURE__*/React.createElement("span", null, user.name)), "\xA0", user.userId === Auth.userID ? "(".concat(intl.formatMessage(messages.you), ")") : ''), /*#__PURE__*/React.createElement(Styled.UserNameSub, {
    "data-test": user.mobile ? 'mobileUser' : undefined
  }, subs.length ? addSeparator(subs) : null)), renderUserListItemIconsFromPlugin(userItemsFromPlugin));
};
module.exportDefault(UserListItem);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/list-item/styles.ts      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let lgPaddingY, smPaddingY, borderSize, smPaddingX, userIndicatorsOffset, mdPaddingY, indicatorPadding;
module.link("/imports/ui/stylesheets/styled-components/general", {
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  userIndicatorsOffset(v) {
    userIndicatorsOffset = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  indicatorPadding(v) {
    indicatorPadding = v;
  }
}, 1);
let listItemBgHover, itemFocusBorder, colorGray, colorGrayDark, colorPrimary, colorWhite, userListBg, colorSuccess, colorDanger, colorOffWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  listItemBgHover(v) {
    listItemBgHover = v;
  },
  itemFocusBorder(v) {
    itemFocusBorder = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  userListBg(v) {
    userListBg = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  }
}, 2);
let Icon;
module.link("/imports/ui/components/common/icon/icon-ts/component", {
  default(v) {
    Icon = v;
  }
}, 3);
const UserItemContents = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: static;\n  padding: .45rem;\n  width: 100%;\n  margin-left: .5rem;\n\n\n  ", "\n\n  ", "\n\n  ", "\n\n  flex-grow: 0;\n  display: flex;\n  flex-flow: row;\n  border: 3px solid transparent;\n\n  [dir=\"rtl\"] & {\n    padding: ", " ", " ", " 0;\n  }\n"])), _ref => {
  let {
    selected
  } = _ref;
  return selected && "\n    background-color: ".concat(listItemBgHover, ";\n    border-top-left-radius: ").concat(smPaddingY, ";\n    border-bottom-left-radius: ").concat(smPaddingY, ";\n\n    &:focus {\n      box-shadow: inset 0 0 0 ").concat(borderSize, " ").concat(itemFocusBorder, ", inset 1px 0 0 1px ").concat(itemFocusBorder, ";\n    }\n  ");
}, _ref2 => {
  let {
    isActionsOpen
  } = _ref2;
  return !isActionsOpen && "\n    display: flex;\n    flex-flow: row;\n    border-top-left-radius: 5px;\n    border-bottom-left-radius: 5px;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n    cursor: pointer;\n\n    [dir=\"rtl\"] & {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n      border-top-right-radius: 5px;\n      border-bottom-right-radius: 5px;\n    }\n\n    &:first-child {\n      margin-top: 0;\n    }\n\n    &:hover {\n      outline: transparent;\n      outline-style: dotted;\n      outline-width: ".concat(borderSize, ";\n      background-color: ").concat(listItemBgHover, ";\n    }\n\n    &:active,\n    &:focus {\n      outline: transparent;\n      outline-width: ").concat(borderSize, ";\n      outline-style: solid;\n      background-color: ").concat(listItemBgHover, ";\n      box-shadow: inset 0 0 0 ").concat(borderSize, " ").concat(itemFocusBorder, ", inset 1px 0 0 1px ").concat(itemFocusBorder, ";\n    }\n    flex-flow: column;\n    flex-shrink: 0;\n  ");
}, _ref3 => {
  let {
    isActionsOpen
  } = _ref3;
  return isActionsOpen && "\n    outline: transparent;\n    outline-width: ".concat(borderSize, ";\n    outline-style: solid;\n    background-color: ").concat(listItemBgHover, ";\n    box-shadow: inset 0 0 0 ").concat(borderSize, " ").concat(itemFocusBorder, ", inset 1px 0 0 1px ").concat(itemFocusBorder, ";\n    border-top-left-radius: ").concat(smPaddingY, ";\n    border-bottom-left-radius: ").concat(smPaddingY, ";\n\n    &:focus {\n      outline-style: solid;\n      outline-color: transparent !important;\n    }\n  ");
}, lgPaddingY, lgPaddingY, lgPaddingY);
// ===== avatar =====
const Avatar = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n  height: 2.25rem;\n  width: 2.25rem;\n  border-radius: 50%;\n  text-align: center;\n  font-size: .85rem;\n  border: 2px solid transparent;\n  user-select: none;\n  ", "\n  }\n\n  ", "\n\n  &:after,\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 0;\n    height: 0;\n    padding-top: .5rem;\n    padding-right: 0;\n    padding-left: 0;\n    padding-bottom: 0;\n    color: inherit;\n    top: auto;\n    left: auto;\n    bottom: ", ";\n    right: ", ";\n    border: 1.5px solid ", ";\n    border-radius: 50%;\n    background-color: ", ";\n    color: ", ";\n    opacity: 0;\n    font-family: 'bbb-icons';\n    font-size: .65rem;\n    line-height: 0;\n    text-align: center;\n    vertical-align: middle;\n    letter-spacing: -.65rem;\n    z-index: 1;\n\n    [dir=\"rtl\"] & {\n      left: ", ";\n      right: auto;\n      padding-right: .65rem;\n      padding-left: 0;\n    }\n\n    ", "\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  // ================ talking animation ================\n  ", "\n  // ================ talking animation ================\n  // ================ image ================\n  ", "\n  // ================ image ================\n\n  // ================ content ================\n  color: ", ";\n  font-size: 110%;\n  text-transform: capitalize;\n  display: flex;\n  justify-content: center;\n  align-items:center;  \n  // ================ content ================\n\n  & .react-loading-skeleton {    \n    height: 2.25rem;\n    width: 2.25rem;\n  }\n"])), _ref4 => {
  let {
    color
  } = _ref4;
  return css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    background-color: ", ";\n  "])), color);
}, _ref5 => {
  let {
    animations
  } = _ref5;
  return animations && "\n    transition: .3s ease-in-out;\n  ";
}, userIndicatorsOffset, userIndicatorsOffset, userListBg, colorSuccess, colorWhite, userIndicatorsOffset, _ref6 => {
  let {
    animations
  } = _ref6;
  return animations && "\n      transition: .3s ease-in-out;\n    ";
}, _ref7 => {
  let {
    moderator
  } = _ref7;
  return moderator && "\n    border-radius: 5px;\n  ";
}, _ref8 => {
  let {
    presenter
  } = _ref8;
  return presenter && "\n    &:before {\n      content: \"\\00a0\\e90b\\00a0\";\n      padding: ".concat(mdPaddingY, " !important;\n      opacity: 1;\n      top: ").concat(userIndicatorsOffset, ";\n      left: ").concat(userIndicatorsOffset, ";\n      bottom: auto;\n      right: auto;\n      border-radius: 5px;\n      background-color: ").concat(colorPrimary, ";\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: ").concat(userIndicatorsOffset, ";\n        letter-spacing: -.33rem;\n      }\n    }\n  ");
}, _ref9 => {
  let {
    presenter,
    isChrome,
    isFirefox,
    isEdge
  } = _ref9;
  return presenter && (isChrome || isFirefox || isEdge) && "\n    &:before {\n      padding: ".concat(indicatorPadding, " !important;\n    }\n  ");
}, _ref10 => {
  let {
    whiteboardAccess,
    presenter
  } = _ref10;
  return whiteboardAccess && !presenter && "\n    &:before {\n      content: \"\\00a0\\e925\\00a0\";\n      padding: ".concat(mdPaddingY, " !important;\n      border-radius: 50% !important;\n      opacity: 1;\n      top: ").concat(userIndicatorsOffset, ";\n      left: ").concat(userIndicatorsOffset, ";\n      bottom: auto;\n      right: auto;\n      border-radius: 5px;\n      background-color: ").concat(colorPrimary, ";\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: ").concat(userIndicatorsOffset, ";\n        letter-spacing: -.33rem;\n        transform: scale(-1, 1);\n      }\n    }\n  ");
}, _ref11 => {
  let {
    whiteboardAccess,
    isChrome,
    isFirefox,
    isEdge
  } = _ref11;
  return whiteboardAccess && (isChrome || isFirefox || isEdge) && "\n    &:before {\n      padding: ".concat(indicatorPadding, ";\n    }\n  ");
}, _ref12 => {
  let {
    voice
  } = _ref12;
  return voice && "\n    &:after {\n      content: \"\\00a0\\e931\\00a0\";\n      background-color: ".concat(colorSuccess, ";\n      top: 1.375rem;\n      left: 1.375rem;\n      right: auto;\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: 1.375rem;\n      }\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref13 => {
  let {
    muted
  } = _ref13;
  return muted && "\n    &:after {\n      content: \"\\00a0\\e932\\00a0\";\n      background-color: ".concat(colorDanger, ";\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref14 => {
  let {
    listenOnly
  } = _ref14;
  return listenOnly && "\n    &:after {\n      content: \"\\00a0\\e90c\\00a0\";\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n      background-color: ".concat(colorSuccess, ";\n    }\n  ");
}, _ref15 => {
  let {
    noVoice
  } = _ref15;
  return noVoice && "\n    &:after {\n      content: \"\";\n      background-color: ".concat(colorOffWhite, ";\n      top: 1.375rem;\n      left: 1.375rem;\n      right: auto;\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: 1.375rem;\n      }\n\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref16 => {
  let {
    talking,
    animations,
    color
  } = _ref16;
  return talking && animations && color && css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    animation: ", " 1s infinite ease-in;\n  "])), pulse(color));
}, _ref17 => {
  let {
    avatar,
    emoji,
    color
  } = _ref17;
  return (avatar === null || avatar === void 0 ? void 0 : avatar.length) !== 0 && !emoji && css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n    background-image: url(", ");\n    background-repeat: no-repeat;\n    background-size: contain;\n    border: 2px solid ", ";\n  "])), avatar, color);
}, colorWhite);
const Skeleton = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n \n"])));
const UserAdditionalInformationIcon = styled(Icon)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  margin-right: ", ";\n"])), smPaddingX);
const pulse = color => keyframes(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n    0% {\n      box-shadow: 0 0 0 0 ", "80;\n    }\n    100% {\n      box-shadow: 0 0 0 10px ", "00;\n    }\n  }\n"])), color, color);
// ======================== User Name ========================
const UserNameContainer = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  min-width: 0;\n  flex-grow: 1;\n  margin: 0 0 0 ", ";\n  justify-content: center;\n  font-size: 90%;\n\n  [dir=\"rtl\"]  & {\n    margin: 0 ", " 0 0;\n  }\n"])), smPaddingX, smPaddingX);
const UserName = styled.span(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  margin: 0;\n  font-size: 90%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-weight: 400;\n  color: ", ";\n  display: flex;\n  flex-direction: row;\n\n  > span {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n\n  &.animationsEnabled {\n    transition: all .3s;\n  }"])), colorGrayDark);
const UserNameSub = styled.span(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  margin: 0;\n  font-size: 0.75rem;\n  font-weight: 200;\n  color: ", ";\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  i {\n    line-height: 0;\n    font-size: 75%;\n  }\n"])), colorGray);
// ======================== Icon Right Container ========================
const IconRightContainer = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  margin: .25rem;  \n"])));
module.exportDefault({
  Avatar,
  Skeleton,
  UserItemContents,
  UserNameContainer,
  UserAdditionalInformationIcon,
  UserNameSub,
  UserName,
  IconRightContainer
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"intersection-watcher":{"intersectionWatcher.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/intersection-watcher/int //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let useIntersectionObserver;
module.link("/imports/ui/hooks/useIntersectionObserver", {
  default(v) {
    useIntersectionObserver = v;
  }
}, 1);
let SkeletonUserListItem;
module.link("../list-item/skeleton/component", {
  default(v) {
    SkeletonUserListItem = v;
  }
}, 2);
const MOUNT_DELAY = 1000;
const UNMOUNT_DELAY = 20000;
const IntersectionWatcher = _ref => {
  let {
    children,
    ParentRef,
    isLastItem,
    restOfUsers
  } = _ref;
  const childrenRef = React.useRef(null);
  const setTimoutRef = React.useRef();
  const [renderPage, setRenderPage] = React.useState(false);
  const {
    childRefProxy,
    intersecting
  } = useIntersectionObserver(ParentRef, childrenRef, 0);
  const handleIntersection = bool => {
    clearTimeout(setTimoutRef.current);
    if (bool) {
      setTimoutRef.current = setTimeout(() => {
        setRenderPage(true);
      }, MOUNT_DELAY);
    } else {
      setTimoutRef.current = setTimeout(() => {
        setRenderPage(false);
      }, UNMOUNT_DELAY);
    }
  };
  useEffect(() => {
    if (intersecting) {
      handleIntersection(true);
    } else {
      handleIntersection(false);
    }
  }, [intersecting]);
  return /*#__PURE__*/React.createElement("div", {
    ref: childRefProxy
  }, renderPage ? children : Array.from({
    length: isLastItem ? restOfUsers : 50
  }).map((_, index) => /*#__PURE__*/React.createElement(SkeletonUserListItem, {
    key: "not-visible-item-".concat(index + 1),
    enableAnimation: intersecting
  })));
};
module.exportDefault(IntersectionWatcher);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"page":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/page/component.tsx       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 1);
let MEETING_PERMISSIONS_SUBSCRIPTION;
module.link("../queries", {
  MEETING_PERMISSIONS_SUBSCRIPTION(v) {
    MEETING_PERMISSIONS_SUBSCRIPTION = v;
  }
}, 2);
let setLocalUserList, useLoadedUserList;
module.link("/imports/ui/core/hooks/useLoadedUserList", {
  setLocalUserList(v) {
    setLocalUserList = v;
  },
  useLoadedUserList(v) {
    useLoadedUserList = v;
  }
}, 3);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 4);
let CURRENT_PRESENTATION_PAGE_SUBSCRIPTION;
module.link("/imports/ui/components/whiteboard/queries", {
  CURRENT_PRESENTATION_PAGE_SUBSCRIPTION(v) {
    CURRENT_PRESENTATION_PAGE_SUBSCRIPTION = v;
  }
}, 5);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 6);
let UserActions;
module.link("../user-actions/component", {
  default(v) {
    UserActions = v;
  }
}, 7);
let ListItem;
module.link("../list-item/component", {
  default(v) {
    ListItem = v;
  }
}, 8);
let layoutSelect;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 9);
let SkeletonUserListItem;
module.link("../list-item/skeleton/component", {
  default(v) {
    SkeletonUserListItem = v;
  }
}, 10);
const UsersListParticipantsPage = _ref => {
  let {
    users,
    currentUser,
    meeting,
    pageId
  } = _ref;
  const [openUserAction, setOpenUserAction] = React.useState(null);
  const isRTL = layoutSelect(i => i.isRTL);
  return /*#__PURE__*/React.createElement(React.Fragment, null, users.map(user => {
    return /*#__PURE__*/React.createElement(Styled.UserListItem, {
      key: user.userId,
      style: {
        direction: isRTL
      }
    }, /*#__PURE__*/React.createElement(UserActions, {
      user: user,
      currentUser: currentUser,
      lockSettings: meeting.lockSettings,
      usersPolicies: meeting.usersPolicies,
      isBreakout: meeting.isBreakout,
      pageId: pageId,
      open: user.userId === openUserAction,
      setOpenUserAction: setOpenUserAction
    }, /*#__PURE__*/React.createElement(ListItem, {
      user: user,
      lockSettings: meeting.lockSettings
    })));
  }));
};
const UserListParticipantsPageContainer = _ref2 => {
  let {
    index,
    isLastItem,
    restOfUsers,
    setVisibleUsers
  } = _ref2;
  const offset = index * 50;
  const limit = useRef(50);
  const {
    data: meetingData,
    loading: meetingLoading
  } = useDeduplicatedSubscription(MEETING_PERMISSIONS_SUBSCRIPTION);
  const {
    meeting: meetingArray
  } = meetingData || {};
  const meeting = meetingArray && meetingArray[0];
  useEffect(() => () => {
    setLocalUserList([]);
  }, []);
  const {
    data: usersData,
    loading: usersLoading
  } = useLoadedUserList({
    offset,
    limit: limit.current
  }, u => u);
  const users = usersData !== null && usersData !== void 0 ? usersData : [];
  const {
    data: currentUser,
    loading: currentUserLoading
  } = useCurrentUser(c => ({
    isModerator: c.isModerator,
    userId: c.userId,
    presenter: c.presenter
  }));
  const {
    data: presentationData,
    loading: presentationLoading
  } = useDeduplicatedSubscription(CURRENT_PRESENTATION_PAGE_SUBSCRIPTION);
  const presentationPage = (presentationData === null || presentationData === void 0 ? void 0 : presentationData.pres_page_curr[0]) || {};
  const pageId = presentationPage === null || presentationPage === void 0 ? void 0 : presentationPage.pageId;
  useEffect(() => {
    setVisibleUsers(prev => {
      const newList = _objectSpread({}, prev);
      newList[index] = users;
      return newList;
    });
  }, [usersData]);
  useEffect(() => {
    return () => {
      setVisibleUsers(prev => {
        // eslint-disable-next-line
        prev[index] = [];
        return prev;
      });
    };
  }, []);
  if (usersLoading || meetingLoading || currentUserLoading || presentationLoading) {
    return Array.from({
      length: isLastItem ? restOfUsers : 50
    }).map((_, i) => /*#__PURE__*/React.createElement(Styled.UserListItem, {
      key: "not-visible-item-".concat(i + 1)
    }, /*#__PURE__*/React.createElement(SkeletonUserListItem, {
      enableAnimation: true
    })));
  }
  return /*#__PURE__*/React.createElement(UsersListParticipantsPage, {
    users: users !== null && users !== void 0 ? users : [],
    meeting: meeting !== null && meeting !== void 0 ? meeting : {},
    currentUser: currentUser !== null && currentUser !== void 0 ? currentUser : {},
    pageId: pageId
  });
};
module.exportDefault(UserListParticipantsPageContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-actions":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/user-actions/component.t //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useState, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let useIntl, defineMessages;
module.link("react-intl", {
  useIntl(v) {
    useIntl = v;
  },
  defineMessages(v) {
    defineMessages = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
let UserListDropdownItemType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/user-list-dropdown-item/enums", {
  UserListDropdownItemType(v) {
    UserListDropdownItemType = v;
  }
}, 3);
let SET_ROLE, USER_EJECT_CAMERAS, CHAT_CREATE_WITH_USER;
module.link("./mutations", {
  SET_ROLE(v) {
    SET_ROLE = v;
  },
  USER_EJECT_CAMERAS(v) {
    USER_EJECT_CAMERAS = v;
  },
  CHAT_CREATE_WITH_USER(v) {
    CHAT_CREATE_WITH_USER = v;
  }
}, 4);
let SET_CAMERA_PINNED, EJECT_FROM_MEETING, EJECT_FROM_VOICE, SET_PRESENTER, SET_LOCKED;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  SET_CAMERA_PINNED(v) {
    SET_CAMERA_PINNED = v;
  },
  EJECT_FROM_MEETING(v) {
    EJECT_FROM_MEETING = v;
  },
  EJECT_FROM_VOICE(v) {
    EJECT_FROM_VOICE = v;
  },
  SET_PRESENTER(v) {
    SET_PRESENTER = v;
  },
  SET_LOCKED(v) {
    SET_LOCKED = v;
  }
}, 5);
let isVideoPinEnabledForCurrentUser, toggleVoice, isMe, generateActionsPermissions, isVoiceOnlyUser;
module.link("./service", {
  isVideoPinEnabledForCurrentUser(v) {
    isVideoPinEnabledForCurrentUser = v;
  },
  toggleVoice(v) {
    toggleVoice = v;
  },
  isMe(v) {
    isMe = v;
  },
  generateActionsPermissions(v) {
    generateActionsPermissions = v;
  },
  isVoiceOnlyUser(v) {
    isVoiceOnlyUser = v;
  }
}, 6);
let useIsChatEnabled;
module.link("/imports/ui/services/features", {
  useIsChatEnabled(v) {
    useIsChatEnabled = v;
  }
}, 7);
let layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 8);
let PANELS, ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 9);
let ConfirmationModal;
module.link("/imports/ui/components/common/modal/confirmation/component", {
  default(v) {
    ConfirmationModal = v;
  }
}, 10);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 11);
let setPendingChat;
module.link("/imports/ui/core/local-states/usePendingChat", {
  setPendingChat(v) {
    setPendingChat = v;
  }
}, 12);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 13);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 14);
let useMutation, useLazyQuery;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useLazyQuery(v) {
    useLazyQuery = v;
  }
}, 15);
let CURRENT_PAGE_WRITERS_QUERY;
module.link("/imports/ui/components/whiteboard/queries", {
  CURRENT_PAGE_WRITERS_QUERY(v) {
    CURRENT_PAGE_WRITERS_QUERY = v;
  }
}, 16);
let PRESENTATION_SET_WRITERS;
module.link("/imports/ui/components/presentation/mutations", {
  PRESENTATION_SET_WRITERS(v) {
    PRESENTATION_SET_WRITERS = v;
  }
}, 17);
let useToggleVoice;
module.link("/imports/ui/components/audio/audio-graphql/hooks/useToggleVoice", {
  default(v) {
    useToggleVoice = v;
  }
}, 18);
const messages = defineMessages({
  UnpinUserWebcam: {
    id: 'app.userList.menu.webcamUnpin.label',
    description: 'label for pin user webcam'
  },
  PinUserWebcam: {
    id: 'app.userList.menu.webcamPin.label',
    description: 'label for pin user webcam'
  },
  StartPrivateChat: {
    id: 'app.userList.menu.chat.label',
    description: 'label for option to start a new private chat'
  },
  MuteUserAudioLabel: {
    id: 'app.userList.menu.muteUserAudio.label',
    description: 'Forcefully mute this user'
  },
  UnmuteUserAudioLabel: {
    id: 'app.userList.menu.unmuteUserAudio.label',
    description: 'Forcefully unmute this user'
  },
  removeWhiteboardAccess: {
    id: 'app.userList.menu.removeWhiteboardAccess.label',
    description: 'label to remove user whiteboard access'
  },
  giveWhiteboardAccess: {
    id: 'app.userList.menu.giveWhiteboardAccess.label',
    description: 'label to give user whiteboard access'
  },
  takePresenterLabel: {
    id: 'app.actionsBar.actionsDropdown.takePresenter',
    description: 'Set this user to be the presenter in this meeting'
  },
  makePresenterLabel: {
    id: 'app.userList.menu.makePresenter.label',
    description: 'label to make another user presenter'
  },
  PromoteUserLabel: {
    id: 'app.userList.menu.promoteUser.label',
    description: 'Forcefully promote this viewer to a moderator'
  },
  DemoteUserLabel: {
    id: 'app.userList.menu.demoteUser.label',
    description: 'Forcefully demote this moderator to a viewer'
  },
  UnlockUserLabel: {
    id: 'app.userList.menu.unlockUser.label',
    description: 'Unlock individual user'
  },
  LockUserLabel: {
    id: 'app.userList.menu.lockUser.label',
    description: 'Lock a unlocked user'
  },
  DirectoryLookupLabel: {
    id: 'app.userList.menu.directoryLookup.label',
    description: 'Directory lookup'
  },
  RemoveUserLabel: {
    id: 'app.userList.menu.removeUser.label',
    description: 'Forcefully remove this user from the meeting'
  },
  ejectUserCamerasLabel: {
    id: 'app.userList.menu.ejectUserCameras.label',
    description: 'label to eject user cameras'
  }
});
const makeDropdownPluginItem = userDropdownItems => userDropdownItems.map(userDropdownItem => {
  const returnValue = {
    isSeparator: false,
    key: userDropdownItem.id,
    iconRight: undefined,
    onClick: undefined,
    label: undefined,
    icon: undefined,
    tooltip: undefined,
    textColor: undefined,
    allowed: undefined
  };
  switch (userDropdownItem.type) {
    case UserListDropdownItemType.OPTION:
      {
        const dropdownButton = userDropdownItem;
        returnValue.label = dropdownButton.label;
        returnValue.tooltip = dropdownButton.tooltip;
        returnValue.icon = dropdownButton.icon;
        returnValue.allowed = dropdownButton.allowed;
        returnValue.onClick = dropdownButton.onClick;
        break;
      }
    case UserListDropdownItemType.INFORMATION:
      {
        const dropdownButton = userDropdownItem;
        returnValue.label = dropdownButton.label;
        returnValue.icon = dropdownButton.icon;
        returnValue.iconRight = dropdownButton.iconRight;
        returnValue.textColor = dropdownButton.textColor;
        returnValue.allowed = dropdownButton.allowed;
        break;
      }
    case UserListDropdownItemType.SEPARATOR:
      {
        returnValue.allowed = true;
        returnValue.isSeparator = true;
        break;
      }
    default:
      break;
  }
  return returnValue;
});
const UserActions = _ref => {
  var _user$presPagesWritab;
  let {
    user,
    currentUser,
    lockSettings,
    usersPolicies,
    isBreakout,
    children,
    pageId,
    open,
    setOpenUserAction
  } = _ref;
  const intl = useIntl();
  const [isConfirmationModalOpen, setIsConfirmationModalOpen] = useState(false);
  const layoutContextDispatch = layoutDispatch();
  const [presentationSetWriters] = useMutation(PRESENTATION_SET_WRITERS);
  const [getWriters] = useLazyQuery(CURRENT_PAGE_WRITERS_QUERY, {
    variables: {
      pageId
    },
    fetchPolicy: 'no-cache'
  });
  const voiceToggle = useToggleVoice();
  const isChatEnabled = useIsChatEnabled();
  const handleWhiteboardAccessChange = async () => {
    try {
      // Fetch the writers data
      const {
        data
      } = await getWriters();
      const allWriters = (data === null || data === void 0 ? void 0 : data.pres_page_writers) || [];
      const currentWriters = allWriters === null || allWriters === void 0 ? void 0 : allWriters.filter(writer => writer.pageId === pageId);
      // Determine if the user has access
      const {
        userId,
        presPagesWritable
      } = user;
      const hasAccess = presPagesWritable.some(page => (page === null || page === void 0 ? void 0 : page.userId) === userId && (page === null || page === void 0 ? void 0 : page.isCurrentPage));
      // Prepare the updated list of user IDs for whiteboard access
      const usersIds = currentWriters === null || currentWriters === void 0 ? void 0 : currentWriters.map(writer => writer === null || writer === void 0 ? void 0 : writer.userId);
      const newUsersIds = hasAccess ? usersIds.filter(id => id !== userId) : [...usersIds, userId];
      // Update the writers
      await presentationSetWriters({
        variables: {
          pageId,
          usersIds: newUsersIds
        }
      });
    } catch (error) {
      logger.warn({
        logCode: 'user_action_whiteboard_access_failed'
      }, 'Error updating whiteboard access.');
    }
  };
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  const actionsnPermitions = generateActionsPermissions(user, currentUser, lockSettings, usersPolicies, isBreakout);
  const {
    allowedToChatPrivately,
    allowedToMuteAudio,
    allowedToUnmuteAudio,
    allowedToChangeWhiteboardAccess,
    allowedToSetPresenter,
    allowedToPromote,
    allowedToDemote,
    allowedToChangeUserLockStatus,
    allowedToRemove,
    allowedToEjectCameras
  } = actionsnPermitions;
  const userLocked = user.locked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.hasActiveLockSetting) && !user.isModerator;
  let userListDropdownItems = [];
  if (pluginsExtensibleAreasAggregatedState.userListDropdownItems) {
    userListDropdownItems = [...pluginsExtensibleAreasAggregatedState.userListDropdownItems];
  }
  const userDropdownItems = userListDropdownItems.filter(item => (user === null || user === void 0 ? void 0 : user.userId) === (item === null || item === void 0 ? void 0 : item.userId));
  const hasWhiteboardAccess = (_user$presPagesWritab = user.presPagesWritable) === null || _user$presPagesWritab === void 0 ? void 0 : _user$presPagesWritab.some(page => page.pageId === pageId && page.userId === user.userId);
  const [setRole] = useMutation(SET_ROLE);
  const [chatCreateWithUser] = useMutation(CHAT_CREATE_WITH_USER);
  const [setCameraPinned] = useMutation(SET_CAMERA_PINNED);
  const [ejectFromMeeting] = useMutation(EJECT_FROM_MEETING);
  const [ejectFromVoice] = useMutation(EJECT_FROM_VOICE);
  const [setPresenter] = useMutation(SET_PRESENTER);
  const [setLocked] = useMutation(SET_LOCKED);
  const [userEjectCameras] = useMutation(USER_EJECT_CAMERAS);
  const removeUser = (userId, banUser) => {
    if (isVoiceOnlyUser(user.userId)) {
      ejectFromVoice({
        variables: {
          userId,
          banUser
        }
      });
    } else {
      ejectFromMeeting({
        variables: {
          userId,
          banUser
        }
      });
    }
  };
  const dropdownOptions = [...makeDropdownPluginItem(userDropdownItems.filter(item => (item === null || item === void 0 ? void 0 : item.type) === UserListDropdownItemType.INFORMATION)), {
    allowed: user.cameras.length > 0 && isVideoPinEnabledForCurrentUser(currentUser, isBreakout),
    key: 'pinVideo',
    label: user.pinned ? intl.formatMessage(messages.UnpinUserWebcam) : intl.formatMessage(messages.PinUserWebcam),
    onClick: () => {
      // toggle user pinned status
      setCameraPinned({
        variables: {
          userId: user.userId,
          pinned: !user.pinned
        }
      });
    },
    icon: user.pinned ? 'pin-video_off' : 'pin-video_on'
  }, {
    allowed: isChatEnabled && (currentUser.isModerator ? allowedToChatPrivately : allowedToChatPrivately && (!(currentUser.locked && lockSettings !== null && lockSettings !== void 0 && lockSettings.disablePrivateChat)
    // TODO: Add check for hasPrivateChat between users
    || user.isModerator)) && !isVoiceOnlyUser(user.userId) && !isBreakout,
    key: 'activeChat',
    label: intl.formatMessage(messages.StartPrivateChat),
    onClick: () => {
      setPendingChat(user.userId);
      setOpenUserAction(null);
      chatCreateWithUser({
        variables: {
          userId: user.userId
        }
      });
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
        value: true
      });
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
        value: PANELS.CHAT
      });
      layoutContextDispatch({
        type: ACTIONS.SET_ID_CHAT_OPEN,
        value: ''
      });
    },
    icon: 'chat',
    dataTest: 'startPrivateChat'
  }, {
    allowed: allowedToMuteAudio && !isBreakout,
    key: 'mute',
    label: intl.formatMessage(messages.MuteUserAudioLabel),
    onClick: () => {
      toggleVoice(user.userId, true, voiceToggle);
      setOpenUserAction(null);
    },
    icon: 'mute'
  }, {
    allowed: allowedToUnmuteAudio && !(lockSettings !== null && lockSettings !== void 0 && lockSettings.disableMic) && !isBreakout,
    key: 'unmute',
    label: intl.formatMessage(messages.UnmuteUserAudioLabel),
    onClick: () => {
      toggleVoice(user.userId, false, voiceToggle);
      setOpenUserAction(null);
    },
    icon: 'unmute',
    dataTest: 'unmuteUser'
  }, {
    allowed: allowedToChangeWhiteboardAccess && !user.presenter && !isVoiceOnlyUser(user.userId),
    key: 'changeWhiteboardAccess',
    label: hasWhiteboardAccess ? intl.formatMessage(messages.removeWhiteboardAccess) : intl.formatMessage(messages.giveWhiteboardAccess),
    onClick: () => {
      handleWhiteboardAccessChange();
      setOpenUserAction(null);
    },
    icon: 'pen_tool',
    dataTest: 'changeWhiteboardAccess'
  }, {
    allowed: allowedToSetPresenter && !isVoiceOnlyUser(user.userId),
    key: 'setPresenter',
    label: isMe(user.userId) ? intl.formatMessage(messages.takePresenterLabel) : intl.formatMessage(messages.makePresenterLabel),
    onClick: () => {
      setPresenter({
        variables: {
          userId: user.userId
        }
      });
      setOpenUserAction(null);
    },
    icon: 'presentation',
    dataTest: isMe(user.userId) ? 'takePresenter' : 'makePresenter'
  }, {
    allowed: allowedToPromote,
    key: 'promote',
    label: intl.formatMessage(messages.PromoteUserLabel),
    onClick: () => {
      setRole({
        variables: {
          userId: user.userId,
          role: 'MODERATOR'
        }
      });
      setOpenUserAction(null);
    },
    icon: 'promote',
    dataTest: 'promoteToModerator'
  }, {
    allowed: allowedToDemote,
    key: 'demote',
    label: intl.formatMessage(messages.DemoteUserLabel),
    onClick: () => {
      setRole({
        variables: {
          userId: user.userId,
          role: 'VIEWER'
        }
      });
      setOpenUserAction(null);
    },
    icon: 'user',
    dataTest: 'demoteToViewer'
  }, {
    allowed: allowedToChangeUserLockStatus,
    key: 'unlockUser',
    label: userLocked ? intl.formatMessage(messages.UnlockUserLabel, {
      0: user.name
    }) : intl.formatMessage(messages.LockUserLabel, {
      0: user.name
    }),
    onClick: () => {
      setLocked({
        variables: {
          userId: user.userId,
          locked: !userLocked
        }
      });
      setOpenUserAction(null);
    },
    icon: userLocked ? 'unlock' : 'lock',
    dataTest: 'unlockUserButton'
  }, {
    allowed: allowedToRemove,
    key: 'remove',
    label: intl.formatMessage(messages.RemoveUserLabel, {
      0: user.name
    }),
    onClick: () => {
      setIsConfirmationModalOpen(true);
      setOpenUserAction(null);
    },
    icon: 'circle_close',
    dataTest: 'removeUser'
  }, {
    allowed: allowedToEjectCameras && user.cameras.length > 0 && !isBreakout,
    key: 'ejectUserCameras',
    label: intl.formatMessage(messages.ejectUserCamerasLabel),
    onClick: () => {
      userEjectCameras({
        variables: {
          userId: user.userId
        }
      });
      setOpenUserAction(null);
    },
    icon: 'video_off',
    dataTest: 'ejectCamera'
  }, ...makeDropdownPluginItem(userDropdownItems.filter(item => (item === null || item === void 0 ? void 0 : item.type) !== UserListDropdownItemType.INFORMATION))];
  const actions = dropdownOptions.filter(key => key.allowed);
  if (!actions.length) {
    return /*#__PURE__*/React.createElement("span", null, children);
  }
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(BBBMenu, {
    trigger: /*#__PURE__*/React.createElement(Styled.UserActionsTrigger, {
      isActionsOpen: open,
      selected: open,
      tabIndex: -1,
      onClick: () => setOpenUserAction(user.userId),
      onKeyDown: e => {
        if (e.key === 'Enter') {
          setOpenUserAction(user.userId);
        }
      },
      role: "button"
    }, children),
    actions: actions,
    onCloseCallback: () => {
      setOpenUserAction(null);
    },
    open: open
  }), isConfirmationModalOpen ? /*#__PURE__*/React.createElement(ConfirmationModal, {
    intl: intl,
    titleMessageId: "app.userList.menu.removeConfirmation.label",
    titleMessageExtra: user.name,
    checkboxMessageId: "app.userlist.menu.removeConfirmation.desc",
    confirmParam: user.userId,
    onConfirm: removeUser,
    confirmButtonDataTest: "removeUserConfirmation",
    onRequestClose: () => setIsConfirmationModalOpen(false),
    priority: 'low',
    setIsOpen: setIsConfirmationModalOpen,
    isOpen: isConfirmationModalOpen
  }) : null);
};
module.exportDefault(UserActions);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/user-actions/mutations.t //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  SET_AWAY: () => SET_AWAY,
  SET_ROLE: () => SET_ROLE,
  USER_EJECT_CAMERAS: () => USER_EJECT_CAMERAS,
  CHAT_CREATE_WITH_USER: () => CHAT_CREATE_WITH_USER
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const SET_AWAY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation SetAway($away: Boolean!) {\n    userSetAway(\n      away: $away,\n    )\n  }\n"])));
const SET_ROLE = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation SetRole($userId: String!, $role: String!) {\n    userSetRole(\n      userId: $userId,\n      role: $role,\n    )\n  }\n"])));
const USER_EJECT_CAMERAS = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  mutation UserEjectCameras($userId: String!) {\n    userEjectCameras(\n      userId: $userId,\n      )\n    }\n  "])));
const CHAT_CREATE_WITH_USER = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  mutation ChatCreateWithUser($userId: String!) {\n    chatCreateWithUser(\n      userId: $userId,\n    )\n  }\n"])));
module.exportDefault({
  SET_AWAY,
  SET_ROLE,
  USER_EJECT_CAMERAS,
  CHAT_CREATE_WITH_USER
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/user-actions/service.ts  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  isVoiceOnlyUser: () => isVoiceOnlyUser,
  isMe: () => isMe,
  generateActionsPermissions: () => generateActionsPermissions,
  isVideoPinEnabledForCurrentUser: () => isVideoPinEnabledForCurrentUser,
  toggleVoice: () => toggleVoice
});
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 1);
let toggleMuteMicrophone;
module.link("/imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/service", {
  toggleMuteMicrophone(v) {
    toggleMuteMicrophone = v;
  }
}, 2);
const isVoiceOnlyUser = userId => userId.toString().startsWith('v_');
const isMe = userId => userId === Auth.userID;
const generateActionsPermissions = (subjectUser, currentUser, lockSettings, usersPolicies, isBreakout) => {
  const subjectUserVoice = subjectUser.voice;
  const amIModerator = currentUser.isModerator;
  const isDialInUser = isVoiceOnlyUser(subjectUser.userId);
  const amISubjectUser = isMe(subjectUser.userId);
  const isSubjectUserModerator = subjectUser.isModerator;
  const isSubjectUserGuest = subjectUser.guest;
  const hasAuthority = currentUser.isModerator || amISubjectUser;
  const allowedToChatPrivately = !amISubjectUser && !isDialInUser;
  const allowedToMuteAudio = hasAuthority && (subjectUserVoice === null || subjectUserVoice === void 0 ? void 0 : subjectUserVoice.joined) && !(subjectUserVoice !== null && subjectUserVoice !== void 0 && subjectUserVoice.muted) && !(subjectUserVoice !== null && subjectUserVoice !== void 0 && subjectUserVoice.listenOnly);
  const allowedToUnmuteAudio = hasAuthority && (subjectUserVoice === null || subjectUserVoice === void 0 ? void 0 : subjectUserVoice.joined) && !subjectUserVoice.listenOnly && subjectUserVoice.muted && (amISubjectUser || (usersPolicies === null || usersPolicies === void 0 ? void 0 : usersPolicies.allowModsToUnmuteUsers));
  // if currentUser is a moderator, allow removing other users
  const allowedToRemove = amIModerator && !amISubjectUser && !isBreakout;
  const allowedToPromote = amIModerator && !amISubjectUser && !isSubjectUserModerator && !isDialInUser && !isBreakout && !(isSubjectUserGuest && usersPolicies !== null && usersPolicies !== void 0 && usersPolicies.authenticatedGuest && !(usersPolicies !== null && usersPolicies !== void 0 && usersPolicies.allowPromoteGuestToModerator));
  const allowedToDemote = amIModerator && !amISubjectUser && isSubjectUserModerator && !isDialInUser && !isBreakout && !(isSubjectUserGuest && usersPolicies !== null && usersPolicies !== void 0 && usersPolicies.authenticatedGuest && !(usersPolicies !== null && usersPolicies !== void 0 && usersPolicies.allowPromoteGuestToModerator));
  const allowedToChangeUserLockStatus = amIModerator && !isSubjectUserModerator && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.hasActiveLockSetting);
  const allowedToChangeWhiteboardAccess = currentUser.presenter && !amISubjectUser;
  const allowedToEjectCameras = amIModerator && !amISubjectUser && (usersPolicies === null || usersPolicies === void 0 ? void 0 : usersPolicies.allowModsToEjectCameras);
  const allowedToSetPresenter = amIModerator && !subjectUser.presenter && !isDialInUser;
  return {
    allowedToChatPrivately,
    allowedToMuteAudio,
    allowedToUnmuteAudio,
    allowedToRemove,
    allowedToSetPresenter,
    allowedToPromote,
    allowedToDemote,
    allowedToChangeUserLockStatus,
    allowedToChangeWhiteboardAccess,
    allowedToEjectCameras
  };
};
const isVideoPinEnabledForCurrentUser = (currentUser, isBreakout) => {
  const {
    isModerator
  } = currentUser;
  const PIN_WEBCAM = window.meetingClientSettings.public.kurento.enableVideoPin;
  const isPinEnabled = PIN_WEBCAM;
  return !!(isModerator && isPinEnabled && !isBreakout);
};
const toggleVoice = (userId, muted, voiceToggle) => {
  if (userId === Auth.userID) {
    toggleMuteMicrophone(!muted, voiceToggle);
  } else {
    voiceToggle(userId, muted);
    logger.info({
      logCode: 'usermenu_option_mute_toggle_audio',
      extraInfo: {
        logType: 'moderator_action',
        userId
      }
    }, 'moderator muted user microphone');
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/user-actions/styles.ts   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smPaddingY, borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingY(v) {
    smPaddingY = v;
  },
  borderSize(v) {
    borderSize = v;
  }
}, 1);
let listItemBgHover, itemFocusBorder;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  listItemBgHover(v) {
    listItemBgHover = v;
  },
  itemFocusBorder(v) {
    itemFocusBorder = v;
  }
}, 2);
const UserActionsTrigger = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    & > div {\n        border: none;\n        padding: 0.6rem;\n\n        ", "\n      \n      ", "\n    }\n"])), _ref => {
  let {
    selected
  } = _ref;
  return selected && "\n        background-color: ".concat(listItemBgHover, ";\n        border-top-left-radius: ").concat(smPaddingY, ";\n        border-bottom-left-radius: ").concat(smPaddingY, ";\n    \n        &:focus {\n          box-shadow: inset 0 0 0 ").concat(borderSize, " ").concat(itemFocusBorder, ", inset 1px 0 0 1px ").concat(itemFocusBorder, ";\n        }\n      ");
}, _ref2 => {
  let {
    isActionsOpen
  } = _ref2;
  return isActionsOpen && "\n      outline: transparent;\n      outline-width: ".concat(borderSize, ";\n      outline-style: solid;\n      background-color: ").concat(listItemBgHover, ";\n      box-shadow: inset 0 0 0 ").concat(borderSize, " ").concat(itemFocusBorder, ", inset 1px 0 0 1px ").concat(itemFocusBorder, ";\n      border-top-left-radius: ").concat(smPaddingY, ";\n      border-bottom-left-radius: ").concat(smPaddingY, ";\n  \n      &:focus {\n        outline-style: solid;\n        outline-color: transparent !important;\n      }\n    ");
});
module.exportDefault({
  UserActionsTrigger
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/component.tsx            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let findDOMNode;
module.link("react-dom", {
  findDOMNode(v) {
    findDOMNode = v;
  }
}, 1);
let UI_DATA_LISTENER_SUBSCRIBED;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/ui-data-hooks/consts", {
  UI_DATA_LISTENER_SUBSCRIBED(v) {
    UI_DATA_LISTENER_SUBSCRIBED = v;
  }
}, 2);
let PluginSdk;
module.link("bigbluebutton-html-plugin-sdk", {
  "*"(v) {
    PluginSdk = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let USER_AGGREGATE_COUNT_SUBSCRIPTION;
module.link("./queries", {
  USER_AGGREGATE_COUNT_SUBSCRIPTION(v) {
    USER_AGGREGATE_COUNT_SUBSCRIPTION = v;
  }
}, 5);
let Service;
module.link("/imports/ui/components/user-list/service", {
  default(v) {
    Service = v;
  }
}, 6);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 7);
let UserListParticipantsPageContainer;
module.link("./page/component", {
  default(v) {
    UserListParticipantsPageContainer = v;
  }
}, 8);
let IntersectionWatcher;
module.link("./intersection-watcher/intersectionWatcher", {
  default(v) {
    IntersectionWatcher = v;
  }
}, 9);
let setLocalUserList;
module.link("/imports/ui/core/hooks/useLoadedUserList", {
  setLocalUserList(v) {
    setLocalUserList = v;
  }
}, 10);
const UserListParticipants = _ref => {
  let {
    count
  } = _ref;
  const [visibleUsers, setVisibleUsers] = React.useState({});
  const userListRef = React.useRef(null);
  const userItemsRef = React.useRef(null);
  const [selectedUser, setSelectedUser] = React.useState();
  const {
    roving
  } = Service;
  React.useEffect(() => {
    var _firstChild$firstChil, _firstChild$firstChil2;
    const firstChild = selectedUser === null || selectedUser === void 0 ? void 0 : selectedUser.firstChild;
    const fourthChild = firstChild === null || firstChild === void 0 ? void 0 : (_firstChild$firstChil = firstChild.firstChild) === null || _firstChild$firstChil === void 0 ? void 0 : (_firstChild$firstChil2 = _firstChild$firstChil.firstChild) === null || _firstChild$firstChil2 === void 0 ? void 0 : _firstChild$firstChil2.firstChild;
    if (fourthChild && fourthChild instanceof HTMLElement) fourthChild.focus();
  }, [selectedUser]);
  useEffect(() => {
    const keys = Object.keys(visibleUsers);
    if (keys.length > 0) {
      // eslint-disable-next-line
      const visibleUserArr = keys.sort().reduce((acc, key) => {
        return [...acc,
        // @ts-ignore
        ...visibleUsers[key]];
      }, []);
      // eslint-disable-next-line
      setLocalUserList(visibleUserArr);
    }
  }, [visibleUsers]);
  // --- Plugin related code ---
  useEffect(() => {
    const updateUiDataHookCurrentVolumeForPlugin = () => {
      window.dispatchEvent(new CustomEvent(PluginSdk.UserListUiDataNames.USER_LIST_IS_OPEN, {
        detail: {
          value: true
        }
      }));
    };
    window.dispatchEvent(new CustomEvent(PluginSdk.UserListUiDataNames.USER_LIST_IS_OPEN, {
      detail: {
        value: true
      }
    }));
    window.addEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.ExternalVideoVolumeUiDataNames.IS_VOLUME_MUTED), updateUiDataHookCurrentVolumeForPlugin);
    return () => {
      window.removeEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.ExternalVideoVolumeUiDataNames.CURRENT_VOLUME_VALUE), updateUiDataHookCurrentVolumeForPlugin);
      window.dispatchEvent(new CustomEvent(PluginSdk.UserListUiDataNames.USER_LIST_IS_OPEN, {
        detail: {
          value: false
        }
      }));
    };
  }, []);
  // --- End of plugin related code ---
  const rove = event => {
    // eslint-disable-next-line react/no-find-dom-node
    const usrItemsRef = findDOMNode(userItemsRef.current);
    const usrItemsRefChild = usrItemsRef === null || usrItemsRef === void 0 ? void 0 : usrItemsRef.firstChild;
    roving(event, setSelectedUser, usrItemsRefChild, selectedUser);
    event.stopPropagation();
  };
  const amountOfPages = Math.ceil(count / 50);
  return /*#__PURE__*/React.createElement(Styled.UserListColumn, {
    onKeyDown: rove,
    tabIndex: 0
  }, /*#__PURE__*/React.createElement(Styled.VirtualizedList, {
    ref: userListRef
  }, Array.from({
    length: amountOfPages
  }).map((_, i) => {
    const isLastItem = amountOfPages === i + 1;
    const restOfUsers = count % 50;
    return i === 0 ? /*#__PURE__*/React.createElement(UserListParticipantsPageContainer, {
      index: i,
      isLastItem: isLastItem,
      restOfUsers: isLastItem ? restOfUsers : 50,
      setVisibleUsers: setVisibleUsers
    }) : /*#__PURE__*/React.createElement(IntersectionWatcher
    // eslint-disable-next-line react/no-array-index-key
    , {
      key: i,
      ParentRef: userListRef,
      isLastItem: isLastItem,
      restOfUsers: isLastItem ? restOfUsers : 50
    }, /*#__PURE__*/React.createElement(UserListParticipantsPageContainer, {
      index: i,
      isLastItem: isLastItem,
      restOfUsers: isLastItem ? restOfUsers : 50,
      setVisibleUsers: setVisibleUsers
    }));
  })));
};
const UserListParticipantsContainer = () => {
  var _countData$user_aggre, _countData$user_aggre2;
  const {
    data: countData
  } = useDeduplicatedSubscription(USER_AGGREGATE_COUNT_SUBSCRIPTION);
  const count = (countData === null || countData === void 0 ? void 0 : (_countData$user_aggre = countData.user_aggregate) === null || _countData$user_aggre === void 0 ? void 0 : (_countData$user_aggre2 = _countData$user_aggre.aggregate) === null || _countData$user_aggre2 === void 0 ? void 0 : _countData$user_aggre2.count) || 0;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UserListParticipants, {
    count: count !== null && count !== void 0 ? count : 0
  }));
};
module.exportDefault(UserListParticipantsContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/queries.ts               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  MEETING_PERMISSIONS_SUBSCRIPTION: () => MEETING_PERMISSIONS_SUBSCRIPTION,
  CURRENT_USER_SUBSCRIPTION: () => CURRENT_USER_SUBSCRIPTION,
  USER_AGGREGATE_COUNT_SUBSCRIPTION: () => USER_AGGREGATE_COUNT_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const MEETING_PERMISSIONS_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\nsubscription MeetingPermissions {\n  meeting {\n    meetingId\n    isBreakout\n    lockSettings {\n      disableCam\n      disableMic\n      disableNotes\n      disablePrivateChat\n      disablePublicChat\n      hasActiveLockSetting\n      hideUserList\n      hideViewersCursor\n      webcamsOnlyForModerator\n    }\n    usersPolicies {\n      allowModsToEjectCameras\n      allowModsToUnmuteUsers\n      authenticatedGuest\n      allowPromoteGuestToModerator\n      guestPolicy\n      maxUserConcurrentAccesses\n      maxUsers\n      meetingLayout\n      userCameraCap\n      webcamsOnlyForModerator\n    }\n  }\n}"])));
const CURRENT_USER_SUBSCRIPTION = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\nsubscription UserListCurrUser {\n  user_current {\n    userId \n    isModerator\n    guest\n    presenter\n    locked\n  }\n}"])));
const USER_AGGREGATE_COUNT_SUBSCRIPTION = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\nsubscription UsersCount {\n  user_aggregate {\n    aggregate {\n      count\n    }\n  }\n}\n"])));
module.exportDefault({
  MEETING_PERMISSIONS_SUBSCRIPTION,
  CURRENT_USER_SUBSCRIPTION,
  USER_AGGREGATE_COUNT_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/styles.ts                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let userIndicatorsOffset, mdPaddingY, indicatorPadding;
module.link("/imports/ui/stylesheets/styled-components/general", {
  userIndicatorsOffset(v) {
    userIndicatorsOffset = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  indicatorPadding(v) {
    indicatorPadding = v;
  }
}, 1);
let colorPrimary, colorWhite, userListBg, colorSuccess, colorDanger, colorOffWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  userListBg(v) {
    userListBg = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  }
}, 2);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 3);
const Avatar = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n  height: 2.25rem;\n  width: 2.25rem;\n  border-radius: 50%;\n  text-align: center;\n  font-size: .85rem;\n  border: 2px solid transparent;\n  user-select: none;\n  ", "\n  }\n\n  ", "\n\n  &:after,\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 0;\n    height: 0;\n    padding-top: .5rem;\n    padding-right: 0;\n    padding-left: 0;\n    padding-bottom: 0;\n    color: inherit;\n    top: auto;\n    left: auto;\n    bottom: ", ";\n    right: ", ";\n    border: 1.5px solid ", ";\n    border-radius: 50%;\n    background-color: ", ";\n    color: ", ";\n    opacity: 0;\n    font-family: 'bbb-icons';\n    font-size: .65rem;\n    line-height: 0;\n    text-align: center;\n    vertical-align: middle;\n    letter-spacing: -.65rem;\n    z-index: 1;\n\n    [dir=\"rtl\"] & {\n      left: ", ";\n      right: auto;\n      padding-right: .65rem;\n      padding-left: 0;\n    }\n\n    ", "\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  // ================ talking animation ================\n  ", "\n  // ================ talking animation ================\n  // ================ image ================\n  ", "\n  // ================ image ================\n\n  // ================ content ================\n  color: ", ";\n  font-size: 110%;\n  text-transform: capitalize;\n  display: flex;\n  justify-content: center;\n  align-items:center;  \n  // ================ content ================\n"])), _ref => {
  let {
    color
  } = _ref;
  return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    background-color: ", ";\n  "])), color);
}, _ref2 => {
  let {
    animations
  } = _ref2;
  return animations && "\n    transition: .3s ease-in-out;\n  ";
}, userIndicatorsOffset, userIndicatorsOffset, userListBg, colorSuccess, colorWhite, userIndicatorsOffset, _ref3 => {
  let {
    animations
  } = _ref3;
  return animations && "\n      transition: .3s ease-in-out;\n    ";
}, _ref4 => {
  let {
    moderator
  } = _ref4;
  return moderator && "\n    border-radius: 5px;\n  ";
}, _ref5 => {
  let {
    presenter
  } = _ref5;
  return presenter && "\n    &:before {\n      content: \"\\00a0\\e90b\\00a0\";\n      padding: ".concat(mdPaddingY, " !important;\n      opacity: 1;\n      top: ").concat(userIndicatorsOffset, ";\n      left: ").concat(userIndicatorsOffset, ";\n      bottom: auto;\n      right: auto;\n      border-radius: 5px;\n      background-color: ").concat(colorPrimary, ";\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: ").concat(userIndicatorsOffset, ";\n        letter-spacing: -.33rem;\n      }\n    }\n  ");
}, _ref6 => {
  let {
    presenter,
    isChrome,
    isFirefox,
    isEdge
  } = _ref6;
  return presenter && (isChrome || isFirefox || isEdge) && "\n    &:before {\n      padding: ".concat(indicatorPadding, " !important;\n    }\n  ");
}, _ref7 => {
  let {
    whiteboardAccess,
    presenter
  } = _ref7;
  return whiteboardAccess && !presenter && "\n    &:before {\n      content: \"\\00a0\\e925\\00a0\";\n      padding: ".concat(mdPaddingY, " !important;\n      border-radius: 50% !important;\n      opacity: 1;\n      top: ").concat(userIndicatorsOffset, ";\n      left: ").concat(userIndicatorsOffset, ";\n      bottom: auto;\n      right: auto;\n      border-radius: 5px;\n      background-color: ").concat(colorPrimary, ";\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: ").concat(userIndicatorsOffset, ";\n        letter-spacing: -.33rem;\n        transform: scale(-1, 1);\n      }\n    }\n  ");
}, _ref8 => {
  let {
    whiteboardAccess,
    isChrome,
    isFirefox,
    isEdge
  } = _ref8;
  return whiteboardAccess && (isChrome || isFirefox || isEdge) && "\n    &:before {\n      padding: ".concat(indicatorPadding, ";\n    }\n  ");
}, _ref9 => {
  let {
    voice
  } = _ref9;
  return voice && "\n    &:after {\n      content: \"\\00a0\\e931\\00a0\";\n      background-color: ".concat(colorSuccess, ";\n      top: 1.375rem;\n      left: 1.375rem;\n      right: auto;\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: 1.375rem;\n      }\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref10 => {
  let {
    muted
  } = _ref10;
  return muted && "\n    &:after {\n      content: \"\\00a0\\e932\\00a0\";\n      background-color: ".concat(colorDanger, ";\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref11 => {
  let {
    listenOnly
  } = _ref11;
  return listenOnly && "\n    &:after {\n      content: \"\\00a0\\e90c\\00a0\";\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ";
}, _ref12 => {
  let {
    noVoice
  } = _ref12;
  return noVoice && "\n    &:after {\n      content: \"\";\n      background-color: ".concat(colorOffWhite, ";\n      top: 1.375rem;\n      left: 1.375rem;\n      right: auto;\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: 1.375rem;\n      }\n\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref13 => {
  let {
    talking,
    animations,
    color
  } = _ref13;
  return talking && animations && css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    animation: ", " 1s infinite ease-in;\n  "])), pulse(color));
}, _ref14 => {
  let {
    avatar,
    emoji
  } = _ref14;
  return avatar.length !== 0 && !emoji && css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    background-image: url(", ");\n    background-repeat: no-repeat;\n    background-size: contain;\n  "])), avatar);
}, colorWhite);
const Skeleton = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  & .react-loading-skeleton {    \n    height: 2.25rem;\n    width: 2.25rem;\n  }\n"])));
const UserListColumn = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  min-height: 0;\n  flex-grow: 1;\n"])));
const pulse = color => keyframes(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n    0% {\n      box-shadow: 0 0 0 0 ", "80;\n    }\n    100% {\n      box-shadow: 0 0 0 10px ", "00;\n    }\n  }\n"])), color, color);
const VirtualizedList = styled(ScrollboxVertical)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  background: linear-gradient(#f3f6f9 30%, rgba(255,255,255,0)),\n    linear-gradient(rgba(255,255,255,0), #f3f6f9 70%) 0 100%,\n    /* Shadows */\n    radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.2), rgba(0,0,0,0)),\n    radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;\n\n  outline: none;\n  overflow-x: hidden;\n"])));
const UserListItem = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  padding: .25em 0;\n"])));
module.exportDefault({
  Avatar,
  Skeleton,
  UserListColumn,
  VirtualizedList,
  UserListItem
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"user-messages":{"chat-list":{"chat-list-item":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-messages/chat-list/chat-list-item/component.tsx              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let layoutSelect, layoutSelectInput, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 1);
let ACTIONS, PANELS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 2);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 5);
let useShortcut;
module.link("../../../../../../core/hooks/useShortcut", {
  useShortcut(v) {
    useShortcut = v;
  }
}, 6);
const intlMessages = defineMessages({
  titlePublic: {
    id: 'app.chat.titlePublic',
    description: 'title for public chat'
  },
  unreadPlural: {
    id: 'app.userList.chatListItem.unreadPlural',
    description: 'singular aria label for new message'
  },
  unreadSingular: {
    id: 'app.userList.chatListItem.unreadSingular',
    description: 'plural aria label for new messages'
  }
});
const ChatListItem = props => {
  var _chat$participant, _chat$participant2, _chat$participant3, _chat$participant4, _chat$participant5, _chat$participant6;
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const idChatOpen = layoutSelect(i => i.idChatOpen);
  const layoutContextDispatch = layoutDispatch();
  const {
    sidebarContentPanel
  } = sidebarContent;
  const sidebarContentIsOpen = sidebarContent.isOpen;
  const TOGGLE_CHAT_PUB_AK = useShortcut('togglePublicChat');
  const {
    chat,
    chatNodeRef
  } = props;
  const countUnreadMessages = chat.totalUnread || 0;
  const intl = useIntl();
  const chatPanelOpen = sidebarContentIsOpen && sidebarContentPanel === PANELS.CHAT;
  const isCurrentChat = chat.chatId === idChatOpen && chatPanelOpen;
  const ROLE_MODERATOR = window.meetingClientSettings.public.user.role_moderator;
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  const PUBLIC_GROUP_CHAT_ID = CHAT_CONFIG.public_group_id;
  const isPublicGroupChat = chat => chat.chatId === PUBLIC_GROUP_CHAT_ID;
  useEffect(() => {
    if (chat.chatId !== PUBLIC_GROUP_CHAT_ID && chat.chatId === idChatOpen) {
      layoutContextDispatch({
        type: ACTIONS.SET_ID_CHAT_OPEN,
        value: chat.chatId
      });
    }
  }, [idChatOpen, sidebarContentIsOpen, sidebarContentPanel, chat]);
  const handleClickToggleChat = () => {
    // Verify if chat panel is open
    if (sidebarContentIsOpen && sidebarContentPanel === PANELS.CHAT) {
      if (idChatOpen === chat.chatId) {
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: false
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.NONE
        });
        layoutContextDispatch({
          type: ACTIONS.SET_ID_CHAT_OPEN,
          value: ''
        });
      } else {
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.NONE
        });
        layoutContextDispatch({
          type: ACTIONS.SET_ID_CHAT_OPEN,
          value: ''
        });
        setTimeout(() => {
          layoutContextDispatch({
            type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
            value: true
          });
          layoutContextDispatch({
            type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
            value: PANELS.CHAT
          });
          layoutContextDispatch({
            type: ACTIONS.SET_ID_CHAT_OPEN,
            value: chat.chatId
          });
        }, 0);
      }
    } else {
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
        value: true
      });
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
        value: PANELS.CHAT
      });
      layoutContextDispatch({
        type: ACTIONS.SET_ID_CHAT_OPEN,
        value: chat.chatId
      });
    }
  };
  const localizedChatName = isPublicGroupChat(chat) ? intl.formatMessage(intlMessages.titlePublic) : (_chat$participant = chat.participant) === null || _chat$participant === void 0 ? void 0 : _chat$participant.name;
  const arialabel = "".concat(localizedChatName, " ").concat(countUnreadMessages > 1 ? intl.formatMessage(intlMessages.unreadPlural, {
    0: countUnreadMessages
  }) : intl.formatMessage(intlMessages.unreadSingular));
  return /*#__PURE__*/React.createElement(Styled.ChatListItem, {
    "data-test": "chatButton",
    role: "button",
    "aria-expanded": isCurrentChat,
    active: isCurrentChat,
    tabIndex: -1,
    accessKey: isPublicGroupChat(chat) ? TOGGLE_CHAT_PUB_AK : undefined,
    onClick: handleClickToggleChat,
    id: "chat-toggle-button",
    "aria-label": isPublicGroupChat(chat) ? intl.formatMessage(intlMessages.titlePublic) : (_chat$participant2 = chat.participant) === null || _chat$participant2 === void 0 ? void 0 : _chat$participant2.name,
    onKeyDown: e => {
      if (e.key === 'Enter') {
        e.preventDefault();
        e.stopPropagation();
      }
    },
    ref: chatNodeRef
  }, /*#__PURE__*/React.createElement(Styled.ChatListItemLink, null, /*#__PURE__*/React.createElement(Styled.ChatIcon, null, isPublicGroupChat(chat) ? /*#__PURE__*/React.createElement(Styled.ChatThumbnail, null, /*#__PURE__*/React.createElement(Icon, {
    iconName: "group_chat",
    className: undefined,
    prependIconName: undefined,
    rotate: undefined,
    color: undefined
  })) : /*#__PURE__*/React.createElement(Styled.UserAvatar, {
    moderator: ((_chat$participant3 = chat.participant) === null || _chat$participant3 === void 0 ? void 0 : _chat$participant3.role) === ROLE_MODERATOR,
    avatar: chat.participant.avatar,
    color: chat.participant.color
  }, ((_chat$participant4 = chat.participant) === null || _chat$participant4 === void 0 ? void 0 : _chat$participant4.avatar.length) === 0 ? (_chat$participant5 = chat.participant) === null || _chat$participant5 === void 0 ? void 0 : _chat$participant5.name.toLowerCase().slice(0, 2) : '')), /*#__PURE__*/React.createElement(Styled.ChatName, null, /*#__PURE__*/React.createElement(Styled.ChatNameMain, {
    active: false
  }, isPublicGroupChat(chat) ? intl.formatMessage(intlMessages.titlePublic) : (_chat$participant6 = chat.participant) === null || _chat$participant6 === void 0 ? void 0 : _chat$participant6.name)), countUnreadMessages > 0 ? /*#__PURE__*/React.createElement(Styled.UnreadMessages, {
    "data-test": "unreadMessages",
    "aria-label": arialabel
  }, /*#__PURE__*/React.createElement(Styled.UnreadMessagesText, {
    "aria-hidden": "true"
  }, countUnreadMessages)) : null));
};
module.exportDefault(ChatListItem);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-messages/chat-list/chat-list-item/styles.ts                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 1);
let lgPaddingY, smPaddingY, borderSize, userIndicatorsOffset;
module.link("/imports/ui/stylesheets/styled-components/general", {
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  userIndicatorsOffset(v) {
    userIndicatorsOffset = v;
  }
}, 2);
let colorGrayDark, colorOffWhite, listItemBgHover, colorGrayLight, colorWhite, userListBg, colorSuccess, itemFocusBorder, unreadMessagesBg, colorGrayLightest;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  listItemBgHover(v) {
    listItemBgHover = v;
  },
  colorGrayLight(v) {
    colorGrayLight = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  userListBg(v) {
    userListBg = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  itemFocusBorder(v) {
    itemFocusBorder = v;
  },
  unreadMessagesBg(v) {
    unreadMessagesBg = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  }
}, 3);
const ChatListItemLink = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-grow: 1;\n  align-items: center;\n  text-decoration: none;\n  width: 100%;\n"])));
const ChatIcon = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  flex: 0 0 2.2rem;\n"])));
const UserAvatar = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  flex: 0 0 2.25rem;\n  margin: 0px calc(0.5rem) 0px 0px;\n  box-flex: 0;\n  position: relative;\n  height: 2.25rem;\n  width: 2.25rem;\n  border-radius: 50%;\n  text-align: center;\n  font-size: .85rem;\n  border: 2px solid transparent;\n  user-select: none;\n  ", "\n  }\n  &:after,\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 0;\n    height: 0;\n    padding-top: .5rem;\n    padding-right: 0;\n    padding-left: 0;\n    padding-bottom: 0;\n    color: inherit;\n    top: auto;\n    left: auto;\n    bottom: ", ";\n    right: ", ";\n    border: 1.5px solid ", ";\n    border-radius: 50%;\n    background-color: ", ";\n    color: ", ";\n    opacity: 0;\n    font-family: 'bbb-icons';\n    font-size: .65rem;\n    line-height: 0;\n    text-align: center;\n    vertical-align: middle;\n    letter-spacing: -.65rem;\n    z-index: 1;\n    [dir=\"rtl\"] & {\n      left: ", ";\n      right: auto;\n      padding-right: .65rem;\n      padding-left: 0;\n    }\n  }\n  ", "\n  // ================ image ================\n  ", "\n  // ================ image ================\n  // ================ content ================\n  color: ", ";\n  font-size: 110%;\n  text-transform: capitalize;\n  display: flex;\n  justify-content: center;\n  align-items:center;  \n  // ================ content ================\n  & .react-loading-skeleton {    \n    height: 2.25rem;\n    width: 2.25rem;\n  }\n"])), _ref => {
  let {
    color
  } = _ref;
  return "\n    background-color: ".concat(color, ";\n  ");
}, userIndicatorsOffset, userIndicatorsOffset, userListBg, colorSuccess, colorWhite, userIndicatorsOffset, _ref2 => {
  let {
    moderator
  } = _ref2;
  return moderator && "\n    border-radius: 5px;\n  ";
}, _ref3 => {
  let {
    avatar,
    emoji,
    color
  } = _ref3;
  return (avatar === null || avatar === void 0 ? void 0 : avatar.length) !== 0 && !emoji && "\n    background-image: url(".concat(avatar, ");\n    background-repeat: no-repeat;\n    background-size: contain;\n    border: 2px solid ").concat(color, ";\n  ");
}, colorWhite);
const ChatName = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  flex-grow: 1;\n  justify-content: center;\n  width: 50%;\n  padding-right: ", ";\n"])), smPaddingY);
const ChatNameMain = styled.span(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  margin: 0;\n  min-width: 0;\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  font-weight: 400;\n  font-size: ", ";\n  color: ", ";\n  flex-grow: 1;\n  line-height: 2;\n  text-align: left;\n  padding: 0 0 0 ", ";\n  text-overflow: ellipsis;\n\n  [dir=\"rtl\"] & {\n    text-align: right;\n    padding: 0 ", " 0 0;\n  }\n\n  ", "\n"])), fontSizeSmall, colorGrayDark, lgPaddingY, lgPaddingY, _ref4 => {
  let {
    active
  } = _ref4;
  return active && "\n    background-color: ".concat(listItemBgHover, ";\n  ");
});
const ChatListItem = styled.button(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  cursor: pointer;\n  border-color: transparent;\n  border-width: 0;\n\n  [dir=\"rtl\"] & {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n  }\n\n  &:first-child {\n    margin-top: 0;\n  }\n\n  &:hover {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n    background-color: ", ";\n  }\n\n  &:focus {\n    outline: transparent;\n    outline-width: ", ";\n    outline-style: solid;\n    background-color: ", ";\n    box-shadow: inset 0 0 0 ", " ", ", inset 1px 0 0 1px ", ";\n  }\n  cursor: pointer;\n  text-decoration: none;\n  flex-grow: 1;\n  line-height: 2;\n  color: ", ";\n  background-color: ", ";\n  padding-top: ", ";\n  padding-bottom: ", ";\n  padding-left: ", ";\n  padding-right: 0;\n  margin-left: ", ";\n  margin-top: ", ";\n  margin-bottom: ", ";\n  margin-right: 0;\n\n  [dir=\"rtl\"] & {\n    padding-left: 0;\n    padding-right: ", ";\n    margin-left: 0;\n    margin-right: ", ";\n  }\n  ", "\n"])), borderSize, listItemBgHover, borderSize, listItemBgHover, borderSize, itemFocusBorder, itemFocusBorder, colorGrayDark, colorOffWhite, lgPaddingY, lgPaddingY, lgPaddingY, borderSize, borderSize, borderSize, lgPaddingY, borderSize, _ref5 => {
  let {
    active
  } = _ref5;
  return active && "\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ".concat(borderSize, ";\n    background-color: ").concat(colorGrayLightest, ";\n  ");
});
const ChatThumbnail = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  color: ", ";\n  justify-content: center;\n  font-size: 175%;\n"])), colorGrayLight);
const UnreadMessages = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  margin-left: auto;\n  [dir=\"rtl\"] & {\n    margin-right: auto;\n    margin-left: 0;\n  }\n"])));
const UnreadMessagesText = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  margin: 0;\n  justify-content: center;\n  color: ", ";\n  line-height: calc(1rem + 1px);\n  padding: 0 0.5rem;\n  text-align: center;\n  border-radius: 0.5rem/50%;\n  font-size: 0.8rem;\n  background-color: ", ";\n"])), colorWhite, unreadMessagesBg);
module.exportDefault({
  ChatListItemLink,
  ChatIcon,
  ChatName,
  ChatNameMain,
  ChatListItem,
  ChatThumbnail,
  UnreadMessages,
  UnreadMessagesText,
  UserAvatar
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-messages/chat-list/component.tsx                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let TransitionGroup, CSSTransition;
module.link("react-transition-group", {
  TransitionGroup(v) {
    TransitionGroup = v;
  },
  CSSTransition(v) {
    CSSTransition = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let ChatListItem;
module.link("./chat-list-item/component", {
  default(v) {
    ChatListItem = v;
  }
}, 4);
let useChat;
module.link("/imports/ui/core/hooks/useChat", {
  default(v) {
    useChat = v;
  }
}, 5);
let Service;
module.link("/imports/ui/components/user-list/service", {
  default(v) {
    Service = v;
  }
}, 6);
const intlMessages = defineMessages({
  messagesTitle: {
    id: 'app.userList.messagesTitle',
    description: 'Title for the messages list'
  }
});
const getActiveChats = (chats, chatNodeRef) => chats.map(chat => /*#__PURE__*/React.createElement(CSSTransition, {
  classNames: "transition",
  appear: true,
  enter: true,
  exit: false,
  timeout: 0,
  component: "div",
  key: chat.chatId,
  nodeRef: chatNodeRef
}, /*#__PURE__*/React.createElement(Styled.ListTransition, null, /*#__PURE__*/React.createElement(ChatListItem, {
  chat: chat,
  chatNodeRef: chatNodeRef
}))));
const ChatList = _ref => {
  var _getActiveChats;
  let {
    chats
  } = _ref;
  const messageListRef = React.useRef(null);
  const messageItemsRef = React.useRef(null);
  const [selectedChat, setSelectedChat] = React.useState();
  const {
    roving
  } = Service;
  const chatNodeRef = React.useRef(null);
  React.useEffect(() => {
    const firstChild = selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.firstChild;
    if (firstChild && firstChild instanceof HTMLElement) firstChild.focus();
  }, [selectedChat]);
  const rove = event => {
    const msgItemsRef = messageItemsRef.current;
    const msgItemsRefChild = msgItemsRef === null || msgItemsRef === void 0 ? void 0 : msgItemsRef.firstChild;
    roving(event, setSelectedChat, msgItemsRefChild, selectedChat);
    event.stopPropagation();
  };
  const intl = useIntl();
  return /*#__PURE__*/React.createElement(Styled.Messages, null, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.MessagesTitle, {
    "data-test": "messageTitle"
  }, intl.formatMessage(intlMessages.messagesTitle))), /*#__PURE__*/React.createElement(Styled.ScrollableList, {
    role: "tabpanel",
    tabIndex: 0,
    ref: messageListRef,
    onKeyDown: rove
  }, /*#__PURE__*/React.createElement(Styled.List, {
    ref: messageItemsRef
  }, /*#__PURE__*/React.createElement(TransitionGroup, null, (_getActiveChats = getActiveChats(chats, chatNodeRef)) !== null && _getActiveChats !== void 0 ? _getActiveChats : null))));
};
const ChatListContainer = () => {
  const {
    data: chats
  } = useChat(chat => chat);
  if (chats) {
    return /*#__PURE__*/React.createElement(ChatList, {
      chats: chats
    });
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null);
};
module.exportDefault(ChatListContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-messages/chat-list/styles.ts                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGray, colorGrayLighter, colorPrimary, userListBg;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  userListBg(v) {
    userListBg = v;
  }
}, 1);
let borderSize, smPaddingX, lgPaddingY, mdPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  }
}, 2);
const Messages = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  flex-grow: 0;\n  display: flex;\n  flex-flow: column;\n  flex-shrink: 0;\n  max-height: 30vh;\n"])));
const Container = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  margin-bottom: ", ";\n  margin-top: ", ";\n"])), lgPaddingY, smPaddingX);
const Separator = styled.hr(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin: 1rem auto;\n  width: 2.2rem;\n  border: 0;\n  border-top: 1px solid ", ";\n"])), colorGrayLighter);
const MessagesTitle = styled.h2(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  font-size: 0.85rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  padding: 0 ", ";\n  color: ", ";\n  flex: 1;\n  margin: 0;\n  flex: 1;\n  margin: 0;\n"])), smPaddingX, colorGray);
const ScrollableList = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  overflow-y: auto;\n  background: linear-gradient(white 30%, rgba(255,255,255,0)),\n    linear-gradient(rgba(255,255,255,0), white 70%) 0 100%,\n    /* Shadows */\n    radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.2), rgba(0,0,0,0)),\n    radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;\n\n  background-repeat: no-repeat;\n  background-color: transparent;\n  background-size: 100% 40px, 100% 40px, 100% 14px, 100% 14px;\n  background-attachment: local, local, scroll, scroll;\n\n  // Fancy scroll\n  &::-webkit-scrollbar {\n    width: 5px;\n    height: 5px;\n  }\n  &::-webkit-scrollbar-button {\n    width: 0;\n    height: 0;\n  }\n  &::-webkit-scrollbar-thumb {\n    background: rgba(0,0,0,.25);\n    border: none;\n    border-radius: 50px;\n  }\n  &::-webkit-scrollbar-thumb:hover { background: rgba(0,0,0,.5); }\n  &::-webkit-scrollbar-thumb:active { background: rgba(0,0,0,.25); }\n  &::-webkit-scrollbar-track {\n    background: rgba(0,0,0,.25);\n    border: none;\n    border-radius: 50px;\n  }\n  &::-webkit-scrollbar-track:hover { background: rgba(0,0,0,.25); }\n  &::-webkit-scrollbar-track:active { background: rgba(0,0,0,.25); }\n  &::-webkit-scrollbar-corner { background: 0 0; }\n  background: linear-gradient(", " 30%, rgba(255,255,255,0)),\n    linear-gradient(rgba(255,255,255,0), ", " 70%) 0 100%,\n    /* Shadows */\n    radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.2), rgba(0,0,0,0)),\n    radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;\n\n  outline: none;\n  \n  &:hover {\n    /* Visible in Windows high-contrast themes */\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n\n  &:focus,\n  &:active {\n    border-radius: none;\n    box-shadow: inset 0 0 1px ", ";\n    outline-style: transparent;\n  }\n\n  overflow-x: hidden;\n  padding-top: 1px;\n  padding-right: 1px;\n"])), userListBg, userListBg, borderSize, colorPrimary);
const List = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\nmargin: 0 0 1px ", ";\n\n[dir=\"rtl\"] & {\n  margin: 0 ", " 1px 0;\n}\n"])), mdPaddingY, mdPaddingY);
const ListTransition = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  padding: ", " 0 0 0;.\n  outline: none;\n  overflow: hidden;\n  flex-shrink: 1;\n\n  &.transition-enter,\n  &.transition-appear {\n    opacity: 0.01;\n  }\n\n  &.transition-enter-active,\n  &.transition-appear-active {\n    opacity: 1;\n    \n    &.animationsEnabled {\n      transition: all 600ms;\n    }\n  }\n\n  &.transition-leave {\n    opacity: 1;\n  }\n\n  &.transition-leave-active {\n    opacity: 0;\n\n    &.animationsEnabled {\n      transition: all 600ms;\n    }\n  }\n"])), borderSize);
module.exportDefault({
  Messages,
  Container,
  Separator,
  MessagesTitle,
  ScrollableList,
  List,
  ListTransition
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"generic-sidekick-content-button":{"menu-item":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/generic-sidekick-content-button/menu-item/component.tsx           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  "*"(v) {
    React = v;
  }
}, 0);
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 1);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 2);
let ACTIONS, PANELS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 3);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const GenericContentSidekickAreaMenuItem = _ref => {
  let {
    sidebarContentPanel,
    genericSidekickContentId,
    genericContentSidekickAreaObject,
    layoutContextDispatch
  } = _ref;
  useEffect(() => {
    if (genericContentSidekickAreaObject.open) {
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
        value: true
      });
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
        value: genericSidekickContentId
      });
    }
  }, []);
  return /*#__PURE__*/React.createElement(Styled.ScrollableList, null, /*#__PURE__*/React.createElement(Styled.List, null, /*#__PURE__*/React.createElement(Styled.ListItem, {
    role: "button",
    tabIndex: 0,
    active: sidebarContentPanel === genericSidekickContentId,
    onClick: () => {
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
        value: sidebarContentPanel !== genericSidekickContentId
      });
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
        value: sidebarContentPanel === genericSidekickContentId ? PANELS.NONE : genericSidekickContentId
      });
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    iconName: genericContentSidekickAreaObject.buttonIcon
  }), /*#__PURE__*/React.createElement("span", null, genericContentSidekickAreaObject.name))));
};
module.exportDefault(GenericContentSidekickAreaMenuItem);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/generic-sidekick-content-button/component.tsx                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let GenericContentType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/generic-content-item/enums", {
  GenericContentType(v) {
    GenericContentType = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let PANELS;
module.link("/imports/ui/components/layout/enums", {
  PANELS(v) {
    PANELS = v;
  }
}, 3);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 4);
let GenericContentSidekickAreaMenuItem;
module.link("./menu-item/component", {
  default(v) {
    GenericContentSidekickAreaMenuItem = v;
  }
}, 5);
const GenericSidekickContentNavButton = _ref => {
  let {
    sidebarContentPanel,
    layoutContextDispatch
  } = _ref;
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let genericSidekickContentExtensibleArea = [];
  if (pluginsExtensibleAreasAggregatedState.genericContentItems) {
    const genericMainContent = pluginsExtensibleAreasAggregatedState.genericContentItems.filter(g => g.type === GenericContentType.SIDEKICK_AREA);
    genericSidekickContentExtensibleArea = [...genericMainContent];
  }
  const genericContentSidekickId = id => PANELS.GENERIC_CONTENT_SIDEKICK + id;
  const groupBySidekickMenuSection = {};
  genericSidekickContentExtensibleArea.forEach(item => {
    const {
      section
    } = item;
    let alreadySetArray = groupBySidekickMenuSection[section];
    if (alreadySetArray) {
      alreadySetArray.push(item);
    } else {
      alreadySetArray = [item];
    }
    groupBySidekickMenuSection[section] = alreadySetArray;
  });
  if (Object.keys(groupBySidekickMenuSection).length !== 0) {
    return Object.keys(groupBySidekickMenuSection).map(section => /*#__PURE__*/React.createElement(Styled.Section, {
      key: genericContentSidekickId(section)
    }, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.SmallTitle, null, section)), groupBySidekickMenuSection[section].map(genericContentSidekickAreaObject => /*#__PURE__*/React.createElement(GenericContentSidekickAreaMenuItem, {
      key: genericContentSidekickId(genericContentSidekickAreaObject.id),
      sidebarContentPanel: sidebarContentPanel,
      genericSidekickContentId: genericContentSidekickId(genericContentSidekickAreaObject.id),
      genericContentSidekickAreaObject: genericContentSidekickAreaObject,
      layoutContextDispatch: layoutContextDispatch
    }))));
  }
  return null;
};
module.exportDefault(GenericSidekickContentNavButton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/generic-sidekick-content-button/container.jsx                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let GenericSidekickContentNavButton;
module.link("./component", {
  default(v) {
    GenericSidekickContentNavButton = v;
  }
}, 1);
let layoutSelectInput, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
const GenericSidekickContentNavButtonContainer = props => {
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    sidebarContentPanel
  } = sidebarContent;
  const layoutContextDispatch = layoutDispatch();
  return /*#__PURE__*/React.createElement(GenericSidekickContentNavButton, _objectSpread({
    layoutContextDispatch,
    sidebarContentPanel
  }, props));
};
module.exportDefault(GenericSidekickContentNavButtonContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/generic-sidekick-content-button/styles.ts                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("/imports/ui/components/user-list/styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let StyledContent;
module.link("/imports/ui/components/user-list/user-list-content/styles", {
  default(v) {
    StyledContent = v;
  }
}, 2);
const ListItem = styled(StyledContent.ListItem)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  i{ left: 4px; }\n"])));
const Section = styled(Styled.Messages)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const Container = styled(StyledContent.Container)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const SmallTitle = styled(Styled.SmallTitle)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([""])));
const ScrollableList = styled(StyledContent.ScrollableList)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""])));
const List = styled(StyledContent.List)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""])));
module.exportDefault({
  ListItem,
  Section,
  Container,
  SmallTitle,
  ScrollableList,
  List
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"breakout-room":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/breakout-room/component.jsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let ACTIONS, PANELS;
module.link("../../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 5);
let BreakoutRemainingTime;
module.link("/imports/ui/components/common/remaining-time/breakout-duration/component", {
  default(v) {
    BreakoutRemainingTime = v;
  }
}, 6);
const intlMessages = defineMessages({
  breakoutTitle: {
    id: 'app.createBreakoutRoom.title',
    description: 'breakout title'
  }
});
const BreakoutRoomItem = _ref => {
  let {
    hasBreakoutRoom,
    sidebarContentPanel,
    layoutContextDispatch,
    intl
  } = _ref;
  const toggleBreakoutPanel = () => {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: sidebarContentPanel !== PANELS.BREAKOUT
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: sidebarContentPanel === PANELS.BREAKOUT ? PANELS.NONE : PANELS.BREAKOUT
    });
  };
  if (hasBreakoutRoom) {
    return /*#__PURE__*/React.createElement(Styled.Messages, null, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.SmallTitle, null, intl.formatMessage(intlMessages.breakoutTitle))), /*#__PURE__*/React.createElement(Styled.ScrollableList, null, /*#__PURE__*/React.createElement(Styled.List, null, /*#__PURE__*/React.createElement(Styled.ListItem, {
      role: "button",
      tabIndex: 0,
      active: sidebarContentPanel === PANELS.BREAKOUT,
      onClick: toggleBreakoutPanel,
      "data-test": "breakoutRoomsItem",
      "aria-label": intl.formatMessage(intlMessages.breakoutTitle),
      onKeyDown: e => {
        if (e.key === 'Enter') {
          e.preventDefault();
          toggleBreakoutPanel();
        }
      }
    }, /*#__PURE__*/React.createElement(Icon, {
      iconName: "rooms"
    }), /*#__PURE__*/React.createElement("div", {
      "aria-hidden": true
    }, /*#__PURE__*/React.createElement(Styled.BreakoutTitle, null, intl.formatMessage(intlMessages.breakoutTitle)), /*#__PURE__*/React.createElement(Styled.BreakoutDuration, null, /*#__PURE__*/React.createElement(BreakoutRemainingTime, null)))))));
  }
  return /*#__PURE__*/React.createElement("span", null);
};
module.exportDefault(injectIntl(BreakoutRoomItem));
BreakoutRoomItem.propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  hasBreakoutRoom: PropTypes.bool.isRequired
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/breakout-room/container.jsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let BreakoutRoomItem;
module.link("./component", {
  default(v) {
    BreakoutRoomItem = v;
  }
}, 1);
let layoutSelectInput, layoutDispatch;
module.link("../../../layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 3);
let userIsInvited;
module.link("./query", {
  userIsInvited(v) {
    userIsInvited = v;
  }
}, 4);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 5);
let ACTIONS, PANELS;
module.link("../../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 6);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 7);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 8);
const BreakoutRoomContainer = _ref => {
  var _currentMeeting$compo, _currentMeeting$compo2;
  let {
    breakoutRoom
  } = _ref;
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    sidebarContentPanel
  } = sidebarContent;
  const layoutContextDispatch = layoutDispatch();
  const {
    data: userIsInvitedData,
    error: userIsInvitedError,
    loading: userIsInvitedLoading
  } = useDeduplicatedSubscription(userIsInvited);
  const {
    data: currentMeeting
  } = useMeeting(m => ({
    componentsFlags: m.componentsFlags
  }));
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    isModerator: u === null || u === void 0 ? void 0 : u.isModerator
  }));
  if (userIsInvitedError) {
    logger.error('Error in userIsInvited subscription:', userIsInvitedError);
    return /*#__PURE__*/React.createElement("div", null, JSON.stringify(userIsInvitedError));
  }
  if (userIsInvitedLoading) return null;
  const hasBreakoutRoom = (_currentMeeting$compo = currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$compo2 = currentMeeting.componentsFlags) === null || _currentMeeting$compo2 === void 0 ? void 0 : _currentMeeting$compo2.hasBreakoutRoom) !== null && _currentMeeting$compo !== void 0 ? _currentMeeting$compo : false;
  if (!hasBreakoutRoom && sidebarContentPanel === PANELS.BREAKOUT) {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.NONE
    });
  }
  return /*#__PURE__*/React.createElement(BreakoutRoomItem, {
    layoutContextDispatch,
    sidebarContentPanel,
    hasBreakoutRoom: hasBreakoutRoom && (userIsInvitedData.breakoutRoom.length > 0 || (currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator)),
    breakoutRoom
  });
};
module.exportDefault(BreakoutRoomContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"query.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/breakout-room/query.ts                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  userIsInvited: () => userIsInvited
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const userIsInvited = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription userIsInvited {\n    breakoutRoom(where: {joinURL: {_is_null: false}}) {\n      sequence\n    }\n  }\n"])));
module.exportDefault({
  userIsInvited
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/breakout-room/styles.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("/imports/ui/components/user-list/styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let StyledContent;
module.link("/imports/ui/components/user-list/user-list-content/styles", {
  default(v) {
    StyledContent = v;
  }
}, 2);
let colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  }
}, 3);
let fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 4);
const Messages = styled(Styled.Messages)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const Container = styled(StyledContent.Container)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const SmallTitle = styled(Styled.SmallTitle)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const ScrollableList = styled(StyledContent.ScrollableList)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([""])));
const List = styled(StyledContent.List)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""])));
const ListItem = styled(StyledContent.ListItem)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""])));
const BreakoutTitle = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  font-size: ", ";\n"])), fontSizeSmall);
const BreakoutDuration = styled.p(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  margin: 0;\n  font-size: 0.75rem;\n  font-weight: 200;\n  color: ", ";\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  font-style: italic;\n"])), colorGray);
module.exportDefault({
  Messages,
  Container,
  SmallTitle,
  ScrollableList,
  List,
  ListItem,
  BreakoutTitle,
  BreakoutDuration
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"timer":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/timer/component.jsx                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let ACTIONS, PANELS;
module.link("../../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 5);
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  stopwatch: PropTypes.bool.isRequired,
  sidebarContentPanel: PropTypes.shape().isRequired,
  layoutContextDispatch: PropTypes.shape().isRequired,
  isModerator: PropTypes.bool.isRequired
};
const intlMessages = defineMessages({
  title: {
    id: 'app.userList.timerTitle',
    description: 'Title for the time'
  },
  timer: {
    id: 'app.timer.timer.title',
    description: 'Title for the timer'
  },
  stopwatch: {
    id: 'app.timer.stopwatch.title',
    description: 'Title for the stopwatch'
  }
});
class Timer extends PureComponent {
  render() {
    const {
      intl,
      isModerator,
      stopwatch,
      sidebarContentPanel,
      layoutContextDispatch
    } = this.props;
    if (!isModerator) return null;
    const message = stopwatch ? intlMessages.stopwatch : intlMessages.timer;
    return /*#__PURE__*/React.createElement(Styled.Messages, null, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.SmallTitle, null, intl.formatMessage(intlMessages.title))), /*#__PURE__*/React.createElement(Styled.ScrollableList, null, /*#__PURE__*/React.createElement(Styled.List, null, /*#__PURE__*/React.createElement(Styled.ListItem, {
      role: "button",
      tabIndex: 0,
      active: sidebarContentPanel === PANELS.TIMER,
      onClick: () => {
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: sidebarContentPanel !== PANELS.TIMER
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: sidebarContentPanel === PANELS.TIMER ? PANELS.NONE : PANELS.TIMER
        });
      }
    }, /*#__PURE__*/React.createElement(Icon, {
      iconName: "time"
    }), /*#__PURE__*/React.createElement("span", null, intl.formatMessage(message))))));
  }
}
Timer.propTypes = propTypes;
module.exportDefault(injectIntl(Timer));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/timer/container.jsx                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Timer;
module.link("./component", {
  default(v) {
    Timer = v;
  }
}, 1);
let layoutSelectInput, layoutDispatch;
module.link("../../../layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 3);
let useTimer;
module.link("/imports/ui/core/hooks/useTImer", {
  default(v) {
    useTimer = v;
  }
}, 4);
const TimerContainer = props => {
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    sidebarContentPanel
  } = sidebarContent;
  const layoutContextDispatch = layoutDispatch();
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    isModerator: user.isModerator
  }));
  const {
    data: timerData
  } = useTimer();
  if (!timerData) return null;
  const {
    stopwatch
  } = timerData;
  const isModerator = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.isModerator;
  return /*#__PURE__*/React.createElement(Timer, _objectSpread({
    layoutContextDispatch,
    stopwatch,
    sidebarContentPanel,
    isModerator
  }, props));
};
module.exportDefault(TimerContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/timer/styles.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("/imports/ui/components/user-list/styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let StyledContent;
module.link("/imports/ui/components/user-list/user-list-content/styles", {
  default(v) {
    StyledContent = v;
  }
}, 2);
const ListItem = styled(StyledContent.ListItem)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  i{ left: 4px; }\n"])));
const Messages = styled(Styled.Messages)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const Container = styled(StyledContent.Container)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const SmallTitle = styled(Styled.SmallTitle)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([""])));
const ScrollableList = styled(StyledContent.ScrollableList)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""])));
const List = styled(StyledContent.List)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""])));
module.exportDefault({
  ListItem,
  Messages,
  Container,
  SmallTitle,
  ScrollableList,
  List
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-polls":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-polls/component.jsx                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let ACTIONS, PANELS;
module.link("../../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 5);
const intlMessages = defineMessages({
  pollLabel: {
    id: 'app.poll.pollPaneTitle',
    description: 'label for user-list poll button'
  }
});
const UserPolls = _ref => {
  let {
    intl,
    isPresenter = false,
    pollIsOpen,
    forcePollOpen,
    sidebarContentPanel,
    layoutContextDispatch
  } = _ref;
  if (!isPresenter) return null;
  if (!pollIsOpen && !forcePollOpen) return null;
  const handleClickTogglePoll = () => {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: sidebarContentPanel !== PANELS.POLL
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: sidebarContentPanel === PANELS.POLL ? PANELS.NONE : PANELS.POLL
    });
  };
  return /*#__PURE__*/React.createElement(Styled.Messages, null, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.SmallTitle, null, intl.formatMessage(intlMessages.pollLabel))), /*#__PURE__*/React.createElement(Styled.List, null, /*#__PURE__*/React.createElement(Styled.ScrollableList, null, /*#__PURE__*/React.createElement(Styled.ListItem, {
    role: "button",
    tabIndex: 0,
    "data-test": "pollMenuButton",
    active: sidebarContentPanel === PANELS.POLL,
    onClick: handleClickTogglePoll,
    onKeyDown: e => {
      if (e.key === 'Enter') {
        handleClickTogglePoll();
      }
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    iconName: "polling"
  }), /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.pollLabel))))));
};
module.exportDefault(injectIntl(UserPolls));
UserPolls.propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  isPresenter: PropTypes.bool,
  pollIsOpen: PropTypes.bool.isRequired,
  forcePollOpen: PropTypes.bool.isRequired
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-polls/container.jsx                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let UserPolls;
module.link("./component", {
  default(v) {
    UserPolls = v;
  }
}, 1);
let layoutSelectInput, layoutDispatch;
module.link("../../../layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 3);
const UserPollsContainer = props => {
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    sidebarContentPanel
  } = sidebarContent;
  const layoutContextDispatch = layoutDispatch();
  const pollIsOpen = useStorageKey('isPollOpen') || false;
  const forcePollOpen = useStorageKey('forcePollOpen') || false;
  return /*#__PURE__*/React.createElement(UserPolls, _objectSpread({
    sidebarContentPanel,
    layoutContextDispatch,
    pollIsOpen,
    forcePollOpen
  }, props));
};
module.exportDefault(UserPollsContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/user-polls/styles.js                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("/imports/ui/components/user-list/styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let StyledContent;
module.link("/imports/ui/components/user-list/user-list-content/styles", {
  default(v) {
    StyledContent = v;
  }
}, 2);
const Messages = styled(Styled.Messages)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const Container = styled(StyledContent.Container)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const SmallTitle = styled(Styled.SmallTitle)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const ScrollableList = styled(StyledContent.ScrollableList)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([""])));
const List = styled(StyledContent.List)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""])));
const ListItem = styled(StyledContent.ListItem)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""])));
module.exportDefault({
  Messages,
  Container,
  SmallTitle,
  ScrollableList,
  List,
  ListItem
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/component.jsx                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let UserListParticipants;
module.link("./user-participants/user-list-participants/component", {
  default(v) {
    UserListParticipants = v;
  }
}, 3);
let ChatList;
module.link("./user-messages/chat-list/component", {
  default(v) {
    ChatList = v;
  }
}, 4);
let UserNotesContainer;
module.link("../user-list-graphql/user-list-content/user-notes/component", {
  default(v) {
    UserNotesContainer = v;
  }
}, 5);
let TimerContainer;
module.link("./timer/container", {
  default(v) {
    TimerContainer = v;
  }
}, 6);
let GuestPanelOpenerContainer;
module.link("../user-list-graphql/user-participants-title/guest-panel-opener/component", {
  default(v) {
    GuestPanelOpenerContainer = v;
  }
}, 7);
let UserPollsContainer;
module.link("./user-polls/container", {
  default(v) {
    UserPollsContainer = v;
  }
}, 8);
let BreakoutRoomContainer;
module.link("./breakout-room/container", {
  default(v) {
    BreakoutRoomContainer = v;
  }
}, 9);
let UserTitleContainer;
module.link("../user-list-graphql/user-participants-title/component", {
  default(v) {
    UserTitleContainer = v;
  }
}, 10);
let GenericSidekickContent;
module.link("bigbluebutton-html-plugin-sdk", {
  GenericSidekickContent(v) {
    GenericSidekickContent = v;
  }
}, 11);
let GenericSidekickContentNavButtonContainer;
module.link("./generic-sidekick-content-button/container", {
  default(v) {
    GenericSidekickContentNavButtonContainer = v;
  }
}, 12);
const propTypes = {
  currentUser: PropTypes.shape({
    role: PropTypes.string.isRequired,
    presenter: PropTypes.bool.isRequired
  }),
  compact: PropTypes.bool,
  isTimerActive: PropTypes.bool
};
const defaultProps = {
  currentUser: {
    role: '',
    presenter: false
  },
  compact: false,
  isTimerActive: false
};
class UserContent extends PureComponent {
  render() {
    const {
      currentUser,
      isTimerActive,
      compact,
      isChatEnabled
    } = this.props;
    const ROLE_MODERATOR = window.meetingClientSettings.public.user.role_moderator;
    return /*#__PURE__*/React.createElement(Styled.Content, {
      "data-test": "userListContent"
    }, isChatEnabled ? /*#__PURE__*/React.createElement(ChatList, null) : null, /*#__PURE__*/React.createElement(UserNotesContainer, null), isTimerActive && /*#__PURE__*/React.createElement(TimerContainer, {
      isModerator: (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === ROLE_MODERATOR
    }), (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === ROLE_MODERATOR ? /*#__PURE__*/React.createElement(GuestPanelOpenerContainer, null) : null, /*#__PURE__*/React.createElement(UserPollsContainer, {
      isPresenter: currentUser === null || currentUser === void 0 ? void 0 : currentUser.presenter
    }), /*#__PURE__*/React.createElement(BreakoutRoomContainer, null), /*#__PURE__*/React.createElement(GenericSidekickContentNavButtonContainer, null), /*#__PURE__*/React.createElement(UserTitleContainer, null), /*#__PURE__*/React.createElement(UserListParticipants, {
      compact: compact
    }));
  }
}
UserContent.propTypes = propTypes;
UserContent.defaultProps = defaultProps;
module.exportDefault(UserContent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/container.jsx                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let UserContent;
module.link("./component", {
  default(v) {
    UserContent = v;
  }
}, 1);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 2);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 3);
let useIsChatEnabled;
module.link("/imports/ui/services/features", {
  useIsChatEnabled(v) {
    useIsChatEnabled = v;
  }
}, 4);
const ASK_MODERATOR = 'ASK_MODERATOR';
const UserContentContainer = props => {
  var _currentMeeting$users, _currentMeeting$compo;
  const {
    data: currentUser
  } = useCurrentUser(user => ({
    userId: user.userId,
    presenter: user.presenter,
    locked: user.locked,
    role: user.role,
    isModerator: user.isModerator
  }));
  const {
    data: currentMeeting
  } = useMeeting(m => ({
    componentsFlags: m.componentsFlags,
    usersPolicies: {
      guestPolicy: m.usersPolicies.guestPolicy
    }
  }));
  const isChatEnabled = useIsChatEnabled();
  const APP_SETTINGS = window.meetingClientSettings.public.app;
  const isWaitingRoomEnabled = (currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$users = currentMeeting.usersPolicies) === null || _currentMeeting$users === void 0 ? void 0 : _currentMeeting$users.guestPolicy) === ASK_MODERATOR;
  return /*#__PURE__*/React.createElement(UserContent, _objectSpread({
    isGuestLobbyMessageEnabled: APP_SETTINGS.enableGuestLobbyMessage,
    currentUser,
    isTimerActive: (currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$compo = currentMeeting.componentsFlags) === null || _currentMeeting$compo === void 0 ? void 0 : _currentMeeting$compo.hasTimer) && (currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator),
    isWaitingRoomEnabled,
    isChatEnabled
  }, props));
};
module.exportDefault(UserContentContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-content/styles.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("/imports/ui/components/user-list/styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let FlexColumn;
module.link("/imports/ui/stylesheets/styled-components/placeholders", {
  FlexColumn(v) {
    FlexColumn = v;
  }
}, 2);
let smPaddingX, lgPaddingY, borderSize, mdPaddingY, mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 3);
let colorPrimary, userListBg, colorWhite, colorOffWhite, colorGrayDark, colorGrayLight, colorGrayLighter, unreadMessagesBg, colorGrayLightest;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  userListBg(v) {
    userListBg = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorGrayLight(v) {
    colorGrayLight = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  unreadMessagesBg(v) {
    unreadMessagesBg = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  }
}, 4);
let fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 5);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 6);
const Content = styled(FlexColumn)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  flex-grow: 1;\n  overflow: hidden;\n"])));
const Container = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  margin-bottom: ", ";\n  margin-top: ", ";\n"])), lgPaddingY, smPaddingX);
const ScrollableList = styled(ScrollboxVertical)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  background: linear-gradient(", " 30%, rgba(255,255,255,0)),\n    linear-gradient(rgba(255,255,255,0), ", " 70%) 0 100%,\n    /* Shadows */\n    radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.2), rgba(0,0,0,0)),\n    radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;\n\n  outline: none;\n  \n  &:hover {\n    /* Visible in Windows high-contrast themes */\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n\n  &:focus,\n  &:active {\n    border-radius: none;\n    box-shadow: inset 0 0 1px ", ";\n    outline-style: transparent;\n  }\n\n  overflow-x: hidden;\n  padding-top: 1px;\n  padding-right: 1px;\n"])), userListBg, userListBg, borderSize, colorPrimary);
const List = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin: 0 0 1px ", ";\n\n  [dir=\"rtl\"] & {\n    margin: 0 ", " 1px 0;\n  }\n"])), mdPaddingY, mdPaddingY);
const ListItem = styled(Styled.ListItem)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  flex-flow: row;\n  flex-grow: 0;\n  flex-shrink: 0;\n  padding-top: ", ";\n  padding-bottom: ", ";\n  padding-left: ", ";\n  text-decoration: none;\n  width: 100%;\n  color: ", ";\n  background-color: ", ";\n\n  [dir=\"rtl\"]  & {\n    padding-right: ", ";\n    padding-left: 0;\n  }\n\n  > i {\n    display: flex;\n    font-size: 175%;\n    color: ", ";\n    flex: 0 0 2.2rem;\n    margin-right: ", ";\n    [dir=\"rtl\"]  & {\n      margin-right: 0;\n      margin-left: ", ";\n    }\n  }\n\n  > span {\n    font-weight: 400;\n    font-size: ", ";\n    color: ", ";\n    position: relative;\n    flex-grow: 1;\n    line-height: 2;\n    text-align: left;\n    padding-left: 0;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n\n    [dir=\"rtl\"] & {\n      text-align: right;\n      padding-right: ", ";\n    }\n  }\n\n  div {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  ", "\n"])), lgPaddingY, lgPaddingY, lgPaddingY, colorGrayDark, colorOffWhite, lgPaddingY, colorGrayLight, smPaddingX, smPaddingX, fontSizeSmall, colorGrayDark, mdPaddingX, _ref => {
  let {
    active
  } = _ref;
  return active && "\n  outline: transparent;\n  outline-style: dotted;\n  outline-width: ".concat(borderSize, ";\n  background-color: ").concat(colorGrayLightest, ";\n");
});
const UnreadMessages = styled(FlexColumn)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  justify-content: center;\n  margin-left: auto;\n  [dir=\"rtl\"] & {\n    margin-right: auto;\n    margin-left: 0;\n  }\n"])));
const UnreadMessagesText = styled(FlexColumn)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  margin: 0;\n  justify-content: center;\n  color: ", ";\n  line-height: calc(1rem + 1px);\n  padding: 0 0.5rem;\n  text-align: center;\n  border-radius: 0.5rem/50%;\n  font-size: 0.8rem;\n  background-color: ", ";\n"])), colorWhite, unreadMessagesBg);
const Separator = styled.hr(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  margin: 1rem auto;\n  width: 2.2rem;\n  border: 0;\n  border-top: 1px solid ", ";\n"])), colorGrayLighter);
module.exportDefault({
  Content,
  Container,
  ScrollableList,
  List,
  ListItem,
  UnreadMessages,
  UnreadMessagesText,
  Separator
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-list-graphql":{"user-list-content":{"user-notes":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-list-content/user-notes/component.tsx                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 2);
let NotesService;
module.link("/imports/ui/components/notes/service", {
  default(v) {
    NotesService = v;
  }
}, 3);
let lockContextContainer;
module.link("/imports/ui/components/lock-viewers/context/container", {
  default(v) {
    lockContextContainer = v;
  }
}, 4);
let PANELS;
module.link("/imports/ui/components/layout/enums", {
  PANELS(v) {
    PANELS = v;
  }
}, 5);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 6);
let layoutSelectInput, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 7);
let PINNED_PAD_SUBSCRIPTION;
module.link("/imports/ui/components/notes/queries", {
  PINNED_PAD_SUBSCRIPTION(v) {
    PINNED_PAD_SUBSCRIPTION = v;
  }
}, 8);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 9);
let usePreviousValue;
module.link("/imports/ui/hooks/usePreviousValue", {
  default(v) {
    usePreviousValue = v;
  }
}, 10);
let useRev;
module.link("/imports/ui/components/pads/pads-graphql/hooks/useRev", {
  default(v) {
    useRev = v;
  }
}, 11);
let useNotesLastRev;
module.link("../../../../notes/hooks/useNotesLastRev", {
  default(v) {
    useNotesLastRev = v;
  }
}, 12);
let useHasUnreadNotes;
module.link("../../../../notes/hooks/useHasUnreadNotes", {
  default(v) {
    useHasUnreadNotes = v;
  }
}, 13);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 14);
const intlMessages = defineMessages({
  title: {
    id: 'app.userList.notesTitle',
    description: 'Title for the notes list'
  },
  pinnedNotification: {
    id: 'app.notes.pinnedNotification',
    description: 'Notification text for pinned shared notes'
  },
  sharedNotes: {
    id: 'app.notes.title',
    description: 'Title for the shared notes'
  },
  sharedNotesPinned: {
    id: 'app.notes.titlePinned',
    description: 'Title for the shared notes pinned'
  },
  unreadContent: {
    id: 'app.userList.notesListItem.unreadContent',
    description: 'Aria label for notes unread content'
  },
  locked: {
    id: 'app.notes.locked',
    description: ''
  },
  byModerator: {
    id: 'app.userList.byModerator',
    description: ''
  },
  disabled: {
    id: 'app.notes.disabled',
    description: 'Aria description for disabled notes button'
  }
});
const UserNotesGraphql = props => {
  const {
    isPinned,
    disableNotes,
    sidebarContentPanel,
    layoutContextDispatch,
    isEnabled,
    hasUnreadNotes,
    markNotesAsRead,
    toggleNotesPanel
  } = props;
  const [unread, setUnread] = useState(false);
  const [pinWasNotified, setPinWasNotified] = useState(false);
  const intl = useIntl();
  const prevSidebarContentPanel = usePreviousValue(sidebarContentPanel);
  const prevIsPinned = usePreviousValue(isPinned);
  useEffect(() => {
    setUnread(hasUnreadNotes);
  }, []);
  if (isPinned && !pinWasNotified) {
    notify(intl.formatMessage(intlMessages.pinnedNotification), 'info', 'copy', {
      pauseOnFocusLoss: false
    });
    setPinWasNotified(true);
  }
  const notesOpen = sidebarContentPanel === PANELS.SHARED_NOTES && !isPinned;
  const notesClosed = prevSidebarContentPanel === PANELS.SHARED_NOTES && sidebarContentPanel !== PANELS.SHARED_NOTES || prevIsPinned && !isPinned;
  if ((notesOpen || notesClosed) && unread) {
    markNotesAsRead();
  }
  if (!unread && hasUnreadNotes) {
    setUnread(true);
  }
  if (unread && !hasUnreadNotes) {
    setUnread(false);
  }
  if (prevIsPinned && !isPinned && pinWasNotified) {
    setPinWasNotified(false);
  }
  const renderNotes = () => {
    let notification = null;
    if (unread && !isPinned) {
      notification = /*#__PURE__*/React.createElement(Styled.UnreadMessages, {
        "aria-label": intl.formatMessage(intlMessages.unreadContent)
      }, /*#__PURE__*/React.createElement(Styled.UnreadMessagesText, {
        "aria-hidden": "true"
      }, "\xB7\xB7\xB7"));
    }
    const showTitle = isPinned ? intl.formatMessage(intlMessages.sharedNotesPinned) : intl.formatMessage(intlMessages.sharedNotes);
    return (
      /*#__PURE__*/
      // @ts-ignore
      React.createElement(Styled.ListItem, {
        "aria-label": showTitle,
        "aria-describedby": "lockedNotes",
        role: "button",
        tabIndex: 0,
        active: notesOpen,
        "data-test": "sharedNotesButton",
        onClick: () => toggleNotesPanel(sidebarContentPanel, layoutContextDispatch)
        // @ts-ignore
        ,
        onKeyDown: e => {
          if (e.key === 'Enter') {
            toggleNotesPanel(sidebarContentPanel, layoutContextDispatch);
          }
        },
        as: isPinned ? 'button' : 'div',
        disabled: isPinned,
        $disabled: isPinned
      }, /*#__PURE__*/React.createElement(Icon, {
        iconName: "copy"
      }), /*#__PURE__*/React.createElement("div", {
        "aria-hidden": true
      }, /*#__PURE__*/React.createElement(Styled.NotesTitle, {
        "data-test": "sharedNotes"
      }, showTitle), disableNotes ? /*#__PURE__*/React.createElement(Styled.NotesLock, null, /*#__PURE__*/React.createElement(Icon, {
        iconName: "lock"
      }), /*#__PURE__*/React.createElement("span", {
        id: "lockedNotes"
      }, "".concat(intl.formatMessage(intlMessages.locked), " ").concat(intl.formatMessage(intlMessages.byModerator)))) : null, isPinned ? /*#__PURE__*/React.createElement("span", {
        className: "sr-only"
      }, "".concat(intl.formatMessage(intlMessages.disabled))) : null), notification)
    );
  };
  if (!isEnabled) return null;
  return /*#__PURE__*/React.createElement(Styled.Messages, null, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.SmallTitle, {
    "data-test": "notesTitle"
  }, intl.formatMessage(intlMessages.title))), /*#__PURE__*/React.createElement(Styled.ScrollableList, null, /*#__PURE__*/React.createElement(Styled.List, null, renderNotes())));
};
const UserNotesContainerGraphql = props => {
  var _pinnedPadData$shared;
  const {
    userLocks
  } = props;
  const disableNotes = userLocks.userNotes;
  const {
    data: pinnedPadData
  } = useDeduplicatedSubscription(PINNED_PAD_SUBSCRIPTION);
  const NOTES_CONFIG = window.meetingClientSettings.public.notes;
  const isPinned = !!pinnedPadData && ((_pinnedPadData$shared = pinnedPadData.sharedNotes[0]) === null || _pinnedPadData$shared === void 0 ? void 0 : _pinnedPadData$shared.sharedNotesExtId) === NOTES_CONFIG.id;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    sidebarContentPanel
  } = sidebarContent;
  const layoutContextDispatch = layoutDispatch();
  const rev = useRev(NOTES_CONFIG.id);
  const {
    setNotesLastRev
  } = useNotesLastRev();
  const hasUnreadNotes = useHasUnreadNotes();
  const markNotesAsRead = () => setNotesLastRev(rev);
  const isEnabled = NotesService.useIsEnabled();
  return /*#__PURE__*/React.createElement(UserNotesGraphql, {
    disableNotes: disableNotes,
    isPinned: isPinned,
    layoutContextDispatch: layoutContextDispatch,
    sidebarContentPanel: sidebarContentPanel,
    hasUnreadNotes: hasUnreadNotes,
    markNotesAsRead: markNotesAsRead,
    toggleNotesPanel: NotesService.toggleNotesPanel,
    isEnabled: isEnabled
  });
};
module.exportDefault(lockContextContainer(UserNotesContainerGraphql));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-list-content/user-notes/styles.ts                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("/imports/ui/components/user-list/styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let StyledContent;
module.link("/imports/ui/components/user-list/user-list-content/styles", {
  default(v) {
    StyledContent = v;
  }
}, 2);
let colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  }
}, 3);
let fontSizeSmall, fontSizeSmaller, fontSizeXS;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  },
  fontSizeSmaller(v) {
    fontSizeSmaller = v;
  },
  fontSizeXS(v) {
    fontSizeXS = v;
  }
}, 4);
const UnreadMessages = styled(StyledContent.UnreadMessages)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const UnreadMessagesText = styled(StyledContent.UnreadMessagesText)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const ListItem = styled(StyledContent.ListItem)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  i{ left: 4px; }\n"])));
const NotesTitle = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  font-weight: 400;\n  font-size: ", ";\n"])), fontSizeSmall);
const NotesLock = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  font-weight: 200;\n  font-size: ", ";\n  color: ", ";\n\n  > i {\n    font-size: ", ";\n  }\n"])), fontSizeSmaller, colorGray, fontSizeXS);
const Messages = styled(Styled.Messages)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""])));
const Container = styled(StyledContent.Container)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([""])));
const SmallTitle = styled(Styled.SmallTitle)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([""])));
const ScrollableList = styled(StyledContent.ScrollableList)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([""])));
const List = styled(StyledContent.List)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([""])));
module.exportDefault({
  UnreadMessages,
  UnreadMessagesText,
  ListItem,
  NotesTitle,
  NotesLock,
  Messages,
  Container,
  SmallTitle,
  ScrollableList,
  List
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"user-participants-title":{"guest-panel-opener":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-participants-title/guest-panel-opener/component.tsx          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  useMeeting(v) {
    useMeeting = v;
  }
}, 2);
let GET_GUESTS_COUNT;
module.link("./queries", {
  GET_GUESTS_COUNT(v) {
    GET_GUESTS_COUNT = v;
  }
}, 3);
let layoutDispatch, layoutSelectInput;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  }
}, 4);
let ACTIONS, PANELS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 5);
let Icon;
module.link("/imports/ui/components/common/icon/icon-ts/component", {
  default(v) {
    Icon = v;
  }
}, 6);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 7);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 8);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 9);
const intlMessages = defineMessages({
  waitingUsersTitle: {
    id: 'app.userList.guest.waitingUsersTitle',
    description: 'Title for the notes list'
  },
  title: {
    id: 'app.userList.guest.waitingUsers',
    description: 'Title for the waiting users'
  }
});
const GuestPanelOpener = _ref => {
  let {
    count: pendingUsers = 0
  } = _ref;
  const layoutContextDispatch = layoutDispatch();
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    sidebarContentPanel
  } = sidebarContent;
  const intl = useIntl();
  const toggleWaitingPanel = useCallback(() => {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: sidebarContentPanel !== PANELS.WAITING_USERS
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: sidebarContentPanel === PANELS.WAITING_USERS ? PANELS.NONE : PANELS.WAITING_USERS
    });
  }, [sidebarContentPanel]);
  return /*#__PURE__*/React.createElement(Styled.Messages, null, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.SmallTitle, null, intl.formatMessage(intlMessages.waitingUsersTitle))), /*#__PURE__*/React.createElement(Styled.ScrollableList, null, /*#__PURE__*/React.createElement(Styled.List, null, /*#__PURE__*/React.createElement(Styled.ListItem, {
    role: "button",
    "data-test": "waitingUsersBtn",
    tabIndex: 0,
    onClick: toggleWaitingPanel,
    onKeyDown: e => {
      if (e.key === 'Enter') {
        toggleWaitingPanel();
      }
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    iconName: "user"
  }), /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.title)), pendingUsers > 0 && /*#__PURE__*/React.createElement(Styled.UnreadMessages, null, /*#__PURE__*/React.createElement(Styled.UnreadMessagesText, null, pendingUsers))))));
};
const GuestPanelOpenerContainer = () => {
  var _currentMeeting$users;
  const {
    data: currentMeeting
  } = useMeeting(meeting => {
    const a = {
      usersPolicies: meeting.usersPolicies
    };
    return a;
  });
  const {
    data: guestsCountData,
    loading: guestsCountLoading,
    error: guestsCountError
  } = useDeduplicatedSubscription(GET_GUESTS_COUNT);
  if (guestsCountError) {
    logger.error(guestsCountError);
    return /*#__PURE__*/React.createElement("div", null, JSON.stringify(guestsCountError));
  }
  if (guestsCountLoading || !currentMeeting) return null;
  const ALWAYS_SHOW_WAITING_ROOM = window.meetingClientSettings.public.app.alwaysShowWaitingRoomUI;
  const showWaitingRoom = ALWAYS_SHOW_WAITING_ROOM && (currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$users = currentMeeting.usersPolicies) === null || _currentMeeting$users === void 0 ? void 0 : _currentMeeting$users.guestPolicy) === 'ASK_MODERATOR' || ((guestsCountData === null || guestsCountData === void 0 ? void 0 : guestsCountData.user_guest_aggregate.aggregate.count) || 0) > 0;
  if (!showWaitingRoom) return null;
  return /*#__PURE__*/React.createElement(GuestPanelOpener, {
    count: (guestsCountData === null || guestsCountData === void 0 ? void 0 : guestsCountData.user_guest_aggregate.aggregate.count) || 0
  });
};
module.exportDefault(GuestPanelOpenerContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-participants-title/guest-panel-opener/queries.ts             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  GET_GUESTS_COUNT: () => GET_GUESTS_COUNT
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const GET_GUESTS_COUNT = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription getGuestsCount {\n    user_guest_aggregate(where: {isWaiting: {_eq: true}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n"])));
module.exportDefault({
  GET_GUESTS_COUNT
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-participants-title/guest-panel-opener/styles.ts              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smPaddingX, lgPaddingY, borderSize, mdPaddingY, mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 1);
let colorPrimary, userListBg, colorWhite, listItemBgHover, itemFocusBorder, unreadMessagesBg, colorGray, colorGrayDark, colorOffWhite, colorGrayLight;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  userListBg(v) {
    userListBg = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  listItemBgHover(v) {
    listItemBgHover = v;
  },
  itemFocusBorder(v) {
    itemFocusBorder = v;
  },
  unreadMessagesBg(v) {
    unreadMessagesBg = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  colorGrayLight(v) {
    colorGrayLight = v;
  }
}, 2);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 3);
let fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 4);
const Messages = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  flex-grow: 0;\n  display: flex;\n  flex-flow: column;\n  flex-shrink: 0;\n  max-height: 30vh;\n"])));
const Container = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  margin-bottom: ", ";\n  margin-top: ", ";\n"])), lgPaddingY, smPaddingX);
const SmallTitle = styled.h2(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  font-size: 0.85rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  padding: 0 ", ";\n  color: ", ";\n  flex: 1;\n  margin: 0;\n"])), smPaddingX, colorGray);
const ScrollableList = styled(ScrollboxVertical)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  background: linear-gradient(", " 30%, rgba(255,255,255,0)),\n    linear-gradient(rgba(255,255,255,0), ", " 70%) 0 100%,\n    /* Shadows */\n    radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.2), rgba(0,0,0,0)),\n    radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;\n\n  outline: none;\n  \n  &:hover {\n    /* Visible in Windows high-contrast themes */\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n\n  &:focus,\n  &:active {\n    border-radius: none;\n    box-shadow: inset 0 0 1px ", ";\n    outline-style: transparent;\n  }\n\n  overflow-x: hidden;\n  padding-top: 1px;\n  padding-right: 1px;\n"])), userListBg, userListBg, borderSize, colorPrimary);
const List = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  margin: 0 0 1px ", ";\n\n  [dir=\"rtl\"] & {\n    margin: 0 ", " 1px 0;\n  }\n"])), mdPaddingY, mdPaddingY);
const ListItem = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  cursor: pointer;\n\n  [dir=\"rtl\"] & {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n  }\n\n  &:first-child {\n    margin-top: 0;\n  }\n\n  &:hover {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n    background-color: ", ";\n  }\n\n  &:active,\n  &:focus {\n    outline: transparent;\n    outline-width: ", ";\n    outline-style: solid;\n    background-color: ", ";\n    box-shadow: inset 0 0 0 ", " ", ", inset 1px 0 0 1px ", ";\n  }\n\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  flex-flow: row;\n  flex-grow: 0;\n  flex-shrink: 0;\n  padding-top: ", ";\n  padding-bottom: ", ";\n  padding-left: ", ";\n  text-decoration: none;\n  width: 100%;\n  color: ", ";\n  background-color: ", ";\n\n  [dir=\"rtl\"]  & {\n    padding-right: ", ";\n    padding-left: 0;\n  }\n\n  > i {\n    display: flex;\n    font-size: 175%;\n    color: ", ";\n    flex: 0 0 2.2rem;\n    margin-right: ", ";\n    [dir=\"rtl\"]  & {\n      margin-right: 0;\n      margin-left: ", ";\n    }\n  }\n\n  > span {\n    font-weight: 400;\n    font-size: ", ";\n    color: ", ";\n    position: relative;\n    flex-grow: 1;\n    line-height: 2;\n    text-align: left;\n    padding-left: 0;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n\n    [dir=\"rtl\"] & {\n      text-align: right;\n      padding-right: ", ";\n    }\n  }\n\n  div {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  &:active {\n    background-color: ", ";\n    box-shadow: inset 0 0 0 ", " ", ", inset 1px 0 0 1px ", ";\n  }\n"])), borderSize, listItemBgHover, borderSize, listItemBgHover, borderSize, itemFocusBorder, itemFocusBorder, lgPaddingY, lgPaddingY, lgPaddingY, colorGrayDark, colorOffWhite, lgPaddingY, colorGrayLight, smPaddingX, smPaddingX, fontSizeSmall, colorGrayDark, mdPaddingX, listItemBgHover, borderSize, itemFocusBorder, itemFocusBorder);
const UnreadMessages = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  margin-left: auto;\n  [dir=\"rtl\"] & {\n    margin-right: auto;\n    margin-left: 0;\n  }\n"])));
const UnreadMessagesText = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  margin: 0;\n  justify-content: center;\n  color: ", ";\n  line-height: calc(1rem + 1px);\n  padding: 0 0.5rem;\n  text-align: center;\n  border-radius: 0.5rem/50%;\n  font-size: 0.8rem;\n  background-color: ", ";\n"])), colorWhite, unreadMessagesBg);
module.exportDefault({
  Messages,
  Container,
  SmallTitle,
  ScrollableList,
  List,
  ListItem,
  UnreadMessages,
  UnreadMessagesText
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-options-dropdown":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-participants-title/user-options-dropdown/component.tsx       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, useMemo, useRef, useState, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let LockViewersContainer;
module.link("/imports/ui/components/lock-viewers/container", {
  default(v) {
    LockViewersContainer = v;
  }
}, 1);
let GuestPolicyContainer;
module.link("/imports/ui/components/waiting-users/guest-policy/container", {
  default(v) {
    GuestPolicyContainer = v;
  }
}, 2);
let CreateBreakoutRoomContainerGraphql;
module.link("../../../../breakout-room/create-breakout-room/component", {
  default(v) {
    CreateBreakoutRoomContainerGraphql = v;
  }
}, 3);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 4);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 5);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 6);
let layoutSelect;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 7);
let uid;
module.link("radash", {
  uid(v) {
    uid = v;
  }
}, 8);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 9);
let onSaveUserNames, openLearningDashboardUrl;
module.link("./service", {
  onSaveUserNames(v) {
    onSaveUserNames = v;
  },
  openLearningDashboardUrl(v) {
    openLearningDashboardUrl = v;
  }
}, 10);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 11);
let useIsBreakoutRoomsEnabled, useIsLearningDashboardEnabled;
module.link("/imports/ui/services/features", {
  useIsBreakoutRoomsEnabled(v) {
    useIsBreakoutRoomsEnabled = v;
  },
  useIsLearningDashboardEnabled(v) {
    useIsLearningDashboardEnabled = v;
  }
}, 12);
let useMutation, useLazyQuery;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useLazyQuery(v) {
    useLazyQuery = v;
  }
}, 13);
let SET_MUTED;
module.link("./mutations", {
  SET_MUTED(v) {
    SET_MUTED = v;
  }
}, 14);
let GET_USER_NAMES;
module.link("/imports/ui/core/graphql/queries/users", {
  GET_USER_NAMES(v) {
    GET_USER_NAMES = v;
  }
}, 15);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 16);
const intlMessages = defineMessages({
  optionsLabel: {
    id: 'app.userList.userOptions.manageUsersLabel',
    description: 'Manage user label'
  },
  clearAllDesc: {
    id: 'app.userList.userOptions.clearAllDesc',
    description: 'Clear all description'
  },
  muteAllLabel: {
    id: 'app.userList.userOptions.muteAllLabel',
    description: 'Mute all label'
  },
  muteAllDesc: {
    id: 'app.userList.userOptions.muteAllDesc',
    description: 'Mute all description'
  },
  unmuteAllLabel: {
    id: 'app.userList.userOptions.unmuteAllLabel',
    description: 'Unmute all label'
  },
  unmuteAllDesc: {
    id: 'app.userList.userOptions.unmuteAllDesc',
    description: 'Unmute all desc'
  },
  lockViewersLabel: {
    id: 'app.userList.userOptions.lockViewersLabel',
    description: 'Lock viewers label'
  },
  lockViewersDesc: {
    id: 'app.userList.userOptions.lockViewersDesc',
    description: 'Lock viewers description'
  },
  guestPolicyLabel: {
    id: 'app.userList.userOptions.guestPolicyLabel',
    description: 'Guest policy label'
  },
  guestPolicyDesc: {
    id: 'app.userList.userOptions.guestPolicyDesc',
    description: 'Guest policy description'
  },
  muteAllExceptPresenterLabel: {
    id: 'app.userList.userOptions.muteAllExceptPresenterLabel',
    description: 'Mute all except presenter label'
  },
  muteAllExceptPresenterDesc: {
    id: 'app.userList.userOptions.muteAllExceptPresenterDesc',
    description: 'Mute all except presenter description'
  },
  createBreakoutRoom: {
    id: 'app.actionsBar.actionsDropdown.createBreakoutRoom',
    description: 'Create breakout room option'
  },
  createBreakoutRoomDesc: {
    id: 'app.actionsBar.actionsDropdown.createBreakoutRoomDesc',
    description: 'Description of create breakout room option'
  },
  learningDashboardLabel: {
    id: 'app.learning-dashboard.label',
    description: 'Activity Report label'
  },
  learningDashboardDesc: {
    id: 'app.learning-dashboard.description',
    description: 'Activity Report description'
  },
  saveUserNames: {
    id: 'app.actionsBar.actionsDropdown.saveUserNames',
    description: 'Save user name feature description'
  },
  newTab: {
    id: 'app.modal.newTab',
    description: 'label used in aria description'
  },
  invitationLabel: {
    id: 'app.actionsBar.actionsDropdown.breakoutRoomInvitationLabel',
    description: 'Invitation item'
  },
  invitationDesc: {
    id: 'app.actionsBar.actionsDropdown.breakoutRoomInvitationDesc',
    description: 'Invitation item description'
  }
});
const renderModal = _ref => {
  let {
    isOpen,
    setIsOpen,
    priority,
    Component,
    otherOptions
  } = _ref;
  if (isOpen) {
    return /*#__PURE__*/React.createElement(Component, _extends({
      onRequestClose: () => setIsOpen(false),
      priority: priority,
      setIsOpen: setIsOpen,
      isOpen: isOpen
      // eslint-disable-next-line react/jsx-props-no-spreading
    }, otherOptions));
  }
  return null;
};
const UserTitleOptions = _ref2 => {
  let {
    isRTL,
    isMeetingMuted = false,
    isBreakout,
    isModerator,
    hasBreakoutRooms,
    meetingName,
    learningDashboardToken
  } = _ref2;
  const intl = useIntl();
  const {
    locale
  } = intl;
  const uuids = useRef([uid(8, 'options-'), uid(8, 'options-'), uid(8, 'options-'), uid(8, 'options-'), uid(8, 'options-'), uid(8, 'options-'), uid(8, 'options-'), uid(8, 'options-'), uid(8, 'options-')]);
  const [isCreateBreakoutRoomModalOpen, setCreateBreakoutRoomModalIsOpen] = useState(false);
  const [isGuestPolicyModalOpen, setGuestPolicyModalIsOpen] = useState(false);
  const [isLockViewersModalOpen, setLockViewersModalIsOpen] = useState(false);
  const [setMuted] = useMutation(SET_MUTED);
  const [getUsers, {
    data: usersData,
    error: usersError
  }] = useLazyQuery(GET_USER_NAMES, {
    fetchPolicy: 'no-cache'
  });
  const users = (usersData === null || usersData === void 0 ? void 0 : usersData.user) || [];
  const isLearningDashboardEnabled = useIsLearningDashboardEnabled();
  const isBreakoutRoomsEnabled = useIsBreakoutRoomsEnabled();
  const canInviteUsers = isModerator && !isBreakout && hasBreakoutRooms;
  const isInvitation = hasBreakoutRooms && isModerator;
  if (usersError) {
    logger.error({
      logCode: 'user_options_get_users_error',
      extraInfo: {
        usersError
      }
    }, 'Error fetching users names');
  }
  // users will only be fetched when getUsers is called
  useEffect(() => {
    if (users.length > 0) {
      onSaveUserNames(intl, meetingName !== null && meetingName !== void 0 ? meetingName : '', users);
    }
  }, [users]);
  const toggleMute = (muted, exceptPresenter) => {
    setMuted({
      variables: {
        muted,
        exceptPresenter
      }
    });
    if (!muted) {
      return logger.info({
        logCode: 'useroptions_unmute_all',
        extraInfo: {
          logType: 'moderator_action'
        }
      }, 'moderator disabled meeting mute');
    }
    const logCode = exceptPresenter ? 'useroptions_mute_all_except_presenter' : 'useroptions_mute_all';
    const logMessage = exceptPresenter ? 'moderator enabled meeting mute, all users muted except presenter' : 'moderator enabled meeting mute, all users muted';
    return logger.info({
      logCode,
      extraInfo: {
        logType: 'moderator_action'
      }
    }, logMessage);
  };
  const {
    dynamicGuestPolicy
  } = window.meetingClientSettings.public.app;
  const actions = useMemo(() => {
    const canCreateBreakout = isModerator && !isBreakout && !hasBreakoutRooms && isBreakoutRoomsEnabled;
    return [{
      allow: !isBreakout,
      key: uuids.current[0],
      label: intl.formatMessage(intlMessages[isMeetingMuted ? 'unmuteAllLabel' : 'muteAllLabel']),
      description: intl.formatMessage(intlMessages[isMeetingMuted ? 'unmuteAllDesc' : 'muteAllDesc']),
      onClick: toggleMute.bind(null, !isMeetingMuted, false),
      icon: isMeetingMuted ? 'unmute' : 'mute',
      dataTest: 'muteAll'
    }, {
      allow: !isMeetingMuted,
      key: uuids.current[1],
      label: intl.formatMessage(intlMessages.muteAllExceptPresenterLabel),
      description: intl.formatMessage(intlMessages.muteAllExceptPresenterDesc),
      onClick: toggleMute.bind(null, isMeetingMuted, true),
      icon: 'mute',
      dataTest: 'muteAllExceptPresenter'
    }, {
      allow: true,
      key: uuids.current[2],
      label: intl.formatMessage(intlMessages.lockViewersLabel),
      description: intl.formatMessage(intlMessages.lockViewersDesc),
      onClick: () => setLockViewersModalIsOpen(true),
      icon: 'lock',
      dataTest: 'lockViewersButton'
    }, {
      allow: dynamicGuestPolicy,
      key: uuids.current[3],
      icon: 'user',
      label: intl.formatMessage(intlMessages.guestPolicyLabel),
      description: intl.formatMessage(intlMessages.guestPolicyDesc),
      onClick: () => setGuestPolicyModalIsOpen(true),
      dataTest: 'guestPolicyLabel'
    }, {
      allow: isModerator,
      key: uuids.current[4],
      label: intl.formatMessage(intlMessages.saveUserNames),
      onClick: () => getUsers(),
      icon: 'download',
      dataTest: 'downloadUserNamesList'
    }, {
      key: 'separator-01',
      isSeparator: true,
      allow: true
    }, {
      allow: canCreateBreakout,
      key: uuids.current[6],
      icon: 'rooms',
      label: intl.formatMessage(intlMessages.createBreakoutRoom),
      description: intl.formatMessage(intlMessages.createBreakoutRoomDesc),
      onClick: () => setCreateBreakoutRoomModalIsOpen(true),
      dataTest: 'createBreakoutRooms'
    }, {
      allow: canInviteUsers,
      key: uuids.current[7],
      icon: 'rooms',
      label: intl.formatMessage(intlMessages.invitationLabel),
      description: intl.formatMessage(intlMessages.invitationDesc),
      onClick: () => setCreateBreakoutRoomModalIsOpen(true),
      dataTest: 'inviteUsers'
    }, {
      key: 'separator-02',
      isSeparator: true,
      allow: canCreateBreakout
    }, {
      allow: isLearningDashboardEnabled,
      icon: 'multi_whiteboard',
      iconRight: 'popout_window',
      label: intl.formatMessage(intlMessages.learningDashboardLabel),
      description: "".concat(intl.formatMessage(intlMessages.learningDashboardDesc), "\n        ").concat(intl.formatMessage(intlMessages.newTab)),
      key: uuids.current[8],
      onClick: () => {
        openLearningDashboardUrl(locale, learningDashboardToken);
      },
      dividerTop: true,
      dataTest: 'learningDashboard'
    }].filter(_ref3 => {
      let {
        allow
      } = _ref3;
      return allow;
    });
  }, [isModerator, hasBreakoutRooms, isMeetingMuted, locale, intl, isBreakoutRoomsEnabled, isLearningDashboardEnabled]);
  const newLocal = 'true';
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BBBMenu, {
    trigger: /*#__PURE__*/React.createElement(Styled.OptionsButton, {
      label: intl.formatMessage(intlMessages.optionsLabel),
      "data-test": "manageUsers",
      icon: "settings",
      color: "light",
      hideLabel: true,
      size: "md",
      circle: true,
      onClick: () => null
    }),
    actions: actions,
    opts: {
      id: 'user-options-dropdown-menu',
      keepMounted: true,
      transitionDuration: 0,
      elevation: 3,
      getcontentanchorel: null,
      fullwidth: newLocal,
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: isRTL ? 'right' : 'left'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: isRTL ? 'right' : 'left'
      }
    }
  }), renderModal({
    isOpen: isCreateBreakoutRoomModalOpen,
    setIsOpen: setCreateBreakoutRoomModalIsOpen,
    priority: 'medium',
    Component: CreateBreakoutRoomContainerGraphql,
    otherOptions: {
      isUpdate: isInvitation
    }
  }), renderModal({
    isOpen: isGuestPolicyModalOpen,
    setIsOpen: setGuestPolicyModalIsOpen,
    priority: 'low',
    Component: GuestPolicyContainer,
    otherOptions: {}
  }), renderModal({
    isOpen: isLockViewersModalOpen,
    setIsOpen: setLockViewersModalIsOpen,
    priority: 'low',
    Component: LockViewersContainer,
    otherOptions: {}
  }));
};
const UserTitleOptionsContainer = () => {
  var _currentUser$isModera, _meetingInfo$componen, _meetingInfo$componen2, _meetingInfo$voiceSet, _currentUser$isModera2;
  const isRTL = layoutSelect(i => i.isRTL);
  const {
    data: meetingInfo
  } = useMeeting(meeting => ({
    voiceSettings: meeting === null || meeting === void 0 ? void 0 : meeting.voiceSettings,
    isBreakout: meeting === null || meeting === void 0 ? void 0 : meeting.isBreakout,
    componentsFlags: meeting === null || meeting === void 0 ? void 0 : meeting.componentsFlags,
    name: meeting === null || meeting === void 0 ? void 0 : meeting.name,
    learningDashboardAccessToken: meeting.learningDashboardAccessToken
  }));
  const {
    data: currentUser
  } = useCurrentUser(user => ({
    userId: user === null || user === void 0 ? void 0 : user.userId,
    isModerator: user === null || user === void 0 ? void 0 : user.isModerator
  }));
  // in case of current user isn't load yet
  if ((_currentUser$isModera = !(currentUser !== null && currentUser !== void 0 && currentUser.isModerator)) !== null && _currentUser$isModera !== void 0 ? _currentUser$isModera : true) return null;
  const hasBreakoutRooms = (_meetingInfo$componen = meetingInfo === null || meetingInfo === void 0 ? void 0 : (_meetingInfo$componen2 = meetingInfo.componentsFlags) === null || _meetingInfo$componen2 === void 0 ? void 0 : _meetingInfo$componen2.hasBreakoutRoom) !== null && _meetingInfo$componen !== void 0 ? _meetingInfo$componen : false;
  return /*#__PURE__*/React.createElement(UserTitleOptions, {
    isRTL: isRTL,
    isMeetingMuted: meetingInfo === null || meetingInfo === void 0 ? void 0 : (_meetingInfo$voiceSet = meetingInfo.voiceSettings) === null || _meetingInfo$voiceSet === void 0 ? void 0 : _meetingInfo$voiceSet.muteOnStart,
    isBreakout: meetingInfo === null || meetingInfo === void 0 ? void 0 : meetingInfo.isBreakout,
    isModerator: (_currentUser$isModera2 = currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator) !== null && _currentUser$isModera2 !== void 0 ? _currentUser$isModera2 : false,
    hasBreakoutRooms: hasBreakoutRooms,
    meetingName: meetingInfo === null || meetingInfo === void 0 ? void 0 : meetingInfo.name,
    learningDashboardToken: meetingInfo === null || meetingInfo === void 0 ? void 0 : meetingInfo.learningDashboardAccessToken
  });
};
module.exportDefault(UserTitleOptionsContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-participants-title/user-options-dropdown/mutations.tsx       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  SET_MUTED: () => SET_MUTED
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const SET_MUTED = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation SetMuted($muted: Boolean!, $exceptPresenter: Boolean!) {\n    meetingSetMuted(\n      muted: $muted,\n      exceptPresenter: $exceptPresenter,\n    )\n  }\n"])));
module.exportDefault({
  SET_MUTED
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-participants-title/user-options-dropdown/service.ts          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  onSaveUserNames: () => onSaveUserNames,
  openLearningDashboardUrl: () => openLearningDashboardUrl
});
let getUserNamesLink;
module.link("/imports/ui/components/user-list/service", {
  getUserNamesLink(v) {
    getUserNamesLink = v;
  }
}, 0);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 1);
let LearningDashboardService;
module.link("/imports/ui/components/learning-dashboard/service", {
  default(v) {
    LearningDashboardService = v;
  }
}, 2);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 3);
const intlMessages = defineMessages({
  savedNamesListTitle: {
    id: 'app.userList.userOptions.savedNames.title',
    description: ''
  },
  sortedFirstNameHeading: {
    id: 'app.userList.userOptions.sortedFirstName.heading',
    description: ''
  },
  sortedLastNameHeading: {
    id: 'app.userList.userOptions.sortedLastName.heading',
    description: ''
  }
});
const onSaveUserNames = (intl, meetingName, users) => {
  const Settings = getSettingsSingletonInstance();
  // @ts-ignore - temporary while settings are still in .js
  const lang = Settings.application.locale;
  const date = new Date();
  const dateString = lang ? date.toLocaleDateString(lang) : date.toLocaleDateString();
  const timeString = lang ? date.toLocaleTimeString(lang) : date.toLocaleTimeString();
  getUserNamesLink(intl.formatMessage(intlMessages.savedNamesListTitle, {
    0: meetingName,
    1: "".concat(dateString, ":").concat(timeString)
  }), intl.formatMessage(intlMessages.sortedFirstNameHeading), intl.formatMessage(intlMessages.sortedLastNameHeading), users, meetingName).dispatchEvent(new MouseEvent('click', {
    bubbles: true,
    cancelable: true,
    view: window
  }));
};
const openLearningDashboardUrl = (lang, token) => LearningDashboardService.openLearningDashboardUrl(lang, token);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-participants-title/user-options-dropdown/styles.ts           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 2);
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore - as button comes from JS, we can't provide its props
const OptionsButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  border-radius: 50%;\n  display: block;\n  padding: 0;\n  margin: 0 0.25rem;\n\n  span {\n    padding: inherit;\n  }\n\n  i {\n    font-size: ", " !important;\n  }\n"])), fontSizeBase);
module.exportDefault({
  OptionsButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-participants-title/component.tsx                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let USER_AGGREGATE_COUNT_SUBSCRIPTION;
module.link("/imports/ui/core/graphql/queries/users", {
  USER_AGGREGATE_COUNT_SUBSCRIPTION(v) {
    USER_AGGREGATE_COUNT_SUBSCRIPTION = v;
  }
}, 2);
let UserTitleOptionsContainer;
module.link("./user-options-dropdown/component", {
  default(v) {
    UserTitleOptionsContainer = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 5);
let USER_WITH_AUDIO_AGGREGATE_COUNT_SUBSCRIPTION;
module.link("./queries", {
  USER_WITH_AUDIO_AGGREGATE_COUNT_SUBSCRIPTION(v) {
    USER_WITH_AUDIO_AGGREGATE_COUNT_SUBSCRIPTION = v;
  }
}, 6);
const messages = defineMessages({
  usersTitle: {
    id: 'app.userList.usersTitle',
    description: 'Title for the Header'
  }
});
const UserTitle = _ref => {
  let {
    count,
    countWithAudio
  } = _ref;
  const intl = useIntl();
  return /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.SmallTitle, null, intl.formatMessage(messages.usersTitle), /*#__PURE__*/React.createElement("span", {
    "data-test-users-count": count,
    "data-test-users-with-audio-count": countWithAudio
  }, " (".concat(count.toLocaleString('en-US', {
    notation: 'standard'
  }), ")"))), /*#__PURE__*/React.createElement(UserTitleOptionsContainer, null));
};
const UserTitleContainer = () => {
  var _countData$user_aggre, _countData$user_aggre2, _audioUsersCountData$, _audioUsersCountData$2;
  const {
    data: countData
  } = useDeduplicatedSubscription(USER_AGGREGATE_COUNT_SUBSCRIPTION);
  const {
    data: audioUsersCountData
  } = useDeduplicatedSubscription(USER_WITH_AUDIO_AGGREGATE_COUNT_SUBSCRIPTION);
  const count = (countData === null || countData === void 0 ? void 0 : (_countData$user_aggre = countData.user_aggregate) === null || _countData$user_aggre === void 0 ? void 0 : (_countData$user_aggre2 = _countData$user_aggre.aggregate) === null || _countData$user_aggre2 === void 0 ? void 0 : _countData$user_aggre2.count) || 0;
  const countWithAudio = (audioUsersCountData === null || audioUsersCountData === void 0 ? void 0 : (_audioUsersCountData$ = audioUsersCountData.user_aggregate) === null || _audioUsersCountData$ === void 0 ? void 0 : (_audioUsersCountData$2 = _audioUsersCountData$.aggregate) === null || _audioUsersCountData$2 === void 0 ? void 0 : _audioUsersCountData$2.count) || 0;
  return /*#__PURE__*/React.createElement(UserTitle, {
    count: count,
    countWithAudio: countWithAudio
  });
};
module.exportDefault(UserTitleContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-participants-title/queries.ts                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  USER_WITH_AUDIO_AGGREGATE_COUNT_SUBSCRIPTION: () => USER_WITH_AUDIO_AGGREGATE_COUNT_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const USER_WITH_AUDIO_AGGREGATE_COUNT_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription UsersWithAudioCount {\n    user_aggregate(where: {voice: {joined: {_eq: true}}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n"])));
module.exportDefault({
  USER_WITH_AUDIO_AGGREGATE_COUNT_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/user-list-graphql/user-participants-title/styles.ts                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  Container: () => Container,
  SmallTitle: () => SmallTitle
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smPaddingX, lgPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  }
}, 1);
let colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  }
}, 2);
const Container = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  margin-bottom: ", ";\n  margin-top: ", ";\n"])), lgPaddingY, smPaddingX);
const SmallTitle = styled.h2(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  font-size: 0.85rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  padding: 0 ", ";\n  color: ", ";\n  flex: 1;\n  margin: 0;\n"])), smPaddingX, colorGray);
module.exportDefault({
  Container,
  SmallTitle
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"custom-logo":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/custom-logo/component.jsx                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const CustomLogo = props => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.Branding, {
  "data-test": "brandingArea"
}, /*#__PURE__*/React.createElement("img", {
  src: props.CustomLogoUrl,
  alt: "custom branding logo"
})), /*#__PURE__*/React.createElement(Styled.Separator, null));
module.exportDefault(CustomLogo);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/custom-logo/styles.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGrayLighter;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayLighter(v) {
    colorGrayLighter = v;
  }
}, 1);
let lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 2);
let smPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  }
}, 3);
const Separator = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: 1px;\n  background-color: ", ";\n  margin-bottom: calc(", " * .5);\n"])), colorGrayLighter, lineHeightComputed);
const Branding = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding: ", ";\n  width: 100%;\n  & > img {\n    max-height: 3rem;\n    max-width: 100%;\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n  }\n"])), smPaddingX);
module.exportDefault({
  Separator,
  Branding
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/component.jsx                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let injectWbResizeEvent;
module.link("/imports/ui/components/presentation/resize-wrapper/component", {
  default(v) {
    injectWbResizeEvent = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let CustomLogo;
module.link("./custom-logo/component", {
  default(v) {
    CustomLogo = v;
  }
}, 4);
let UserContentContainer;
module.link("./user-list-content/container", {
  default(v) {
    UserContentContainer = v;
  }
}, 5);
const propTypes = {
  compact: PropTypes.bool,
  CustomLogoUrl: PropTypes.string,
  showBranding: PropTypes.bool.isRequired
};
const defaultProps = {
  compact: false,
  CustomLogoUrl: null
};
class UserList extends PureComponent {
  render() {
    const {
      compact,
      CustomLogoUrl,
      showBranding
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.UserList, null, showBranding && !compact && CustomLogoUrl ? /*#__PURE__*/React.createElement(CustomLogo, {
      CustomLogoUrl: CustomLogoUrl
    }) : null, /*#__PURE__*/React.createElement(UserContentContainer, {
      compact: compact
    }));
  }
}
UserList.propTypes = propTypes;
UserList.defaultProps = defaultProps;
module.exportDefault(injectWbResizeEvent(UserList));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/container.jsx                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 1);
let UserList;
module.link("./component", {
  default(v) {
    UserList = v;
  }
}, 2);
let useStorageKey;
module.link("../../services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 3);
const UserListContainer = props => {
  const CustomLogoUrl = useStorageKey('CustomLogoUrl', 'session');
  return /*#__PURE__*/React.createElement(UserList, _extends({
    CustomLogoUrl: CustomLogoUrl
  }, props, {
    showBranding: getFromUserSettings('bbb_display_branding_area', window.meetingClientSettings.public.app.branding.displayBrandingArea)
  }));
};
module.exportDefault(UserListContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/service.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _this = this;
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  setCustomLogoUrl: () => setCustomLogoUrl,
  setModeratorOnlyMessage: () => setModeratorOnlyMessage,
  getUserNamesLink: () => getUserNamesLink
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 1);
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 2);
let KEY_CODES;
module.link("/imports/utils/keyCodes", {
  default(v) {
    KEY_CODES = v;
  }
}, 3);
let AudioService;
module.link("/imports/ui/components/audio/service", {
  default(v) {
    AudioService = v;
  }
}, 4);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 5);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 6);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 7);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 8);
let FormattedMessage;
module.link("react-intl", {
  FormattedMessage(v) {
    FormattedMessage = v;
  }
}, 9);
let getDateString;
module.link("/imports/utils/string-utils", {
  getDateString(v) {
    getDateString = v;
  }
}, 10);
let isEmpty;
module.link("radash", {
  isEmpty(v) {
    isEmpty = v;
  }
}, 11);
const DIAL_IN_CLIENT_TYPE = 'dial-in-user';

// session for closed chat list
const CLOSED_CHAT_LIST_KEY = 'closedChatList';
// session for chats the current user started
const STARTED_CHAT_LIST_KEY = 'startedChatList';
const CUSTOM_LOGO_URL_KEY = 'CustomLogoUrl';
const setCustomLogoUrl = path => Storage.setItem(CUSTOM_LOGO_URL_KEY, path);
const setModeratorOnlyMessage = msg => Storage.setItem('ModeratorOnlyMessage', msg);
const getCustomLogoUrl = () => Storage.getItem(CUSTOM_LOGO_URL_KEY);
const sortByWhiteboardAccess = (a, b) => {
  const _a = a.whiteboardAccess;
  const _b = b.whiteboardAccess;
  if (!_b && _a) return -1;
  if (!_a && _b) return 1;
  return 0;
};
const sortUsersByUserId = (a, b) => {
  if (a.userId > b.userId) {
    return -1;
  }
  if (a.userId < b.userId) {
    return 1;
  }
  return 0;
};
const sortUsersByName = (a, b) => {
  const aName = a.sortName || a.nameSortable || '';
  const bName = b.sortName || b.nameSortable || '';

  // Extending for sorting strings with non-ASCII characters
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#sorting_non-ascii_characters
  return aName.localeCompare(bName);
};
const sortByPropTime = (propName, propTimeName, nullValue, a, b) => {
  const aObjTime = a[propName] && a[propName] !== nullValue && a[propTimeName] ? a[propTimeName] : Number.MAX_SAFE_INTEGER;
  const bObjTime = b[propName] && b[propName] !== nullValue && b[propTimeName] ? b[propTimeName] : Number.MAX_SAFE_INTEGER;
  if (aObjTime < bObjTime) {
    return -1;
  }
  if (aObjTime > bObjTime) {
    return 1;
  }
  return 0;
};
const sortUsersByAway = (a, b) => sortByPropTime('away', 'awayTime', false, a, b);
const sortUsersByRaiseHand = (a, b) => sortByPropTime('raiseHand', 'raiseHandTime', false, a, b);
const sortUsersByReaction = (a, b) => sortByPropTime('reaction', 'reactionTime', 'none', a, b);
const sortUsersByModerator = (a, b) => {
  const ROLE_MODERATOR = window.meetingClientSettings.public.user.role_moderator;
  if (a.role === ROLE_MODERATOR && b.role === ROLE_MODERATOR) {
    return 0;
  }
  if (a.role === ROLE_MODERATOR) {
    return -1;
  }
  if (b.role === ROLE_MODERATOR) {
    return 1;
  }
  return 0;
};
const sortUsersByPhoneUser = (a, b) => {
  if (!a.clientType === DIAL_IN_CLIENT_TYPE && !b.clientType === DIAL_IN_CLIENT_TYPE) {
    return 0;
  }
  if (!a.clientType === DIAL_IN_CLIENT_TYPE) {
    return -1;
  }
  if (!b.clientType === DIAL_IN_CLIENT_TYPE) {
    return 1;
  }
  return 0;
};

// current user's name is always on top
const sortUsersByCurrent = (a, b) => {
  if (a.userId === Auth.userID) {
    return -1;
  }
  if (b.userId === Auth.userID) {
    return 1;
  }
  return 0;
};
const sortUsers = (a, b) => {
  let sort = sortUsersByCurrent(a, b);
  if (sort === 0) sort = sortUsersByModerator(a, b);
  if (sort === 0) sort = sortUsersByRaiseHand(a, b);
  if (sort === 0) sort = sortUsersByAway(a, b);
  if (sort === 0) sort = sortUsersByReaction(a, b);
  if (sort === 0) sort = sortUsersByPhoneUser(a, b);
  if (sort === 0) sort = sortByWhiteboardAccess(a, b);
  if (sort === 0) sort = sortUsersByName(a, b);
  if (sort === 0) sort = sortUsersByUserId(a, b);
  return sort;
};
const isPublicChat = chat => {
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  return chat.userId === CHAT_CONFIG.public_id;
};
const getActiveChats = _ref => {
  let {
    groupChatsMessages,
    groupChats,
    users
  } = _ref;
  const PUBLIC_GROUP_CHAT_ID = window.meetingClientSettings.public.chat.public_group_id;
  const PUBLIC_CHAT_ID = window.meetingClientSettings.public.chat.public_id;
  if (isEmpty(groupChats) && isEmpty(users)) return [];
  const chatIds = Object.keys(groupChats);
  const lastTimeWindows = chatIds.reduce((acc, chatId) => {
    const chat = groupChatsMessages[chatId];
    const lastTimewindowKey = chat === null || chat === void 0 ? void 0 : chat.lastTimewindow;
    const lastTimeWindow = lastTimewindowKey === null || lastTimewindowKey === void 0 ? void 0 : lastTimewindowKey.split('-')[1];
    return _objectSpread(_objectSpread({}, acc), {}, {
      chatId: lastTimeWindow
    });
  }, {});
  chatIds.sort((a, b) => {
    if (a === PUBLIC_GROUP_CHAT_ID) {
      return -1;
    }
    if (lastTimeWindows[a] === lastTimeWindows[b]) {
      return 0;
    }
    return 1;
  });
  const chatInfo = chatIds.map(chatId => {
    const contextChat = groupChatsMessages[chatId];
    const isPublicChatId = chatId === PUBLIC_GROUP_CHAT_ID;
    let unreadMessagesCount = 0;
    if (contextChat) {
      const unreadTimewindows = contextChat.unreadTimeWindows;
      // eslint-disable-next-line
      for (const unreadTimeWindowId of unreadTimewindows) {
        const timeWindow = isPublicChatId ? (contextChat === null || contextChat === void 0 ? void 0 : contextChat.preJoinMessages[unreadTimeWindowId]) || (contextChat === null || contextChat === void 0 ? void 0 : contextChat.posJoinMessages[unreadTimeWindowId]) : contextChat === null || contextChat === void 0 ? void 0 : contextChat.messageGroups[unreadTimeWindowId];
        unreadMessagesCount += timeWindow.content.length;
      }
    }
    if (chatId !== PUBLIC_GROUP_CHAT_ID) {
      const groupChatsParticipants = groupChats[chatId].participants;
      const otherParticipant = groupChatsParticipants.filter(user => user.id !== Auth.userID)[0];
      const user = users[otherParticipant.id];
      const startedChats = Session.getItem(STARTED_CHAT_LIST_KEY) || [];
      const ROLE_MODERATOR = window.meetingClientSettings.public.user.role_moderator;
      return {
        color: (user === null || user === void 0 ? void 0 : user.color) || '#7b1fa2',
        isModerator: (user === null || user === void 0 ? void 0 : user.role) === ROLE_MODERATOR,
        name: (user === null || user === void 0 ? void 0 : user.name) || otherParticipant.name,
        avatar: user === null || user === void 0 ? void 0 : user.avatar,
        chatId,
        unreadCounter: unreadMessagesCount,
        userId: (user === null || user === void 0 ? void 0 : user.userId) || otherParticipant.id,
        shouldDisplayInChatList: groupChats[chatId].createdBy === Auth.userID || startedChats.includes(chatId) || !!contextChat
      };
    }
    return {
      userId: PUBLIC_CHAT_ID,
      name: 'Public Chat',
      icon: 'group_chat',
      chatId: PUBLIC_CHAT_ID,
      unreadCounter: unreadMessagesCount,
      shouldDisplayInChatList: true
    };
  });
  const currentClosedChats = Storage.getItem(CLOSED_CHAT_LIST_KEY) || [];
  const removeClosedChats = chatInfo.filter(chat => {
    return !currentClosedChats.some(closedChat => closedChat.chatId === chat.chatId) && chat.shouldDisplayInChatList;
  });
  const sortByChatIdAndUnread = removeClosedChats.sort((a, b) => {
    if (a.chatId === PUBLIC_GROUP_CHAT_ID) {
      return -1;
    }
    if (b.chatId === PUBLIC_CHAT_ID) {
      return 0;
    }
    if (a.unreadCounter > b.unreadCounter) {
      return -1;
    } else if (b.unreadCounter > a.unreadCounter) {
      return 1;
    } else {
      if (a.name.toLowerCase() < b.name.toLowerCase()) {
        return -1;
      }
      if (a.name.toLowerCase() > b.name.toLowerCase()) {
        return 1;
      }
      return 0;
    }
  });
  return sortByChatIdAndUnread;
};
const isMeetingLocked = (lockSettings, usersPolicies) => {
  let isLocked = false;
  if (lockSettings !== undefined) {
    if (lockSettings.disableCam || lockSettings.disableMic || lockSettings.disablePrivateChat || lockSettings.disablePublicChat || lockSettings.disableNotes || lockSettings.hideUserList || lockSettings.hideViewersCursor || lockSettings.hideViewersAnnotation || usersPolicies.webcamsOnlyForModerator) {
      isLocked = true;
    }
  }
  return isLocked;
};
const toggleVoice = (userId, voiceToggle) => {
  if (userId === Auth.userID) {
    AudioService.toggleMuteMicrophone(voiceToggle);
  } else {
    voiceToggle(userId);
    logger.info({
      logCode: 'usermenu_option_mute_toggle_audio',
      extraInfo: {
        logType: 'moderator_action',
        userId
      }
    }, 'moderator muted user microphone');
  }
};
const focusFirstDropDownItem = () => {
  const dropdownContent = document.querySelector('div[data-test="dropdownContent"][style="visibility: visible;"]');
  if (!dropdownContent) return;
  const list = dropdownContent.getElementsByTagName('li');
  list[0].focus();
};
const roving = function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  const [event, changeState, elementsList, element] = args;
  _this.selectedElement = element;
  const numberOfChilds = elementsList.childElementCount;
  const menuOpen = Session.getItem('dropdownOpen') || false;
  if (menuOpen) {
    const menuChildren = document.activeElement.getElementsByTagName('li');
    if ([KEY_CODES.ESCAPE, KEY_CODES.ARROW_LEFT].includes(event.keyCode)) {
      Session.setItem('dropdownOpen', false);
      document.activeElement.click();
    }
    if ([KEY_CODES.ARROW_UP].includes(event.keyCode)) {
      menuChildren[menuChildren.length - 1].focus();
    }
    if ([KEY_CODES.ARROW_DOWN].includes(event.keyCode)) {
      for (let i = 0; i < menuChildren.length; i += 1) {
        if (menuChildren[i].hasAttribute('tabIndex')) {
          menuChildren[i].focus();
          break;
        }
      }
    }
    return;
  }
  if ([KEY_CODES.ESCAPE, KEY_CODES.TAB].includes(event.keyCode)) {
    Session.setItem('dropdownOpen', false);
    changeState(null);
  }
  if (event.keyCode === KEY_CODES.ARROW_DOWN) {
    const firstElement = elementsList.firstChild;
    let elRef = element && numberOfChilds > 1 ? element.nextSibling : firstElement;
    elRef = elRef || firstElement;
    changeState(elRef);
  }
  if (event.keyCode === KEY_CODES.ARROW_UP) {
    const lastElement = elementsList.lastChild;
    let elRef = element ? element.previousSibling : lastElement;
    elRef = elRef || lastElement;
    changeState(elRef);
  }
  if ([KEY_CODES.ARROW_RIGHT, KEY_CODES.SPACE, KEY_CODES.ENTER].includes(event.keyCode)) {
    const tether = document.activeElement.firstChild;
    const dropdownTrigger = tether.firstChild;
    dropdownTrigger === null || dropdownTrigger === void 0 ? void 0 : dropdownTrigger.click();
    focusFirstDropDownItem();
  }
};
const sortUsersByFirstName = (a, b) => {
  const aUser = {
    sortName: a.firstName ? a.firstName : ''
  };
  const bUser = {
    sortName: b.firstName ? b.firstName : ''
  };
  return sortUsersByName(aUser, bUser);
};
const sortUsersByLastName = (a, b) => {
  const aUser = {
    sortName: a.lastName ? a.lastName : ''
  };
  const bUser = {
    sortName: b.lastName ? b.lastName : ''
  };
  return sortUsersByName(aUser, bUser);
};
const getUserNamesLink = (docTitle, fnSortedLabel, lnSortedLabel, users, meetingName) => {
  const mimeType = 'text/plain';
  const userNamesObj = users.map(u => {
    const name = u.name.split(' ');
    return {
      firstName: name[0],
      middleNames: name.length > 2 ? name.slice(1, name.length - 1) : null,
      lastName: name.length > 1 ? name[name.length - 1] : null
    };
  });
  const getUsernameString = user => {
    const {
      firstName,
      middleNames,
      lastName
    } = user;
    return "".concat(firstName || '', " ").concat(middleNames && middleNames.length > 0 ? middleNames.join(' ') : '', " ").concat(lastName || '');
  };
  const namesByFirstName = userNamesObj.sort(sortUsersByFirstName).map(u => getUsernameString(u)).join('\r\n');
  const namesByLastName = userNamesObj.sort(sortUsersByLastName).map(u => getUsernameString(u)).join('\r\n');
  const namesListsString = "".concat(docTitle, "\r\n\r\n").concat(fnSortedLabel, "\r\n").concat(namesByFirstName, "\n    \r\n\r\n").concat(lnSortedLabel, "\r\n").concat(namesByLastName).replace(/ {2}/g, ' ');
  const link = document.createElement('a');
  link.setAttribute('download', "bbb-".concat(meetingName, "[users-list]_").concat(getDateString(), ".txt"));
  link.setAttribute('href', "data: ".concat(mimeType, ";charset=utf-16,").concat(encodeURIComponent(namesListsString)));
  return link;
};
const UserJoinedMeetingAlert = obj => {
  const Settings = getSettingsSingletonInstance();
  const {
    userJoinAudioAlerts,
    userJoinPushAlerts
  } = Settings.application;
  if (!userJoinAudioAlerts && !userJoinPushAlerts) return;
  if (userJoinAudioAlerts) {
    AudioService.playAlertSound("".concat(window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId) + '/resources/sounds/userJoin.mp3');
  }
  if (userJoinPushAlerts) {
    notify(
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-filename-extension
    React.createElement(FormattedMessage, {
      id: obj.messageId,
      values: obj.messageValues,
      description: obj.messageDescription
    }), obj.notificationType, obj.icon);
  }
};
const UserLeftMeetingAlert = obj => {
  const Settings = getSettingsSingletonInstance();
  const {
    userLeaveAudioAlerts,
    userLeavePushAlerts
  } = Settings.application;
  if (!userLeaveAudioAlerts && !userLeavePushAlerts) return;
  if (userLeaveAudioAlerts) {
    AudioService.playAlertSound("".concat(window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId) + '/resources/sounds/notify.mp3');
  }
  if (userLeavePushAlerts) {
    notify( /*#__PURE__*/React.createElement(FormattedMessage, {
      id: obj.messageId,
      values: obj.messageValues,
      description: obj.messageDescription
    }), obj.notificationType, obj.icon);
  }
};
module.exportDefault({
  sortUsersByName,
  sortUsers,
  toggleVoice,
  getActiveChats,
  isMeetingLocked,
  isPublicChat,
  roving,
  getCustomLogoUrl,
  focusFirstDropDownItem,
  sortUsersByCurrent,
  UserJoinedMeetingAlert,
  UserLeftMeetingAlert
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-list/styles.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let FlexColumn;
module.link("/imports/ui/stylesheets/styled-components/placeholders", {
  FlexColumn(v) {
    FlexColumn = v;
  }
}, 1);
let userListBg, userListText, colorGray, listItemBgHover, itemFocusBorder;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  userListBg(v) {
    userListBg = v;
  },
  userListText(v) {
    userListText = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  listItemBgHover(v) {
    listItemBgHover = v;
  },
  itemFocusBorder(v) {
    itemFocusBorder = v;
  }
}, 2);
let smPaddingX, borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  borderSize(v) {
    borderSize = v;
  }
}, 3);
const UserList = styled(FlexColumn)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  justify-content: flex-start;\n  background-color: ", ";\n  color: ", ";\n  height: 100%;\n"])), userListBg, userListText);
const SmallTitle = styled.h2(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  font-size: 0.85rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  padding: 0 ", ";\n  color: ", ";\n  flex: 1;\n  margin: 0;\n"])), smPaddingX, colorGray);
const Messages = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  flex-grow: 0;\n  display: flex;\n  flex-flow: column;\n  flex-shrink: 0;\n  max-height: 30vh;\n"])));
const ListItem = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  border-top-left-radius: 5px;\n  border-bottom-left-radius: 5px;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  cursor: pointer;\n\n  [dir=\"rtl\"] & {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    border-top-right-radius: 5px;\n    border-bottom-right-radius: 5px;\n  }\n\n  &:first-child {\n    margin-top: 0;\n  }\n\n  &:hover {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n    background-color: ", ";\n  }\n\n  &:active,\n  &:focus {\n    outline: transparent;\n    outline-width: ", ";\n    outline-style: solid;\n    background-color: ", ";\n    box-shadow: inset 0 0 0 ", " ", ", inset 1px 0 0 1px ", ";\n  }\n"])), borderSize, listItemBgHover, borderSize, listItemBgHover, borderSize, itemFocusBorder, itemFocusBorder);
module.exportDefault({
  UserList,
  SmallTitle,
  ListItem,
  Messages
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"audio":{"audio-graphql":{"audio-controls":{"input-stream-live-selector":{"buttons":{"LiveSelection.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/buttons/LiveSelection.tsx       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  LiveSelection: () => LiveSelection
});
let React, useCallback, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let useShortcut;
module.link("/imports/ui/core/hooks/useShortcut", {
  useShortcut(v) {
    useShortcut = v;
  }
}, 3);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 4);
let AudioSettingsDropdownItemType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/audio-settings-dropdown-item/enums", {
  AudioSettingsDropdownItemType(v) {
    AudioSettingsDropdownItemType = v;
  }
}, 5);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 6);
let handleLeaveAudio, liveChangeInputDevice, liveChangeOutputDevice, notify, truncateDeviceName;
module.link("../service", {
  handleLeaveAudio(v) {
    handleLeaveAudio = v;
  },
  liveChangeInputDevice(v) {
    liveChangeInputDevice = v;
  },
  liveChangeOutputDevice(v) {
    liveChangeOutputDevice = v;
  },
  notify(v) {
    notify = v;
  },
  truncateDeviceName(v) {
    truncateDeviceName = v;
  }
}, 7);
let MuteToggle;
module.link("./muteToggle", {
  default(v) {
    MuteToggle = v;
  }
}, 8);
let ListenOnly;
module.link("./listenOnly", {
  default(v) {
    ListenOnly = v;
  }
}, 9);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 10);
const AUDIO_INPUT = 'audioinput';
const AUDIO_OUTPUT = 'audiooutput';
const SET_SINK_ID_SUPPORTED = ('setSinkId' in HTMLMediaElement.prototype);
const intlMessages = defineMessages({
  defaultOutputDeviceLabel: {
    id: 'app.audio.audioSettings.defaultOutputDeviceLabel',
    description: 'Default output device label'
  },
  loading: {
    id: 'app.audio.loading',
    description: 'Loading audio dropdown item label'
  },
  noDeviceFound: {
    id: 'app.audio.noDeviceFound',
    description: 'No device found'
  },
  microphones: {
    id: 'app.audio.microphones',
    description: 'Input audio dropdown item label'
  },
  speakers: {
    id: 'app.audio.speakers',
    description: 'Output audio dropdown item label'
  },
  leaveAudio: {
    id: 'app.audio.leaveAudio',
    description: 'Leave audio dropdown item label'
  },
  changeAudioDevice: {
    id: 'app.audio.changeAudioDevice',
    description: 'Change audio device button label'
  },
  deviceChangeFailed: {
    id: 'app.audioNotification.deviceChangeFailed',
    description: 'Device change failed'
  }
});
const LiveSelection = _ref => {
  let {
    listenOnly,
    inputDevices,
    outputDevices,
    inputDeviceId,
    outputDeviceId,
    meetingIsBreakout,
    talking,
    muted,
    disabled,
    isAudioLocked,
    toggleMuteMicrophone,
    away
  } = _ref;
  const intl = useIntl();
  const leaveAudioShourtcut = useShortcut('leaveAudio');
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let audioSettingsDropdownItems = [];
  if (pluginsExtensibleAreasAggregatedState.audioSettingsDropdownItems) {
    audioSettingsDropdownItems = [...pluginsExtensibleAreasAggregatedState.audioSettingsDropdownItems];
  }
  const renderDeviceList = useCallback((deviceKind, list, callback, title, currentDeviceId) => {
    const listLength = list ? list.length : -1;
    const listTitle = [{
      key: "audioDeviceList-".concat(deviceKind),
      label: title,
      iconRight: deviceKind === 'audioinput' ? 'unmute' : 'volume_level_2',
      disabled: true,
      customStyles: Styled.DisabledLabel
    }, {
      key: 'separator-01',
      isSeparator: true
    }];
    let deviceList = [];
    if (listLength > 0) {
      deviceList = list.map((device, index) => ({
        key: "".concat(device.deviceId, "-").concat(deviceKind),
        dataTest: "".concat(deviceKind, "-").concat(index + 1),
        label: truncateDeviceName(device.label),
        customStyles: device.deviceId === currentDeviceId ? Styled.SelectedLabel : null,
        iconRight: device.deviceId === currentDeviceId ? 'check' : null,
        onClick: () => onDeviceListClick(device.deviceId, deviceKind, callback)
      }));
    } else if (deviceKind === AUDIO_OUTPUT && !SET_SINK_ID_SUPPORTED && listLength === 0) {
      // If the browser doesn't support setSinkId, show the chosen output device
      // as a placeholder Default - like it's done in audio/device-selector
      deviceList = [{
        key: "defaultDeviceKey-".concat(deviceKind),
        label: intl.formatMessage(intlMessages.defaultOutputDeviceLabel),
        customStyles: Styled.SelectedLabel,
        iconRight: 'check',
        disabled: true
      }];
    } else {
      deviceList = [{
        key: "noDeviceFoundKey-".concat(deviceKind, "-"),
        label: listLength < 0 ? intl.formatMessage(intlMessages.loading) : intl.formatMessage(intlMessages.noDeviceFound)
      }];
    }
    return listTitle.concat(deviceList);
  }, []);
  const onDeviceListClick = useCallback((deviceId, deviceKind, callback) => {
    if (!deviceId) return;
    if (deviceKind === AUDIO_INPUT) {
      callback(deviceId).catch(() => {
        notify(intl.formatMessage(intlMessages.deviceChangeFailed), true);
      });
    } else {
      callback(deviceId, true).catch(() => {
        notify(intl.formatMessage(intlMessages.deviceChangeFailed), true);
      });
    }
  }, []);
  const inputDeviceList = !listenOnly ? renderDeviceList(AUDIO_INPUT, inputDevices, liveChangeInputDevice, intl.formatMessage(intlMessages.microphones), inputDeviceId) : [];
  const outputDeviceList = renderDeviceList(AUDIO_OUTPUT, outputDevices, liveChangeOutputDevice, intl.formatMessage(intlMessages.speakers), outputDeviceId);
  const leaveAudioOption = {
    icon: 'logout',
    label: intl.formatMessage(intlMessages.leaveAudio),
    key: 'leaveAudioOption',
    dataTest: 'leaveAudio',
    customStyles: Styled.DangerColor,
    onClick: () => handleLeaveAudio(meetingIsBreakout)
  };
  const dropdownListComplete = inputDeviceList.concat(outputDeviceList).concat({
    key: 'separator-02',
    isSeparator: true
  }).concat(leaveAudioOption);
  audioSettingsDropdownItems.forEach(audioSettingsDropdownItem => {
    switch (audioSettingsDropdownItem.type) {
      case AudioSettingsDropdownItemType.OPTION:
        {
          const audioSettingsDropdownOption = audioSettingsDropdownItem;
          dropdownListComplete.push({
            label: audioSettingsDropdownOption.label,
            iconRight: audioSettingsDropdownOption.icon,
            onClick: audioSettingsDropdownOption.onClick,
            key: audioSettingsDropdownOption.id
          });
          break;
        }
      case AudioSettingsDropdownItemType.SEPARATOR:
        {
          const audioSettingsDropdownSeparator = audioSettingsDropdownItem;
          dropdownListComplete.push({
            isSeparator: true,
            key: audioSettingsDropdownSeparator.id
          });
          break;
        }
      default:
        break;
    }
  });
  const customStyles = {
    top: '-1rem'
  };
  const {
    isMobile
  } = deviceInfo;
  return /*#__PURE__*/React.createElement(React.Fragment, null, !listenOnly ?
  /*#__PURE__*/
  // eslint-disable-next-line jsx-a11y/no-access-key
  React.createElement("span", {
    style: {
      display: 'none'
    },
    accessKey: leaveAudioShourtcut,
    onClick: () => handleLeaveAudio(meetingIsBreakout),
    "aria-hidden": "true"
  }) : null, !listenOnly && isMobile && /*#__PURE__*/React.createElement(MuteToggle, {
    talking: talking,
    muted: muted,
    disabled: disabled || isAudioLocked,
    isAudioLocked: isAudioLocked,
    toggleMuteMicrophone: toggleMuteMicrophone,
    away: away
  }), /*#__PURE__*/React.createElement(BBBMenu, {
    customStyles: !isMobile ? customStyles : null,
    trigger: /*#__PURE__*/React.createElement(React.Fragment, null, !listenOnly && !isMobile ? /*#__PURE__*/React.createElement(MuteToggle, {
      talking: talking,
      muted: muted,
      disabled: disabled || isAudioLocked,
      isAudioLocked: isAudioLocked,
      toggleMuteMicrophone: toggleMuteMicrophone,
      away: away
    }) : /*#__PURE__*/React.createElement(ListenOnly, {
      listenOnly: listenOnly,
      handleLeaveAudio: handleLeaveAudio,
      meetingIsBreakout: meetingIsBreakout,
      actAsDeviceSelector: isMobile
    }), /*#__PURE__*/React.createElement(Styled.AudioDropdown, {
      "data-test": "audioDropdownMenu",
      emoji: "device_list_selector",
      label: intl.formatMessage(intlMessages.changeAudioDevice),
      hideLabel: true,
      tabIndex: 0,
      rotate: true
    })),
    actions: !isAudioLocked ? dropdownListComplete : [leaveAudioOption],
    opts: {
      id: 'audio-selector-dropdown-menu',
      keepMounted: true,
      transitionDuration: 0,
      elevation: 3,
      getcontentanchorel: null,
      fullwidth: 'true',
      anchorOrigin: {
        vertical: 'top',
        horizontal: 'center'
      },
      transformOrigin: {
        vertical: 'bottom',
        horizontal: 'center'
      }
    }
  }));
};
module.exportDefault(LiveSelection);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"listenOnly.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/buttons/listenOnly.tsx          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  ListenOnly: () => ListenOnly
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useShortcut;
module.link("/imports/ui/core/hooks/useShortcut", {
  useShortcut(v) {
    useShortcut = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
const intlMessages = defineMessages({
  leaveAudio: {
    id: 'app.audio.leaveAudio',
    description: 'Leave audio dropdown item label'
  },
  changeAudioDevice: {
    id: 'app.audio.changeAudioDevice',
    description: 'Change audio device button label'
  }
});
const ListenOnly = _ref => {
  let {
    listenOnly,
    handleLeaveAudio,
    meetingIsBreakout,
    actAsDeviceSelector
  } = _ref;
  const intl = useIntl();
  const leaveAudioShourtcut = useShortcut('leaveAudio');
  return (
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/no-access-key
    React.createElement(Button, {
      "aria-label": intl.formatMessage(intlMessages.leaveAudio),
      label: actAsDeviceSelector ? intl.formatMessage(intlMessages.changeAudioDevice) : intl.formatMessage(intlMessages.leaveAudio),
      accessKey: leaveAudioShourtcut,
      "data-test": "leaveListenOnly",
      hideLabel: true,
      color: "primary",
      icon: listenOnly ? 'listen' : 'volume_level_2',
      size: "lg",
      circle: true,
      onClick: actAsDeviceSelector ? () => null : e => {
        e.stopPropagation();
        handleLeaveAudio(meetingIsBreakout);
      }
    })
  );
};
module.exportDefault(ListenOnly);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"muteToggle.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/buttons/muteToggle.tsx          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  MuteToggle: () => MuteToggle
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let useShortcut;
module.link("/imports/ui/core/hooks/useShortcut", {
  useShortcut(v) {
    useShortcut = v;
  }
}, 4);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 5);
let useToggleVoice;
module.link("../../../hooks/useToggleVoice", {
  default(v) {
    useToggleVoice = v;
  }
}, 6);
let SET_AWAY;
module.link("/imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/user-actions/mutations", {
  SET_AWAY(v) {
    SET_AWAY = v;
  }
}, 7);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 8);
let muteAway;
module.link("/imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/service", {
  muteAway(v) {
    muteAway = v;
  }
}, 9);
const intlMessages = defineMessages({
  muteAudio: {
    id: 'app.actionsBar.muteLabel',
    description: 'Mute audio button label'
  },
  unmuteAudio: {
    id: 'app.actionsBar.unmuteLabel',
    description: 'Unmute audio button label'
  },
  umuteAudioAndSetActive: {
    id: 'app.actionsBar.unmuteAndSetActiveLabel',
    description: 'unmute audio button label when user is away'
  }
});
const MuteToggle = _ref => {
  var _Settings$application;
  let {
    talking,
    muted,
    disabled,
    isAudioLocked,
    toggleMuteMicrophone,
    away
  } = _ref;
  const intl = useIntl();
  const toggleMuteShourtcut = useShortcut('toggleMute');
  const toggleVoice = useToggleVoice();
  const [setAway] = useMutation(SET_AWAY);
  const unmuteAudioLabel = away ? intlMessages.umuteAudioAndSetActive : intlMessages.unmuteAudio;
  const label = muted ? intl.formatMessage(unmuteAudioLabel) : intl.formatMessage(intlMessages.muteAudio);
  const Settings = getSettingsSingletonInstance();
  const animations = Settings === null || Settings === void 0 ? void 0 : (_Settings$application = Settings.application) === null || _Settings$application === void 0 ? void 0 : _Settings$application.animations;
  const onClickCallback = e => {
    e.stopPropagation();
    if (muted && away) {
      muteAway(muted, true, toggleVoice);
      VideoService.setTrackEnabled(true);
      setAway({
        variables: {
          away: false
        }
      });
    }
    toggleMuteMicrophone(muted, toggleVoice);
  };
  return (
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/no-access-key
    React.createElement(Styled.MuteToggleButton, {
      onClick: onClickCallback,
      disabled: disabled || isAudioLocked,
      hideLabel: true,
      label: label,
      "aria-label": label,
      color: !muted ? 'primary' : 'default',
      ghost: muted,
      icon: muted ? 'mute' : 'unmute',
      size: "lg",
      circle: true,
      accessKey: toggleMuteShourtcut,
      $talking: talking || undefined,
      animations: animations,
      "data-test": muted ? 'unmuteMicButton' : 'muteMicButton'
    })
  );
};
module.exportDefault(MuteToggle);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/component.tsx                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useReactiveVar;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 0);
let React, useCallback, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 1);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 2);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 3);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 4);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 5);
let handleLeaveAudio, liveChangeInputDevice, liveChangeOutputDevice, notify, toggleMuteMicrophone;
module.link("./service", {
  handleLeaveAudio(v) {
    handleLeaveAudio = v;
  },
  liveChangeInputDevice(v) {
    liveChangeInputDevice = v;
  },
  liveChangeOutputDevice(v) {
    liveChangeOutputDevice = v;
  },
  notify(v) {
    notify = v;
  },
  toggleMuteMicrophone(v) {
    toggleMuteMicrophone = v;
  }
}, 6);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 7);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 8);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 9);
let MutedAlert;
module.link("/imports/ui/components/muted-alert/component", {
  default(v) {
    MutedAlert = v;
  }
}, 10);
let MuteToggle;
module.link("./buttons/muteToggle", {
  default(v) {
    MuteToggle = v;
  }
}, 11);
let ListenOnly;
module.link("./buttons/listenOnly", {
  default(v) {
    ListenOnly = v;
  }
}, 12);
let LiveSelection;
module.link("./buttons/LiveSelection", {
  default(v) {
    LiveSelection = v;
  }
}, 13);
let useWhoIsTalking;
module.link("/imports/ui/core/hooks/useWhoIsTalking", {
  default(v) {
    useWhoIsTalking = v;
  }
}, 14);
let useWhoIsUnmuted;
module.link("/imports/ui/core/hooks/useWhoIsUnmuted", {
  default(v) {
    useWhoIsUnmuted = v;
  }
}, 15);
const AUDIO_INPUT = 'audioinput';
const AUDIO_OUTPUT = 'audiooutput';
const DEFAULT_DEVICE = 'default';
const intlMessages = defineMessages({
  changeAudioDevice: {
    id: 'app.audio.changeAudioDevice',
    description: 'Change audio device button label'
  },
  leaveAudio: {
    id: 'app.audio.leaveAudio',
    description: 'Leave audio dropdown item label'
  },
  muteAudio: {
    id: 'app.actionsBar.muteLabel',
    description: 'Mute audio button label'
  },
  unmuteAudio: {
    id: 'app.actionsBar.unmuteLabel',
    description: 'Unmute audio button label'
  },
  deviceChangeFailed: {
    id: 'app.audioNotification.deviceChangeFailed',
    description: 'Device change failed'
  },
  defaultOutputDeviceLabel: {
    id: 'app.audio.audioSettings.defaultOutputDeviceLabel',
    description: 'Default output device label'
  }
});
const InputStreamLiveSelector = _ref => {
  let {
    isConnected,
    isPresenter,
    isModerator,
    isAudioLocked,
    listenOnly,
    muted,
    talking,
    inAudio,
    showMute,
    disabled,
    inputDeviceId,
    outputDeviceId,
    inputStream,
    meetingIsBreakout,
    away
  } = _ref;
  const intl = useIntl();
  // eslint-disable-next-line no-undef
  const [inputDevices, setInputDevices] = React.useState([]);
  const [outputDevices, setOutputDevices] = React.useState([]);
  const {
    isMobile
  } = deviceInfo;
  // @ts-ignore - temporary, while meteor exists in the project
  const {
    enableDynamicAudioDeviceSelection
  } = window.meetingClientSettings.public.app;
  // @ts-ignore - temporary, while meteor exists in the project
  const MUTE_ALERT_CONFIG = window.meetingClientSettings.public.app.mutedAlert;
  const {
    enabled: muteAlertEnabled
  } = MUTE_ALERT_CONFIG;
  const updateDevices = isAudioConnected => {
    navigator.mediaDevices.enumerateDevices().then(devices => {
      const audioInputDevices = devices.filter(i => i.kind === AUDIO_INPUT);
      const audioOutputDevices = devices.filter(i => i.kind === AUDIO_OUTPUT);
      setInputDevices(audioInputDevices);
      setOutputDevices(audioOutputDevices);
    });
    if (isAudioConnected) {
      updateRemovedDevices(inputDevices, outputDevices);
    }
  };
  const fallbackInputDevice = useCallback(fallbackDevice => {
    if (!fallbackDevice || !fallbackDevice.deviceId) return;
    logger.info({
      logCode: 'audio_device_live_selector',
      extraInfo: {
        userId: Auth.userID,
        meetingId: Auth.meetingID
      }
    }, 'Current input device was removed. Fallback to default device');
    liveChangeInputDevice(fallbackDevice.deviceId).catch(() => {
      notify(intl.formatMessage(intlMessages.deviceChangeFailed), true);
    });
  }, []);
  const fallbackOutputDevice = useCallback(fallbackDevice => {
    if (!fallbackDevice || !fallbackDevice.deviceId) return;
    logger.info({
      logCode: 'audio_device_live_selector',
      extraInfo: {
        userId: Auth.userID,
        meetingId: Auth.meetingID
      }
    }, 'Current output device was removed. Fallback to default device');
    liveChangeOutputDevice(fallbackDevice.deviceId, true).catch(() => {
      notify(intl.formatMessage(intlMessages.deviceChangeFailed), true);
    });
  }, []);
  const updateRemovedDevices = useCallback((audioInputDevices, audioOutputDevices) => {
    if (inputDeviceId && inputDeviceId !== DEFAULT_DEVICE && !audioInputDevices.find(d => d.deviceId === inputDeviceId)) {
      fallbackInputDevice(audioInputDevices[0]);
    }
    if (outputDeviceId && outputDeviceId !== DEFAULT_DEVICE && !audioOutputDevices.find(d => d.deviceId === outputDeviceId)) {
      fallbackOutputDevice(audioOutputDevices[0]);
    }
  }, [inputDeviceId]);
  useEffect(() => {
    if (enableDynamicAudioDeviceSelection) {
      updateDevices(inAudio);
    }
  }, [inAudio]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, inAudio && inputStream && muteAlertEnabled && !listenOnly && muted && showMute ? /*#__PURE__*/React.createElement(MutedAlert, {
    muted,
    inputStream,
    isPresenter,
    isViewer: !isModerator
  }) : null, enableDynamicAudioDeviceSelection ? /*#__PURE__*/React.createElement(LiveSelection, {
    listenOnly: listenOnly,
    inputDevices: inputDevices,
    outputDevices: outputDevices,
    inputDeviceId: inputDeviceId,
    outputDeviceId: outputDeviceId,
    meetingIsBreakout: meetingIsBreakout,
    talking: talking,
    muted: muted,
    disabled: disabled || isAudioLocked,
    isAudioLocked: isAudioLocked,
    toggleMuteMicrophone: toggleMuteMicrophone,
    away: away
  }) : /*#__PURE__*/React.createElement(React.Fragment, null, isConnected && !listenOnly && /*#__PURE__*/React.createElement(MuteToggle, {
    talking: talking,
    muted: muted,
    disabled: disabled || isAudioLocked,
    isAudioLocked: isAudioLocked,
    toggleMuteMicrophone: toggleMuteMicrophone,
    away: away
  }), /*#__PURE__*/React.createElement(ListenOnly, {
    listenOnly: listenOnly,
    handleLeaveAudio: handleLeaveAudio,
    meetingIsBreakout: meetingIsBreakout,
    actAsDeviceSelector: enableDynamicAudioDeviceSelection && isMobile
  })));
};
const InputStreamLiveSelectorContainer = () => {
  var _currentUser$presente, _currentUser$isModera, _ref2, _currentMeeting$lockS, _currentUser$voice$li, _currentUser$voice, _currentUser$voice2, _ref3, _currentMeeting$lockS2, _currentMeeting$isBre, _currentUser$away;
  const {
    data: currentUser
  } = useCurrentUser(u => {
    var _u$locked, _u$voice$listenOnly, _u$voice;
    if (!u.voice) {
      return {
        presenter: u.presenter,
        isModerator: u.isModerator
      };
    }
    return {
      userId: u.userId,
      presenter: u.presenter,
      isModerator: u.isModerator,
      locked: (_u$locked = u === null || u === void 0 ? void 0 : u.locked) !== null && _u$locked !== void 0 ? _u$locked : false,
      away: u === null || u === void 0 ? void 0 : u.away,
      voice: {
        listenOnly: (_u$voice$listenOnly = u === null || u === void 0 ? void 0 : (_u$voice = u.voice) === null || _u$voice === void 0 ? void 0 : _u$voice.listenOnly) !== null && _u$voice$listenOnly !== void 0 ? _u$voice$listenOnly : false
      }
    };
  });
  const {
    data: talkingUsers
  } = useWhoIsTalking();
  const {
    data: unmutedUsers
  } = useWhoIsUnmuted();
  const talking = Boolean((currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId) && talkingUsers[currentUser.userId]);
  const muted = Boolean((currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId) && !unmutedUsers[currentUser.userId]);
  const {
    data: currentMeeting
  } = useMeeting(m => {
    return {
      lockSettings: m === null || m === void 0 ? void 0 : m.lockSettings,
      isBreakout: m === null || m === void 0 ? void 0 : m.isBreakout
    };
  });
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const isConnected = useReactiveVar(AudioManager._isConnected.value);
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const isConnecting = useReactiveVar(AudioManager._isConnecting.value);
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const isHangingUp = useReactiveVar(AudioManager._isHangingUp.value);
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const inputDeviceId = useReactiveVar(AudioManager._inputDeviceId.value);
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const outputDeviceId = useReactiveVar(AudioManager._outputDeviceId.value);
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const inputStream = useReactiveVar(AudioManager._inputStream);
  return /*#__PURE__*/React.createElement(InputStreamLiveSelector, {
    isPresenter: (_currentUser$presente = currentUser === null || currentUser === void 0 ? void 0 : currentUser.presenter) !== null && _currentUser$presente !== void 0 ? _currentUser$presente : false,
    isModerator: (_currentUser$isModera = currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator) !== null && _currentUser$isModera !== void 0 ? _currentUser$isModera : false,
    isAudioLocked: (_ref2 = !(currentUser !== null && currentUser !== void 0 && currentUser.isModerator) && (currentUser === null || currentUser === void 0 ? void 0 : currentUser.locked) && (currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$lockS = currentMeeting.lockSettings) === null || _currentMeeting$lockS === void 0 ? void 0 : _currentMeeting$lockS.disableMic)) !== null && _ref2 !== void 0 ? _ref2 : false,
    listenOnly: (_currentUser$voice$li = currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$voice = currentUser.voice) === null || _currentUser$voice === void 0 ? void 0 : _currentUser$voice.listenOnly) !== null && _currentUser$voice$li !== void 0 ? _currentUser$voice$li : false,
    muted: muted,
    talking: talking,
    inAudio: (_currentUser$voice2 = !!(currentUser !== null && currentUser !== void 0 && currentUser.voice)) !== null && _currentUser$voice2 !== void 0 ? _currentUser$voice2 : false,
    showMute: (_ref3 = !!(currentUser !== null && currentUser !== void 0 && currentUser.voice) && !(currentMeeting !== null && currentMeeting !== void 0 && (_currentMeeting$lockS2 = currentMeeting.lockSettings) !== null && _currentMeeting$lockS2 !== void 0 && _currentMeeting$lockS2.disableMic)) !== null && _ref3 !== void 0 ? _ref3 : false,
    isConnected: isConnected,
    disabled: isConnecting || isHangingUp,
    inputDeviceId: inputDeviceId,
    outputDeviceId: outputDeviceId,
    inputStream: inputStream,
    meetingIsBreakout: (_currentMeeting$isBre = currentMeeting === null || currentMeeting === void 0 ? void 0 : currentMeeting.isBreakout) !== null && _currentMeeting$isBre !== void 0 ? _currentMeeting$isBre : false,
    away: (_currentUser$away = currentUser === null || currentUser === void 0 ? void 0 : currentUser.away) !== null && _currentUser$away !== void 0 ? _currentUser$away : false
  });
};
module.exportDefault(InputStreamLiveSelectorContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/service.ts                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  handleLeaveAudio: () => handleLeaveAudio,
  toggleMuteMicrophone: () => toggleMuteMicrophone,
  truncateDeviceName: () => truncateDeviceName,
  notify: () => notify,
  liveChangeInputDevice: () => liveChangeInputDevice,
  liveChangeOutputDevice: () => liveChangeOutputDevice,
  getSpeakerLevel: () => getSpeakerLevel,
  setSpeakerLevel: () => setSpeakerLevel,
  muteAway: () => muteAway
});
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 0);
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 3);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 4);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 5);
let debounce;
module.link("/imports/utils/debounce", {
  debounce(v) {
    debounce = v;
  }
}, 6);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 7);
const MUTED_KEY = 'muted';
const DEVICE_LABEL_MAX_LENGTH = 40;
const CLIENT_DID_USER_SELECTED_MICROPHONE_KEY = 'clientUserSelectedMicrophone';
const CLIENT_DID_USER_SELECTED_LISTEN_ONLY_KEY = 'clientUserSelectedListenOnly';
const TOGGLE_MUTE_THROTTLE_TIME = 300;
const TOGGLE_MUTE_DEBOUNCE_TIME = 500;
const handleLeaveAudio = meetingIsBreakout => {
  if (!meetingIsBreakout) {
    Storage.setItem(CLIENT_DID_USER_SELECTED_MICROPHONE_KEY, !!false);
    Storage.setItem(CLIENT_DID_USER_SELECTED_LISTEN_ONLY_KEY, !!false);
  }
  const skipOnFistJoin = getFromUserSettings('bbb_skip_check_audio_on_first_join', window.meetingClientSettings.public.app.skipCheckOnJoin);
  if (skipOnFistJoin && !Storage.getItem('getEchoTest')) {
    Storage.setItem('getEchoTest', true);
  }
  AudioManager.forceExitAudio();
  logger.info({
    logCode: 'audiocontrols_leave_audio',
    extraInfo: {
      logType: 'user_action'
    }
  }, 'audio connection closed by user');
};
const toggleMuteMicrophoneThrottled = throttle((muted, toggleVoice) => {
  Storage.setItem(MUTED_KEY, !muted);
  if (muted) {
    logger.info({
      logCode: 'audiomanager_unmute_audio',
      extraInfo: {
        logType: 'user_action'
      }
    }, 'microphone unmuted by user');
    toggleVoice(Auth.userID, false);
  } else {
    logger.info({
      logCode: 'audiomanager_mute_audio',
      extraInfo: {
        logType: 'user_action'
      }
    }, 'microphone muted by user');
    toggleVoice(Auth.userID, true);
  }
}, TOGGLE_MUTE_THROTTLE_TIME);
const toggleMuteMicrophoneDebounced = debounce(toggleMuteMicrophoneThrottled, TOGGLE_MUTE_DEBOUNCE_TIME, {
  leading: true,
  trailing: false
});
const toggleMuteMicrophone = (muted, toggleVoice) => {
  return toggleMuteMicrophoneDebounced(muted, toggleVoice);
};
const truncateDeviceName = deviceName => {
  if (deviceName && deviceName.length <= DEVICE_LABEL_MAX_LENGTH) {
    return deviceName;
  }
  return "".concat(deviceName.substring(0, DEVICE_LABEL_MAX_LENGTH - 3), "...");
};
const notify = (message, error, icon) => {
  AudioManager.notify(message, error, icon);
};
const liveChangeInputDevice = inputDeviceId => AudioManager.liveChangeInputDevice(inputDeviceId);
const liveChangeOutputDevice = (inputDeviceId, isLive) => AudioManager.changeOutputDevice(inputDeviceId, isLive);
const getSpeakerLevel = () => {
  const MEDIA_TAG = window.meetingClientSettings.public.media.mediaTag;
  const audioElement = document.querySelector(MEDIA_TAG);
  return audioElement ? audioElement.volume : 0;
};
const setSpeakerLevel = level => {
  const MEDIA_TAG = window.meetingClientSettings.public.media.mediaTag;
  const audioElement = document.querySelector(MEDIA_TAG);
  if (audioElement) {
    audioElement.volume = level;
  }
};
const muteAway = (muted, away, voiceToggle) => {
  const prevAwayMuted = Storage.getItem('prevAwayMuted') || false;
  const prevSpeakerLevelValue = Storage.getItem('prevSpeakerLevel') || 1;
  // mute/unmute microphone
  if (muted === away && muted === Boolean(prevAwayMuted)) {
    toggleMuteMicrophoneThrottled(muted, voiceToggle);
    Storage.setItem('prevAwayMuted', !muted);
  } else if (!away && !muted && Boolean(prevAwayMuted)) {
    toggleMuteMicrophoneThrottled(muted, voiceToggle);
  }
  // mute/unmute speaker
  if (away) {
    setSpeakerLevel(Number(prevSpeakerLevelValue));
  } else {
    Storage.setItem('prevSpeakerLevel', getSpeakerLevel());
    setSpeakerLevel(0);
  }
  // enable/disable video
  VideoService.setTrackEnabled(away);
};
module.exportDefault({
  handleLeaveAudio,
  toggleMuteMicrophone,
  truncateDeviceName,
  notify,
  liveChangeInputDevice,
  getSpeakerLevel,
  setSpeakerLevel
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/styles.ts                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  MuteToggleButton: () => MuteToggleButton,
  DisabledLabel: () => DisabledLabel,
  SelectedLabel: () => SelectedLabel,
  DangerColor: () => DangerColor,
  AudioDropdown: () => AudioDropdown
});
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let ButtonEmoji;
module.link("/imports/ui/components/common/button/button-emoji/ButtonEmoji", {
  default(v) {
    ButtonEmoji = v;
  }
}, 1);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 2);
let colorPrimary, colorDanger, colorGrayDark, colorOffWhite, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 3);
const pulse = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0% {\n    box-shadow: 0 0 0 0 white;\n  }\n  70% {\n    box-shadow: 0 0 0 0.5625rem transparent;\n  }\n  100% {\n    box-shadow: 0 0 0 0 transparent;\n  }\n"])));
// @ts-ignore - as button comes from JS, we can't provide its props
const MuteToggleButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), _ref => {
  let {
    ghost
  } = _ref;
  return ghost && "\n    span {\n      box-shadow: none;\n      background-color: transparent !important;\n      border-color: ".concat(colorWhite, " !important;\n    }\n  ");
}, _ref2 => {
  let {
    $talking
  } = _ref2;
  return $talking && "\n    border-radius: 50%;\n  ";
}, _ref3 => {
  let {
    $talking,
    animations
  } = _ref3;
  return $talking && animations && css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      animation: ", " 1s infinite ease-in;\n    "])), pulse);
}, _ref4 => {
  let {
    $talking,
    animations
  } = _ref4;
  return $talking && !animations && css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      & span {\n        content: '';\n        outline: none !important;\n        background-clip: padding-box;\n        box-shadow: 0 0 0 4px rgba(255, 255, 255, 0.5);\n      }\n    "])));
});
const DisabledLabel = {
  color: colorGrayDark,
  fontWeight: 'bold',
  opacity: 1
};
const SelectedLabel = {
  color: colorPrimary,
  backgroundColor: colorOffWhite
};
const DangerColor = {
  color: colorDanger,
  paddingLeft: 12
};
const AudioDropdown = styled(ButtonEmoji)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  span {\n    i {\n      width: 10px !important;\n      bottom: 1px;\n    }\n  }\n"])));
module.exportDefault({
  MuteToggleButton,
  DisabledLabel,
  SelectedLabel,
  DangerColor,
  AudioDropdown
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-controls/component.tsx                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  AudioControlsContainer: () => AudioControlsContainer
});
let React, useCallback, useEffect, useMemo;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 1);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 2);
let useShortcut;
module.link("/imports/ui/core/hooks/useShortcut", {
  useShortcut(v) {
    useShortcut = v;
  }
}, 3);
let useMutation, useReactiveVar;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 4);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 5);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 6);
let AudioModalContainer;
module.link("../../audio-modal/container", {
  default(v) {
    AudioModalContainer = v;
  }
}, 7);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 8);
let joinListenOnly;
module.link("./service", {
  joinListenOnly(v) {
    joinListenOnly = v;
  }
}, 9);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 10);
let InputStreamLiveSelectorContainer;
module.link("./input-stream-live-selector/component", {
  default(v) {
    InputStreamLiveSelectorContainer = v;
  }
}, 11);
let UPDATE_ECHO_TEST_RUNNING;
module.link("./queries", {
  UPDATE_ECHO_TEST_RUNNING(v) {
    UPDATE_ECHO_TEST_RUNNING = v;
  }
}, 12);
const intlMessages = defineMessages({
  joinAudio: {
    id: 'app.audio.joinAudio',
    description: 'Join audio button label'
  },
  joinAudioAndSetActive: {
    id: 'app.audio.joinAudioAndSetActive',
    description: 'Join audio button label when user is away'
  },
  leaveAudio: {
    id: 'app.audio.leaveAudio',
    description: 'Leave audio button label'
  },
  muteAudio: {
    id: 'app.actionsBar.muteLabel',
    description: 'Mute audio button label'
  },
  unmuteAudio: {
    id: 'app.actionsBar.unmuteLabel',
    description: 'Unmute audio button label'
  }
});
const AudioControls = _ref => {
  let {
    isConnected,
    disabled,
    inAudio,
    isEchoTest,
    updateEchoTestRunning,
    away
  } = _ref;
  const intl = useIntl();
  const joinAudioShortcut = useShortcut('joinAudio');
  const echoTestIntervalRef = React.useRef();
  const [isAudioModalOpen, setIsAudioModalOpen] = React.useState(false);
  const handleJoinAudio = useCallback(connected => {
    if (connected) {
      joinListenOnly();
    } else {
      setIsAudioModalOpen(true);
    }
  }, []);
  const joinButton = useMemo(() => {
    const joinAudioLabel = away ? intlMessages.joinAudioAndSetActive : intlMessages.joinAudio;
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-access-key
      React.createElement(Button, {
        onClick: () => handleJoinAudio(isConnected),
        disabled: disabled,
        hideLabel: true,
        "aria-label": intl.formatMessage(joinAudioLabel),
        label: intl.formatMessage(joinAudioLabel),
        "data-test": "joinAudio",
        color: "default",
        ghost: true,
        icon: "no_audio",
        size: "lg",
        circle: true,
        accessKey: joinAudioShortcut
      })
    );
  }, [isConnected, disabled, joinAudioShortcut, away]);
  useEffect(() => {
    if (isEchoTest) {
      echoTestIntervalRef.current = setInterval(() => {
        updateEchoTestRunning();
      }, 1000);
    } else {
      clearInterval(echoTestIntervalRef.current);
    }
  }, [isEchoTest]);
  return /*#__PURE__*/React.createElement(Styled.Container, null, !inAudio ? joinButton : /*#__PURE__*/React.createElement(InputStreamLiveSelectorContainer, null), isAudioModalOpen ? /*#__PURE__*/React.createElement(AudioModalContainer, {
    priority: 'low',
    setIsOpen: () => setIsAudioModalOpen(false),
    isOpen: isAudioModalOpen
  }) : null);
};
const AudioControlsContainer = () => {
  var _currentUser$voice;
  const {
    data: currentUser
  } = useCurrentUser(u => {
    var _u$locked;
    return {
      presenter: u.presenter,
      isModerator: u.isModerator,
      locked: (_u$locked = u === null || u === void 0 ? void 0 : u.locked) !== null && _u$locked !== void 0 ? _u$locked : false,
      voice: u.voice,
      away: u.away
    };
  });
  const {
    data: currentMeeting
  } = useMeeting(m => {
    return {
      lockSettings: m.lockSettings
    };
  });
  const [updateEchoTestRunning] = useMutation(UPDATE_ECHO_TEST_RUNNING);
  // I access the internal variable to get the makevar reference,
  // so we doesn't broke the client that uses the value directly
  // and I can use it to make my component reactive
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const isConnected = useReactiveVar(AudioManager._isConnected.value);
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const isConnecting = useReactiveVar(AudioManager._isConnecting.value);
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const isHangingUp = useReactiveVar(AudioManager._isHangingUp.value);
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const isEchoTest = useReactiveVar(AudioManager._isEchoTest.value);
  if (!currentUser || !currentMeeting) return null;
  return /*#__PURE__*/React.createElement(AudioControls, {
    inAudio: (_currentUser$voice = !!currentUser.voice) !== null && _currentUser$voice !== void 0 ? _currentUser$voice : false,
    isConnected: isConnected,
    disabled: isConnecting || isHangingUp,
    isEchoTest: isEchoTest,
    updateEchoTestRunning: updateEchoTestRunning,
    away: currentUser.away || false
  });
};
module.exportDefault(AudioControlsContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-controls/queries.ts                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  UPDATE_ECHO_TEST_RUNNING: () => UPDATE_ECHO_TEST_RUNNING
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const UPDATE_ECHO_TEST_RUNNING = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation UpdateUserClientEchoTestRunningAt {\n    userSetEchoTestRunning\n  }\n"])));
module.exportDefault({
  UPDATE_ECHO_TEST_RUNNING
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-controls/service.ts                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  joinListenOnly: () => joinListenOnly
});
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 0);
const joinListenOnly = () => AudioManager.joinListenOnly();
module.exportDefault({
  joinListenOnly
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-controls/styles.ts                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 2);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 3);
let smPaddingX, smPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  }
}, 4);
const pulse = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0% {\n    box-shadow: 0 0 0 0 white;\n  }\n  70% {\n    box-shadow: 0 0 0 0.5625rem transparent;\n  }\n  100% {\n    box-shadow: 0 0 0 0 transparent;\n  }\n"])));
// @ts-ignore - as button comes from JS, we can't provide its props
const LeaveButtonWithoutLiveStreamSelector = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  ", "\n"])), _ref => {
  let {
    ghost
  } = _ref;
  return ghost && "\n    span {\n      background-color: transparent !important;\n      border-color: ".concat(colorWhite, " !important;\n    }\n  ");
});
// @ts-ignore - as button comes from JS, we can't provide its props
const MuteToggleButton = styled(Button)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin-right: ", ";\n  margin-left: 0;\n\n  @media ", " {\n    margin-right: ", ";\n  }\n\n  [dir='rtl'] & {\n    margin-left: ", ";\n    margin-right: 0;\n\n    @media ", " {\n      margin-left: ", ";\n    }\n  }\n\n  ", "\n\n  ", "\n    \n  ", "\n\n  ", "\n"])), smPaddingX, smallOnly, smPaddingY, smPaddingX, smallOnly, smPaddingY, _ref2 => {
  let {
    ghost
  } = _ref2;
  return ghost && "\n    span {\n      background-color: transparent !important;\n      border-color: ".concat(colorWhite, " !important;\n    }\n  ");
}, _ref3 => {
  let {
    talking
  } = _ref3;
  return talking && "\n    border-radius: 50%;\n  ";
}, _ref4 => {
  let {
    talking,
    animations
  } = _ref4;
  return talking && animations && css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      animation: ", " 1s infinite ease-in;\n    "])), pulse);
}, _ref5 => {
  let {
    talking,
    animations
  } = _ref5;
  return talking && !animations && css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n      & span {\n        content: '';\n        outline: none !important;\n        background-clip: padding-box;\n        box-shadow: 0 0 0 4px rgba(255, 255, 255, 0.5);\n      }\n    "])));
});
const Container = styled.span(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  position: relative;\n\n  & > div {\n    position: relative;\n  }\n\n  & > :last-child {\n    margin-left: ", ";\n    margin-right: 0;\n\n    @media ", " {\n      margin-left: ", ";\n    }\n\n    [dir='rtl'] & {\n      margin-left: 0;\n      margin-right: ", ";\n\n      @media ", " {\n        margin-right: ", ";\n      }\n    }\n  }\n"])), smPaddingX, smallOnly, smPaddingY, smPaddingX, smallOnly, smPaddingY);
module.exportDefault({
  LeaveButtonWithoutLiveStreamSelector,
  MuteToggleButton,
  Container
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"audio-captions":{"button":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/button/component.tsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let layoutSelect;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 1);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 2);
let ButtonEmoji;
module.link("/imports/ui/components/common/button/button-emoji/ButtonEmoji", {
  default(v) {
    ButtonEmoji = v;
  }
}, 3);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 4);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 5);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 6);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 7);
let setAudioCaptions, setUserLocaleProperty;
module.link("../service", {
  setAudioCaptions(v) {
    setAudioCaptions = v;
  },
  setUserLocaleProperty(v) {
    setUserLocaleProperty = v;
  }
}, 8);
let useAudioCaptionEnable;
module.link("/imports/ui/core/local-states/useAudioCaptionEnable", {
  default(v) {
    useAudioCaptionEnable = v;
  }
}, 9);
let SET_CAPTION_LOCALE;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  SET_CAPTION_LOCALE(v) {
    SET_CAPTION_LOCALE = v;
  }
}, 10);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 11);
let getactiveCaptions;
module.link("./queries", {
  getactiveCaptions(v) {
    getactiveCaptions = v;
  }
}, 12);
let AudioCaptionsService;
module.link("/imports/ui/components/audio/audio-graphql/audio-captions/service", {
  default(v) {
    AudioCaptionsService = v;
  }
}, 13);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 14);
const intlMessages = defineMessages({
  start: {
    id: 'app.audio.captions.button.start',
    description: 'Start audio captions'
  },
  stop: {
    id: 'app.audio.captions.button.stop',
    description: 'Stop audio captions'
  },
  transcriptionSettings: {
    id: 'app.audio.captions.button.transcriptionSettings',
    description: 'Audio captions settings modal'
  },
  transcription: {
    id: 'app.audio.captions.button.transcription',
    description: 'Audio speech transcription label'
  },
  transcriptionOn: {
    id: 'app.switch.onLabel'
  },
  transcriptionOff: {
    id: 'app.switch.offLabel'
  },
  language: {
    id: 'app.audio.captions.button.language',
    description: 'Audio speech recognition language label'
  },
  autoDetect: {
    id: 'app.audio.captions.button.autoDetect',
    description: 'Audio speech recognition language auto detect'
  },
  'de-DE': {
    id: 'app.audio.captions.select.de-DE',
    description: 'Audio speech recognition german language'
  },
  'en-US': {
    id: 'app.audio.captions.select.en-US',
    description: 'Audio speech recognition english language'
  },
  'es-ES': {
    id: 'app.audio.captions.select.es-ES',
    description: 'Audio speech recognition spanish language'
  },
  'fr-FR': {
    id: 'app.audio.captions.select.fr-FR',
    description: 'Audio speech recognition french language'
  },
  'hi-ID': {
    id: 'app.audio.captions.select.hi-ID',
    description: 'Audio speech recognition indian language'
  },
  'it-IT': {
    id: 'app.audio.captions.select.it-IT',
    description: 'Audio speech recognition italian language'
  },
  'ja-JP': {
    id: 'app.audio.captions.select.ja-JP',
    description: 'Audio speech recognition japanese language'
  },
  'pt-BR': {
    id: 'app.audio.captions.select.pt-BR',
    description: 'Audio speech recognition portuguese language'
  },
  'ru-RU': {
    id: 'app.audio.captions.select.ru-RU',
    description: 'Audio speech recognition russian language'
  },
  'zh-CN': {
    id: 'app.audio.captions.select.zh-CN',
    description: 'Audio speech recognition chinese language'
  }
});
const DISABLED = '';
const AudioCaptionsButton = _ref => {
  let {
    isRTL,
    currentCaptionLocale,
    availableVoices,
    isSupported
  } = _ref;
  const knownLocales = window.meetingClientSettings.public.captions.locales;
  const PROVIDER = window.meetingClientSettings.public.app.audioCaptions.provider;
  const intl = useIntl();
  const [active] = useAudioCaptionEnable();
  const [setCaptionLocaleMutation] = useMutation(SET_CAPTION_LOCALE);
  const setUserCaptionLocale = (captionLocale, provider) => {
    setCaptionLocaleMutation({
      variables: {
        locale: captionLocale,
        provider
      }
    });
  };
  const isCaptionLocaleSet = () => currentCaptionLocale === DISABLED;
  const fallbackLocale = availableVoices.includes(navigator.language) ? navigator.language : 'en-US'; // Assuming 'en-US' is the default fallback locale
  const getSelectedLocaleValue = isCaptionLocaleSet() ? fallbackLocale : currentCaptionLocale;
  const selectedLocale = useRef(getSelectedLocaleValue);
  useEffect(() => {
    if (!isCaptionLocaleSet()) selectedLocale.current = getSelectedLocaleValue;
  }, [currentCaptionLocale]);
  const shouldRenderChevron = isSupported;
  const shouldRenderSelector = isSupported && availableVoices.length > 0;
  const isAudioTranscriptionEnabled = AudioCaptionsService.useIsAudioTranscriptionEnabled();
  const autoLanguage = AudioCaptionsService.isGladia() ? {
    icon: '',
    label: intl.formatMessage(intlMessages.autoDetect),
    key: 'auto',
    iconRight: selectedLocale.current === 'auto' ? 'check' : null,
    customStyles: selectedLocale.current === 'auto' && Styled.SelectedLabel,
    disabled: !isAudioTranscriptionEnabled,
    dividerTop: true,
    onClick: () => {
      selectedLocale.current = 'auto';
      AudioCaptionsService.setSpeechLocale(selectedLocale.current, setUserCaptionLocale);
    }
  } : undefined;
  const getAvailableLocales = () => {
    let indexToInsertSeparator = -1;
    const availableVoicesObjectToMenu = availableVoices.filter(availableVoice => availableVoice !== 'auto').map((availableVoice, index) => {
      if (availableVoice === availableVoices[0]) {
        indexToInsertSeparator = index;
      }
      return {
        icon: '',
        label: intl.formatMessage(intlMessages[availableVoice]),
        key: availableVoice,
        iconRight: selectedLocale.current === availableVoice ? 'check' : null,
        customStyles: selectedLocale.current === availableVoice && Styled.SelectedLabel,
        disabled: !isAudioTranscriptionEnabled,
        dividerTop: !AudioCaptionsService.isGladia() && availableVoice === availableVoices[0],
        onClick: () => {
          selectedLocale.current = availableVoice;
          setUserLocaleProperty(selectedLocale.current, setUserCaptionLocale);
        }
      };
    });
    if (indexToInsertSeparator >= 0) {
      availableVoicesObjectToMenu.splice(indexToInsertSeparator, 0, {
        key: 'separator-01',
        isSeparator: true
      });
    }
    return [...availableVoicesObjectToMenu];
  };
  const getAvailableCaptions = () => {
    return availableVoices.map(caption => {
      var _knownLocales$find;
      const localeName = knownLocales ? (_knownLocales$find = knownLocales.find(l => l.locale === caption)) === null || _knownLocales$find === void 0 ? void 0 : _knownLocales$find.name : 'en';
      return {
        key: caption,
        label: localeName,
        customStyles: selectedLocale.current === caption && Styled.SelectedLabel,
        iconRight: selectedLocale.current === caption ? 'check' : null,
        onClick: () => {
          selectedLocale.current = caption;
          setUserLocaleProperty(selectedLocale.current, setUserCaptionLocale);
        }
      };
    });
  };
  const getAvailableLocalesList = () => {
    // audio captions
    if (shouldRenderChevron) {
      return [{
        key: 'availableLocalesList',
        label: intl.formatMessage(intlMessages.language),
        customStyles: Styled.TitleLabel,
        disabled: true
      }, autoLanguage, ...getAvailableLocales(), {
        key: 'divider',
        label: intl.formatMessage(intlMessages.transcription),
        customStyles: Styled.TitleLabel,
        disabled: true
      }, {
        key: 'separator-02',
        isSeparator: true
      }].filter(e => e);
    }
    // typed captions
    return [{
      key: 'availableLocalesList',
      label: intl.formatMessage(intlMessages.language),
      customStyles: Styled.TitleLabel,
      disabled: true
    }, ...getAvailableCaptions()];
  };
  const onToggleClick = e => {
    e.stopPropagation();
    if (!currentCaptionLocale && !active) {
      setUserCaptionLocale(availableVoices[0], PROVIDER);
    }
    setAudioCaptions(!active);
  };
  const startStopCaptionsButton = /*#__PURE__*/React.createElement(Styled.ClosedCaptionToggleButton, {
    icon: active ? 'closed_caption' : 'closed_caption_stop',
    label: intl.formatMessage(active ? intlMessages.stop : intlMessages.start),
    color: active ? 'primary' : 'default',
    ghost: !active,
    hideLabel: true,
    circle: true,
    size: "lg",
    onClick: onToggleClick
  });
  return shouldRenderChevron || shouldRenderSelector ? /*#__PURE__*/React.createElement(Styled.SpanButtonWrapper, null, /*#__PURE__*/React.createElement(BBBMenu, {
    trigger: /*#__PURE__*/React.createElement(React.Fragment, null, startStopCaptionsButton, /*#__PURE__*/React.createElement(ButtonEmoji, {
      emoji: "device_list_selector",
      hideLabel: true,
      label: intl.formatMessage(intlMessages.transcriptionSettings),
      tabIndex: 0,
      rotate: true
    })),
    actions: getAvailableLocalesList(),
    opts: {
      id: 'default-dropdown-menu',
      keepMounted: true,
      transitionDuration: 0,
      elevation: 3,
      getcontentanchorel: null,
      fullwidth: 'true',
      anchorOrigin: {
        vertical: 'top',
        horizontal: isRTL ? 'right' : 'left'
      },
      transformOrigin: {
        vertical: 'bottom',
        horizontal: isRTL ? 'right' : 'left'
      }
    }
  })) : startStopCaptionsButton;
};
const AudioCaptionsButtonContainer = () => {
  var _currentMeetingData$c;
  const isRTL = layoutSelect(i => i.isRTL);
  const {
    data: currentUser,
    loading: currentUserLoading
  } = useCurrentUser(user => ({
    captionLocale: user.captionLocale,
    voice: user.voice,
    speechLocale: user.speechLocale
  }));
  const {
    data: currentMeetingData,
    loading: currentMeetingLoading
  } = useMeeting(m => ({
    componentsFlags: m.componentsFlags
  }));
  const {
    data: activeCaptionsData,
    loading: activeCaptionsLoading
  } = useDeduplicatedSubscription(getactiveCaptions);
  if (currentUserLoading) return null;
  if (currentMeetingLoading) return null;
  if (activeCaptionsLoading) return null;
  if (!currentUser) return null;
  if (!currentMeetingData) return null;
  if (!activeCaptionsData) return null;
  const availableVoices = activeCaptionsData.caption_activeLocales.map(caption => caption.locale);
  const currentCaptionLocale = currentUser.captionLocale || '';
  const isSupported = availableVoices.length > 0;
  if (!((_currentMeetingData$c = currentMeetingData.componentsFlags) !== null && _currentMeetingData$c !== void 0 && _currentMeetingData$c.hasCaption)) return null;
  return /*#__PURE__*/React.createElement(AudioCaptionsButton, {
    isRTL: isRTL,
    availableVoices: availableVoices,
    currentCaptionLocale: currentCaptionLocale,
    isSupported: isSupported
  });
};
module.exportDefault(AudioCaptionsButtonContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/button/queries.ts                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  getactiveCaptions: () => getactiveCaptions,
  GET_AUDIO_CAPTIONS_COUNT: () => GET_AUDIO_CAPTIONS_COUNT
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const getactiveCaptions = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription activeCaptions {\n    caption_activeLocales {\n      locale\n    }\n  }\n"])));
const GET_AUDIO_CAPTIONS_COUNT = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  subscription GetAudioCaptionsCount {\n    caption_aggregate {\n      aggregate {\n        count(columns: captionId)\n      }\n    }\n  }\n"])));
module.exportDefault({
  GET_AUDIO_CAPTIONS_COUNT,
  getactiveCaptions
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/button/styles.ts                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let Toggle;
module.link("/imports/ui/components/common/switch/component", {
  default(v) {
    Toggle = v;
  }
}, 2);
let colorWhite, colorPrimary, colorOffWhite, colorDangerDark, colorSuccess;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  colorDangerDark(v) {
    colorDangerDark = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  }
}, 3);
// @ts-ignore - as button comes from JS, we can't provide its props
const ClosedCaptionToggleButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n"])), _ref => {
  let {
    ghost
  } = _ref;
  return ghost && "\n    span {\n      box-shadow: none;\n      background-color: transparent !important;\n      border-color: ".concat(colorWhite, " !important;\n    }\n    i {\n      margin-top: .4rem;\n    }\n  ");
});
const SpanButtonWrapper = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n"])));
const TranscriptionToggle = styled(Toggle)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: flex-start;\n  padding-left: 1em;\n"])));
const TitleLabel = {
  fontWeight: 'bold',
  opacity: 1
};
const EnableTrascription = {
  color: colorSuccess
};
const DisableTrascription = {
  color: colorDangerDark
};
const SelectedLabel = {
  color: colorPrimary,
  backgroundColor: colorOffWhite
};
module.exportDefault({
  ClosedCaptionToggleButton,
  SpanButtonWrapper,
  TranscriptionToggle,
  TitleLabel,
  EnableTrascription,
  DisableTrascription,
  SelectedLabel
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"captions":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/captions/component.tsx                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let getSpeechVoices, setUserLocaleProperty, useFixedLocale, isGladia, useIsAudioTranscriptionEnabled;
module.link("../service", {
  getSpeechVoices(v) {
    getSpeechVoices = v;
  },
  setUserLocaleProperty(v) {
    setUserLocaleProperty = v;
  },
  useFixedLocale(v) {
    useFixedLocale = v;
  },
  isGladia(v) {
    isGladia = v;
  },
  useIsAudioTranscriptionEnabled(v) {
    useIsAudioTranscriptionEnabled = v;
  }
}, 3);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 4);
let SET_SPEECH_LOCALE;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  SET_SPEECH_LOCALE(v) {
    SET_SPEECH_LOCALE = v;
  }
}, 5);
const intlMessages = defineMessages({
  title: {
    id: 'app.audio.captions.speech.title',
    description: 'Audio speech recognition title'
  },
  disabled: {
    id: 'app.audio.captions.speech.disabled',
    description: 'Audio speech recognition disabled'
  },
  unsupported: {
    id: 'app.audio.captions.speech.unsupported',
    description: 'Audio speech recognition unsupported'
  },
  auto: {
    id: 'app.audio.captions.speech.auto',
    description: 'Audio speech recognition auto'
  },
  'de-DE': {
    id: 'app.audio.captions.select.de-DE',
    description: 'Audio speech recognition german language'
  },
  'en-US': {
    id: 'app.audio.captions.select.en-US',
    description: 'Audio speech recognition english language'
  },
  'es-ES': {
    id: 'app.audio.captions.select.es-ES',
    description: 'Audio speech recognition spanish language'
  },
  'fr-FR': {
    id: 'app.audio.captions.select.fr-FR',
    description: 'Audio speech recognition french language'
  },
  'hi-ID': {
    id: 'app.audio.captions.select.hi-ID',
    description: 'Audio speech recognition indian language'
  },
  'it-IT': {
    id: 'app.audio.captions.select.it-IT',
    description: 'Audio speech recognition italian language'
  },
  'ja-JP': {
    id: 'app.audio.captions.select.ja-JP',
    description: 'Audio speech recognition japanese language'
  },
  'pt-BR': {
    id: 'app.audio.captions.select.pt-BR',
    description: 'Audio speech recognition portuguese language'
  },
  'ru-RU': {
    id: 'app.audio.captions.select.ru-RU',
    description: 'Audio speech recognition russian language'
  },
  'zh-CN': {
    id: 'app.audio.captions.select.zh-CN',
    description: 'Audio speech recognition chinese language'
  }
});
const AudioCaptionsSelect = _ref => {
  let {
    isTranscriptionEnabled,
    speechLocale,
    speechVoices
  } = _ref;
  const useLocaleHook = useFixedLocale();
  const intl = useIntl();
  const [setSpeechLocaleMutation] = useMutation(SET_SPEECH_LOCALE);
  const setUserSpeechLocale = (speechLocale, provider) => {
    if (speechLocale !== '') {
      setSpeechLocaleMutation({
        variables: {
          locale: speechLocale,
          provider
        }
      });
    }
  };
  if (!isTranscriptionEnabled || useLocaleHook) return null;
  if (speechVoices.length === 0 && !isGladia()) {
    return /*#__PURE__*/React.createElement("div", {
      "data-test": "speechRecognitionUnsupported",
      style: {
        fontSize: '.75rem',
        padding: '1rem 0'
      }
    }, "*".concat(intl.formatMessage(intlMessages.unsupported)));
  }
  const onChange = e => {
    const {
      value
    } = e.target;
    setUserLocaleProperty(value, setUserSpeechLocale);
  };
  return /*#__PURE__*/React.createElement("div", {
    style: {
      padding: '1rem 0'
    }
  }, /*#__PURE__*/React.createElement("label", {
    htmlFor: "speechSelect",
    style: {
      padding: '0 .5rem'
    }
  }, intl.formatMessage(intlMessages.title)), /*#__PURE__*/React.createElement("select", {
    id: "speechSelect",
    onChange: onChange,
    value: speechLocale
  }, /*#__PURE__*/React.createElement("option", {
    key: "disabled",
    value: ""
  }, intl.formatMessage(intlMessages.disabled)), isGladia() ? /*#__PURE__*/React.createElement("option", {
    key: "auto",
    value: "auto"
  }, intl.formatMessage(intlMessages.auto)) : null, speechVoices.map(v => /*#__PURE__*/React.createElement("option", {
    key: v,
    value: v
  }, intl.formatMessage(intlMessages[v])))));
};
const AudioCaptionsSelectContainer = () => {
  var _currentUser$speechLo;
  const [voicesList, setVoicesList] = React.useState([]);
  const voices = getSpeechVoices();
  useEffect(() => {
    if (voices && voicesList.length === 0) {
      setVoicesList(voices);
    }
  }, [voices]);
  const {
    data: currentUser
  } = useCurrentUser(user => ({
    speechLocale: user.speechLocale,
    voice: user.voice
  }));
  const isEnabled = useIsAudioTranscriptionEnabled();
  if (!currentUser || !isEnabled || !voices) return null;
  return /*#__PURE__*/React.createElement(AudioCaptionsSelect, {
    isTranscriptionEnabled: isEnabled,
    speechLocale: (_currentUser$speechLo = currentUser.speechLocale) !== null && _currentUser$speechLo !== void 0 ? _currentUser$speechLo : '',
    speechVoices: voices || voicesList
  });
};
module.exportDefault(AudioCaptionsSelectContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"live":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/live/component.tsx                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let GET_CAPTIONS;
module.link("./queries", {
  GET_CAPTIONS(v) {
    GET_CAPTIONS = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let useAudioCaptionEnable;
module.link("/imports/ui/core/local-states/useAudioCaptionEnable", {
  default(v) {
    useAudioCaptionEnable = v;
  }
}, 4);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 5);
let splitTranscript;
module.link("../service", {
  splitTranscript(v) {
    splitTranscript = v;
  }
}, 6);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 7);
const AudioCaptionsLive = _ref => {
  let {
    captions
  } = _ref;
  const CAPTIONS_CONFIG = window.meetingClientSettings.public.captions;
  const LINES_PER_MESSAGE = CAPTIONS_CONFIG.lines;
  return /*#__PURE__*/React.createElement(Styled.Wrapper, null, /*#__PURE__*/React.createElement(React.Fragment, null, captions.length > 0 && captions.length <= LINES_PER_MESSAGE ? captions.map(caption => {
    const {
      user,
      captionText
    } = caption;
    return /*#__PURE__*/React.createElement(Styled.CaptionWrapper, {
      key: caption.captionId
    }, !user ? null : /*#__PURE__*/React.createElement(Styled.UserAvatarWrapper, null, /*#__PURE__*/React.createElement(Styled.UserAvatar, {
      avatar: user.avatar,
      color: user.color,
      moderator: user.isModerator
    }, user.avatar ? '' : user.name.slice(0, 2))), /*#__PURE__*/React.createElement(Styled.Captions, {
      hasContent: true
    }, !captionText ? '' : captionText), /*#__PURE__*/React.createElement(Styled.VisuallyHidden, {
      "aria-atomic": true,
      "aria-live": "polite"
    }, !captionText ? '' : captionText));
  }) : null));
};
const AudioCaptionsLiveContainer = () => {
  var _currentUser$captionL;
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    captionLocale: u.captionLocale
  }));
  const {
    data: AudioCaptionsLiveData,
    loading: AudioCaptionsLiveLoading,
    error: AudioCaptionsLiveError
  } = useDeduplicatedSubscription(GET_CAPTIONS, {
    variables: {
      locale: (_currentUser$captionL = currentUser === null || currentUser === void 0 ? void 0 : currentUser.captionLocale) !== null && _currentUser$captionL !== void 0 ? _currentUser$captionL : 'en-US'
    }
  });
  const [audioCaptionsEnable] = useAudioCaptionEnable();
  if (AudioCaptionsLiveLoading) return null;
  if (AudioCaptionsLiveError) {
    logger.error(AudioCaptionsLiveError);
    return /*#__PURE__*/React.createElement("div", null, JSON.stringify(AudioCaptionsLiveError));
  }
  if (!AudioCaptionsLiveData) return null;
  if (!AudioCaptionsLiveData.caption) return null;
  if (!AudioCaptionsLiveData.caption[0]) return null;
  if (!audioCaptionsEnable) return null;
  return /*#__PURE__*/React.createElement(AudioCaptionsLive, {
    captions: AudioCaptionsLiveData.caption.map(c => {
      const splits = splitTranscript(c);
      return splits;
    }).flat().filter(c => c.captionText)
  });
};
module.exportDefault(AudioCaptionsLiveContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/live/queries.ts                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  GET_CAPTIONS: () => GET_CAPTIONS
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const GET_CAPTIONS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription getCaptions($locale: String!) {\n    caption(where: {locale: {_eq: $locale}}) {\n      user {\n        avatar\n        color\n        isModerator\n        name\n      }\n      captionText\n      captionId\n      captionType\n      createdAt\n    }\n  }\n"])));
module.exportDefault({
  GET_CAPTIONS
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/live/styles.ts                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let userIndicatorsOffset;
module.link("/imports/ui/stylesheets/styled-components/general", {
  userIndicatorsOffset(v) {
    userIndicatorsOffset = v;
  }
}, 1);
let colorWhite, userListBg, colorSuccess;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  userListBg(v) {
    userListBg = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  }
}, 2);
const Wrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n"])));
const CaptionWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 0.05rem;  \n"])));
const Captions = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  white-space: pre-line;\n  word-wrap: break-word;\n  font-family: Verdana, Arial, Helvetica, sans-serif;\n  font-size: 1.5rem;\n  background: #000000a0;\n  color: white;\n  ", "\n"])), _ref => {
  let {
    hasContent
  } = _ref;
  return hasContent && "\n    padding: 0.5rem;\n  ";
});
const VisuallyHidden = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n"])));
const UserAvatarWrapper = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  background: #000000a0;\n  min-height: 3.25;\n  padding: 0.5rem;\n  text-transform: capitalize;\n  width: 3.25rem;\n"])));
const UserAvatar = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  flex: 0 0 2.25rem;\n  margin: 0px calc(0.5rem) 0px 0px;\n  box-flex: 0;\n  position: relative;\n  height: 2.25rem;\n  width: 2.25rem;\n  border-radius: 50%;\n  text-align: center;\n  font-size: .85rem;\n  border: 2px solid transparent;\n  user-select: none;\n  ", "\n  }\n  &:after,\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 0;\n    height: 0;\n    padding-top: .5rem;\n    padding-right: 0;\n    padding-left: 0;\n    padding-bottom: 0;\n    color: inherit;\n    top: auto;\n    left: auto;\n    bottom: ", ";\n    right: ", ";\n    border: 1.5px solid ", ";\n    border-radius: 50%;\n    background-color: ", ";\n    color: ", ";\n    opacity: 0;\n    font-family: 'bbb-icons';\n    font-size: .65rem;\n    line-height: 0;\n    text-align: center;\n    vertical-align: middle;\n    letter-spacing: -.65rem;\n    z-index: 1;\n    [dir=\"rtl\"] & {\n      left: ", ";\n      right: auto;\n      padding-right: .65rem;\n      padding-left: 0;\n    }\n  }\n  ", "\n  // ================ image ================\n  ", "\n  // ================ image ================\n  // ================ content ================\n  color: ", ";\n  font-size: 110%;\n  text-transform: capitalize;\n  display: flex;\n  justify-content: center;\n  align-items:center;  \n  // ================ content ================\n  & .react-loading-skeleton {    \n    height: 2.25rem;\n    width: 2.25rem;\n  }\n"])), _ref2 => {
  let {
    color
  } = _ref2;
  return "\n    background-color: ".concat(color, ";\n  ");
}, userIndicatorsOffset, userIndicatorsOffset, userListBg, colorSuccess, colorWhite, userIndicatorsOffset, _ref3 => {
  let {
    moderator
  } = _ref3;
  return moderator && "\n    border-radius: 5px;\n  ";
}, _ref4 => {
  let {
    avatar,
    emoji
  } = _ref4;
  return (avatar === null || avatar === void 0 ? void 0 : avatar.length) !== 0 && !emoji && "\n    background-image: url(".concat(avatar, ");\n    background-repeat: no-repeat;\n    background-size: contain;\n  ");
}, colorWhite);
module.exportDefault({
  Wrapper,
  Captions,
  VisuallyHidden,
  UserAvatarWrapper,
  UserAvatar,
  CaptionWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"speech":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/speech/component.tsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let diff;
module.link("@mconf/bbb-diff", {
  diff(v) {
    diff = v;
  }
}, 1);
let useReactiveVar, useMutation;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  },
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let debounce;
module.link("/imports/utils/debounce", {
  debounce(v) {
    debounce = v;
  }
}, 3);
let SpeechRecognitionAPI, generateId, getLocale, hasSpeechRecognitionSupport, isLocaleValid, localeAsDefaultSelected, setSpeechVoices, useFixedLocale;
module.link("./service", {
  SpeechRecognitionAPI(v) {
    SpeechRecognitionAPI = v;
  },
  generateId(v) {
    generateId = v;
  },
  getLocale(v) {
    getLocale = v;
  },
  hasSpeechRecognitionSupport(v) {
    hasSpeechRecognitionSupport = v;
  },
  isLocaleValid(v) {
    isLocaleValid = v;
  },
  localeAsDefaultSelected(v) {
    localeAsDefaultSelected = v;
  },
  setSpeechVoices(v) {
    setSpeechVoices = v;
  },
  useFixedLocale(v) {
    useFixedLocale = v;
  }
}, 4);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 5);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 6);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 7);
let isWebSpeechApi, setUserLocaleProperty, setSpeechLocale, useIsAudioTranscriptionEnabled;
module.link("../service", {
  isWebSpeechApi(v) {
    isWebSpeechApi = v;
  },
  setUserLocaleProperty(v) {
    setUserLocaleProperty = v;
  },
  setSpeechLocale(v) {
    setSpeechLocale = v;
  },
  useIsAudioTranscriptionEnabled(v) {
    useIsAudioTranscriptionEnabled = v;
  }
}, 8);
let SET_SPEECH_LOCALE;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  SET_SPEECH_LOCALE(v) {
    SET_SPEECH_LOCALE = v;
  }
}, 9);
let SUBMIT_TEXT;
module.link("./mutations", {
  SUBMIT_TEXT(v) {
    SUBMIT_TEXT = v;
  }
}, 10);
const THROTTLE_TIMEOUT = 200;
const speechHasStarted = {
  started: false
};
const AudioCaptionsSpeech = _ref => {
  let {
    locale,
    connected,
    muted
  } = _ref;
  const resultRef = useRef({
    id: generateId(),
    transcript: '',
    isFinal: true
  });
  const speechRecognitionRef = useRef(null);
  const prevIdRef = useRef('');
  const prevTranscriptRef = useRef('');
  const [setSpeechLocaleMutation] = useMutation(SET_SPEECH_LOCALE);
  const isAudioTranscriptionEnabled = useIsAudioTranscriptionEnabled();
  const fixedLocaleResult = useFixedLocale();
  const setUserSpeechLocale = (speechLocale, provider) => {
    if (speechLocale !== '') {
      setSpeechLocaleMutation({
        variables: {
          locale: speechLocale,
          provider
        }
      });
    }
  };
  const setDefaultLocale = () => {
    if (fixedLocaleResult || localeAsDefaultSelected()) {
      setSpeechLocale(getLocale(), setUserSpeechLocale);
    } else {
      setSpeechLocale(navigator.language, setUserSpeechLocale);
    }
  };
  const initSpeechRecognition = () => {
    if (!isAudioTranscriptionEnabled) return null;
    if (!isWebSpeechApi()) {
      setDefaultLocale();
      return null;
    }
    if (!hasSpeechRecognitionSupport()) return null;
    setSpeechVoices();
    const speechRecognition = new SpeechRecognitionAPI();
    speechRecognition.continuous = true;
    speechRecognition.interimResults = true;
    if (fixedLocaleResult || localeAsDefaultSelected()) {
      setUserLocaleProperty(getLocale(), setUserSpeechLocale);
    } else {
      setUserLocaleProperty(navigator.language, setUserSpeechLocale);
    }
    return speechRecognition;
  };
  const [submitText] = useMutation(SUBMIT_TEXT);
  const captionSubmitText = function (id, transcript, locale) {
    let isFinal = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    // If it's a new sentence
    if (id !== prevIdRef.current) {
      prevIdRef.current = id;
      prevTranscriptRef.current = '';
    }
    const transcriptDiff = diff(prevTranscriptRef.current, transcript);
    let start = 0;
    let end = 0;
    let text = '';
    if (transcriptDiff) {
      start = transcriptDiff.start;
      end = transcriptDiff.end;
      text = transcriptDiff.text;
    }
    // Stores current transcript as previous
    prevTranscriptRef.current = transcript;
    submitText({
      variables: {
        transcriptId: id,
        start,
        end,
        text,
        transcript,
        locale,
        isFinal
      }
    });
  };
  const transcriptUpdate = debounce(captionSubmitText, THROTTLE_TIMEOUT);
  const updateFinalTranscript = (id, transcript, locale) => {
    captionSubmitText(id, transcript, locale, true);
  };
  const onEnd = useCallback(() => {
    stop();
  }, []);
  const onError = useCallback(event => {
    stop();
    logger.error({
      logCode: 'captions_speech_recognition',
      extraInfo: {
        error: event.error,
        message: event.message
      }
    }, 'Captions speech recognition error');
  }, []);
  const onResult = useCallback(event => {
    const {
      resultIndex,
      results
    } = event;
    logger.debug('Transcription event', event);
    const {
      id
    } = resultRef.current;
    const {
      transcript
    } = results[resultIndex][0];
    const {
      isFinal
    } = results[resultIndex];
    resultRef.current.transcript = transcript;
    resultRef.current.isFinal = isFinal;
    if (isFinal) {
      updateFinalTranscript(id, transcript, locale);
      resultRef.current.id = generateId();
    } else {
      transcriptUpdate(id, transcript, locale, false);
    }
  }, [locale]);
  const stop = useCallback(() => {
    logger.debug('Stopping browser speech recognition');
    if (speechRecognitionRef.current) {
      if (!speechHasStarted.started) {
        return;
      }
      const {
        isFinal,
        transcript
      } = resultRef.current;
      if (!isFinal) {
        const {
          id
        } = resultRef.current;
        updateFinalTranscript(id, transcript, locale);
        speechRecognitionRef.current.abort();
      } else {
        speechRecognitionRef.current.stop();
      }
      speechHasStarted.started = false;
    }
  }, [locale]);
  const start = settedLocale => {
    logger.debug('Starting browser speech recognition');
    if (speechRecognitionRef.current && isLocaleValid(settedLocale)) {
      speechRecognitionRef.current.lang = settedLocale;
      if (speechHasStarted.started) {
        logger.warn('Already starting return');
        return;
      }
      try {
        resultRef.current.id = generateId();
        speechRecognitionRef.current.start();
        speechHasStarted.started = true;
      } catch (event) {
        onError(event);
      }
    }
  };
  useEffect(() => {
    speechRecognitionRef.current = initSpeechRecognition();
  }, []);
  useEffect(() => {
    if (speechRecognitionRef.current) {
      speechRecognitionRef.current.onend = () => onEnd();
      speechRecognitionRef.current.onerror = event => onError(event);
      speechRecognitionRef.current.onresult = event => onResult(event);
    }
  }, [speechRecognitionRef.current]);
  const localeRef = useRef(locale);
  const connectedRef = useRef(connected);
  const mutedRef = useRef(muted);
  useEffect(() => {
    // Connected
    if (!connectedRef.current && connected && !muted) {
      logger.debug('Audio connected');
      start(locale);
      connectedRef.current = connected;
    } else if (localeRef.current !== locale) {
      logger.debug('Locale changed', locale);
      // Locale changed
      if (connectedRef.current && connected) {
        stop();
        start(locale);
        localeRef.current = locale;
      }
    }
    // Disconnected
    if (connectedRef.current && !connected) {
      logger.debug('Audio disconnected');
      stop();
      connectedRef.current = connected;
    }
    // Unmuted and connected
    if (mutedRef.current && !muted && connected) {
      logger.debug('Audio unmuted and connected');
      start(locale);
      mutedRef.current = muted;
    }
    // Muted
    if (!mutedRef.current && muted) {
      logger.debug('Audio muted');
      stop();
      mutedRef.current = muted;
    }
  }, [connected, muted, locale]);
  return null;
};
const AudioCaptionsSpeechContainer = () => {
  var _currentUser$speechLo;
  /* eslint no-underscore-dangle: 0 */
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const isConnected = useReactiveVar(AudioManager._isConnected.value);
  // @ts-ignore
  const isMuted = useReactiveVar(AudioManager._isMuted.value);
  const {
    data: currentUser
  } = useCurrentUser(user => ({
    speechLocale: user.speechLocale,
    voice: user.voice
  }));
  if (!currentUser) return null;
  return /*#__PURE__*/React.createElement(AudioCaptionsSpeech, {
    locale: (_currentUser$speechLo = currentUser.speechLocale) !== null && _currentUser$speechLo !== void 0 ? _currentUser$speechLo : '',
    connected: isConnected,
    muted: isMuted
  });
};
module.exportDefault(AudioCaptionsSpeechContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/speech/mutations.ts                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  SUBMIT_TEXT: () => SUBMIT_TEXT
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const SUBMIT_TEXT = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation SubmitText(\n    $transcriptId: String!\n    $start: Int!\n    $end: Int!\n    $text: String!\n    $transcript: String!\n    $locale: String!\n    $isFinal: Boolean!\n  ) {\n    captionSubmitText(\n      transcriptId: $transcriptId,\n      start: $start,\n      end: $end,\n      text: $text,\n      transcript: $transcript,\n      locale: $locale,\n      isFinal: $isFinal,\n    )\n  }\n"])));
module.exportDefault({
  SUBMIT_TEXT
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/speech/service.ts                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  SpeechRecognitionAPI: () => SpeechRecognitionAPI,
  generateId: () => generateId,
  hasSpeechRecognitionSupport: () => hasSpeechRecognitionSupport,
  setSpeechVoices: () => setSpeechVoices,
  useFixedLocale: () => useFixedLocale,
  localeAsDefaultSelected: () => localeAsDefaultSelected,
  getLocale: () => getLocale,
  isLocaleValid: () => isLocaleValid
});
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 0);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 1);
let unique;
module.link("radash", {
  unique(v) {
    unique = v;
  }
}, 2);
let useIsAudioTranscriptionEnabled;
module.link("../service", {
  useIsAudioTranscriptionEnabled(v) {
    useIsAudioTranscriptionEnabled = v;
  }
}, 3);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 4);
const SpeechRecognitionAPI = window.SpeechRecognition || window.webkitSpeechRecognition;
const generateId = () => "".concat(Auth.userID, "-").concat(Date.now());
const hasSpeechRecognitionSupport = () => {
  const CONFIG = window.meetingClientSettings.public.app.audioCaptions;
  const VALID_ENVIRONMENT = !deviceInfo.isMobile || CONFIG.mobile;
  return typeof SpeechRecognitionAPI !== 'undefined' && typeof window.speechSynthesis !== 'undefined' && VALID_ENVIRONMENT;
};
const setSpeechVoices = () => {
  if (!hasSpeechRecognitionSupport()) return;
  Session.setItem('speechVoices', unique(window.speechSynthesis.getVoices().map(v => v.lang)));
};
const useFixedLocale = () => {
  const FORCE_LOCALE = window.meetingClientSettings.public.app.audioCaptions.language.forceLocale;
  return useIsAudioTranscriptionEnabled() && FORCE_LOCALE;
};
const localeAsDefaultSelected = () => {
  return window.meetingClientSettings.public.app.audioCaptions.language.defaultSelectLocale;
};
const getLocale = () => {
  const LOCALE = window.meetingClientSettings.public.app.audioCaptions.language.locale;
  if (LOCALE === 'browserLanguage') return navigator.language;
  if (LOCALE === 'disabled') return '';
  return LOCALE;
};
const isLocaleValid = locale => {
  const LANGUAGES = window.meetingClientSettings.public.app.audioCaptions.language.available;
  return LANGUAGES.includes(locale);
};
module.exportDefault({
  generateId,
  getLocale,
  localeAsDefaultSelected,
  useFixedLocale,
  setSpeechVoices,
  hasSpeechRecognitionSupport,
  isLocaleValid
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/audio-captions/service.ts                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  splitTranscript: () => splitTranscript,
  useIsAudioTranscriptionEnabled: () => useIsAudioTranscriptionEnabled,
  isWebSpeechApi: () => isWebSpeechApi,
  isGladia: () => isGladia,
  getSpeechVoices: () => getSpeechVoices,
  setAudioCaptions: () => setAudioCaptions,
  setSpeechLocale: () => setSpeechLocale,
  setUserLocaleProperty: () => setUserLocaleProperty,
  useFixedLocale: () => useFixedLocale
});
let unique;
module.link("radash", {
  unique(v) {
    unique = v;
  }
}, 0);
let setAudioCaptionEnable;
module.link("/imports/ui/core/local-states/useAudioCaptionEnable", {
  setAudioCaptionEnable(v) {
    setAudioCaptionEnable = v;
  }
}, 1);
let useIsLiveTranscriptionEnabled;
module.link("/imports/ui/services/features", {
  useIsLiveTranscriptionEnabled(v) {
    useIsLiveTranscriptionEnabled = v;
  }
}, 2);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 3);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 4);
const splitTranscript = obj => {
  const CAPTIONS_CONFIG = window.meetingClientSettings.public.captions;
  const CHARACTERS_PER_LINE = CAPTIONS_CONFIG.lineLimit;
  const LINES_PER_MESSAGE = CAPTIONS_CONFIG.lines;
  const transcripts = [];
  const words = obj.captionText.split(' ');
  let currentLine = '';
  let result = '';
  // eslint-disable-next-line no-restricted-syntax
  for (const word of words) {
    if ((currentLine + word).length <= CHARACTERS_PER_LINE) {
      currentLine += "".concat(word, " ");
    } else {
      result += "".concat(currentLine.trim(), "\n");
      currentLine = "".concat(word, " ");
    }
    if (result.split('\n').length > LINES_PER_MESSAGE) {
      transcripts.push(result);
      result = '';
    }
  }
  if (result.length) {
    transcripts.push(result);
  }
  transcripts.push(currentLine.trim());
  return transcripts.map(t => {
    return _objectSpread(_objectSpread({}, obj), {}, {
      captionText: t
    });
  });
};
const useIsAudioTranscriptionEnabled = () => useIsLiveTranscriptionEnabled();
const getSpeechProvider = () => {
  const PROVIDER = window.meetingClientSettings.public.app.audioCaptions.provider;
  return getFromUserSettings('bbb_transcription_provider', PROVIDER);
};
const isWebSpeechApi = () => getSpeechProvider() === 'webspeech';
const isGladia = () => getSpeechProvider() === 'gladia';
const getSpeechVoices = () => {
  const LANGUAGES = window.meetingClientSettings.public.app.audioCaptions.language.available;
  if (!isWebSpeechApi()) return LANGUAGES;
  if (!window.speechSynthesis) return null;
  return unique(window.speechSynthesis.getVoices().map(v => v.lang).filter(v => LANGUAGES.includes(v)));
};
const setAudioCaptions = value => {
  setAudioCaptionEnable(value);
  // @ts-ignore - Exist while we have meteor in the project
  Session.setItem('audioCaptions', value);
};
const setSpeechLocale = (value, setUserSpeechLocale) => {
  setUserSpeechLocale(value, getSpeechProvider());
};
const setUserLocaleProperty = (value, setUserLocaleCallback) => {
  const PROVIDER = window.meetingClientSettings.public.app.audioCaptions.provider;
  setUserLocaleCallback(value, PROVIDER);
};
const useFixedLocale = () => {
  const FORCE_LOCALE = window.meetingClientSettings.public.app.audioCaptions.language.forceLocale;
  return useIsAudioTranscriptionEnabled() && FORCE_LOCALE;
};
module.exportDefault({
  getSpeechVoices,
  useIsAudioTranscriptionEnabled,
  setUserLocaleProperty,
  setSpeechLocale,
  setAudioCaptions,
  isWebSpeechApi,
  useFixedLocale,
  isGladia,
  splitTranscript
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"hooks":{"useMuteMicrophone.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/hooks/useMuteMicrophone.ts                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useCallback;
module.link("react", {
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 3);
let useToggleVoice;
module.link("./useToggleVoice", {
  default(v) {
    useToggleVoice = v;
  }
}, 4);
let useWhoIsUnmuted;
module.link("/imports/ui/core/hooks/useWhoIsUnmuted", {
  default(v) {
    useWhoIsUnmuted = v;
  }
}, 5);
const useMuteMicrophone = () => {
  var _currentUser$userId;
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    userId: u.userId
  }));
  const toggleVoice = useToggleVoice();
  const {
    data: unmutedUsers
  } = useWhoIsUnmuted();
  const muted = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId) && !unmutedUsers[currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId];
  const userId = (_currentUser$userId = currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId) !== null && _currentUser$userId !== void 0 ? _currentUser$userId : '';
  return useCallback(() => {
    if (!muted) {
      logger.info({
        logCode: 'audiomanager_mute_audio',
        extraInfo: {
          logType: 'user_action'
        }
      }, 'User wants to leave conference. Microphone muted');
      AudioManager.setSenderTrackEnabled(false);
      toggleVoice(userId, true);
    }
  }, [muted, userId, toggleVoice]);
};
module.exportDefault(useMuteMicrophone);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useSetSpeechOptions.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/hooks/useSetSpeechOptions.ts                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useCallback;
module.link("react", {
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let USER_SET_SPEECH_OPTIONS;
module.link("../mutations", {
  USER_SET_SPEECH_OPTIONS(v) {
    USER_SET_SPEECH_OPTIONS = v;
  }
}, 2);
const useSetSpeechOptions = () => {
  const [userSetSpeechOptions] = useMutation(USER_SET_SPEECH_OPTIONS);
  const setSpeechOptions = (partialUtterances, minUtteranceLength) => {
    userSetSpeechOptions({
      variables: {
        partialUtterances,
        minUtteranceLength
      }
    });
  };
  return useCallback(setSpeechOptions, [userSetSpeechOptions]);
};
module.exportDefault(useSetSpeechOptions);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useToggleVoice.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/hooks/useToggleVoice.ts                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useCallback;
module.link("react", {
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let USER_SET_MUTED;
module.link("../mutations", {
  USER_SET_MUTED(v) {
    USER_SET_MUTED = v;
  }
}, 2);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 3);
const useToggleVoice = () => {
  const [userSetMuted] = useMutation(USER_SET_MUTED);
  const toggleVoice = async (userId, muted) => {
    try {
      await userSetMuted({
        variables: {
          muted,
          userId
        }
      });
    } catch (e) {
      logger.error('Error on trying to toggle muted');
    }
  };
  return useCallback(toggleVoice, [userSetMuted]);
};
module.exportDefault(useToggleVoice);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-graphql/mutations.ts                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  USER_SET_MUTED: () => USER_SET_MUTED,
  USER_SET_SPEECH_OPTIONS: () => USER_SET_SPEECH_OPTIONS
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const USER_SET_MUTED = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation UserSetMuted($userId: String, $muted: Boolean!) {\n    userSetMuted(\n      userId: $userId,\n      muted: $muted\n    )\n  }\n"])));
const USER_SET_SPEECH_OPTIONS = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation UserSetSpeechOptions(\n    $partialUtterances: Boolean!\n    $minUtteranceLength: Float!\n  ) {\n    userSetSpeechOptions(\n      partialUtterances: $partialUtterances\n      minUtteranceLength: $minUtteranceLength\n    )\n  }\n"])));
module.exportDefault({
  USER_SET_MUTED,
  USER_SET_SPEECH_OPTIONS
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"audio-dial":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-dial/component.jsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let injectIntl, defineMessages;
module.link("react-intl", {
  injectIntl(v) {
    injectIntl = v;
  },
  defineMessages(v) {
    defineMessages = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const intlMessages = defineMessages({
  audioDialDescription: {
    id: 'app.audioDial.audioDialDescription',
    description: 'Text description for the audio help'
  },
  audioDialConfrenceText: {
    id: 'app.audioDial.audioDialConfrenceText',
    description: 'audio settings back button label'
  },
  tipIndicator: {
    id: 'app.audioDial.tipIndicator',
    description: 'Indicator for the tip message'
  },
  tipMessage: {
    id: 'app.audioDial.tipMessage',
    description: 'Tip message explaining how to mute/unmute yourself'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  formattedDialNum: PropTypes.string.isRequired,
  telVoice: PropTypes.string.isRequired
};
class AudioDial extends React.PureComponent {
  render() {
    const {
      intl,
      formattedDialNum,
      telVoice
    } = this.props;
    const formattedTelVoice = telVoice.replace(/(?=(\d{3})+(?!\d))/g, ' ');
    return /*#__PURE__*/React.createElement(Styled.Help, null, /*#__PURE__*/React.createElement(Styled.Text, null, intl.formatMessage(intlMessages.audioDialDescription)), /*#__PURE__*/React.createElement(Styled.DialText, null, formattedDialNum), /*#__PURE__*/React.createElement(Styled.ConferenceText, null, intl.formatMessage(intlMessages.audioDialConfrenceText)), /*#__PURE__*/React.createElement(Styled.Telvoice, null, formattedTelVoice), /*#__PURE__*/React.createElement(Styled.TipBox, null, /*#__PURE__*/React.createElement(Styled.TipIndicator, null, "".concat(intl.formatMessage(intlMessages.tipIndicator), ": ")), intl.formatMessage(intlMessages.tipMessage)));
  }
}
AudioDial.propTypes = propTypes;
module.exportDefault(injectIntl(AudioDial));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-dial/styles.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let lgPaddingX, smPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  lgPaddingX(v) {
    lgPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  }
}, 1);
let colorGrayLightest;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayLightest(v) {
    colorGrayLightest = v;
  }
}, 2);
const Help = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n"])));
const Text = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  text-align: center;\n  margin-bottom: ", ";\n"])), lgPaddingX);
const DialText = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  text-align: center;\n  margin-bottom: ", ";\n  font-size: 2rem;\n  direction: ltr;\n"])), lgPaddingX);
const ConferenceText = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  text-align: center;\n  margin-bottom: ", ";\n"])), smPaddingY);
const Telvoice = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  text-align: center;\n  font-size: 2rem;\n  direction: ltr;\n  margin-bottom: 0;\n"])));
const TipBox = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  padding: 1.2rem;\n  margin-top: 2rem;\n"])), colorGrayLightest);
const TipIndicator = styled.span(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  font-weight: bold;\n"])));
module.exportDefault({
  Help,
  Text,
  DialText,
  ConferenceText,
  Telvoice,
  TipBox,
  TipIndicator
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"audio-modal":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-modal/component.jsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl, FormattedMessage;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  },
  FormattedMessage(v) {
    FormattedMessage = v;
  }
}, 2);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let PermissionsOverlay;
module.link("../permissions-overlay/component", {
  default(v) {
    PermissionsOverlay = v;
  }
}, 5);
let AudioSettings;
module.link("../audio-settings/component", {
  default(v) {
    AudioSettings = v;
  }
}, 6);
let EchoTest;
module.link("../echo-test/component", {
  default(v) {
    EchoTest = v;
  }
}, 7);
let Help;
module.link("../help/component", {
  default(v) {
    Help = v;
  }
}, 8);
let AudioDial;
module.link("../audio-dial/component", {
  default(v) {
    AudioDial = v;
  }
}, 9);
let AudioAutoplayPrompt;
module.link("../autoplay/component", {
  default(v) {
    AudioAutoplayPrompt = v;
  }
}, 10);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 11);
let usePreviousValue;
module.link("/imports/ui/hooks/usePreviousValue", {
  default(v) {
    usePreviousValue = v;
  }
}, 12);
let SET_AWAY;
module.link("/imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/user-actions/mutations", {
  SET_AWAY(v) {
    SET_AWAY = v;
  }
}, 13);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 14);
let AudioCaptionsSelectContainer;
module.link("../audio-graphql/audio-captions/captions/component", {
  default(v) {
    AudioCaptionsSelectContainer = v;
  }
}, 15);
let useToggleVoice;
module.link("/imports/ui/components/audio/audio-graphql/hooks/useToggleVoice", {
  default(v) {
    useToggleVoice = v;
  }
}, 16);
let muteAway;
module.link("/imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/service", {
  muteAway(v) {
    muteAway = v;
  }
}, 17);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 18);
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  closeModal: PropTypes.func.isRequired,
  joinMicrophone: PropTypes.func.isRequired,
  joinListenOnly: PropTypes.func.isRequired,
  joinEchoTest: PropTypes.func.isRequired,
  exitAudio: PropTypes.func.isRequired,
  leaveEchoTest: PropTypes.func.isRequired,
  changeInputDevice: PropTypes.func.isRequired,
  changeOutputDevice: PropTypes.func.isRequired,
  isEchoTest: PropTypes.bool.isRequired,
  isConnecting: PropTypes.bool.isRequired,
  isConnected: PropTypes.bool.isRequired,
  isUsingAudio: PropTypes.bool.isRequired,
  isListenOnly: PropTypes.bool.isRequired,
  inputDeviceId: PropTypes.string,
  outputDeviceId: PropTypes.string,
  formattedDialNum: PropTypes.string.isRequired,
  showPermissionsOvelay: PropTypes.bool.isRequired,
  listenOnlyMode: PropTypes.bool.isRequired,
  joinFullAudioImmediately: PropTypes.bool,
  forceListenOnlyAttendee: PropTypes.bool.isRequired,
  audioLocked: PropTypes.bool.isRequired,
  resolve: PropTypes.func,
  isMobileNative: PropTypes.bool.isRequired,
  isIE: PropTypes.bool.isRequired,
  formattedTelVoice: PropTypes.string.isRequired,
  autoplayBlocked: PropTypes.bool.isRequired,
  handleAllowAutoplay: PropTypes.func.isRequired,
  changeInputStream: PropTypes.func.isRequired,
  localEchoEnabled: PropTypes.bool.isRequired,
  showVolumeMeter: PropTypes.bool.isRequired,
  notify: PropTypes.func.isRequired,
  isRTL: PropTypes.bool.isRequired,
  priority: PropTypes.string.isRequired,
  isOpen: PropTypes.bool.isRequired,
  setIsOpen: PropTypes.func.isRequired,
  AudioError: PropTypes.shape({
    MIC_ERROR: PropTypes.shape({
      UNKNOWN: PropTypes.number,
      NO_SSL: PropTypes.number,
      MAC_OS_BLOCK: PropTypes.number,
      NO_PERMISSION: PropTypes.number,
      DEVICE_NOT_FOUND: PropTypes.number
    })
  }).isRequired,
  getTroubleshootingLink: PropTypes.func.isRequired,
  away: PropTypes.bool
};
const intlMessages = defineMessages({
  microphoneLabel: {
    id: 'app.audioModal.microphoneLabel',
    description: 'Join mic audio button label'
  },
  listenOnlyLabel: {
    id: 'app.audioModal.listenOnlyLabel',
    description: 'Join listen only audio button label'
  },
  listenOnlyDesc: {
    id: 'app.audioModal.listenOnlyDesc',
    description: 'Join listen only audio button description'
  },
  microphoneDesc: {
    id: 'app.audioModal.microphoneDesc',
    description: 'Join mic audio button description'
  },
  closeLabel: {
    id: 'app.audioModal.closeLabel',
    description: 'close audio modal button label'
  },
  audioChoiceLabel: {
    id: 'app.audioModal.audioChoiceLabel',
    description: 'Join audio modal title'
  },
  iOSError: {
    id: 'app.audioModal.iOSBrowser',
    description: 'Audio/Video Not supported warning'
  },
  iOSErrorDescription: {
    id: 'app.audioModal.iOSErrorDescription',
    description: 'Audio/Video not supported description'
  },
  iOSErrorRecommendation: {
    id: 'app.audioModal.iOSErrorRecommendation',
    description: 'Audio/Video recommended action'
  },
  echoTestTitle: {
    id: 'app.audioModal.echoTestTitle',
    description: 'Title for the echo test'
  },
  settingsTitle: {
    id: 'app.audioModal.settingsTitle',
    description: 'Title for the audio modal'
  },
  helpTitle: {
    id: 'app.audioModal.helpTitle',
    description: 'Title for the audio help'
  },
  audioDialTitle: {
    id: 'app.audioModal.audioDialTitle',
    description: 'Title for the audio dial'
  },
  connecting: {
    id: 'app.audioModal.connecting',
    description: 'Message for audio connecting'
  },
  ariaModalTitle: {
    id: 'app.audioModal.ariaTitle',
    description: 'aria label for modal title'
  },
  autoplayPromptTitle: {
    id: 'app.audioModal.autoplayBlockedDesc',
    description: 'Message for autoplay audio block'
  }
});
const AudioModal = _ref => {
  let {
    forceListenOnlyAttendee,
    joinFullAudioImmediately = false,
    listenOnlyMode,
    audioLocked,
    isUsingAudio,
    isListenOnly,
    autoplayBlocked,
    closeModal,
    isEchoTest,
    exitAudio,
    resolve = null,
    leaveEchoTest,
    AudioError,
    joinEchoTest,
    isConnecting,
    localEchoEnabled,
    joinListenOnly,
    changeInputStream,
    joinMicrophone,
    intl,
    isMobileNative,
    formattedDialNum,
    isRTL,
    isConnected,
    inputDeviceId = null,
    outputDeviceId = null,
    changeInputDevice,
    changeOutputDevice,
    showVolumeMeter,
    notify,
    formattedTelVoice,
    handleAllowAutoplay,
    showPermissionsOvelay,
    isIE,
    isOpen,
    priority,
    setIsOpen,
    getTroubleshootingLink,
    away = false
  } = _ref;
  const [content, setContent] = useState(null);
  const [hasError, setHasError] = useState(false);
  const [disableActions, setDisableActions] = useState(false);
  const [errorInfo, setErrorInfo] = useState(null);
  const [autoplayChecked, setAutoplayChecked] = useState(false);
  const [setAway] = useMutation(SET_AWAY);
  const voiceToggle = useToggleVoice();
  const prevAutoplayBlocked = usePreviousValue(autoplayBlocked);
  useEffect(() => {
    if (prevAutoplayBlocked && !autoplayBlocked) {
      setAutoplayChecked(true);
    }
  }, [autoplayBlocked]);
  const handleJoinAudioError = err => {
    const {
      type,
      errCode,
      errMessage
    } = err;
    switch (type) {
      case 'MEDIA_ERROR':
        setContent('help');
        setErrorInfo({
          errCode,
          errMessage
        });
        setDisableActions(false);
        break;
      case 'CONNECTION_ERROR':
      default:
        setErrorInfo({
          errCode,
          errMessage: type
        });
        setDisableActions(false);
        break;
    }
  };
  const handleGoToLocalEcho = () => {
    // Simplified echo test: this will return the AudioSettings with:
    //   - withEcho: true
    // Echo test will be local and done in the AudioSettings view instead of the
    // old E2E -> yes/no -> join view
    setContent('settings');
  };
  const handleGoToEchoTest = () => {
    const {
      MIC_ERROR
    } = AudioError;
    const noSSL = !window.location.protocol.includes('https');
    if (noSSL) {
      setContent('help');
      setErrorInfo({
        errCode: MIC_ERROR.NO_SSL,
        errMessage: 'NoSSL'
      });
      return null;
    }
    if (disableActions && isConnecting) return null;
    if (localEchoEnabled) return handleGoToLocalEcho();
    setHasError(false);
    setDisableActions(true);
    return joinEchoTest().then(() => {
      setContent('echoTest');
      setDisableActions(true);
    }).catch(err => {
      handleJoinAudioError(err);
    });
  };
  const handleGoToAudioOptions = () => {
    setContent(null);
    setHasError(true);
    setDisableActions(false);
  };
  const handleGoToAudioSettings = () => {
    leaveEchoTest().then(() => {
      setContent('settings');
    });
  };
  const handleRetryGoToEchoTest = () => {
    setHasError(false);
    setContent(null);
    setErrorInfo(null);
    return handleGoToEchoTest();
  };
  const disableAwayMode = () => {
    if (!away) return;
    muteAway(false, true, voiceToggle);
    setAway({
      variables: {
        away: false
      }
    });
    VideoService.setTrackEnabled(true);
  };
  const handleJoinListenOnly = () => {
    if (disableActions && isConnecting) return null;
    setDisableActions(true);
    setHasError(false);
    setErrorInfo(null);
    return joinListenOnly().then(() => {
      setDisableActions(false);
      disableAwayMode();
    }).catch(err => {
      handleJoinAudioError(err);
    });
  };
  const handleJoinMicrophone = () => {
    if (disableActions && isConnecting) return;
    setHasError(false);
    setDisableActions(true);
    setErrorInfo(null);
    joinMicrophone().then(() => {
      setDisableActions(false);
    }).catch(err => {
      handleJoinAudioError(err);
    });
  };
  const handleJoinLocalEcho = inputStream => {
    // Reset the modal to a connecting state - this kind of sucks?
    // prlanzarin Apr 04 2022
    setContent(null);
    if (inputStream) changeInputStream(inputStream);
    handleJoinMicrophone();
    disableAwayMode();
  };
  const skipAudioOptions = () => (isConnecting || forceListenOnlyAttendee && !autoplayChecked) && !content && !hasError;
  const renderAudioOptions = () => {
    const hideMicrophone = forceListenOnlyAttendee || audioLocked;
    const arrow = isRTL ? '←' : '→';
    const dialAudioLabel = "".concat(intl.formatMessage(intlMessages.audioDialTitle), " ").concat(arrow);
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.AudioOptions, {
      "data-test": "audioModalOptions"
    }, !hideMicrophone && !isMobileNative && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.AudioModalButton, {
      label: intl.formatMessage(intlMessages.microphoneLabel),
      "data-test": "microphoneBtn",
      "aria-describedby": "mic-description",
      icon: "unmute",
      circle: true,
      size: "jumbo",
      disabled: audioLocked,
      onClick: joinFullAudioImmediately ? handleJoinMicrophone : handleGoToEchoTest
    }), /*#__PURE__*/React.createElement("span", {
      className: "sr-only",
      id: "mic-description"
    }, intl.formatMessage(intlMessages.microphoneDesc))), listenOnlyMode && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.AudioModalButton, {
      label: intl.formatMessage(intlMessages.listenOnlyLabel),
      "data-test": "listenOnlyBtn",
      "aria-describedby": "listenOnly-description",
      icon: "listen",
      circle: true,
      size: "jumbo",
      onClick: handleJoinListenOnly
    }), /*#__PURE__*/React.createElement("span", {
      className: "sr-only",
      id: "listenOnly-description"
    }, intl.formatMessage(intlMessages.listenOnlyDesc)))), formattedDialNum ? /*#__PURE__*/React.createElement(Styled.AudioDial, {
      label: dialAudioLabel,
      size: "md",
      color: "secondary",
      onClick: () => {
        setContent('audioDial');
      }
    }) : null, /*#__PURE__*/React.createElement(AudioCaptionsSelectContainer, null));
  };
  const renderEchoTest = () => /*#__PURE__*/React.createElement(EchoTest, {
    handleNo: handleGoToAudioSettings,
    handleYes: handleJoinMicrophone
  });
  const renderAudioSettings = () => {
    const confirmationCallback = !localEchoEnabled ? handleRetryGoToEchoTest : handleJoinLocalEcho;
    const handleGUMFailure = error => {
      const code = (error === null || error === void 0 ? void 0 : error.name) === 'NotAllowedError' ? AudioError.MIC_ERROR.NO_PERMISSION : 0;
      setContent('help');
      setErrorInfo({
        errCode: code,
        errMessage: (error === null || error === void 0 ? void 0 : error.name) || 'NotAllowedError'
      });
      setDisableActions(false);
    };
    return /*#__PURE__*/React.createElement(AudioSettings, {
      handleBack: handleGoToAudioOptions,
      handleConfirmation: confirmationCallback,
      handleGUMFailure: handleGUMFailure,
      joinEchoTest: joinEchoTest,
      changeInputDevice: changeInputDevice,
      changeOutputDevice: changeOutputDevice,
      isConnecting: isConnecting,
      isConnected: isConnected,
      isEchoTest: isEchoTest,
      inputDeviceId: inputDeviceId,
      outputDeviceId: outputDeviceId,
      withVolumeMeter: showVolumeMeter,
      withEcho: localEchoEnabled,
      produceStreams: localEchoEnabled || showVolumeMeter,
      notify: notify
    });
  };
  const renderHelp = () => {
    const audioErr = _objectSpread(_objectSpread({}, AudioError), {}, {
      code: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.errCode,
      message: errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.errMessage
    });
    return /*#__PURE__*/React.createElement(Help, {
      handleBack: handleGoToAudioOptions,
      audioErr: audioErr,
      isListenOnly: isListenOnly,
      troubleshootingLink: getTroubleshootingLink(errorInfo === null || errorInfo === void 0 ? void 0 : errorInfo.errCode)
    });
  };
  const renderAudioDial = () => /*#__PURE__*/React.createElement(AudioDial, {
    formattedDialNum: formattedDialNum,
    telVoice: formattedTelVoice,
    handleBack: handleGoToAudioOptions
  });
  const renderAutoplayOverlay = () => /*#__PURE__*/React.createElement(AudioAutoplayPrompt, {
    handleAllowAutoplay: handleAllowAutoplay
  });
  const contents = {
    echoTest: {
      title: intlMessages.echoTestTitle,
      component: renderEchoTest
    },
    settings: {
      title: intlMessages.settingsTitle,
      component: renderAudioSettings
    },
    help: {
      title: intlMessages.helpTitle,
      component: renderHelp
    },
    audioDial: {
      title: intlMessages.audioDialTitle,
      component: renderAudioDial
    },
    autoplayBlocked: {
      title: intlMessages.autoplayPromptTitle,
      component: renderAutoplayOverlay
    }
  };
  const renderContent = () => {
    const {
      animations
    } = getSettingsSingletonInstance().application;
    if (skipAudioOptions()) {
      return /*#__PURE__*/React.createElement(Styled.Connecting, {
        role: "alert"
      }, /*#__PURE__*/React.createElement("span", {
        "data-test": !isEchoTest ? 'establishingAudioLabel' : 'connectingToEchoTest'
      }, intl.formatMessage(intlMessages.connecting)), /*#__PURE__*/React.createElement(Styled.ConnectingAnimation, {
        animations: animations
      }));
    }
    return content ? contents[content].component() : renderAudioOptions();
  };
  useEffect(() => {
    if (!isUsingAudio) {
      if (forceListenOnlyAttendee || audioLocked) {
        handleJoinListenOnly();
        return;
      }
      if (joinFullAudioImmediately && !listenOnlyMode) {
        handleJoinMicrophone();
        return;
      }
      if (!listenOnlyMode) {
        handleGoToEchoTest();
      }
    }
  }, [audioLocked, isUsingAudio, forceListenOnlyAttendee, joinFullAudioImmediately, listenOnlyMode]);
  useEffect(() => {
    if (autoplayBlocked) {
      setContent('autoplayBlocked');
    } else if (prevAutoplayBlocked) {
      closeModal();
    }
  }, [autoplayBlocked]);
  useEffect(() => () => {
    if (isEchoTest) {
      exitAudio();
    }
    if (resolve) resolve();
    Session.setItem('audioModalIsOpen', false);
  }, []);
  let title = content ? intl.formatMessage(contents[content].title) : intl.formatMessage(intlMessages.audioChoiceLabel);
  title = !skipAudioOptions() ? title : null;
  return /*#__PURE__*/React.createElement(React.Fragment, null, showPermissionsOvelay ? /*#__PURE__*/React.createElement(PermissionsOverlay, {
    closeModal: closeModal
  }) : null, /*#__PURE__*/React.createElement(Styled.AudioModal, {
    modalName: "AUDIO",
    onRequestClose: closeModal,
    "data-test": "audioModal",
    contentLabel: intl.formatMessage(intlMessages.ariaModalTitle),
    title: title,
    setIsOpen,
    isOpen,
    priority
  }, isIE ? /*#__PURE__*/React.createElement(Styled.BrowserWarning, null, /*#__PURE__*/React.createElement(FormattedMessage, {
    id: "app.audioModal.unsupportedBrowserLabel",
    description: "Warning when someone joins with a browser that isn't supported",
    values: {
      0: /*#__PURE__*/React.createElement("a", {
        href: "https://www.google.com/chrome/"
      }, "Chrome"),
      1: /*#__PURE__*/React.createElement("a", {
        href: "https://getfirefox.com"
      }, "Firefox")
    }
  })) : null, /*#__PURE__*/React.createElement(Styled.Content, null, renderContent())));
};
AudioModal.propTypes = propTypes;
module.exportDefault(injectIntl(AudioModal));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-modal/container.jsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, useCallback;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let useReactiveVar;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 2);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 3);
let AudioModal;
module.link("./component", {
  default(v) {
    AudioModal = v;
  }
}, 4);
let AudioError;
module.link("/imports/ui/services/audio-manager/error-codes", {
  default(v) {
    AudioError = v;
  }
}, 5);
let AppService;
module.link("/imports/ui/components/app/service", {
  default(v) {
    AppService = v;
  }
}, 6);
let joinMicrophone, closeModal, joinListenOnly, leaveEchoTest;
module.link("./service", {
  joinMicrophone(v) {
    joinMicrophone = v;
  },
  closeModal(v) {
    closeModal = v;
  },
  joinListenOnly(v) {
    joinListenOnly = v;
  },
  leaveEchoTest(v) {
    leaveEchoTest = v;
  }
}, 7);
let Service;
module.link("../service", {
  default(v) {
    Service = v;
  }
}, 8);
let AudioModalService;
module.link("/imports/ui/components/audio/audio-modal/service", {
  default(v) {
    AudioModalService = v;
  }
}, 9);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 10);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 11);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 12);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 13);
let useLockContext;
module.link("/imports/ui/components/lock-viewers/hooks/useLockContext", {
  default(v) {
    useLockContext = v;
  }
}, 14);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 15);
const invalidDialNumbers = ['0', '613-555-1212', '613-555-1234', '0000'];
const AudioModalContainer = props => {
  const {
    data: meeting
  } = useMeeting(m => ({
    voiceSettings: m.voiceSettings
  }));
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    away: user.away,
    isModerator: user.isModerator
  }));
  const getEchoTest = useStorageKey('getEchoTest', 'session');
  const away = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.away;
  const isModerator = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.isModerator;
  const isRTL = document.documentElement.getAttribute('dir') === 'rtl';
  const APP_CONFIG = window.meetingClientSettings.public.app;
  const forceListenOnly = getFromUserSettings('bbb_force_listen_only', APP_CONFIG.forceListenOnly);
  const listenOnlyMode = getFromUserSettings('bbb_listen_only_mode', APP_CONFIG.listenOnlyMode);
  const skipCheck = getFromUserSettings('bbb_skip_check_audio', APP_CONFIG.skipCheck);
  const skipCheckOnJoin = getFromUserSettings('bbb_skip_check_audio_on_first_join', APP_CONFIG.skipCheckOnJoin);
  // Mobile users have significant trouble figuring out correct audio I/O devices
  // according to feedbacks. The potential absence of echo test after having set
  // an initial device in the first join cycle might complicate things even further
  // if they got it wrong. Hence, we ignore the flag for mobile users.
  const skipEchoTestIfPreviousDevice = getFromUserSettings('bbb_skip_echotest_if_previous_device', APP_CONFIG.skipEchoTestIfPreviousDevice) && !deviceInfo.isMobile;
  const autoJoin = getFromUserSettings('bbb_auto_join_audio', APP_CONFIG.autoJoin);
  let formattedDialNum = '';
  let formattedTelVoice = '';
  let combinedDialInNum = '';
  if (meeting && meeting.voiceSettings) {
    const {
      dialNumber,
      telVoice
    } = meeting.voiceSettings;
    if (invalidDialNumbers.indexOf(dialNumber) < 0) {
      formattedDialNum = dialNumber;
      formattedTelVoice = telVoice;
      combinedDialInNum = "".concat(dialNumber.replace(/\D+/g, ''), ",,,").concat(telVoice.replace(/\D+/g, ''));
    }
  }
  const {
    isIe
  } = browserInfo;
  const SHOW_VOLUME_METER = window.meetingClientSettings.public.media.showVolumeMeter;
  const {
    enabled: LOCAL_ECHO_TEST_ENABLED
  } = window.meetingClientSettings.public.media.localEchoTest;
  const forceListenOnlyAttendee = forceListenOnly && !isModerator;
  const inputDeviceId = useReactiveVar(AudioManager._inputDeviceId.value);
  const outputDeviceId = useReactiveVar(AudioManager._outputDeviceId.value);
  const showPermissionsOvelay = useReactiveVar(AudioManager._isWaitingPermissions.value);
  const isUsingAudio = Service.useIsUsingAudio();
  const isConnecting = useReactiveVar(AudioManager._isConnecting.value);
  const isConnected = useReactiveVar(AudioManager._isConnected.value);
  const isListenOnly = useReactiveVar(AudioManager._isListenOnly.value);
  const isEchoTest = useReactiveVar(AudioManager._isEchoTest.value);
  const autoplayBlocked = useReactiveVar(AudioManager._autoplayBlocked.value);
  const meetingIsBreakout = AppService.useMeetingIsBreakout();
  const {
    userLocks
  } = useLockContext();
  const {
    setIsOpen
  } = props;
  const close = useCallback(() => closeModal(() => setIsOpen(false)), [setIsOpen]);
  const joinMic = useCallback(skipEchoTest => joinMicrophone(skipEchoTest || skipCheck || skipCheckOnJoin), [skipCheck, skipCheckOnJoin]);
  const joinFullAudioImmediately = autoJoin && (skipCheck || skipCheckOnJoin && !getEchoTest) || skipCheck || skipCheckOnJoin && !getEchoTest || skipEchoTestIfPreviousDevice && (inputDeviceId || outputDeviceId);
  return /*#__PURE__*/React.createElement(AudioModal, _extends({
    away: away,
    forceListenOnlyAttendee: forceListenOnlyAttendee,
    inputDeviceId: inputDeviceId,
    outputDeviceId: outputDeviceId,
    showPermissionsOvelay: showPermissionsOvelay,
    isUsingAudio: isUsingAudio,
    isConnecting: isConnecting,
    isConnected: isConnected,
    isListenOnly: isListenOnly,
    isEchoTest: isEchoTest,
    autoplayBlocked: autoplayBlocked,
    getEchoTest: getEchoTest,
    joinFullAudioImmediately: joinFullAudioImmediately,
    meetingIsBreakout: meetingIsBreakout,
    closeModal: close,
    joinMicrophone: joinMic,
    joinListenOnly: joinListenOnly,
    leaveEchoTest: leaveEchoTest,
    changeInputDevice: Service.changeInputDevice,
    changeInputStream: Service.changeInputStream,
    changeOutputDevice: Service.changeOutputDevice,
    joinEchoTest: Service.joinEchoTest,
    exitAudio: Service.exitAudio,
    showVolumeMeter: SHOW_VOLUME_METER,
    localEchoEnabled: LOCAL_ECHO_TEST_ENABLED,
    listenOnlyMode: listenOnlyMode,
    formattedDialNum: formattedDialNum,
    formattedTelVoice: formattedTelVoice,
    combinedDialInNum: combinedDialInNum,
    audioLocked: userLocks.userMic,
    autoJoin: autoJoin,
    skipCheck: skipCheck,
    skipCheckOnJoin: skipCheckOnJoin,
    isMobileNative: navigator.userAgent.toLowerCase().includes('bbbnative'),
    isIE: isIe,
    handleAllowAutoplay: Service.handleAllowAutoplay,
    notify: Service.notify,
    isRTL: isRTL,
    AudioError: AudioError,
    getTroubleshootingLink: AudioModalService.getTroubleshootingLink,
    setIsOpen: setIsOpen
  }, props));
};
module.exportDefault(AudioModalContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-modal/service.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  setUserSelectedMicrophone: () => setUserSelectedMicrophone,
  setUserSelectedListenOnly: () => setUserSelectedListenOnly,
  didUserSelectedMicrophone: () => didUserSelectedMicrophone,
  didUserSelectedListenOnly: () => didUserSelectedListenOnly,
  joinMicrophone: () => joinMicrophone,
  joinListenOnly: () => joinListenOnly,
  leaveEchoTest: () => leaveEchoTest,
  closeModal: () => closeModal
});
let Service;
module.link("../service", {
  default(v) {
    Service = v;
  }
}, 0);
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 1);
const CLIENT_DID_USER_SELECTED_MICROPHONE_KEY = 'clientUserSelectedMicrophone';
const CLIENT_DID_USER_SELECTED_LISTEN_ONLY_KEY = 'clientUserSelectedListenOnly';
const setUserSelectedMicrophone = value => Storage.setItem(CLIENT_DID_USER_SELECTED_MICROPHONE_KEY, !!value);
const setUserSelectedListenOnly = value => Storage.setItem(CLIENT_DID_USER_SELECTED_LISTEN_ONLY_KEY, !!value);
const didUserSelectedMicrophone = () => !!Storage.getItem(CLIENT_DID_USER_SELECTED_MICROPHONE_KEY);
const didUserSelectedListenOnly = () => !!Storage.getItem(CLIENT_DID_USER_SELECTED_LISTEN_ONLY_KEY);
const joinMicrophone = function () {
  let skipEchoTest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  Storage.setItem(CLIENT_DID_USER_SELECTED_MICROPHONE_KEY, true);
  Storage.setItem(CLIENT_DID_USER_SELECTED_LISTEN_ONLY_KEY, false);
  const {
    enabled: LOCAL_ECHO_TEST_ENABLED
  } = window.meetingClientSettings.public.media.localEchoTest;
  const call = new Promise((resolve, reject) => {
    try {
      if (skipEchoTest && !Service.isConnected() || LOCAL_ECHO_TEST_ENABLED) {
        return resolve(Service.joinMicrophone());
      }
      return resolve(Service.transferCall());
    } catch (_unused) {
      return reject(Service.exitAudio);
    }
  });
  return call.then(() => {
    document.dispatchEvent(new Event("CLOSE_MODAL_AUDIO"));
  }).catch(error => {
    throw error;
  });
};
const joinListenOnly = () => {
  Storage.setItem(CLIENT_DID_USER_SELECTED_MICROPHONE_KEY, false);
  Storage.setItem(CLIENT_DID_USER_SELECTED_LISTEN_ONLY_KEY, true);
  return Service.joinListenOnly().then(() => {
    // Autoplay block wasn't triggered. Close the modal. If autoplay was
    // blocked, that'll be handled in the modal component when then
    // prop transitions to a state where it was handled OR the user opts
    // to close the modal.
    if (!Service.autoplayBlocked()) {
      document.dispatchEvent(new Event("CLOSE_MODAL_AUDIO"));
    }
  }).catch(error => {
    throw error;
  });
};
const leaveEchoTest = () => {
  if (!Service.isEchoTest()) {
    return Promise.resolve();
  }
  return Service.exitAudio();
};
const closeModal = callback => {
  if (Service.isConnecting()) {
    Service.forceExitAudio();
  }
  callback();
};
const getTroubleshootingLink = errorCode => {
  const TROUBLESHOOTING_LINKS = window.meetingClientSettings.public.media.audioTroubleshootingLinks;
  if (TROUBLESHOOTING_LINKS) return TROUBLESHOOTING_LINKS[errorCode] || TROUBLESHOOTING_LINKS[0];
  return null;
};
module.exportDefault({
  joinMicrophone,
  closeModal,
  joinListenOnly,
  leaveEchoTest,
  didUserSelectedMicrophone,
  didUserSelectedListenOnly,
  getTroubleshootingLink
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-modal/styles.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 2);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 3);
let colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 4);
let mdPaddingY, btnSpacing;
module.link("/imports/ui/stylesheets/styled-components/general", {
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  btnSpacing(v) {
    btnSpacing = v;
  }
}, 5);
let lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 6);
const AudioOptions = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-top: auto;\n  margin-bottom: auto;\n  display: flex;\n  justify-content: center;\n"])));
const AudioModalButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  i {\n    color: #3c5764;\n  }\n\n  // Modifies the audio button icon colour\n  & span:first-child {\n    display: inline-block;\n    color: #1b3c4b;\n    background-color: #f1f8ff;\n    box-shadow: none;\n    border: 5px solid #f1f8ff;\n    font-size: 3.5rem;\n\n    @media ", " {\n      font-size: 2.5rem;\n    }\n  }\n\n  // When hovering over a button of class audioBtn, change the border colour of first span-child\n  &:hover span:first-child,\n  &:focus span:first-child {\n    border: 5px solid ", ";\n    background-color: #f1f8ff;\n  }\n\n  // Modifies the button label text\n  & span:last-child {\n    display: block;\n    color: black;\n    font-size: 1rem;\n    font-weight: 600;\n    margin-top: ", ";\n    line-height: 1.5;\n  }\n"])), smallOnly, colorPrimary, btnSpacing);
const AudioDial = styled(Button)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin: 0 auto;\n  margin-top: ", ";\n  display: block;\n"])), mdPaddingY);
const Connecting = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin-top: auto;\n  margin-bottom: auto;\n  font-size: 2rem;\n"])));
const ellipsis = keyframes(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  to {\n    width: 1.5em;\n  }\n"])));
const ConnectingAnimation = styled.span(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  margin: auto;\n  display: inline-block;\n  width: 1.5em;\n\n  &:after {\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    content: \"\\2026\"; /* ascii code for the ellipsis character */\n    width: 0;\n    margin-left: 0.25em;\n\n    ", "\n  }\n"], ["\n  margin: auto;\n  display: inline-block;\n  width: 1.5em;\n\n  &:after {\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    content: \"\\\\2026\"; /* ascii code for the ellipsis character */\n    width: 0;\n    margin-left: 0.25em;\n\n    ", "\n  }\n"])), _ref => {
  let {
    animations
  } = _ref;
  return animations && css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n      animation: ", " steps(4, end) 900ms infinite;\n    "])), ellipsis);
});
const AudioModal = styled(ModalSimple)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  padding: 1rem;\n  min-height: 20rem;\n"])));
const BrowserWarning = styled.p(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  margin: ", ";\n  text-align: center;\n  padding: 0.5rem;\n  border-width: 3px;\n  border-style: solid;\n  border-radius: 0.25rem;\n"])), lineHeightComputed);
const Content = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  flex-grow: 1;\n  display: flex;\n  justify-content: center;\n  padding: 0;\n  margin-top: auto;\n  margin-bottom: auto;\n  padding: 0.5rem 0;\n\n  button:first-child {\n    margin: 0 3rem 0 0;\n\n    [dir=\"rtl\"] & {\n      margin: 0 0 0 3rem;\n    }\n\n    @media ", " {\n      margin: 0 1rem 0 0;\n\n      [dir=\"rtl\"] & {\n        margin: 0 0 0 1rem;\n      }\n    }\n  }\n\n  button:only-child {\n    margin: inherit 0 inherit inherit;\n\n    [dir=\"rtl\"] & {\n      margin: inherit inherit inherit 0 !important;\n    }\n  }\n"])), smallOnly);
module.exportDefault({
  AudioOptions,
  AudioModalButton,
  AudioDial,
  Connecting,
  ConnectingAnimation,
  AudioModal,
  BrowserWarning,
  Content
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"audio-settings":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-settings/component.jsx                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
let AudioTestContainer;
module.link("/imports/ui/components/audio/audio-test/container", {
  default(v) {
    AudioTestContainer = v;
  }
}, 4);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 5);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 6);
let AudioStreamVolume;
module.link("/imports/ui/components/audio/audio-stream-volume/component", {
  default(v) {
    AudioStreamVolume = v;
  }
}, 7);
let LocalEchoContainer;
module.link("/imports/ui/components/audio/local-echo/container", {
  default(v) {
    LocalEchoContainer = v;
  }
}, 8);
let DeviceSelector;
module.link("/imports/ui/components/audio/device-selector/component", {
  default(v) {
    DeviceSelector = v;
  }
}, 9);
let getAudioConstraints, doGUM;
module.link("/imports/api/audio/client/bridge/service", {
  getAudioConstraints(v) {
    getAudioConstraints = v;
  },
  doGUM(v) {
    doGUM = v;
  }
}, 10);
let MediaStreamUtils;
module.link("/imports/utils/media-stream-utils", {
  default(v) {
    MediaStreamUtils = v;
  }
}, 11);
let audioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    audioManager = v;
  }
}, 12);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 13);
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  changeInputDevice: PropTypes.func.isRequired,
  changeOutputDevice: PropTypes.func.isRequired,
  handleBack: PropTypes.func.isRequired,
  handleConfirmation: PropTypes.func.isRequired,
  handleGUMFailure: PropTypes.func.isRequired,
  isConnecting: PropTypes.bool.isRequired,
  inputDeviceId: PropTypes.string.isRequired,
  outputDeviceId: PropTypes.string.isRequired,
  produceStreams: PropTypes.bool,
  withEcho: PropTypes.bool,
  withVolumeMeter: PropTypes.bool,
  notify: PropTypes.func.isRequired
};
const defaultProps = {
  produceStreams: false,
  withEcho: false,
  withVolumeMeter: false
};
const intlMessages = defineMessages({
  backLabel: {
    id: 'app.audio.backLabel',
    description: 'audio settings back button label'
  },
  descriptionLabel: {
    id: 'app.audio.audioSettings.descriptionLabel',
    description: 'audio settings description label'
  },
  micSourceLabel: {
    id: 'app.audio.audioSettings.microphoneSourceLabel',
    description: 'Label for mic source'
  },
  speakerSourceLabel: {
    id: 'app.audio.audioSettings.speakerSourceLabel',
    description: 'Label for speaker source'
  },
  streamVolumeLabel: {
    id: 'app.audio.audioSettings.microphoneStreamLabel',
    description: 'Label for stream volume'
  },
  retryLabel: {
    id: 'app.audio.joinAudio',
    description: 'Confirmation button label'
  },
  deviceChangeFailed: {
    id: 'app.audioNotification.deviceChangeFailed',
    description: 'Device change failed'
  }
});
class AudioSettings extends React.Component {
  constructor(props) {
    super(props);
    const {
      inputDeviceId,
      outputDeviceId
    } = props;
    this.handleInputChange = this.handleInputChange.bind(this);
    this.handleOutputChange = this.handleOutputChange.bind(this);
    this.handleConfirmationClick = this.handleConfirmationClick.bind(this);
    this.state = {
      inputDeviceId,
      outputDeviceId,
      // If streams need to be produced, device selectors and audio join are
      // blocked until at least one stream is generated
      producingStreams: props.produceStreams,
      stream: null
    };
    this._isMounted = false;
  }
  componentDidMount() {
    const {
      inputDeviceId,
      outputDeviceId
    } = this.state;
    Session.setItem('inEchoTest', true);
    this._isMounted = true;
    // Guarantee initial in/out devices are initialized on all ends
    this.setInputDevice(inputDeviceId);
    this.setOutputDevice(outputDeviceId);
    audioManager.isEchoTest = true;
  }
  componentWillUnmount() {
    const {
      stream
    } = this.state;
    Session.setItem('inEchoTest', false);
    this._mounted = false;
    if (stream) {
      MediaStreamUtils.stopMediaStreamTracks(stream);
    }
    audioManager.isEchoTest = false;
  }
  handleInputChange(deviceId) {
    this.setInputDevice(deviceId);
  }
  handleOutputChange(deviceId) {
    this.setOutputDevice(deviceId);
  }
  handleConfirmationClick() {
    const {
      stream
    } = this.state;
    const {
      produceStreams,
      handleConfirmation
    } = this.props;

    // Stream generation disabled or there isn't any stream: just run the provided callback
    if (!produceStreams || !stream) return handleConfirmation();

    // Stream generation enabled and there is a valid input stream => call
    // the confirmation callback with the input stream as arg so it can be used
    // in upstream components. The rationale is no surplus gUM calls.
    // We're cloning it because the original will be cleaned up on unmount here.
    const clonedStream = stream.clone();
    return handleConfirmation(clonedStream);
  }
  setInputDevice(deviceId) {
    const {
      handleGUMFailure,
      changeInputDevice,
      produceStreams,
      intl,
      notify
    } = this.props;
    const {
      inputDeviceId: currentInputDeviceId
    } = this.state;
    try {
      changeInputDevice(deviceId);
      // Only generate input streams if they're going to be used with something
      // In this case, the volume meter or local echo test.
      if (produceStreams) {
        this.generateInputStream(deviceId).then(stream => {
          // Extract the deviceId again from the stream to guarantee consistency
          // between stream DID vs chosen DID. That's necessary in scenarios where,
          // eg, there's no default/pre-set deviceId ('') and the browser's
          // default device has been altered by the user (browser default != system's
          // default).
          const extractedDeviceId = MediaStreamUtils.extractDeviceIdFromStream(stream, 'audio');
          if (extractedDeviceId && extractedDeviceId !== deviceId) changeInputDevice(extractedDeviceId);

          // Component unmounted after gUM resolution -> skip echo rendering
          if (!this._isMounted) return;
          this.setState({
            inputDeviceId: extractedDeviceId,
            stream,
            producingStreams: false
          });
        }).catch(error => {
          logger.warn({
            logCode: 'audiosettings_gum_failed',
            extraInfo: {
              deviceId,
              errorMessage: error.message,
              errorName: error.name
            }
          }, "Audio settings gUM failed: ".concat(error.name));
          handleGUMFailure(error);
        });
      } else {
        this.setState({
          inputDeviceId: deviceId
        });
      }
    } catch (error) {
      logger.debug({
        logCode: 'audiosettings_input_device_change_failure',
        extraInfo: {
          errorName: error.name,
          errorMessage: error.message,
          deviceId: currentInputDeviceId,
          newDeviceId: deviceId
        }
      }, "Audio settings: error changing input device - {".concat(error.name, ": ").concat(error.message, "}"));
      notify(intl.formatMessage(intlMessages.deviceChangeFailed), true);
    }
  }
  setOutputDevice(deviceId) {
    const {
      changeOutputDevice,
      withEcho,
      intl,
      notify
    } = this.props;
    const {
      outputDeviceId: currentOutputDeviceId
    } = this.state;

    // withEcho usage (isLive arg): if local echo is enabled we need the device
    // change to be performed seamlessly (which is what the isLive parameter guarantees)
    changeOutputDevice(deviceId, withEcho).then(() => {
      this.setState({
        outputDeviceId: deviceId
      });
    }).catch(error => {
      logger.debug({
        logCode: 'audiosettings_output_device_change_failure',
        extraInfo: {
          errorName: error.name,
          errorMessage: error.message,
          deviceId: currentOutputDeviceId,
          newDeviceId: deviceId
        }
      }, "Audio settings: error changing output device - {".concat(error.name, ": ").concat(error.message, "}"));
      notify(intl.formatMessage(intlMessages.deviceChangeFailed), true);
    });
  }
  generateInputStream(inputDeviceId) {
    const {
      stream
    } = this.state;
    if (inputDeviceId && stream) {
      const currentDeviceId = MediaStreamUtils.extractDeviceIdFromStream(stream, 'audio');
      if (currentDeviceId === inputDeviceId) return Promise.resolve(stream);
      MediaStreamUtils.stopMediaStreamTracks(stream);
    }
    const constraints = {
      audio: getAudioConstraints({
        deviceId: inputDeviceId
      })
    };
    return doGUM(constraints, true);
  }
  renderOutputTest() {
    const {
      withEcho,
      intl
    } = this.props;
    const {
      stream
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.SpacedLeftCol, null, /*#__PURE__*/React.createElement(Styled.LabelSmall, {
      htmlFor: "audioTest"
    }, !withEcho ? /*#__PURE__*/React.createElement(AudioTestContainer, {
      id: "audioTest"
    }) : /*#__PURE__*/React.createElement(LocalEchoContainer, {
      intl: intl,
      stream: stream
    }))));
  }
  renderVolumeMeter() {
    const {
      withVolumeMeter,
      intl
    } = this.props;
    const {
      stream
    } = this.state;
    return withVolumeMeter ? /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.LabelSmallFullWidth, {
      htmlFor: "audioStreamVolume"
    }, intl.formatMessage(intlMessages.streamVolumeLabel), /*#__PURE__*/React.createElement(AudioStreamVolume, {
      stream: stream
    }))) : null;
  }
  renderDeviceSelectors() {
    const {
      inputDeviceId,
      outputDeviceId,
      producingStreams
    } = this.state;
    const {
      intl,
      isConnecting
    } = this.props;
    const blocked = producingStreams || isConnecting;
    return /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.LabelSmall, {
      htmlFor: "inputDeviceSelector"
    }, intl.formatMessage(intlMessages.micSourceLabel), /*#__PURE__*/React.createElement(DeviceSelector, {
      id: "inputDeviceSelector",
      deviceId: inputDeviceId,
      kind: "audioinput",
      blocked: blocked,
      onChange: this.handleInputChange,
      intl: intl
    })))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.LabelSmall, {
      htmlFor: "outputDeviceSelector"
    }, intl.formatMessage(intlMessages.speakerSourceLabel), /*#__PURE__*/React.createElement(DeviceSelector, {
      id: "outputDeviceSelector",
      deviceId: outputDeviceId,
      kind: "audiooutput",
      blocked: blocked,
      onChange: this.handleOutputChange,
      intl: intl
    })))));
  }
  render() {
    const {
      isConnecting,
      intl,
      handleBack
    } = this.props;
    const {
      producingStreams
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.FormWrapper, {
      "data-test": "audioSettingsModal"
    }, /*#__PURE__*/React.createElement(Styled.Form, null, /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.AudioNote, null, intl.formatMessage(intlMessages.descriptionLabel))), this.renderDeviceSelectors(), this.renderOutputTest(), this.renderVolumeMeter()), /*#__PURE__*/React.createElement(Styled.EnterAudio, null, /*#__PURE__*/React.createElement(Styled.BackButton, {
      label: intl.formatMessage(intlMessages.backLabel),
      color: "secondary",
      onClick: handleBack,
      disabled: isConnecting
    }), /*#__PURE__*/React.createElement(Button, {
      "data-test": "joinEchoTestButton",
      size: "md",
      color: "primary",
      label: intl.formatMessage(intlMessages.retryLabel),
      onClick: this.handleConfirmationClick,
      disabled: isConnecting || producingStreams
    })));
  }
}
AudioSettings.propTypes = propTypes;
AudioSettings.defaultProps = defaultProps;
module.exportDefault(injectIntl(AudioSettings));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-settings/styles.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 2);
const FormWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  min-width: 0;\n"])));
const Form = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  margin-top: 1.5rem;\n"])));
const Row = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  justify-content: space-between;\n  margin-bottom: 0.7rem;\n"])));
const EnterAudio = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin-top: 1.5rem;\n  display: flex;\n  justify-content: flex-end;\n"])));
const AudioNote = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  @media ", " {\n    font-size: 0.8rem;\n  }\n"])), smallOnly);
const Col = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  min-width: 0;\n\n  display: flex;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin: 0 1rem 0 0;\n\n  [dir=\"rtl\"] & {\n    margin: 0 0 0 1rem;\n  }\n\n  &:last-child {\n    margin-right: 0;\n    margin-left: inherit;\n    padding: 0 0.1rem 0 4rem;\n\n    [dir=\"rtl\"] & {\n      margin-right: inherit;\n      margin-left: 0;\n      padding: 0 4rem 0 0.1rem;\n    }\n  }\n"])));
const FormElement = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  flex-grow: 1;\n"])));
const LabelSmall = styled.label(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  color: black;\n  font-size: 0.85rem;\n  font-weight: 600;\n\n  & > :first-child {\n    margin-top: 0.5rem;\n  }\n"])));
const LabelSmallFullWidth = styled(LabelSmall)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  width: 100%;\n"])));
const SpacedLeftCol = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  min-width: 0;\n\n  display: flex;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin: 0 1rem 0 0;\n\n  [dir=\"rtl\"] & {\n    margin: 0 0 0 1rem;\n  }\n\n  &:last-child {\n    margin-right: 0;\n    margin-left: inherit;\n    padding: 0 0.1rem 0 4rem;\n\n    [dir=\"rtl\"] & {\n      margin-right: inherit;\n      margin-left: 0;\n      padding: 0 4rem 0 0.1rem;\n    }\n  }\n\n  & label {\n    flex-grow: 1;\n    flex-basis: 0;\n    margin-right: 0;\n    margin-left: inherit;\n    padding: 0 0.1rem 0 4rem;\n\n    [dir=\"rtl\"] & {\n      margin-right: inherit;\n      margin-left: 0;\n      padding: 0 4rem 0 0.1rem;\n    }\n  }\n\n  &:before {\n    content: \"\";\n    display: block;\n    flex-grow: 1;\n    flex-basis: 0;\n    margin-right: 1rem;\n    margin-left: inherit;\n\n    [dir=\"rtl\"] & {\n      margin-right: inherit;\n      margin-left: 1rem;\n    }\n  }\n\n  &:last-child {\n    margin-right: 0;\n    margin-left: inherit;\n    padding-right: 0;\n    padding-left: 0;\n\n    [dir=\"rtl\"] & {\n      margin-right: 0;\n      margin-left: inherit;\n    }\n  }\n"])));
const BackButton = styled(Button)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  margin: 0 0.5rem 0 0;\n  border: none;\n\n  [dir=\"rtl\"] & {\n    margin: 0 0 0 0.5rem;\n  }\n\n  @media ", " {\n    margin:0 auto 0 0;\n\n    [dir=\"rtl\"] & {\n      margin:0 0 0 auto;\n    }\n  }\n\n  &:first-child {\n    margin: 0 0.5rem 0 0 !important;\n  }\n"])), smallOnly);
module.exportDefault({
  FormWrapper,
  Form,
  Row,
  EnterAudio,
  AudioNote,
  Col,
  FormElement,
  LabelSmall,
  LabelSmallFullWidth,
  SpacedLeftCol,
  BackButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"audio-stream-volume":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-stream-volume/component.jsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useState, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let hark;
module.link("hark", {
  default(v) {
    hark = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const VOL_POLLING_INTERVAL_MS = 100;
const VOL_FLOOR = 0;
const VOL_CEIL = 50;
const DB_AMPL = 65;
const propTypes = {
  stream: PropTypes.shape({
    active: PropTypes.bool,
    id: PropTypes.string
  }),
  volumeFloor: PropTypes.number,
  volumeRange: PropTypes.number,
  optimum: PropTypes.number,
  high: PropTypes.number,
  low: PropTypes.number
};
const AudioStreamVolume = _ref => {
  let {
    volumeFloor = VOL_FLOOR,
    volumeRange = VOL_CEIL,
    low = VOL_FLOOR,
    optimum = Math.round(0.3 * VOL_CEIL),
    high = Math.round(0.4 * VOL_CEIL),
    stream = null
  } = _ref;
  const harkObserver = useRef(null);
  const volumeRef = useRef(0);
  const [volume, setVolume] = useState(0);
  const handleVolumeChange = dbVolume => {
    const previousVolume = volumeRef.current;
    // Normalize it into 0 - range . DB_AMPL is the "relevance factor" -
    // original formula is / 20
    const linearVolume = Math.pow(10, dbVolume / DB_AMPL) * volumeRange;
    // If the current linear volume is lower than 1/10 of the total volume range,
    // ignore to minimize re-renders. Otherwise: generate the next volume val
    // by smoothing the transition with the previous value and rounding it up
    const nextVolume = linearVolume <= volumeRange / 10 ? volumeFloor : Math.round(0.65 * previousVolume + 0.35 * linearVolume);
    if (previousVolume !== nextVolume) {
      volumeRef.current = nextVolume;
      setVolume(nextVolume);
    }
  };
  const observeVolumeChanges = _stream => {
    if (_stream) {
      harkObserver.current = hark(_stream, {
        interval: VOL_POLLING_INTERVAL_MS
      });
      harkObserver.current.on('volume_change', handleVolumeChange);
    }
  };
  const stopObservingVolumeChanges = () => {
    var _harkObserver$current;
    (_harkObserver$current = harkObserver.current) === null || _harkObserver$current === void 0 ? void 0 : _harkObserver$current.stop();
    harkObserver.current = null;
  };
  useEffect(() => {
    observeVolumeChanges();
    return stopObservingVolumeChanges;
  }, []);
  useEffect(() => {
    stopObservingVolumeChanges();
    observeVolumeChanges(stream);
  }, [stream]);
  return /*#__PURE__*/React.createElement(Styled.VolumeMeter, {
    "data-test": volume > 0 ? 'hasVolume' : 'hasNoVolume',
    min: volumeFloor,
    low: low,
    max: high * 1.25,
    optimum: optimum,
    high: high,
    value: volume
  });
};
AudioStreamVolume.propTypes = propTypes;
module.exportDefault( /*#__PURE__*/React.memo(AudioStreamVolume));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-stream-volume/styles.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const VolumeMeter = styled.meter(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  justify-content: space-between;\n  width: 100%;\n"])));
module.exportDefault({
  VolumeMeter
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"audio-test":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-test/component.jsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 4);
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  handlePlayAudioSample: PropTypes.func.isRequired,
  outputDeviceId: PropTypes.string
};
const defaultProps = {
  outputDeviceId: null
};
const intlMessages = defineMessages({
  playSoundLabel: {
    id: 'app.audio.playSoundLabel',
    description: 'Play sound button label'
  }
});
class AudioTest extends React.Component {
  constructor(props) {
    super(props);
    this.handlePlayAudioSample = props.handlePlayAudioSample.bind(this);
  }
  render() {
    const {
      outputDeviceId,
      intl
    } = this.props;
    const Settings = getSettingsSingletonInstance();
    const {
      animations
    } = Settings.application;
    return /*#__PURE__*/React.createElement(Styled.TestAudioButton, {
      label: intl.formatMessage(intlMessages.playSoundLabel),
      icon: "unmute",
      size: "sm",
      color: "primary",
      onClick: () => this.handlePlayAudioSample(outputDeviceId),
      animations: animations
    });
  }
}
AudioTest.propTypes = propTypes;
AudioTest.defaultProps = defaultProps;
module.exportDefault(injectIntl(AudioTest));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-test/container.jsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, useCallback;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let useReactiveVar;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 2);
let AudioTest;
module.link("./component", {
  default(v) {
    AudioTest = v;
  }
}, 3);
const AudioTestContainer = props => {
  const outputDeviceId = useReactiveVar(AudioManager._outputDeviceId.value);
  const handlePlayAudioSample = useCallback(deviceId => {
    const sound = new Audio("".concat(window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId, "/resources/sounds/audioSample.mp3"));
    sound.addEventListener('ended', () => {
      sound.src = null;
    });
    if (deviceId && sound.setSinkId) sound.setSinkId(deviceId);
    sound.play();
  }, []);
  return /*#__PURE__*/React.createElement(AudioTest, _extends({
    outputDeviceId: outputDeviceId,
    handlePlayAudioSample: handlePlayAudioSample
  }, props));
};
module.exportDefault(AudioTestContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/audio-test/styles.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 2);
const TestAudioButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin: 0 !important;\n  background-color: transparent;\n  color: ", ";\n  font-weight: normal;\n  border: none;\n\n  i {\n    color: ", ";\n\n    ", "\n  }\n\n  &:hover,\n  &:focus,\n  &:active {\n    border: none;\n    background-color: transparent !important;\n    color: #0c5cb2 !important;\n    i {\n      color: #0c5cb2;\n    }\n  }\n"])), colorPrimary, colorPrimary, _ref => {
  let {
    animations
  } = _ref;
  return animations && "\n      transition: all .2s ease-in-out;\n    ";
});
module.exportDefault({
  TestAudioButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"autoplay":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/autoplay/component.jsx                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const intlMessages = defineMessages({
  confirmLabel: {
    id: 'app.audioModal.playAudio',
    description: 'Play audio prompt for autoplay'
  },
  confirmAriaLabel: {
    id: 'app.audioModal.playAudio.arialabel',
    description: 'Provides better context for play audio prompt btn label'
  }
});
const propTypes = {
  handleAllowAutoplay: PropTypes.func.isRequired,
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired
};
class AudioAutoplayPrompt extends PureComponent {
  render() {
    const {
      intl,
      handleAllowAutoplay
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.AutoplayPrompt, null, /*#__PURE__*/React.createElement(Styled.AutoplayButton, {
      label: intl.formatMessage(intlMessages.confirmLabel),
      "aria-label": intl.formatMessage(intlMessages.confirmAriaLabel),
      icon: "thumbs_up",
      circle: true,
      color: "success",
      size: "jumbo",
      onClick: handleAllowAutoplay
    }));
  }
}
module.exportDefault(injectIntl(AudioAutoplayPrompt));
AudioAutoplayPrompt.propTypes = propTypes;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/autoplay/styles.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
const AutoplayPrompt = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-top: auto;\n  margin-bottom: auto;\n"])));
const AutoplayButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  &:focus {\n    outline: none !important;\n  }\n\n  span:last-child {\n    color: black;\n    font-size: 1rem;\n    font-weight: 600;\n  }\n"])));
module.exportDefault({
  AutoplayPrompt,
  AutoplayButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"device-selector":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/device-selector/component.jsx                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 3);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 4);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 5);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 6);
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  kind: PropTypes.oneOf(['audioinput', 'audiooutput']),
  onChange: PropTypes.func.isRequired,
  blocked: PropTypes.bool,
  deviceId: PropTypes.string
};
const defaultProps = {
  kind: 'audioinput',
  blocked: false,
  deviceId: ''
};
const intlMessages = defineMessages({
  fallbackInputLabel: {
    id: 'app.audio.audioSettings.fallbackInputLabel',
    description: 'Audio input device label'
  },
  fallbackOutputLabel: {
    id: 'app.audio.audioSettings.fallbackOutputLabel',
    description: 'Audio output device label'
  },
  defaultOutputDeviceLabel: {
    id: 'app.audio.audioSettings.defaultOutputDeviceLabel',
    description: 'Default output device label'
  },
  findingDevicesLabel: {
    id: 'app.audio.audioSettings.findingDevicesLabel',
    description: 'Finding devices label'
  },
  noDeviceFoundLabel: {
    id: 'app.audio.noDeviceFound',
    description: 'No audio device found'
  }
});
class DeviceSelector extends Component {
  constructor(props) {
    super(props);
    this.handleSelectChange = this.handleSelectChange.bind(this);
    this.state = {
      devices: [],
      options: []
    };
  }
  componentDidMount() {
    const {
      blocked
    } = this.props;
    if (!blocked) this.enumerate();
  }
  componentDidUpdate(prevProps) {
    const {
      blocked
    } = this.props;
    if (prevProps.blocked === true && blocked === false) this.enumerate();
  }
  handleEnumerateDevicesSuccess(deviceInfos) {
    const {
      kind
    } = this.props;
    const devices = deviceInfos.filter(d => d.kind === kind);
    logger.info({
      logCode: 'audiodeviceselector_component_enumeratedevices_success',
      extraInfo: {
        deviceKind: kind,
        devices
      }
    }, 'Success on enumerateDevices() for audio');
    this.setState({
      devices,
      options: devices.map((d, i) => ({
        label: d.label || this.getFallbackLabel(i),
        value: d.deviceId,
        key: uniqueId('device-option-')
      }))
    });
  }
  handleSelectChange(event) {
    const {
      value
    } = event.target;
    const {
      onChange
    } = this.props;
    const {
      devices
    } = this.state;
    const selectedDevice = devices.find(d => d.deviceId === value);
    onChange(selectedDevice.deviceId, selectedDevice, event);
  }
  getFallbackLabel(index) {
    const {
      intl,
      kind
    } = this.props;
    const label = kind === 'audioinput' ? intlMessages.fallbackInputLabel : intlMessages.fallbackOutputLabel;
    return intl.formatMessage(label, {
      0: index
    });
  }
  enumerate() {
    const {
      kind
    } = this.props;
    navigator.mediaDevices.enumerateDevices().then(this.handleEnumerateDevicesSuccess.bind(this)).catch(() => {
      logger.error({
        logCode: 'audiodeviceselector_component_enumeratedevices_error',
        extraInfo: {
          deviceKind: kind
        }
      }, 'Error on enumerateDevices(): ');
    });
  }
  render() {
    const {
      intl,
      kind,
      blocked,
      deviceId
    } = this.props;
    const {
      options
    } = this.state;
    let notFoundOption;
    if (blocked) {
      notFoundOption = /*#__PURE__*/React.createElement("option", {
        value: "finding"
      }, intl.formatMessage(intlMessages.findingDevicesLabel));
    } else if (kind === 'audiooutput' && !('setSinkId' in HTMLMediaElement.prototype)) {
      const defaultOutputDeviceLabel = intl.formatMessage(intlMessages.defaultOutputDeviceLabel);
      notFoundOption = /*#__PURE__*/React.createElement("option", {
        value: "not-found"
      }, defaultOutputDeviceLabel);
    } else {
      const noDeviceFoundLabel = intl.formatMessage(intlMessages.noDeviceFoundLabel);
      notFoundOption = /*#__PURE__*/React.createElement("option", {
        value: "not-found"
      }, noDeviceFoundLabel);
    }
    return /*#__PURE__*/React.createElement(Styled.Select, {
      value: deviceId,
      onChange: this.handleSelectChange,
      disabled: !options.length
    }, options.length ? options.map(option => /*#__PURE__*/React.createElement("option", {
      key: option.key,
      value: option.value
    }, option.label)) : notFoundOption);
  }
}
DeviceSelector.propTypes = propTypes;
DeviceSelector.defaultProps = defaultProps;
module.exportDefault(DeviceSelector);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/device-selector/styles.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  }
}, 1);
let colorGrayLabel, colorWhite, colorGrayLighter, colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayLabel(v) {
    colorGrayLabel = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 2);
const Select = styled.select(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: ", ";\n  border: 0.1rem solid ", ";\n  border-radius: ", ";\n  color: ", ";\n  width: 100%;\n  height: 2rem;\n  padding: 1px;\n\n  &:focus {\n    outline: none;\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n  }\n\n  &:hover,\n  &:focus {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n"])), colorWhite, colorGrayLighter, borderSize, colorGrayLabel, borderSize, borderSize, colorPrimary, colorPrimary, borderSize);
module.exportDefault({
  Select
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"echo-test":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/echo-test/component.jsx                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const intlMessages = defineMessages({
  confirmLabel: {
    id: 'app.audioModal.yes',
    description: 'Hear yourself yes'
  },
  disconfirmLabel: {
    id: 'app.audioModal.no',
    description: 'Hear yourself no'
  },
  confirmAriaLabel: {
    id: 'app.audioModal.yes.arialabel',
    description: 'provides better context for yes btn label'
  },
  disconfirmAriaLabel: {
    id: 'app.audioModal.no.arialabel',
    description: 'provides better context for no btn label'
  }
});
const propTypes = {
  handleYes: PropTypes.func.isRequired,
  handleNo: PropTypes.func.isRequired,
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired
};
class EchoTest extends Component {
  constructor(props) {
    super(props);
    this.state = {
      disabled: false
    };
    this.handleYes = props.handleYes.bind(this);
    this.handleNo = props.handleNo.bind(this);
  }
  componentDidMount() {
    Session.setItem('inEchoTest', true);
  }
  componentWillUnmount() {
    Session.setItem('inEchoTest', false);
  }
  render() {
    const {
      intl
    } = this.props;
    const {
      disabled
    } = this.state;
    const disableYesButtonClicked = callback => () => {
      this.setState({
        disabled: true
      }, callback);
    };
    return /*#__PURE__*/React.createElement(Styled.EchoTest, null, /*#__PURE__*/React.createElement(Styled.EchoTestButton, {
      label: intl.formatMessage(intlMessages.confirmLabel),
      "aria-label": intl.formatMessage(intlMessages.confirmAriaLabel),
      "data-test": "echoYesBtn",
      icon: "thumbs_up",
      disabled: disabled,
      circle: true,
      color: "success",
      size: "jumbo",
      onClick: disableYesButtonClicked(this.handleYes)
    }), /*#__PURE__*/React.createElement(Styled.EchoTestButton, {
      label: intl.formatMessage(intlMessages.disconfirmLabel),
      "aria-label": intl.formatMessage(intlMessages.disconfirmAriaLabel),
      icon: "thumbs_down",
      circle: true,
      color: "danger",
      size: "jumbo",
      onClick: this.handleNo
    }));
  }
}
module.exportDefault(injectIntl(EchoTest));
EchoTest.propTypes = propTypes;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/echo-test/styles.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 2);
const EchoTest = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-top: auto;\n  margin-bottom: auto;\n"])));
const EchoTestButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  &:focus {\n    outline: none !important;\n  }\n\n  &:first-child {\n    margin: 0 3rem 0 0;\n\n    [dir=\"rtl\"] & {\n      margin: 0 0 0 3rem;\n    }\n\n    @media ", " {\n      margin: 0 1rem 0 0;\n\n      [dir=\"rtl\"] & {\n        margin: 0 0 0 1rem;\n      }\n    }\n  }\n\n  span:last-child {\n    color: black;\n    font-size: 1rem;\n    font-weight: 600;\n  }\n"])), smallOnly);
module.exportDefault({
  EchoTest,
  EchoTestButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"help":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/help/component.jsx                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let injectIntl, defineMessages;
module.link("react-intl", {
  injectIntl(v) {
    injectIntl = v;
  },
  defineMessages(v) {
    defineMessages = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  isListenOnly: PropTypes.bool.isRequired,
  audioErr: PropTypes.shape({
    code: PropTypes.number,
    message: PropTypes.string,
    MIC_ERROR: PropTypes.shape({
      NO_SSL: PropTypes.number,
      MAC_OS_BLOCK: PropTypes.number,
      NO_PERMISSION: PropTypes.number
    })
  }).isRequired,
  handleBack: PropTypes.func.isRequired,
  troubleshootingLink: PropTypes.string
};
const defaultProps = {
  troubleshootingLink: ''
};
const intlMessages = defineMessages({
  helpSubtitleMic: {
    id: 'app.audioModal.helpSubtitleMic',
    description: 'Text description for the audio help subtitle (microphones)'
  },
  helpSubtitleGeneric: {
    id: 'app.audioModal.helpSubtitleGeneric',
    description: 'Text description for the audio help subtitle (generic)'
  },
  helpPermissionStep1: {
    id: 'app.audioModal.helpPermissionStep1',
    description: 'Text description for the audio permission help step 1'
  },
  helpPermissionStep2: {
    id: 'app.audioModal.helpPermissionStep2',
    description: 'Text description for the audio permission help step 2'
  },
  helpPermissionStep3: {
    id: 'app.audioModal.helpPermissionStep3',
    description: 'Text description for the audio permission help step 3'
  },
  retryLabel: {
    id: 'app.audio.audioSettings.retryLabel',
    description: 'audio settings retry button label'
  },
  noSSL: {
    id: 'app.audioModal.help.noSSL',
    description: 'Text description for domain not using https'
  },
  macNotAllowed: {
    id: 'app.audioModal.help.macNotAllowed',
    description: 'Text description for mac needed to enable OS setting'
  },
  helpTroubleshoot: {
    id: 'app.audioModal.help.troubleshoot',
    description: 'Text description for help troubleshoot'
  },
  unknownError: {
    id: 'app.audioModal.help.unknownError',
    description: 'Text description for unknown error'
  },
  errorCode: {
    id: 'app.audioModal.help.errorCode',
    description: 'Text description for error code'
  }
});
class Help extends Component {
  getSubtitle() {
    const {
      intl,
      isListenOnly
    } = this.props;
    return !isListenOnly ? intl.formatMessage(intlMessages.helpSubtitleMic) : intl.formatMessage(intlMessages.helpSubtitleGeneric);
  }
  renderNoSSL() {
    const {
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.Text, null, intl.formatMessage(intlMessages.noSSL));
  }
  renderMacNotAllowed() {
    const {
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.Text, null, intl.formatMessage(intlMessages.macNotAllowed));
  }
  renderPermissionHelp() {
    const {
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.Text, null, this.getSubtitle()), /*#__PURE__*/React.createElement(Styled.PermissionHelpSteps, null, /*#__PURE__*/React.createElement("li", null, intl.formatMessage(intlMessages.helpPermissionStep1)), /*#__PURE__*/React.createElement("li", null, intl.formatMessage(intlMessages.helpPermissionStep2)), /*#__PURE__*/React.createElement("li", null, intl.formatMessage(intlMessages.helpPermissionStep3))));
  }
  renderGenericErrorHelp() {
    const {
      intl,
      audioErr
    } = this.props;
    const {
      code,
      message
    } = audioErr;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.Text, null, this.getSubtitle()), /*#__PURE__*/React.createElement(Styled.Text, null, intl.formatMessage(intlMessages.unknownError)), /*#__PURE__*/React.createElement(Styled.UnknownError, null, intl.formatMessage(intlMessages.errorCode, {
      0: code,
      1: message || 'UnknownError'
    })));
  }
  renderHelpMessage() {
    const {
      audioErr
    } = this.props;
    const {
      MIC_ERROR
    } = audioErr;
    switch (audioErr.code) {
      case MIC_ERROR.NO_SSL:
        return this.renderNoSSL();
      case MIC_ERROR.MAC_OS_BLOCK:
        return this.renderMacNotAllowed();
      case MIC_ERROR.NO_PERMISSION:
        return this.renderPermissionHelp();
      default:
        return this.renderGenericErrorHelp();
    }
  }
  render() {
    const {
      intl,
      handleBack,
      troubleshootingLink
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.Help, null, this.renderHelpMessage(), troubleshootingLink && /*#__PURE__*/React.createElement(Styled.Text, null, /*#__PURE__*/React.createElement(Styled.TroubleshootLink, {
      href: troubleshootingLink,
      target: "_blank",
      rel: "noopener noreferrer"
    }, intl.formatMessage(intlMessages.helpTroubleshoot))), /*#__PURE__*/React.createElement(Styled.EnterAudio, null, /*#__PURE__*/React.createElement(Styled.RetryButton, {
      label: intl.formatMessage(intlMessages.retryLabel),
      size: "md",
      color: "primary",
      onClick: handleBack
    })));
  }
}
Help.propTypes = propTypes;
Help.defaultProps = defaultProps;
module.exportDefault(injectIntl(Help));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/help/styles.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 2);
let jumboPaddingY, smPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  jumboPaddingY(v) {
    jumboPaddingY = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  }
}, 3);
let fontSizeSmaller;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmaller(v) {
    fontSizeSmaller = v;
  }
}, 4);
let colorLink;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorLink(v) {
    colorLink = v;
  }
}, 5);
const Help = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  min-height: 10rem;\n"])));
const Text = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  text-align: center;\n  justify-content: center;\n  margin-top: auto;\n  margin-bottom: auto;\n"])));
const EnterAudio = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: flex-end;\n  margin-top: ", ";\n"])), jumboPaddingY);
const RetryButton = styled(Button)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin-right: 0.5rem;\n  margin-left: inherit;\n\n  [dir=\"rtl\"] & {\n    margin-right: inherit;\n    margin-left: 0.5rem;\n  }\n\n  @media ", " {\n    margin-right: none;\n    margin-left: inherit;\n\n    [dir=\"rtl\"] & {\n      margin-right: inherit;\n      margin-left: auto;\n    }\n  }\n"])), smallOnly);
const TroubleshootLink = styled.a(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  color: ", ";\n"])), colorLink);
const UnknownError = styled.label(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  font-size: ", ";\n  justify-content: center;\n  text-align: center;\n  margin-top: ", ";\n  margin-bottom: ", ";\n"])), fontSizeSmaller, smPaddingY, smPaddingY);
const PermissionHelpSteps = styled.ul(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  text-align: left;\n  justify-content: center;\n  li {\n    margin-bottom: ", ";\n  }\n"])), smPaddingY);
module.exportDefault({
  Help,
  Text,
  EnterAudio,
  RetryButton,
  TroubleshootLink,
  UnknownError,
  PermissionHelpSteps
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"local-echo":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/local-echo/component.jsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useState, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 4);
let Service;
module.link("/imports/ui/components/audio/local-echo/service", {
  default(v) {
    Service = v;
  }
}, 5);
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  stream: PropTypes.shape({
    active: PropTypes.bool,
    id: PropTypes.string
  }),
  initialHearingState: PropTypes.bool
};
const intlMessages = defineMessages({
  stopAudioFeedbackLabel: {
    id: 'app.audio.stopAudioFeedback',
    description: 'Stop audio feedback button label'
  },
  testSpeakerLabel: {
    id: 'app.audio.audioSettings.testSpeakerLabel',
    description: 'Label for the speaker test button'
  }
});
const LocalEcho = _ref => {
  let {
    intl,
    stream = null,
    initialHearingState = false
  } = _ref;
  const loopbackAgent = useRef(null);
  const [hearing, setHearing] = useState(initialHearingState);
  const Settings = getSettingsSingletonInstance();
  const {
    animations
  } = Settings.application;
  const icon = hearing ? 'mute' : 'unmute';
  const label = hearing ? intlMessages.stopAudioFeedbackLabel : intlMessages.testSpeakerLabel;
  const applyHearingState = _stream => {
    if (hearing) {
      Service.playEchoStream(_stream, loopbackAgent.current);
    } else {
      Service.deattachEchoStream();
    }
  };
  const cleanup = () => {
    if (loopbackAgent.current) loopbackAgent.current.stop();
    Service.deattachEchoStream();
  };
  useEffect(() => {
    if (Service.useRTCLoopback()) {
      loopbackAgent.current = Service.createAudioRTCLoopback();
    }
    return cleanup;
  }, []);
  useEffect(() => {
    applyHearingState(stream);
  }, [stream, hearing]);
  return /*#__PURE__*/React.createElement(Styled.LocalEchoTestButton, {
    "data-test": hearing ? 'stopHearingButton' : 'testSpeakerButton',
    $hearing: hearing,
    label: intl.formatMessage(label),
    icon: icon,
    size: "md",
    color: "primary",
    onClick: () => setHearing(!hearing),
    animations: animations
  });
};
LocalEcho.propTypes = propTypes;
module.exportDefault(injectIntl( /*#__PURE__*/React.memo(LocalEcho)));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/local-echo/container.jsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let LocalEcho;
module.link("/imports/ui/components/audio/local-echo/component", {
  default(v) {
    LocalEcho = v;
  }
}, 1);
const LocalEchoContainer = props => {
  const {
    initialHearingState
  } = window.meetingClientSettings.public.media.localEchoTest;
  return /*#__PURE__*/React.createElement(LocalEcho, _extends({}, props, {
    initialHearingState: initialHearingState
  }));
};
module.exportDefault(LocalEchoContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/local-echo/service.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let LocalPCLoopback;
module.link("/imports/ui/services/webrtc-base/local-pc-loopback", {
  default(v) {
    LocalPCLoopback = v;
  }
}, 0);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 1);
let audioContext = null;
let sourceContext = null;
let contextDestination = null;
let stubAudioElement = null;
let delayNode = null;
const useRTCLoopback = () => {
  const USE_RTC_LOOPBACK_CHR = window.meetingClientSettings.public.media.localEchoTest.useRtcLoopbackInChromium;
  return (browserInfo.isChrome || browserInfo.isEdge) && USE_RTC_LOOPBACK_CHR;
};
const createAudioRTCLoopback = () => new LocalPCLoopback({
  audio: true
});
const cleanupDelayNode = () => {
  if (delayNode) {
    delayNode.disconnect();
    delayNode = null;
  }
  if (sourceContext) {
    sourceContext.disconnect();
    sourceContext = null;
  }
  if (audioContext) {
    audioContext.close();
    audioContext = null;
  }
  if (contextDestination) {
    contextDestination.disconnect();
    contextDestination = null;
  }
  if (stubAudioElement) {
    stubAudioElement.pause();
    stubAudioElement.srcObject = null;
    stubAudioElement = null;
  }
};
const addDelayNode = stream => {
  const MEDIA_TAG = window.meetingClientSettings.public.media.mediaTag;
  const {
    delayTime = 0.5,
    maxDelayTime = 2
  } = window.meetingClientSettings.public.media.localEchoTest.delay;
  if (stream) {
    if (delayNode || audioContext || sourceContext) cleanupDelayNode();
    const audioElement = document.querySelector(MEDIA_TAG);
    // Workaround: attach the stream to a muted stub audio element to be able to play it in
    // Chromium-based browsers. See https://bugs.chromium.org/p/chromium/issues/detail?id=933677
    stubAudioElement = new Audio();
    stubAudioElement.muted = true;
    stubAudioElement.srcObject = stream;

    // Create a new AudioContext to be able to add a delay to the stream
    audioContext = new AudioContext();
    sourceContext = audioContext.createMediaStreamSource(stream);
    contextDestination = audioContext.createMediaStreamDestination();
    // Create a DelayNode to add a delay to the stream
    delayNode = new DelayNode(audioContext, {
      delayTime,
      maxDelayTime
    });
    // Connect the stream to the DelayNode and then to the MediaStreamDestinationNode
    // to be able to play the stream.
    sourceContext.connect(delayNode);
    delayNode.connect(contextDestination);
    delayNode.delayTime.setValueAtTime(delayTime, audioContext.currentTime);
    // Play the stream with the delay in the default audio element (remote-media)
    audioElement.srcObject = contextDestination.stream;
  }
};
const deattachEchoStream = () => {
  const MEDIA_TAG = window.meetingClientSettings.public.media.mediaTag;
  const {
    enabled: DELAY_ENABLED = true
  } = window.meetingClientSettings.public.media.localEchoTest.delay;
  const audioElement = document.querySelector(MEDIA_TAG);
  if (DELAY_ENABLED) {
    audioElement.muted = false;
    cleanupDelayNode();
  }
  audioElement.pause();
  audioElement.srcObject = null;
};
const playEchoStream = async function (stream) {
  let loopbackAgent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  const MEDIA_TAG = window.meetingClientSettings.public.media.mediaTag;
  const {
    enabled: DELAY_ENABLED = true
  } = window.meetingClientSettings.public.media.localEchoTest.delay;
  if (stream) {
    deattachEchoStream();
    let streamToPlay = stream;
    if (loopbackAgent) {
      // Chromium based browsers need audio to go through PCs for echo cancellation
      // to work. See https://bugs.chromium.org/p/chromium/issues/detail?id=687574
      try {
        await loopbackAgent.start(stream);
        streamToPlay = loopbackAgent.loopbackStream;
      } catch (error) {
        loopbackAgent.stop();
      }
    }
    if (DELAY_ENABLED) {
      addDelayNode(streamToPlay);
    } else {
      // No delay: play the stream in the default audio element (remote-media),
      // no strings attached.
      const audioElement = document.querySelector(MEDIA_TAG);
      audioElement.srcObject = streamToPlay;
      audioElement.muted = false;
      audioElement.play();
    }
  }
};
module.exportDefault({
  useRTCLoopback,
  createAudioRTCLoopback,
  deattachEchoStream,
  playEchoStream
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/local-echo/styles.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let colorPrimary, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 2);
const LocalEchoTestButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin: 0 !important;\n  font-weight: normal;\n  border: none !important;\n\n  &:hover {\n    color: #0c5cb2;\n  }\n\n  i {\n    ", "\n  }\n\n  background-color: transparent !important;\n  color: ", " !important;\n\n  ", "\n"])), _ref => {
  let {
    animations
  } = _ref;
  return animations && "\n      transition: all .2s ease-in-out;\n    ";
}, colorPrimary, _ref2 => {
  let {
    $hearing
  } = _ref2;
  return $hearing && "\n    background-color: ".concat(colorPrimary, " !important;\n    color: ").concat(colorWhite, " !important;\n  ");
});
module.exportDefault({
  LocalEchoTestButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"permissions-overlay":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/permissions-overlay/component.jsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let injectIntl, defineMessages;
module.link("react-intl", {
  injectIntl(v) {
    injectIntl = v;
  },
  defineMessages(v) {
    defineMessages = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 4);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 5);
const propTypes = {
  intl: PropTypes.object.isRequired,
  closeModal: PropTypes.func.isRequired
};
const intlMessages = defineMessages({
  title: {
    id: 'app.audio.permissionsOverlay.title',
    description: 'Title for the overlay'
  },
  hint: {
    id: 'app.audio.permissionsOverlay.hint',
    description: 'Hint for the overlay'
  }
});
const {
  isChrome,
  isFirefox,
  isSafari
} = browserInfo;
const PermissionsOverlay = _ref => {
  let {
    intl,
    closeModal
  } = _ref;
  const Settings = getSettingsSingletonInstance();
  const {
    animations
  } = Settings.application;
  return /*#__PURE__*/React.createElement(Styled.PermissionsOverlayModal, {
    overlayClassName: "permissionsOverlay",
    onRequestClose: closeModal,
    hideBorder: true,
    isFirefox: isFirefox,
    isChrome: isChrome,
    isSafari: isSafari,
    animations: animations
  }, /*#__PURE__*/React.createElement(Styled.Content, null, intl.formatMessage(intlMessages.title), /*#__PURE__*/React.createElement("small", null, intl.formatMessage(intlMessages.hint))));
};
PermissionsOverlay.propTypes = propTypes;
module.exportDefault(injectIntl(PermissionsOverlay));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/permissions-overlay/styles.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 1);
let colorBlack;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorBlack(v) {
    colorBlack = v;
  }
}, 2);
let jumboPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  jumboPaddingX(v) {
    jumboPaddingX = v;
  }
}, 3);
const bounce = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0%,\n  20%,\n  50%,\n  80%,\n  100% {\n    -ms-transform: translateY(0);\n    transform: translateY(0);\n  }\n  40% {\n    -ms-transform: translateY(10px);\n    transform: translateY(10px);\n  }\n  60% {\n    -ms-transform: translateY(5px);\n    transform: translateY(5px);\n  }\n"])));
const PermissionsOverlayModal = styled(ModalSimple)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n\n  ", "\n  \n  position: absolute;\n  background: none;\n  box-shadow: none;\n  color: #fff;\n  font-size: 16px;\n  font-weight: 400;\n  padding: 0 0 0 ", ";\n  line-height: 18px;\n  width: 340px;\n\n  [dir=\"rtl\"] & {\n    padding: 0 ", " 0 0;\n  }\n\n  small {\n    display: block;\n    font-size: 12px;\n    line-height: 14px;\n    margin-top: 3px;\n    opacity: .6;\n  }\n\n  &:after {\n    top: -65px;\n    left: -20px;\n    right: auto;\n    font-size: 20px;\n    display: block;\n    font-family: 'bbb-icons';\n    content: \"\\E906\";\n    position: relative;\n\n    [dir=\"rtl\"] & {\n      left: auto;\n      right: -20px;\n    }\n\n    ", "\n  }\n"], ["\n  ", "\n\n  ", "\n\n  ", "\n  \n  position: absolute;\n  background: none;\n  box-shadow: none;\n  color: #fff;\n  font-size: 16px;\n  font-weight: 400;\n  padding: 0 0 0 ", ";\n  line-height: 18px;\n  width: 340px;\n\n  [dir=\"rtl\"] & {\n    padding: 0 ", " 0 0;\n  }\n\n  small {\n    display: block;\n    font-size: 12px;\n    line-height: 14px;\n    margin-top: 3px;\n    opacity: .6;\n  }\n\n  &:after {\n    top: -65px;\n    left: -20px;\n    right: auto;\n    font-size: 20px;\n    display: block;\n    font-family: 'bbb-icons';\n    content: \"\\\\E906\";\n    position: relative;\n\n    [dir=\"rtl\"] & {\n      left: auto;\n      right: -20px;\n    }\n\n    ", "\n  }\n"])), _ref => {
  let {
    isFirefox
  } = _ref;
  return isFirefox && "\n    top: 8em;\n    left: 22em;\n    right: auto;\n\n    [dir=\"rtl\"] & {\n      right: none;\n      left: none;\n      top: 15rem;\n    }\n  ";
}, _ref2 => {
  let {
    isChrome
  } = _ref2;
  return isChrome && "\n    top: 5.5em;\n    left: 18em;\n    right: auto;\n\n    [dir=\"rtl\"] & {\n      right: none;\n      left: none;\n      top: 15rem;\n    }\n  ";
}, _ref3 => {
  let {
    isSafari
  } = _ref3;
  return isSafari && "\n    top: 150px;\n    left:0;\n    right:0;\n    margin-left: auto;\n    margin-right: auto;\n  ";
}, jumboPaddingX, jumboPaddingX, _ref4 => {
  let {
    animations
  } = _ref4;
  return animations && css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n      animation: ", " 2s infinite;\n    "])), bounce);
});
const Content = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  color: ", ";\n"])), colorBlack);
module.exportDefault({
  PermissionsOverlayModal,
  Content
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/container.jsx                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let useSubscription;
module.link("@apollo/client", {
  useSubscription(v) {
    useSubscription = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 3);
let injectIntl, defineMessages;
module.link("react-intl", {
  injectIntl(v) {
    injectIntl = v;
  },
  defineMessages(v) {
    defineMessages = v;
  }
}, 4);
let range;
module.link("/imports/utils/array-utils", {
  range(v) {
    range = v;
  }
}, 5);
let useMeetingIsBreakout;
module.link("/imports/ui/components/app/service", {
  useMeetingIsBreakout(v) {
    useMeetingIsBreakout = v;
  }
}, 6);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 7);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 8);
let VideoPreviewContainer;
module.link("/imports/ui/components/video-preview/container", {
  default(v) {
    VideoPreviewContainer = v;
  }
}, 9);
let lockContextContainer;
module.link("/imports/ui/components/lock-viewers/context/container", {
  default(v) {
    lockContextContainer = v;
  }
}, 10);
let joinMicrophone, joinListenOnly;
module.link("/imports/ui/components/audio/audio-modal/service", {
  joinMicrophone(v) {
    joinMicrophone = v;
  },
  joinListenOnly(v) {
    joinListenOnly = v;
  }
}, 11);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 12);
let AudioModalContainer;
module.link("./audio-modal/container", {
  default(v) {
    AudioModalContainer = v;
  }
}, 13);
let useToggleVoice;
module.link("./audio-graphql/hooks/useToggleVoice", {
  default(v) {
    useToggleVoice = v;
  }
}, 14);
let usePreviousValue;
module.link("/imports/ui/hooks/usePreviousValue", {
  default(v) {
    usePreviousValue = v;
  }
}, 15);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 16);
let toggleMuteMicrophone;
module.link("/imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/service", {
  toggleMuteMicrophone(v) {
    toggleMuteMicrophone = v;
  }
}, 17);
let useSettings;
module.link("../../services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 18);
let SETTINGS;
module.link("../../services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 19);
let useStorageKey;
module.link("../../services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 20);
let BREAKOUT_COUNT;
module.link("./queries", {
  BREAKOUT_COUNT(v) {
    BREAKOUT_COUNT = v;
  }
}, 21);
let useMeeting;
module.link("../../core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 22);
let useWhoIsUnmuted;
module.link("../../core/hooks/useWhoIsUnmuted", {
  default(v) {
    useWhoIsUnmuted = v;
  }
}, 23);
const intlMessages = defineMessages({
  joinedAudio: {
    id: 'app.audioManager.joinedAudio',
    description: 'Joined audio toast message'
  },
  joinedEcho: {
    id: 'app.audioManager.joinedEcho',
    description: 'Joined echo test toast message'
  },
  leftAudio: {
    id: 'app.audioManager.leftAudio',
    description: 'Left audio toast message'
  },
  reconnectingAudio: {
    id: 'app.audioManager.reconnectingAudio',
    description: 'Reconnecting audio toast message'
  },
  genericError: {
    id: 'app.audioManager.genericError',
    description: 'Generic error message'
  },
  connectionError: {
    id: 'app.audioManager.connectionError',
    description: 'Connection error message'
  },
  requestTimeout: {
    id: 'app.audioManager.requestTimeout',
    description: 'Request timeout error message'
  },
  invalidTarget: {
    id: 'app.audioManager.invalidTarget',
    description: 'Invalid target error message'
  },
  mediaError: {
    id: 'app.audioManager.mediaError',
    description: 'Media error message'
  },
  BrowserNotSupported: {
    id: 'app.audioNotification.audioFailedError1003',
    description: 'browser not supported error message'
  },
  reconectingAsListener: {
    id: 'app.audioNotificaion.reconnectingAsListenOnly',
    description: 'ice negotiation error message'
  }
});
let didMountAutoJoin = false;
const webRtcError = range(1001, 1011).reduce((acc, value) => _objectSpread(_objectSpread({}, acc), {}, {
  [value]: {
    id: "app.audioNotification.audioFailedError".concat(value)
  }
}), {});
const messages = {
  info: {
    JOINED_AUDIO: intlMessages.joinedAudio,
    JOINED_ECHO: intlMessages.joinedEcho,
    LEFT_AUDIO: intlMessages.leftAudio,
    RECONNECTING_AUDIO: intlMessages.reconnectingAudio
  },
  error: _objectSpread({
    GENERIC_ERROR: intlMessages.genericError,
    CONNECTION_ERROR: intlMessages.connectionError,
    REQUEST_TIMEOUT: intlMessages.requestTimeout,
    INVALID_TARGET: intlMessages.invalidTarget,
    MEDIA_ERROR: intlMessages.mediaError,
    WEBRTC_NOT_SUPPORTED: intlMessages.BrowserNotSupported
  }, webRtcError)
};
const AudioContainer = props => {
  var _breakoutCountData$br, _breakoutCountData$br2, _breakoutCountData$br3;
  const {
    isAudioModalOpen,
    setAudioModalIsOpen,
    setVideoPreviewModalIsOpen,
    isVideoPreviewModalOpen,
    intl,
    userLocks,
    speechLocale
  } = props;
  const APP_CONFIG = window.meetingClientSettings.public.app;
  const KURENTO_CONFIG = window.meetingClientSettings.public.kurento;
  const autoJoin = getFromUserSettings('bbb_auto_join_audio', APP_CONFIG.autoJoin);
  const enableVideo = getFromUserSettings('bbb_enable_video', KURENTO_CONFIG.enableVideo);
  const autoShareWebcam = getFromUserSettings('bbb_auto_share_webcam', KURENTO_CONFIG.autoShareWebcam);
  const {
    userWebcam
  } = userLocks;
  const prevProps = usePreviousValue(props);
  const toggleVoice = useToggleVoice();
  const userSelectedMicrophone = !!useStorageKey('clientUserSelectedMicrophone', 'session');
  const userSelectedListenOnly = !!useStorageKey('clientUserSelectedListenOnly', 'session');
  const {
    microphoneConstraints
  } = useSettings(SETTINGS.APPLICATION);
  const {
    data: breakoutCountData
  } = useSubscription(BREAKOUT_COUNT);
  const hasBreakoutRooms = ((_breakoutCountData$br = breakoutCountData === null || breakoutCountData === void 0 ? void 0 : (_breakoutCountData$br2 = breakoutCountData.breakoutRoom_aggregate) === null || _breakoutCountData$br2 === void 0 ? void 0 : (_breakoutCountData$br3 = _breakoutCountData$br2.aggregate) === null || _breakoutCountData$br3 === void 0 ? void 0 : _breakoutCountData$br3.count) !== null && _breakoutCountData$br !== void 0 ? _breakoutCountData$br : 0) > 0;
  const meetingIsBreakout = useMeetingIsBreakout();
  const {
    data: meeting
  } = useMeeting(m => {
    var _m$voiceSettings;
    return {
      voiceSettings: {
        voiceConf: m === null || m === void 0 ? void 0 : (_m$voiceSettings = m.voiceSettings) === null || _m$voiceSettings === void 0 ? void 0 : _m$voiceSettings.voiceConf
      }
    };
  });
  const {
    data: currentUserName
  } = useCurrentUser(u => u.name);
  const openAudioModal = () => setAudioModalIsOpen(true);
  const openVideoPreviewModal = () => {
    if (userWebcam) return;
    setVideoPreviewModalIsOpen(true);
  };
  const init = async () => {
    var _meeting$voiceSetting;
    await Service.init(messages, intl, toggleVoice, speechLocale, meeting === null || meeting === void 0 ? void 0 : (_meeting$voiceSetting = meeting.voiceSettings) === null || _meeting$voiceSetting === void 0 ? void 0 : _meeting$voiceSetting.voiceConf, currentUserName);
    if (!autoJoin || didMountAutoJoin) {
      if (enableVideo && autoShareWebcam) {
        openVideoPreviewModal();
      }
      return Promise.resolve(false);
    }
    Session.setItem('audioModalIsOpen', true);
    if (enableVideo && autoShareWebcam) {
      openAudioModal();
      openVideoPreviewModal();
      didMountAutoJoin = true;
    } else if (!(userSelectedMicrophone && userSelectedListenOnly && meetingIsBreakout)) {
      openAudioModal();
      didMountAutoJoin = true;
    }
    return Promise.resolve(true);
  };
  const {
    hasBreakoutRooms: hadBreakoutRooms
  } = prevProps || {};
  const userIsReturningFromBreakoutRoom = hadBreakoutRooms && !hasBreakoutRooms;
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    userId: u.userId
  }));
  const {
    data: unmutedUsers
  } = useWhoIsUnmuted();
  const currentUserMuted = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId) && !unmutedUsers[currentUser.userId];
  const joinAudio = () => {
    if (Service.isConnected()) return;
    if (userSelectedMicrophone) {
      joinMicrophone(true);
      return;
    }
    if (userSelectedListenOnly) joinListenOnly();
  };
  useEffect(() => {
    // Data is not loaded yet.
    // We don't know whether the meeting is a breakout or not.
    // So, postpone the decision.
    if (meetingIsBreakout === undefined) return;
    init().then(() => {
      if (meetingIsBreakout && !Service.isUsingAudio()) {
        joinAudio();
      }
    });
  }, [meetingIsBreakout]);
  useEffect(() => {
    if (userIsReturningFromBreakoutRoom) {
      joinAudio();
    }
  }, [userIsReturningFromBreakoutRoom]);
  if (Service.isConnected() && !Service.isListenOnly()) {
    Service.updateAudioConstraints(microphoneConstraints);
    if (userLocks.userMic && !currentUserMuted) {
      toggleMuteMicrophone(!currentUserMuted, toggleVoice);
      notify(intl.formatMessage(intlMessages.reconectingAsListener), 'info', 'volume_level_2');
    }
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, isAudioModalOpen ? /*#__PURE__*/React.createElement(AudioModalContainer, {
    priority: 'low',
    setIsOpen: setAudioModalIsOpen,
    isOpen: isAudioModalOpen
  }) : null, isVideoPreviewModalOpen ? /*#__PURE__*/React.createElement(VideoPreviewContainer, {
    callbackToClose: () => {
      setVideoPreviewModalIsOpen(false);
    },
    priority: 'low',
    setIsOpen: setVideoPreviewModalIsOpen,
    isOpen: isVideoPreviewModalOpen
  }) : null);
};
module.exportDefault(lockContextContainer(injectIntl(AudioContainer)));
AudioContainer.propTypes = {
  isAudioModalOpen: PropTypes.bool.isRequired,
  setAudioModalIsOpen: PropTypes.func.isRequired,
  setVideoPreviewModalIsOpen: PropTypes.func.isRequired,
  isVideoPreviewModalOpen: PropTypes.bool.isRequired,
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  userLocks: PropTypes.shape({
    userMic: PropTypes.bool.isRequired
  }).isRequired,
  speechLocale: PropTypes.string.isRequired
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/queries.ts                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  BREAKOUT_COUNT: () => BREAKOUT_COUNT
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const BREAKOUT_COUNT = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription BreakoutCount {\n    breakoutRoom_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n"])));
module.exportDefault({
  BREAKOUT_COUNT
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/audio/service.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 0);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
let Storage;
module.link("../../services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 3);
let useReactiveVar;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 4);
const MUTED_KEY = 'muted';
const recoverMicState = toggleVoice => {
  const muted = Storage.getItem(MUTED_KEY);
  if (muted === undefined || muted === null) {
    return;
  }
  logger.debug({
    logCode: 'audio_recover_mic_state'
  }, "Audio recover previous mic state: muted = ".concat(muted));
  toggleVoice(Auth.userID, muted);
};
const audioEventHandler = toggleVoice => event => {
  if (!event) {
    return;
  }
  switch (event.name) {
    case 'started':
      if (!event.isListenOnly) recoverMicState(toggleVoice);
      break;
    default:
      break;
  }
};
const init = (messages, intl, toggleVoice, speechLocale, voiceConf, username) => {
  AudioManager.setAudioMessages(messages, intl);
  if (AudioManager.initialized) return Promise.resolve(false);
  const meetingId = Auth.meetingID;
  const userId = Auth.userID;
  const {
    sessionToken
  } = Auth;
  const voiceBridge = voiceConf;

  // FIX ME
  const microphoneLockEnforced = false;
  const userData = {
    meetingId,
    userId,
    sessionToken,
    username,
    voiceBridge,
    microphoneLockEnforced,
    speechLocale
  };
  return AudioManager.init(userData, audioEventHandler(toggleVoice));
};
const useIsUsingAudio = () => {
  const isConnected = useReactiveVar(AudioManager._isConnected.value);
  const isConnecting = useReactiveVar(AudioManager._isConnecting.value);
  const isHangingUp = useReactiveVar(AudioManager._isHangingUp.value);
  const isEchoTest = useReactiveVar(AudioManager._isEchoTest.value);
  return Boolean(isConnected || isConnecting || isHangingUp || isEchoTest);
};
module.exportDefault({
  init,
  exitAudio: () => AudioManager.exitAudio(),
  forceExitAudio: () => AudioManager.forceExitAudio(),
  transferCall: () => AudioManager.transferCall(),
  joinListenOnly: () => AudioManager.joinListenOnly(),
  joinMicrophone: () => AudioManager.joinMicrophone(),
  joinEchoTest: () => AudioManager.joinEchoTest(),
  changeInputDevice: inputDeviceId => AudioManager.changeInputDevice(inputDeviceId),
  changeInputStream: newInputStream => {
    AudioManager.inputStream = newInputStream;
  },
  liveChangeInputDevice: inputDeviceId => AudioManager.liveChangeInputDevice(inputDeviceId),
  changeOutputDevice: (outputDeviceId, isLive) => AudioManager.changeOutputDevice(outputDeviceId, isLive),
  isConnectedToBreakout: () => {
    const transferStatus = AudioManager.getBreakoutAudioTransferStatus();
    if (transferStatus.status === AudioManager.BREAKOUT_AUDIO_TRANSFER_STATES.CONNECTED) return true;
    return false;
  },
  isConnected: () => {
    const transferStatus = AudioManager.getBreakoutAudioTransferStatus();
    if (!!transferStatus.breakoutMeetingId && transferStatus.breakoutMeetingId !== Auth.meetingID) return false;
    return AudioManager.isConnected;
  },
  isUsingAudio: () => AudioManager.isUsingAudio(),
  isConnecting: () => AudioManager.isConnecting,
  isListenOnly: () => AudioManager.isListenOnly,
  isEchoTest: () => AudioManager.isEchoTest,
  isMuted: () => AudioManager.isMuted,
  autoplayBlocked: () => AudioManager.autoplayBlocked,
  handleAllowAutoplay: () => AudioManager.handleAllowAutoplay(),
  playAlertSound: url => AudioManager.playAlertSound(url),
  updateAudioConstraints: constraints => AudioManager.updateAudioConstraints(constraints),
  recoverMicState,
  isReconnecting: () => AudioManager.isReconnecting,
  setBreakoutAudioTransferStatus: status => AudioManager.setBreakoutAudioTransferStatus(status),
  getBreakoutAudioTransferStatus: () => AudioManager.getBreakoutAudioTransferStatus(),
  getStats: () => AudioManager.getStats(),
  notify: (message, error, icon) => {
    AudioManager.notify(message, error, icon);
  },
  useIsUsingAudio
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"plugins-engine":{"data-consumption":{"domain":{"chat":{"loaded-chat-messages":{"hook-manager.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/chat/loaded-chat-messages/hook-manager.ts              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 1);
let DataConsumptionHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-consumption/enums", {
  DataConsumptionHooks(v) {
    DataConsumptionHooks = v;
  }
}, 2);
let useLoadedPageGathering;
module.link("/imports/ui/core/hooks/useLoadedChatMessages", {
  default(v) {
    useLoadedPageGathering = v;
  }
}, 3);
let formatLoadedChatMessagesDataFromGraphql;
module.link("./utils", {
  default(v) {
    formatLoadedChatMessagesDataFromGraphql = v;
  }
}, 4);
const LoadedChatMessagesHookContainer = () => {
  const [sendSignal, setSendSignal] = useState(false);
  const [chatMessagesData] = useLoadedPageGathering(message => ({
    createdAt: message.createdAt,
    message: message.message,
    messageId: message.messageId,
    user: message.user
  }));
  const updateLoadedChatMessagesForPlugin = () => {
    window.dispatchEvent(new CustomEvent(HookEvents.UPDATED, {
      detail: {
        data: formatLoadedChatMessagesDataFromGraphql(chatMessagesData),
        hook: DataConsumptionHooks.LOADED_CHAT_MESSAGES
      }
    }));
  };
  useEffect(() => {
    updateLoadedChatMessagesForPlugin();
  }, [chatMessagesData, sendSignal]);
  useEffect(() => {
    const updateHookUseLoadedChatMessages = event => {
      if (event.detail.hook === DataConsumptionHooks.LOADED_CHAT_MESSAGES) setSendSignal(signal => !signal);
    };
    window.addEventListener(HookEvents.SUBSCRIBED, updateHookUseLoadedChatMessages);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, updateHookUseLoadedChatMessages);
    };
  }, []);
  return null;
};
module.exportDefault(LoadedChatMessagesHookContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/chat/loaded-chat-messages/utils.ts                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const formatLoadedChatMessagesDataFromGraphql = responseData => ({
  data: responseData.map(chatMessagesData => {
    var _chatMessagesData$use;
    return {
      createdAt: chatMessagesData.createdAt,
      message: chatMessagesData.message,
      messageId: chatMessagesData.messageId,
      senderUserId: (_chatMessagesData$use = chatMessagesData.user) === null || _chatMessagesData$use === void 0 ? void 0 : _chatMessagesData$use.userId
    };
  }),
  loading: !responseData,
  error: undefined
});
module.exportDefault(formatLoadedChatMessagesDataFromGraphql);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"meeting":{"from-core":{"hook-manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/meeting/from-core/hook-manager.tsx                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useRef, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 1);
let DataConsumptionHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-consumption/enums", {
  DataConsumptionHooks(v) {
    DataConsumptionHooks = v;
  }
}, 2);
let equals;
module.link("ramda", {
  equals(v) {
    equals = v;
  }
}, 3);
let formatMeetingResponseFromGraphql;
module.link("./utils", {
  default(v) {
    formatMeetingResponseFromGraphql = v;
  }
}, 4);
const MeetingHookContainer = props => {
  const [sendSignal, setSendSignal] = useState(false);
  const previousMeeting = useRef(null);
  const {
    data: meeting
  } = props;
  const updateMeetingForPlugin = () => {
    const meetingProjection = formatMeetingResponseFromGraphql(meeting);
    window.dispatchEvent(new CustomEvent(HookEvents.UPDATED, {
      detail: {
        data: meetingProjection,
        hook: DataConsumptionHooks.MEETING
      }
    }));
  };
  useEffect(() => {
    if (!equals(previousMeeting.current, meeting)) {
      previousMeeting.current = meeting;
      updateMeetingForPlugin();
    }
  }, [meeting]);
  useEffect(() => {
    updateMeetingForPlugin();
  }, [sendSignal]);
  useEffect(() => {
    const updateHookUseCurrentMeeting = event => {
      if (event.detail.hook === DataConsumptionHooks.MEETING) setSendSignal(signal => !signal);
    };
    window.addEventListener(HookEvents.SUBSCRIBED, updateHookUseCurrentMeeting);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, updateHookUseCurrentMeeting);
    };
  }, []);
  return null;
};
module.exportDefault(MeetingHookContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/meeting/from-core/utils.ts                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const formatMeetingResponseFromGraphql = graphqlDataResult => {
  var _graphqlDataResult$da, _graphqlDataResult$da2, _graphqlDataResult$da3, _graphqlDataResult$er;
  return {
    data: graphqlDataResult.data ? {
      name: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da = graphqlDataResult.data) === null || _graphqlDataResult$da === void 0 ? void 0 : _graphqlDataResult$da.name,
      meetingId: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da2 = graphqlDataResult.data) === null || _graphqlDataResult$da2 === void 0 ? void 0 : _graphqlDataResult$da2.meetingId,
      loginUrl: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da3 = graphqlDataResult.data) === null || _graphqlDataResult$da3 === void 0 ? void 0 : _graphqlDataResult$da3.loginUrl
    } : undefined,
    loading: graphqlDataResult.loading,
    error: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$er = graphqlDataResult.errors) === null || _graphqlDataResult$er === void 0 ? void 0 : _graphqlDataResult$er[0]
  };
};
module.exportDefault(formatMeetingResponseFromGraphql);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"presentations":{"current-presentation":{"hook-manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/presentations/current-presentation/hook-manager.tsx    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let useCurrentPresentation;
module.link("/imports/ui/core/hooks/useCurrentPresentation", {
  default(v) {
    useCurrentPresentation = v;
  }
}, 1);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 2);
let DataConsumptionHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-consumption/enums", {
  DataConsumptionHooks(v) {
    DataConsumptionHooks = v;
  }
}, 3);
let formatCurrentPresentation;
module.link("./utils", {
  default(v) {
    formatCurrentPresentation = v;
  }
}, 4);
const CurrentPresentationHookContainer = () => {
  const [sendSignal, setSendSignal] = useState(false);
  const currentPresentation = useCurrentPresentation(currentPresentationData => currentPresentationData);
  const updatePresentationForPlugin = () => {
    const formattedCurrentPresentation = formatCurrentPresentation(currentPresentation);
    window.dispatchEvent(new CustomEvent(HookEvents.UPDATED, {
      detail: {
        data: formattedCurrentPresentation,
        hook: DataConsumptionHooks.CURRENT_PRESENTATION
      }
    }));
  };
  useEffect(() => {
    updatePresentationForPlugin();
  }, [currentPresentation, sendSignal]);
  useEffect(() => {
    const updateHookUseCurrentPresentation = event => {
      if (event.detail.hook === DataConsumptionHooks.CURRENT_PRESENTATION) setSendSignal(signal => !signal);
    };
    window.addEventListener(HookEvents.SUBSCRIBED, updateHookUseCurrentPresentation);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, updateHookUseCurrentPresentation);
    };
  }, []);
  return null;
};
module.exportDefault(CurrentPresentationHookContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/presentations/current-presentation/utils.ts            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const formatCurrentPresentation = graphqlDataResult => {
  var _graphqlDataResult$da, _graphqlDataResult$da2, _graphqlDataResult$da3, _graphqlDataResult$da4, _graphqlDataResult$da5, _graphqlDataResult$da6, _graphqlDataResult$da7, _graphqlDataResult$er;
  return {
    data: {
      presentationId: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da = graphqlDataResult.data) === null || _graphqlDataResult$da === void 0 ? void 0 : _graphqlDataResult$da.presentationId,
      currentPage: {
        id: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da2 = graphqlDataResult.data) === null || _graphqlDataResult$da2 === void 0 ? void 0 : (_graphqlDataResult$da3 = _graphqlDataResult$da2.pages) === null || _graphqlDataResult$da3 === void 0 ? void 0 : _graphqlDataResult$da3[0].pageId,
        num: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da4 = graphqlDataResult.data) === null || _graphqlDataResult$da4 === void 0 ? void 0 : (_graphqlDataResult$da5 = _graphqlDataResult$da4.pages) === null || _graphqlDataResult$da5 === void 0 ? void 0 : _graphqlDataResult$da5[0].num,
        urlsJson: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da6 = graphqlDataResult.data) === null || _graphqlDataResult$da6 === void 0 ? void 0 : (_graphqlDataResult$da7 = _graphqlDataResult$da6.pages) === null || _graphqlDataResult$da7 === void 0 ? void 0 : _graphqlDataResult$da7[0].urlsJson
      }
    },
    loading: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : graphqlDataResult.loading,
    error: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$er = graphqlDataResult.errors) === null || _graphqlDataResult$er === void 0 ? void 0 : _graphqlDataResult$er[0]
  };
};
module.exportDefault(formatCurrentPresentation);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"shared":{"custom-subscription":{"hook-manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/shared/custom-subscription/hook-manager.tsx            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let useEffect, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 3);
let DataConsumptionHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-consumption/enums", {
  DataConsumptionHooks(v) {
    DataConsumptionHooks = v;
  }
}, 4);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 5);
/* eslint-disable @typescript-eslint/no-explicit-any */
const CustomSubscriptionHookContainer = props => {
  const {
    hookArguments
  } = props;
  const {
    query: queryFromPlugin,
    variables
  } = hookArguments;
  const [sendSignal, setSendSignal] = useState(false);
  let customSubscriptionData;
  try {
    const subscriptionResult = useDeduplicatedSubscription(gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["", ""])), queryFromPlugin), {
      variables
    });
    customSubscriptionData = subscriptionResult;
  } catch (err) {
    logger.error("Error while querying custom subscriptions for plugins (query: ".concat(queryFromPlugin, ") (Error: ").concat(err, ")"));
    customSubscriptionData = 'Error';
  }
  const updatePresentationForPlugin = () => {
    window.dispatchEvent(new CustomEvent(HookEvents.UPDATED, {
      detail: {
        data: customSubscriptionData,
        hook: DataConsumptionHooks.CUSTOM_SUBSCRIPTION,
        hookArguments: {
          query: queryFromPlugin,
          variables
        }
      }
    }));
  };
  useEffect(() => {
    updatePresentationForPlugin();
  }, [customSubscriptionData, sendSignal]);
  useEffect(() => {
    const updateHookUseCustomSubscription = event => {
      if (event.detail.hook === DataConsumptionHooks.CUSTOM_SUBSCRIPTION) setSendSignal(signal => !signal);
    };
    window.addEventListener(HookEvents.SUBSCRIBED, updateHookUseCustomSubscription);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, updateHookUseCustomSubscription);
    };
  }, []);
  return null;
};
module.exportDefault(CustomSubscriptionHookContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"user-voice":{"talking-indicator":{"hook-manager.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/user-voice/talking-indicator/hook-manager.ts           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 1);
let DataConsumptionHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-consumption/enums", {
  DataConsumptionHooks(v) {
    DataConsumptionHooks = v;
  }
}, 2);
let formatTalkingIndicatorDataFromGraphql;
module.link("./utils", {
  default(v) {
    formatTalkingIndicatorDataFromGraphql = v;
  }
}, 3);
let useTalkingIndicatorList;
module.link("/imports/ui/core/hooks/useTalkingIndicator", {
  useTalkingIndicatorList(v) {
    useTalkingIndicatorList = v;
  }
}, 4);
const TalkingIndicatorHookContainer = () => {
  const [sendSignal, setSendSignal] = useState(false);
  const [userVoice] = useTalkingIndicatorList(uv => ({
    talking: uv.talking,
    startTime: uv.startTime,
    muted: uv.muted,
    userId: uv.userId
  }));
  const updateTalkingIndicatorForPlugin = () => {
    window.dispatchEvent(new CustomEvent(HookEvents.UPDATED, {
      detail: {
        data: formatTalkingIndicatorDataFromGraphql(userVoice),
        hook: DataConsumptionHooks.TALKING_INDICATOR
      }
    }));
  };
  useEffect(() => {
    updateTalkingIndicatorForPlugin();
  }, [userVoice, sendSignal]);
  useEffect(() => {
    const updateHookUseTalkingIndicator = event => {
      if (event.detail.hook === DataConsumptionHooks.TALKING_INDICATOR) setSendSignal(signal => !signal);
    };
    window.addEventListener(HookEvents.SUBSCRIBED, updateHookUseTalkingIndicator);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, updateHookUseTalkingIndicator);
    };
  }, []);
  return null;
};
module.exportDefault(TalkingIndicatorHookContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/user-voice/talking-indicator/utils.ts                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const formatTalkingIndicatorDataFromGraphql = talkingIndicatorList => ({
  data: talkingIndicatorList.map(userVoice => ({
    talking: userVoice.talking,
    startTime: userVoice.startTime,
    muted: userVoice.muted,
    userId: userVoice.userId
  })),
  loading: !talkingIndicatorList,
  error: undefined
});
module.exportDefault(formatTalkingIndicatorDataFromGraphql);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"users":{"current-user":{"hook-manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/users/current-user/hook-manager.tsx                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useRef, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 1);
let DataConsumptionHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-consumption/enums", {
  DataConsumptionHooks(v) {
    DataConsumptionHooks = v;
  }
}, 2);
let equals;
module.link("ramda", {
  equals(v) {
    equals = v;
  }
}, 3);
let formatCurrentUserResponseFromGraphql;
module.link("./utils", {
  default(v) {
    formatCurrentUserResponseFromGraphql = v;
  }
}, 4);
const CurrentUserHookContainer = props => {
  const [sendSignal, setSendSignal] = useState(false);
  const previousCurrentUser = useRef(null);
  const {
    data: currentUser
  } = props;
  const updateUserForPlugin = () => {
    const currentUserProjection = formatCurrentUserResponseFromGraphql(currentUser);
    window.dispatchEvent(new CustomEvent(HookEvents.UPDATED, {
      detail: {
        data: currentUserProjection,
        hook: DataConsumptionHooks.CURRENT_USER
      }
    }));
  };
  useEffect(() => {
    if (!equals(previousCurrentUser.current, currentUser)) {
      previousCurrentUser.current = currentUser;
      updateUserForPlugin();
    }
  }, [currentUser]);
  useEffect(() => {
    updateUserForPlugin();
  }, [sendSignal]);
  useEffect(() => {
    const updateHookUseCurrentUser = event => {
      if (event.detail.hook === DataConsumptionHooks.CURRENT_USER) setSendSignal(signal => !signal);
    };
    window.addEventListener(HookEvents.SUBSCRIBED, updateHookUseCurrentUser);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, updateHookUseCurrentUser);
    };
  }, []);
  return null;
};
module.exportDefault(CurrentUserHookContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/users/current-user/utils.ts                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const formatCurrentUserResponseFromGraphql = graphqlDataResult => {
  var _graphqlDataResult$da, _graphqlDataResult$da2, _graphqlDataResult$da3, _graphqlDataResult$da4, _graphqlDataResult$er;
  return {
    data: !graphqlDataResult.loading ? {
      userId: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da = graphqlDataResult.data) === null || _graphqlDataResult$da === void 0 ? void 0 : _graphqlDataResult$da.userId,
      name: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da2 = graphqlDataResult.data) === null || _graphqlDataResult$da2 === void 0 ? void 0 : _graphqlDataResult$da2.name,
      role: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da3 = graphqlDataResult.data) === null || _graphqlDataResult$da3 === void 0 ? void 0 : _graphqlDataResult$da3.role,
      presenter: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$da4 = graphqlDataResult.data) === null || _graphqlDataResult$da4 === void 0 ? void 0 : _graphqlDataResult$da4.presenter
    } : undefined,
    loading: graphqlDataResult.loading,
    error: graphqlDataResult === null || graphqlDataResult === void 0 ? void 0 : (_graphqlDataResult$er = graphqlDataResult.errors) === null || _graphqlDataResult$er === void 0 ? void 0 : _graphqlDataResult$er[0]
  };
};
module.exportDefault(formatCurrentUserResponseFromGraphql);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"loaded-user-list":{"hook-manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/users/loaded-user-list/hook-manager.tsx                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 1);
let DataConsumptionHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-consumption/enums", {
  DataConsumptionHooks(v) {
    DataConsumptionHooks = v;
  }
}, 2);
let formatLoadedUserListDataFromGraphql;
module.link("./utils", {
  default(v) {
    formatLoadedUserListDataFromGraphql = v;
  }
}, 3);
let useLocalUserList;
module.link("/imports/ui/core/hooks/useLoadedUserList", {
  useLocalUserList(v) {
    useLocalUserList = v;
  }
}, 4);
const LoadedUserListHookContainer = () => {
  const [sendSignal, setSendSignal] = useState(false);
  const [usersData] = useLocalUserList(user => ({
    userId: user.userId,
    name: user.name,
    role: user.role
  }));
  const updateLoadedUserListForPlugin = () => {
    window.dispatchEvent(new CustomEvent(HookEvents.UPDATED, {
      detail: {
        data: formatLoadedUserListDataFromGraphql(usersData),
        hook: DataConsumptionHooks.LOADED_USER_LIST
      }
    }));
  };
  useEffect(() => {
    updateLoadedUserListForPlugin();
  }, [usersData, sendSignal]);
  useEffect(() => {
    const updateHookUseLoadedUserList = event => {
      if (event.detail.hook === DataConsumptionHooks.LOADED_USER_LIST) setSendSignal(signal => !signal);
    };
    window.addEventListener(HookEvents.SUBSCRIBED, updateHookUseLoadedUserList);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, updateHookUseLoadedUserList);
    };
  }, []);
  return null;
};
module.exportDefault(LoadedUserListHookContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/domain/users/loaded-user-list/utils.ts                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* eslint-disable @typescript-eslint/no-explicit-any */
const formatLoadedUserListDataFromGraphql = responseDataFromGraphql => ({
  data: responseDataFromGraphql ? responseDataFromGraphql === null || responseDataFromGraphql === void 0 ? void 0 : responseDataFromGraphql.map(userItem => ({
    userId: userItem.userId,
    name: userItem.name,
    role: userItem.role
  })) : undefined,
  loading: !responseDataFromGraphql,
  error: undefined
});
module.exportDefault(formatLoadedUserListDataFromGraphql);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-consumption/manager.tsx                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let makeCustomHookIdentifierFromArgs;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-consumption/utils", {
  makeCustomHookIdentifierFromArgs(v) {
    makeCustomHookIdentifierFromArgs = v;
  }
}, 1);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 2);
let DataConsumptionHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-consumption/enums", {
  DataConsumptionHooks(v) {
    DataConsumptionHooks = v;
  }
}, 3);
let LoadedUserListHookContainer;
module.link("./domain/users/loaded-user-list/hook-manager", {
  default(v) {
    LoadedUserListHookContainer = v;
  }
}, 4);
let CurrentUserHookContainer;
module.link("./domain/users/current-user/hook-manager", {
  default(v) {
    CurrentUserHookContainer = v;
  }
}, 5);
let CustomSubscriptionHookContainer;
module.link("./domain/shared/custom-subscription/hook-manager", {
  default(v) {
    CustomSubscriptionHookContainer = v;
  }
}, 6);
let CurrentPresentationHookContainer;
module.link("./domain/presentations/current-presentation/hook-manager", {
  default(v) {
    CurrentPresentationHookContainer = v;
  }
}, 7);
let LoadedChatMessagesHookContainer;
module.link("./domain/chat/loaded-chat-messages/hook-manager", {
  default(v) {
    LoadedChatMessagesHookContainer = v;
  }
}, 8);
let TalkingIndicatorHookContainer;
module.link("./domain/user-voice/talking-indicator/hook-manager", {
  default(v) {
    TalkingIndicatorHookContainer = v;
  }
}, 9);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 10);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 11);
let MeetingHookContainer;
module.link("./domain/meeting/from-core/hook-manager", {
  default(v) {
    MeetingHookContainer = v;
  }
}, 12);
const hooksMap = {
  [DataConsumptionHooks.TALKING_INDICATOR]: TalkingIndicatorHookContainer,
  [DataConsumptionHooks.LOADED_CHAT_MESSAGES]: LoadedChatMessagesHookContainer,
  [DataConsumptionHooks.LOADED_USER_LIST]: LoadedUserListHookContainer,
  [DataConsumptionHooks.CURRENT_USER]: CurrentUserHookContainer,
  [DataConsumptionHooks.CURRENT_PRESENTATION]: CurrentPresentationHookContainer,
  [DataConsumptionHooks.MEETING]: MeetingHookContainer
};
const HooksMapWithArguments = {
  [DataConsumptionHooks.CUSTOM_SUBSCRIPTION]: CustomSubscriptionHookContainer
};
const PluginDataConsumptionManager = () => {
  const [hookUtilizationCount, setHookUtilizationCount] = useState(new Map());
  const [hookWithArgumentUtilizationCount, setHookWithArgumentUtilizationCount] = useState(new Map());
  useEffect(() => {
    const updateHookUsage = (hookName, delta, hookArguments) => {
      if (hookName !== DataConsumptionHooks.CUSTOM_SUBSCRIPTION) {
        setHookUtilizationCount(mapObj => {
          const newMap = new Map(mapObj.entries());
          newMap.set(hookName, (mapObj.get(hookName) || 0) + delta);
          return newMap;
        });
      } else {
        setHookWithArgumentUtilizationCount(mapObj => {
          if (hookArguments) {
            var _mapObj$get, _mapObj$get2, _mapObj$get2$get;
            const hookArgumentsAsKey = makeCustomHookIdentifierFromArgs(hookArguments);
            // Create object from the hook with argument
            const mapToBeSet = new Map((_mapObj$get = mapObj.get(hookName)) === null || _mapObj$get === void 0 ? void 0 : _mapObj$get.entries());
            mapToBeSet.set(hookArgumentsAsKey, {
              count: (((_mapObj$get2 = mapObj.get(hookName)) === null || _mapObj$get2 === void 0 ? void 0 : (_mapObj$get2$get = _mapObj$get2.get(hookArgumentsAsKey)) === null || _mapObj$get2$get === void 0 ? void 0 : _mapObj$get2$get.count) || 0) + delta,
              hookArguments
            });
            // Create new map with argument
            const newMap = new Map(mapObj.entries());
            newMap.set(hookName, mapToBeSet);
            return newMap;
          }
          return mapObj;
        });
      }
    };
    const subscribeHandler = event => {
      let hookArguments;
      if (event.detail.hook === DataConsumptionHooks.CUSTOM_SUBSCRIPTION) {
        const detail = event.detail;
        hookArguments = detail.hookArguments;
      }
      updateHookUsage(event.detail.hook, 1, hookArguments);
    };
    const unsubscribeHandler = event => {
      let hookArguments;
      if (event.detail.hook === DataConsumptionHooks.CUSTOM_SUBSCRIPTION) {
        const detail = event.detail;
        hookArguments = detail.hookArguments;
      }
      updateHookUsage(event.detail.hook, -1, hookArguments);
    };
    window.addEventListener(HookEvents.SUBSCRIBED, subscribeHandler);
    window.addEventListener(HookEvents.UNSUBSCRIBED, unsubscribeHandler);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, subscribeHandler);
      window.removeEventListener(HookEvents.UNSUBSCRIBED, unsubscribeHandler);
    };
  }, []);
  const HooksWithArgumentContainerToRun = [];
  Object.keys(HooksMapWithArguments).forEach(hookName => {
    if (hookWithArgumentUtilizationCount.get(hookName)) {
      var _hookWithArgumentUtil;
      (_hookWithArgumentUtil = hookWithArgumentUtilizationCount.get(hookName)) === null || _hookWithArgumentUtil === void 0 ? void 0 : _hookWithArgumentUtil.forEach(object => {
        if (object.count > 0) {
          HooksWithArgumentContainerToRun.push({
            componentToRender: HooksMapWithArguments[hookName],
            hookArguments: object.hookArguments
          });
        }
      });
    }
  });
  // Use the subscription hook here to avoid new unecessary subscription for graphql
  const currentUser = useCurrentUser(currentUser => ({
    userId: currentUser.userId,
    name: currentUser.name,
    role: currentUser.role,
    presenter: currentUser.presenter
  }));
  const meetingInformation = useMeeting(meeting => ({
    name: meeting === null || meeting === void 0 ? void 0 : meeting.name,
    loginUrl: meeting === null || meeting === void 0 ? void 0 : meeting.loginUrl,
    meetingId: meeting === null || meeting === void 0 ? void 0 : meeting.meetingId
  }));
  return /*#__PURE__*/React.createElement(React.Fragment, null, Object.keys(hooksMap).filter(hookName => hookUtilizationCount.get(hookName) && hookUtilizationCount.get(hookName) > 0).map(hookName => {
    let data;
    const HookComponent = hooksMap[hookName];
    if (hookName === DataConsumptionHooks.CURRENT_USER) data = currentUser;
    if (hookName === DataConsumptionHooks.MEETING) data = meetingInformation;
    return /*#__PURE__*/React.createElement(HookComponent, {
      key: hookName,
      data: data
    });
  }), HooksWithArgumentContainerToRun.map(hookWithArguments => {
    const HookComponent = hookWithArguments.componentToRender;
    return /*#__PURE__*/React.createElement(HookComponent, {
      key: makeCustomHookIdentifierFromArgs(hookWithArguments.hookArguments),
      hookArguments: hookWithArguments.hookArguments
    });
  }));
};
module.exportDefault(PluginDataConsumptionManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"dom-element-manipulation":{"chat":{"message":{"hook-manager.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/dom-element-manipulation/chat/message/hook-manager.ts                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useContext, useEffect;
module.link("react", {
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 1);
let DomElementManipulationHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/dom-element-manipulation/enums", {
  DomElementManipulationHooks(v) {
    DomElementManipulationHooks = v;
  }
}, 2);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 3);
const ChatMessageDomElementManipulationHookManager = () => {
  const {
    setDomElementManipulationMessageIds
  } = useContext(PluginsContext);
  useEffect(() => {
    const subscribeHandler = event => {
      let hookArguments;
      if (event.detail.hook === DomElementManipulationHooks.CHAT_MESSAGE) {
        const detail = event.detail;
        hookArguments = detail.hookArguments;
        setDomElementManipulationMessageIds(hookArguments.messageIds);
      }
    };
    const unsubscribeHandler = event => {
      let hookArguments;
      if (event.detail.hook === DomElementManipulationHooks.CHAT_MESSAGE) {
        const detail = event.detail;
        hookArguments = detail.hookArguments;
        setDomElementManipulationMessageIds(hookArguments.messageIds);
      }
    };
    window.addEventListener(HookEvents.SUBSCRIBED, subscribeHandler);
    window.addEventListener(HookEvents.UNSUBSCRIBED, unsubscribeHandler);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, subscribeHandler);
      window.removeEventListener(HookEvents.UNSUBSCRIBED, unsubscribeHandler);
    };
  }, []);
  return null;
};
module.exportDefault(ChatMessageDomElementManipulationHookManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/dom-element-manipulation/manager.tsx                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 1);
let DomElementManipulationHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/dom-element-manipulation/enums", {
  DomElementManipulationHooks(v) {
    DomElementManipulationHooks = v;
  }
}, 2);
let ChatMessageDomElementManipulationHookManager;
module.link("./chat/message/hook-manager", {
  default(v) {
    ChatMessageDomElementManipulationHookManager = v;
  }
}, 3);
const hooksMap = {
  [DomElementManipulationHooks.CHAT_MESSAGE]: ChatMessageDomElementManipulationHookManager
};
const PluginDomElementManipulationManager = () => {
  const [hookUtilizationCount, setHookUtilizationCount] = useState(new Map());
  useEffect(() => {
    const updateHookUsage = (hookName, delta) => {
      setHookUtilizationCount(mapObj => {
        const newMap = new Map(mapObj.entries());
        newMap.set(hookName, (mapObj.get(hookName) || 0) + delta);
        return newMap;
      });
    };
    const subscribeHandler = event => {
      updateHookUsage(event.detail.hook, 1);
    };
    const unsubscribeHandler = event => {
      updateHookUsage(event.detail.hook, -1);
    };
    window.addEventListener(HookEvents.SUBSCRIBED, subscribeHandler);
    window.addEventListener(HookEvents.UNSUBSCRIBED, unsubscribeHandler);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, subscribeHandler);
      window.removeEventListener(HookEvents.UNSUBSCRIBED, unsubscribeHandler);
    };
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, Object.keys(hooksMap).filter(hookName => hookUtilizationCount.get(hookName) && hookUtilizationCount.get(hookName) > 0).map(hookName => {
    const HookComponent = hooksMap[hookName];
    return /*#__PURE__*/React.createElement(HookComponent, {
      key: hookName
    });
  }));
};
module.exportDefault(PluginDomElementManipulationManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"extensible-areas":{"components":{"action-bar":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/action-bar/manager.tsx                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const ActionBarPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [actionBarItems, setActionBarItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].actionsBarItems = actionBarItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedActionBarItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.actionsBarItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      actionsBarItems: aggregatedActionBarItems
    }));
  }, [actionBarItems]);
  pluginApi.setActionsBarItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setActionBarItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(ActionBarPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"action-button-dropdown":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/action-button-dropdown/manager.tsx                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const ActionButtonDropdownPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [actionButtonDropdownItems, setActionButtonDropdownItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].actionButtonDropdownItems = actionButtonDropdownItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedActionButtonDropdownItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.actionButtonDropdownItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      actionButtonDropdownItems: aggregatedActionButtonDropdownItems
    }));
  }, [actionButtonDropdownItems]);
  pluginApi.setActionButtonDropdownItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setActionButtonDropdownItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(ActionButtonDropdownPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"audio-settings-dropdown":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/audio-settings-dropdown/manager.tsx                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const AudioSettingsDropdownPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [audioSettingsDropdownItems, setAudioSettingsDropdownItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].audioSettingsDropdownItems = audioSettingsDropdownItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedAudioSettingsDropdownItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.audioSettingsDropdownItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      audioSettingsDropdownItems: aggregatedAudioSettingsDropdownItems
    }));
  }, [audioSettingsDropdownItems]);
  pluginApi.setAudioSettingsDropdownItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setAudioSettingsDropdownItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(AudioSettingsDropdownPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"camera-settings-dropdown":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/camera-settings-dropdown/manager.tsx               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const CameraSettingsDropdownPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [cameraSettingsDropdownItems, setCameraSettingsDropdownItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].cameraSettingsDropdownItems = cameraSettingsDropdownItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedCameraSettingsDropdownItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.cameraSettingsDropdownItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      cameraSettingsDropdownItems: aggregatedCameraSettingsDropdownItems
    }));
  }, [cameraSettingsDropdownItems]);
  pluginApi.setCameraSettingsDropdownItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setCameraSettingsDropdownItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(CameraSettingsDropdownPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"floating-window":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/floating-window/manager.tsx                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const FloatingWindowPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [floatingWindows, setFloatingWindows] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].floatingWindows = floatingWindows;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedFloatingWindows = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.floatingWindows));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      floatingWindows: aggregatedFloatingWindows
    }));
  }, [floatingWindows]);
  pluginApi.setFloatingWindows = items => {
    const itemsWithId = items.map(generateItemWithId);
    setFloatingWindows(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(FloatingWindowPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"generic-content":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/generic-content/manager.tsx                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const GenericContentPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [genericContentItems, setGenericContentItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].genericContentItems = genericContentItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedGenericContentItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.genericContentItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      genericContentItems: aggregatedGenericContentItems
    }));
  }, [genericContentItems]);
  pluginApi.setGenericContentItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setGenericContentItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(GenericContentPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"nav-bar":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/nav-bar/manager.tsx                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const NavBarPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [navBarItems, setNavBarItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].navBarItems = navBarItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedNavBarItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.navBarItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      navBarItems: aggregatedNavBarItems
    }));
  }, [navBarItems]);
  pluginApi.setNavBarItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setNavBarItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(NavBarPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"options-dropdown":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/options-dropdown/manager.tsx                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const OptionsDropdownPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [optionsDropdownItems, setOptionsDropdownItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].optionsDropdownItems = optionsDropdownItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedOptionsDropdownItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.optionsDropdownItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      optionsDropdownItems: aggregatedOptionsDropdownItems
    }));
  }, [optionsDropdownItems]);
  pluginApi.setOptionsDropdownItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setOptionsDropdownItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(OptionsDropdownPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation-dropdown":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/presentation-dropdown/manager.tsx                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const PresentationDropdownPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [presentationDropdownItems, setPresentationDropdownItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].presentationDropdownItems = presentationDropdownItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedPresentationDropdownItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.presentationDropdownItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      presentationDropdownItems: aggregatedPresentationDropdownItems
    }));
  }, [presentationDropdownItems]);
  pluginApi.setPresentationDropdownItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setPresentationDropdownItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(PresentationDropdownPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation-toolbar":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/presentation-toolbar/manager.tsx                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const PresentationToolbarPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [presentationToolbarItems, setPresentationToolbarItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].presentationToolbarItems = presentationToolbarItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedPresentationToolbarItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.presentationToolbarItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      presentationToolbarItems: aggregatedPresentationToolbarItems
    }));
  }, [presentationToolbarItems]);
  pluginApi.setPresentationToolbarItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setPresentationToolbarItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(PresentationToolbarPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-camera-dropdown":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/user-camera-dropdown/manager.tsx                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const UserCameraDropdownPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [userCameraDropdownItems, setUserCameraDropdownItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].userCameraDropdownItems = userCameraDropdownItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedUserCameraDropdownItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.userCameraDropdownItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      userCameraDropdownItems: aggregatedUserCameraDropdownItems
    }));
  }, [userCameraDropdownItems]);
  pluginApi.setUserCameraDropdownItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setUserCameraDropdownItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(UserCameraDropdownPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-list-dropdown":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/user-list-dropdown/manager.tsx                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const UserListDropdownPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [userListDropdownItems, setUserListDropdownItems] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].userListDropdownItems = userListDropdownItems;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedUserListDropdownItems = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.userListDropdownItems));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      userListDropdownItems: aggregatedUserListDropdownItems
    }));
  }, [userListDropdownItems]);
  pluginApi.setUserListDropdownItems = items => {
    const itemsWithId = items.map(generateItemWithId);
    setUserListDropdownItems(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(UserListDropdownPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-list-item-additional-information":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/components/user-list-item-additional-information/manager.tsx  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useState, useContext;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PluginsContext;
module.link("../../../../components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 1);
const UserListItemAdditionalInformationPluginStateContainer = props => {
  const {
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  } = props;
  const [userListItemAdditionalInformation, setUserListItemAdditionalInformation] = useState([]);
  const {
    pluginsExtensibleAreasAggregatedState,
    setPluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  useEffect(() => {
    // Change this plugin provided toolbar items
    extensibleAreaMap[uuid].userListItemAdditionalInformation = userListItemAdditionalInformation;
    // Update context with computed aggregated list of all plugin provided toolbar items
    const aggregatedUserListItemAdditionalInformation = [].concat(...Object.values(extensibleAreaMap).map(extensibleArea => extensibleArea.userListItemAdditionalInformation));
    setPluginsExtensibleAreasAggregatedState(_objectSpread(_objectSpread({}, pluginsExtensibleAreasAggregatedState), {}, {
      userListItemAdditionalInformation: aggregatedUserListItemAdditionalInformation
    }));
  }, [userListItemAdditionalInformation]);
  pluginApi.setUserListItemAdditionalInformation = items => {
    const itemsWithId = items.map(generateItemWithId);
    setUserListItemAdditionalInformation(itemsWithId);
    return itemsWithId.map(i => i.id);
  };
  return null;
};
module.exportDefault(UserListItemAdditionalInformationPluginStateContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/extensible-areas/manager.tsx                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  "*"(v) {
    React = v;
  }
}, 0);
let uuidLib;
module.link("uuid", {
  "*"(v) {
    uuidLib = v;
  }
}, 1);
let PresentationToolbarPluginStateContainer;
module.link("./components/presentation-toolbar/manager", {
  default(v) {
    PresentationToolbarPluginStateContainer = v;
  }
}, 2);
let UserListDropdownPluginStateContainer;
module.link("./components/user-list-dropdown/manager", {
  default(v) {
    UserListDropdownPluginStateContainer = v;
  }
}, 3);
let ActionButtonDropdownPluginStateContainer;
module.link("./components/action-button-dropdown/manager", {
  default(v) {
    ActionButtonDropdownPluginStateContainer = v;
  }
}, 4);
let AudioSettingsDropdownPluginStateContainer;
module.link("./components/audio-settings-dropdown/manager", {
  default(v) {
    AudioSettingsDropdownPluginStateContainer = v;
  }
}, 5);
let ActionBarPluginStateContainer;
module.link("./components/action-bar/manager", {
  default(v) {
    ActionBarPluginStateContainer = v;
  }
}, 6);
let PresentationDropdownPluginStateContainer;
module.link("./components/presentation-dropdown/manager", {
  default(v) {
    PresentationDropdownPluginStateContainer = v;
  }
}, 7);
let NavBarPluginStateContainer;
module.link("./components/nav-bar/manager", {
  default(v) {
    NavBarPluginStateContainer = v;
  }
}, 8);
let OptionsDropdownPluginStateContainer;
module.link("./components/options-dropdown/manager", {
  default(v) {
    OptionsDropdownPluginStateContainer = v;
  }
}, 9);
let CameraSettingsDropdownPluginStateContainer;
module.link("./components/camera-settings-dropdown/manager", {
  default(v) {
    CameraSettingsDropdownPluginStateContainer = v;
  }
}, 10);
let UserCameraDropdownPluginStateContainer;
module.link("./components/user-camera-dropdown/manager", {
  default(v) {
    UserCameraDropdownPluginStateContainer = v;
  }
}, 11);
let UserListItemAdditionalInformationPluginStateContainer;
module.link("./components/user-list-item-additional-information/manager", {
  default(v) {
    UserListItemAdditionalInformationPluginStateContainer = v;
  }
}, 12);
let FloatingWindowPluginStateContainer;
module.link("./components/floating-window/manager", {
  default(v) {
    FloatingWindowPluginStateContainer = v;
  }
}, 13);
let GenericContentPluginStateContainer;
module.link("./components/generic-content/manager", {
  default(v) {
    GenericContentPluginStateContainer = v;
  }
}, 14);
const extensibleAreaMap = {};
const extensibleAreaComponentManagers = [PresentationToolbarPluginStateContainer, UserListDropdownPluginStateContainer, ActionButtonDropdownPluginStateContainer, AudioSettingsDropdownPluginStateContainer, ActionBarPluginStateContainer, PresentationDropdownPluginStateContainer, NavBarPluginStateContainer, OptionsDropdownPluginStateContainer, CameraSettingsDropdownPluginStateContainer, UserCameraDropdownPluginStateContainer, UserListItemAdditionalInformationPluginStateContainer, FloatingWindowPluginStateContainer, GenericContentPluginStateContainer];
function generateItemWithId(item) {
  item.setItemId(uuidLib.v4());
  return item;
}
const ExtensibleAreaStateManager = props => {
  const {
    uuid,
    pluginApi
  } = props;
  if (!extensibleAreaMap[uuid]) {
    extensibleAreaMap[uuid] = {};
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, extensibleAreaComponentManagers.map((ExtensibleAreaComponentManagerChild, index) => /*#__PURE__*/React.createElement(ExtensibleAreaComponentManagerChild, {
    key: "".concat(uuid, "-").concat(index),
    uuid,
    generateItemWithId,
    extensibleAreaMap,
    pluginApi
  })));
};
module.exportDefault(ExtensibleAreaStateManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"server-commands":{"caption":{"add-locale":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/server-commands/caption/add-locale/manager.tsx                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let CaptionCommandsEnum;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/server-commands/caption/enum", {
  CaptionCommandsEnum(v) {
    CaptionCommandsEnum = v;
  }
}, 2);
let CAPTION_ADD_LOCALE;
module.link("./mutations", {
  default(v) {
    CAPTION_ADD_LOCALE = v;
  }
}, 3);
const PluginAddLocaleCaptionServerCommandsManager = () => {
  const [captionAddLocale] = useMutation(CAPTION_ADD_LOCALE);
  const handleCaptionAddLocale = event => {
    captionAddLocale({
      variables: {
        locale: event.detail
      }
    });
  };
  useEffect(() => {
    window.addEventListener(CaptionCommandsEnum.ADD_LOCALE, handleCaptionAddLocale);
    return () => {
      window.removeEventListener(CaptionCommandsEnum.ADD_LOCALE, handleCaptionAddLocale);
    };
  }, []);
  return null;
};
module.exportDefault(PluginAddLocaleCaptionServerCommandsManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/server-commands/caption/add-locale/mutations.ts                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  CAPTION_ADD_LOCALE: () => CAPTION_ADD_LOCALE
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CAPTION_ADD_LOCALE = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation CaptionAddLocale($locale: String!) {\n    captionAddLocale(\n      locale: $locale\n    )\n  }\n"])));
module.exportDefault(CAPTION_ADD_LOCALE);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"save":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/server-commands/caption/save/manager.tsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let uuidLib;
module.link("uuid", {
  "*"(v) {
    uuidLib = v;
  }
}, 2);
let CaptionCommandsEnum;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/server-commands/caption/enum", {
  CaptionCommandsEnum(v) {
    CaptionCommandsEnum = v;
  }
}, 3);
let SUBMIT_TRANSCRIPT;
module.link("./mutations", {
  default(v) {
    SUBMIT_TRANSCRIPT = v;
  }
}, 4);
const PluginSaveCaptionServerCommandsManager = () => {
  const [submitTranscript] = useMutation(SUBMIT_TRANSCRIPT);
  const handleSubmitCaption = event => {
    submitTranscript({
      variables: {
        transcriptId: uuidLib.v4(),
        transcript: event.detail.text,
        locale: event.detail.locale,
        captionType: event.detail.captionType
      }
    });
  };
  useEffect(() => {
    window.addEventListener(CaptionCommandsEnum.SAVE, handleSubmitCaption);
    return () => {
      window.removeEventListener(CaptionCommandsEnum.SAVE, handleSubmitCaption);
    };
  }, []);
  return null;
};
module.exportDefault(PluginSaveCaptionServerCommandsManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/server-commands/caption/save/mutations.ts                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const SUBMIT_TRANSCRIPT = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation (\n    $transcriptId: String!\n    $transcript: String!\n    $locale: String!\n    $captionType: String!\n  ) {\n    captionSubmitTranscript(\n      transcriptId: $transcriptId,\n      transcript: $transcript,\n      locale: $locale,\n      captionType: $captionType\n    )\n  }\n"])));
module.exportDefault(SUBMIT_TRANSCRIPT);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"handler.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/server-commands/handler.tsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  "*"(v) {
    React = v;
  }
}, 0);
let PluginSaveCaptionServerCommandsManager;
module.link("./caption/save/manager", {
  default(v) {
    PluginSaveCaptionServerCommandsManager = v;
  }
}, 1);
let PluginAddLocaleCaptionServerCommandsManager;
module.link("./caption/add-locale/manager", {
  default(v) {
    PluginAddLocaleCaptionServerCommandsManager = v;
  }
}, 2);
const PluginServerCommandsHandler = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PluginSaveCaptionServerCommandsManager, null), /*#__PURE__*/React.createElement(PluginAddLocaleCaptionServerCommandsManager, null));
module.exportDefault(PluginServerCommandsHandler);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"ui-data-hooks":{"layout":{"presentation-area":{"utils.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/ui-data-hooks/layout/presentation-area/utils.ts                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let LayoutPresentatioAreaUiDataNames, UiLayouts;
module.link("bigbluebutton-html-plugin-sdk", {
  LayoutPresentatioAreaUiDataNames(v) {
    LayoutPresentatioAreaUiDataNames = v;
  },
  UiLayouts(v) {
    UiLayouts = v;
  }
}, 1);
let PRESENTATION_AREA;
module.link("/imports/ui/components/layout/enums", {
  PRESENTATION_AREA(v) {
    PRESENTATION_AREA = v;
  }
}, 2);
const useUpdatePresentationAreaContentForPluginForPlugin = layoutContextState => {
  const [presentationAreaContent, setPresentationAreaContent] = useState();
  const {
    presentationAreaContentActions: presentationAreaContentPile
  } = layoutContextState;
  useEffect(() => {
    setPresentationAreaContent(presentationAreaContentPile.map(p => {
      let currentElement;
      let genericContentId;
      switch (p.value.content) {
        case PRESENTATION_AREA.PINNED_NOTES:
          currentElement = UiLayouts.PINNED_SHARED_NOTES;
          break;
        case PRESENTATION_AREA.EXTERNAL_VIDEO:
          currentElement = UiLayouts.EXTERNAL_VIDEO;
          break;
        case PRESENTATION_AREA.GENERIC_CONTENT:
          currentElement = UiLayouts.GENERIC_CONTENT;
          genericContentId = p.value.genericContentId;
          break;
        case PRESENTATION_AREA.SCREEN_SHARE:
          currentElement = UiLayouts.SCREEN_SHARE;
          break;
        default:
          currentElement = UiLayouts.WHITEBOARD;
          break;
      }
      return {
        isOpen: p.value.open,
        currentElement,
        genericContentId
      };
    }));
  }, [layoutContextState]);
  useEffect(() => {
    window.dispatchEvent(new CustomEvent(LayoutPresentatioAreaUiDataNames.CURRENT_ELEMENT, {
      detail: presentationAreaContent
    }));
  }, [presentationAreaContent]);
};
module.exportDefault(useUpdatePresentationAreaContentForPluginForPlugin);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"data-channel":{"channel-manager":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-channel/channel-manager/manager.tsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  DataChannelItemManager: () => DataChannelItemManager
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let createChannelIdentifier;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-channel/utils", {
  createChannelIdentifier(v) {
    createChannelIdentifier = v;
  }
}, 1);
let DataChannelItemManagerReader;
module.link("./reader-manager", {
  DataChannelItemManagerReader(v) {
    DataChannelItemManagerReader = v;
  }
}, 2);
let DataChannelItemManagerWriter;
module.link("./writer-manager", {
  default(v) {
    DataChannelItemManagerWriter = v;
  }
}, 3);
const DataChannelItemManager = props => {
  const {
    identifier,
    pluginName,
    channelName,
    pluginApi,
    dataChannelTypes,
    subChannelName
  } = props;
  const dataChannelIdentifier = createChannelIdentifier(channelName, subChannelName, pluginName);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataChannelItemManagerWriter, {
    pluginName,
    channelName,
    pluginApi,
    dataChannelTypes,
    subChannelName,
    dataChannelIdentifier
  }), dataChannelTypes.map(type => {
    var _identifier$concat;
    return /*#__PURE__*/React.createElement(DataChannelItemManagerReader, {
      key: identifier === null || identifier === void 0 ? void 0 : (_identifier$concat = identifier.concat('::')) === null || _identifier$concat === void 0 ? void 0 : _identifier$concat.concat(type),
      pluginName,
      channelName,
      dataChannelType: type,
      subChannelName,
      dataChannelIdentifier
    });
  }));
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"reader-manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-channel/channel-manager/reader-manager.tsx                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  DataChannelItemManagerReader: () => DataChannelItemManagerReader
});
let useEffect, useRef, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let DataChannelHooks, DataChannelTypes;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-channel/enums", {
  DataChannelHooks(v) {
    DataChannelHooks = v;
  },
  DataChannelTypes(v) {
    DataChannelTypes = v;
  }
}, 1);
let createUseSubscription;
module.link("/imports/ui/core/hooks/createUseSubscription", {
  default(v) {
    createUseSubscription = v;
  }
}, 2);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 3);
let PLUGIN_DATA_CHANNEL_LATEST_ITEM, PLUGIN_DATA_CHANNEL_NEW_ITEMS, PLUGIN_DATA_CHANNEL_All_ITEMS;
module.link("../subscriptions", {
  PLUGIN_DATA_CHANNEL_LATEST_ITEM(v) {
    PLUGIN_DATA_CHANNEL_LATEST_ITEM = v;
  },
  PLUGIN_DATA_CHANNEL_NEW_ITEMS(v) {
    PLUGIN_DATA_CHANNEL_NEW_ITEMS = v;
  },
  PLUGIN_DATA_CHANNEL_All_ITEMS(v) {
    PLUGIN_DATA_CHANNEL_All_ITEMS = v;
  }
}, 4);
const DataChannelItemManagerReader = props => {
  const {
    pluginName,
    channelName,
    dataChannelType,
    subChannelName,
    dataChannelIdentifier
  } = props;
  const [sendSignal, setSendSignal] = useState(false);
  const cursor = useRef(new Date());
  let subscription;
  const variables = {
    subChannelName,
    pluginName,
    channelName
  };
  let usePatchedSubscription = true;
  switch (dataChannelType) {
    case DataChannelTypes.LATEST_ITEM:
      subscription = PLUGIN_DATA_CHANNEL_LATEST_ITEM;
      usePatchedSubscription = false;
      break;
    case DataChannelTypes.NEW_ITEMS:
      subscription = PLUGIN_DATA_CHANNEL_NEW_ITEMS;
      variables.createdAt = cursor.current.toISOString();
      usePatchedSubscription = false;
      break;
    case DataChannelTypes.All_ITEMS:
      subscription = PLUGIN_DATA_CHANNEL_All_ITEMS;
      break;
    default:
      subscription = PLUGIN_DATA_CHANNEL_All_ITEMS;
      break;
  }
  const dataResultFromSubscription = createUseSubscription(subscription, variables, usePatchedSubscription)(obj => obj);
  useEffect(() => {
    const subscribeHandler = event => {
      if (event.detail.hook === DataChannelHooks.DATA_CHANNEL_BUILDER) {
        const eventDetails = event.detail;
        const hookArguments = eventDetails === null || eventDetails === void 0 ? void 0 : eventDetails.hookArguments;
        const dataChannelTypeFromEvent = hookArguments.dataChannelType;
        if (hookArguments !== null && hookArguments !== void 0 && hookArguments.channelName && hookArguments !== null && hookArguments !== void 0 && hookArguments.pluginName && hookArguments.subChannelName === subChannelName && hookArguments.pluginName === pluginName && hookArguments.channelName === channelName && dataChannelTypeFromEvent === dataChannelType) {
          setSendSignal(signal => !signal);
        }
      }
    };
    window.addEventListener(HookEvents.SUBSCRIBED, subscribeHandler);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, subscribeHandler);
    };
  }, []);
  useEffect(() => {
    const dataResult = {
      data: dataResultFromSubscription.data,
      loading: dataResultFromSubscription.loading
    };
    window.dispatchEvent(new CustomEvent(dataChannelIdentifier, {
      detail: {
        hook: DataChannelHooks.DATA_CHANNEL_BUILDER,
        data: dataResult,
        hookArguments: {
          dataChannelType,
          pluginName,
          channelName,
          subChannelName
        }
      }
    }));
  }, [dataResultFromSubscription, sendSignal]);
  return null;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"writer-manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-channel/channel-manager/writer-manager.tsx                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let DataChannelHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-channel/enums", {
  DataChannelHooks(v) {
    DataChannelHooks = v;
  }
}, 2);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 3);
let PLUGIN_DATA_CHANNEL_DELETE_MUTATION, PLUGIN_DATA_CHANNEL_PUSH_MUTATION, PLUGIN_DATA_CHANNEL_REPLACE_MUTATION, PLUGIN_DATA_CHANNEL_RESET_MUTATION;
module.link("../mutations", {
  PLUGIN_DATA_CHANNEL_DELETE_MUTATION(v) {
    PLUGIN_DATA_CHANNEL_DELETE_MUTATION = v;
  },
  PLUGIN_DATA_CHANNEL_PUSH_MUTATION(v) {
    PLUGIN_DATA_CHANNEL_PUSH_MUTATION = v;
  },
  PLUGIN_DATA_CHANNEL_REPLACE_MUTATION(v) {
    PLUGIN_DATA_CHANNEL_REPLACE_MUTATION = v;
  },
  PLUGIN_DATA_CHANNEL_RESET_MUTATION(v) {
    PLUGIN_DATA_CHANNEL_RESET_MUTATION = v;
  }
}, 4);
const DataChannelItemManagerWriter = props => {
  const {
    pluginName,
    channelName,
    pluginApi,
    subChannelName,
    dataChannelIdentifier
  } = props;
  const [pushEntryFunctionPluginDataChannel] = useMutation(PLUGIN_DATA_CHANNEL_PUSH_MUTATION);
  const [deleteEntryFunctionPluginDataChannel] = useMutation(PLUGIN_DATA_CHANNEL_DELETE_MUTATION);
  const [resetFunctionPluginDataChannel] = useMutation(PLUGIN_DATA_CHANNEL_RESET_MUTATION);
  const [replaceEntryFunctionPluginDataChannel] = useMutation(PLUGIN_DATA_CHANNEL_REPLACE_MUTATION);
  const useDataChannelHandlerFunction = (msg, options) => {
    const {
      receivers: objectsTo
    } = options || {
      receivers: undefined
    };
    const argumentsOfPushEntryFunction = {
      variables: {
        pluginName,
        channelName,
        subChannelName,
        payloadJson: msg,
        toRoles: [],
        toUserIds: []
      }
    };
    if (objectsTo) {
      const rolesTo = objectsTo.filter(object => 'role' in object).map(object => {
        const toRole = object;
        return toRole.role;
      });
      const usersTo = objectsTo.filter(object => 'userId' in object).map(object => {
        const toUserId = object;
        return toUserId.userId;
      });
      if (rolesTo.length > 0) argumentsOfPushEntryFunction.variables.toRoles = rolesTo;
      if (usersTo.length > 0) argumentsOfPushEntryFunction.variables.toUserIds = usersTo;
    }
    pushEntryFunctionPluginDataChannel(argumentsOfPushEntryFunction);
  };
  pluginApi.mapOfPushEntryFunctions[dataChannelIdentifier] = useDataChannelHandlerFunction;
  window.dispatchEvent(new Event("".concat(dataChannelIdentifier, "::pushEntryFunction")));
  const deleteOrResetHandler = event => {
    if (event.detail.hook === DataChannelHooks.DATA_CHANNEL_DELETE) {
      const eventDetails = event.detail;
      const hookArguments = eventDetails === null || eventDetails === void 0 ? void 0 : eventDetails.hookArguments;
      deleteEntryFunctionPluginDataChannel({
        variables: {
          pluginName: hookArguments === null || hookArguments === void 0 ? void 0 : hookArguments.pluginName,
          channelName: hookArguments === null || hookArguments === void 0 ? void 0 : hookArguments.channelName,
          entryId: eventDetails.data,
          subChannelName
        }
      });
    } else if (event.detail.hook === DataChannelHooks.DATA_CHANNEL_RESET) {
      const eventDetails = event.detail;
      const hookArguments = eventDetails === null || eventDetails === void 0 ? void 0 : eventDetails.hookArguments;
      resetFunctionPluginDataChannel({
        variables: {
          pluginName: hookArguments === null || hookArguments === void 0 ? void 0 : hookArguments.pluginName,
          channelName: hookArguments === null || hookArguments === void 0 ? void 0 : hookArguments.channelName,
          subChannelName
        }
      });
    }
  };
  const replaceEntryHandler = event => {
    if (event.detail.hook === DataChannelHooks.DATA_CHANNEL_REPLACE) {
      const eventDetails = event.detail;
      const hookArguments = eventDetails === null || eventDetails === void 0 ? void 0 : eventDetails.hookArguments;
      replaceEntryFunctionPluginDataChannel({
        variables: {
          pluginName: hookArguments === null || hookArguments === void 0 ? void 0 : hookArguments.pluginName,
          channelName: hookArguments === null || hookArguments === void 0 ? void 0 : hookArguments.channelName,
          subChannelName: hookArguments === null || hookArguments === void 0 ? void 0 : hookArguments.subChannelName,
          entryId: eventDetails.data.entryId,
          payloadJson: eventDetails.data.payloadJson
        }
      });
    }
  };
  useEffect(() => {
    window.addEventListener(HookEvents.UPDATED, deleteOrResetHandler);
    window.addEventListener(HookEvents.UPDATED, replaceEntryHandler);
    return () => {
      window.removeEventListener(HookEvents.UPDATED, deleteOrResetHandler);
      window.removeEventListener(HookEvents.UPDATED, replaceEntryHandler);
    };
  }, []);
  return null;
};
module.exportDefault(DataChannelItemManagerWriter);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-channel/manager.tsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let createChannelIdentifier;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-channel/utils", {
  createChannelIdentifier(v) {
    createChannelIdentifier = v;
  }
}, 1);
let HookEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/core/enum", {
  HookEvents(v) {
    HookEvents = v;
  }
}, 2);
let DataChannelHooks;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/data-channel/enums", {
  DataChannelHooks(v) {
    DataChannelHooks = v;
  }
}, 3);
let DataChannelItemManager;
module.link("./channel-manager/manager", {
  DataChannelItemManager(v) {
    DataChannelItemManager = v;
  }
}, 4);
const PluginDataChannelManager = props => {
  const {
    pluginApi
  } = props;
  const {
    pluginName: pluginNameInUse
  } = pluginApi;
  if (!pluginNameInUse) return /*#__PURE__*/React.createElement(React.Fragment, null);
  const [mapOfDataChannelInformation, setMapOfDataChannelInformation] = useState(new Map());
  const updateHookUsage = (channelName, pluginName, deltaSubscribe, dataChannelType, subChannelName) => {
    setMapOfDataChannelInformation(previousMap => {
      if (pluginName === pluginNameInUse) {
        var _previousMap$get, _previousMap$get2;
        const uniqueId = createChannelIdentifier(channelName, subChannelName, pluginName);
        const newMap = new Map(previousMap.entries());
        let newArrayTypes = ((_previousMap$get = previousMap.get(uniqueId)) === null || _previousMap$get === void 0 ? void 0 : _previousMap$get.types) || [];
        if (deltaSubscribe < 0) {
          const index = newArrayTypes.indexOf(dataChannelType);
          if (index > -1) {
            newArrayTypes.splice(index, 1);
          }
        } else {
          newArrayTypes = newArrayTypes.concat([dataChannelType]);
        }
        newMap.set(uniqueId, {
          totalUses: (((_previousMap$get2 = previousMap.get(uniqueId)) === null || _previousMap$get2 === void 0 ? void 0 : _previousMap$get2.totalUses) || 0) + deltaSubscribe,
          subChannelName,
          channelName,
          types: [...new Set(newArrayTypes)]
        });
        return newMap;
      }
      return previousMap;
    });
  };
  useEffect(() => {
    const subscribeHandler = event => {
      if (event.detail.hook === DataChannelHooks.DATA_CHANNEL_BUILDER) {
        const eventDetails = event.detail;
        const hookArguments = eventDetails === null || eventDetails === void 0 ? void 0 : eventDetails.hookArguments;
        const dataChannelTypeFromEvent = hookArguments.dataChannelType;
        const {
          subChannelName
        } = hookArguments;
        if (hookArguments !== null && hookArguments !== void 0 && hookArguments.channelName && hookArguments !== null && hookArguments !== void 0 && hookArguments.pluginName) {
          updateHookUsage(hookArguments.channelName, hookArguments.pluginName, 1, dataChannelTypeFromEvent, subChannelName);
        }
      }
    };
    const unsubscribeHandler = event => {
      if (event.detail.hook === DataChannelHooks.DATA_CHANNEL_BUILDER) {
        const eventDetails = event.detail;
        const hookArguments = eventDetails === null || eventDetails === void 0 ? void 0 : eventDetails.hookArguments;
        const dataChannelTypeFromEvent = hookArguments.dataChannelType;
        const {
          subChannelName
        } = hookArguments;
        if (hookArguments !== null && hookArguments !== void 0 && hookArguments.channelName && hookArguments !== null && hookArguments !== void 0 && hookArguments.pluginName) {
          updateHookUsage(hookArguments.channelName, hookArguments.pluginName, -1, dataChannelTypeFromEvent, subChannelName);
        }
      }
    };
    window.addEventListener(HookEvents.SUBSCRIBED, subscribeHandler);
    window.addEventListener(HookEvents.UNSUBSCRIBED, unsubscribeHandler);
    return () => {
      window.removeEventListener(HookEvents.SUBSCRIBED, subscribeHandler);
      window.removeEventListener(HookEvents.UNSUBSCRIBED, unsubscribeHandler);
    };
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, Array.from(mapOfDataChannelInformation.keys()).filter(keyIdentifier => mapOfDataChannelInformation.get(keyIdentifier) !== undefined && mapOfDataChannelInformation.get(keyIdentifier).totalUses > 0).map(keyIdentifier => {
    const {
      subChannelName,
      channelName
    } = mapOfDataChannelInformation.get(keyIdentifier);
    const identifier = createChannelIdentifier(channelName, subChannelName, pluginNameInUse);
    return /*#__PURE__*/React.createElement(DataChannelItemManager, {
      key: identifier,
      identifier,
      pluginName: pluginNameInUse,
      channelName,
      subChannelName,
      dataChannelTypes: mapOfDataChannelInformation.get(keyIdentifier).types,
      pluginApi
    });
  }));
};
module.exportDefault(PluginDataChannelManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-channel/mutations.ts                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  PLUGIN_DATA_CHANNEL_PUSH_MUTATION: () => PLUGIN_DATA_CHANNEL_PUSH_MUTATION,
  PLUGIN_DATA_CHANNEL_RESET_MUTATION: () => PLUGIN_DATA_CHANNEL_RESET_MUTATION,
  PLUGIN_DATA_CHANNEL_DELETE_MUTATION: () => PLUGIN_DATA_CHANNEL_DELETE_MUTATION,
  PLUGIN_DATA_CHANNEL_REPLACE_MUTATION: () => PLUGIN_DATA_CHANNEL_REPLACE_MUTATION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const PLUGIN_DATA_CHANNEL_PUSH_MUTATION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation PluginDataChannelPushEntry($pluginName: String!,\n    $subChannelName: String!, $channelName: String!,\n    $payloadJson: json!,\n    $toRoles: [String]!, $toUserIds: [String]!) {\n      pluginDataChannelPushEntry(\n        pluginName: $pluginName,\n        channelName: $channelName,\n        subChannelName: $subChannelName,\n        payloadJson: $payloadJson,\n        toRoles: $toRoles,\n        toUserIds: $toUserIds,\n      )\n    }\n"])));
const PLUGIN_DATA_CHANNEL_RESET_MUTATION = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation PluginDataChannelReset($pluginName: String!, $channelName: String!, $subChannelName: String!) {\n    pluginDataChannelReset(\n      pluginName: $pluginName,\n      channelName: $channelName,\n      subChannelName: $subChannelName\n    )\n  }\n"])));
const PLUGIN_DATA_CHANNEL_DELETE_MUTATION = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  mutation PluginDataChannelDeleteEntry($pluginName: String!,\n    $channelName: String!, $entryId: String!, $subChannelName: String!) {\n    pluginDataChannelDeleteEntry(\n      pluginName: $pluginName,\n      channelName: $channelName,\n      entryId: $entryId,\n      subChannelName: $subChannelName\n    )\n  }\n"])));
const PLUGIN_DATA_CHANNEL_REPLACE_MUTATION = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  mutation PluginDataChannelReplaceEntry($pluginName: String!, \n    $subChannelName: String!, $channelName: String!, \n    $payloadJson: json!, $entryId: String!) {\n      pluginDataChannelReplaceEntry(\n        entryId: $entryId,\n        pluginName: $pluginName,\n        channelName: $channelName,\n        subChannelName: $subChannelName,\n        payloadJson: $payloadJson\n      )\n    }\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"subscriptions.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/data-channel/subscriptions.ts                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  PLUGIN_DATA_CHANNEL_LATEST_ITEM: () => PLUGIN_DATA_CHANNEL_LATEST_ITEM,
  PLUGIN_DATA_CHANNEL_NEW_ITEMS: () => PLUGIN_DATA_CHANNEL_NEW_ITEMS,
  PLUGIN_DATA_CHANNEL_All_ITEMS: () => PLUGIN_DATA_CHANNEL_All_ITEMS
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const PLUGIN_DATA_CHANNEL_NEW_ITEMS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription FetchPluginDataChannelEntry($pluginName: String!,\n    $channelName: String! , $createdAt: timestamptz!, $subChannelName: String!){\n    pluginDataChannelEntry_stream(\n      cursor: {initial_value: {createdAt: $createdAt}}, batch_size: 100,\n      where: {\n        pluginName: { _eq: $pluginName }\n        channelName: { _eq: $channelName }\n        subChannelName: { _eq: $subChannelName }\n      }\n    ) {\n      createdAt,\n      channelName,\n      subChannelName,\n      entryId,\n      payloadJson,\n      createdBy,\n      pluginName,\n      toRoles,\n    }\n  }\n"])));
const PLUGIN_DATA_CHANNEL_All_ITEMS = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  subscription FetchPluginDataChannelEntry($pluginName: String!,\n    $channelName: String!, $subChannelName: String!\n  ){\n    pluginDataChannelEntry(\n      order_by: {createdAt: desc},\n      where: {\n        pluginName: { _eq: $pluginName }\n        channelName: { _eq: $channelName }\n        subChannelName: { _eq: $subChannelName }\n      }\n    ) {\n      createdAt,\n      channelName,\n      subChannelName,\n      entryId,\n      payloadJson,\n      createdBy,\n      pluginName,\n      toRoles,\n    }\n  }\n"])));
const PLUGIN_DATA_CHANNEL_LATEST_ITEM = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  subscription FetchPluginDataChannelEntry($pluginName: String!,\n    $channelName: String!, $subChannelName: String!\n  ){\n    pluginDataChannelEntry(\n      order_by: {createdAt: desc},\n      limit: 1,\n      where: {\n        pluginName: { _eq: $pluginName }\n        channelName: { _eq: $channelName }\n        subChannelName: { _eq: $subChannelName }\n      }\n    ) {\n      createdAt,\n      channelName,\n      subChannelName,\n      entryId,\n      payloadJson,\n      createdBy,\n      pluginName,\n      toRoles,\n    }\n  }\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"ui-commands":{"chat":{"handler.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/ui-commands/chat/handler.tsx                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let ChatFormCommandsEnum;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/ui-commands/chat/form/enums", {
  ChatFormCommandsEnum(v) {
    ChatFormCommandsEnum = v;
  }
}, 1);
let layoutDispatch;
module.link("../../../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let PANELS, ACTIONS;
module.link("../../../layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 3);
const PluginChatUiCommandsHandler = () => {
  const layoutContextDispatch = layoutDispatch();
  const handleChatFormsOpen = () => {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: true
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.CHAT
    });
  };
  useEffect(() => {
    window.addEventListener(ChatFormCommandsEnum.OPEN, handleChatFormsOpen);
    return () => {
      window.addEventListener(ChatFormCommandsEnum.OPEN, handleChatFormsOpen);
    };
  }, []);
  return null;
};
module.exportDefault(PluginChatUiCommandsHandler);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation":{"handler.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/ui-commands/presentation/handler.tsx                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let PresentationAreaEnum;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/ui-commands/presentation-area/enums", {
  PresentationAreaEnum(v) {
    PresentationAreaEnum = v;
  }
}, 1);
let layoutDispatch;
module.link("../../../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let ACTIONS;
module.link("../../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 3);
const PluginPresentationAreaUiCommandsHandler = () => {
  const layoutContextDispatch = layoutDispatch();
  const handlePresentationAreaOpen = () => {
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_IS_OPEN,
      value: true
    });
  };
  const handlePresentationAreaClose = () => {
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_IS_OPEN,
      value: false
    });
  };
  useEffect(() => {
    window.addEventListener(PresentationAreaEnum.OPEN, handlePresentationAreaOpen);
    window.addEventListener(PresentationAreaEnum.CLOSE, handlePresentationAreaClose);
    return () => {
      window.addEventListener(PresentationAreaEnum.OPEN, handlePresentationAreaOpen);
      window.addEventListener(PresentationAreaEnum.OPEN, handlePresentationAreaClose);
    };
  }, []);
  return null;
};
module.exportDefault(PluginPresentationAreaUiCommandsHandler);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"sidekick-options-container":{"handler.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/ui-commands/sidekick-options-container/handler.tsx                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let SidekickOptionsContainerEnum;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/ui-commands/sidekick-options-container/enums", {
  SidekickOptionsContainerEnum(v) {
    SidekickOptionsContainerEnum = v;
  }
}, 1);
let layoutDispatch;
module.link("../../../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let PANELS, ACTIONS;
module.link("../../../layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 3);
const PluginSidekickOptionsContainerUiCommandsHandler = () => {
  const layoutContextDispatch = layoutDispatch();
  const handleSidekickOptionsContainerOpen = () => {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_IS_OPEN,
      value: true
    });
  };
  const handleSidekickOptionsContainerClose = () => {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.NONE
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: false
    });
  };
  useEffect(() => {
    window.addEventListener(SidekickOptionsContainerEnum.OPEN, handleSidekickOptionsContainerOpen);
    window.addEventListener(SidekickOptionsContainerEnum.CLOSE, handleSidekickOptionsContainerClose);
    return () => {
      window.addEventListener(SidekickOptionsContainerEnum.OPEN, handleSidekickOptionsContainerOpen);
      window.addEventListener(SidekickOptionsContainerEnum.OPEN, handleSidekickOptionsContainerClose);
    };
  }, []);
  return null;
};
module.exportDefault(PluginSidekickOptionsContainerUiCommandsHandler);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"handler.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/ui-commands/handler.tsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  "*"(v) {
    React = v;
  }
}, 0);
let PluginChatUiCommandsHandler;
module.link("./chat/handler", {
  default(v) {
    PluginChatUiCommandsHandler = v;
  }
}, 1);
let PluginSidekickOptionsContainerUiCommandsHandler;
module.link("./sidekick-options-container/handler", {
  default(v) {
    PluginSidekickOptionsContainerUiCommandsHandler = v;
  }
}, 2);
let PluginPresentationAreaUiCommandsHandler;
module.link("./presentation/handler", {
  default(v) {
    PluginPresentationAreaUiCommandsHandler = v;
  }
}, 3);
const PluginUiCommandsHandler = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PluginChatUiCommandsHandler, null), /*#__PURE__*/React.createElement(PluginSidekickOptionsContainerUiCommandsHandler, null), /*#__PURE__*/React.createElement(PluginPresentationAreaUiCommandsHandler, null));
module.exportDefault(PluginUiCommandsHandler);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"learning-analytics-dashboard":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/learning-analytics-dashboard/manager.tsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let LearningAnalyticsDashboardEvents;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/learning-analytics-dashboard/enums", {
  LearningAnalyticsDashboardEvents(v) {
    LearningAnalyticsDashboardEvents = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let PLUGIN_LEARNING_ANALYTICS_DASHBOARD_SEND_GENERIC_DATA_MUTATION;
module.link("./mutations", {
  default(v) {
    PLUGIN_LEARNING_ANALYTICS_DASHBOARD_SEND_GENERIC_DATA_MUTATION = v;
  }
}, 3);
const PluginLearningAnalyticsDashboardManager = props => {
  const {
    pluginName
  } = props;
  const [sendGenericDataToLearningAnalyticsDashboard] = useMutation(PLUGIN_LEARNING_ANALYTICS_DASHBOARD_SEND_GENERIC_DATA_MUTATION);
  const handleSendGenericDataForLearningAnalyticsDashboard = event => {
    if (event.detail.pluginName === pluginName) {
      const eventDetails = event.detail;
      sendGenericDataToLearningAnalyticsDashboard({
        variables: {
          pluginName: eventDetails.pluginName,
          genericDataForLearningAnalyticsDashboard: eventDetails.data
        }
      });
    }
  };
  useEffect(() => {
    window.addEventListener(LearningAnalyticsDashboardEvents.GENERIC_DATA_SENT, handleSendGenericDataForLearningAnalyticsDashboard);
    return () => {
      window.removeEventListener(LearningAnalyticsDashboardEvents.GENERIC_DATA_SENT, handleSendGenericDataForLearningAnalyticsDashboard);
    };
  }, []);
};
module.exportDefault(PluginLearningAnalyticsDashboardManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/learning-analytics-dashboard/mutations.ts                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const PLUGIN_LEARNING_ANALYTICS_DASHBOARD_SEND_GENERIC_DATA_MUTATION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation PluginLearningAnalyticsDashboardSendGenericData($pluginName: String!,\n    $genericDataForLearningAnalyticsDashboard: json!) {\n      pluginLearningAnalyticsDashboardSendGenericData(\n        genericDataForLearningAnalyticsDashboard: $genericDataForLearningAnalyticsDashboard,\n        pluginName: $pluginName,\n      )\n    }\n"])));
module.exportDefault(PLUGIN_LEARNING_ANALYTICS_DASHBOARD_SEND_GENERIC_DATA_MUTATION);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"loader":{"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/loader/manager.tsx                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 1);
const PluginLoaderManager = props => {
  const {
    uuid,
    containerRef,
    loadedPlugins,
    setLastLoadedPlugin,
    pluginConfig: plugin
  } = props;
  useEffect(() => {
    var _containerRef$current;
    if (!plugin || !containerRef) {
      return;
    }
    const div = document.createElement('div');
    div.id = uuid;
    (_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.appendChild(div);
    const script = document.createElement('script');
    script.onload = () => {
      loadedPlugins.current += 1;
      setLastLoadedPlugin(script);
      logger.info("Loaded plugin ".concat(plugin.name));
    };
    script.onerror = err => {
      logger.error("Error when loading plugin ".concat(plugin.name, ", error: "), err);
    };
    script.src = plugin.url;
    script.setAttribute('uuid', div.id);
    script.setAttribute('pluginName', plugin.name);
    if (plugin.checksum) {
      script.setAttribute('integrity', plugin.checksum);
    }
    document.head.appendChild(script);
  }, [plugin, containerRef]);
  return null;
};
module.exportDefault(PluginLoaderManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/component.tsx                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  "*"(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  "*"(v) {
    Styled = v;
  }
}, 1);
const PluginsEngineComponent = props => {
  const {
    containerRef
  } = props;
  return /*#__PURE__*/React.createElement(Styled.PluginsEngine, {
    ref: containerRef
  });
};
module.exportDefault(PluginsEngineComponent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"manager.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/manager.tsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useEffect, useRef, useState, useMemo;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 1);
let BbbPluginSdk;
module.link("bigbluebutton-html-plugin-sdk", {
  BbbPluginSdk(v) {
    BbbPluginSdk = v;
  }
}, 2);
let uuidLib;
module.link("uuid", {
  "*"(v) {
    uuidLib = v;
  }
}, 3);
let PluginDataConsumptionManager;
module.link("./data-consumption/manager", {
  default(v) {
    PluginDataConsumptionManager = v;
  }
}, 4);
let PluginsEngineComponent;
module.link("./component", {
  default(v) {
    PluginsEngineComponent = v;
  }
}, 5);
let PluginLoaderManager;
module.link("./loader/manager", {
  default(v) {
    PluginLoaderManager = v;
  }
}, 6);
let ExtensibleAreaStateManager;
module.link("./extensible-areas/manager", {
  default(v) {
    ExtensibleAreaStateManager = v;
  }
}, 7);
let PluginDataChannelManager;
module.link("./data-channel/manager", {
  default(v) {
    PluginDataChannelManager = v;
  }
}, 8);
let PluginUiCommandsHandler;
module.link("./ui-commands/handler", {
  default(v) {
    PluginUiCommandsHandler = v;
  }
}, 9);
let PluginDomElementManipulationManager;
module.link("./dom-element-manipulation/manager", {
  default(v) {
    PluginDomElementManipulationManager = v;
  }
}, 10);
let PluginServerCommandsHandler;
module.link("./server-commands/handler", {
  default(v) {
    PluginServerCommandsHandler = v;
  }
}, 11);
let PluginLearningAnalyticsDashboardManager;
module.link("./learning-analytics-dashboard/manager", {
  default(v) {
    PluginLearningAnalyticsDashboardManager = v;
  }
}, 12);
const PluginsEngineManager = () => {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore - temporary, while meteor exists in the project
  const PLUGINS_CONFIG = window.meetingClientSettings.public.plugins;
  // If there is no plugin to load, the engine simply returns null
  if (!PLUGINS_CONFIG) return null;
  const containerRef = useRef(null);
  const [lastLoadedPlugin, setLastLoadedPlugin] = useState();
  const loadedPlugins = useRef(0);
  const effectivePluginsConfig = useMemo(() => PLUGINS_CONFIG.map(p => _objectSpread(_objectSpread({}, p), {}, {
    uuid: uuidLib.v4()
  })), [PLUGINS_CONFIG]);
  const totalNumberOfPlugins = PLUGINS_CONFIG === null || PLUGINS_CONFIG === void 0 ? void 0 : PLUGINS_CONFIG.length;
  window.React = React;
  useEffect(() => {
    logger.info("".concat(loadedPlugins.current, "/").concat(totalNumberOfPlugins, " plugins loaded"));
  }, [loadedPlugins.current, lastLoadedPlugin]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PluginsEngineComponent, {
    containerRef
  }), /*#__PURE__*/React.createElement(PluginDataConsumptionManager, null), /*#__PURE__*/React.createElement(PluginServerCommandsHandler, null), /*#__PURE__*/React.createElement(PluginUiCommandsHandler, null), /*#__PURE__*/React.createElement(PluginDomElementManipulationManager, null), effectivePluginsConfig.map(effectivePluginConfig => {
    const {
      uuid,
      name: pluginName
    } = effectivePluginConfig;
    const pluginApi = BbbPluginSdk.getPluginApi(uuid, pluginName);
    return /*#__PURE__*/React.createElement("div", {
      key: uuid
    }, /*#__PURE__*/React.createElement(PluginLoaderManager, {
      uuid,
      containerRef,
      loadedPlugins,
      setLastLoadedPlugin,
      pluginConfig: effectivePluginConfig
    }), /*#__PURE__*/React.createElement(PluginLearningAnalyticsDashboardManager, {
      pluginName: pluginName
    }), /*#__PURE__*/React.createElement(PluginDataChannelManager, {
      pluginApi
    }), /*#__PURE__*/React.createElement(ExtensibleAreaStateManager, {
      pluginApi,
      uuid
    }));
  }));
};
module.exportDefault(PluginsEngineManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/plugins-engine/styles.ts                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  PluginsEngine: () => PluginsEngine
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const PluginsEngine = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100vw',\n  height: '100vh',\n  zIndex: -1,\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"breakout-room":{"create-breakout-room":{"breakout-room-user-assignment-mobile":{"room-user-list":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/create-breakout-room/breakout-room-user-assignment-mobile/room-user-list/compon //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useMemo;
module.link("react", {
  default(v) {
    React = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
const intlMessages = defineMessages({
  breakoutRoomLabel: {
    id: 'app.createBreakoutRoom.breakoutRoomLabel',
    description: 'breakout room label'
  },
  doneLabel: {
    id: 'app.createBreakoutRoom.doneLabel',
    description: 'done label'
  }
});
const RoomUserList = _ref => {
  let {
    selectedRoom,
    rooms,
    moveUser,
    confirm
  } = _ref;
  const intl = useIntl();
  const users = useMemo(() => {
    const userElements = Object.values(rooms).sort((a, b) => {
      if (a.id === selectedRoom) {
        return -1; // Move itemToMove to the front
      }

      if (b.id === selectedRoom) {
        return 1; // Move itemToMove to the front
      }

      return 0;
    }).map(room => {
      return room.users.map(user => {
        return /*#__PURE__*/React.createElement(Styled.SelectUserContainer, {
          id: user.userId,
          key: "breakout-user-".concat(user.userId)
        }, /*#__PURE__*/React.createElement(Styled.Round, null, /*#__PURE__*/React.createElement("input", {
          type: "checkbox",
          id: "itemId".concat(room.id),
          defaultChecked: selectedRoom === room.id,
          onChange: e => {
            if (e.target.checked) {
              moveUser(user.userId, room.id, selectedRoom);
            } else {
              moveUser(user.userId, room.id, 0);
            }
          }
        }), /*#__PURE__*/React.createElement("label", {
          htmlFor: "itemId".concat(room.id)
        }, /*#__PURE__*/React.createElement("input", {
          type: "hidden",
          id: "itemId".concat(room.id)
        }))), /*#__PURE__*/React.createElement(Styled.TextName, null, user.name, room.id !== selectedRoom && room.id !== 0 ? "\t[".concat(room.id, "]") : ''));
      });
    }).flat();
    return userElements;
  }, [rooms, selectedRoom]);
  return /*#__PURE__*/React.createElement(Styled.SelectUserScreen, null, /*#__PURE__*/React.createElement(Styled.Header, null, /*#__PURE__*/React.createElement(Styled.Title, null, intl.formatMessage(intlMessages.breakoutRoomLabel, {
    0: selectedRoom
  })), /*#__PURE__*/React.createElement(Styled.ButtonAdd, {
    size: "md",
    label: intl.formatMessage(intlMessages.doneLabel),
    color: "primary",
    onClick: confirm
  })), users);
};
module.exportDefault(RoomUserList);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/create-breakout-room/breakout-room-user-assignment-mobile/room-user-list/styles //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let TextElipsis, TitleElipsis;
module.link("/imports/ui/stylesheets/styled-components/placeholders", {
  TextElipsis(v) {
    TextElipsis = v;
  },
  TitleElipsis(v) {
    TitleElipsis = v;
  }
}, 2);
let colorWhite, colorGrayLighter, colorGrayLight;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorGrayLight(v) {
    colorGrayLight = v;
  }
}, 3);
let borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  }
}, 4);
let lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 5);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 6);
const SelectUserContainer = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin: 1.5rem 1rem;\n"])));
const Round = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n\n  & > label {\n    margin-top: -10px;\n    background-color: #fff;\n    border: 1px solid #ccc;\n    border-radius: 50%;\n    cursor: pointer;\n    height: 28px;\n    left: 0;\n    right : auto;\n    position: absolute;\n    top: 0;\n    width: 28px;\n\n    [dir=\"rtl\"] & {\n      left : auto;\n      right: 0;\n    }\n  }\n\n  & > label:after {\n    border: {\n      style: solid;\n      color:  #fff;\n      width: 2px;\n      right: {\n        style : none;\n      }\n      top: {\n        style: none;\n      }\n    }\n    content: \"\";\n    height: 6px;\n    left: 7px;\n    opacity: 0;\n    position: absolute;\n    top: 8px;\n    transform: rotate(-45deg);\n    width: 12px;\n\n    [dir=\"rtl\"] & {\n      border: {\n        style: solid;\n        color:  #fff;\n        width: 2px;\n        left: {\n          style : none;\n        }\n        top: {\n          style: none;\n        }\n      }\n    }\n  }\n\n  & > input[type=\"checkbox\"] {\n    visibility: hidden;\n  }\n\n  & > input[type=\"checkbox\"]:checked + label {\n    background-color: #66bb6a;\n    border-color: #66bb6a;\n  }\n\n  & > input[type=\"checkbox\"]:checked + label:after {\n    opacity: 1;\n  }\n"])));
const TextName = styled(TextElipsis)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin-left: 1.5rem;\n"])));
const LockIcon = styled.span(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  float: right;\n  margin-right: 1rem;\n  background:red;\n\n  @media ", " {\n    margin-left: .5rem;\n    margin-right: auto;\n    float: left;\n  }\n\n  &:after {\n    font-family: 'bbb-icons' !important;\n    content: '\\e926';\n    color: ", ";\n  }\n"], ["\n  float: right;\n  margin-right: 1rem;\n  background:red;\n\n  @media ", " {\n    margin-left: .5rem;\n    margin-right: auto;\n    float: left;\n  }\n\n  &:after {\n    font-family: 'bbb-icons' !important;\n    content: '\\\\e926';\n    color: ", ";\n  }\n"])), smallOnly, colorGrayLight);
const SelectUserScreen = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  position: fixed;\n  display: block;\n  height: 100vh;\n  width: 100%;\n  background-color: ", ";\n  z-index: 1002;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n"])), colorWhite);
const Header = styled.header(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  padding: ", " 0;\n  border-bottom: ", " solid ", ";\n  margin: 0 1rem 0 1rem;\n"])), lineHeightComputed, borderSize, colorGrayLighter);
const Title = styled(TitleElipsis)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  align-content: flex-end;\n  flex: 1;\n  margin: 0;\n  font-weight: 400;\n"])));
// @ts-ignore - button is a JS component
const ButtonAdd = styled(Button)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  flex: 0 1 35%;\n"])));
module.exportDefault({
  SelectUserContainer,
  Round,
  TextName,
  LockIcon,
  SelectUserScreen,
  Header,
  Title,
  ButtonAdd
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/create-breakout-room/breakout-room-user-assignment-mobile/component.tsx         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useMemo, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 2);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 3);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let RoomUserList;
module.link("./room-user-list/component", {
  default(v) {
    RoomUserList = v;
  }
}, 5);
const intlMessages = defineMessages({
  nextLabel: {
    id: 'app.createBreakoutRoom.nextLabel',
    description: 'Next label'
  },
  backLabel: {
    id: 'app.audio.backLabel',
    description: 'Back label'
  },
  breakoutRoomDesc: {
    id: 'app.createBreakoutRoom.modalDesc',
    description: 'modal description'
  },
  addParticipantLabel: {
    id: 'app.createBreakoutRoom.addParticipantLabel',
    description: 'add Participant label'
  },
  breakoutRoomLabel: {
    id: 'app.createBreakoutRoom.breakoutRoomLabel',
    description: 'breakout room label'
  }
});
const BreakoutRoomUserAssignmentMobile = _ref => {
  let {
    numberOfRooms,
    selectedRoom,
    setSelectedRoom,
    moveUser,
    rooms
  } = _ref;
  const intl = useIntl();
  const [layer, setLayer] = useState(1);
  const btnLevelId = useMemo(() => uniqueId('btn-set-level-'), []);
  const levelingButton = useMemo(() => {
    return /*#__PURE__*/React.createElement(Button, {
      color: "primary",
      size: "lg",
      label: layer === 1 ? intl.formatMessage(intlMessages.nextLabel) : intl.formatMessage(intlMessages.backLabel),
      onClick: () => layer === 1 ? setLayer(2) : setLayer(1),
      key: btnLevelId
    });
  }, [layer]);
  const layerTwo = useMemo(() => {
    if (layer === 2) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.SubTitle, null, intl.formatMessage(intlMessages.breakoutRoomDesc)), /*#__PURE__*/React.createElement(Styled.ListContainer, null, /*#__PURE__*/React.createElement("span", null, new Array(numberOfRooms).fill(1).map((_, idx) => /*#__PURE__*/React.createElement(Styled.RoomItem, null, /*#__PURE__*/React.createElement(Styled.ItemTitle, null, intl.formatMessage(intlMessages.breakoutRoomLabel, {
        0: idx + 1
      })), /*#__PURE__*/React.createElement(Styled.ItemButton, {
        label: intl.formatMessage(intlMessages.addParticipantLabel),
        size: "lg",
        ghost: true,
        color: "primary",
        onClick: () => {
          setLayer(3);
          setSelectedRoom(idx + 1);
        }
      }))))));
    }
    return null;
  }, [layer, numberOfRooms]);
  const layerThree = useMemo(() => {
    return /*#__PURE__*/React.createElement(RoomUserList, {
      confirm: () => setLayer(2),
      selectedRoom: selectedRoom,
      rooms: rooms,
      moveUser: moveUser
    });
  }, [selectedRoom, rooms]);
  const layers = {
    1: null,
    2: layerTwo,
    3: layerThree
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, layers[layer], levelingButton);
};
module.exportDefault(BreakoutRoomUserAssignmentMobile);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"breakout-room-user-assignment":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/create-breakout-room/breakout-room-user-assignment/component.tsx                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let range;
module.link("/imports/utils/array-utils", {
  range(v) {
    range = v;
  }
}, 2);
let Icon;
module.link("/imports/ui/components/common/icon/icon-ts/component", {
  default(v) {
    Icon = v;
  }
}, 3);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 5);
let ManageRoomLabel;
module.link("../manage-room-label/component", {
  default(v) {
    ManageRoomLabel = v;
  }
}, 6);
const intlMessages = defineMessages({
  breakoutRoomTitle: {
    id: 'app.createBreakoutRoom.title',
    description: 'modal title'
  },
  breakoutRoomDesc: {
    id: 'app.createBreakoutRoom.modalDesc',
    description: 'modal description'
  },
  breakoutRoomUpdateDesc: {
    id: 'app.updateBreakoutRoom.modalDesc',
    description: 'update modal description'
  },
  cancelLabel: {
    id: 'app.updateBreakoutRoom.cancelLabel',
    description: 'used in the button that close update modal'
  },
  updateTitle: {
    id: 'app.updateBreakoutRoom.title',
    description: 'update breakout title'
  },
  updateConfirm: {
    id: 'app.updateBreakoutRoom.confirm',
    description: 'Update to breakout confirm button label'
  },
  resetUserRoom: {
    id: 'app.update.resetRoom',
    description: 'Reset user room button label'
  },
  confirmButton: {
    id: 'app.createBreakoutRoom.confirm',
    description: 'confirm button label'
  },
  dismissLabel: {
    id: 'app.presentationUploder.dismissLabel',
    description: 'used in the button that close modal'
  },
  numberOfRooms: {
    id: 'app.createBreakoutRoom.numberOfRooms',
    description: 'number of rooms label'
  },
  duration: {
    id: 'app.createBreakoutRoom.durationInMinutes',
    description: 'duration time label'
  },
  resetAssignments: {
    id: 'app.createBreakoutRoom.resetAssignments',
    description: 'reset assignments label'
  },
  resetAssignmentsDesc: {
    id: 'app.createBreakoutRoom.resetAssignmentsDesc',
    description: 'reset assignments label description'
  },
  randomlyAssign: {
    id: 'app.createBreakoutRoom.randomlyAssign',
    description: 'randomly assign label'
  },
  randomlyAssignDesc: {
    id: 'app.createBreakoutRoom.randomlyAssignDesc',
    description: 'randomly assign label description'
  },
  breakoutRoom: {
    id: 'app.createBreakoutRoom.room',
    description: 'breakout room'
  },
  freeJoinLabel: {
    id: 'app.createBreakoutRoom.freeJoin',
    description: 'free join label'
  },
  captureNotesLabel: {
    id: 'app.createBreakoutRoom.captureNotes',
    description: 'capture shared notes label'
  },
  captureSlidesLabel: {
    id: 'app.createBreakoutRoom.captureSlides',
    description: 'capture slides label'
  },
  captureNotesType: {
    id: 'app.notes.label',
    description: 'indicates notes have been captured'
  },
  captureSlidesType: {
    id: 'app.shortcut-help.whiteboard',
    description: 'indicates the whiteboard has been captured'
  },
  roomLabel: {
    id: 'app.createBreakoutRoom.room',
    description: 'Room label'
  },
  leastOneWarnBreakout: {
    id: 'app.createBreakoutRoom.leastOneWarnBreakout',
    description: 'warn message label'
  },
  notAssigned: {
    id: 'app.createBreakoutRoom.notAssigned',
    description: 'Not assigned label'
  },
  breakoutRoomLabel: {
    id: 'app.createBreakoutRoom.breakoutRoomLabel',
    description: 'breakout room label'
  },
  addParticipantLabel: {
    id: 'app.createBreakoutRoom.addParticipantLabel',
    description: 'add Participant label'
  },
  nextLabel: {
    id: 'app.createBreakoutRoom.nextLabel',
    description: 'Next label'
  },
  backLabel: {
    id: 'app.audio.backLabel',
    description: 'Back label'
  },
  minusRoomTime: {
    id: 'app.createBreakoutRoom.minusRoomTime',
    description: 'aria label for btn to decrease room time'
  },
  addRoomTime: {
    id: 'app.createBreakoutRoom.addRoomTime',
    description: 'aria label for btn to increase room time'
  },
  record: {
    id: 'app.createBreakoutRoom.record',
    description: 'label for checkbox to allow record'
  },
  roomTime: {
    id: 'app.createBreakoutRoom.roomTime',
    description: 'used to provide current room time for aria label'
  },
  numberOfRoomsIsValid: {
    id: 'app.createBreakoutRoom.numberOfRoomsError',
    description: 'Label an error message'
  },
  roomNameEmptyIsValid: {
    id: 'app.createBreakoutRoom.emptyRoomNameError',
    description: 'Label an error message'
  },
  roomNameDuplicatedIsValid: {
    id: 'app.createBreakoutRoom.duplicatedRoomNameError',
    description: 'Label an error message'
  },
  you: {
    id: 'app.userList.you',
    description: 'Text for identifying your user'
  },
  minimumDurationWarnBreakout: {
    id: 'app.createBreakoutRoom.minimumDurationWarnBreakout',
    description: 'minimum duration warning message label'
  },
  roomNameInputDesc: {
    id: 'app.createBreakoutRoom.roomNameInputDesc',
    description: 'aria description for room name change'
  },
  movedUserLabel: {
    id: 'app.createBreakoutRoom.movedUserLabel',
    description: 'screen reader alert when users are moved to rooms'
  },
  manageRooms: {
    id: 'app.createBreakoutRoom.manageRoomsLabel',
    description: 'Label for manage rooms'
  },
  sendInvitationToMods: {
    id: 'app.createBreakoutRoom.sendInvitationToMods',
    description: 'label for checkbox send invitation to moderators'
  }
});
const isMe = intId => intId === Auth.userID;
const BreakoutRoomUserAssignment = _ref => {
  var _rooms$, _rooms$$users, _rooms$2, _rooms$2$users;
  let {
    moveUser,
    rooms,
    getRoomName,
    changeRoomName,
    numberOfRooms,
    setSelectedId,
    randomlyAssign,
    resetRooms,
    users
  } = _ref;
  const intl = useIntl();
  const dragStart = ev => {
    const paragraphElement = ev.target;
    ev.dataTransfer.setData('text', paragraphElement.id);
    setSelectedId(paragraphElement.id);
  };
  const dragEnd = () => {
    setSelectedId('');
  };
  const allowDrop = ev => {
    ev.preventDefault();
  };
  const drop = roomNumber => ev => {
    if (ev.preventDefault) {
      ev.preventDefault();
    }
    const data = ev.dataTransfer.getData('text');
    const [userId, from] = data.split('-');
    moveUser(userId, Number(from), roomNumber);
    setSelectedId('');
  };
  const hasNameDuplicated = room => {
    var _rooms$room;
    const roomName = ((_rooms$room = rooms[room]) === null || _rooms$room === void 0 ? void 0 : _rooms$room.name) || '';
    return Object.values(rooms).filter(r => r.name === roomName).length > 1;
  };
  useEffect(() => {
    if (numberOfRooms) {
      resetRooms(numberOfRooms);
    }
  }, [numberOfRooms]);
  const roomUserList = room => {
    if (rooms[room]) {
      return rooms[room].users.map(user => {
        return /*#__PURE__*/React.createElement(Styled.RoomUserItem, {
          tabIndex: -1,
          id: "".concat(user.userId, "-").concat(room),
          key: user.userId,
          draggable: true,
          onDragStart: dragStart,
          onDragEnd: dragEnd
        }, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement("span", null, user.name), /*#__PURE__*/React.createElement("i", null, isMe(user.userId) ? " (".concat(intl.formatMessage(intlMessages.you), ")") : '')), room !== 0 ? /*#__PURE__*/React.createElement("span", {
          key: "".concat(user.userId, "-").concat(room),
          tabIndex: 0,
          className: "close",
          role: "button",
          "aria-label": intl.formatMessage(intlMessages.resetUserRoom),
          onKeyDown: () => {
            moveUser(user.userId, room, 0);
          },
          onClick: () => {
            moveUser(user.userId, room, 0);
          }
        }, /*#__PURE__*/React.createElement(Icon, {
          iconName: "close"
        })) : null);
      });
    }
    return '';
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ManageRoomLabel, {
    onAssignReset: () => {
      resetRooms(0);
    },
    onAssignRandomly: randomlyAssign,
    numberOfRoomsIsValid: numberOfRooms > 0,
    leastOneUserIsValid: ((_rooms$ = rooms[0]) === null || _rooms$ === void 0 ? void 0 : (_rooms$$users = _rooms$.users) === null || _rooms$$users === void 0 ? void 0 : _rooms$$users.length) < users.length
  }), /*#__PURE__*/React.createElement(Styled.ContentContainer, null, /*#__PURE__*/React.createElement(Styled.Alert, {
    valid: true,
    role: "alert"
  }, /*#__PURE__*/React.createElement(Styled.FreeJoinLabel, null, /*#__PURE__*/React.createElement(Styled.BreakoutNameInput, {
    type: "text",
    readOnly: true,
    value: intl.formatMessage(intlMessages.notAssigned, {
      0: 0
    })
  })), /*#__PURE__*/React.createElement(Styled.BreakoutBox, {
    hundred: true,
    id: "breakoutBox-0",
    onDrop: drop(0),
    onDragOver: allowDrop,
    tabIndex: 0
  }, roomUserList(0)), /*#__PURE__*/React.createElement(Styled.SpanWarn, {
    "data-test": "warningNoUserAssigned",
    valid: ((_rooms$2 = rooms[0]) === null || _rooms$2 === void 0 ? void 0 : (_rooms$2$users = _rooms$2.users) === null || _rooms$2$users === void 0 ? void 0 : _rooms$2$users.length) < users.length
  }, intl.formatMessage(intlMessages.leastOneWarnBreakout))), /*#__PURE__*/React.createElement(Styled.BoxContainer, {
    key: "rooms-grid-",
    "data-test": "roomGrid"
  }, range(1, numberOfRooms + 1).map(value => /*#__PURE__*/React.createElement("div", {
    key: "room-".concat(value)
  }, /*#__PURE__*/React.createElement(Styled.FreeJoinLabel, null, /*#__PURE__*/React.createElement(Styled.RoomName, {
    type: "text",
    maxLength: 255,
    duplicated: hasNameDuplicated(value),
    value: getRoomName(value),
    onChange: e => {
      changeRoomName(value, e.target.value);
    },
    onBlur: e => {
      changeRoomName(value, e.target.value);
    },
    "data-test": getRoomName(value).length === 0 ? "room-error-".concat(value) : "roomName-".concat(value)
  }), /*#__PURE__*/React.createElement("div", {
    "aria-hidden": true,
    id: "room-input-".concat(value),
    className: "sr-only"
  }, intl.formatMessage(intlMessages.roomNameInputDesc))), /*#__PURE__*/React.createElement(Styled.BreakoutBox, {
    id: "breakoutBox-".concat(value),
    onDrop: drop(value),
    onDragOver: allowDrop,
    hundred: false,
    tabIndex: 0
  }, roomUserList(value)), hasNameDuplicated(value) ? /*#__PURE__*/React.createElement(Styled.SpanWarn, {
    valid: true
  }, intl.formatMessage(intlMessages.roomNameDuplicatedIsValid)) : null, getRoomName(value).length === 0 ? /*#__PURE__*/React.createElement(Styled.SpanWarn, {
    valid: true,
    "aria-hidden": true,
    id: "room-error-".concat(value)
  }, intl.formatMessage(intlMessages.roomNameEmptyIsValid)) : null)))));
};
module.exportDefault(BreakoutRoomUserAssignment);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"manage-room-label":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/create-breakout-room/manage-room-label/component.tsx                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 2);
const intlMessages = defineMessages({
  manageRooms: {
    id: 'app.createBreakoutRoom.manageRoomsLabel',
    description: 'Label for manage rooms'
  },
  resetAssignments: {
    id: 'app.createBreakoutRoom.resetAssignments',
    description: 'reset assignments label'
  },
  resetAssignmentsDesc: {
    id: 'app.createBreakoutRoom.resetAssignmentsDesc',
    description: 'reset assignments label description'
  },
  randomlyAssign: {
    id: 'app.createBreakoutRoom.randomlyAssign',
    description: 'randomly assign label'
  },
  randomlyAssignDesc: {
    id: 'app.createBreakoutRoom.randomlyAssignDesc',
    description: 'randomly assign label description'
  }
});
const ManageRoomLabel = _ref => {
  let {
    numberOfRoomsIsValid,
    leastOneUserIsValid,
    onAssignReset,
    onAssignRandomly
  } = _ref;
  const intl = useIntl();
  return /*#__PURE__*/React.createElement(Styled.AssignBtnsContainer, null, /*#__PURE__*/React.createElement(Styled.LabelText, {
    bold: true,
    "aria-hidden": true
  }, intl.formatMessage(intlMessages.manageRooms)), leastOneUserIsValid ? /*#__PURE__*/React.createElement(Styled.AssignBtns, {
    "data-test": "resetAssignments",
    label: intl.formatMessage(intlMessages.resetAssignments),
    "aria-describedby": "resetAssignmentsDesc",
    onClick: onAssignReset,
    size: "sm",
    color: "default",
    disabled: !numberOfRoomsIsValid
  }) : /*#__PURE__*/React.createElement(Styled.AssignBtns, {
    $random: true,
    "data-test": "randomlyAssign",
    label: intl.formatMessage(intlMessages.randomlyAssign),
    "aria-describedby": "randomlyAssignDesc",
    onClick: onAssignRandomly,
    size: "sm",
    color: "default"
  }));
};
module.exportDefault(ManageRoomLabel);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"room-managment-state":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/create-breakout-room/room-managment-state/component.tsx                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
const intlMessages = defineMessages({
  breakoutRoom: {
    id: 'app.createBreakoutRoom.room',
    description: 'breakout room'
  },
  notAssigned: {
    id: 'app.createBreakoutRoom.notAssigned',
    description: 'Not assigned label'
  }
});
const RoomManagmentState = _ref => {
  let {
    numberOfRooms,
    users,
    RendererComponent,
    setFormIsValid,
    runningRooms,
    setRoomsRef,
    setMoveRegisterRef
  } = _ref;
  const intl = useIntl();
  const [selectedId, setSelectedId] = useState('');
  const [selectedRoom, setSelectedRoom] = useState(0);
  const [rooms, setRooms] = useState({});
  const [init, setInit] = useState(false);
  const [movementRegistered, setMovementRegistered] = useState({});
  // accepts one or multiple users
  const moveUser = (userId, from, to) => {
    const userIds = Array.isArray(userId) ? userId : [userId];
    const fromRooms = Array.isArray(from) ? from : [from];
    const toRooms = Array.isArray(to) ? to : [to];
    let updatedMovementRegistered = _objectSpread({}, movementRegistered);
    const updatedRooms = _objectSpread({}, rooms);
    userIds.forEach((id, index) => {
      var _runningRooms$find, _runningRooms$find2;
      const fromRoom = fromRooms[index] || fromRooms[0];
      const toRoom = toRooms[index] || toRooms[0];
      const room = updatedRooms[toRoom];
      const roomFrom = updatedRooms[Number(fromRoom)];
      if (fromRoom === toRoom) return null;
      updatedMovementRegistered = _objectSpread(_objectSpread({}, updatedMovementRegistered), {}, {
        [id]: {
          fromSequence: fromRoom,
          toSequence: toRoom,
          toRoomId: runningRooms === null || runningRooms === void 0 ? void 0 : (_runningRooms$find = runningRooms.find(r => r.sequence === toRoom)) === null || _runningRooms$find === void 0 ? void 0 : _runningRooms$find.breakoutRoomId,
          fromRoomId: runningRooms === null || runningRooms === void 0 ? void 0 : (_runningRooms$find2 = runningRooms.find(r => r.sequence === fromRoom)) === null || _runningRooms$find2 === void 0 ? void 0 : _runningRooms$find2.breakoutRoomId
        }
      });
      if (!updatedRooms[toRoom]) {
        updatedRooms[fromRoom].users = updatedRooms[fromRoom].users.filter(user => user.userId !== id) || [];
        updatedRooms[toRoom] = {
          id: toRoom,
          name: intl.formatMessage(intlMessages.breakoutRoom, {
            0: toRoom
          }),
          users: [users.find(user => user.userId === id)]
        };
      } else {
        var _room$users, _roomFrom$users;
        updatedRooms[toRoom] = _objectSpread(_objectSpread({}, room), {}, {
          users: [...((_room$users = room === null || room === void 0 ? void 0 : room.users) !== null && _room$users !== void 0 ? _room$users : []), roomFrom === null || roomFrom === void 0 ? void 0 : (_roomFrom$users = roomFrom.users) === null || _roomFrom$users === void 0 ? void 0 : _roomFrom$users.find(user => user.userId === id)]
        });
        updatedRooms[fromRoom] = _objectSpread(_objectSpread({}, roomFrom), {}, {
          users: roomFrom === null || roomFrom === void 0 ? void 0 : roomFrom.users.filter(user => user.userId !== id)
        });
      }
      return null;
    });
    setMovementRegistered(updatedMovementRegistered);
    setRooms(updatedRooms);
  };
  const roomName = room => {
    const defaultName = intl.formatMessage(intlMessages.breakoutRoom, {
      0: room
    });
    if (rooms[room]) {
      return rooms[room].name || defaultName;
    }
    return defaultName;
  };
  const changeRoomName = (room, name) => {
    setRooms(prevRooms => {
      const rooms = _objectSpread({}, prevRooms);
      if (!rooms[room]) {
        rooms[room] = {
          id: room,
          name: '',
          users: []
        };
      }
      rooms[room].name = name;
      return rooms;
    });
  };
  const randomlyAssign = () => {
    const withoutModerators = rooms[0].users.filter(user => !user.isModerator);
    const userIds = withoutModerators.map(user => user.userId);
    const randomRooms = withoutModerators.map(() => Math.floor(Math.random() * numberOfRooms) + 1);
    moveUser(userIds, 0, randomRooms);
  };
  const resetRooms = cap => {
    const greterThanRooms = Object.keys(rooms).filter(room => Number(room) > cap);
    greterThanRooms.forEach(room => {
      if (rooms && rooms[Number(room)]) {
        setRooms(prevRooms => _objectSpread(_objectSpread({}, prevRooms), {}, {
          0: _objectSpread(_objectSpread({}, prevRooms[0]), {}, {
            users: [...prevRooms[0].users, ...rooms[Number(room)].users]
          }),
          [Number(room)]: _objectSpread(_objectSpread({}, prevRooms[Number(room)]), {}, {
            users: []
          })
        }));
      }
    });
  };
  useEffect(() => {
    if (users && users.length > 0) {
      // set users to room 0
      setInit(true);
      setRooms(prevRooms => _objectSpread(_objectSpread({}, prevRooms !== null && prevRooms !== void 0 ? prevRooms : {}), {}, {
        0: {
          id: 0,
          name: intl.formatMessage(intlMessages.notAssigned, {
            0: 0
          }),
          users
        }
      }));
    }
  }, [users]);
  useEffect(() => {
    if (runningRooms && init) {
      const usersToMove = [];
      const toRooms = [];
      runningRooms.forEach(r => {
        r.participants.forEach(u => {
          var _rooms$r$sequence, _rooms$r$sequence$use;
          if (!((_rooms$r$sequence = rooms[r.sequence]) !== null && _rooms$r$sequence !== void 0 && (_rooms$r$sequence$use = _rooms$r$sequence.users) !== null && _rooms$r$sequence$use !== void 0 && _rooms$r$sequence$use.find(user => user.userId === u.user.userId))) {
            usersToMove.push(u.user.userId);
            toRooms.push(r.sequence);
          }
        });
      });
      if (usersToMove.length > 0) {
        moveUser(usersToMove, 0, toRooms);
      }
    }
  }, [runningRooms, init]);
  useEffect(() => {
    if (rooms) {
      var _rooms$, _rooms$$users;
      setRoomsRef(rooms);
      if (!(((_rooms$ = rooms[0]) === null || _rooms$ === void 0 ? void 0 : (_rooms$$users = _rooms$.users) === null || _rooms$$users === void 0 ? void 0 : _rooms$$users.length) === users.length)) {
        setFormIsValid(true);
      } else {
        setFormIsValid(false);
      }
    }
  }, [rooms]);
  useEffect(() => {
    if (movementRegistered) {
      setMoveRegisterRef(movementRegistered);
    }
  }, [movementRegistered]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, init ? /*#__PURE__*/React.createElement(RendererComponent, {
    moveUser: moveUser,
    rooms: rooms,
    getRoomName: roomName,
    changeRoomName: changeRoomName,
    numberOfRooms: numberOfRooms,
    selectedId: selectedId !== null && selectedId !== void 0 ? selectedId : '',
    setSelectedId: setSelectedId,
    selectedRoom: selectedRoom,
    setSelectedRoom: setSelectedRoom,
    randomlyAssign: randomlyAssign,
    resetRooms: resetRooms,
    users: users
  }) : null);
};
module.exportDefault(RoomManagmentState);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/create-breakout-room/component.tsx                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useMemo;
module.link("react", {
  default(v) {
    React = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let ModalFullscreen;
module.link("/imports/ui/components/common/modal/fullscreen/component", {
  default(v) {
    ModalFullscreen = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let range;
module.link("ramda", {
  range(v) {
    range = v;
  }
}, 3);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 4);
let useIsImportPresentationWithAnnotationsFromBreakoutRoomsEnabled, useIsImportSharedNotesFromBreakoutRoomsEnabled;
module.link("/imports/ui/services/features", {
  useIsImportPresentationWithAnnotationsFromBreakoutRoomsEnabled(v) {
    useIsImportPresentationWithAnnotationsFromBreakoutRoomsEnabled = v;
  },
  useIsImportSharedNotesFromBreakoutRoomsEnabled(v) {
    useIsImportSharedNotesFromBreakoutRoomsEnabled = v;
  }
}, 5);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 6);
let useLazyQuery, useQuery, useMutation;
module.link("@apollo/client", {
  useLazyQuery(v) {
    useLazyQuery = v;
  },
  useQuery(v) {
    useQuery = v;
  },
  useMutation(v) {
    useMutation = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
let getBreakouts, getUser;
module.link("./queries", {
  getBreakouts(v) {
    getBreakouts = v;
  },
  getUser(v) {
    getUser = v;
  }
}, 9);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 10);
let BreakoutRoomUserAssignment;
module.link("./breakout-room-user-assignment/component", {
  default(v) {
    BreakoutRoomUserAssignment = v;
  }
}, 11);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 12);
let BreakoutRoomUserAssignmentMobile;
module.link("./breakout-room-user-assignment-mobile/component", {
  default(v) {
    BreakoutRoomUserAssignmentMobile = v;
  }
}, 13);
let RoomManagmentState;
module.link("./room-managment-state/component", {
  default(v) {
    RoomManagmentState = v;
  }
}, 14);
let BREAKOUT_ROOM_CREATE, BREAKOUT_ROOM_MOVE_USER;
module.link("../mutations", {
  BREAKOUT_ROOM_CREATE(v) {
    BREAKOUT_ROOM_CREATE = v;
  },
  BREAKOUT_ROOM_MOVE_USER(v) {
    BREAKOUT_ROOM_MOVE_USER = v;
  }
}, 15);
const MIN_BREAKOUT_ROOMS = 2;
const MIN_BREAKOUT_TIME = 5;
const DEFAULT_BREAKOUT_TIME = 15;
const intlMessages = defineMessages({
  breakoutRoomTitle: {
    id: 'app.createBreakoutRoom.title',
    description: 'modal title'
  },
  breakoutRoomDesc: {
    id: 'app.createBreakoutRoom.modalDesc',
    description: 'modal description'
  },
  breakoutRoomUpdateDesc: {
    id: 'app.updateBreakoutRoom.modalDesc',
    description: 'update modal description'
  },
  cancelLabel: {
    id: 'app.updateBreakoutRoom.cancelLabel',
    description: 'used in the button that close update modal'
  },
  updateTitle: {
    id: 'app.updateBreakoutRoom.title',
    description: 'update breakout title'
  },
  updateConfirm: {
    id: 'app.updateBreakoutRoom.confirm',
    description: 'Update to breakout confirm button label'
  },
  resetUserRoom: {
    id: 'app.update.resetRoom',
    description: 'Reset user room button label'
  },
  confirmButton: {
    id: 'app.createBreakoutRoom.confirm',
    description: 'confirm button label'
  },
  dismissLabel: {
    id: 'app.presentationUploder.dismissLabel',
    description: 'used in the button that close modal'
  },
  numberOfRooms: {
    id: 'app.createBreakoutRoom.numberOfRooms',
    description: 'number of rooms label'
  },
  duration: {
    id: 'app.createBreakoutRoom.durationInMinutes',
    description: 'duration time label'
  },
  resetAssignments: {
    id: 'app.createBreakoutRoom.resetAssignments',
    description: 'reset assignments label'
  },
  resetAssignmentsDesc: {
    id: 'app.createBreakoutRoom.resetAssignmentsDesc',
    description: 'reset assignments label description'
  },
  randomlyAssign: {
    id: 'app.createBreakoutRoom.randomlyAssign',
    description: 'randomly assign label'
  },
  randomlyAssignDesc: {
    id: 'app.createBreakoutRoom.randomlyAssignDesc',
    description: 'randomly assign label description'
  },
  breakoutRoom: {
    id: 'app.createBreakoutRoom.room',
    description: 'breakout room'
  },
  freeJoinLabel: {
    id: 'app.createBreakoutRoom.freeJoin',
    description: 'free join label'
  },
  captureNotesLabel: {
    id: 'app.createBreakoutRoom.captureNotes',
    description: 'capture shared notes label'
  },
  captureSlidesLabel: {
    id: 'app.createBreakoutRoom.captureSlides',
    description: 'capture slides label'
  },
  captureNotesType: {
    id: 'app.notes.label',
    description: 'indicates notes have been captured'
  },
  captureSlidesType: {
    id: 'app.shortcut-help.whiteboard',
    description: 'indicates the whiteboard has been captured'
  },
  roomLabel: {
    id: 'app.createBreakoutRoom.room',
    description: 'Room label'
  },
  leastOneWarnBreakout: {
    id: 'app.createBreakoutRoom.leastOneWarnBreakout',
    description: 'warn message label'
  },
  notAssigned: {
    id: 'app.createBreakoutRoom.notAssigned',
    description: 'Not assigned label'
  },
  breakoutRoomLabel: {
    id: 'app.createBreakoutRoom.breakoutRoomLabel',
    description: 'breakout room label'
  },
  addParticipantLabel: {
    id: 'app.createBreakoutRoom.addParticipantLabel',
    description: 'add Participant label'
  },
  nextLabel: {
    id: 'app.createBreakoutRoom.nextLabel',
    description: 'Next label'
  },
  backLabel: {
    id: 'app.audio.backLabel',
    description: 'Back label'
  },
  minusRoomTime: {
    id: 'app.createBreakoutRoom.minusRoomTime',
    description: 'aria label for btn to decrease room time'
  },
  addRoomTime: {
    id: 'app.createBreakoutRoom.addRoomTime',
    description: 'aria label for btn to increase room time'
  },
  record: {
    id: 'app.createBreakoutRoom.record',
    description: 'label for checkbox to allow record'
  },
  roomTime: {
    id: 'app.createBreakoutRoom.roomTime',
    description: 'used to provide current room time for aria label'
  },
  numberOfRoomsIsValid: {
    id: 'app.createBreakoutRoom.numberOfRoomsError',
    description: 'Label an error message'
  },
  roomNameEmptyIsValid: {
    id: 'app.createBreakoutRoom.emptyRoomNameError',
    description: 'Label an error message'
  },
  roomNameDuplicatedIsValid: {
    id: 'app.createBreakoutRoom.duplicatedRoomNameError',
    description: 'Label an error message'
  },
  you: {
    id: 'app.userList.you',
    description: 'Text for identifying your user'
  },
  minimumDurationWarnBreakout: {
    id: 'app.createBreakoutRoom.minimumDurationWarnBreakout',
    description: 'minimum duration warning message label'
  },
  roomNameInputDesc: {
    id: 'app.createBreakoutRoom.roomNameInputDesc',
    description: 'aria description for room name change'
  },
  movedUserLabel: {
    id: 'app.createBreakoutRoom.movedUserLabel',
    description: 'screen reader alert when users are moved to rooms'
  },
  manageRooms: {
    id: 'app.createBreakoutRoom.manageRoomsLabel',
    description: 'Label for manage rooms'
  },
  sendInvitationToMods: {
    id: 'app.createBreakoutRoom.sendInvitationToMods',
    description: 'label for checkbox send invitation to moderators'
  }
});
const CreateBreakoutRoom = _ref => {
  let {
    isOpen,
    setIsOpen,
    priority,
    isUpdate = false,
    isBreakoutRecordable,
    users,
    runningRooms
  } = _ref;
  const {
    isMobile
  } = deviceInfo;
  const intl = useIntl();
  const [numberOfRoomsIsValid, setNumberOfRoomsIsValid] = React.useState(true);
  const [durationIsValid, setDurationIsValid] = React.useState(true);
  const [freeJoin, setFreeJoin] = React.useState(false);
  const [record, setRecord] = React.useState(false);
  const [captureSlides, setCaptureSlides] = React.useState(false);
  const [leastOneUserIsValid, setLeastOneUserIsValid] = React.useState(false);
  const [captureNotes, setCaptureNotes] = React.useState(false);
  const [inviteMods, setInviteMods] = React.useState(false);
  const [numberOfRooms, setNumberOfRooms] = React.useState(MIN_BREAKOUT_ROOMS);
  const [durationTime, setDurationTime] = React.useState(DEFAULT_BREAKOUT_TIME);
  const isImportPresentationWithAnnotationsEnabled = useIsImportPresentationWithAnnotationsFromBreakoutRoomsEnabled();
  const isImportSharedNotesEnabled = useIsImportSharedNotesFromBreakoutRoomsEnabled();
  const [createBreakoutRoom] = useMutation(BREAKOUT_ROOM_CREATE);
  const [moveUser] = useMutation(BREAKOUT_ROOM_MOVE_USER);
  const roomsRef = React.useRef({});
  const moveRegisterRef = React.useRef({});
  const setRoomsRef = rooms => {
    roomsRef.current = rooms;
  };
  const setMoveRegisterRef = moveRegister => {
    moveRegisterRef.current = moveRegister;
  };
  const checkboxCallbackFactory = call => e => {
    const {
      checked
    } = e.target;
    call(checked);
  };
  const createRoom = () => {
    const rooms = roomsRef.current;
    const roomsArray = [];
    /* eslint no-restricted-syntax: "off" */
    for (let i = 0; i < numberOfRooms; i += 1) {
      const roomNumber = i + 1;
      if (rooms[roomNumber]) {
        const r = rooms[roomNumber];
        roomsArray.push({
          name: r.name,
          sequence: r.id,
          captureNotesFilename: "".concat(r.name.replace(/\s/g, '_'), "_").concat(intl.formatMessage(intlMessages.captureNotesType)),
          captureSlidesFilename: "".concat(r.name.replace(/\s/g, '_'), "_").concat(intl.formatMessage(intlMessages.captureSlidesType)),
          isDefaultName: r.name === intl.formatMessage(intlMessages.breakoutRoom, {
            0: r.id
          }),
          users: r.users.map(u => u.userId),
          freeJoin,
          shortName: r.name
        });
      } else {
        const defaultName = intl.formatMessage(intlMessages.breakoutRoom, {
          0: roomNumber
        });
        roomsArray.push({
          name: defaultName,
          sequence: roomNumber,
          captureNotesFilename: "".concat(defaultName.replace(/\s/g, '_'), "_").concat(intl.formatMessage(intlMessages.captureNotesType)),
          captureSlidesFilename: "".concat(defaultName.replace(/\s/g, '_'), "_").concat(intl.formatMessage(intlMessages.captureSlidesType)),
          isDefaultName: true,
          freeJoin,
          shortName: defaultName,
          users: []
        });
      }
    }
    createBreakoutRoom({
      variables: {
        record,
        captureNotes,
        captureSlides,
        durationInMinutes: durationTime,
        sendInviteToModerators: inviteMods,
        rooms: roomsArray
      }
    });
    setIsOpen(false);
  };
  const userUpdate = () => {
    const userIds = Object.keys(moveRegisterRef.current);
    userIds.forEach(userId => {
      const {
        fromRoomId,
        toRoomId
      } = moveRegisterRef.current[userId];
      if (fromRoomId !== toRoomId) {
        moveUser({
          variables: {
            userId,
            fromBreakoutRoomId: fromRoomId || '',
            toBreakoutRoomId: toRoomId
          }
        });
      }
    });
    setIsOpen(false);
  };
  const title = useMemo(() => /*#__PURE__*/React.createElement(Styled.SubTitle, null, isUpdate ? intl.formatMessage(intlMessages.breakoutRoomUpdateDesc) : intl.formatMessage(intlMessages.breakoutRoomDesc)), [isUpdate]);
  const checkboxesInfo = useMemo(() => {
    return [{
      allowed: true,
      htmlFor: 'freeJoinCheckbox',
      key: 'free-join-breakouts',
      id: 'freeJoinCheckbox',
      onChange: checkboxCallbackFactory(e => {
        setFreeJoin(e);
        setLeastOneUserIsValid(true);
      }),
      label: intl.formatMessage(intlMessages.freeJoinLabel)
    }, {
      allowed: isBreakoutRecordable,
      htmlFor: 'recordBreakoutCheckbox',
      key: 'record-breakouts',
      id: 'recordBreakoutCheckbox',
      onChange: checkboxCallbackFactory(setRecord),
      label: intl.formatMessage(intlMessages.record)
    }, {
      allowed: isImportPresentationWithAnnotationsEnabled,
      htmlFor: 'captureSlidesBreakoutCheckbox',
      key: 'capture-slides-breakouts',
      id: 'captureSlidesBreakoutCheckbox',
      onChange: checkboxCallbackFactory(setCaptureSlides),
      label: intl.formatMessage(intlMessages.captureSlidesLabel)
    }, {
      allowed: isImportSharedNotesEnabled,
      htmlFor: 'captureNotesBreakoutCheckbox',
      key: 'capture-notes-breakouts',
      id: 'captureNotesBreakoutCheckbox',
      onChange: checkboxCallbackFactory(setCaptureNotes),
      label: intl.formatMessage(intlMessages.captureNotesLabel)
    }, {
      allowed: true,
      htmlFor: 'sendInvitationToAssignedModeratorsCheckbox',
      key: 'send-invitation-to-assigned-moderators-breakouts',
      id: 'sendInvitationToAssignedModeratorsCheckbox',
      onChange: checkboxCallbackFactory(setInviteMods),
      label: intl.formatMessage(intlMessages.sendInvitationToMods)
    }];
  }, [isBreakoutRecordable, isImportPresentationWithAnnotationsEnabled, isImportSharedNotesEnabled]);
  const form = useMemo(() => {
    if (isUpdate) return null;
    const BREAKOUT_LIM = window.meetingClientSettings.public.app.breakouts.breakoutRoomLimit;
    const MAX_BREAKOUT_ROOMS = BREAKOUT_LIM > MIN_BREAKOUT_ROOMS ? BREAKOUT_LIM : MIN_BREAKOUT_ROOMS;
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: "breakout-form"
    }, /*#__PURE__*/React.createElement(Styled.BreakoutSettings, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.FormLabel, {
      valid: numberOfRoomsIsValid,
      "aria-hidden": true
    }, intl.formatMessage(intlMessages.numberOfRooms)), /*#__PURE__*/React.createElement(Styled.InputRooms, {
      id: "numberOfRooms",
      name: "numberOfRooms",
      valid: numberOfRoomsIsValid,
      value: numberOfRooms,
      onChange: e => {
        const {
          value
        } = e.target;
        setNumberOfRooms(Number.parseInt(value, 10));
        setNumberOfRoomsIsValid(true);
      },
      "aria-label": intl.formatMessage(intlMessages.numberOfRooms)
    }, range(MIN_BREAKOUT_ROOMS, MAX_BREAKOUT_ROOMS + 1).map(item => /*#__PURE__*/React.createElement("option", {
      key: uniqueId('value-')
    }, item)))), /*#__PURE__*/React.createElement(Styled.DurationLabel, {
      valid: durationIsValid,
      htmlFor: "breakoutRoomTime"
    }, /*#__PURE__*/React.createElement(Styled.LabelText, {
      bold: false,
      "aria-hidden": true
    }, intl.formatMessage(intlMessages.duration)), /*#__PURE__*/React.createElement(Styled.DurationArea, null, /*#__PURE__*/React.createElement(Styled.DurationInput, {
      type: "number",
      min: "1",
      value: durationTime,
      onChange: e => {
        const {
          value
        } = e.target;
        const v = Number.parseInt(value, 10);
        setDurationTime(v);
        setDurationIsValid(v >= MIN_BREAKOUT_TIME);
      },
      onBlur: e => {
        const {
          value
        } = e.target;
        const v = Number.parseInt(value, 10);
        setDurationTime(v && !(v <= 0) ? v : MIN_BREAKOUT_TIME);
        setDurationIsValid(true);
      },
      "aria-label": intl.formatMessage(intlMessages.duration),
      "data-test": "durationTime"
    })), /*#__PURE__*/React.createElement(Styled.SpanWarn, {
      "data-test": "minimumDurationWarnBreakout",
      valid: durationIsValid
    }, intl.formatMessage(intlMessages.minimumDurationWarnBreakout, {
      0: MIN_BREAKOUT_TIME
    }))), /*#__PURE__*/React.createElement(Styled.CheckBoxesContainer, {
      key: "breakout-checkboxes"
    }, checkboxesInfo.filter(item => item.allowed).map(item => /*#__PURE__*/React.createElement(Styled.FreeJoinLabel, {
      htmlFor: item.htmlFor,
      key: item.key
    }, /*#__PURE__*/React.createElement(Styled.FreeJoinCheckbox, {
      type: "checkbox",
      id: item.id,
      onChange: item.onChange,
      "aria-label": item.label
    }), /*#__PURE__*/React.createElement("span", {
      "aria-hidden": true
    }, item.label))))), /*#__PURE__*/React.createElement(Styled.SpanWarn, {
      valid: numberOfRoomsIsValid
    }, intl.formatMessage(intlMessages.numberOfRoomsIsValid)), /*#__PURE__*/React.createElement("span", {
      "aria-hidden": true,
      id: "randomlyAssignDesc",
      className: "sr-only"
    }, intl.formatMessage(intlMessages.randomlyAssignDesc)), /*#__PURE__*/React.createElement(Styled.Separator, null));
  }, [durationTime, durationIsValid, numberOfRooms, numberOfRoomsIsValid, isImportPresentationWithAnnotationsEnabled, isImportSharedNotesEnabled]);
  return /*#__PURE__*/React.createElement(ModalFullscreen, {
    title: isUpdate ? intl.formatMessage(intlMessages.updateTitle) : intl.formatMessage(intlMessages.breakoutRoomTitle),
    confirm: {
      label: isUpdate ? intl.formatMessage(intlMessages.updateConfirm) : intl.formatMessage(intlMessages.confirmButton),
      callback: isUpdate ? userUpdate : createRoom,
      disabled: !leastOneUserIsValid || !numberOfRoomsIsValid || !durationIsValid
    },
    dismiss: {
      label: isUpdate ? intl.formatMessage(intlMessages.cancelLabel) : intl.formatMessage(intlMessages.dismissLabel),
      callback: () => setIsOpen(false),
      disabled: false
    },
    isOpen: isOpen,
    priority: priority
  }, /*#__PURE__*/React.createElement(Styled.Content, null, title, form, /*#__PURE__*/React.createElement(RoomManagmentState, {
    numberOfRooms: numberOfRooms,
    users: users,
    RendererComponent: isMobile ? BreakoutRoomUserAssignmentMobile : BreakoutRoomUserAssignment,
    runningRooms: runningRooms,
    setRoomsRef: setRoomsRef,
    setMoveRegisterRef: setMoveRegisterRef,
    setFormIsValid: setLeastOneUserIsValid
  })));
};
const CreateBreakoutRoomContainer = _ref2 => {
  var _currentMeeting$break, _currentMeeting$break2, _usersData$user, _breakoutsData$breako;
  let {
    isOpen,
    setIsOpen,
    priority,
    isUpdate = false
  } = _ref2;
  const [fetchedBreakouts, setFetchedBreakouts] = React.useState(false);
  // isBreakoutRecordable - get from meeting breakout policies breakoutPolicies/record
  const {
    data: currentMeeting
  } = useMeeting(m => ({
    breakoutPolicies: m.breakoutPolicies
  }));
  const {
    data: usersData,
    loading: usersLoading,
    error: usersError
  } = useQuery(getUser, {
    fetchPolicy: 'network-only'
  });
  const [loadBreakouts, {
    data: breakoutsData,
    loading: breakoutsLoading,
    error: breakoutsError
  }] = useLazyQuery(getBreakouts, {
    fetchPolicy: 'network-only'
  });
  if (usersLoading || breakoutsLoading || !currentMeeting) {
    return null;
  }
  if (!fetchedBreakouts) {
    loadBreakouts();
    setFetchedBreakouts(true);
  }
  if (breakoutsLoading) return null;
  if (usersError || breakoutsError) {
    logger.info('Error loading users', usersError);
    logger.info('Error loading breakouts', breakoutsError);
    return /*#__PURE__*/React.createElement("div", null, JSON.stringify(usersError) || JSON.stringify(breakoutsError));
  }
  return /*#__PURE__*/React.createElement(CreateBreakoutRoom, {
    isOpen: isOpen,
    setIsOpen: setIsOpen,
    priority: priority,
    isUpdate: isUpdate,
    isBreakoutRecordable: (_currentMeeting$break = currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$break2 = currentMeeting.breakoutPolicies) === null || _currentMeeting$break2 === void 0 ? void 0 : _currentMeeting$break2.record) !== null && _currentMeeting$break !== void 0 ? _currentMeeting$break : true,
    users: (_usersData$user = usersData === null || usersData === void 0 ? void 0 : usersData.user) !== null && _usersData$user !== void 0 ? _usersData$user : [],
    runningRooms: (_breakoutsData$breako = breakoutsData === null || breakoutsData === void 0 ? void 0 : breakoutsData.breakoutRoom) !== null && _breakoutsData$breako !== void 0 ? _breakoutsData$breako : []
  });
};
module.exportDefault(CreateBreakoutRoomContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/create-breakout-room/queries.ts                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  getUser: () => getUser,
  getBreakouts: () => getBreakouts,
  getBreakoutCount: () => getBreakoutCount
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const getUser = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  query getUser {\n    user(\n      order_by: [\n        {role: asc},\n        {raiseHandTime: asc_nulls_last},\n        {awayTime: asc_nulls_last},\n        {isDialIn: desc},\n        {hasDrawPermissionOnCurrentPage: desc},\n        {nameSortable: asc},\n        {userId: asc}\n      ]) {\n      userId\n      name\n      isModerator\n    }\n  }\n"])));
const getBreakouts = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  query getBreakouts {\n    breakoutRoom {\n      sequence\n      name\n      breakoutRoomId\n      participants {\n        user {\n          name\n          userId\n          isModerator\n        }\n      }\n    }\n  }\n"])));
const getBreakoutCount = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  query getBreakoutCount {\n    breakoutRoom_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n"])));
module.exportDefault({
  getUser,
  getBreakouts
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/create-breakout-room/styles.ts                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 1);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 2);
let HoldButton;
module.link("/imports/ui/components/presentation/presentation-toolbar/zoom-tool/holdButton/component", {
  default(v) {
    HoldButton = v;
  }
}, 3);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 4);
let FlexRow, FlexColumn;
module.link("/imports/ui/stylesheets/styled-components/placeholders", {
  FlexRow(v) {
    FlexRow = v;
  },
  FlexColumn(v) {
    FlexColumn = v;
  }
}, 5);
let colorDanger, colorGray, colorGrayLight, colorGrayLighter, colorWhite, colorPrimary, colorBlueLight, colorGrayLightest;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorDanger(v) {
    colorDanger = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorGrayLight(v) {
    colorGrayLight = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorBlueLight(v) {
    colorBlueLight = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  }
}, 6);
let fontSizeSmall, fontSizeBase, fontSizeSmaller;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  },
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  fontSizeSmaller(v) {
    fontSizeSmaller = v;
  }
}, 7);
let borderRadius, borderSize, lgPaddingX, lgPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderRadius(v) {
    borderRadius = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  lgPaddingX(v) {
    lgPaddingX = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  }
}, 8);
const BoxContainer = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 1.6rem 1rem;\n  box-sizing: border-box;\n  padding-bottom: 1rem;\n"])));
const ContentContainer = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  grid-template-areas: \"sidebar content\";\n  grid-gap: 1.5rem;\n"])));
const Alert = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  grid-area: sidebar;\n  margin-bottom: 2.5rem;\n  ", "\n"])), _ref => {
  let {
    valid
  } = _ref;
  return valid === false && "\n    position: relative;\n\n    & > * {\n      border-color: ".concat(colorDanger, " !important;\n      color: ").concat(colorDanger, ";\n    }\n  ");
});
const FreeJoinLabel = styled.label(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  font-size: ", ";\n  font-weight: bolder;\n  display: flex;\n  align-items: center;\n  font-size: ", ";\n  margin-bottom: 0.2rem;\n\n  & > * {\n    margin: 0 .5rem 0 0;\n\n    [dir=\"rtl\"] & {\n      margin: 0 0 0 .5rem;\n    }\n  }\n"])), fontSizeSmall, fontSizeSmall);
const BreakoutNameInput = styled.input(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  width: 100%;\n  text-align: center;\n  font-weight: 600;\n  padding: .25rem .25rem .25rem 0;\n  margin: 0;\n  &::placeholder {\n    color: ", ";\n    opacity: 1;\n  }\n  border: 1px solid ", ";\n  margin-bottom: 1rem;\n\n  ", "\n"])), colorGray, colorGrayLightest, _ref2 => {
  let {
    readOnly
  } = _ref2;
  return readOnly && "\n    cursor: default;\n  ";
});
const BreakoutBox = styled(ScrollboxVertical)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  width: 100%;\n  height: 10rem;\n  border: 1px solid ", ";\n  border-radius: ", ";\n  padding: ", " 0;\n\n  ", "\n"])), colorGrayLightest, borderRadius, lgPaddingY, _ref3 => {
  let {
    hundred
  } = _ref3;
  return hundred && "\n  height: 100%;\n  ";
});
const SpanWarn = styled.span(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n"])), _ref4 => {
  let {
    valid
  } = _ref4;
  return valid && "\n    display: none;\n  ";
}, _ref5 => {
  let {
    valid
  } = _ref5;
  return !valid && "\n    margin: .25rem;\n    position: absolute;\n    font-size: ".concat(fontSizeSmall, ";\n    color: ").concat(colorDanger, ";\n    font-weight: 200;\n    white-space: nowrap;\n  ");
});
const RoomName = styled(BreakoutNameInput)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n"])), _ref6 => {
  let {
    value
  } = _ref6;
  return value.length === 0 && "\n    border-color: ".concat(colorDanger, " !important;\n  ");
}, _ref7 => {
  let {
    duplicated
  } = _ref7;
  return duplicated && "\n    border-color: ".concat(colorDanger, " !important;\n  ");
});
const BreakoutSettings = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: grid;\n  grid-template-columns: 1fr 1fr 2fr;\n  grid-template-rows: 1fr;\n  grid-gap: 2rem;\n\n  @media ", " {\n    grid-template-columns: 1fr ;\n    grid-template-rows: 1fr 1fr 1fr; \n    flex-direction: column;\n  }\n"])), smallOnly);
const FormLabel = styled.p(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  color: ", ";\n  white-space: nowrap;\n  margin-bottom: .5rem;\n\n  ", "\n"])), colorGray, _ref8 => {
  let {
    valid
  } = _ref8;
  return !valid && "\n    color: ".concat(colorDanger, ";\n  ");
});
const InputRooms = styled.select(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  color: ", ";\n  border: 1px solid ", ";\n  border-radius: ", ";\n  width: 100%;\n  padding-top: .25rem;\n  padding-bottom: .25rem;\n  padding: .25rem 0 .25rem .25rem;\n\n  ", "\n"])), colorWhite, colorGray, colorGrayLighter, borderRadius, _ref9 => {
  let {
    valid
  } = _ref9;
  return !valid && "\n      border-color: ".concat(colorDanger, " !important;\n  ");
});
const DurationLabel = styled.label(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  ", "\n"])), _ref10 => {
  let {
    valid
  } = _ref10;
  return !valid && "\n    & > * {\n      border-color: ".concat(colorDanger, " !important;\n      color: ").concat(colorDanger, ";\n    }\n  ");
});
const LabelText = styled.p(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  color: ", ";\n  white-space: nowrap;\n  margin-bottom: .5rem;\n\n  ", "\n"])), colorGray, _ref11 => {
  let {
    bold
  } = _ref11;
  return bold && "\n  font-weight: bold;\n  font-size: 1.5rem;\n  ";
});
const DurationArea = styled.div(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n"])));
const DurationInput = styled.input(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  color: ", ";\n  border: 1px solid ", ";\n  border-radius: ", ";\n  width: 100%;\n  text-align: left;\n  padding: .25rem;\n  \n\n  &::placeholder {\n    color: ", ";\n  }\n"])), colorWhite, colorGray, colorGrayLighter, borderRadius, colorGray);
const HoldButtonWrapper = styled(HoldButton)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  & > button > span {\n    padding-bottom: ", ";\n  }\n\n  & > button > span > i {\n    color: ", ";\n    width: ", ";\n    height: ", ";\n    font-size: 170% !important;\n  }\n"])), borderSize, colorGray, lgPaddingX, lgPaddingX);
const AssignBtnsContainer = styled.div(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n  justify-items: center;\n  display: flex;\n  flex-flow: row;\n  align-items: baseline;\n  margin-top: auto;\n"])));
// @ts-ignore - Button is a JS component
const AssignBtns = styled(Button)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: ", ";\n  white-space: nowrap;\n  margin-bottom: 0.5rem;\n\n  ", "\n"])), colorDanger, fontSizeSmall, _ref12 => {
  let {
    $random
  } = _ref12;
  return $random && "\n  color: ".concat(colorPrimary, ";\n  ");
});
const CheckBoxesContainer = styled(FlexRow)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  justify-content: flex-end; \n"])));
const Separator = styled.div(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["\n  width: 100%;\n  height: 1px;\n  margin: 1rem 0;\n  border: 1px solid ", ";\n"])), colorGrayLightest);
const FreeJoinCheckbox = styled.input(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\n  width: 1rem;\n  height: 1rem;\n"])));
const RoomUserItem = styled.p(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\n  margin: 0;\n  padding: .25rem 0 .25rem .25rem;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  cursor: pointer;\n  display: flex;\n  justify-content: space-between;\n\n  [dir=\"rtl\"] & {\n    padding: .25rem .25rem .25rem 0;\n  }\n\n  span.close {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-right: 5px;\n    font-size: ", ";\n  }\n\n  &:focus {\n    background-color: ", ";\n    color: ", ";\n  }\n"])), fontSizeSmaller, colorPrimary, colorWhite);
const LockIcon = styled.span(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\n  float: right;\n  margin-right: 1rem;\n\n  @media ", " {\n    margin-left: .5rem;\n    margin-right: auto;\n    float: left;\n  }\n\n  &:after {\n    font-family: 'bbb-icons' !important;\n    content: '\\e926';\n    color: ", ";\n  }\n"], ["\n  float: right;\n  margin-right: 1rem;\n\n  @media ", " {\n    margin-left: .5rem;\n    margin-right: auto;\n    float: left;\n  }\n\n  &:after {\n    font-family: 'bbb-icons' !important;\n    content: '\\\\e926';\n    color: ", ";\n  }\n"])), smallOnly, colorGrayLight);
const ListContainer = styled(FlexColumn)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["\n  justify-content: flex-start;\n"])));
const RoomItem = styled.div(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["\n  margin: 1rem 0 1rem 0;\n"])));
const ItemTitle = styled.h2(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["\n  margin: 0;\n  color: ", ";\n"])), colorBlueLight);
// @ts-ignore - Button is a JS component
const ItemButton = styled(Button)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["\n  padding: 0;\n  outline: none !important;\n\n  & > span {\n    color: ", ";\n  }\n"])), colorBlueLight);
const WithError = styled.span(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["\n  color: ", ";\n"])), colorDanger);
const SubTitle = styled.p(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["\n  font-size: ", ";\n  text-align: justify;\n  color: ", ";\n"])), fontSizeBase, colorGray);
const Content = styled(FlexColumn)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral([""])));
module.exportDefault({
  BoxContainer,
  Alert,
  FreeJoinLabel,
  BreakoutNameInput,
  BreakoutBox,
  SpanWarn,
  RoomName,
  BreakoutSettings,
  FormLabel,
  InputRooms,
  DurationLabel,
  LabelText,
  DurationArea,
  DurationInput,
  HoldButtonWrapper,
  AssignBtnsContainer,
  AssignBtns,
  CheckBoxesContainer,
  Separator,
  FreeJoinCheckbox,
  RoomUserItem,
  LockIcon,
  ListContainer,
  RoomItem,
  ItemTitle,
  ItemButton,
  WithError,
  SubTitle,
  Content,
  ContentContainer
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"breakout-room":{"components":{"messageForm.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/breakout-room/components/messageForm.tsx                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 0);
let React, useCallback, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let escapeHtml;
module.link("/imports/utils/string-utils", {
  escapeHtml(v) {
    escapeHtml = v;
  }
}, 3);
let BREAKOUT_ROOM_SEND_MESSAGE_TO_ALL;
module.link("../../mutations", {
  BREAKOUT_ROOM_SEND_MESSAGE_TO_ALL(v) {
    BREAKOUT_ROOM_SEND_MESSAGE_TO_ALL = v;
  }
}, 4);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 5);
const intlMessages = defineMessages({
  submitLabel: {
    id: 'app.chat.submitLabel',
    description: 'Chat submit button label'
  },
  inputLabel: {
    id: 'app.chat.inputLabel',
    description: 'Chat message input label'
  },
  inputPlaceholder: {
    id: 'app.chat.inputPlaceholder',
    description: 'Chat message input placeholder'
  },
  errorMaxMessageLength: {
    id: 'app.chat.errorMaxMessageLength'
  },
  errorMinMessageLength: {
    id: 'app.chat.errorMinMessageLength'
  },
  errorServerDisconnected: {
    id: 'app.chat.disconnected'
  },
  errorChatLocked: {
    id: 'app.chat.locked'
  },
  chatTitleMsgAllRooms: {
    id: 'app.createBreakoutRoom.chatTitleMsgAllRooms',
    description: 'chat title for send message to all rooms'
  }
});
const BreakoutMessageForm = () => {
  const intl = useIntl();
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  const minMessageLength = CHAT_CONFIG.min_message_length;
  const maxMessageLength = CHAT_CONFIG.max_message_length;
  const [message, setMessage] = React.useState('');
  const [error, setError] = React.useState('');
  const [hasErrors, setHasErrors] = React.useState(false);
  const textAreaRef = useRef();
  const chatTitle = useRef(intl.formatMessage(intlMessages.chatTitleMsgAllRooms));
  const [sendMessageToAllBreakouts] = useMutation(BREAKOUT_ROOM_SEND_MESSAGE_TO_ALL);
  useEffect(() => {
    const unSentMessage = sessionStorage.getItem('breakoutUnsentMessage');
    if (unSentMessage) {
      setMessage(unSentMessage);
    }
  }, []);
  const verifyForErrors = useCallback(message => {
    if (message.length < minMessageLength) {
      if (!hasErrors) setHasErrors(true);
      setError(intl.formatMessage(intlMessages.errorMaxMessageLength, {
        minMessageLength
      }));
    } else if (message.length > maxMessageLength && !hasErrors) {
      if (!hasErrors) setHasErrors(true);
      setError(intl.formatMessage(intlMessages.errorMaxMessageLength, {
        maxMessageLength
      }));
      return true;
    } else {
      setHasErrors(false);
      setError('');
      return false;
    }
    return false;
  }, []);
  const editMessage = useCallback(message => {
    var _textAreaRef$current;
    verifyForErrors(message);
    setMessage(message);
    sessionStorage.setItem('breakoutUnsentMessage', message);
    textAreaRef === null || textAreaRef === void 0 ? void 0 : (_textAreaRef$current = textAreaRef.current) === null || _textAreaRef$current === void 0 ? void 0 : _textAreaRef$current.focus();
  }, []);
  const sendMessage = useCallback(message => {
    sendMessageToAllBreakouts({
      variables: {
        message
      }
    });
  }, []);
  const handleSendMessage = useCallback(message => {
    if (!verifyForErrors(message)) {
      sendMessage(escapeHtml(message));
      setMessage('');
      setError('');
      setHasErrors(false);
      sessionStorage.removeItem('breakoutUnsentMessage');
    }
  }, []);
  const handleKeyDown = useCallback(e => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage(message);
    }
  }, [message]);
  const handleSubmit = useCallback(e => {
    e.preventDefault();
    handleSendMessage(message);
  }, [message]);
  const handleOnChange = useCallback(e => {
    editMessage(e.target.value);
  }, []);
  return /*#__PURE__*/React.createElement(Styled.Form, {
    onSubmit: handleSubmit
  }, /*#__PURE__*/React.createElement(Styled.Wrapper, null, /*#__PURE__*/React.createElement(Styled.Input, {
    id: "message-input",
    innerRef: ref => {
      textAreaRef.current = ref;
    },
    placeholder: intl.formatMessage(intlMessages.inputPlaceholder, {
      0: chatTitle.current
    }),
    "aria-label": intl.formatMessage(intlMessages.inputLabel, {
      0: chatTitle.current
    }),
    "aria-invalid": hasErrors ? 'true' : 'false',
    autoCorrect: "off",
    autoComplete: "off",
    spellCheck: "true",
    value: message,
    onChange: handleOnChange,
    onKeyDown: handleKeyDown,
    async: true,
    onPaste: e => {
      e.stopPropagation();
    },
    onCut: e => {
      e.stopPropagation();
    },
    onCopy: e => {
      e.stopPropagation();
    }
  }), /*#__PURE__*/React.createElement(Styled.SendButton, {
    hideLabel: true,
    circle: true,
    "aria-label": intl.formatMessage(intlMessages.submitLabel),
    type: "submit",
    disabled: hasErrors || !message,
    label: intl.formatMessage(intlMessages.submitLabel),
    color: "primary",
    icon: "send",
    onClick: () => {},
    "data-test": "sendMessageButton"
  })), hasErrors ? /*#__PURE__*/React.createElement(Styled.ErrorMessage, null, error) : null);
};
module.exportDefault(BreakoutMessageForm);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"timeRemaining.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/breakout-room/components/timeRemaining.tsx                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let BreakoutRemainingTime;
module.link("/imports/ui/components/common/remaining-time/breakout-duration/component", {
  default(v) {
    BreakoutRemainingTime = v;
  }
}, 3);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let BREAKOUT_ROOM_SET_TIME;
module.link("../../mutations", {
  BREAKOUT_ROOM_SET_TIME(v) {
    BREAKOUT_ROOM_SET_TIME = v;
  }
}, 5);
const intlMessages = defineMessages({
  breakoutTitle: {
    id: 'app.createBreakoutRoom.title',
    description: 'breakout title'
  },
  breakoutAriaTitle: {
    id: 'app.createBreakoutRoom.ariaTitle',
    description: 'breakout aria title'
  },
  breakoutDuration: {
    id: 'app.createBreakoutRoom.duration',
    description: 'breakout duration time'
  },
  breakoutRoom: {
    id: 'app.createBreakoutRoom.room',
    description: 'breakout room'
  },
  breakoutJoin: {
    id: 'app.createBreakoutRoom.join',
    description: 'label for join breakout room'
  },
  breakoutJoinAudio: {
    id: 'app.createBreakoutRoom.joinAudio',
    description: 'label for option to transfer audio'
  },
  breakoutReturnAudio: {
    id: 'app.createBreakoutRoom.returnAudio',
    description: 'label for option to return audio'
  },
  askToJoin: {
    id: 'app.createBreakoutRoom.askToJoin',
    description: 'label for generate breakout room url'
  },
  generatingURL: {
    id: 'app.createBreakoutRoom.generatingURL',
    description: 'label for generating breakout room url'
  },
  endAllBreakouts: {
    id: 'app.createBreakoutRoom.endAllBreakouts',
    description: 'Button label to end all breakout rooms'
  },
  chatTitleMsgAllRooms: {
    id: 'app.createBreakoutRoom.chatTitleMsgAllRooms',
    description: 'chat title for send message to all rooms'
  },
  alreadyConnected: {
    id: 'app.createBreakoutRoom.alreadyConnected',
    description: 'label for the user that is already connected to breakout room'
  },
  setTimeInMinutes: {
    id: 'app.createBreakoutRoom.setTimeInMinutes',
    description: 'Label for input to set time (minutes)'
  },
  setTimeLabel: {
    id: 'app.createBreakoutRoom.setTimeLabel',
    description: 'Button label to set breakout rooms time'
  },
  setTimeCancel: {
    id: 'app.createBreakoutRoom.setTimeCancel',
    description: 'Button label to cancel set breakout rooms time'
  },
  setTimeHigherThanMeetingTimeError: {
    id: 'app.createBreakoutRoom.setTimeHigherThanMeetingTimeError',
    description: 'Label for error when new breakout rooms time would be higher than remaining time in parent meeting'
  }
});
const TimeRemaingPanel = _ref => {
  let {
    showChangeTimeForm,
    isModerator,
    durationInSeconds,
    toggleShowChangeTimeForm
  } = _ref;
  const intl = useIntl();
  const durationContainerRef = React.useRef(null);
  const [showFormError, setShowFormError] = useState(false);
  const [newTime, setNewTime] = useState(0);
  const [breakoutRoomSetTime] = useMutation(BREAKOUT_ROOM_SET_TIME);
  const setBreakoutsTime = timeInMinutes => {
    if (timeInMinutes <= 0) return false;
    return breakoutRoomSetTime({
      variables: {
        timeInMinutes
      }
    });
  };
  return /*#__PURE__*/React.createElement(Styled.DurationContainer, {
    centeredText: !showChangeTimeForm,
    ref: durationContainerRef
  }, /*#__PURE__*/React.createElement(BreakoutRemainingTime, {
    boldText: true
  }), isModerator && showChangeTimeForm ? /*#__PURE__*/React.createElement(Styled.SetTimeContainer, null, /*#__PURE__*/React.createElement("label", {
    htmlFor: "inputSetTimeSelector"
  }, intl.formatMessage(intlMessages.setTimeInMinutes)), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(Styled.FlexRow, null, /*#__PURE__*/React.createElement(Styled.SetDurationInput, {
    id: "inputSetTimeSelector",
    type: "number",
    min: "1",
    value: newTime,
    onChange: e => {
      const newSetTime = Number.parseInt(e.target.value, 10) || 0;
      setNewTime(newSetTime);
    },
    "aria-label": intl.formatMessage(intlMessages.setTimeInMinutes)
  }), "\xA0 \xA0", /*#__PURE__*/React.createElement(Styled.EndButton, {
    "data-test": "sendButtonDurationTime",
    color: "primary",
    disabled: false,
    size: "sm",
    label: intl.formatMessage(intlMessages.setTimeLabel),
    onClick: () => {
      setShowFormError(false);
      if (durationInSeconds !== 0 && newTime > durationInSeconds) {
        setShowFormError(true);
      } else if (setBreakoutsTime(newTime)) {
        toggleShowChangeTimeForm(false);
      }
    }
  })), showFormError ? /*#__PURE__*/React.createElement(Styled.WithError, null, intl.formatMessage(intlMessages.setTimeHigherThanMeetingTimeError)) : null) : null);
};
module.exportDefault(TimeRemaingPanel);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/breakout-room/component.tsx                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 0);
let React, useCallback, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let getBreakoutData;
module.link("./queries", {
  getBreakoutData(v) {
    getBreakoutData = v;
  }
}, 3);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 4);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 5);
let Header;
module.link("/imports/ui/components/common/control-header/component", {
  default(v) {
    Header = v;
  }
}, 6);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 7);
let layoutDispatch, layoutSelect;
module.link("../../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 8);
let ACTIONS, PANELS;
module.link("../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 9);
let BreakoutDropdown;
module.link("../breakout-room-dropdown/component", {
  default(v) {
    BreakoutDropdown = v;
  }
}, 10);
let BREAKOUT_ROOM_END_ALL, BREAKOUT_ROOM_REQUEST_JOIN_URL, USER_TRANSFER_VOICE_TO_MEETING;
module.link("../mutations", {
  BREAKOUT_ROOM_END_ALL(v) {
    BREAKOUT_ROOM_END_ALL = v;
  },
  BREAKOUT_ROOM_REQUEST_JOIN_URL(v) {
    BREAKOUT_ROOM_REQUEST_JOIN_URL = v;
  },
  USER_TRANSFER_VOICE_TO_MEETING(v) {
    USER_TRANSFER_VOICE_TO_MEETING = v;
  }
}, 11);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 12);
let TimeRemaingPanel;
module.link("./components/timeRemaining", {
  default(v) {
    TimeRemaingPanel = v;
  }
}, 13);
let BreakoutMessageForm;
module.link("./components/messageForm", {
  default(v) {
    BreakoutMessageForm = v;
  }
}, 14);
let finishScreenShare, forceExitAudio, stopVideo;
module.link("./service", {
  finishScreenShare(v) {
    finishScreenShare = v;
  },
  forceExitAudio(v) {
    forceExitAudio = v;
  },
  stopVideo(v) {
    stopVideo = v;
  }
}, 15);
let useExitVideo, useStreams;
module.link("/imports/ui/components/video-provider/hooks", {
  useExitVideo(v) {
    useExitVideo = v;
  },
  useStreams(v) {
    useStreams = v;
  }
}, 16);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 17);
const intlMessages = defineMessages({
  breakoutTitle: {
    id: 'app.createBreakoutRoom.title',
    description: 'breakout title'
  },
  breakoutAriaTitle: {
    id: 'app.createBreakoutRoom.ariaTitle',
    description: 'breakout aria title'
  },
  breakoutDuration: {
    id: 'app.createBreakoutRoom.duration',
    description: 'breakout duration time'
  },
  breakoutRoom: {
    id: 'app.createBreakoutRoom.room',
    description: 'breakout room'
  },
  breakoutJoin: {
    id: 'app.createBreakoutRoom.join',
    description: 'label for join breakout room'
  },
  breakoutJoinAudio: {
    id: 'app.createBreakoutRoom.joinAudio',
    description: 'label for option to transfer audio'
  },
  breakoutReturnAudio: {
    id: 'app.createBreakoutRoom.returnAudio',
    description: 'label for option to return audio'
  },
  askToJoin: {
    id: 'app.createBreakoutRoom.askToJoin',
    description: 'label for generate breakout room url'
  },
  generatingURL: {
    id: 'app.createBreakoutRoom.generatingURL',
    description: 'label for generating breakout room url'
  },
  endAllBreakouts: {
    id: 'app.createBreakoutRoom.endAllBreakouts',
    description: 'Button label to end all breakout rooms'
  },
  chatTitleMsgAllRooms: {
    id: 'app.createBreakoutRoom.chatTitleMsgAllRooms',
    description: 'chat title for send message to all rooms'
  },
  alreadyConnected: {
    id: 'app.createBreakoutRoom.alreadyConnected',
    description: 'label for the user that is already connected to breakout room'
  },
  setTimeInMinutes: {
    id: 'app.createBreakoutRoom.setTimeInMinutes',
    description: 'Label for input to set time (minutes)'
  },
  setTimeLabel: {
    id: 'app.createBreakoutRoom.setTimeLabel',
    description: 'Button label to set breakout rooms time'
  },
  setTimeCancel: {
    id: 'app.createBreakoutRoom.setTimeCancel',
    description: 'Button label to cancel set breakout rooms time'
  },
  setTimeHigherThanMeetingTimeError: {
    id: 'app.createBreakoutRoom.setTimeHigherThanMeetingTimeError',
    description: 'Label for error when new breakout rooms time would be higher than remaining time in parent meeting'
  }
});
const BreakoutRoom = _ref => {
  let {
    breakouts,
    isModerator,
    durationInSeconds,
    presenter,
    userJoinedAudio,
    userId,
    meetingId
  } = _ref;
  const [breakoutRoomEndAll] = useMutation(BREAKOUT_ROOM_END_ALL);
  const [breakoutRoomTransfer] = useMutation(USER_TRANSFER_VOICE_TO_MEETING);
  const [breakoutRoomRequestJoinURL] = useMutation(BREAKOUT_ROOM_REQUEST_JOIN_URL);
  const layoutContextDispatch = layoutDispatch();
  const isRTL = layoutSelect(i => i.isRTL);
  const intl = useIntl();
  const panelRef = React.useRef(null);
  const [showChangeTimeForm, setShowChangeTimeForm] = React.useState(false);
  const [requestedBreakoutRoomId, setRequestedBreakoutRoomId] = React.useState('');
  const transferUserToMeeting = (fromMeeting, toMeeting) => {
    breakoutRoomTransfer({
      variables: {
        fromMeetingId: fromMeeting,
        toMeetingId: toMeeting
      }
    });
  };
  const requestJoinURL = breakoutRoomId => {
    breakoutRoomRequestJoinURL({
      variables: {
        breakoutRoomId
      }
    });
  };
  const closePanel = useCallback(() => {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.NONE
    });
  }, []);
  useEffect(() => {
    if (requestedBreakoutRoomId) {
      const breakout = breakouts.find(b => b.breakoutRoomId === requestedBreakoutRoomId);
      if (breakout && breakout.joinURL) {
        window.open(breakout.joinURL, '_blank');
        setRequestedBreakoutRoomId('');
      }
    }
  }, [breakouts]);
  const exitVideo = useExitVideo();
  const {
    streams
  } = useStreams();
  return /*#__PURE__*/React.createElement(Styled.Panel, {
    ref: panelRef,
    onCopy: e => {
      e.preventDefault();
    }
  }, /*#__PURE__*/React.createElement(Header, {
    leftButtonProps: {
      'aria-label': intl.formatMessage(intlMessages.breakoutAriaTitle),
      label: intl.formatMessage(intlMessages.breakoutTitle),
      onClick: closePanel
    },
    "data-test": "breakoutRoomManagerHeader",
    rightButtonProps: {},
    customRightButton: isModerator && /*#__PURE__*/React.createElement(BreakoutDropdown, {
      openBreakoutTimeManager: () => setShowChangeTimeForm(true),
      endAllBreakouts: () => {
        closePanel();
        breakoutRoomEndAll();
      },
      isMeteorConnected: true,
      amIModerator: isModerator,
      isRTL: isRTL
    })
  }), /*#__PURE__*/React.createElement(TimeRemaingPanel, {
    showChangeTimeForm: showChangeTimeForm,
    isModerator: isModerator,
    durationInSeconds: durationInSeconds,
    toggleShowChangeTimeForm: setShowChangeTimeForm
  }), isModerator ? /*#__PURE__*/React.createElement(BreakoutMessageForm, null) : null, isModerator ? /*#__PURE__*/React.createElement(Styled.Separator, null) : null, /*#__PURE__*/React.createElement(Styled.BreakoutsList, null, breakouts.map(breakout => {
    var _breakout$participant, _breakout$participant2;
    const breakoutLabel = breakout.joinURL ? intl.formatMessage(intlMessages.breakoutJoin) : intl.formatMessage(intlMessages.askToJoin);
    const dataTest = "".concat(breakout.joinURL ? 'join' : 'askToJoin').concat(breakout.shortName.replace(' ', ''));
    const userJoinedDialin = (_breakout$participant = (_breakout$participant2 = breakout.participants.find(p => p.userId === userId)) === null || _breakout$participant2 === void 0 ? void 0 : _breakout$participant2.isAudioOnly) !== null && _breakout$participant !== void 0 ? _breakout$participant : false;
    return /*#__PURE__*/React.createElement(Styled.BreakoutItems, {
      key: "breakoutRoomItems-".concat(breakout.breakoutRoomId)
    }, /*#__PURE__*/React.createElement(Styled.Content, {
      key: "breakoutRoomList-".concat(breakout.breakoutRoomId)
    }, /*#__PURE__*/React.createElement(Styled.BreakoutRoomListNameLabel, {
      "data-test": breakout.shortName,
      "aria-hidden": true
    }, breakout.isDefaultName ? intl.formatMessage(intlMessages.breakoutRoom, {
      0: breakout.sequence
    }) : breakout.shortName, /*#__PURE__*/React.createElement(Styled.UsersAssignedNumberLabel, null, "(", breakout.participants.length, ")")), requestedBreakoutRoomId === breakout.breakoutRoomId ? /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.generatingURL), /*#__PURE__*/React.createElement(Styled.ConnectingAnimation, {
      animations: true
    })) : /*#__PURE__*/React.createElement(Styled.BreakoutActions, null, breakout.isUserCurrentlyInRoom ? /*#__PURE__*/React.createElement(Styled.AlreadyConnected, {
      "data-test": "alreadyConnected"
    }, intl.formatMessage(intlMessages.alreadyConnected)) : /*#__PURE__*/React.createElement(Styled.JoinButton, {
      label: breakoutLabel,
      "data-test": dataTest,
      "aria-label": "".concat(breakoutLabel, " ").concat(breakout.shortName),
      onClick: () => {
        if (!breakout.joinURL) {
          setRequestedBreakoutRoomId(breakout.breakoutRoomId);
          requestJoinURL(breakout.breakoutRoomId);
        } else {
          window.open(breakout.joinURL, '_blank');
          // leave main room's audio,
          // and stops video and screenshare when joining a breakout room
          forceExitAudio();
          stopVideo(exitVideo, streams);
          logger.info({
            logCode: 'breakoutroom_join',
            extraInfo: {
              logType: 'user_action'
            }
          }, 'joining breakout room closed audio in the main room');
          if (presenter) finishScreenShare();
        }
      },
      disabled: requestedBreakoutRoomId
    }), isModerator && (userJoinedAudio || userJoinedDialin) ? ['|', /*#__PURE__*/React.createElement(Styled.AudioButton, {
      label: userJoinedDialin ? intl.formatMessage(intlMessages.breakoutReturnAudio) : intl.formatMessage(intlMessages.breakoutJoinAudio),
      disabled: false,
      key: "join-audio-".concat(breakout.breakoutRoomId),
      onClick: userJoinedDialin ? () => transferUserToMeeting(breakout.breakoutRoomId, meetingId) : () => transferUserToMeeting(meetingId, breakout.breakoutRoomId)
    })] : null)), /*#__PURE__*/React.createElement(Styled.JoinedUserNames, {
      "data-test": "userNameBreakoutRoom-".concat(breakout.shortName)
    }, breakout.participants.filter(p => !p.isAudioOnly).sort((a, b) => a.user.nameSortable.localeCompare(b.user.nameSortable)).map(u => u.user.name).join(', ')));
  })));
};
const BreakoutRoomContainer = () => {
  var _currentUserData$isMo, _currentUserData$pres, _meetingData$duration, _currentUserData$voic, _currentUserData$voic2, _currentUserData$user, _meetingData$meetingI;
  const {
    data: meetingData
  } = useMeeting(m => ({
    durationInSeconds: m.durationInSeconds,
    meetingId: m.meetingId
  }));
  const {
    data: currentUserData,
    loading: currentUserLoading
  } = useCurrentUser(u => ({
    isModerator: u.isModerator,
    presenter: u.presenter,
    voice: u.voice,
    userId: u.userId
  }));
  const {
    data: breakoutData,
    loading: breakoutLoading,
    error: breakoutError
  } = useDeduplicatedSubscription(getBreakoutData);
  if (breakoutLoading || currentUserLoading) return null;
  if (breakoutError) {
    logger.error(breakoutError);
    return /*#__PURE__*/React.createElement("div", null, "Error:", JSON.stringify(breakoutError));
  }
  if (!currentUserData || !breakoutData || !meetingData) return null; // or loading spinner or error
  return /*#__PURE__*/React.createElement(BreakoutRoom, {
    breakouts: breakoutData.breakoutRoom || [],
    isModerator: (_currentUserData$isMo = currentUserData.isModerator) !== null && _currentUserData$isMo !== void 0 ? _currentUserData$isMo : false,
    presenter: (_currentUserData$pres = currentUserData.presenter) !== null && _currentUserData$pres !== void 0 ? _currentUserData$pres : false,
    durationInSeconds: (_meetingData$duration = meetingData.durationInSeconds) !== null && _meetingData$duration !== void 0 ? _meetingData$duration : 0,
    userJoinedAudio: (_currentUserData$voic = currentUserData === null || currentUserData === void 0 ? void 0 : (_currentUserData$voic2 = currentUserData.voice) === null || _currentUserData$voic2 === void 0 ? void 0 : _currentUserData$voic2.joined) !== null && _currentUserData$voic !== void 0 ? _currentUserData$voic : false,
    userId: (_currentUserData$user = currentUserData.userId) !== null && _currentUserData$user !== void 0 ? _currentUserData$user : '',
    meetingId: (_meetingData$meetingI = meetingData.meetingId) !== null && _meetingData$meetingI !== void 0 ? _meetingData$meetingI : ''
  });
};
module.exportDefault(BreakoutRoomContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/breakout-room/queries.ts                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  getBreakoutData: () => getBreakoutData,
  getIfUserJoinedBreakoutRoom: () => getIfUserJoinedBreakoutRoom
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const getBreakoutData = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription getBreakoutData {\n    breakoutRoom(order_by: {sequence: asc}){\n      freeJoin\n      shortName\n      sendInvitationToModerators\n      sequence\n      showInvitation\n      joinURL\n      breakoutRoomId\n      isDefaultName\n      hasJoined\n      isUserCurrentlyInRoom\n      participants {\n        userId\n        isAudioOnly\n        user {\n          name\n          nameSortable\n        }\n      }\n    }\n  }\n"])));
const getIfUserJoinedBreakoutRoom = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  subscription getIdUserJoinedABreakout {\n    breakoutRoom_aggregate(where: {hasJoined: {_eq: true}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n"])));
module.exportDefault({
  getBreakoutData,
  getIfUserJoinedBreakoutRoom
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/breakout-room/service.ts                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  getIsMicrophoneUser: () => getIsMicrophoneUser,
  getIsReconnecting: () => getIsReconnecting,
  forceExitAudio: () => forceExitAudio,
  stopVideo: () => stopVideo,
  finishScreenShare: () => finishScreenShare,
  rejoinAudio: () => rejoinAudio
});
let AudioService;
module.link("/imports/ui/components/audio/service", {
  default(v) {
    AudioService = v;
  }
}, 0);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 1);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 2);
let screenshareHasEnded;
module.link("/imports/ui/components/screenshare/service", {
  screenshareHasEnded(v) {
    screenshareHasEnded = v;
  }
}, 3);
let didUserSelectedListenOnly, didUserSelectedMicrophone;
module.link("../../audio/audio-modal/service", {
  didUserSelectedListenOnly(v) {
    didUserSelectedListenOnly = v;
  },
  didUserSelectedMicrophone(v) {
    didUserSelectedMicrophone = v;
  }
}, 4);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 5);
const getIsMicrophoneUser = () => {
  return (AudioService.isConnectedToBreakout() || AudioService.isConnected()) && !AudioService.isListenOnly();
};
const getIsReconnecting = () => {
  return AudioService.isReconnecting();
};
const forceExitAudio = () => {
  AudioManager.forceExitAudio();
};
const stopVideo = (exitVideo, streams) => {
  VideoService.storeDeviceIds(streams);
  exitVideo();
};
const finishScreenShare = () => {
  return screenshareHasEnded();
};
const logUserCouldNotRejoinAudio = () => {
  logger.warn({
    logCode: 'mainroom_audio_rejoin',
    extraInfo: {
      logType: 'user_action'
    }
  }, 'leaving breakout room couldn\'t rejoin audio in the main room');
};
const rejoinAudio = () => {
  if (didUserSelectedMicrophone()) {
    AudioManager.joinMicrophone().catch(() => {
      logUserCouldNotRejoinAudio();
    });
  } else if (didUserSelectedListenOnly()) {
    AudioManager.joinListenOnly().catch(() => {
      logUserCouldNotRejoinAudio();
    });
  }
};
module.exportDefault({
  getIsMicrophoneUser,
  getIsReconnecting,
  forceExitAudio,
  stopVideo,
  finishScreenShare,
  rejoinAudio
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/breakout-room/styles.ts                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let mdPaddingX, borderSize, borderSizeSmall, borderRadius, jumboPaddingY, smPaddingX, smPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  mdPaddingX(v) {
    mdPaddingX = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  borderSizeSmall(v) {
    borderSizeSmall = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  jumboPaddingY(v) {
    jumboPaddingY = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  }
}, 1);
let colorPrimary, colorGray, colorDanger, userListBg, colorWhite, colorGrayLighter, colorGrayLightest, colorBlueLight, listItemBgHover, colorText;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  userListBg(v) {
    userListBg = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  colorBlueLight(v) {
    colorBlueLight = v;
  },
  listItemBgHover(v) {
    listItemBgHover = v;
  },
  colorText(v) {
    colorText = v;
  }
}, 2);
let headingsFontWeight, fontSizeSmall, fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  headingsFontWeight(v) {
    headingsFontWeight = v;
  },
  fontSizeSmall(v) {
    fontSizeSmall = v;
  },
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 3);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
let TextareaAutosize;
module.link("react-autosize-textarea", {
  default(v) {
    TextareaAutosize = v;
  }
}, 6);
const BreakoutActions = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  font-weight: ", ";\n  color: ", ";\n\n  & > button {\n    padding: 0 0 0 .5rem;\n  }\n"])), headingsFontWeight, colorPrimary);
const AlreadyConnected = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding: 0 .5rem 0 0;\n  display: inline-block;\n  vertical-align: middle;\n  white-space: nowrap;\n"])));
// @ts-ignore - as button comes from JS, we can't provide its props
const JoinButton = styled(Button)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  flex: 0 1 48%;\n  color: ", ";\n  margin: 0;\n  font-weight: inherit;\n  padding: 0 .5rem 0 .5rem !important;\n"])), colorPrimary);
// @ts-ignore - as button comes from JS, we can't provide its props
const AudioButton = styled(Button)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  flex: 0 1 48%;\n  color: ", ";\n  margin: 0;\n  font-weight: inherit;\n"])), colorPrimary);
const BreakoutItems = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  margin-bottom: 1rem;\n"])));
const Content = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  font-size: ", ";\n  font-weight: bold;\n  padding: ", " ", " ", " 0;\n\n  [dir=\"rtl\"] & {\n    padding: ", " 0 ", " ", ";\n  }\n"])), fontSizeSmall, borderSize, borderSize, borderSize, borderSize, borderSize, borderSize);
const BreakoutRoomListNameLabel = styled.span(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  overflow: hidden;\n  text-overflow: ellipsis;\n"])));
const UsersAssignedNumberLabel = styled.span(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  margin: 0 0 0 .25rem;\n\n  [dir=\"rtl\"] & {\n    margin: 0 .25em 0 0;\n  }\n"])));
const ellipsis = keyframes(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  to {\n    width: 1.5em;\n  }\n"])));
const ConnectingAnimation = styled.span(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  &:after {\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    content: \"\\2026\"; /* ascii code for the ellipsis character */\n    width: 0;\n    margin: 0 1.25em 0 0;\n\n    [dir=\"rtl\"] & {\n      margin: 0 0 0 1.25em;\n    }\n\n    ", "\n  }\n"], ["\n  &:after {\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    content: \"\\\\2026\"; /* ascii code for the ellipsis character */\n    width: 0;\n    margin: 0 1.25em 0 0;\n\n    [dir=\"rtl\"] & {\n      margin: 0 0 0 1.25em;\n    }\n\n    ", "\n  }\n"])), _ref => {
  let {
    animations
  } = _ref;
  return animations && css(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n      animation: ", " steps(4, end) 900ms infinite;\n    "])), ellipsis);
});
const BreakoutsList = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  overflow: auto;\n"])));
const JoinedUserNames = styled.div(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  overflow-wrap: break-word;\n  white-space: pre-line;\n  margin-left: 1rem;\n  font-size: ", ";\n"])), fontSizeSmall);
const BreakoutColumn = styled.div(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  min-height: 0;\n  flex-grow: 1;\n"])));
const BreakoutScrollableList = styled(ScrollboxVertical)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  background: linear-gradient(", " 30%, rgba(255,255,255,0)),\n    linear-gradient(rgba(255,255,255,0), ", " 70%) 0 100%,\n    radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.2), rgba(0,0,0,0)),\n    radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;\n\n  outline: transparent;\n  outline-style: dotted;\n  outline-width: ", ";\n\n  &:focus {\n    outline: none;\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n  }\n\n  &:focus-within,\n  &:focus {\n    outline-style: solid;\n  }\n\n  &:active {\n    box-shadow: none;\n    border-radius: none;\n  }\n\n  overflow-x: hidden;\n  outline-width: 1px !important;\n  outline-color: transparent !important;\n  background: none;\n"])), userListBg, userListBg, borderSize, borderSize, borderSize, listItemBgHover, colorPrimary);
const DurationContainer = styled.div(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  ", "\n\n  border-radius: ", ";\n  margin-bottom: ", ";\n  padding: 10px;\n  box-shadow: 0 0 1px 1px ", ";\n"])), _ref2 => {
  let {
    centeredText
  } = _ref2;
  return centeredText && "\n    text-align: center;\n  ";
}, borderRadius, jumboPaddingY, colorGrayLightest);
const SetTimeContainer = styled.div(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n  margin: .5rem 0 0 0;\n"])));
const SetDurationInput = styled.input(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n  flex: 1;\n  border: 1px solid ", ";\n  width: 50%;\n  text-align: center;\n  padding: .25rem;\n  border-radius: ", ";\n  background-clip: padding-box;\n  outline: none;\n\n  &::placeholder {\n    color: ", ";\n    opacity: 1;\n  }\n\n  &:focus {\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n  }\n\n  &:disabled,\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: .75;\n    background-color: rgba(167,179,189,0.25);\n  }\n"])), colorGrayLighter, borderRadius, colorGray, borderSize, borderSize, colorBlueLight, colorPrimary);
const WithError = styled.span(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n  color: ", ";\n"])), colorDanger);
// @ts-ignore - as button comes from JS, we can't provide its props
const EndButton = styled(Button)(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["\n  padding: .5rem;\n  font-weight: ", " !important;\n  border-radius: .2rem;\n  font-size: ", ";\n"])), headingsFontWeight, fontSizeSmall);
const Duration = styled.span(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\n  display: inline-block;\n  align-self: center;\n"])));
const Panel = styled(ScrollboxVertical)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\n  background: linear-gradient(", " 30%, rgba(255,255,255,0)),\n    linear-gradient(rgba(255,255,255,0), ", " 70%) 0 100%,\n    radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.2), rgba(0,0,0,0)),\n    radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;\n\n  background-color: #fff;\n  padding: ", ";\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  overflow: hidden;\n  height: 100%;\n"])), colorWhite, colorWhite, mdPaddingX);
const Separator = styled.div(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\n  position: relative;\n  width: 100%;\n  height: 10px;\n  height: ", ";\n  background-color: ", ";\n  margin: 30px 0px;\n"])), borderSizeSmall, colorGrayLighter);
const FlexRow = styled.div(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-wrap: nowrap;\n"])));
const Form = styled.form(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["\n  flex-grow: 0;\n  flex-shrink: 0;\n  align-self: flex-end;\n  width: 100%;\n  position: relative;\n  margin-bottom: calc(-1 * ", ");\n  margin-top: .2rem;\n"])), smPaddingX);
const Wrapper = styled.div(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n"])));
const Input = styled(TextareaAutosize)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["\n  flex: 1;\n  background: #fff;\n  background-clip: padding-box;\n  margin: 0;\n  color: ", ";\n  -webkit-appearance: none;\n  padding: calc(", " * 2.5) calc(", " * 1.25);\n  resize: none;\n  transition: none;\n  border-radius: ", ";\n  font-size: ", ";\n  line-height: 1;\n  min-height: 2.5rem;\n  max-height: 10rem;\n  border: 1px solid ", ";\n\n  &:disabled,\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: .75;\n    background-color: rgba(167,179,189,0.25);\n  }\n\n  &:focus {\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n  }\n\n  &:hover,\n  &:active,\n  &:focus {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n"])), colorText, smPaddingY, smPaddingX, borderRadius, fontSizeBase, colorGrayLighter, borderSize, borderSize, colorBlueLight, colorPrimary, borderSize);
// @ts-ignore - as button comes from JS, we can't provide its props
const SendButton = styled(Button)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["\n  margin:0 0 0 ", ";\n  align-self: center;\n  font-size: 0.9rem;\n\n  [dir=\"rtl\"]  & {\n    margin: 0 ", " 0 0;\n    -webkit-transform: scale(-1, 1);\n    -moz-transform: scale(-1, 1);\n    -ms-transform: scale(-1, 1);\n    -o-transform: scale(-1, 1);\n    transform: scale(-1, 1);\n  }\n"])), smPaddingX, smPaddingX);
const ErrorMessage = styled.div(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: calc(", " * .75);\n  text-align: left;\n  padding: ", " 0;\n  position: relative;\n  height: .93rem;\n  max-height: .93rem;\n"])), colorDanger, fontSizeBase, borderSize);
module.exportDefault({
  BreakoutActions,
  AlreadyConnected,
  JoinButton,
  AudioButton,
  BreakoutItems,
  Content,
  BreakoutRoomListNameLabel,
  UsersAssignedNumberLabel,
  ConnectingAnimation,
  JoinedUserNames,
  BreakoutColumn,
  BreakoutScrollableList,
  DurationContainer,
  SetTimeContainer,
  SetDurationInput,
  WithError,
  EndButton,
  Duration,
  Panel,
  Separator,
  FlexRow,
  Form,
  Wrapper,
  Input,
  SendButton,
  ErrorMessage,
  BreakoutsList
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"breakout-room-dropdown":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/breakout-room-dropdown/component.tsx                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 2);
let CreateBreakoutRoomContainerGraphql;
module.link("../create-breakout-room/component", {
  default(v) {
    CreateBreakoutRoomContainerGraphql = v;
  }
}, 3);
let Trigger;
module.link("/imports/ui/components/common/control-header/right/component", {
  default(v) {
    Trigger = v;
  }
}, 4);
const intlMessages = defineMessages({
  options: {
    id: 'app.breakout.dropdown.options',
    description: 'Breakout options label'
  },
  manageDuration: {
    id: 'app.breakout.dropdown.manageDuration',
    description: 'Manage duration label'
  },
  manageUsers: {
    id: 'app.breakout.dropdown.manageUsers',
    description: 'Manage users label'
  },
  destroy: {
    id: 'app.breakout.dropdown.destroyAll',
    description: 'Destroy breakouts label'
  }
});
const BreakoutDropdown = _ref => {
  let {
    openBreakoutTimeManager,
    endAllBreakouts,
    isMeteorConnected,
    amIModerator,
    isRTL
  } = _ref;
  const intl = useIntl();
  const [isCreateBreakoutRoomModalOpen, setIsCreateBreakoutRoomModalOpen] = useState(false);
  const getAvailableActions = () => {
    const menuItems = [];
    menuItems.push({
      key: 'breakoutTimeManager',
      dataTest: 'openBreakoutTimeManager',
      label: intl.formatMessage(intlMessages.manageDuration),
      onClick: () => {
        openBreakoutTimeManager();
      }
    });
    menuItems.push({
      key: 'updateBreakoutUsers',
      dataTest: 'openUpdateBreakoutUsersModal',
      label: intl.formatMessage(intlMessages.manageUsers),
      onClick: () => {
        setIsCreateBreakoutRoomModalOpen(true);
      }
    });
    if (amIModerator) {
      menuItems.push({
        key: 'endAllBreakouts',
        dataTest: 'endAllBreakouts',
        label: intl.formatMessage(intlMessages.destroy),
        disabled: !isMeteorConnected,
        onClick: () => {
          endAllBreakouts();
        }
      });
    }
    return menuItems;
  };
  const setCreateBreakoutRoomModalIsOpen = value => {
    setIsCreateBreakoutRoomModalOpen(value);
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BBBMenu, {
    trigger: /*#__PURE__*/React.createElement(Trigger, {
      "data-test": "breakoutOptionsMenu",
      icon: "more",
      label: intl.formatMessage(intlMessages.options),
      "aria-label": intl.formatMessage(intlMessages.options),
      onClick: () => null
    }),
    opts: {
      id: 'breakoutroom-dropdown-menu',
      keepMounted: true,
      transitionDuration: 0,
      elevation: 3,
      getcontentanchorel: null,
      fullwidth: 'true',
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: isRTL ? 'right' : 'left'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: isRTL ? 'right' : 'left'
      }
    },
    actions: getAvailableActions()
  }), isCreateBreakoutRoomModalOpen ? /*#__PURE__*/React.createElement(CreateBreakoutRoomContainerGraphql, {
    isUpdate: true,
    priority: "low",
    setIsOpen: setCreateBreakoutRoomModalIsOpen,
    isOpen: isCreateBreakoutRoomModalOpen
  }) : null);
};
module.exportDefault(BreakoutDropdown);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-room/mutations.ts                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  BREAKOUT_ROOM_CREATE: () => BREAKOUT_ROOM_CREATE,
  BREAKOUT_ROOM_END_ALL: () => BREAKOUT_ROOM_END_ALL,
  BREAKOUT_ROOM_MOVE_USER: () => BREAKOUT_ROOM_MOVE_USER,
  BREAKOUT_ROOM_SEND_MESSAGE_TO_ALL: () => BREAKOUT_ROOM_SEND_MESSAGE_TO_ALL,
  BREAKOUT_ROOM_SET_TIME: () => BREAKOUT_ROOM_SET_TIME,
  USER_TRANSFER_VOICE_TO_MEETING: () => USER_TRANSFER_VOICE_TO_MEETING,
  BREAKOUT_ROOM_REQUEST_JOIN_URL: () => BREAKOUT_ROOM_REQUEST_JOIN_URL
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const BREAKOUT_ROOM_CREATE = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation BreakoutRoomCreate(\n    $record: Boolean!,\n    $captureNotes: Boolean!,\n    $captureSlides: Boolean!,\n    $durationInMinutes: Int!,\n    $sendInviteToModerators: Boolean!,\n    $rooms: [BreakoutRoom]!,\n  ) {\n    breakoutRoomCreate(\n      record: $record,\n      captureNotes: $captureNotes,\n      captureSlides: $captureSlides,\n      durationInMinutes: $durationInMinutes,\n      sendInviteToModerators: $sendInviteToModerators,\n      rooms: $rooms,\n    )\n  }\n"])));
const BREAKOUT_ROOM_END_ALL = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation {\n    breakoutRoomEndAll\n  }\n"])));
const BREAKOUT_ROOM_MOVE_USER = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  mutation BreakoutRoomMoveUser(\n    $userId: String!,\n    $fromBreakoutRoomId: String!,\n    $toBreakoutRoomId: String!,\n  ) {\n    breakoutRoomMoveUser(\n      userId: $userId,\n      fromBreakoutRoomId: $fromBreakoutRoomId,\n      toBreakoutRoomId: $toBreakoutRoomId,\n    )\n  }\n"])));
const BREAKOUT_ROOM_SEND_MESSAGE_TO_ALL = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  mutation BreakoutRoomSendMessageToAll($message: String!) {\n    breakoutRoomSendMessageToAll(\n      message: $message,\n    )\n  }\n"])));
const BREAKOUT_ROOM_SET_TIME = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  mutation BreakoutRoomSetTime($timeInMinutes: Int!) {\n    breakoutRoomSetTime(\n      timeInMinutes: $timeInMinutes,\n    )\n  }\n"])));
const USER_TRANSFER_VOICE_TO_MEETING = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  mutation UserTransferVoiceToMeeting($fromMeetingId: String!, $toMeetingId: String!) {\n    userTransferVoiceToMeeting(\n      fromMeetingId: $fromMeetingId,\n      toMeetingId: $toMeetingId,\n    )\n  }\n"])));
const BREAKOUT_ROOM_REQUEST_JOIN_URL = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  mutation BreakoutRoomRequestJoinUrl($breakoutRoomId: String!) {\n    breakoutRoomRequestJoinUrl(\n      breakoutRoomId: $breakoutRoomId,\n    )\n  }\n"])));
module.exportDefault({
  BREAKOUT_ROOM_CREATE,
  BREAKOUT_ROOM_END_ALL,
  BREAKOUT_ROOM_MOVE_USER,
  BREAKOUT_ROOM_SEND_MESSAGE_TO_ALL,
  BREAKOUT_ROOM_SET_TIME,
  USER_TRANSFER_VOICE_TO_MEETING,
  BREAKOUT_ROOM_REQUEST_JOIN_URL
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"external-video-player":{"external-video-player-graphql":{"toolbar":{"progress-bar":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/toolbar/progress-bar/component.tsx        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const ExternalVideoPlayerProgressBar = _ref => {
  let {
    loaded,
    played
  } = _ref;
  return /*#__PURE__*/React.createElement(Styled.ProgressBar, null, /*#__PURE__*/React.createElement(Styled.Loaded, {
    style: {
      width: "".concat(loaded * 100, "%")
    }
  }, /*#__PURE__*/React.createElement(Styled.Played, {
    style: {
      width: "".concat(played * 100 / loaded, "%")
    }
  })));
};
module.exportDefault(ExternalVideoPlayerProgressBar);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/toolbar/progress-bar/styles.ts            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const ProgressBar = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  bottom: 0;\n  height: 5px;\n  width: 100%;\n\n  background-color: transparent;   \n"])));
const Loaded = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: 100%;\n  background-color: gray;\n"])));
const Played = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  height: 100%;  \n  background-color: #DF2721;\n"])));
module.exportDefault({
  ProgressBar,
  Loaded,
  Played
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"reload-button":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/toolbar/reload-button/component.tsx       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const ReloadButton = _ref => {
  let {
    handleReload,
    label
  } = _ref;
  return /*#__PURE__*/React.createElement(Styled.Wrapper, null, /*#__PURE__*/React.createElement(Styled.ReloadButton, {
    color: "primary",
    icon: "refresh",
    onClick: handleReload,
    label: label,
    hideLabel: true
  }));
};
module.exportDefault(ReloadButton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/toolbar/reload-button/styles.ts           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorTransparent;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorTransparent(v) {
    colorTransparent = v;
  }
}, 1);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 2);
const Wrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: ", ";\n  cursor: pointer;\n  border: 0;\n  margin: 2px;\n"])), colorTransparent);
// @ts-ignore - Button is a JS file
const ReloadButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  &,\n  &:active,\n  &:hover,\n  &:focus {\n    border: none !important;\n\n    i {\n      border: none !important;\n      background-color: ", " !important;\n    }\n  }\n  padding: 5px;\n\n  &:hover {\n    border: 0;\n  }\n\n  i {\n    font-size: 1rem;\n  }\n"])), colorTransparent);
module.exportDefault({
  Wrapper,
  ReloadButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"subtitles":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/toolbar/subtitles/component.tsx           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const Subtitles = _ref => {
  let {
    label,
    toggleSubtitle
  } = _ref;
  return /*#__PURE__*/React.createElement(Styled.SubtitlesWrapper, null, /*#__PURE__*/React.createElement(Styled.SubtitlesButton, {
    color: "primary",
    icon: "closed_caption",
    onClick: () => toggleSubtitle(),
    label: label,
    hideLabel: true
  }));
};
module.exportDefault(Subtitles);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/toolbar/subtitles/styles.ts               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let colorTransparent;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorTransparent(v) {
    colorTransparent = v;
  }
}, 2);
const SubtitlesWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: ", ";\n  cursor: pointer;\n  border: 0;\n  z-index: 2;\n  margin: 2px;\n\n  [dir=\"rtl\"] & {\n    right: 0;\n    left : auto;\n  }\n"])), colorTransparent);
// @ts-ignore - Button is not typed
const SubtitlesButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  &,\n  &:active,\n  &:hover,\n  &:focus {\n    border: none !important;\n\n    i {\n      border: none !important;\n      background-color: ", " !important;\n    }\n  }\n\n  padding: 5px;\n\n  &:hover {\n    border: 0;\n  }\n\n  i {\n    font-size: 1rem;\n  }\n"])), colorTransparent);
module.exportDefault({
  SubtitlesWrapper,
  SubtitlesButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"volume-slide":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/toolbar/volume-slide/component.tsx        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const VolumeSlide = _ref => {
  let {
    onVolumeChanged,
    onMuted,
    volume,
    muted,
    hideVolume
  } = _ref;
  const [volumeState, setVolume] = React.useState(volume);
  const [mutedState, setMuted] = React.useState(muted);
  const volumeBeforeMute = React.useRef(0);
  const getVolumeIcon = useCallback(() => {
    if (mutedState || volumeState <= 0) return 'volume_off';
    if (volumeState <= 0.25) return 'volume_mute';
    if (volumeState <= 0.75) return 'volume_down';
    return 'volume_up';
  }, [mutedState, volumeState]);
  const handleOnChange = useCallback(volume => {
    onVolumeChanged(volume);
    setVolume(volume);
  }, []);
  useEffect(() => {
    if (mutedState && volumeState > 0) {
      // unmute if volume was raised during mute
      setMuted(false);
      onMuted(false);
    } else if (volumeState <= 0) {
      // mute if volume is turned to 0
      setMuted(true);
      onMuted(true);
    }
  }, [volumeState, mutedState, onMuted]);
  useEffect(() => {
    if (volumeState !== volume) {
      handleOnChange(volume);
    }
    if (mutedState !== muted) {
      setMuted(muted);
    }
  }, [volume, muted]);
  if (hideVolume) return null;
  return /*#__PURE__*/React.createElement(Styled.Slider, null, /*#__PURE__*/React.createElement(Styled.Volume, {
    onClick: () => {
      if (!muted) {
        volumeBeforeMute.current = volumeState;
      }
      onVolumeChanged(muted ? volumeBeforeMute.current : 0);
      setVolume(!muted ? 0 : volumeBeforeMute.current);
      setMuted(!muted);
      onMuted(!muted);
    }
  }, /*#__PURE__*/React.createElement("i", {
    tabIndex: -1,
    className: "icon-bbb-".concat(getVolumeIcon())
  })), /*#__PURE__*/React.createElement(Styled.VolumeSlider, {
    type: "range",
    min: 0,
    max: 1,
    step: 0.02,
    value: mutedState ? 0 : volumeState,
    onChange: e => handleOnChange(e.target.valueAsNumber)
  }));
};
module.exportDefault(VolumeSlide);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/toolbar/volume-slide/styles.ts            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const Slider = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  width: 0.9em;\n  display: flex;\n  position: relative;\n  bottom: 3em;\n  left: 1em;\n  padding: 0.25rem 0.5rem;\n  min-width: 200px;\n  background-color: rgba(0,0,0,0.5);\n  border-radius: 32px;\n\n  i {\n    color: white;\n    transition: 0.5s;\n    font-size: 200%;\n    cursor: pointer;\n  }\n  z-index: 0;\n"])));
const Volume = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin-right: 0.5em;\n  cursor: pointer;\n  z-index: 0;\n"])));
const VolumeSlider = styled.input(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: 100%;\n  cursor: pointer;\n"])));
module.exportDefault({
  Slider,
  Volume,
  VolumeSlider
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/toolbar/component.tsx                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let VolumeSlide;
module.link("./volume-slide/component", {
  default(v) {
    VolumeSlide = v;
  }
}, 3);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 4);
let ReloadButton;
module.link("./reload-button/component", {
  default(v) {
    ReloadButton = v;
  }
}, 5);
let Subtitles;
module.link("./subtitles/component", {
  default(v) {
    Subtitles = v;
  }
}, 6);
let FullscreenButtonContainer;
module.link("/imports/ui/components/common/fullscreen-button/container", {
  default(v) {
    FullscreenButtonContainer = v;
  }
}, 7);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 8);
let layoutSelect;
module.link("../../../layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 9);
let ExternalVideoPlayerProgressBar;
module.link("./progress-bar/component", {
  default(v) {
    ExternalVideoPlayerProgressBar = v;
  }
}, 10);
const intlMessages = defineMessages({
  refreshLabel: {
    id: 'app.externalVideo.refreshLabel'
  },
  fullscreenLabel: {
    id: 'app.externalVideo.fullscreenLabel'
  },
  subtitlesOn: {
    id: 'app.externalVideo.subtitlesOn'
  },
  subtitlesOff: {
    id: 'app.externalVideo.subtitlesOff'
  }
});
const ExternalVideoPlayerToolbar = _ref => {
  let {
    hideVolume,
    volume,
    muted,
    mutedByEchoTest,
    handleOnMuted,
    handleVolumeChanged,
    playing,
    setShowHoverToolBar,
    toolbarStyle,
    handleReload,
    playerName,
    toggleSubtitle,
    subtitlesOn,
    playerParent,
    played,
    loaded
  } = _ref;
  const intl = useIntl();
  const mobileTimout = React.useRef();
  const fullscreen = layoutSelect(i => i.fullscreen);
  const {
    element
  } = fullscreen;
  const fullscreenContext = element === 'ExternalVideo';
  return /*#__PURE__*/React.createElement(React.Fragment, null, [/*#__PURE__*/React.createElement(Styled.HoverToolbar, {
    toolbarStyle: toolbarStyle,
    key: "hover-toolbar-external-video"
  }, /*#__PURE__*/React.createElement(VolumeSlide, {
    hideVolume: hideVolume,
    volume: volume,
    muted: muted || mutedByEchoTest,
    onMuted: handleOnMuted,
    onVolumeChanged: handleVolumeChanged
  }), /*#__PURE__*/React.createElement(Styled.ButtonsWrapper, null, /*#__PURE__*/React.createElement(ReloadButton, {
    handleReload: handleReload,
    label: intl.formatMessage(intlMessages.refreshLabel)
  }), playerName === 'YouTube' && /*#__PURE__*/React.createElement(Subtitles, {
    toggleSubtitle: toggleSubtitle,
    label: subtitlesOn ? intl.formatMessage(intlMessages.subtitlesOn) : intl.formatMessage(intlMessages.subtitlesOff)
  })), /*#__PURE__*/React.createElement(FullscreenButtonContainer, {
    key: uniqueId('fullscreenButton-'),
    elementName: intl.formatMessage(intlMessages.fullscreenLabel),
    fullscreenRef: playerParent,
    elementId: "ExternalVideo",
    isFullscreen: fullscreenContext,
    dark: true
  }), /*#__PURE__*/React.createElement(ExternalVideoPlayerProgressBar, {
    played: played,
    loaded: loaded
  })), deviceInfo.isMobile && playing && /*#__PURE__*/React.createElement(Styled.MobileControlsOverlay, {
    key: "mobile-overlay-external-video",
    onTouchStart: () => {
      clearTimeout(mobileTimout.current);
      setShowHoverToolBar(true);
    },
    onTouchEnd: () => {
      mobileTimout.current = setTimeout(() => setShowHoverToolBar(false), 5000);
    }
  })]);
};
module.exportDefault(ExternalVideoPlayerToolbar);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/toolbar/styles.ts                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let Styled;
module.link("styled-components", {
  default(v) {
    Styled = v;
  }
}, 0);
const HoverToolbar = Styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n\n  ", "\n"])), _ref => {
  let {
    toolbarStyle
  } = _ref;
  return toolbarStyle === 'hoverToolbar' && "\n    display: flex;\n    z-index: 3;\n    :hover > & {\n      display: flex;\n    }\n  ";
}, _ref2 => {
  let {
    toolbarStyle
  } = _ref2;
  return toolbarStyle === 'dontShowMobileHoverToolbar' && "\n    display: none;\n  ";
}, _ref3 => {
  let {
    toolbarStyle
  } = _ref3;
  return toolbarStyle === 'showMobileHoverToolbar' && "\n    display: flex;\n    z-index: 2;\n  ";
});
const ButtonsWrapper = Styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute;\n  right: auto;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  display: flex;\n\n  [dir=\"rtl\"] & {\n    right: 0;\n    left : auto;\n  }\n"])));
const MobileControlsOverlay = Styled.span(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: absolute;\n  top:0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n"])));
module.exportDefault({
  HoverToolbar,
  MobileControlsOverlay,
  ButtonsWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modal":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/modal/component.tsx                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 4);
let isUrlValid;
module.link("./service", {
  isUrlValid(v) {
    isUrlValid = v;
  }
}, 5);
let EXTERNAL_VIDEO_START;
module.link("../../mutations", {
  EXTERNAL_VIDEO_START(v) {
    EXTERNAL_VIDEO_START = v;
  }
}, 6);
const intlMessages = defineMessages({
  start: {
    id: 'app.externalVideo.start',
    description: 'Share external video'
  },
  urlError: {
    id: 'app.externalVideo.urlError',
    description: 'Not a video URL error'
  },
  input: {
    id: 'app.externalVideo.input',
    description: 'Video URL'
  },
  urlInput: {
    id: 'app.externalVideo.urlInput',
    description: 'URL input field placeholder'
  },
  title: {
    id: 'app.externalVideo.title',
    description: 'Modal title'
  },
  close: {
    id: 'app.externalVideo.close',
    description: 'Close'
  },
  note: {
    id: 'app.externalVideo.noteLabel',
    description: 'provides hint about Shared External videos'
  }
});
const YOUTUBE_SHORTS_REGEX = new RegExp(/^(?:https?:\/\/)?(?:www\.)?(youtube\.com\/shorts)\/.+$/);
const PANOPTO_MATCH_URL = /https?:\/\/([^/]+\/Panopto)(\/Pages\/Viewer\.aspx\?id=)([-a-zA-Z0-9]+)/;
const ExternalVideoPlayerModal = _ref => {
  let {
    isOpen,
    setIsOpen,
    onRequestClose,
    priority
  } = _ref;
  const intl = useIntl();
  const Settings = getSettingsSingletonInstance();
  // @ts-ignore - settings is a js singleton
  const {
    animations
  } = Settings.application;
  const [videoUrl, setVideoUrl] = React.useState('');
  const [startExternalVideo] = useMutation(EXTERNAL_VIDEO_START);
  const startWatching = url => {
    let externalVideoUrl = url;
    if (YOUTUBE_SHORTS_REGEX.test(url)) {
      const shortsUrl = url.replace('shorts/', 'watch?v=');
      externalVideoUrl = shortsUrl;
    } else if (PANOPTO_MATCH_URL.test(url)) {
      const m = url.match(PANOPTO_MATCH_URL);
      if (m && m.length >= 4) {
        externalVideoUrl = "https://".concat(m[1], "/Podcast/Social/").concat(m[3], ".mp4");
      }
    }
    startExternalVideo({
      variables: {
        externalVideoUrl
      }
    });
  };
  const valid = isUrlValid(videoUrl);
  return /*#__PURE__*/React.createElement(Styled.ExternalVideoModal, {
    onRequestClose: onRequestClose,
    contentLabel: intl.formatMessage(intlMessages.title),
    title: intl.formatMessage(intlMessages.title),
    isOpen: isOpen,
    setIsOpen: setIsOpen,
    priority: priority
  }, /*#__PURE__*/React.createElement(Styled.Content, null, /*#__PURE__*/React.createElement(Styled.VideoUrl, {
    animations: animations
  }, /*#__PURE__*/React.createElement("label", {
    htmlFor: "video-modal-input"
  }, intl.formatMessage(intlMessages.input), /*#__PURE__*/React.createElement("input", {
    id: "video-modal-input",
    onChange: e => setVideoUrl(e.target.value),
    name: "video-modal-input",
    placeholder: intl.formatMessage(intlMessages.urlInput),
    "aria-describedby": "exernal-video-note",
    onPaste: e => {
      e.stopPropagation();
    },
    onCut: e => {
      e.stopPropagation();
    },
    onCopy: e => {
      e.stopPropagation();
    }
  })), /*#__PURE__*/React.createElement(Styled.ExternalVideoNote, {
    id: "external-video-note"
  }, intl.formatMessage(intlMessages.note))), /*#__PURE__*/React.createElement("div", null, !valid && videoUrl ? /*#__PURE__*/React.createElement(Styled.UrlError, {
    animations: animations
  }, intl.formatMessage(intlMessages.urlError)) : null), /*#__PURE__*/React.createElement(Styled.StartButton, {
    label: intl.formatMessage(intlMessages.start),
    disabled: !valid || !videoUrl,
    onClick: () => {
      startWatching(videoUrl);
      onRequestClose();
    },
    "data-test": "startNewVideo",
    color: "primary"
  })));
};
module.exportDefault(ExternalVideoPlayerModal);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/modal/service.ts                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  isUrlValid: () => isUrlValid
});
let ReactPlayer;
module.link("react-player", {
  default(v) {
    ReactPlayer = v;
  }
}, 0);
const YOUTUBE_SHORTS_REGEX = new RegExp(/^(?:https?:\/\/)?(?:www\.)?(youtube\.com\/shorts)\/.+$/);
const PANOPTO_MATCH_URL = /https?:\/\/([^/]+\/Panopto)(\/Pages\/Viewer\.aspx\?id=)([-a-zA-Z0-9]+)/;
const isUrlValid = url => {
  if (YOUTUBE_SHORTS_REGEX.test(url)) {
    const shortsUrl = url.replace('shorts/', 'watch?v=');
    return /^https.*$/.test(shortsUrl) && (ReactPlayer.canPlay(shortsUrl) || PANOPTO_MATCH_URL.test(url));
  }
  return /^https.*$/.test(url) && (ReactPlayer.canPlay(url) || PANOPTO_MATCH_URL.test(url));
};
module.exportDefault({
  isUrlValid
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/modal/styles.ts                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let borderSize, borderRadius, smPaddingY, mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 1);
let colorText, colorGrayLighter, colorGray, colorBlueLight, colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorText(v) {
    colorText = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorBlueLight(v) {
    colorBlueLight = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 2);
let fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 3);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
const UrlError = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  color: red;\n  padding: 1em 0 2.5em 0;\n\n  ", "\n"])), _ref => {
  let {
    animations
  } = _ref;
  return animations && "\n    transition: 1s;\n  ";
});
const ExternalVideoModal = styled(ModalSimple)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding: 1rem;\n  min-height: 23rem;\n"])));
const Content = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 0;\n  margin-right: auto;\n  margin-left: auto;\n  width: 100%;\n"])));
const VideoUrl = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin: 0 ", " 0 ", ";\n\n  & > label {\n    display: block;\n  }\n\n  & > label input {\n    display: block;\n    margin: 10px 0 10px 0;\n    padding: 0.4em;\n    color: ", ";\n    line-height: 2rem;\n    width: 100%;\n    font-family: inherit;\n    font-weight: inherit;\n    border: 1px solid ", ";\n    border-radius: ", ";\n\n    ", "\n\n    &:focus {\n      outline: none;\n      border-radius: ", ";\n      box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n    }\n  }\n\n  & > span {\n    font-weight: 600;\n  }\n"])), borderSize, borderSize, colorText, colorGrayLighter, borderRadius, _ref2 => {
  let {
    animations
  } = _ref2;
  return animations && "\n      transition: box-shadow .2s;\n    ";
}, borderSize, borderSize, colorBlueLight, colorPrimary);
const ExternalVideoNote = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: ", ";\n  font-style: italic;\n  padding-top: ", ";\n"])), colorGray, fontSizeSmall, smPaddingY);
// @ts-ignore - Button is JSX element
const StartButton = styled(Button)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  align-self: center;\n\n  &:focus {\n    outline: none !important;\n  }\n\n  & > i {\n    color: #3c5764;\n  }\n\n  margin: 0;\n  display: block;\n  position: absolute;\n  bottom: ", ";\n"])), mdPaddingX);
module.exportDefault({
  UrlError,
  ExternalVideoModal,
  Content,
  VideoUrl,
  ExternalVideoNote,
  StartButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/component.tsx                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useEffect, useMemo, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let audioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    audioManager = v;
  }
}, 2);
let useReactiveVar, useMutation;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  },
  useMutation(v) {
    useMutation = v;
  }
}, 3);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 4);
let ExternalVideoVolumeCommandsEnum;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/ui-commands/external-video/volume/enums", {
  ExternalVideoVolumeCommandsEnum(v) {
    ExternalVideoVolumeCommandsEnum = v;
  }
}, 5);
let PluginSdk;
module.link("bigbluebutton-html-plugin-sdk", {
  "*"(v) {
    PluginSdk = v;
  }
}, 6);
let UI_DATA_LISTENER_SUBSCRIBED;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/ui-data-hooks/consts", {
  UI_DATA_LISTENER_SUBSCRIBED(v) {
    UI_DATA_LISTENER_SUBSCRIBED = v;
  }
}, 7);
let ExternalVideoVolumeUiDataNames;
module.link("bigbluebutton-html-plugin-sdk", {
  ExternalVideoVolumeUiDataNames(v) {
    ExternalVideoVolumeUiDataNames = v;
  }
}, 8);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 9);
let layoutDispatch, layoutSelect, layoutSelectInput, layoutSelectOutput;
module.link("../../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  }
}, 10);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 11);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 12);
let useTimeSync;
module.link("/imports/ui/core/local-states/useTimeSync", {
  default(v) {
    useTimeSync = v;
  }
}, 13);
let ExternalVideoPlayerToolbar;
module.link("./toolbar/component", {
  default(v) {
    ExternalVideoPlayerToolbar = v;
  }
}, 14);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 15);
let ACTIONS, PRESENTATION_AREA;
module.link("../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PRESENTATION_AREA(v) {
    PRESENTATION_AREA = v;
  }
}, 16);
let EXTERNAL_VIDEO_UPDATE;
module.link("../mutations", {
  EXTERNAL_VIDEO_UPDATE(v) {
    EXTERNAL_VIDEO_UPDATE = v;
  }
}, 17);
let PeerTube;
module.link("../custom-players/peertube", {
  default(v) {
    PeerTube = v;
  }
}, 18);
let ArcPlayer;
module.link("../custom-players/arc-player", {
  ArcPlayer(v) {
    ArcPlayer = v;
  }
}, 19);
const AUTO_PLAY_BLOCK_DETECTION_TIMEOUT_SECONDS = 5;
const intlMessages = defineMessages({
  autoPlayWarning: {
    id: 'app.externalVideo.autoPlayWarning',
    description: 'Shown when user needs to interact with player to make it work'
  },
  refreshLabel: {
    id: 'app.externalVideo.refreshLabel'
  },
  fullscreenLabel: {
    id: 'app.externalVideo.fullscreenLabel'
  },
  subtitlesOn: {
    id: 'app.externalVideo.subtitlesOn'
  },
  subtitlesOff: {
    id: 'app.externalVideo.subtitlesOff'
  }
});
// @ts-ignore - PeerTubePlayer is not typed
Styled.VideoPlayer.addCustomPlayer(PeerTube);
// @ts-ignore - ArcPlayer is not typed
Styled.VideoPlayer.addCustomPlayer(ArcPlayer);
const ExternalVideoPlayer = _ref => {
  var _playerRef$current, _playerRef$current2;
  let {
    isGridLayout,
    isSidebarContentOpen,
    currentVolume,
    isMuted,
    isResizing,
    externalVideo,
    fullscreenContext,
    videoUrl,
    isPresenter,
    playing,
    playerPlaybackRate,
    currentTime,
    isEchoTest,
    key,
    setKey
  } = _ref;
  const intl = useIntl();
  const {
    height,
    width,
    top,
    left,
    right
  } = externalVideo;
  const hideVolume = useMemo(() => ({
    Vimeo: true,
    Facebook: true,
    ArcPlayer: true
    // YouTube: true,
  }), []);
  const videoPlayConfig = useMemo(() => {
    return {
      // default option for all players, can be overwritten
      playerOptions: {
        autoplay: true,
        playsinline: true,
        controls: isPresenter
      },
      file: {
        attributes: {
          controls: isPresenter ? 'controls' : '',
          autoplay: 'autoplay',
          playsinline: 'playsinline'
        }
      },
      facebook: {
        controls: isPresenter
      },
      dailymotion: {
        params: {
          controls: isPresenter
        }
      },
      youtube: {
        playerVars: {
          autoplay: 1,
          modestbranding: 1,
          autohide: 1,
          rel: 0,
          ecver: 2,
          controls: isPresenter ? 1 : 0,
          cc_lang_pref: document.getElementsByTagName('html')[0].lang.substring(0, 2)
        },
        embedOptions: {
          host: 'https://www.youtube-nocookie.com'
        }
      },
      peertube: {
        isPresenter
      },
      twitch: {
        options: {
          controls: isPresenter
        },
        playerId: 'externalVideoPlayerTwitch'
      },
      preload: true,
      showHoverToolBar: false
    };
  }, [isPresenter]);
  const [showUnsynchedMsg, setShowUnsynchedMsg] = React.useState(false);
  const [showHoverToolBar, setShowHoverToolBar] = React.useState(false);
  const [mute, setMute] = React.useState(false);
  const [volume, setVolume] = React.useState(1);
  const [subtitlesOn, setSubtitlesOn] = React.useState(false);
  const [played, setPlayed] = React.useState(0);
  const [loaded, setLoaded] = React.useState(0);
  const playerRef = useRef();
  const playerParentRef = useRef(null);
  const timeoutRef = useRef();
  const presenterRef = useRef(isPresenter);
  const [duration, setDuration] = React.useState(0);
  const [reactPlayerState, setReactPlayerState] = React.useState(false);
  const [updateExternalVideo] = useMutation(EXTERNAL_VIDEO_UPDATE);
  let lastMessage = {
    event: '',
    rate: 0,
    time: 0
  };
  const handleDuration = duration => {
    setDuration(duration);
  };
  const sendMessage = (event, data) => {
    // don't re-send repeated update messages
    if (lastMessage.event === event && lastMessage.time === data.time) {
      return;
    }
    // don't register to redis a viewer joined message
    if (event === 'viewerJoined') {
      return;
    }
    lastMessage = _objectSpread(_objectSpread({}, data), {}, {
      event
    });
    // Use an integer for playing state
    // 0: stopped 1: playing
    // We might use more states in the future
    const state = data.state ? 1 : 0;
    updateExternalVideo({
      variables: {
        status: event,
        rate: data === null || data === void 0 ? void 0 : data.rate,
        time: data === null || data === void 0 ? void 0 : data.time,
        state
      }
    });
  };
  useEffect(() => {
    const unsynchedPlayer = reactPlayerState !== playing;
    if (unsynchedPlayer && !!videoUrl) {
      timeoutRef.current = setTimeout(() => {
        setShowUnsynchedMsg(true);
      }, AUTO_PLAY_BLOCK_DETECTION_TIMEOUT_SECONDS * 1000);
    } else {
      setShowUnsynchedMsg(false);
      clearTimeout(timeoutRef.current);
    }
  }, [reactPlayerState, playing]);
  useEffect(() => {
    const handleExternalVideoVolumeSet = event => setVolume(event.detail.volume);
    window.addEventListener(ExternalVideoVolumeCommandsEnum.SET, handleExternalVideoVolumeSet);
    return () => {
      window.addEventListener(ExternalVideoVolumeCommandsEnum.SET, handleExternalVideoVolumeSet);
    };
  }, []);
  useEffect(() => {
    if (playerRef.current) {
      playerRef.current.seekTo(currentTime, 'seconds');
    }
  }, [playerRef.current, playing]);
  // --- Plugin related code ---;
  const internalPlayer = (_playerRef$current = playerRef.current) !== null && _playerRef$current !== void 0 && _playerRef$current.getInternalPlayer ? (_playerRef$current2 = playerRef.current) === null || _playerRef$current2 === void 0 ? void 0 : _playerRef$current2.getInternalPlayer() : null;
  if (internalPlayer && internalPlayer !== null && internalPlayer !== void 0 && internalPlayer.isMuted && typeof (internalPlayer === null || internalPlayer === void 0 ? void 0 : internalPlayer.isMuted) === 'function' && (internalPlayer === null || internalPlayer === void 0 ? void 0 : internalPlayer.isMuted()) !== isMuted.current) {
    isMuted.current = internalPlayer === null || internalPlayer === void 0 ? void 0 : internalPlayer.isMuted();
    window.dispatchEvent(new CustomEvent(ExternalVideoVolumeUiDataNames.IS_VOLUME_MUTED, {
      detail: {
        value: internalPlayer === null || internalPlayer === void 0 ? void 0 : internalPlayer.isMuted()
      }
    }));
  }
  if (internalPlayer && internalPlayer !== null && internalPlayer !== void 0 && internalPlayer.getVolume && typeof (internalPlayer === null || internalPlayer === void 0 ? void 0 : internalPlayer.getVolume) === 'function' && (internalPlayer === null || internalPlayer === void 0 ? void 0 : internalPlayer.getVolume()) !== currentVolume.current) {
    currentVolume.current = internalPlayer === null || internalPlayer === void 0 ? void 0 : internalPlayer.getVolume();
    window.dispatchEvent(new CustomEvent(ExternalVideoVolumeUiDataNames.CURRENT_VOLUME_VALUE, {
      detail: {
        value: (internalPlayer === null || internalPlayer === void 0 ? void 0 : internalPlayer.getVolume()) / 100
      }
    }));
  }
  // --- End of plugin related code ---
  useEffect(() => {
    if (isPresenter !== presenterRef.current) {
      setKey(uniqueId('react-player'));
      presenterRef.current = isPresenter;
    }
  }, [isPresenter]);
  const handleOnPlay = () => {
    setReactPlayerState(true);
    if (isPresenter) {
      var _playerRef$current$ge, _playerRef$current3, _playerRef$current3$g;
      const rate = (_playerRef$current$ge = (_playerRef$current3 = playerRef.current) === null || _playerRef$current3 === void 0 ? void 0 : (_playerRef$current3$g = _playerRef$current3.getInternalPlayer()) === null || _playerRef$current3$g === void 0 ? void 0 : _playerRef$current3$g.getPlaybackRate()) !== null && _playerRef$current$ge !== void 0 ? _playerRef$current$ge : 1;
      const currentTime = played * duration;
      sendMessage('play', {
        rate,
        time: currentTime
      });
    } else if (!playing && !isPresenter) {
      var _playerRef$current4;
      (_playerRef$current4 = playerRef.current) === null || _playerRef$current4 === void 0 ? void 0 : _playerRef$current4.getInternalPlayer().pauseVideo();
    }
  };
  const handleOnStop = () => {
    setReactPlayerState(false);
    if (isPresenter) {
      var _playerRef$current$ge2, _playerRef$current5, _playerRef$current5$g, _playerRef$current$ge3, _playerRef$current6;
      const rate = (_playerRef$current$ge2 = (_playerRef$current5 = playerRef.current) === null || _playerRef$current5 === void 0 ? void 0 : (_playerRef$current5$g = _playerRef$current5.getInternalPlayer()) === null || _playerRef$current5$g === void 0 ? void 0 : _playerRef$current5$g.getPlaybackRate()) !== null && _playerRef$current$ge2 !== void 0 ? _playerRef$current$ge2 : 1;
      const currentTime = (_playerRef$current$ge3 = (_playerRef$current6 = playerRef.current) === null || _playerRef$current6 === void 0 ? void 0 : _playerRef$current6.getCurrentTime()) !== null && _playerRef$current$ge3 !== void 0 ? _playerRef$current$ge3 : 0;
      sendMessage('stop', {
        rate,
        time: currentTime
      });
    }
    if (!isPresenter && playing) {
      var _playerRef$current7;
      (_playerRef$current7 = playerRef.current) === null || _playerRef$current7 === void 0 ? void 0 : _playerRef$current7.getInternalPlayer().playVideo();
    }
  };
  const handleOnReady = () => {
    currentTime = -1;
  };
  const handleProgress = state => {
    setPlayed(state.played);
    setLoaded(state.loaded);
    if (playing && isPresenter) {
      var _playerRef$current8;
      currentTime = ((_playerRef$current8 = playerRef.current) === null || _playerRef$current8 === void 0 ? void 0 : _playerRef$current8.getCurrentTime()) || 0;
    }
  };
  const isMinimized = width === 0 && height === 0;
  // @ts-ignore accessing lib private property
  const playerName = playerRef.current && playerRef.current.player
  // @ts-ignore accessing lib private property
  && playerRef.current.player.player && playerRef.current.player.player.constructor.name;
  let toolbarStyle = 'hoverToolbar';
  if (deviceInfo.isMobile && !showHoverToolBar) {
    toolbarStyle = 'dontShowMobileHoverToolbar';
  }
  if (deviceInfo.isMobile && showHoverToolBar) {
    toolbarStyle = 'showMobileHoverToolbar';
  }
  const shouldShowTools = () => {
    if (isPresenter || !isPresenter && isGridLayout && !isSidebarContentOpen || !videoUrl) {
      return false;
    }
    return true;
  };
  return /*#__PURE__*/React.createElement(Styled.Container, {
    style: {
      height,
      width,
      top,
      left,
      right,
      zIndex: externalVideo.zIndex
    },
    isResizing: isResizing,
    isMinimized: isMinimized
  }, /*#__PURE__*/React.createElement(Styled.VideoPlayerWrapper, {
    fullscreen: fullscreenContext,
    ref: playerParentRef,
    "data-test": "videoPlayer"
  }, showUnsynchedMsg && shouldShowTools() ? /*#__PURE__*/React.createElement(Styled.AutoPlayWarning, null, intl.formatMessage(intlMessages.autoPlayWarning)) : '', /*#__PURE__*/React.createElement(Styled.VideoPlayer, {
    config: videoPlayConfig,
    autoPlay: true,
    playsInline: true,
    url: videoUrl,
    playing: playing,
    playbackRate: playerPlaybackRate,
    key: key,
    height: "100%",
    width: "100%",
    ref: playerRef,
    volume: volume,
    onReady: handleOnReady,
    onPlay: handleOnPlay,
    onDuration: handleDuration,
    onProgress: handleProgress,
    onPause: handleOnStop,
    onEnded: handleOnStop,
    muted: mute || isEchoTest
  }), shouldShowTools() ? /*#__PURE__*/React.createElement(ExternalVideoPlayerToolbar, {
    handleOnMuted: m => {
      setMute(m);
    },
    handleReload: () => setKey(uniqueId('react-player')),
    setShowHoverToolBar: setShowHoverToolBar,
    toolbarStyle: toolbarStyle,
    handleVolumeChanged: setVolume,
    volume: volume,
    muted: mute || isEchoTest,
    mutedByEchoTest: isEchoTest,
    playing: playing,
    playerName: playerName,
    toggleSubtitle: () => setSubtitlesOn(!subtitlesOn),
    playerParent: playerParentRef.current,
    played: played,
    loaded: loaded,
    subtitlesOn: subtitlesOn,
    hideVolume: hideVolume[playerName]
  }) : null));
};
const ExternalVideoPlayerContainer = () => {
  var _currentMeeting$exter3, _currentMeeting$exter4, _currentMeeting$exter5, _currentMeeting$exter6, _currentMeeting$exter7, _currentMeeting$exter8, _currentMeeting$exter9, _currentMeeting$exter10, _currentUser$presente, _currentMeeting$layou, _currentMeeting$exter11, _currentMeeting$exter12, _currentMeeting$exter13, _currentMeeting$exter14, _currentMeeting$exter15, _currentMeeting$exter16;
  /* eslint no-underscore-dangle: "off" */
  // @ts-ignore - temporary while hybrid (meteor+GraphQl)
  const isEchoTest = useReactiveVar(audioManager._isEchoTest.value);
  const theresNoExternalVideo = useRef(true);
  const {
    data: currentUser
  } = useCurrentUser(user => ({
    presenter: user.presenter
  }));
  const currentVolume = React.useRef(0);
  const isMuted = React.useRef(false);
  const {
    data: currentMeeting
  } = useMeeting(m => ({
    externalVideo: m.externalVideo,
    layout: m.layout
  }));
  useEffect(() => {
    var _currentMeeting$exter, _currentMeeting$exter2;
    if (!(currentMeeting !== null && currentMeeting !== void 0 && (_currentMeeting$exter = currentMeeting.externalVideo) !== null && _currentMeeting$exter !== void 0 && _currentMeeting$exter.externalVideoUrl) && !theresNoExternalVideo.current) {
      layoutContextDispatch({
        type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
        value: {
          content: PRESENTATION_AREA.EXTERNAL_VIDEO,
          open: false
        }
      });
      theresNoExternalVideo.current = true;
    } else if (currentMeeting !== null && currentMeeting !== void 0 && (_currentMeeting$exter2 = currentMeeting.externalVideo) !== null && _currentMeeting$exter2 !== void 0 && _currentMeeting$exter2.externalVideoUrl && theresNoExternalVideo.current) {
      layoutContextDispatch({
        type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
        value: {
          content: PRESENTATION_AREA.EXTERNAL_VIDEO,
          open: true
        }
      });
      theresNoExternalVideo.current = false;
    }
  }, [currentMeeting]);
  // --- Plugin related code ---
  useEffect(() => {
    // Define functions to first inform ui data hooks that subscribe to these events
    const updateUiDataHookCurrentVolumeForPlugin = () => {
      window.dispatchEvent(new CustomEvent(PluginSdk.ExternalVideoVolumeUiDataNames.CURRENT_VOLUME_VALUE, {
        detail: {
          value: currentVolume.current
        }
      }));
    };
    const updateUiDataHookIsMutedPlugin = () => {
      window.dispatchEvent(new CustomEvent(PluginSdk.ExternalVideoVolumeUiDataNames.IS_VOLUME_MUTED, {
        detail: {
          value: isMuted.current
        }
      }));
    };
    // When component mount, add event listener to send first information
    // about these ui data hooks to plugin
    window.addEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.ExternalVideoVolumeUiDataNames.CURRENT_VOLUME_VALUE), updateUiDataHookCurrentVolumeForPlugin);
    window.addEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.ExternalVideoVolumeUiDataNames.IS_VOLUME_MUTED), updateUiDataHookIsMutedPlugin);
    // Before component unmount, remove event listeners for plugin ui data hooks
    return () => {
      window.removeEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.ExternalVideoVolumeUiDataNames.CURRENT_VOLUME_VALUE), updateUiDataHookCurrentVolumeForPlugin);
      window.removeEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.ExternalVideoVolumeUiDataNames.IS_VOLUME_MUTED), updateUiDataHookIsMutedPlugin);
    };
  }, []);
  // --- End of plugin related code ---
  const [timeSync] = useTimeSync();
  const fullscreenElementId = 'ExternalVideo';
  const externalVideo = layoutSelectOutput(i => i.externalVideo);
  const hasExternalVideoOnLayout = layoutSelectInput(i => i.externalVideo.hasExternalVideo);
  const cameraDock = layoutSelectInput(i => i.cameraDock);
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    isOpen: isSidebarContentOpen
  } = sidebarContent;
  const {
    isResizing
  } = cameraDock;
  const layoutContextDispatch = layoutDispatch();
  const fullscreen = layoutSelect(i => i.fullscreen);
  const {
    element
  } = fullscreen;
  const fullscreenContext = element === fullscreenElementId;
  const [key, setKey] = React.useState(uniqueId('react-player'));
  if (!currentUser || !(currentMeeting !== null && currentMeeting !== void 0 && currentMeeting.externalVideo)) return null;
  if (!hasExternalVideoOnLayout) return null;
  const playerCurrentTime = (_currentMeeting$exter3 = (_currentMeeting$exter4 = currentMeeting.externalVideo) === null || _currentMeeting$exter4 === void 0 ? void 0 : _currentMeeting$exter4.playerCurrentTime) !== null && _currentMeeting$exter3 !== void 0 ? _currentMeeting$exter3 : 0;
  const playerPlaybackRate = (_currentMeeting$exter5 = (_currentMeeting$exter6 = currentMeeting.externalVideo) === null || _currentMeeting$exter6 === void 0 ? void 0 : _currentMeeting$exter6.playerPlaybackRate) !== null && _currentMeeting$exter5 !== void 0 ? _currentMeeting$exter5 : 1;
  const playerUpdatedAt = (_currentMeeting$exter7 = (_currentMeeting$exter8 = currentMeeting.externalVideo) === null || _currentMeeting$exter8 === void 0 ? void 0 : _currentMeeting$exter8.updatedAt) !== null && _currentMeeting$exter7 !== void 0 ? _currentMeeting$exter7 : Date.now();
  const playerUpdatedAtDate = new Date(playerUpdatedAt);
  const currentDate = new Date(Date.now() + (timeSync !== null && timeSync !== void 0 ? timeSync : 0));
  const isPaused = (_currentMeeting$exter9 = !((_currentMeeting$exter10 = currentMeeting.externalVideo) !== null && _currentMeeting$exter10 !== void 0 && _currentMeeting$exter10.playerPlaying)) !== null && _currentMeeting$exter9 !== void 0 ? _currentMeeting$exter9 : false;
  const currentTime = isPaused ? playerCurrentTime : (currentDate.getTime() - playerUpdatedAtDate.getTime()) / 1000 + playerCurrentTime * playerPlaybackRate;
  const isPresenter = (_currentUser$presente = currentUser.presenter) !== null && _currentUser$presente !== void 0 ? _currentUser$presente : false;
  const isGridLayout = ((_currentMeeting$layou = currentMeeting.layout) === null || _currentMeeting$layou === void 0 ? void 0 : _currentMeeting$layou.currentLayoutType) === 'VIDEO_FOCUS';
  return /*#__PURE__*/React.createElement(ExternalVideoPlayer, {
    isSidebarContentOpen: isSidebarContentOpen,
    isGridLayout: isGridLayout,
    currentVolume: currentVolume,
    isMuted: isMuted,
    isEchoTest: isEchoTest,
    isPresenter: isPresenter !== null && isPresenter !== void 0 ? isPresenter : false,
    videoUrl: (_currentMeeting$exter11 = (_currentMeeting$exter12 = currentMeeting.externalVideo) === null || _currentMeeting$exter12 === void 0 ? void 0 : _currentMeeting$exter12.externalVideoUrl) !== null && _currentMeeting$exter11 !== void 0 ? _currentMeeting$exter11 : '',
    playing: (_currentMeeting$exter13 = (_currentMeeting$exter14 = currentMeeting.externalVideo) === null || _currentMeeting$exter14 === void 0 ? void 0 : _currentMeeting$exter14.playerPlaying) !== null && _currentMeeting$exter13 !== void 0 ? _currentMeeting$exter13 : false,
    playerPlaybackRate: (_currentMeeting$exter15 = (_currentMeeting$exter16 = currentMeeting.externalVideo) === null || _currentMeeting$exter16 === void 0 ? void 0 : _currentMeeting$exter16.playerPlaybackRate) !== null && _currentMeeting$exter15 !== void 0 ? _currentMeeting$exter15 : 1,
    isResizing: isResizing,
    fullscreenContext: fullscreenContext,
    externalVideo: externalVideo,
    currentTime: currentTime,
    key: key,
    setKey: setKey
  });
};
module.exportDefault(ExternalVideoPlayerContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/external-video-player-graphql/styles.ts                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  Container: () => Container,
  VideoPlayerWrapper: () => VideoPlayerWrapper,
  AutoPlayWarning: () => AutoPlayWarning,
  VideoPlayer: () => VideoPlayer
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let ReactPlayer;
module.link("react-player", {
  default(v) {
    ReactPlayer = v;
  }
}, 1);
const Container = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  pointer-events: inherit;\n  background: var(--color-black);\n  overflow: hidden;\n\n  ", "\n  ", "\n"])), _ref => {
  let {
    isResizing
  } = _ref;
  return isResizing && "\n    pointer-events: none;\n  ";
}, _ref2 => {
  let {
    isMinimized
  } = _ref2;
  return isMinimized && "\n    display: none;\n  ";
});
const VideoPlayerWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n  width: 100%;\n  height: 100%;\n\n  ", "\n"])), _ref3 => {
  let {
    fullscreen
  } = _ref3;
  return fullscreen && "\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: 99;\n  ";
});
const AutoPlayWarning = styled.p(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: absolute;\n  z-index: 100;\n  font-size: x-large;\n  color: white;\n  width: 100%;\n  background-color: rgba(6,23,42,0.5);\n  bottom: 20%;\n  vertical-align: middle;\n  text-align: center;\n  pointer-events: none;\n"])));
const VideoPlayer = styled(ReactPlayer)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  width: 100%;\n  height: 100%;\n  & > iframe {\n    display: flex;\n    flex-flow: column;\n    flex-grow: 1;\n    flex-shrink: 1;\n    position: relative;\n    overflow-x: hidden;\n    overflow-y: auto;\n    border-style: none;\n    border-bottom: none;\n  }\n"])));
module.exportDefault({
  VideoPlayerWrapper,
  AutoPlayWarning,
  VideoPlayer,
  Container
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"custom-players":{"arc-player.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/custom-players/arc-player.jsx                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  getSDK: () => getSDK,
  ArcPlayer: () => ArcPlayer
});
let loadScript;
module.link("load-script", {
  default(v) {
    loadScript = v;
  }
}, 0);
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 1);
const MATCH_URL = new RegExp("https?:\/\/(.*)(instructuremedia.com)(\/embed)?\/([-abcdef0-9]+)");
const SDK_URL = 'https://files.instructuremedia.com/instructure-media-script/instructure-media-1.1.0.js';
const EMBED_PATH = "/embed/";

// Util function to load an external SDK or return the SDK if it is already loaded
// From https://github.com/CookPete/react-player/blob/master/src/utils.js
const resolves = {};
function getSDK(url, sdkGlobal) {
  let sdkReady = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  let isLoaded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => true;
  let fetchScript = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : loadScript;
  if (window[sdkGlobal] && isLoaded(window[sdkGlobal])) {
    return Promise.resolve(window[sdkGlobal]);
  }
  return new Promise((resolve, reject) => {
    // If we are already loading the SDK, add the resolve
    // function to the existing array of resolve functions
    if (resolves[url]) {
      resolves[url].push(resolve);
      return;
    }
    resolves[url] = [resolve];
    const onLoaded = sdk => {
      // When loaded, resolve all pending promises
      resolves[url].forEach(resolve => resolve(sdk));
    };
    if (sdkReady) {
      const previousOnReady = window[sdkReady];
      window[sdkReady] = function () {
        if (previousOnReady) previousOnReady();
        onLoaded(window[sdkGlobal]);
      };
    }
    fetchScript(url, err => {
      if (err) {
        reject(err);
      }
      window[sdkGlobal] = url;
      if (!sdkReady) {
        onLoaded(window[sdkGlobal]);
      }
    });
  });
}
class ArcPlayer extends Component {
  constructor(props) {
    super(props);
    this.currentTime = 0;
    this.updateCurrentTime = this.updateCurrentTime.bind(this);
    this.getCurrentTime = this.getCurrentTime.bind(this);
    this.getEmbedUrl = this.getEmbedUrl.bind(this);
    this.onStateChange = this.onStateChange.bind(this);
  }
  componentDidMount() {
    this.props.onMount && this.props.onMount(this);
  }
  load() {
    new Promise((resolve, reject) => {
      this.render();
      resolve();
    }).then(() => {
      return getSDK(SDK_URL, 'ArcPlayer');
    }).then(() => {
      this.player = new InstructureMedia.Player('arcPlayerContainer', {
        height: '100%',
        width: '100%',
        embedUrl: this.getEmbedUrl(),
        events: {
          onStateChange: this.onStateChange
        }
      });
      this.player.playVideo();
    });
  }
  onStateChange(event) {
    if (!this.player) {
      return;
    }
    this.player.getCurrentTime().then(t => {
      this.updateCurrentTime(t.data);
    });
    if (event.data === "CUED") {
      this.props.onReady();
    } else if (event.data === "PLAYING") {
      this.props.onPlay && this.props.onPlay();
    } else if (event.data === "PAUSED") {
      this.props.onPause && this.props.onPause();
    } else if (event.data === "SEEKED") {
      // TODO
    } else if (event.data === "SEEKING") {
      // TODO
    }
  }
  updateCurrentTime(e) {
    this.currentTime = e;
  }
  getVideoId() {
    const {
      url
    } = this.props;
    const m = url.match(MATCH_URL);
    return m && m[4];
  }
  getHostUrl() {
    const {
      url
    } = this.props;
    const m = url.match(MATCH_URL);
    return m && 'https://' + m[1] + m[2];
  }
  getEmbedUrl() {
    let url = this.getHostUrl() + EMBED_PATH + this.getVideoId();
    return url;
  }
  play() {
    if (this.player) {
      this.player.playVideo();
    }
  }
  pause() {
    if (this.player) {
      this.player.pauseVideo();
    }
  }
  stop() {
    // TODO: STOP
  }
  seekTo(seconds) {
    if (this.player) {
      this.player.seekTo(seconds);
    }
  }
  setVolume(fraction) {
    // console.log("SET VOLUME");
  }
  setLoop(loop) {
    // console.log("SET LOOP");
  }
  mute() {
    // console.log("SET MUTE");
  }
  unmute() {
    // console.log("SET UNMUTE");
  }
  getDuration() {
    //console.log("GET DURATION");
  }
  getCurrentTime() {
    if (this.player) {
      this.player.getCurrentTime().then(t => {
        this.updateCurrentTime(t.data);
      });
    }
    return this.currentTime;
  }
  getSecondsLoaded() {}
  render() {
    const style = {
      width: '100%',
      height: '100%',
      overflow: 'hidden',
      backgroundColor: 'black'
    };
    return /*#__PURE__*/React.createElement("div", {
      key: this.props.url,
      style: style,
      id: "arcPlayerContainer",
      ref: container => {
        this.container = container;
      }
    });
  }
}
ArcPlayer.displayName = 'ArcPlayer';
ArcPlayer.canPlay = url => {
  return MATCH_URL.test(url);
};
module.exportDefault(ArcPlayer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"panopto.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/custom-players/panopto.jsx                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  Panopto: () => Panopto
});
const MATCH_URL = /https?\:\/\/([^\/]+\/Panopto)(\/Pages\/Viewer\.aspx\?id=)([-a-zA-Z0-9]+)/;
class Panopto {
  static getSocialUrl(url) {
    const m = url.match(MATCH_URL);
    return 'https://' + m[1] + '/Podcast/Social/' + m[3] + '.mp4';
  }
}
Panopto.canPlay = url => {
  return MATCH_URL.test(url);
};
module.exportDefault(Panopto);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"peertube.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/custom-players/peertube.jsx                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  getSDK: () => getSDK,
  PeerTubePlayer: () => PeerTubePlayer
});
let loadScript;
module.link("load-script", {
  default(v) {
    loadScript = v;
  }
}, 0);
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 1);
//To work with PeerTube >=v3.3 URL patterns
const MATCH_URL = new RegExp("(https?)://(.*)(/videos/watch/|/w/)(.*)");
const SDK_URL = 'https://unpkg.com/@peertube/embed-api@0.0.4/build/player.min.js';

// Util function to load an external SDK or return the SDK if it is already loaded
// From https://github.com/CookPete/react-player/blob/master/src/utils.js
const resolves = {};
function getSDK(url, sdkGlobal) {
  let sdkReady = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  let isLoaded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : () => true;
  let fetchScript = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : loadScript;
  if (window[sdkGlobal] && isLoaded(window[sdkGlobal])) {
    return Promise.resolve(window[sdkGlobal]);
  }
  return new Promise((resolve, reject) => {
    // If we are already loading the SDK, add the resolve
    // function to the existing array of resolve functions
    if (resolves[url]) {
      resolves[url].push(resolve);
      return;
    }
    resolves[url] = [resolve];
    const onLoaded = sdk => {
      // When loaded, resolve all pending promises
      resolves[url].forEach(resolve => resolve(sdk));
    };
    if (sdkReady) {
      const previousOnReady = window[sdkReady];
      window[sdkReady] = function () {
        if (previousOnReady) previousOnReady();
        onLoaded(window[sdkGlobal]);
      };
    }
    fetchScript(url, err => {
      if (err) {
        reject(err);
      }
      window[sdkGlobal] = url;
      if (!sdkReady) {
        onLoaded(window[sdkGlobal]);
      }
    });
  });
}
class PeerTubePlayer extends Component {
  constructor(props) {
    super(props);
    this.getEmbedUrl = () => {
      const {
        url,
        config
      } = this.props;
      const m = MATCH_URL.exec(url);
      const isPresenter = config && config.peertube && config.peertube.isPresenter;
      return "".concat(m[1], "://").concat(m[2], "/videos/embed/").concat(m[4], "?api=1&controls=").concat(isPresenter);
    };
    this.player = this;
    this._player = null;
    this.currentTime = 0;
    this.playbackRate = 1;
    this.getCurrentTime = this.getCurrentTime.bind(this);
    this.getEmbedUrl = this.getEmbedUrl.bind(this);
    this.setupEvents = this.setupEvents.bind(this);
  }
  componentDidMount() {
    this.props.onMount && this.props.onMount(this);
  }
  load() {
    new Promise((resolve, reject) => {
      this.render();
      resolve();
    }).then(() => {
      return getSDK(SDK_URL, 'PeerTube');
    }).then(() => {
      this._player = new window['PeerTubePlayer'](this.container);
      this.setupEvents();
      return this._player.ready.then(() => {
        return this.props.onReady();
      });
    });
  }
  setupEvents(event) {
    const player = this._player;
    if (!player) {
      return;
    }
    player.addEventListener("playbackStatusUpdate", data => {
      this.currentTime = data.position;
    });
    player.addEventListener("playbackStatusChange", data => {
      if (data === 'playing') {
        this.props.onPlay();
      } else {
        this.props.onPause();
      }
    });
  }
  play() {
    if (this._player) {
      this._player.play();
    }
  }
  pause() {
    if (this._player) {
      this._player.pause();
    }
  }
  stop() {}
  seekTo(seconds) {
    if (this._player) {
      this._player.seek(seconds);
    }
  }
  setVolume(fraction) {
    this._player.setVolume(fraction);
  }
  getVolume() {
    return this._player.getVolume();
  }
  setLoop(loop) {
    // console.log("SET LOOP");
  }
  mute() {
    // console.log("SET MUTE");
  }
  unmute() {
    // console.log("SET UNMUTE");
  }
  getDuration() {
    //console.log("GET DURATION");
  }
  getCurrentTime() {
    return this.currentTime;
  }
  getSecondsLoaded() {}
  getPlaybackRate() {
    if (this._player) {
      this._player.getPlaybackRate().then(rate => {
        this.playbackRate = rate;
      });
    }
    return this.playbackRate;
  }
  setPlaybackRate(rate) {
    if (this._player) {
      this._player.setPlaybackRate(rate);
    }
  }
  render() {
    const style = {
      width: '100%',
      height: '100%',
      margin: 0,
      padding: 0,
      border: 0,
      overflow: 'hidden'
    };
    const {
      url
    } = this.props;
    return /*#__PURE__*/React.createElement("iframe", {
      key: url,
      style: style,
      src: this.getEmbedUrl(url),
      id: "peerTubeContainer",
      allow: "autoplay; fullscreen",
      sandbox: "allow-same-origin allow-scripts allow-popups",
      ref: container => {
        this.container = container;
      }
    });
  }
}
PeerTubePlayer.displayName = 'PeerTubePlayer';
PeerTubePlayer.canPlay = url => {
  return MATCH_URL.test(url);
};
module.exportDefault(PeerTubePlayer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"volume-slider":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/volume-slider/component.jsx                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
class VolumeSlider extends Component {
  constructor(props) {
    super(props);
    this.state = {
      volume: props.volume,
      muted: props.muted
    };
    this.handleOnChange = this.handleOnChange.bind(this);
    this.getVolumeIcon = this.getVolumeIcon.bind(this);
    this.setMuted = this.setMuted.bind(this);
  }
  componentDidUpdate(prevProp) {
    const {
      volume,
      muted
    } = this.props;
    const {
      volume: prevVolume,
      muted: prevMuted
    } = prevProp;
    if (prevVolume !== volume) {
      this.handleOnChange(volume);
    }
    if (prevMuted !== muted) {
      this.setMuted(muted);
    }
  }
  handleOnChange(volume) {
    const {
      onVolumeChanged
    } = this.props;
    onVolumeChanged(volume);
    this.setState({
      volume
    }, () => {
      const {
        volume: stateVolume,
        muted
      } = this.state;
      if (muted && stateVolume > 0) {
        // unmute if volume was raised during mute
        this.setMuted(false);
      } else if (stateVolume <= 0) {
        // mute if volume is turned to 0
        this.setMuted(true);
      }
    });
  }
  setMuted(muted) {
    const {
      onMuted
    } = this.props;
    this.setState({
      muted
    }, () => onMuted(muted));
  }
  getVolumeIcon() {
    const {
      muted,
      volume
    } = this.state;
    if (muted || volume <= 0) return 'volume_off';
    if (volume <= 0.25) return 'volume_mute';
    if (volume <= 0.75) return 'volume_down';
    return 'volume_up';
  }
  render() {
    const {
      muted,
      volume
    } = this.state;
    const {
      hideVolume
    } = this.props;
    if (hideVolume) {
      return null;
    }
    return /*#__PURE__*/React.createElement(Styled.Slider, null, /*#__PURE__*/React.createElement(Styled.Volume, {
      onClick: () => this.setMuted(!muted)
    }, /*#__PURE__*/React.createElement("i", {
      tabIndex: "-1",
      className: "icon-bbb-".concat(this.getVolumeIcon())
    })), /*#__PURE__*/React.createElement(Styled.VolumeSlider, {
      type: "range",
      min: 0,
      max: 1,
      step: 0.02,
      value: muted ? 0 : volume,
      onChange: e => this.handleOnChange(e.target.valueAsNumber)
    }));
  }
}
module.exportDefault(VolumeSlider);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/volume-slider/styles.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const Slider = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  width: 0.9em;\n  display: flex;\n  position: absolute;\n  bottom: 2.5em;\n  left: 1em;\n  padding: 0.25rem 0.5rem;\n  min-width: 200px;\n  background-color: rgba(0,0,0,0.5);\n  border-radius: 32px;\n\n  i {\n    color: white;\n    transition: 0.5s;\n    font-size: 200%;\n    cursor: pointer;\n  }\n  z-index: 2;\n"])));
const Volume = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin-right: 0.5em;\n  cursor: pointer;\n"])));
const VolumeSlider = styled.input(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: 100%;\n  cursor: pointer;\n"])));
module.exportDefault({
  Slider,
  Volume,
  VolumeSlider
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"mutations.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/mutations.tsx                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  EXTERNAL_VIDEO_START: () => EXTERNAL_VIDEO_START,
  EXTERNAL_VIDEO_UPDATE: () => EXTERNAL_VIDEO_UPDATE,
  EXTERNAL_VIDEO_STOP: () => EXTERNAL_VIDEO_STOP
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const EXTERNAL_VIDEO_START = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation ExternalVideoStart($externalVideoUrl: String!) {\n    externalVideoStart(\n      externalVideoUrl: $externalVideoUrl\n    )\n  }\n"])));
const EXTERNAL_VIDEO_UPDATE = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation ExternalVideoUpdate(\n    $status: String!\n    $rate: Float!,\n    $time: Float!,\n    $state: Float!,\n  ) {\n    externalVideoUpdate(\n      status: $status,\n      rate: $rate,\n      time: $time,\n      state: $state,\n    )\n  }\n"])));
const EXTERNAL_VIDEO_STOP = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  mutation ExternalVideoStop {\n    externalVideoStop\n  }\n"])));
module.exportDefault({
  EXTERNAL_VIDEO_START,
  EXTERNAL_VIDEO_UPDATE,
  EXTERNAL_VIDEO_STOP
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/external-video-player/service.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  isUrlValid: () => isUrlValid,
  getPlayingState: () => getPlayingState
});
let ReactPlayer;
module.link("react-player", {
  default(v) {
    ReactPlayer = v;
  }
}, 0);
let Panopto;
module.link("./custom-players/panopto", {
  default(v) {
    Panopto = v;
  }
}, 1);
const YOUTUBE_SHORTS_REGEX = new RegExp(/^(?:https?:\/\/)?(?:www\.)?(youtube\.com\/shorts)\/.+$/);
const isUrlValid = url => {
  if (YOUTUBE_SHORTS_REGEX.test(url)) {
    const shortsUrl = url.replace('shorts/', 'watch?v=');
    return /^https.*$/.test(shortsUrl) && (ReactPlayer.canPlay(shortsUrl) || Panopto.canPlay(shortsUrl));
  }
  return /^https.*$/.test(url) && (ReactPlayer.canPlay(url) || Panopto.canPlay(url));
};

// Convert state (Number) to playing (Boolean)
const getPlayingState = state => {
  if (state === 1) return true;
  return false;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"nav-bar":{"nav-bar-graphql":{"recording-indicator":{"notify":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/nav-bar-graphql/recording-indicator/notify/component.tsx                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let USER_LEAVE_MEETING;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  USER_LEAVE_MEETING(v) {
    USER_LEAVE_MEETING = v;
  }
}, 2);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 3);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 4);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 5);
const intlMessages = defineMessages({
  title: {
    id: 'app.recording.notify.title',
    description: 'Title Modal Con sent'
  },
  description: {
    id: 'app.recording.notify.description',
    description: 'Question for accept or not meeting be recorded'
  },
  continue: {
    id: 'app.recording.notify.continue',
    description: 'Button accept'
  },
  leave: {
    id: 'app.recording.notify.leave',
    description: 'Button leave'
  },
  continueAriaLabel: {
    id: 'app.recording.notify.continueLabel',
    description: 'provides better context for yes btn label'
  },
  leaveAriaLabel: {
    id: 'app.recording.notify.leaveLabel',
    description: 'provides better context for no btn label'
  }
});
const LOGOUT_CODE = '680';
const RecordingNotifyModal = _ref => {
  let {
    toggleShouldNotify,
    closeModal,
    isOpen,
    priority
  } = _ref;
  const [userLeaveMeeting] = useMutation(USER_LEAVE_MEETING);
  const intl = useIntl();
  const skipButtonHandle = useCallback(() => {
    userLeaveMeeting();
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore Session is a global variable in Meteor
    Session.setItem('codeError', LOGOUT_CODE);
    toggleShouldNotify();
  }, []);
  return /*#__PURE__*/React.createElement(Styled.RecordingNotifyModal, {
    contentLabel: intl.formatMessage(intlMessages.title),
    shouldShowCloseButton: false,
    title: intl.formatMessage(intlMessages.title),
    isOpen,
    priority
  }, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.Description, null, intl.formatMessage(intlMessages.description)), /*#__PURE__*/React.createElement(Styled.Footer, null, /*#__PURE__*/React.createElement(Styled.NotifyButton, {
    color: "primary",
    label: intl.formatMessage(intlMessages.continue),
    onClick: closeModal,
    "aria-label": intl.formatMessage(intlMessages.continueAriaLabel)
  }), /*#__PURE__*/React.createElement(Styled.NotifyButton, {
    label: intl.formatMessage(intlMessages.leave),
    onClick: skipButtonHandle,
    "aria-label": intl.formatMessage(intlMessages.leaveAriaLabel)
  }))));
};
module.exportDefault(RecordingNotifyModal);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/nav-bar-graphql/recording-indicator/notify/styles.ts                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 1);
let ConfirmationModalStyles;
module.link("/imports/ui/components/common/modal/confirmation/styles", {
  default(v) {
    ConfirmationModalStyles = v;
  }
}, 2);
const RecordingNotifyModal = styled(ModalSimple)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const Container = styled(ConfirmationModalStyles.Container)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding: 3.625em 0 3.625em 0;\n"])));
const Description = styled(ConfirmationModalStyles.Description)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const Footer = styled(ConfirmationModalStyles.Footer)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([""])));
const NotifyButton = styled(ConfirmationModalStyles.ConfirmationButton)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""])));
module.exportDefault({
  RecordingNotifyModal,
  Container,
  Description,
  Footer,
  NotifyButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/nav-bar-graphql/recording-indicator/component.tsx                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback, useEffect, useMemo, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 1);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 2);
let GET_MEETING_RECORDING_DATA, GET_MEETING_RECORDING_POLICIES, meetingRecordingAssertion, meetingRecordingPoliciesAssertion;
module.link("./queries", {
  GET_MEETING_RECORDING_DATA(v) {
    GET_MEETING_RECORDING_DATA = v;
  },
  GET_MEETING_RECORDING_POLICIES(v) {
    GET_MEETING_RECORDING_POLICIES = v;
  },
  meetingRecordingAssertion(v) {
    meetingRecordingAssertion = v;
  },
  meetingRecordingPoliciesAssertion(v) {
    meetingRecordingPoliciesAssertion = v;
  }
}, 3);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 4);
let Tooltip;
module.link("/imports/ui/components/common/tooltip/component", {
  default(v) {
    Tooltip = v;
  }
}, 5);
let humanizeSeconds;
module.link("/imports/utils/humanizeSeconds", {
  default(v) {
    humanizeSeconds = v;
  }
}, 6);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 9);
let useTimeSync;
module.link("/imports/ui/core/local-states/useTimeSync", {
  default(v) {
    useTimeSync = v;
  }
}, 10);
let RecordingNotify;
module.link("./notify/component", {
  default(v) {
    RecordingNotify = v;
  }
}, 11);
let RecordingContainer;
module.link("/imports/ui/components/recording/container", {
  default(v) {
    RecordingContainer = v;
  }
}, 12);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 13);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 14);
const intlMessages = defineMessages({
  notificationRecordingStart: {
    id: 'app.notification.recordingStart',
    description: 'Notification for when the recording starts'
  },
  notificationRecordingStop: {
    id: 'app.notification.recordingStop',
    description: 'Notification for when the recording stops'
  },
  recordingAriaLabel: {
    id: 'app.notification.recordingAriaLabel',
    description: 'Notification for when the recording stops'
  },
  startTitle: {
    id: 'app.recording.startTitle',
    description: 'start recording title'
  },
  stopTitle: {
    id: 'app.recording.stopTitle',
    description: 'stop recording title'
  },
  resumeTitle: {
    id: 'app.recording.resumeTitle',
    description: 'resume recording title'
  },
  recordingIndicatorOn: {
    id: 'app.navBar.recording.on',
    description: 'label for indicator when the session is being recorded'
  },
  recordingIndicatorOff: {
    id: 'app.navBar.recording.off',
    description: 'label for indicator when the session is not being recorded'
  },
  emptyAudioBrdige: {
    id: 'app.navBar.emptyAudioBrdige',
    description: 'message for notification when recording starts with no users in audio bridge'
  },
  errorDescription: {
    id: 'app.recording.errorDescription',
    description: 'recording data error'
  },
  loadingDescription: {
    id: 'app.recording.loadingDescription',
    description: 'recording data is loading'
  },
  unavailableTitle: {
    id: 'app.navBar.recording.unavailable',
    description: 'recording data is either loading or failed to load'
  }
});
const RecordingIndicator = _ref => {
  let {
    isPhone,
    recording,
    micUser,
    serverTime,
    allowStartStopRecording,
    isModerator,
    record,
    recordingNotificationEnabled,
    hasError,
    isLoading
  } = _ref;
  const intl = useIntl();
  const [isRecordingModalOpen, setIsRecordingModalOpen] = useState(false);
  const [isRecordingNotifyModalOpen, setIsRecordingNotifyModalOpen] = useState(false);
  const [shouldNotify, setShouldNotify] = useState(true);
  const [time, setTime] = useState(0);
  const setIntervalRef = React.useRef();
  const disabled = hasError || isLoading;
  const recordingToggle = useCallback((hasMicUser, isRecording) => {
    if (!hasMicUser && !isRecording) {
      notify(intl.formatMessage(intlMessages.emptyAudioBrdige), 'error', 'warning');
    }
    setIsRecordingModalOpen(true);
    const focusedElement = document.activeElement;
    focusedElement.blur();
  }, []);
  useEffect(() => {
    if (recording) {
      setTime(serverTime);
      clearInterval(setIntervalRef.current);
      setIntervalRef.current = setInterval(() => {
        setTime(currentTime => currentTime + 1);
      }, 1000);
    }
    if (!recording) {
      clearInterval(setIntervalRef.current);
    }
    return () => {
      clearInterval(setIntervalRef.current);
    };
  }, [recording]);
  useEffect(() => {
    if (recordingNotificationEnabled && recording) {
      setShouldNotify(true);
    }
  }, [recordingNotificationEnabled, recording]);
  useEffect(() => {
    if (recordingNotificationEnabled) {
      // should only display notification modal when other modals are closed
      if (shouldNotify && recording) {
        setIsRecordingNotifyModalOpen(true);
      }
    }
  }, [shouldNotify, recordingNotificationEnabled, recording]);
  const recordTitle = useMemo(() => {
    if (isPhone) return '';
    if (disabled) return intl.formatMessage(intlMessages.unavailableTitle);
    if (!recording) {
      return time > 0 ? intl.formatMessage(intlMessages.resumeTitle) : intl.formatMessage(intlMessages.startTitle);
    }
    return intl.formatMessage(intlMessages.stopTitle);
  }, [recording, isPhone, disabled]);
  const recordingIndicatorIcon = useMemo(() => /*#__PURE__*/React.createElement(Styled.RecordingIndicatorIcon, {
    titleMargin: !isPhone || recording,
    "data-test": "mainWhiteboard"
  }, /*#__PURE__*/React.createElement("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    height: "100%",
    version: "1",
    viewBox: "0 0 20 20"
  }, /*#__PURE__*/React.createElement("g", {
    stroke: "#FFF",
    fill: "#FFF",
    strokeLinecap: "square"
  }, /*#__PURE__*/React.createElement("circle", {
    fill: "none",
    strokeWidth: "1",
    r: "9",
    cx: "10",
    cy: "10"
  }), /*#__PURE__*/React.createElement("circle", {
    stroke: "#FFF",
    fill: "#FFF",
    r: recording ? '5' : '4',
    cx: "10",
    cy: "10"
  })))), [isPhone, recording]);
  const title = useMemo(() => intl.formatMessage(recording ? intlMessages.recordingIndicatorOn : intlMessages.recordingIndicatorOff), [recording]);
  let recordMeetingButton = /*#__PURE__*/React.createElement(Styled.RecordingControl, {
    "aria-label": recordTitle,
    "aria-describedby": "recording-description",
    recording: recording // Removed the recording prop here
    ,
    disabled: disabled,
    tabIndex: 0,
    key: "recording-toggle",
    onClick: () => {
      recordingToggle(micUser, recording);
    },
    onKeyDown: () => {
      recordingToggle(micUser, recording);
    }
  }, recordingIndicatorIcon, /*#__PURE__*/React.createElement(Styled.PresentationTitle, null, /*#__PURE__*/React.createElement(Styled.VisuallyHidden, {
    id: "recording-description"
  }, "".concat(title, " ").concat(recording ? humanizeSeconds(time) : '')), recording ? /*#__PURE__*/React.createElement("span", {
    "aria-hidden": true
  }, humanizeSeconds(time)) : /*#__PURE__*/React.createElement("span", null, recordTitle)));
  const recordMeetingButtonWithTooltip = /*#__PURE__*/React.createElement(Tooltip, {
    title: intl.formatMessage(intlMessages.stopTitle)
  }, recordMeetingButton);
  if (disabled) {
    recordMeetingButton = /*#__PURE__*/React.createElement(Tooltip, {
      title: isLoading ? intl.formatMessage(intlMessages.loadingDescription) : intl.formatMessage(intlMessages.errorDescription)
    }, /*#__PURE__*/React.createElement("span", null, recordMeetingButton));
  }
  const recordingButton = recording ? recordMeetingButtonWithTooltip : recordMeetingButton;
  const showButton = isModerator && allowStartStopRecording;
  if (!record) return null;
  return /*#__PURE__*/React.createElement(React.Fragment, null, record ? /*#__PURE__*/React.createElement(Styled.PresentationTitleSeparator, {
    "aria-hidden": "true"
  }, "|") : null, /*#__PURE__*/React.createElement(Styled.RecordingIndicator, {
    "data-test": "recordingIndicator"
  }, showButton ? recordingButton : null, showButton ? null : /*#__PURE__*/React.createElement(Tooltip, {
    title: "".concat(intl.formatMessage(recording ? intlMessages.notificationRecordingStart : intlMessages.notificationRecordingStop))
  }, /*#__PURE__*/React.createElement(Styled.RecordingStatusViewOnly, {
    "aria-label": "".concat(intl.formatMessage(recording ? intlMessages.notificationRecordingStart : intlMessages.notificationRecordingStop)),
    recording: recording
  }, recordingIndicatorIcon, recording ? /*#__PURE__*/React.createElement(Styled.PresentationTitle, null, humanizeSeconds(time)) : null))), isRecordingNotifyModalOpen ? /*#__PURE__*/React.createElement(RecordingNotify, {
    toggleShouldNotify: () => {
      setShouldNotify(prev => !prev);
    },
    priority: "high",
    setIsOpen: setIsRecordingNotifyModalOpen,
    isOpen: isRecordingNotifyModalOpen,
    closeModal: () => {
      setIsRecordingNotifyModalOpen(false);
      setShouldNotify(false);
    }
  }) : null, isRecordingModalOpen ? /*#__PURE__*/React.createElement(RecordingContainer, {
    amIModerator: isModerator,
    onRequestClose: () => setIsRecordingModalOpen(false),
    priority: "high",
    setIsOpen: setIsRecordingModalOpen,
    isOpen: isRecordingModalOpen
  }) : null);
};
const RecordingIndicatorContainer = () => {
  var _meetingRecording$sta, _meetingRecording$pre, _meetingRecordingPoli, _meetingRecordingPoli2, _meetingRecordingPoli3, _meetingRecording$isR, _ref2, _ref3, _currentUser$isModera;
  const {
    isMobile
  } = deviceInfo;
  const {
    data: meetingRecordingPoliciesData,
    loading: meetingRecordingPoliciesLoading,
    error: meetingRecordingPoliciesError
  } = useDeduplicatedSubscription(GET_MEETING_RECORDING_POLICIES);
  const {
    data: meetingRecordingData,
    loading: meetingRecordingLoading,
    error: meetingRecordingError
  } = useDeduplicatedSubscription(GET_MEETING_RECORDING_DATA);
  const {
    data: currentUser
  } = useCurrentUser(user => ({
    userId: user.userId,
    isModerator: user.isModerator,
    voice: user.voice ? {
      joined: user.voice.joined,
      listenOnly: user.voice.listenOnly
    } : null
  }));
  const {
    data: currentMeeting
  } = useMeeting(meeting => ({
    meetingId: meeting.meetingId,
    notifyRecordingIsOn: meeting.notifyRecordingIsOn
  }));
  const [timeSync] = useTimeSync();
  if (meetingRecordingPoliciesError) {
    logger.error({
      logCode: 'meeting_recordingPolicies_sub_error',
      extraInfo: {
        errorName: meetingRecordingPoliciesError.name,
        errorMessage: meetingRecordingPoliciesError.message
      }
    }, 'Meeting recording policies subscription failed.');
  }
  if (meetingRecordingError) {
    logger.error({
      logCode: 'meeting_recording_sub_error',
      extraInfo: {
        errorName: meetingRecordingError.name,
        errorMessage: meetingRecordingError.message
      }
    }, 'Meeting recording subscription failed.');
  }
  const meetingRecordingPolicies = (meetingRecordingPoliciesData === null || meetingRecordingPoliciesData === void 0 ? void 0 : meetingRecordingPoliciesData.meeting_recordingPolicies[0]) || {
    allowStartStopRecording: false,
    autoStartRecording: false,
    record: false,
    keepEvents: false,
    startedAt: null,
    startedBy: null,
    stoppedAt: null,
    stoppedBy: null
  };
  meetingRecordingPoliciesAssertion(meetingRecordingPolicies);
  const meetingRecording = (meetingRecordingData === null || meetingRecordingData === void 0 ? void 0 : meetingRecordingData.meeting_recording[0]) || {
    isRecording: false,
    previousRecordedTimeInSeconds: 0,
    startedAt: '',
    startedBy: ''
  };
  meetingRecordingAssertion(meetingRecording);
  const currentDate = new Date();
  const startedAt = new Date((_meetingRecording$sta = meetingRecording === null || meetingRecording === void 0 ? void 0 : meetingRecording.startedAt) !== null && _meetingRecording$sta !== void 0 ? _meetingRecording$sta : '');
  const adjustedCurrent = new Date(currentDate.getTime() + timeSync);
  const timeDifferenceMs = adjustedCurrent.getTime() - startedAt.getTime();
  const totalPassedTime = timeDifferenceMs / 1000 + ((_meetingRecording$pre = meetingRecording === null || meetingRecording === void 0 ? void 0 : meetingRecording.previousRecordedTimeInSeconds) !== null && _meetingRecording$pre !== void 0 ? _meetingRecording$pre : 0);
  const passedTime = Math.floor(totalPassedTime);
  return /*#__PURE__*/React.createElement(RecordingIndicator, {
    allowStartStopRecording: (_meetingRecordingPoli = meetingRecordingPolicies === null || meetingRecordingPolicies === void 0 ? void 0 : meetingRecordingPolicies.allowStartStopRecording) !== null && _meetingRecordingPoli !== void 0 ? _meetingRecordingPoli : false,
    autoStartRecording: (_meetingRecordingPoli2 = meetingRecordingPolicies === null || meetingRecordingPolicies === void 0 ? void 0 : meetingRecordingPolicies.autoStartRecording) !== null && _meetingRecordingPoli2 !== void 0 ? _meetingRecordingPoli2 : false,
    record: (_meetingRecordingPoli3 = meetingRecordingPolicies === null || meetingRecordingPolicies === void 0 ? void 0 : meetingRecordingPolicies.record) !== null && _meetingRecordingPoli3 !== void 0 ? _meetingRecordingPoli3 : false,
    recording: (_meetingRecording$isR = meetingRecording === null || meetingRecording === void 0 ? void 0 : meetingRecording.isRecording) !== null && _meetingRecording$isR !== void 0 ? _meetingRecording$isR : false,
    micUser: (_ref2 = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.voice) && !(currentUser !== null && currentUser !== void 0 && currentUser.voice.listenOnly)) !== null && _ref2 !== void 0 ? _ref2 : false,
    isPhone: isMobile,
    recordingNotificationEnabled: (_ref3 = (meetingRecording === null || meetingRecording === void 0 ? void 0 : meetingRecording.startedBy) !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId) && (currentMeeting === null || currentMeeting === void 0 ? void 0 : currentMeeting.notifyRecordingIsOn)) !== null && _ref3 !== void 0 ? _ref3 : false,
    serverTime: passedTime > 0 ? passedTime : 0,
    isModerator: (_currentUser$isModera = currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator) !== null && _currentUser$isModera !== void 0 ? _currentUser$isModera : false,
    hasError: Boolean(meetingRecordingPoliciesError || meetingRecordingError),
    isLoading: meetingRecordingPoliciesLoading || meetingRecordingLoading
  });
};
module.exportDefault(RecordingIndicatorContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/nav-bar-graphql/recording-indicator/queries.ts                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  meetingRecordingAssertion: () => meetingRecordingAssertion,
  meetingRecordingPoliciesAssertion: () => meetingRecordingPoliciesAssertion,
  GET_MEETING_RECORDING_POLICIES: () => GET_MEETING_RECORDING_POLICIES,
  GET_MEETING_RECORDING_DATA: () => GET_MEETING_RECORDING_DATA
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
function meetingRecordingAssertion(meetingRecording) {
  if (!meetingRecording) {
    throw new Error('meetingRecording is undefined');
  }
  if (typeof meetingRecording !== 'object') {
    throw new Error('meetingRecording is not an object');
  }
  if (typeof meetingRecording.isRecording !== 'boolean') {
    throw new Error('meetingRecording.isRecording is not a boolean');
  }
  if (typeof meetingRecording.startedBy !== 'string') {
    throw new Error('meetingRecording.startedBy is not a string');
  }
  if (typeof meetingRecording.previousRecordedTimeInSeconds !== 'number') {
    throw new Error('meetingRecording.previousRecordedTimeInSeconds is not a number');
  }
  if (typeof meetingRecording.startedAt !== 'string') {
    throw new Error('meetingRecording.startedAt is not a Date');
  }
}
function meetingRecordingPoliciesAssertion(meetingRecordingPolicies) {
  if (!meetingRecordingPolicies) {
    throw new Error('meetingRecordingPolicies is undefined');
  }
  if (typeof meetingRecordingPolicies !== 'object') {
    throw new Error('meetingRecordingPolicies is not an object');
  }
  if (typeof meetingRecordingPolicies.allowStartStopRecording !== 'boolean') {
    throw new Error('meetingRecordingPolicies.allowStartStopRecording is not a boolean');
  }
  if (typeof meetingRecordingPolicies.autoStartRecording !== 'boolean') {
    throw new Error('meetingRecordingPolicies.autoStartRecording is not a boolean');
  }
  if (typeof meetingRecordingPolicies.record !== 'boolean') {
    throw new Error('meetingRecordingPolicies.record is not a boolean');
  }
}
const GET_MEETING_RECORDING_POLICIES = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription getMeetingRecordingPolicies {\n    meeting_recordingPolicies {\n      allowStartStopRecording\n      autoStartRecording\n      record\n    }\n  }\n"])));
const GET_MEETING_RECORDING_DATA = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  subscription getMeetingRecordingData {\n    meeting_recording {\n      isRecording\n      startedAt\n      startedBy\n      previousRecordedTimeInSeconds\n    }\n  }\n"])));
module.exportDefault({
  GET_MEETING_RECORDING_POLICIES,
  GET_MEETING_RECORDING_DATA
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/nav-bar-graphql/recording-indicator/styles.ts                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  }
}, 0);
let fontSizeLarge, fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarge(v) {
    fontSizeLarge = v;
  },
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 1);
let smPaddingX, borderSize, borderSizeLarge, borderSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  },
  borderSizeSmall(v) {
    borderSizeSmall = v;
  }
}, 2);
let colorWhite, colorPrimary, colorDangerDark, colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorDangerDark(v) {
    colorDangerDark = v;
  },
  colorGray(v) {
    colorGray = v;
  }
}, 3);
const RecordingIndicatorIcon = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  width: ", ";\n  height: ", ";\n  font-size: ", ";\n  user-select: none;\n\n  ", "\n"])), fontSizeLarge, fontSizeLarge, fontSizeBase, _ref => {
  let {
    titleMargin
  } = _ref;
  return titleMargin && "\n    [dir=\"ltr\"] & {\n      margin-right: ".concat(smPaddingX, ";\n    }\n  ");
});
const RecordingControl = styled.button(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  user-select: none;\n  background: none;\n\n  span {\n    border: none;\n    box-shadow: none;\n    background-color: transparent !important;\n    color: ", " !important;\n  }\n\n  &:hover:not(:disabled) {\n    color: ", " !important;\n    cursor: pointer;\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 ", " ", ";\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n"])), colorWhite, colorWhite, borderSize, colorPrimary, _ref2 => {
  let {
    recording
  } = _ref2;
  return recording && "\n    padding: 5px;\n    background-color: ".concat(colorDangerDark, ";\n    border: ").concat(borderSizeLarge, " solid ").concat(colorDangerDark, ";\n    border-radius: 10px;\n\n    &:focus {\n      background-clip: padding-box;\n      border: ").concat(borderSizeLarge, " solid transparent;\n    }\n  ");
}, _ref3 => {
  let {
    recording
  } = _ref3;
  return !recording && "\n    padding: 7px;\n    border: ".concat(borderSizeSmall, " solid ").concat(colorWhite, ";\n    border-radius: 2em 2em;\n\n    &:focus {\n      padding: 5px;\n      border: ").concat(borderSizeLarge, " solid ").concat(colorWhite, ";\n      box-shadow: none;\n    }\n  ");
}, _ref4 => {
  let {
    disabled
  } = _ref4;
  return disabled && css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    cursor: not-allowed;\n    opacity: .5;\n  "])));
});
const PresentationTitle = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  font-weight: 400;\n  color: ", ";\n  font-size: ", ";\n  padding: 0;\n  margin-right: 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 30vw;\n\n  [dir='rtl'] & {\n    margin-left: 0;\n    margin-right: ", ";\n  }\n\n  & > [class^='icon-bbb-'] {\n    font-size: 75%;\n  }\n\n  span {\n    vertical-align: middle;\n  }\n"])), colorWhite, fontSizeBase, smPaddingX);
const VisuallyHidden = styled.span(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  width: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n"])));
const PresentationTitleSeparator = styled.span(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: ", ";\n  margin: 0 1rem;\n"])), colorGray, fontSizeBase);
const RecordingIndicator = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  &:hover {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n\n  &:active,\n  &:focus,\n  &:focus-within {\n    outline: transparent;\n    outline-width: ", ";\n    outline-style: solid;\n  }\n"])), borderSize, borderSize);
const RecordingStatusViewOnly = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  display: flex;\n\n  ", "\n"])), _ref5 => {
  let {
    recording
  } = _ref5;
  return recording && "\n    padding: 5px;\n    background-color: ".concat(colorDangerDark, ";\n    border: ").concat(borderSizeLarge, " solid ").concat(colorDangerDark, ";\n    border-radius: 10px;\n  ");
});
module.exportDefault({
  RecordingIndicatorIcon,
  RecordingControl,
  PresentationTitle,
  VisuallyHidden,
  PresentationTitleSeparator,
  RecordingIndicator,
  RecordingStatusViewOnly
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"talking-indicator":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/nav-bar-graphql/talking-indicator/component.tsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["user"];
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React, useEffect, useMemo;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let MEETING_ISBREAKOUT_SUBSCRIPTION;
module.link("./queries", {
  MEETING_ISBREAKOUT_SUBSCRIPTION(v) {
    MEETING_ISBREAKOUT_SUBSCRIPTION = v;
  }
}, 2);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 5);
let muteUser;
module.link("./service", {
  muteUser(v) {
    muteUser = v;
  }
}, 6);
let useToggleVoice;
module.link("../../../audio/audio-graphql/hooks/useToggleVoice", {
  default(v) {
    useToggleVoice = v;
  }
}, 7);
let setTalkingIndicatorList;
module.link("/imports/ui/core/hooks/useTalkingIndicator", {
  setTalkingIndicatorList(v) {
    setTalkingIndicatorList = v;
  }
}, 8);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 9);
let useTalkingUsers;
module.link("/imports/ui/core/hooks/useTalkingUsers", {
  default(v) {
    useTalkingUsers = v;
  }
}, 10);
let partition;
module.link("/imports/utils/array-utils", {
  partition(v) {
    partition = v;
  }
}, 11);
const TALKING_INDICATORS_MAX = 8;
const intlMessages = defineMessages({
  wasTalking: {
    id: 'app.talkingIndicator.wasTalking',
    description: 'aria label for user who is not talking but still visible'
  },
  isTalking: {
    id: 'app.talkingIndicator.isTalking',
    description: 'aria label for user currently talking'
  },
  moreThanMaxIndicatorsTalking: {
    id: 'app.talkingIndicator.moreThanMaxIndicatorsTalking',
    description: 'aria label for more than max indicators talking'
  },
  moreThanMaxIndicatorsWereTalking: {
    id: 'app.talkingIndicator.moreThanMaxIndicatorsWereTalking',
    description: 'aria label for more than max indicators were talking'
  },
  muteLabel: {
    id: 'app.actionsBar.muteLabel',
    description: 'Label for mute action'
  },
  ariaMuteDesc: {
    id: 'app.talkingIndicator.ariaMuteDesc',
    description: 'Desc for mute action'
  }
});
const TalkingIndicator = _ref => {
  let {
    talkingUsers,
    isBreakout,
    moreThanMaxIndicators,
    isModerator,
    toggleVoice
  } = _ref;
  const intl = useIntl();
  useEffect(() => {
    // component will unmount
    return () => {
      setTalkingIndicatorList([]);
    };
  }, []);
  const filteredTalkingUsers = talkingUsers.map(talkingUser => {
    const {
      talking,
      muted,
      user: {
        color,
        speechLocale,
        name
      },
      userId
    } = talkingUser;
    return {
      talking,
      muted,
      color,
      speechLocale,
      name,
      userId
    };
  });
  const talkingElements = useMemo(() => filteredTalkingUsers.map(talkingUser => {
    const {
      talking,
      muted,
      color,
      speechLocale,
      name,
      userId
    } = talkingUser;
    const ariaLabel = intl.formatMessage(talking ? intlMessages.isTalking : intlMessages.wasTalking, {
      0: name
    });
    let icon = talking ? 'unmute' : 'blank';
    icon = muted ? 'mute' : icon;
    return /*#__PURE__*/React.createElement(Styled.TalkingIndicatorWrapper, {
      key: userId,
      talking: talking,
      muted: muted
    }, speechLocale && /*#__PURE__*/React.createElement(Styled.CCIcon, {
      iconName: muted ? 'closed_caption_stop' : 'closed_caption',
      muted: muted,
      talking: talking
    }), /*#__PURE__*/React.createElement(Styled.TalkingIndicatorButton, {
      $spoke: !talking || undefined,
      $muted: muted || undefined,
      $isViewer: !isModerator || undefined,
      key: userId,
      onClick: () => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore - call signature is misse due the function being wrapped
        muteUser(userId, muted, isBreakout, isModerator, toggleVoice);
      },
      label: name,
      tooltipLabel: !muted && isModerator ? "".concat(intl.formatMessage(intlMessages.muteLabel), " ").concat(name) : null,
      "data-test": talking ? 'isTalking' : 'wasTalking',
      "aria-label": ariaLabel,
      "aria-describedby": talking ? 'description' : null,
      color: "primary",
      icon: icon,
      size: "lg",
      style: {
        backgroundColor: color,
        border: "solid 2px ".concat(color)
      }
    }, talking ? /*#__PURE__*/React.createElement(Styled.Hidden, {
      id: "description"
    }, "".concat(intl.formatMessage(intlMessages.ariaMuteDesc))) : null));
  }), [filteredTalkingUsers]);
  const maxIndicator = () => {
    if (!moreThanMaxIndicators) return null;
    const nobodyTalking = filteredTalkingUsers.every(user => !user.talking);
    const {
      moreThanMaxIndicatorsTalking,
      moreThanMaxIndicatorsWereTalking
    } = intlMessages;
    const ariaLabel = intl.formatMessage(nobodyTalking ? moreThanMaxIndicatorsWereTalking : moreThanMaxIndicatorsTalking, {
      0: filteredTalkingUsers.length
    });
    return /*#__PURE__*/React.createElement(Styled.TalkingIndicatorButton, {
      $spoke: nobodyTalking,
      $muted: false,
      $isViewer: false,
      key: uniqueId('_has__More_'),
      onClick: () => {} // maybe add a dropdown to show the rest of the users
      ,
      label: "...",
      tooltipLabel: ariaLabel,
      "aria-label": ariaLabel,
      color: "primary",
      size: "sm",
      style: {
        backgroundColor: '#4a148c',
        border: 'solid 2px #4a148c',
        cursor: 'default'
      }
    });
  };
  return /*#__PURE__*/React.createElement(Styled.IsTalkingWrapper, {
    "data-test": "talkingIndicator"
  }, /*#__PURE__*/React.createElement(Styled.Speaking, null, talkingElements, maxIndicator()));
};
const TalkingIndicatorContainer = (() => {
  return () => {
    var _isBreakoutData$meeti, _isBreakoutData$meeti2, _currentUser$isModera;
    const {
      data: currentUser
    } = useCurrentUser(u => ({
      userId: u === null || u === void 0 ? void 0 : u.userId,
      isModerator: u === null || u === void 0 ? void 0 : u.isModerator
    }));
    const {
      data: isBreakoutData,
      loading: isBreakoutLoading,
      error: isBreakoutError
    } = useDeduplicatedSubscription(MEETING_ISBREAKOUT_SUBSCRIPTION);
    const toggleVoice = useToggleVoice();
    const {
      data: talkingUsersData,
      loading: talkingUsersLoading
    } = useTalkingUsers();
    const talkingUsers = useMemo(() => {
      const [muted, unmuted] = partition(Object.values(talkingUsersData), v => v.muted);
      const [talking, silent] = partition(unmuted, v => v.talking);
      return [...talking.sort((v1, v2) => {
        if (!v1.startTime && !v2.startTime) return 0;
        if (!v1.startTime) return 1;
        if (!v2.startTime) return -1;
        return v1.startTime - v2.startTime;
      }), ...silent.sort((v1, v2) => {
        if (!v1.endTime && !v2.endTime) return 0;
        if (!v1.endTime) return 1;
        if (!v2.endTime) return -1;
        return v2.endTime - v1.endTime;
      }), ...muted.sort((v1, v2) => {
        if (!v1.endTime && !v2.endTime) return 0;
        if (!v1.endTime) return 1;
        if (!v2.endTime) return -1;
        return v2.endTime - v1.endTime;
      })].slice(0, TALKING_INDICATORS_MAX);
    }, [talkingUsersData]);
    if (talkingUsersLoading || isBreakoutLoading) return null;
    if (isBreakoutError) {
      return /*#__PURE__*/React.createElement("div", null, "error:", JSON.stringify(isBreakoutError));
    }
    const isBreakout = (_isBreakoutData$meeti = isBreakoutData === null || isBreakoutData === void 0 ? void 0 : (_isBreakoutData$meeti2 = isBreakoutData.meeting[0]) === null || _isBreakoutData$meeti2 === void 0 ? void 0 : _isBreakoutData$meeti2.isBreakout) !== null && _isBreakoutData$meeti !== void 0 ? _isBreakoutData$meeti : false;
    setTalkingIndicatorList(talkingUsers.map(_ref2 => {
      let {
          user
        } = _ref2,
        rest = _objectWithoutProperties(_ref2, _excluded);
      return _objectSpread(_objectSpread({}, rest), user);
    }));
    return /*#__PURE__*/React.createElement(TalkingIndicator, {
      talkingUsers: talkingUsers,
      isBreakout: isBreakout,
      moreThanMaxIndicators: talkingUsers.length >= TALKING_INDICATORS_MAX,
      isModerator: (_currentUser$isModera = currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator) !== null && _currentUser$isModera !== void 0 ? _currentUser$isModera : false,
      toggleVoice: toggleVoice
    });
  };
})();
module.exportDefault(TalkingIndicatorContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/nav-bar-graphql/talking-indicator/queries.ts                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  MEETING_ISBREAKOUT_SUBSCRIPTION: () => MEETING_ISBREAKOUT_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const MEETING_ISBREAKOUT_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription getIsBreakout {\n    meeting {\n      meetingId\n      isBreakout\n    }\n  }\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/nav-bar-graphql/talking-indicator/service.ts                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  muteUser: () => muteUser
});
let debounce;
module.link("radash", {
  debounce(v) {
    debounce = v;
  }
}, 0);
const TALKING_INDICATOR_MUTE_INTERVAL = 500;
const muteUser = debounce({
  delay: TALKING_INDICATOR_MUTE_INTERVAL
}, (id, muted, isBreakout, isModerator, toggleVoice) => {
  if (!isModerator || isBreakout || muted) return null;
  toggleVoice(id, true);
  return null;
});
module.exportDefault({
  muteUser
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/nav-bar-graphql/talking-indicator/styles.ts                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let borderSize, borderRadius, talkerBorderRadius, talkerPaddingXsm, talkerPaddingLg, talkerMaxWidth, talkerMarginSm, spokeOpacity, talkerPaddingXl;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  talkerBorderRadius(v) {
    talkerBorderRadius = v;
  },
  talkerPaddingXsm(v) {
    talkerPaddingXsm = v;
  },
  talkerPaddingLg(v) {
    talkerPaddingLg = v;
  },
  talkerMaxWidth(v) {
    talkerMaxWidth = v;
  },
  talkerMarginSm(v) {
    talkerMarginSm = v;
  },
  spokeOpacity(v) {
    spokeOpacity = v;
  },
  talkerPaddingXl(v) {
    talkerPaddingXl = v;
  }
}, 1);
let colorWhite, colorSuccess, colorDanger, colorBackground;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorBackground(v) {
    colorBackground = v;
  }
}, 2);
let fontSizeBase, talkerFontWeight, fontSizeXS, fontSizeSmaller, fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  talkerFontWeight(v) {
    talkerFontWeight = v;
  },
  fontSizeXS(v) {
    fontSizeXS = v;
  },
  fontSizeSmaller(v) {
    fontSizeSmaller = v;
  },
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 3);
let phoneLandscape;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  phoneLandscape(v) {
    phoneLandscape = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 6);
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore - as button comes from JS, we can't provide its props
const TalkingIndicatorButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n\n  outline: transparent;\n  outline-style: dotted;\n  outline-width: ", ";\n\n  flex: 0 0 auto;\n  color: ", ";\n  font-weight: ", ";\n  border-radius: ", " ", ";\n  font-size: ", ";\n  padding: ", " ", " ", " ", ";\n  box-shadow: none !important;\n\n  @media ", " {\n    height: 1rem;\n  }\n\n  i,\n  span {\n    position: relative;\n  }\n\n  span {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    margin: 0 0 0 0 !important;\n    max-width: ", ";\n\n    @media ", " {\n      font-size: ", ";\n    }\n\n    [dir='rtl'] & {\n      margin-left: ", ";\n    }\n  }\n\n  i {\n    font-size: ", ";\n    width: 1rem;\n    height: 1rem;\n    line-height: 1rem;\n    background-color: ", ";\n    border-radius: 50%;\n    position: relative;\n    right: ", ";\n\n    @media ", " {\n      height: ", ";\n      width: ", ";\n      font-size: ", ";\n    }\n\n    [dir='rtl'] & {\n      right: calc(", " * -1);\n    }\n  }\n\n  span:hover {\n    opacity: 1;\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n"])), borderSize, colorWhite, talkerFontWeight, talkerBorderRadius, talkerBorderRadius, fontSizeBase, talkerPaddingXsm, talkerPaddingLg, talkerPaddingXsm, talkerPaddingLg, phoneLandscape, talkerMaxWidth, phoneLandscape, fontSizeXS, talkerMarginSm, fontSizeSmaller, colorSuccess, talkerMarginSm, phoneLandscape, talkerMarginSm, talkerMarginSm, fontSizeXS, talkerMarginSm, _ref => {
  let {
    $spoke
  } = _ref;
  return $spoke && "\n    opacity: ".concat(spokeOpacity, ";\n\n    [dir=\"rtl\"]  & {\n      padding-right: ").concat(talkerPaddingLg, "\n    }\n  ");
}, _ref2 => {
  let {
    $muted
  } = _ref2;
  return $muted && "\n    cursor: default;\n\n    i {\n      background-color: ".concat(colorDanger, ";\n    }\n  ");
}, _ref3 => {
  let {
    $isViewer
  } = _ref3;
  return $isViewer && "\n    cursor: default;\n  ";
});
const CCIcon = styled(Icon)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  align-self: center;\n  color: ", ";\n  margin: 0 ", ";\n  font-size: calc(", " * 0.85);\n  opacity: ", ";\n"])), colorWhite, borderRadius, fontSizeSmall, _ref4 => {
  let {
    muted,
    talking
  } = _ref4;
  return (muted || !talking) && "".concat(spokeOpacity, ";") || '1;';
});
const TalkingIndicatorWrapper = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  border-radius: ", " ", ";\n  display: flex;\n  margin: 0 ", ";\n  opacity: ", ";\n  background: ", ";\n"])), talkerBorderRadius, talkerBorderRadius, borderRadius, _ref5 => {
  let {
    muted,
    talking
  } = _ref5;
  return (muted || !talking) && "".concat(spokeOpacity, ";") || '1;';
}, _ref6 => {
  let {
    talking
  } = _ref6;
  return talking ? "".concat(colorSuccess) : "".concat(colorBackground, ";");
});
const Hidden = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: none;\n"])));
const IsTalkingWrapper = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  overflow: hidden;\n  margin-top: 0.5rem;\n"])));
const Speaking = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n  overflow-y: hidden;\n  max-height: ", ";\n  scrollbar-width: 0; // firefox\n  scrollbar-color: transparent;\n\n  &::-webkit-scrollbar {\n    width: 0px;\n    height: 0px;\n    background: transparent;\n  }\n"])), talkerPaddingXl);
module.exportDefault({
  TalkingIndicatorButton,
  TalkingIndicatorWrapper,
  CCIcon,
  Hidden,
  IsTalkingWrapper,
  Speaking
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"leave-meeting-button":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/leave-meeting-button/component.jsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let EndMeetingConfirmationContainer;
module.link("/imports/ui/components/end-meeting-confirmation/container", {
  default(v) {
    EndMeetingConfirmationContainer = v;
  }
}, 3);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 4);
let colorDanger, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorDanger(v) {
    colorDanger = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 5);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 6);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 7);
const intlMessages = defineMessages({
  leaveMeetingBtnLabel: {
    id: 'app.navBar.leaveMeetingBtnLabel',
    description: 'Leave meeting button label'
  },
  leaveMeetingBtnDesc: {
    id: 'app.navBar.leaveMeetingBtnDesc',
    description: 'Describes the leave meeting button'
  },
  leaveSessionLabel: {
    id: 'app.navBar.optionsDropdown.leaveSessionLabel',
    description: 'Leave session button label'
  },
  leaveSessionDesc: {
    id: 'app.navBar.optionsDropdown.leaveSessionDesc',
    description: 'Describes leave session option'
  },
  endMeetingLabel: {
    id: 'app.navBar.optionsDropdown.endMeetingForAllLabel',
    description: 'End meeting button label'
  },
  endMeetingDesc: {
    id: 'app.navBar.optionsDropdown.endMeetingDesc',
    description: 'Describes settings option closing the current meeting'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  amIModerator: PropTypes.bool,
  isBreakoutRoom: PropTypes.bool,
  connected: PropTypes.bool.isRequired,
  isDropdownOpen: PropTypes.bool,
  isMobile: PropTypes.bool.isRequired,
  userLeaveMeeting: PropTypes.func.isRequired
};
const defaultProps = {
  amIModerator: false,
  isBreakoutRoom: false,
  isDropdownOpen: false
};
class LeaveMeetingButton extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      isEndMeetingConfirmationModalOpen: false
    };

    // Set the logout code to 680 because it's not a real code and can be matched on the other side
    this.LOGOUT_CODE = '680';
    this.setEndMeetingConfirmationModalIsOpen = this.setEndMeetingConfirmationModalIsOpen.bind(this);
    this.leaveSession = this.leaveSession.bind(this);
  }
  setEndMeetingConfirmationModalIsOpen(value) {
    this.setState({
      isEndMeetingConfirmationModalOpen: value
    });
  }
  leaveSession() {
    const {
      userLeaveMeeting
    } = this.props;
    userLeaveMeeting();
    // we don't check askForFeedbackOnLogout here,
    // it is checked in meeting-ended component
    Session.setItem('codeError', this.LOGOUT_CODE);
  }
  renderMenuItems() {
    const {
      intl,
      amIModerator,
      isBreakoutRoom,
      connected
    } = this.props;
    const allowedToEndMeeting = amIModerator && !isBreakoutRoom;
    const {
      allowLogout: allowLogoutSetting
    } = window.meetingClientSettings.public.app;
    this.menuItems = [];
    if (allowLogoutSetting && connected) {
      this.menuItems.push({
        key: 'list-item-logout',
        dataTest: 'directLogoutButton',
        icon: 'logout',
        label: intl.formatMessage(intlMessages.leaveSessionLabel),
        description: intl.formatMessage(intlMessages.leaveSessionDesc),
        onClick: () => this.leaveSession()
      });
    }
    if (allowedToEndMeeting && connected) {
      const customStyles = {
        background: colorDanger,
        color: colorWhite
      };
      this.menuItems.push({
        key: 'list-item-end-meeting',
        dataTest: 'endMeetingButton',
        icon: 'close',
        label: intl.formatMessage(intlMessages.endMeetingLabel),
        description: intl.formatMessage(intlMessages.endMeetingDesc),
        customStyles,
        onClick: () => this.setEndMeetingConfirmationModalIsOpen(true)
      });
    }
    return this.menuItems;
  }

  // eslint-disable-next-line class-methods-use-this
  renderModal(isOpen, setIsOpen, priority, Component, otherOptions) {
    return isOpen ? /*#__PURE__*/React.createElement(Component, _objectSpread(_objectSpread({}, otherOptions), {}, {
      onRequestClose: () => setIsOpen(false),
      priority,
      setIsOpen,
      isOpen
    })) : null;
  }
  render() {
    const {
      intl,
      isDropdownOpen,
      isMobile,
      isRTL
    } = this.props;
    const {
      isEndMeetingConfirmationModalOpen
    } = this.state;
    const customStyles = {
      top: '1rem'
    };
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BBBMenu, {
      customStyles: !isMobile ? customStyles : null,
      trigger: /*#__PURE__*/React.createElement(Styled.LeaveButton, {
        state: isDropdownOpen ? 'open' : 'closed',
        isMobile: isMobile,
        "aria-label": intl.formatMessage(intlMessages.leaveMeetingBtnLabel),
        label: intl.formatMessage(intlMessages.leaveMeetingBtnLabel),
        tooltipLabel: intl.formatMessage(intlMessages.leaveMeetingBtnLabel),
        description: intl.formatMessage(intlMessages.leaveMeetingBtnDesc),
        "data-test": "leaveMeetingDropdown",
        icon: "logout",
        color: "danger",
        size: "lg",
        hideLabel: true
        // FIXME: Without onClick react proptypes keep warning
        // even after the DropdownTrigger inject an onClick handler
        ,
        onClick: () => null
      }),
      actions: this.renderMenuItems(),
      opts: {
        id: 'app-leave-meeting-menu',
        keepMounted: true,
        transitionDuration: 0,
        elevation: 3,
        getcontentanchorel: null,
        fullwidth: 'true',
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: isRTL ? 'left' : 'right'
        },
        transformorigin: {
          vertical: 'top',
          horizontal: isRTL ? 'left' : 'right'
        }
      }
    }), this.renderModal(isEndMeetingConfirmationModalOpen, this.setEndMeetingConfirmationModalIsOpen, 'low', EndMeetingConfirmationContainer));
  }
}
LeaveMeetingButton.propTypes = propTypes;
LeaveMeetingButton.defaultProps = defaultProps;
module.exportDefault(injectIntl(LeaveMeetingButton));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/leave-meeting-button/container.jsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation, useReactiveVar;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
let LeaveMeetingButton;
module.link("./component", {
  default(v) {
    LeaveMeetingButton = v;
  }
}, 2);
let layoutSelectInput, layoutSelect;
module.link("../../layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 3);
let SMALL_VIEWPORT_BREAKPOINT;
module.link("../../layout/enums", {
  SMALL_VIEWPORT_BREAKPOINT(v) {
    SMALL_VIEWPORT_BREAKPOINT = v;
  }
}, 4);
let USER_LEAVE_MEETING;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  USER_LEAVE_MEETING(v) {
    USER_LEAVE_MEETING = v;
  }
}, 5);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 6);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 7);
let connectionStatus;
module.link("/imports/ui/core/graphql/singletons/connectionStatus", {
  default(v) {
    connectionStatus = v;
  }
}, 8);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 9);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 10);
const LeaveMeetingButtonContainer = props => {
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    isModerator: u.isModerator
  }));
  const {
    data: meeting
  } = useMeeting(m => ({
    isBreakout: m.isBreakout
  }));
  const {
    isMobile
  } = deviceInfo;
  const isRTL = layoutSelect(i => i.isRTL);
  const [userLeaveMeeting] = useMutation(USER_LEAVE_MEETING);
  const isDropdownOpen = useStorageKey('dropdownOpen');
  const connected = useReactiveVar(connectionStatus.getConnectedStatusVar());
  const amIModerator = currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator;
  const isBreakoutRoom = meeting === null || meeting === void 0 ? void 0 : meeting.isBreakout;
  return /*#__PURE__*/React.createElement(LeaveMeetingButton, _objectSpread({
    isMobile,
    isRTL,
    userLeaveMeeting,
    isDropdownOpen,
    amIModerator,
    connected,
    isBreakoutRoom
  }, props));
};
module.exportDefault(LeaveMeetingButtonContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/leave-meeting-button/styles.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 1);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 2);
const LeaveButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n\n  ", "\n"])), _ref => {
  let {
    state
  } = _ref;
  return state === 'open' && "\n    @media ".concat(smallOnly, " {\n      display: none;\n    }\n  ");
}, _ref2 => {
  let {
    state,
    isMobile
  } = _ref2;
  return state === 'closed' && !isMobile && "\n    margin-left: 1.0rem;\n    margin-right: 0.5rem;\n  ";
}, _ref3 => {
  let {
    state
  } = _ref3;
  return state === 'closed' && "\n    border-radius: 1.1rem;\n    font-size: 1rem;\n    line-height: 1.1rem;\n    font-weight: 400;\n    z-index: 3;\n  ";
});
module.exportDefault({
  LeaveButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"options-dropdown":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/options-dropdown/component.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let EndMeetingConfirmationContainer;
module.link("/imports/ui/components/end-meeting-confirmation/container", {
  default(v) {
    EndMeetingConfirmationContainer = v;
  }
}, 3);
let AboutContainer;
module.link("/imports/ui/components/about/container", {
  default(v) {
    AboutContainer = v;
  }
}, 4);
let MobileAppModal;
module.link("/imports/ui/components/mobile-app-modal/mobile-app-modal-graphql/component", {
  default(v) {
    MobileAppModal = v;
  }
}, 5);
let LayoutModalContainer;
module.link("/imports/ui/components/layout/modal/container", {
  default(v) {
    LayoutModalContainer = v;
  }
}, 6);
let OptionsMenuContainer;
module.link("/imports/ui/components/settings/container", {
  default(v) {
    OptionsMenuContainer = v;
  }
}, 7);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 8);
let ShortcutHelpComponent;
module.link("/imports/ui/components/shortcut-help/component", {
  default(v) {
    ShortcutHelpComponent = v;
  }
}, 9);
let FullscreenService;
module.link("/imports/ui/components/common/fullscreen-button/service", {
  default(v) {
    FullscreenService = v;
  }
}, 10);
let colorDanger, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorDanger(v) {
    colorDanger = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 11);
let OptionsDropdownItemType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/options-dropdown-item/enums", {
  OptionsDropdownItemType(v) {
    OptionsDropdownItemType = v;
  }
}, 12);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 13);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 14);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 15);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 16);
let LAYOUT_TYPE;
module.link("/imports/ui/components/layout/enums", {
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  }
}, 17);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 18);
const intlMessages = defineMessages({
  optionsLabel: {
    id: 'app.navBar.optionsDropdown.optionsLabel',
    description: 'Options button label'
  },
  fullscreenLabel: {
    id: 'app.navBar.optionsDropdown.fullscreenLabel',
    description: 'Make fullscreen option label'
  },
  settingsLabel: {
    id: 'app.navBar.optionsDropdown.settingsLabel',
    description: 'Open settings option label'
  },
  aboutLabel: {
    id: 'app.navBar.optionsDropdown.aboutLabel',
    description: 'About option label'
  },
  aboutDesc: {
    id: 'app.navBar.optionsDropdown.aboutDesc',
    description: 'Describes about option'
  },
  leaveSessionLabel: {
    id: 'app.navBar.optionsDropdown.leaveSessionLabel',
    description: 'Leave session button label'
  },
  fullscreenDesc: {
    id: 'app.navBar.optionsDropdown.fullscreenDesc',
    description: 'Describes fullscreen option'
  },
  settingsDesc: {
    id: 'app.navBar.optionsDropdown.settingsDesc',
    description: 'Describes settings option'
  },
  leaveSessionDesc: {
    id: 'app.navBar.optionsDropdown.leaveSessionDesc',
    description: 'Describes leave session option'
  },
  exitFullscreenDesc: {
    id: 'app.navBar.optionsDropdown.exitFullscreenDesc',
    description: 'Describes exit fullscreen option'
  },
  exitFullscreenLabel: {
    id: 'app.navBar.optionsDropdown.exitFullscreenLabel',
    description: 'Exit fullscreen option label'
  },
  hotkeysLabel: {
    id: 'app.navBar.optionsDropdown.hotkeysLabel',
    description: 'Hotkeys options label'
  },
  hotkeysDesc: {
    id: 'app.navBar.optionsDropdown.hotkeysDesc',
    description: 'Describes hotkeys option'
  },
  helpLabel: {
    id: 'app.navBar.optionsDropdown.helpLabel',
    description: 'Help options label'
  },
  openAppLabel: {
    id: 'app.navBar.optionsDropdown.openAppLabel',
    description: 'Open mobile app label'
  },
  helpDesc: {
    id: 'app.navBar.optionsDropdown.helpDesc',
    description: 'Describes help option'
  },
  endMeetingLabel: {
    id: 'app.navBar.optionsDropdown.endMeetingForAllLabel',
    description: 'End meeting options label'
  },
  endMeetingDesc: {
    id: 'app.navBar.optionsDropdown.endMeetingDesc',
    description: 'Describes settings option closing the current meeting'
  },
  startCaption: {
    id: 'app.audio.captions.button.start',
    description: 'Start audio captions'
  },
  stopCaption: {
    id: 'app.audio.captions.button.stop',
    description: 'Stop audio captions'
  },
  layoutModal: {
    id: 'app.actionsBar.actionsDropdown.layoutModal',
    description: 'Label for layouts selection button'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  handleToggleFullscreen: PropTypes.func.isRequired,
  noIOSFullscreen: PropTypes.bool,
  amIModerator: PropTypes.bool,
  shortcuts: PropTypes.string,
  isBreakoutRoom: PropTypes.bool,
  isMeteorConnected: PropTypes.bool.isRequired,
  isDropdownOpen: PropTypes.bool,
  audioCaptionsEnabled: PropTypes.bool,
  audioCaptionsActive: PropTypes.bool.isRequired,
  audioCaptionsSet: PropTypes.func.isRequired,
  isMobile: PropTypes.bool.isRequired,
  isDirectLeaveButtonEnabled: PropTypes.bool.isRequired,
  optionsDropdownItems: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string,
    type: PropTypes.string
  })).isRequired,
  userLeaveMeeting: PropTypes.func.isRequired
};
const defaultProps = {
  noIOSFullscreen: true,
  amIModerator: false,
  shortcuts: '',
  isBreakoutRoom: false,
  isDropdownOpen: false,
  audioCaptionsEnabled: false
};
const {
  isSafari,
  isTabletApp
} = browserInfo;
const FULLSCREEN_CHANGE_EVENT = isSafari ? 'webkitfullscreenchange' : 'fullscreenchange';
class OptionsDropdown extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      isAboutModalOpen: false,
      isShortcutHelpModalOpen: false,
      isOptionsMenuModalOpen: false,
      isEndMeetingConfirmationModalOpen: false,
      isMobileAppModalOpen: false,
      isFullscreen: false,
      isLayoutModalOpen: false
    };

    // Set the logout code to 680 because it's not a real code and can be matched on the other side
    this.LOGOUT_CODE = '680';
    this.leaveSession = this.leaveSession.bind(this);
    this.onFullscreenChange = this.onFullscreenChange.bind(this);
    this.setOptionsMenuModalIsOpen = this.setOptionsMenuModalIsOpen.bind(this);
    this.setEndMeetingConfirmationModalIsOpen = this.setEndMeetingConfirmationModalIsOpen.bind(this);
    this.setMobileAppModalIsOpen = this.setMobileAppModalIsOpen.bind(this);
    this.setAboutModalIsOpen = this.setAboutModalIsOpen.bind(this);
    this.setShortcutHelpModalIsOpen = this.setShortcutHelpModalIsOpen.bind(this);
    this.setLayoutModalIsOpen = this.setLayoutModalIsOpen.bind(this);
  }
  componentDidMount() {
    document.documentElement.addEventListener(FULLSCREEN_CHANGE_EVENT, this.onFullscreenChange);
  }
  componentWillUnmount() {
    document.documentElement.removeEventListener(FULLSCREEN_CHANGE_EVENT, this.onFullscreenChange);
  }
  onFullscreenChange() {
    const {
      isFullscreen
    } = this.state;
    const newIsFullscreen = FullscreenService.isFullScreen(document.documentElement);
    if (isFullscreen !== newIsFullscreen) {
      this.setState({
        isFullscreen: newIsFullscreen
      });
    }
  }
  getFullscreenItem(menuItems) {
    const {
      intl,
      noIOSFullscreen,
      handleToggleFullscreen
    } = this.props;
    const {
      isFullscreen
    } = this.state;
    const ALLOW_FULLSCREEN = window.meetingClientSettings.public.app.allowFullscreen;
    if (noIOSFullscreen || !ALLOW_FULLSCREEN) return null;
    let fullscreenLabel = intl.formatMessage(intlMessages.fullscreenLabel);
    let fullscreenDesc = intl.formatMessage(intlMessages.fullscreenDesc);
    let fullscreenIcon = 'fullscreen';
    if (isFullscreen) {
      fullscreenLabel = intl.formatMessage(intlMessages.exitFullscreenLabel);
      fullscreenDesc = intl.formatMessage(intlMessages.exitFullscreenDesc);
      fullscreenIcon = 'exit_fullscreen';
    }
    return menuItems.push({
      key: 'list-item-fullscreen',
      icon: fullscreenIcon,
      label: fullscreenLabel,
      description: fullscreenDesc,
      onClick: handleToggleFullscreen
    });
  }
  leaveSession() {
    const {
      userLeaveMeeting
    } = this.props;
    userLeaveMeeting();
    // we don't check askForFeedbackOnLogout here,
    // it is checked in meeting-ended component
    Session.setItem('codeError', this.LOGOUT_CODE);
  }
  setAboutModalIsOpen(value) {
    this.setState({
      isAboutModalOpen: value
    });
  }
  setShortcutHelpModalIsOpen(value) {
    this.setState({
      isShortcutHelpModalOpen: value
    });
  }
  setOptionsMenuModalIsOpen(value) {
    this.setState({
      isOptionsMenuModalOpen: value
    });
  }
  setEndMeetingConfirmationModalIsOpen(value) {
    this.setState({
      isEndMeetingConfirmationModalOpen: value
    });
  }
  setMobileAppModalIsOpen(value) {
    this.setState({
      isMobileAppModalOpen: value
    });
  }
  setLayoutModalIsOpen(value) {
    this.setState({
      isLayoutModalOpen: value
    });
  }
  renderMenuItems() {
    const {
      intl,
      amIModerator,
      isBreakoutRoom,
      isMeteorConnected,
      audioCaptionsEnabled,
      audioCaptionsActive,
      audioCaptionsSet,
      isMobile,
      optionsDropdownItems,
      isDirectLeaveButtonEnabled,
      isLayoutsEnabled
    } = this.props;
    const {
      isIos
    } = deviceInfo;
    const allowedToEndMeeting = amIModerator && !isBreakoutRoom;
    const {
      showHelpButton: helpButton,
      helpLink,
      allowLogout: allowLogoutSetting
    } = window.meetingClientSettings.public.app;
    this.menuItems = [];
    this.getFullscreenItem(this.menuItems);
    const BBB_TABLET_APP_CONFIG = window.meetingClientSettings.public.app.bbbTabletApp;
    this.menuItems.push({
      key: 'list-item-settings',
      icon: 'settings',
      dataTest: 'settings',
      label: intl.formatMessage(intlMessages.settingsLabel),
      description: intl.formatMessage(intlMessages.settingsDesc),
      onClick: () => this.setOptionsMenuModalIsOpen(true)
    }, {
      key: 'list-item-about',
      icon: 'about',
      dataTest: 'aboutModal',
      label: intl.formatMessage(intlMessages.aboutLabel),
      description: intl.formatMessage(intlMessages.aboutDesc),
      onClick: () => this.setAboutModalIsOpen(true)
    });
    if (helpButton) {
      this.menuItems.push({
        key: 'list-item-help',
        icon: 'help',
        iconRight: 'popout_window',
        label: intl.formatMessage(intlMessages.helpLabel),
        dataTest: 'helpButton',
        description: intl.formatMessage(intlMessages.helpDesc),
        onClick: () => window.open("".concat(helpLink))
      });
    }
    if (isIos && !isTabletApp && BBB_TABLET_APP_CONFIG.enabled == true && BBB_TABLET_APP_CONFIG.iosAppStoreUrl !== '') {
      this.menuItems.push({
        key: 'list-item-help',
        icon: 'popout_window',
        label: intl.formatMessage(intlMessages.openAppLabel),
        onClick: () => this.setMobileAppModalIsOpen(true)
      });
    }
    if (audioCaptionsEnabled && isMobile) {
      this.menuItems.push({
        key: 'audioCaptions',
        dataTest: 'audioCaptions',
        icon: audioCaptionsActive ? 'closed_caption_stop' : 'closed_caption',
        label: intl.formatMessage(audioCaptionsActive ? intlMessages.stopCaption : intlMessages.startCaption),
        onClick: () => audioCaptionsSet(!audioCaptionsActive)
      });
    }
    this.menuItems.push({
      key: 'list-item-shortcuts',
      icon: 'shortcuts',
      label: intl.formatMessage(intlMessages.hotkeysLabel),
      description: intl.formatMessage(intlMessages.hotkeysDesc),
      onClick: () => this.setShortcutHelpModalIsOpen(true)
    });
    const Settings = getSettingsSingletonInstance();
    const {
      selectedLayout
    } = Settings.application;
    const shouldShowManageLayoutButton = selectedLayout !== LAYOUT_TYPE.CAMERAS_ONLY && selectedLayout !== LAYOUT_TYPE.PRESENTATION_ONLY && selectedLayout !== LAYOUT_TYPE.PARTICIPANTS_AND_CHAT_ONLY;
    if (shouldShowManageLayoutButton && isLayoutsEnabled) {
      this.menuItems.push({
        key: 'list-item-layout-modal',
        icon: 'manage_layout',
        label: intl.formatMessage(intlMessages.layoutModal),
        onClick: () => this.setLayoutModalIsOpen(true)
      });
    }
    optionsDropdownItems.forEach(item => {
      switch (item.type) {
        case OptionsDropdownItemType.OPTION:
          this.menuItems.push({
            key: item.id,
            icon: item.icon,
            onClick: item.onClick,
            label: item.label
          });
          break;
        case OptionsDropdownItemType.SEPARATOR:
          this.menuItems.push({
            key: item.id,
            isSeparator: true
          });
          break;
        default:
          break;
      }
    });
    if (isMeteorConnected && !isDirectLeaveButtonEnabled) {
      const bottomItems = [{
        key: 'list-item-separator',
        isSeparator: true
      }];
      if (allowLogoutSetting) {
        bottomItems.push({
          key: 'list-item-logout',
          dataTest: 'optionsLogoutButton',
          icon: 'logout',
          label: intl.formatMessage(intlMessages.leaveSessionLabel),
          description: intl.formatMessage(intlMessages.leaveSessionDesc),
          onClick: () => this.leaveSession()
        });
      }
      if (allowedToEndMeeting) {
        const customStyles = {
          background: colorDanger,
          color: colorWhite
        };
        bottomItems.push({
          key: 'list-item-end-meeting',
          icon: 'close',
          label: intl.formatMessage(intlMessages.endMeetingLabel),
          description: intl.formatMessage(intlMessages.endMeetingDesc),
          customStyles,
          onClick: () => this.setEndMeetingConfirmationModalIsOpen(true)
        });
      }
      if (bottomItems.length > 1) this.menuItems.push(...bottomItems);
    }
    return this.menuItems;
  }
  renderModal(isOpen, setIsOpen, priority, Component, otherOptions) {
    return isOpen ? /*#__PURE__*/React.createElement(Component, _objectSpread(_objectSpread({}, otherOptions), {}, {
      onRequestClose: () => setIsOpen(false),
      priority,
      setIsOpen,
      isOpen
    })) : null;
  }
  render() {
    const {
      intl,
      shortcuts: OPEN_OPTIONS_AK,
      isDropdownOpen,
      isMobile,
      isRTL
    } = this.props;
    const {
      isAboutModalOpen,
      isShortcutHelpModalOpen,
      isOptionsMenuModalOpen,
      isEndMeetingConfirmationModalOpen,
      isMobileAppModalOpen,
      isLayoutModalOpen
    } = this.state;
    const customStyles = {
      top: '1rem'
    };
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BBBMenu, {
      accessKey: OPEN_OPTIONS_AK,
      customStyles: !isMobile ? customStyles : null,
      trigger: /*#__PURE__*/React.createElement(Styled.DropdownButton, {
        state: isDropdownOpen ? 'open' : 'closed',
        label: intl.formatMessage(intlMessages.optionsLabel),
        icon: "more",
        "data-test": "optionsButton",
        color: "dark",
        size: "md",
        circle: true,
        hideLabel: true
        // FIXME: Without onClick react proptypes keep warning
        // even after the DropdownTrigger inject an onClick handler
        ,
        onClick: () => null
      }),
      actions: this.renderMenuItems(),
      opts: {
        id: 'app-settings-dropdown-menu',
        keepMounted: true,
        transitionDuration: 0,
        elevation: 3,
        getcontentanchorel: null,
        fullwidth: 'true',
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: isRTL ? 'left' : 'right'
        },
        transformorigin: {
          vertical: 'top',
          horizontal: isRTL ? 'left' : 'right'
        }
      }
    }), this.renderModal(isAboutModalOpen, this.setAboutModalIsOpen, "low", AboutContainer), this.renderModal(isShortcutHelpModalOpen, this.setShortcutHelpModalIsOpen, "low", ShortcutHelpComponent), this.renderModal(isOptionsMenuModalOpen, this.setOptionsMenuModalIsOpen, "low", OptionsMenuContainer), this.renderModal(isEndMeetingConfirmationModalOpen, this.setEndMeetingConfirmationModalIsOpen, "low", EndMeetingConfirmationContainer), this.renderModal(isMobileAppModalOpen, this.setMobileAppModalIsOpen, "low", MobileAppModal), this.renderModal(isLayoutModalOpen, this.setLayoutModalIsOpen, 'low', LayoutModalContainer));
  }
}
OptionsDropdown.propTypes = propTypes;
OptionsDropdown.defaultProps = defaultProps;
module.exportDefault(injectIntl(OptionsDropdown));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/options-dropdown/container.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 1);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 2);
let OptionsDropdown;
module.link("./component", {
  default(v) {
    OptionsDropdown = v;
  }
}, 3);
let FullscreenService;
module.link("/imports/ui/components/common/fullscreen-button/service", {
  default(v) {
    FullscreenService = v;
  }
}, 4);
let layoutSelect;
module.link("../../layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 5);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 6);
let USER_LEAVE_MEETING;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  USER_LEAVE_MEETING(v) {
    USER_LEAVE_MEETING = v;
  }
}, 7);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 8);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 9);
let useShortcut;
module.link("/imports/ui/core/hooks/useShortcut", {
  useShortcut(v) {
    useShortcut = v;
  }
}, 10);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 11);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 12);
let useIsLayoutsEnabled;
module.link("/imports/ui/services/features", {
  useIsLayoutsEnabled(v) {
    useIsLayoutsEnabled = v;
  }
}, 13);
const {
  isIphone
} = deviceInfo;
const {
  isSafari,
  isValidSafariVersion
} = browserInfo;
const noIOSFullscreen = !!(isSafari && !isValidSafariVersion || isIphone);
const setAudioCaptions = value => Session.setItem('audioCaptions', value);
const OptionsDropdownContainer = props => {
  const isRTL = layoutSelect(i => i.isRTL);
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let optionsDropdownItems = [];
  if (pluginsExtensibleAreasAggregatedState.optionsDropdownItems) {
    optionsDropdownItems = [...pluginsExtensibleAreasAggregatedState.optionsDropdownItems];
  }
  const {
    data: currentMeeting
  } = useMeeting(m => ({
    componentsFlags: m.componentsFlags,
    isBreakout: m.isBreakout
  }));
  const componentsFlags = currentMeeting === null || currentMeeting === void 0 ? void 0 : currentMeeting.componentsFlags;
  const audioCaptionsEnabled = componentsFlags === null || componentsFlags === void 0 ? void 0 : componentsFlags.hasCaption;
  const [userLeaveMeeting] = useMutation(USER_LEAVE_MEETING);
  const openOptions = useShortcut('openOptions');
  const audioCaptionsActive = useStorageKey('audioCaptions') || false;
  const isDropdownOpen = useStorageKey('dropdownOpen');
  const isLayoutsEnabled = useIsLayoutsEnabled();
  return /*#__PURE__*/React.createElement(OptionsDropdown, _objectSpread({
    isRTL,
    optionsDropdownItems,
    userLeaveMeeting,
    audioCaptionsEnabled,
    shortcuts: openOptions,
    audioCaptionsActive,
    isDropdownOpen,
    handleToggleFullscreen: FullscreenService.toggleFullScreen,
    audioCaptionsSet: value => setAudioCaptions(value),
    isMobile: deviceInfo.isMobile,
    noIOSFullscreen,
    isBreakoutRoom: currentMeeting === null || currentMeeting === void 0 ? void 0 : currentMeeting.isBreakout,
    // TODO: Replace/Remove
    isMeteorConnected: true,
    isLayoutsEnabled
  }, props));
};
module.exportDefault(OptionsDropdownContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/options-dropdown/styles.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 1);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 2);
const DropdownButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n"])), _ref => {
  let {
    state
  } = _ref;
  return state === 'open' && "\n    @media ".concat(smallOnly, " {\n      display: none;\n    }\n  ");
}, _ref2 => {
  let {
    state
  } = _ref2;
  return state === 'closed' && "\n    margin: 0;\n    z-index: 3;\n  ";
});
module.exportDefault({
  DropdownButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/component.jsx                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let withShortcutHelper;
module.link("/imports/ui/components/shortcut-help/service", {
  default(v) {
    withShortcutHelper = v;
  }
}, 2);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 3);
let PluginSdk;
module.link("bigbluebutton-html-plugin-sdk", {
  "*"(v) {
    PluginSdk = v;
  }
}, 4);
let NavBarItemType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/nav-bar-item/enums", {
  NavBarItemType(v) {
    NavBarItemType = v;
  }
}, 5);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 6);
let RecordingIndicator;
module.link("./nav-bar-graphql/recording-indicator/component", {
  default(v) {
    RecordingIndicator = v;
  }
}, 7);
let TalkingIndicator;
module.link("/imports/ui/components/nav-bar/nav-bar-graphql/talking-indicator/component", {
  default(v) {
    TalkingIndicator = v;
  }
}, 8);
let ConnectionStatusButton;
module.link("/imports/ui/components/connection-status/button/container", {
  default(v) {
    ConnectionStatusButton = v;
  }
}, 9);
let ConnectionStatus;
module.link("/imports/ui/components/connection-status/component", {
  default(v) {
    ConnectionStatus = v;
  }
}, 10);
let ConnectionStatusService;
module.link("/imports/ui/components/connection-status/service", {
  default(v) {
    ConnectionStatusService = v;
  }
}, 11);
let OptionsDropdownContainer;
module.link("./options-dropdown/container", {
  default(v) {
    OptionsDropdownContainer = v;
  }
}, 12);
let TimerIndicatorContainer;
module.link("/imports/ui/components/timer/indicator/component", {
  default(v) {
    TimerIndicatorContainer = v;
  }
}, 13);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 14);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 15);
let PANELS, ACTIONS, LAYOUT_TYPE;
module.link("../layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  },
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  }
}, 16);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 17);
let LeaveMeetingButtonContainer;
module.link("./leave-meeting-button/container", {
  default(v) {
    LeaveMeetingButtonContainer = v;
  }
}, 18);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 19);
const intlMessages = defineMessages({
  toggleUserListLabel: {
    id: 'app.navBar.userListToggleBtnLabel',
    description: 'Toggle button label'
  },
  toggleUserListAria: {
    id: 'app.navBar.toggleUserList.ariaLabel',
    description: 'description of the lists inside the userlist'
  },
  newMessages: {
    id: 'app.navBar.toggleUserList.newMessages',
    description: 'label for toggleUserList btn when showing red notification'
  },
  newMsgAria: {
    id: 'app.navBar.toggleUserList.newMsgAria',
    description: 'label for new message screen reader alert'
  },
  defaultBreakoutName: {
    id: 'app.createBreakoutRoom.room',
    description: 'default breakout room name'
  },
  leaveMeetingLabel: {
    id: 'app.navBar.leaveMeetingBtnLabel',
    description: 'Leave meeting button label'
  }
});
const propTypes = {
  presentationTitle: PropTypes.string,
  hasUnreadMessages: PropTypes.bool,
  shortcuts: PropTypes.string,
  breakoutNum: PropTypes.number,
  breakoutName: PropTypes.string,
  meetingName: PropTypes.string,
  pluginNavBarItems: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string
  })).isRequired
};
const defaultProps = {
  presentationTitle: 'Default Room Title',
  hasUnreadMessages: false,
  shortcuts: ''
};
const renderPluginItems = pluginItems => {
  if (pluginItems !== undefined) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, pluginItems.map(pluginItem => {
      let returnComponent;
      switch (pluginItem.type) {
        case NavBarItemType.BUTTON:
          returnComponent = /*#__PURE__*/React.createElement(Styled.PluginComponentWrapper, {
            key: "".concat(pluginItem.id, "-").concat(pluginItem.type)
          }, /*#__PURE__*/React.createElement(Button, {
            disabled: pluginItem.disabled,
            icon: pluginItem.icon,
            label: pluginItem.label,
            "aria-label": pluginItem.tooltip,
            color: "primary",
            tooltip: pluginItem.tooltip,
            onClick: pluginItem.onClick
          }));
          break;
        case NavBarItemType.INFO:
          returnComponent = /*#__PURE__*/React.createElement(Styled.PluginComponentWrapper, {
            key: "".concat(pluginItem.id, "-").concat(pluginItem.type),
            tooltip: pluginItem.tooltip
          }, /*#__PURE__*/React.createElement(Styled.PluginInfoComponent, null, pluginItem.label));
          break;
        default:
          returnComponent = null;
          break;
      }
      if (pluginItem.hasSeparator) {
        switch (pluginItem.position) {
          case PluginSdk.NavBarItemPosition.RIGHT:
            returnComponent = /*#__PURE__*/React.createElement(React.Fragment, null, returnComponent, /*#__PURE__*/React.createElement(Styled.PluginSeparatorWrapper, {
              key: "".concat(pluginItem.id, "-").concat(pluginItem.type, "-separator")
            }, "|"));
            break;
          default:
            returnComponent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.PluginSeparatorWrapper, {
              key: "".concat(pluginItem.id, "-").concat(pluginItem.type, "-separator")
            }, "|"), returnComponent);
            break;
        }
      }
      return returnComponent;
    }));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null);
};
class NavBar extends Component {
  constructor(props) {
    super(props);
    this.handleToggleUserList = this.handleToggleUserList.bind(this);
    this.splitPluginItems = this.splitPluginItems.bind(this);
  }
  componentDidMount() {
    const {
      shortcuts: TOGGLE_USERLIST_AK,
      intl,
      breakoutNum,
      breakoutName,
      meetingName
    } = this.props;
    if (breakoutNum && breakoutNum > 0) {
      if (breakoutName && meetingName) {
        const defaultBreakoutName = intl.formatMessage(intlMessages.defaultBreakoutName, {
          0: breakoutNum
        });
        if (breakoutName === defaultBreakoutName) {
          document.title = "".concat(breakoutNum, " - ").concat(meetingName);
        } else {
          document.title = "".concat(breakoutName, " - ").concat(meetingName);
        }
      }
    }
    const {
      isFirefox
    } = browserInfo;
    const {
      isMacos
    } = deviceInfo;

    // accessKey U does not work on firefox for macOS for some unknown reason
    if (isMacos && isFirefox && TOGGLE_USERLIST_AK === 'U') {
      document.addEventListener('keyup', event => {
        const {
          key,
          code
        } = event;
        const eventKey = key === null || key === void 0 ? void 0 : key.toUpperCase();
        const eventCode = code;
        if (event !== null && event !== void 0 && event.altKey && (eventKey === TOGGLE_USERLIST_AK || eventCode === "Key".concat(TOGGLE_USERLIST_AK))) {
          this.handleToggleUserList();
        }
      });
    }
  }
  componentWillUnmount() {
    clearInterval(this.interval);
  }
  handleToggleUserList() {
    const {
      sidebarNavigation,
      sidebarContent,
      layoutContextDispatch
    } = this.props;
    if (sidebarNavigation.isOpen) {
      if (sidebarContent.isOpen) {
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: false
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.NONE
        });
        layoutContextDispatch({
          type: ACTIONS.SET_ID_CHAT_OPEN,
          value: ''
        });
      }
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_NAVIGATION_IS_OPEN,
        value: false
      });
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_NAVIGATION_PANEL,
        value: PANELS.NONE
      });
    } else {
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_NAVIGATION_IS_OPEN,
        value: true
      });
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_NAVIGATION_PANEL,
        value: PANELS.USERLIST
      });
    }
  }
  splitPluginItems() {
    const {
      pluginNavBarItems
    } = this.props;
    return pluginNavBarItems.reduce((result, item) => {
      switch (item.position) {
        case PluginSdk.NavBarItemPosition.LEFT:
          result.leftPluginItems.push(item);
          break;
        case PluginSdk.NavBarItemPosition.CENTER:
          result.centerPluginItems.push(item);
          break;
        case PluginSdk.NavBarItemPosition.RIGHT:
          result.rightPluginItems.push(item);
          break;
        default:
          break;
      }
      return result;
    }, {
      leftPluginItems: [],
      centerPluginItems: [],
      rightPluginItems: []
    });
  }
  render() {
    var _window$meetingClient, _window$meetingClient2;
    const {
      hasUnreadMessages,
      hasUnreadNotes,
      intl,
      shortcuts: TOGGLE_USERLIST_AK,
      presentationTitle,
      amIModerator,
      style,
      main,
      isPinned,
      sidebarNavigation,
      currentUserId,
      isDirectLeaveButtonEnabled,
      isMeteorConnected
    } = this.props;
    const hasNotification = hasUnreadMessages || hasUnreadNotes && !isPinned;
    let ariaLabel = intl.formatMessage(intlMessages.toggleUserListAria);
    ariaLabel += hasNotification ? " ".concat(intl.formatMessage(intlMessages.newMessages)) : '';
    const isExpanded = sidebarNavigation.isOpen;
    const {
      isPhone
    } = deviceInfo;
    const {
      leftPluginItems,
      centerPluginItems,
      rightPluginItems
    } = this.splitPluginItems();
    const Settings = getSettingsSingletonInstance();
    const {
      selectedLayout
    } = Settings.application;
    const shouldShowNavBarToggleButton = selectedLayout !== LAYOUT_TYPE.CAMERAS_ONLY && selectedLayout !== LAYOUT_TYPE.PRESENTATION_ONLY && selectedLayout !== LAYOUT_TYPE.PARTICIPANTS_AND_CHAT_ONLY;
    const APP_CONFIG = (_window$meetingClient = window.meetingClientSettings) === null || _window$meetingClient === void 0 ? void 0 : (_window$meetingClient2 = _window$meetingClient.public) === null || _window$meetingClient2 === void 0 ? void 0 : _window$meetingClient2.app;
    const enableTalkingIndicator = APP_CONFIG === null || APP_CONFIG === void 0 ? void 0 : APP_CONFIG.enableTalkingIndicator;
    return /*#__PURE__*/React.createElement(Styled.Navbar, {
      id: "Navbar",
      style: main === 'new' ? {
        position: 'absolute',
        top: style.top,
        left: style.left,
        height: style.height,
        width: style.width
      } : {
        position: 'relative',
        height: style.height,
        width: '100%'
      }
    }, /*#__PURE__*/React.createElement(Styled.Top, null, /*#__PURE__*/React.createElement(Styled.Left, null, shouldShowNavBarToggleButton && isExpanded && document.dir === 'ltr' && /*#__PURE__*/React.createElement(Styled.ArrowLeft, {
      iconName: "left_arrow"
    }), shouldShowNavBarToggleButton && !isExpanded && document.dir === 'rtl' && /*#__PURE__*/React.createElement(Styled.ArrowLeft, {
      iconName: "left_arrow"
    }), shouldShowNavBarToggleButton && /*#__PURE__*/React.createElement(Styled.NavbarToggleButton, {
      tooltipplacement: "right",
      onClick: this.handleToggleUserList,
      color: isPhone && isExpanded ? 'primary' : 'dark',
      size: "md",
      circle: true,
      hideLabel: true,
      "data-test": hasNotification ? 'hasUnreadMessages' : 'toggleUserList',
      label: intl.formatMessage(intlMessages.toggleUserListLabel),
      tooltipLabel: intl.formatMessage(intlMessages.toggleUserListLabel),
      "aria-label": ariaLabel,
      icon: "user",
      "aria-expanded": isExpanded,
      accessKey: TOGGLE_USERLIST_AK,
      hasNotification: hasNotification
    }), shouldShowNavBarToggleButton && !isExpanded && document.dir === 'ltr' && /*#__PURE__*/React.createElement(Styled.ArrowRight, {
      iconName: "right_arrow"
    }), shouldShowNavBarToggleButton && isExpanded && document.dir === 'rtl' && /*#__PURE__*/React.createElement(Styled.ArrowRight, {
      iconName: "right_arrow"
    }), renderPluginItems(leftPluginItems)), /*#__PURE__*/React.createElement(Styled.Center, null, /*#__PURE__*/React.createElement(Styled.PresentationTitle, {
      "data-test": "presentationTitle"
    }, presentationTitle), /*#__PURE__*/React.createElement(RecordingIndicator, {
      amIModerator: amIModerator,
      currentUserId: currentUserId
    }), renderPluginItems(centerPluginItems)), /*#__PURE__*/React.createElement(Styled.Right, null, renderPluginItems(rightPluginItems), ConnectionStatusService.isEnabled() ? /*#__PURE__*/React.createElement(ConnectionStatusButton, null) : null, ConnectionStatusService.isEnabled() ? /*#__PURE__*/React.createElement(ConnectionStatus, null) : null, isDirectLeaveButtonEnabled && isMeteorConnected ? /*#__PURE__*/React.createElement(LeaveMeetingButtonContainer, {
      amIModerator: amIModerator
    }) : null, /*#__PURE__*/React.createElement(OptionsDropdownContainer, {
      amIModerator: amIModerator,
      isDirectLeaveButtonEnabled: isDirectLeaveButtonEnabled
    }))), /*#__PURE__*/React.createElement(Styled.Bottom, null, enableTalkingIndicator ? /*#__PURE__*/React.createElement(TalkingIndicator, {
      amIModerator: amIModerator
    }) : null, /*#__PURE__*/React.createElement(TimerIndicatorContainer, null)));
  }
}
NavBar.propTypes = propTypes;
NavBar.defaultProps = defaultProps;
module.exportDefault(injectIntl(NavBar));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/container.jsx                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["children"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 1);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 2);
let React, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 2);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 3);
let NavBar;
module.link("./component", {
  default(v) {
    NavBar = v;
  }
}, 4);
let layoutSelectInput, layoutSelectOutput, layoutDispatch;
module.link("../layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 5);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 6);
let PANELS;
module.link("/imports/ui/components/layout/enums", {
  PANELS(v) {
    PANELS = v;
  }
}, 7);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 8);
let useChat;
module.link("/imports/ui/core/hooks/useChat", {
  default(v) {
    useChat = v;
  }
}, 9);
let useHasUnreadNotes;
module.link("../notes/hooks/useHasUnreadNotes", {
  default(v) {
    useHasUnreadNotes = v;
  }
}, 10);
let useShortcut;
module.link("../../core/hooks/useShortcut", {
  useShortcut(v) {
    useShortcut = v;
  }
}, 11);
let useMeeting;
module.link("../../core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 12);
let registerTitleView;
module.link("/imports/utils/dom-utils", {
  registerTitleView(v) {
    registerTitleView = v;
  }
}, 13);
const intlMessages = defineMessages({
  defaultViewLabel: {
    id: 'app.title.defaultViewLabel',
    description: 'view name appended to document title'
  }
});
const NavBarContainer = _ref => {
  let {
      children
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  const unread = useHasUnreadNotes();
  const intl = useIntl();
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const sidebarNavigation = layoutSelectInput(i => i.sidebarNavigation);
  const navBar = layoutSelectOutput(i => i.navBar);
  const layoutContextDispatch = layoutDispatch();
  const sharedNotes = layoutSelectInput(i => i.sharedNotes);
  const {
    isPinned: notesIsPinned
  } = sharedNotes;
  const {
    sidebarContentPanel
  } = sidebarContent;
  const {
    sidebarNavPanel
  } = sidebarNavigation;
  const toggleUserList = useShortcut('toggleUserList');
  const hasUnreadNotes = sidebarContentPanel !== PANELS.SHARED_NOTES && unread && !notesIsPinned;
  const {
    data: chats
  } = useChat(chat => ({
    totalUnread: chat.totalUnread
  }));
  const hasUnreadMessages = chats && chats.reduce((acc, chat) => acc + (chat === null || chat === void 0 ? void 0 : chat.totalUnread), 0) > 0;
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    isModerator: user.isModerator
  }));
  const amIModerator = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.isModerator;
  const isExpanded = !!sidebarContentPanel || !!sidebarNavPanel;
  const hideNavBar = getFromUserSettings('bbb_hide_nav_bar', false);
  const PUBLIC_CONFIG = window.meetingClientSettings.public;
  const CLIENT_TITLE = getFromUserSettings('bbb_client_title', PUBLIC_CONFIG.app.clientTitle);
  const IS_DIRECT_LEAVE_BUTTON_ENABLED = getFromUserSettings('bbb_direct_leave_button', PUBLIC_CONFIG.app.defaultSettings.application.directLeaveButton);
  let meetingTitle;
  let breakoutNum;
  let breakoutName;
  let meetingName;
  const {
    data: meeting
  } = useMeeting(m => ({
    name: m.name,
    meetingId: m.meetingId,
    breakoutPolicies: {
      sequence: m.breakoutPolicies.sequence
    }
  }));
  if (meeting) {
    meetingTitle = meeting.name;
    const titleString = "".concat(CLIENT_TITLE, " - ").concat(meetingTitle);
    document.title = titleString;
    registerTitleView(intl.formatMessage(intlMessages.defaultViewLabel));
    if (meeting.breakoutPolicies) {
      breakoutNum = meeting.breakoutPolicies.sequence;
      if (breakoutNum > 0) {
        breakoutName = meetingTitle;
        meetingName = meetingTitle.replace("(".concat(breakoutName, ")"), '').trim();
      }
    }
  }
  if (hideNavBar || navBar.display === false) return null;
  let pluginNavBarItems = [];
  if (pluginsExtensibleAreasAggregatedState.navBarItems) {
    pluginNavBarItems = [...pluginsExtensibleAreasAggregatedState.navBarItems];
  }
  return /*#__PURE__*/React.createElement(NavBar, _extends({}, _objectSpread({
    amIModerator,
    hasUnreadMessages,
    hasUnreadNotes,
    sidebarNavPanel,
    sidebarContentPanel,
    sidebarNavigation,
    sidebarContent,
    layoutContextDispatch,
    isExpanded,
    currentUserId: Auth.userID,
    pluginNavBarItems,
    shortcuts: toggleUserList,
    meetingId: meeting === null || meeting === void 0 ? void 0 : meeting.meetingId,
    presentationTitle: meetingTitle,
    breakoutNum,
    breakoutName,
    meetingName,
    isDirectLeaveButtonEnabled: IS_DIRECT_LEAVE_BUTTON_ENABLED,
    // TODO: Remove/Replace
    isMeteorConnected: true
  }, props), {
    style: _objectSpread({}, navBar)
  }), children);
};
module.exportDefault(NavBarContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/nav-bar/styles.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 1);
let barsPadding, borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  barsPadding(v) {
    barsPadding = v;
  },
  borderSize(v) {
    borderSize = v;
  }
}, 2);
let colorWhite, colorDanger, colorGrayDark, colorBackground, colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorBackground(v) {
    colorBackground = v;
  },
  colorGray(v) {
    colorGray = v;
  }
}, 3);
let fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 4);
let phoneLandscape, smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  phoneLandscape(v) {
    phoneLandscape = v;
  },
  smallOnly(v) {
    smallOnly = v;
  }
}, 5);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 6);
const Navbar = styled.header(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  font-size: 1.5rem;\n  background-color: ", ";\n  padding: ", " ", " 0 ", ";\n"])), colorBackground, barsPadding, barsPadding, barsPadding);
const Top = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n"])));
const Left = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n"])));
const ArrowLeft = styled(Icon)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: absolute;\n  font-size: 40%;\n  color: ", ";\n  left: .25rem;\n  @media ", " {\n    display: none;\n  }\n"])), colorWhite, smallOnly);
const ArrowRight = styled(Icon)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  position: absolute;\n  font-size: 40%;\n  color: ", ";\n  right: .0125rem;\n  @media ", " {\n    display: none;\n  }\n"])), colorWhite, smallOnly);
const Center = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  width: 70%;\n  flex: 1;\n"])));
const PresentationTitle = styled.h1(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  font-weight: 400;\n  color: ", ";\n  font-size: ", ";\n  margin: 0;\n  padding: 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 30vw;\n\n  > [class^=\"icon-bbb-\"] {\n    font-size: 75%;\n  }\n"])), colorWhite, fontSizeBase);
const PluginInfoComponent = styled.h1(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  font-weight: 400;\n  color: ", ";\n  font-size: ", ";\n  margin: 0;\n  padding: 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 30vw;\n"])), colorWhite, fontSizeBase);
const PluginComponentWrapper = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  margin: 0 .5rem;\n"])));
const PluginSeparatorWrapper = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: ", ";\n  margin: 0 1rem;\n"])), colorGray, fontSizeBase);
const Right = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  flex: 0;\n"])));
const Bottom = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n\n  @media ", " {\n    margin-top: .25rem;\n  }\n"])), phoneLandscape);
const NavbarToggleButton = styled(Button)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  margin: 0;\n  z-index: 3;\n\n  ", "\n"])), _ref => {
  let {
    hasNotification
  } = _ref;
  return hasNotification && "\n    position: relative;\n\n    &:after {\n      content: '';\n      position: absolute;\n      border-radius: 50%;\n      width: 12px;\n      height: 12px;\n      bottom: ".concat(borderSize, ";\n      right: 3px;\n      background-color: ").concat(colorDanger, ";\n      border: ").concat(borderSize, " solid ").concat(colorGrayDark, ";\n    }\n  ");
});
module.exportDefault({
  Navbar,
  Top,
  Left,
  ArrowLeft,
  ArrowRight,
  Center,
  PresentationTitle,
  Right,
  Bottom,
  NavbarToggleButton,
  PluginInfoComponent,
  PluginComponentWrapper,
  PluginSeparatorWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation":{"presentation-toolbar":{"zoom-tool":{"holdButton":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toolbar/zoom-tool/holdButton/component.jsx                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 2);
const DELAY_MILLISECONDS = 300;
const STEP_TIME = 100;
class HoldDownButton extends PureComponent {
  constructor(props) {
    super(props);
    this.mouseDownHandler = this.mouseDownHandler.bind(this);
    this.mouseUpHandler = this.mouseUpHandler.bind(this);
    this.touchStart = this.touchStart.bind(this);
    this.touchEnd = this.touchEnd.bind(this);
    this.execInterval = this.execInterval.bind(this);
    this.onClick = this.onClick.bind(this);
    this.setInt = 0;
    this.state = {
      mouseHolding: false
    };
  }
  onClick() {
    const {
      exec,
      minBound,
      maxBound,
      value
    } = this.props;
    const bounds = value === maxBound || value === minBound;
    if (bounds) return;
    exec();
  }
  execInterval() {
    const interval = () => {
      clearInterval(this.setInt);
      this.setInt = setInterval(this.onClick, STEP_TIME);
    };
    setTimeout(() => {
      const {
        mouseHolding
      } = this.state;
      if (mouseHolding) interval();
    }, DELAY_MILLISECONDS);
  }
  mouseDownHandler() {
    this.setState({
      mouseHolding: true
    }, this.execInterval());
  }
  mouseUpHandler() {
    this.setState({
      mouseHolding: false
    }, clearInterval(this.setInt));
  }
  touchStart() {
    this.setState({
      mouseHolding: true
    }, this.execInterval());
  }
  touchEnd() {
    this.setState({
      mouseHolding: false
    }, clearInterval(this.setInt));
  }
  render() {
    const {
      uniqueKey,
      className,
      children
    } = this.props;
    return /*#__PURE__*/React.createElement("span", {
      role: "button",
      "aria-roledescription": "interactive",
      key: uniqueKey,
      onClick: this.onClick,
      onMouseDown: this.mouseDownHandler,
      onMouseUp: this.mouseUpHandler,
      onTouchStart: this.touchStart,
      onTouchEnd: this.touchEnd,
      onMouseLeave: this.mouseUpHandler,
      onKeyUp: () => {},
      className: className,
      tabIndex: -1
    }, children);
  }
}
const defaultProps = {
  className: null,
  exec: () => {},
  minBound: null,
  maxBound: Infinity,
  uniqueKey: uniqueId('holdButton-'),
  value: 0
};
const propTypes = {
  uniqueKey: PropTypes.string,
  exec: PropTypes.func,
  minBound: PropTypes.number,
  maxBound: PropTypes.number,
  value: PropTypes.number,
  className: PropTypes.string,
  children: PropTypes.node.isRequired
};
HoldDownButton.propTypes = propTypes;
HoldDownButton.defaultProps = defaultProps;
module.exportDefault(HoldDownButton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toolbar/zoom-tool/component.jsx                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let HoldButton;
module.link("./holdButton/component", {
  default(v) {
    HoldButton = v;
  }
}, 4);
const DELAY_MILLISECONDS = 200;
const STEP_TIME = 100;
const intlMessages = defineMessages({
  resetZoomLabel: {
    id: 'app.presentation.presentationToolbar.zoomReset',
    description: 'Reset zoom button label'
  },
  zoomInLabel: {
    id: 'app.presentation.presentationToolbar.zoomInLabel',
    description: 'Aria label for increment zoom level'
  },
  zoomInDesc: {
    id: 'app.presentation.presentationToolbar.zoomInDesc',
    description: 'Aria description for increment zoom level'
  },
  zoomOutLabel: {
    id: 'app.presentation.presentationToolbar.zoomOutLabel',
    description: 'Aria label for decrement zoom level'
  },
  zoomOutDesc: {
    id: 'app.presentation.presentationToolbar.zoomOutDesc',
    description: 'Aria description for decrement zoom level'
  },
  currentValue: {
    id: 'app.submenu.application.currentSize',
    description: 'current presentation zoom percentage aria description'
  }
});
class ZoomTool extends PureComponent {
  constructor(props) {
    super(props);
    this.increment = this.increment.bind(this);
    this.decrement = this.decrement.bind(this);
    this.mouseDownHandler = this.mouseDownHandler.bind(this);
    this.mouseUpHandler = this.mouseUpHandler.bind(this);
    this.execInterval = this.execInterval.bind(this);
    this.onChanger = this.onChanger.bind(this);
    this.setInt = 0;
    this.state = {
      stateZoomValue: props.zoomValue,
      initialstateZoomValue: props.zoomValue,
      mouseHolding: false
    };
  }
  componentDidUpdate() {
    const {
      zoomValue
    } = this.props;
    const {
      stateZoomValue
    } = this.state;
    const isDifferent = zoomValue !== stateZoomValue;
    if (isDifferent) {
      this.onChanger(zoomValue);
    }
  }
  onChanger(value) {
    const {
      maxBound,
      minBound,
      change,
      zoomValue
    } = this.props;
    const {
      stateZoomValue
    } = this.state;
    let newValue = value;
    const isDifferent = newValue !== stateZoomValue;
    if (newValue <= minBound) {
      newValue = minBound;
    } else if (newValue >= maxBound) {
      newValue = maxBound;
    }
    const propsIsDifferente = zoomValue !== newValue;
    if (isDifferent && propsIsDifferente) {
      this.setState({
        stateZoomValue: newValue
      }, () => {
        change(newValue);
      });
    }
    if (isDifferent && !propsIsDifferente) this.setState({
      stateZoomValue: newValue
    });
  }
  increment() {
    const {
      step
    } = this.props;
    const {
      stateZoomValue
    } = this.state;
    const increaseZoom = stateZoomValue + step;
    this.onChanger(increaseZoom);
  }
  decrement() {
    const {
      step
    } = this.props;
    const {
      stateZoomValue
    } = this.state;
    const decreaseZoom = stateZoomValue - step;
    this.onChanger(decreaseZoom);
  }
  execInterval(inc) {
    const {
      mouseHolding
    } = this.state;
    const exec = inc ? this.increment : this.decrement;
    const interval = () => {
      clearInterval(this.setInt);
      this.setInt = setInterval(exec, STEP_TIME);
    };
    setTimeout(() => {
      if (mouseHolding) {
        interval();
      }
    }, DELAY_MILLISECONDS);
  }
  mouseDownHandler(bool) {
    this.setState({
      mouseHolding: true
    }, () => {
      this.execInterval(bool);
    });
  }
  mouseUpHandler() {
    this.setState({
      mouseHolding: false
    }, () => clearInterval(this.setInt));
  }
  resetZoom() {
    const {
      stateZoomValue,
      initialstateZoomValue
    } = this.state;
    if (stateZoomValue !== initialstateZoomValue) this.onChanger(initialstateZoomValue);
  }
  render() {
    const {
      zoomValue,
      minBound,
      maxBound,
      intl,
      isMeteorConnected,
      step
    } = this.props;
    const {
      stateZoomValue
    } = this.state;
    let zoomOutAriaLabel = intl.formatMessage(intlMessages.zoomOutLabel);
    if (zoomValue > minBound) {
      zoomOutAriaLabel += " ".concat(intl.formatNumber((zoomValue - step) / 100, {
        style: 'percent'
      }));
    }
    let zoomInAriaLabel = intl.formatMessage(intlMessages.zoomInLabel);
    if (zoomValue < maxBound) {
      zoomInAriaLabel += " ".concat(intl.formatNumber((zoomValue + step) / 100, {
        style: 'percent'
      }));
    }
    const stateZoomPct = intl.formatNumber(stateZoomValue / 100, {
      style: 'percent'
    });
    return [/*#__PURE__*/React.createElement(HoldButton, {
      key: "zoom-tool-1",
      exec: this.decrement,
      value: zoomValue,
      minBound: minBound
    }, /*#__PURE__*/React.createElement(Styled.DecreaseZoomButton, {
      color: "light",
      circle: true,
      size: "md",
      key: "zoom-tool-1",
      "aria-describedby": "zoomOutDescription",
      "aria-label": zoomOutAriaLabel,
      label: intl.formatMessage(intlMessages.zoomOutLabel),
      "data-test": "zoomOutBtn",
      icon: "substract",
      onClick: () => {},
      disabled: zoomValue <= minBound || !isMeteorConnected,
      hideLabel: true
    }), /*#__PURE__*/React.createElement("div", {
      id: "zoomOutDescription",
      hidden: true
    }, intl.formatMessage(intlMessages.zoomOutDesc))), /*#__PURE__*/React.createElement("span", {
      key: "zoom-tool-2"
    }, /*#__PURE__*/React.createElement(Styled.ResetZoomButton, {
      "aria-label": intl.formatMessage(intlMessages.resetZoomLabel),
      "aria-describedby": "resetZoomDescription",
      disabled: stateZoomValue === minBound || !isMeteorConnected,
      color: "light",
      customIcon: stateZoomPct,
      size: "md",
      onClick: () => this.resetZoom(),
      label: intl.formatMessage(intlMessages.resetZoomLabel),
      "data-test": "resetZoomButton",
      hideLabel: true
    }), /*#__PURE__*/React.createElement("div", {
      id: "resetZoomDescription",
      hidden: true
    }, intl.formatMessage(intlMessages.currentValue, {
      0: stateZoomPct
    }))), /*#__PURE__*/React.createElement(HoldButton, {
      key: "zoom-tool-3",
      exec: this.increment,
      value: zoomValue,
      maxBound: maxBound
    }, /*#__PURE__*/React.createElement(Styled.IncreaseZoomButton, {
      color: "light",
      circle: true,
      size: "md",
      key: "zoom-tool-3",
      "aria-describedby": "zoomInDescription",
      "aria-label": zoomInAriaLabel,
      label: intl.formatMessage(intlMessages.zoomInLabel),
      "data-test": "zoomInBtn",
      icon: "add",
      onClick: () => {},
      disabled: zoomValue >= maxBound || !isMeteorConnected,
      hideLabel: true
    }), /*#__PURE__*/React.createElement("div", {
      id: "zoomInDescription",
      hidden: true
    }, intl.formatMessage(intlMessages.zoomInDesc)))];
  }
}
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired,
    formatNumber: PropTypes.func.isRequired
  }).isRequired,
  zoomValue: PropTypes.number.isRequired,
  change: PropTypes.func.isRequired,
  minBound: PropTypes.number.isRequired,
  maxBound: PropTypes.number.isRequired,
  step: PropTypes.number.isRequired,
  isMeteorConnected: PropTypes.bool.isRequired
};
ZoomTool.propTypes = propTypes;
module.exportDefault(injectIntl(ZoomTool));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toolbar/zoom-tool/styles.js                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorOffWhite, toolbarButtonColor;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  toolbarButtonColor(v) {
    toolbarButtonColor = v;
  }
}, 1);
let whiteboardToolbarMargin, borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  whiteboardToolbarMargin(v) {
    whiteboardToolbarMargin = v;
  },
  borderSize(v) {
    borderSize = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
const DecreaseZoomButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const IncreaseZoomButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const ResetZoomButton = styled(Button)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  text-align: center;\n  color: black;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border: 0 !important;\n  font-weight: 200;\n  margin-left: ", ";\n  margin-right: ", ";\n  position: relative;\n  color: ", ";\n  background-color: ", ";\n  border-radius: 0;\n  box-shadow: none !important;\n  border: 0;\n\n  &:focus,\n  &:hover {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n    background-color: #DCE4EC;\n    border-radius: 4px;\n  }\n\n  &:hover {\n    opacity: .8;\n  }\n\n  &:focus {\n    outline-style: solid;\n    box-shadow: 0 0 0 1px #cdd6e0 !important;\n  }\n"])), whiteboardToolbarMargin, whiteboardToolbarMargin, toolbarButtonColor, colorOffWhite, borderSize);
module.exportDefault({
  DecreaseZoomButton,
  IncreaseZoomButton,
  ResetZoomButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"smart-video-share":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toolbar/smart-video-share/component.jsx                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  SmartMediaShare: () => SmartMediaShare
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 2);
let safeMatch;
module.link("/imports/utils/string-utils", {
  safeMatch(v) {
    safeMatch = v;
  }
}, 3);
let isUrlValid;
module.link("/imports/ui/components/external-video-player/service", {
  isUrlValid(v) {
    isUrlValid = v;
  }
}, 4);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 5);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 6);
const intlMessages = defineMessages({
  externalVideo: {
    id: 'app.smartMediaShare.externalVideo'
  }
});
const createAction = (url, startWatching) => {
  const hasHttps = url === null || url === void 0 ? void 0 : url.startsWith('https://');
  const finalUrl = hasHttps ? url : "https://".concat(url);
  const label = hasHttps ? url === null || url === void 0 ? void 0 : url.replace('https://', '') : url;
  if (isUrlValid(finalUrl)) {
    return {
      label,
      onClick: () => startWatching(finalUrl)
    };
  }
};
const SmartMediaShare = _ref => {
  var _currentSlide$content;
  let {
    currentSlide = undefined,
    intl,
    isMobile,
    isRTL,
    startWatching
  } = _ref;
  const linkPatt = /(https?:\/\/.*?)(?=\s|$)/g;
  const externalLinks = safeMatch(linkPatt, currentSlide === null || currentSlide === void 0 ? void 0 : (_currentSlide$content = currentSlide.content) === null || _currentSlide$content === void 0 ? void 0 : _currentSlide$content.replace(/[\r\n]/g, '  '), false);
  if (!externalLinks) return null;
  const actions = [];
  externalLinks === null || externalLinks === void 0 ? void 0 : externalLinks.forEach(l => {
    const action = createAction(l, startWatching);
    if (action) actions.push(action);
  });
  if ((actions === null || actions === void 0 ? void 0 : actions.length) === 0) return null;
  const customStyles = {
    top: '-1rem'
  };
  return /*#__PURE__*/React.createElement(BBBMenu, {
    customStyles: !isMobile ? customStyles : null,
    trigger: /*#__PURE__*/React.createElement(Styled.QuickVideoButton, {
      role: "button",
      label: intl.formatMessage(intlMessages.externalVideo),
      color: "primary",
      circle: true,
      icon: "external-video",
      size: "md",
      onClick: () => null,
      hideLabel: true
    }),
    actions: actions,
    opts: {
      id: 'external-video-dropdown-menu',
      keepMounted: true,
      transitionDuration: 0,
      elevation: 3,
      getcontentanchorel: null,
      fullwidth: 'true',
      anchorOrigin: {
        vertical: 'top',
        horizontal: isRTL ? 'right' : 'left'
      },
      transformOrigin: {
        vertical: 'bottom',
        horizontal: isRTL ? 'right' : 'left'
      }
    }
  });
};
module.exportDefault(SmartMediaShare);
SmartMediaShare.propTypes = {
  currentSlide: PropTypes.shape({
    content: PropTypes.string.isRequired
  }),
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  isMobile: PropTypes.bool.isRequired,
  isRTL: PropTypes.bool.isRequired
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toolbar/smart-video-share/container.jsx                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let SmartMediaShare;
module.link("./component", {
  SmartMediaShare(v) {
    SmartMediaShare = v;
  }
}, 2);
let Panopto;
module.link("../../../external-video-player/custom-players/panopto", {
  default(v) {
    Panopto = v;
  }
}, 3);
let layoutSelect;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 4);
let isMobile;
module.link("/imports/ui/components/layout/utils", {
  isMobile(v) {
    isMobile = v;
  }
}, 5);
let EXTERNAL_VIDEO_START;
module.link("../../../external-video-player/mutations", {
  EXTERNAL_VIDEO_START(v) {
    EXTERNAL_VIDEO_START = v;
  }
}, 6);
const YOUTUBE_SHORTS_REGEX = new RegExp(/^(?:https?:\/\/)?(?:www\.)?(youtube\.com\/shorts)\/.+$/);
const SmartMediaShareContainer = props => {
  const [startExternalVideo] = useMutation(EXTERNAL_VIDEO_START);
  const startWatching = url => {
    let externalVideoUrl = url;
    if (YOUTUBE_SHORTS_REGEX.test(url)) {
      const shortsUrl = url.replace('shorts/', 'watch?v=');
      externalVideoUrl = shortsUrl;
    } else if (Panopto.canPlay(url)) {
      externalVideoUrl = Panopto.getSocialUrl(url);
    }
    startExternalVideo({
      variables: {
        externalVideoUrl
      }
    });
  };
  const isRTL = layoutSelect(i => i.isRTL);
  return /*#__PURE__*/React.createElement(SmartMediaShare, _objectSpread({
    startWatching,
    isRTL,
    isMobile: isMobile()
  }, props));
};
module.exportDefault(SmartMediaShareContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toolbar/smart-video-share/styles.js                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
const QuickVideoButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-left: .5rem;\n\n  i {\n    color: unset;\n    font-size: 1rem;\n    padding-left: 20%;\n    right: 2px;\n\n    [dir=\"rtl\"] & {\n      -webkit-transform: scale(-1, 1);\n      -moz-transform: scale(-1, 1);\n      -ms-transform: scale(-1, 1);\n      -o-transform: scale(-1, 1);\n      transform: scale(-1, 1);\n    }\n  }\n"])));
module.exportDefault({
  QuickVideoButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toolbar/component.jsx                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 3);
let injectWbResizeEvent;
module.link("/imports/ui/components/presentation/resize-wrapper/component", {
  default(v) {
    injectWbResizeEvent = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
let HUNDRED_PERCENT, MAX_PERCENT, STEP;
module.link("/imports/utils/slideCalcUtils", {
  HUNDRED_PERCENT(v) {
    HUNDRED_PERCENT = v;
  },
  MAX_PERCENT(v) {
    MAX_PERCENT = v;
  },
  STEP(v) {
    STEP = v;
  }
}, 6);
let PresentationToolbarItemType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/presentation-toolbar-item/enums", {
  PresentationToolbarItemType(v) {
    PresentationToolbarItemType = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
let ZoomTool;
module.link("./zoom-tool/component", {
  default(v) {
    ZoomTool = v;
  }
}, 9);
let SmartMediaShareContainer;
module.link("./smart-video-share/container", {
  default(v) {
    SmartMediaShareContainer = v;
  }
}, 10);
let TooltipContainer;
module.link("/imports/ui/components/common/tooltip/container", {
  default(v) {
    TooltipContainer = v;
  }
}, 11);
let KEY_CODES;
module.link("/imports/utils/keyCodes", {
  default(v) {
    KEY_CODES = v;
  }
}, 12);
let Spinner;
module.link("/imports/ui/components/common/spinner/component", {
  default(v) {
    Spinner = v;
  }
}, 13);
let Separator;
module.link("/imports/ui/components/common/separator/component", {
  default(v) {
    Separator = v;
  }
}, 14);
const intlMessages = defineMessages({
  previousSlideLabel: {
    id: 'app.presentation.presentationToolbar.prevSlideLabel',
    description: 'Previous slide button label'
  },
  previousSlideDesc: {
    id: 'app.presentation.presentationToolbar.prevSlideDesc',
    description: 'Aria description for when switching to previous slide'
  },
  nextSlideLabel: {
    id: 'app.presentation.presentationToolbar.nextSlideLabel',
    description: 'Next slide button label'
  },
  nextSlideDesc: {
    id: 'app.presentation.presentationToolbar.nextSlideDesc',
    description: 'Aria description for when switching to next slide'
  },
  noNextSlideDesc: {
    id: 'app.presentation.presentationToolbar.noNextSlideDesc',
    description: ''
  },
  noPrevSlideDesc: {
    id: 'app.presentation.presentationToolbar.noPrevSlideDesc',
    description: ''
  },
  skipSlideLabel: {
    id: 'app.presentation.presentationToolbar.skipSlideLabel',
    description: 'Aria label for when switching to a specific slide'
  },
  skipSlideDesc: {
    id: 'app.presentation.presentationToolbar.skipSlideDesc',
    description: 'Aria description for when switching to a specific slide'
  },
  goToSlide: {
    id: 'app.presentation.presentationToolbar.goToSlide',
    description: 'button for slide select'
  },
  selectLabel: {
    id: 'app.presentation.presentationToolbar.selectLabel',
    description: 'slide select label'
  },
  fitToWidth: {
    id: 'app.presentation.presentationToolbar.fitToWidth',
    description: 'button for fit to width'
  },
  fitToWidthDesc: {
    id: 'app.presentation.presentationToolbar.fitWidthDesc',
    description: 'Aria description to display the whole width of the slide'
  },
  fitToPage: {
    id: 'app.presentation.presentationToolbar.fitToPage',
    description: 'button label for fit to width'
  },
  fitToPageDesc: {
    id: 'app.presentation.presentationToolbar.fitScreenDesc',
    description: 'Aria description to display the whole slide'
  },
  presentationLabel: {
    id: 'app.presentationUploder.title',
    description: 'presentation area element label'
  },
  toolbarMultiUserOn: {
    id: 'app.whiteboard.toolbar.multiUserOn',
    description: 'Whiteboard toolbar turn multi-user on menu'
  },
  toolbarMultiUserOff: {
    id: 'app.whiteboard.toolbar.multiUserOff',
    description: 'Whiteboard toolbar turn multi-user off menu'
  },
  infiniteWhiteboardOn: {
    id: 'app.whiteboard.toolbar.infiniteWhiteboardOn',
    description: 'Whiteboard toolbar turn infinite wb on'
  },
  infiniteWhiteboardOff: {
    id: 'app.whiteboard.toolbar.infiniteWhiteboardOff',
    description: 'Whiteboard toolbar turn infinite wb off'
  },
  pan: {
    id: 'app.whiteboard.toolbar.tools.hand',
    description: 'presentation toolbar pan label'
  }
});
class PresentationToolbar extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      wasFTWActive: false
    };
    this.setWasActive = this.setWasActive.bind(this);
    this.handleFTWSlideChange = this.handleFTWSlideChange.bind(this);
    this.handleSkipToSlideChange = this.handleSkipToSlideChange.bind(this);
    this.change = this.change.bind(this);
    this.renderAriaDescs = this.renderAriaDescs.bind(this);
    this.nextSlideHandler = this.nextSlideHandler.bind(this);
    this.previousSlideHandler = this.previousSlideHandler.bind(this);
    this.fullscreenToggleHandler = this.fullscreenToggleHandler.bind(this);
    this.switchSlide = this.switchSlide.bind(this);
    this.handleSwitchWhiteboardMode = this.handleSwitchWhiteboardMode.bind(this);
  }
  componentDidMount() {
    document.addEventListener('keydown', this.switchSlide);
  }
  componentDidUpdate(prevProps) {
    const {
      zoom,
      setIsPanning,
      fitToWidth,
      fitToWidthHandler,
      currentSlideNum
    } = this.props;
    const {
      wasFTWActive
    } = this.state;
    if (zoom <= HUNDRED_PERCENT && zoom !== prevProps.zoom && !fitToWidth) setIsPanning();
    if ((prevProps === null || prevProps === void 0 ? void 0 : prevProps.currentSlideNum) !== currentSlideNum && !fitToWidth && wasFTWActive) {
      setTimeout(() => {
        fitToWidthHandler();
        this.setWasActive(false);
      }, 150);
    }
  }
  componentWillUnmount() {
    document.removeEventListener('keydown', this.switchSlide);
  }
  handleFTWSlideChange() {
    const {
      fitToWidth,
      fitToWidthHandler
    } = this.props;
    if (fitToWidth) {
      fitToWidthHandler();
      this.setWasActive(fitToWidth);
    }
  }
  handleSkipToSlideChange(event) {
    const {
      skipToSlide,
      currentSlide,
      setPresentationPageInfiniteWhiteboard
    } = this.props;
    const requestedSlideNum = Number.parseInt(event.target.value, 10);
    const isInfiniteWhiteboard = currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.infiniteWhiteboard;
    if (isInfiniteWhiteboard) setPresentationPageInfiniteWhiteboard(false);
    this.handleFTWSlideChange();
    if (event) event.currentTarget.blur();
    skipToSlide(requestedSlideNum);
  }
  handleSwitchWhiteboardMode() {
    const {
      multiUser,
      whiteboardId,
      removeWhiteboardGlobalAccess,
      addWhiteboardGlobalAccess
    } = this.props;
    if (multiUser) {
      return removeWhiteboardGlobalAccess(whiteboardId);
    }
    return addWhiteboardGlobalAccess(whiteboardId);
  }
  setWasActive(wasFTWActive) {
    this.setState({
      wasFTWActive
    });
  }
  fullscreenToggleHandler() {
    const {
      fullscreenElementId,
      isFullscreen,
      layoutContextDispatch,
      fullscreenAction,
      fullscreenRef,
      handleToggleFullScreen
    } = this.props;
    handleToggleFullScreen(fullscreenRef);
    const newElement = isFullscreen ? '' : fullscreenElementId;
    layoutContextDispatch({
      type: fullscreenAction,
      value: {
        element: newElement,
        group: ''
      }
    });
  }
  nextSlideHandler(event) {
    const {
      nextSlide,
      endCurrentPoll,
      currentSlide,
      setPresentationPageInfiniteWhiteboard
    } = this.props;
    const isInfiniteWhiteboard = currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.infiniteWhiteboard;
    if (isInfiniteWhiteboard) setPresentationPageInfiniteWhiteboard(false);
    this.handleFTWSlideChange();
    if (event) event.currentTarget.blur();
    endCurrentPoll();
    nextSlide();
  }
  previousSlideHandler(event) {
    const {
      previousSlide,
      endCurrentPoll,
      currentSlide,
      setPresentationPageInfiniteWhiteboard
    } = this.props;
    const isInfiniteWhiteboard = currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.infiniteWhiteboard;
    if (isInfiniteWhiteboard) setPresentationPageInfiniteWhiteboard(false);
    this.handleFTWSlideChange();
    if (event) event.currentTarget.blur();
    endCurrentPoll();
    previousSlide();
  }
  switchSlide(event) {
    const {
      target,
      which
    } = event;
    const isBody = target.nodeName === 'BODY';
    if (isBody) {
      switch (which) {
        case KEY_CODES.ARROW_LEFT:
        case KEY_CODES.PAGE_UP:
          this.previousSlideHandler();
          break;
        case KEY_CODES.ARROW_RIGHT:
        case KEY_CODES.PAGE_DOWN:
          this.nextSlideHandler();
          break;
        case KEY_CODES.ENTER:
          this.fullscreenToggleHandler();
          break;
        default:
      }
    }
  }
  change(value) {
    const {
      zoomChanger
    } = this.props;
    zoomChanger(value);
  }
  renderToolbarPluginItems() {
    var _pluginProvidedItems;
    let pluginProvidedItems = [];
    if (this.props) {
      const {
        pluginProvidedPresentationToolbarItems
      } = this.props;
      pluginProvidedItems = pluginProvidedPresentationToolbarItems;
    }
    return (_pluginProvidedItems = pluginProvidedItems) === null || _pluginProvidedItems === void 0 ? void 0 : _pluginProvidedItems.map(ppb => {
      let componentToReturn;
      const ppbId = ppb.id;
      switch (ppb.type) {
        case PresentationToolbarItemType.BUTTON:
          componentToReturn = /*#__PURE__*/React.createElement(Button, {
            key: ppbId,
            style: _objectSpread({
              marginLeft: '2px'
            }, ppb.style),
            label: ppb.label,
            onClick: ppb.onClick,
            tooltipLabel: ppb.tooltip
          });
          break;
        case PresentationToolbarItemType.SPINNER:
          componentToReturn = /*#__PURE__*/React.createElement(Spinner, {
            key: ppbId
          });
          break;
        case PresentationToolbarItemType.SEPARATOR:
          componentToReturn = /*#__PURE__*/React.createElement(Separator, null);
          break;
        default:
          componentToReturn = null;
      }
      return componentToReturn;
    });
  }
  renderAriaDescs() {
    const {
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      hidden: true
    }, /*#__PURE__*/React.createElement("div", {
      id: "prevSlideDesc"
    }, intl.formatMessage(intlMessages.previousSlideDesc)), /*#__PURE__*/React.createElement("div", {
      id: "noPrevSlideDesc"
    }, intl.formatMessage(intlMessages.noPrevSlideDesc)), /*#__PURE__*/React.createElement("div", {
      id: "nextSlideDesc"
    }, intl.formatMessage(intlMessages.nextSlideDesc)), /*#__PURE__*/React.createElement("div", {
      id: "noNextSlideDesc"
    }, intl.formatMessage(intlMessages.noNextSlideDesc)), /*#__PURE__*/React.createElement("div", {
      id: "skipSlideDesc"
    }, intl.formatMessage(intlMessages.skipSlideDesc)), /*#__PURE__*/React.createElement("div", {
      id: "fitWidthDesc"
    }, intl.formatMessage(intlMessages.fitToWidthDesc)), /*#__PURE__*/React.createElement("div", {
      id: "fitPageDesc"
    }, intl.formatMessage(intlMessages.fitToPageDesc)));
  }
  renderSkipSlideOpts(numberOfSlides) {
    // Fill drop down menu with all the slides in presentation
    const {
      intl
    } = this.props;
    const optionList = [];
    for (let i = 1; i <= numberOfSlides; i += 1) {
      optionList.push( /*#__PURE__*/React.createElement("option", {
        value: i,
        key: i
      }, intl.formatMessage(intlMessages.goToSlide, {
        0: i
      })));
    }
    return optionList;
  }
  render() {
    const {
      currentSlideNum,
      numberOfSlides,
      fitToWidthHandler,
      fitToWidth,
      intl,
      zoom,
      isMeteorConnected,
      isPollingEnabled,
      amIPresenter,
      startPoll,
      currentSlide,
      slidePosition,
      meetingIsBreakout,
      multiUserSize,
      multiUser,
      setPresentationPageInfiniteWhiteboard,
      allowInfiniteWhiteboard,
      allowInfiniteWhiteboardInBreakouts,
      infiniteWhiteboardIcon,
      resetSlide,
      zoomChanger,
      tldrawAPI
    } = this.props;
    const {
      isMobile
    } = deviceInfo;
    const startOfSlides = !(currentSlideNum > 1);
    const endOfSlides = !(currentSlideNum < numberOfSlides);
    const prevSlideAriaLabel = startOfSlides ? intl.formatMessage(intlMessages.previousSlideLabel) : "".concat(intl.formatMessage(intlMessages.previousSlideLabel), " (").concat(currentSlideNum <= 1 ? '' : currentSlideNum - 1, ")");
    const nextSlideAriaLabel = endOfSlides ? intl.formatMessage(intlMessages.nextSlideLabel) : "".concat(intl.formatMessage(intlMessages.nextSlideLabel), " (").concat(currentSlideNum >= 1 ? currentSlideNum + 1 : '', ")");
    const isInfiniteWhiteboard = currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.infiniteWhiteboard;
    const showIWB = allowInfiniteWhiteboard && !meetingIsBreakout || meetingIsBreakout && allowInfiniteWhiteboardInBreakouts;
    return /*#__PURE__*/React.createElement(Styled.PresentationToolbarWrapper, {
      id: "presentationToolbarWrapper"
    }, this.renderAriaDescs(), /*#__PURE__*/React.createElement(Styled.QuickPollButtonWrapper, null, this.renderToolbarPluginItems(), isPollingEnabled ? /*#__PURE__*/React.createElement(Styled.QuickPollButton, {
      intl,
      amIPresenter,
      startPoll,
      currentSlide
    }) : null, /*#__PURE__*/React.createElement(SmartMediaShareContainer, {
      intl,
      currentSlide
    })), /*#__PURE__*/React.createElement(Styled.PresentationSlideControls, null, /*#__PURE__*/React.createElement(Styled.PrevSlideButton, {
      role: "button",
      "aria-label": prevSlideAriaLabel,
      "aria-describedby": startOfSlides ? 'noPrevSlideDesc' : 'prevSlideDesc',
      disabled: startOfSlides || !isMeteorConnected,
      color: "light",
      circle: true,
      icon: "left_arrow",
      size: "md",
      onClick: this.previousSlideHandler,
      label: intl.formatMessage(intlMessages.previousSlideLabel),
      hideLabel: true,
      "data-test": "prevSlide"
    }), /*#__PURE__*/React.createElement(TooltipContainer, {
      title: intl.formatMessage(intlMessages.selectLabel)
    }, /*#__PURE__*/React.createElement(Styled.SkipSlideSelect, {
      id: "skipSlide",
      "aria-label": intl.formatMessage(intlMessages.skipSlideLabel),
      "aria-describedby": "skipSlideDesc",
      "aria-live": "polite",
      "aria-relevant": "all",
      disabled: !isMeteorConnected,
      value: currentSlideNum,
      onChange: this.handleSkipToSlideChange,
      "data-test": "skipSlide"
    }, this.renderSkipSlideOpts(numberOfSlides))), /*#__PURE__*/React.createElement(Styled.NextSlideButton, {
      role: "button",
      "aria-label": nextSlideAriaLabel,
      "aria-describedby": endOfSlides ? 'noNextSlideDesc' : 'nextSlideDesc',
      disabled: endOfSlides || !isMeteorConnected,
      color: "light",
      circle: true,
      icon: "right_arrow",
      size: "md",
      onClick: this.nextSlideHandler,
      label: intl.formatMessage(intlMessages.nextSlideLabel),
      hideLabel: true,
      "data-test": "nextSlide"
    })), /*#__PURE__*/React.createElement(Styled.PresentationZoomControls, null, showIWB && /*#__PURE__*/React.createElement(Styled.InfiniteWhiteboardButton, {
      "data-test": isInfiniteWhiteboard ? 'turnInfiniteWhiteboardOff' : 'turnInfiniteWhiteboardOn',
      role: "button",
      "aria-label": isInfiniteWhiteboard ? intl.formatMessage(intlMessages.infiniteWhiteboardOff) : intl.formatMessage(intlMessages.infiniteWhiteboardOn),
      color: "light",
      disabled: !isMeteorConnected,
      customIcon: infiniteWhiteboardIcon(isInfiniteWhiteboard),
      size: "md",
      circle: true,
      onClick: () => {
        if (isInfiniteWhiteboard) {
          tldrawAPI.setCamera({
            x: 0,
            y: 0
          });
          resetSlide();
          zoomChanger(100);
        }
        setPresentationPageInfiniteWhiteboard(!isInfiniteWhiteboard);
      },
      label: isInfiniteWhiteboard ? intl.formatMessage(intlMessages.infiniteWhiteboardOff) : intl.formatMessage(intlMessages.infiniteWhiteboardOn),
      hideLabel: true
    }), /*#__PURE__*/React.createElement(Styled.WBAccessButton, {
      "data-test": multiUser ? 'turnMultiUsersWhiteboardOff' : 'turnMultiUsersWhiteboardOn',
      role: "button",
      "aria-label": multiUser ? intl.formatMessage(intlMessages.toolbarMultiUserOff) : intl.formatMessage(intlMessages.toolbarMultiUserOn),
      color: "light",
      disabled: !isMeteorConnected,
      icon: multiUser ? 'multi_whiteboard' : 'whiteboard',
      size: "md",
      circle: true,
      onClick: () => this.handleSwitchWhiteboardMode(!multiUser),
      label: multiUser ? intl.formatMessage(intlMessages.toolbarMultiUserOff) : intl.formatMessage(intlMessages.toolbarMultiUserOn),
      hideLabel: true
    }), multiUser ? /*#__PURE__*/React.createElement(Styled.MultiUserTool, {
      onClick: () => this.handleSwitchWhiteboardMode(!multiUser)
    }, multiUserSize) : /*#__PURE__*/React.createElement(Styled.MUTPlaceholder, null), !isMobile ? /*#__PURE__*/React.createElement(TooltipContainer, null, /*#__PURE__*/React.createElement(ZoomTool, {
      slidePosition: slidePosition,
      zoomValue: zoom,
      currentSlideNum: currentSlideNum,
      change: this.change,
      minBound: HUNDRED_PERCENT,
      maxBound: MAX_PERCENT,
      step: STEP,
      isInfiniteWhiteboard: isInfiniteWhiteboard,
      isMeteorConnected: isMeteorConnected
    })) : null, /*#__PURE__*/React.createElement(Styled.FitToWidthButton, {
      role: "button",
      "data-test": "fitToWidthButton",
      "aria-describedby": fitToWidth ? 'fitPageDesc' : 'fitWidthDesc',
      "aria-label": fitToWidth ? "".concat(intl.formatMessage(intlMessages.presentationLabel), " ").concat(intl.formatMessage(intlMessages.fitToPage)) : "".concat(intl.formatMessage(intlMessages.presentationLabel), " ").concat(intl.formatMessage(intlMessages.fitToWidth)),
      color: "light",
      disabled: !isMeteorConnected,
      icon: "fit_to_width",
      size: "md",
      circle: true,
      onClick: fitToWidthHandler,
      label: fitToWidth ? intl.formatMessage(intlMessages.fitToPage) : intl.formatMessage(intlMessages.fitToWidth),
      hideLabel: true,
      $fitToWidth: fitToWidth
    })));
  }
}
PresentationToolbar.propTypes = {
  // Number of current slide being displayed
  currentSlideNum: PropTypes.number.isRequired,
  // Total number of slides in this presentation
  numberOfSlides: PropTypes.number.isRequired,
  // Actions required for the presenter toolbar
  nextSlide: PropTypes.func.isRequired,
  previousSlide: PropTypes.func.isRequired,
  skipToSlide: PropTypes.func.isRequired,
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  zoomChanger: PropTypes.func.isRequired,
  fitToWidthHandler: PropTypes.func.isRequired,
  fitToWidth: PropTypes.bool.isRequired,
  zoom: PropTypes.number.isRequired,
  isMeteorConnected: PropTypes.bool.isRequired,
  fullscreenElementId: PropTypes.string.isRequired,
  fullscreenAction: PropTypes.string.isRequired,
  isFullscreen: PropTypes.bool.isRequired,
  layoutContextDispatch: PropTypes.func.isRequired,
  setIsPanning: PropTypes.func.isRequired,
  multiUser: PropTypes.bool.isRequired,
  whiteboardId: PropTypes.string.isRequired,
  removeWhiteboardGlobalAccess: PropTypes.func.isRequired,
  addWhiteboardGlobalAccess: PropTypes.func.isRequired,
  fullscreenRef: PropTypes.instanceOf(Element),
  handleToggleFullScreen: PropTypes.func.isRequired,
  isPollingEnabled: PropTypes.bool.isRequired,
  amIPresenter: PropTypes.bool.isRequired,
  startPoll: PropTypes.func.isRequired,
  currentSlide: PropTypes.shape().isRequired,
  slidePosition: PropTypes.shape().isRequired,
  multiUserSize: PropTypes.number.isRequired
};
PresentationToolbar.defaultProps = {
  fullscreenRef: null
};
module.exportDefault(injectWbResizeEvent(injectIntl(PresentationToolbar)));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toolbar/container.jsx                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let FullscreenService;
module.link("/imports/ui/components/common/fullscreen-button/service", {
  default(v) {
    FullscreenService = v;
  }
}, 3);
let useIsInfiniteWhiteboardEnabled, useIsPollingEnabled;
module.link("/imports/ui/services/features", {
  useIsInfiniteWhiteboardEnabled(v) {
    useIsInfiniteWhiteboardEnabled = v;
  },
  useIsPollingEnabled(v) {
    useIsPollingEnabled = v;
  }
}, 4);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 5);
let POLL_CANCEL, POLL_CREATE;
module.link("/imports/ui/components/poll/mutations", {
  POLL_CANCEL(v) {
    POLL_CANCEL = v;
  },
  POLL_CREATE(v) {
    POLL_CREATE = v;
  }
}, 6);
let PRESENTATION_SET_ZOOM, PRESENTATION_SET_PAGE, PRESENTATION_SET_PAGE_INFINITE_WHITEBOARD;
module.link("../mutations", {
  PRESENTATION_SET_ZOOM(v) {
    PRESENTATION_SET_ZOOM = v;
  },
  PRESENTATION_SET_PAGE(v) {
    PRESENTATION_SET_PAGE = v;
  },
  PRESENTATION_SET_PAGE_INFINITE_WHITEBOARD(v) {
    PRESENTATION_SET_PAGE_INFINITE_WHITEBOARD = v;
  }
}, 7);
let PresentationToolbar;
module.link("./component", {
  default(v) {
    PresentationToolbar = v;
  }
}, 8);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 9);
let useMeetingIsBreakout;
module.link("/imports/ui/components/app/service", {
  useMeetingIsBreakout(v) {
    useMeetingIsBreakout = v;
  }
}, 10);
const infiniteWhiteboardIcon = isinfiniteWhiteboard => {
  if (isinfiniteWhiteboard) {
    return /*#__PURE__*/React.createElement("svg", {
      width: "16",
      height: "16",
      viewBox: "0 0 16 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/React.createElement("path", {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14.6667 3H1.33333C1.14924 3 1 3.14924 1 3.33333V13.3333C1 13.5174 1.14924 13.6667 1.33333 13.6667H14.6667C14.8508 13.6667 15 13.5174 15 13.3333V3.33333C15 3.14924 14.8508 3 14.6667 3ZM1.33333 2C0.596954 2 0 2.59695 0 3.33333V13.3333C0 14.0697 0.596953 14.6667 1.33333 14.6667H14.6667C15.403 14.6667 16 14.0697 16 13.3333V3.33333C16 2.59695 15.403 2 14.6667 2H1.33333Z",
      fill: "#4E5A66"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M12.875 11.875L9.125 8.125M9.125 8.125L9.125 10.9375M9.125 8.125L11.9375 8.125",
      stroke: "#4E5A66",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }), /*#__PURE__*/React.createElement("path", {
      d: "M3.125 5.125L6.875 8.875M6.875 8.875L6.875 6.0625M6.875 8.875L4.0625 8.875",
      stroke: "#4E5A66",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
  }
  return /*#__PURE__*/React.createElement("svg", {
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M14.6667 3H1.33333C1.14924 3 1 3.14924 1 3.33333V13.3333C1 13.5174 1.14924 13.6667 1.33333 13.6667H14.6667C14.8508 13.6667 15 13.5174 15 13.3333V3.33333C15 3.14924 14.8508 3 14.6667 3ZM1.33333 2C0.596954 2 0 2.59695 0 3.33333V13.3333C0 14.0697 0.596953 14.6667 1.33333 14.6667H14.6667C15.403 14.6667 16 14.0697 16 13.3333V3.33333C16 2.59695 15.403 2 14.6667 2H1.33333Z",
    fill: "#4E5A66"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M9.125 8.125L12.875 11.875M12.875 11.875L12.875 9.0625M12.875 11.875L10.0625 11.875",
    stroke: "#4E5A66",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M6.875 8.875L3.125 5.125M3.125 5.125L3.125 7.9375M3.125 5.125L5.9375 5.125",
    stroke: "#4E5A66",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }));
};
const PresentationToolbarContainer = props => {
  const pluginsContext = useContext(PluginsContext);
  const {
    pluginsExtensibleAreasAggregatedState
  } = pluginsContext;
  const WHITEBOARD_CONFIG = window.meetingClientSettings.public.whiteboard;
  const {
    userIsPresenter,
    layoutSwapped,
    currentSlideNum,
    presentationId,
    numberOfSlides,
    hasPoll,
    currentSlide,
    currentPresentationPage
  } = props;
  const handleToggleFullScreen = ref => FullscreenService.toggleFullScreen(ref);
  const [stopPoll] = useMutation(POLL_CANCEL);
  const [createPoll] = useMutation(POLL_CREATE);
  const [presentationSetZoom] = useMutation(PRESENTATION_SET_ZOOM);
  const [presentationSetPage] = useMutation(PRESENTATION_SET_PAGE);
  const [presentationSetPageInfiniteWhiteboard] = useMutation(PRESENTATION_SET_PAGE_INFINITE_WHITEBOARD);
  const resetSlide = () => {
    const {
      pageId,
      num
    } = currentPresentationPage;
    presentationSetZoom({
      variables: {
        presentationId,
        pageId,
        pageNum: num,
        xOffset: 0,
        yOffset: 0,
        widthRatio: 100,
        heightRatio: 100
      }
    });
  };
  const endCurrentPoll = () => {
    if (hasPoll) stopPoll();
  };
  const setPresentationPage = pageId => {
    presentationSetPage({
      variables: {
        presentationId,
        pageId
      }
    });
  };
  const setPresentationPageInfiniteWhiteboard = infiniteWhiteboard => {
    const pageId = "".concat(presentationId, "/").concat(currentSlideNum);
    presentationSetPageInfiniteWhiteboard({
      variables: {
        pageId,
        infiniteWhiteboard
      }
    });
  };
  const skipToSlide = slideNum => {
    const slideId = "".concat(presentationId, "/").concat(slideNum);
    setPresentationPage(slideId);
  };
  const previousSlide = () => {
    const prevSlideNum = currentSlideNum - 1;
    if (prevSlideNum < 1) {
      return;
    }
    skipToSlide(prevSlideNum);
  };
  const nextSlide = () => {
    const nextSlideNum = currentSlideNum + 1;
    if (nextSlideNum > numberOfSlides) {
      return;
    }
    skipToSlide(nextSlideNum);
  };
  const startPoll = function (pollType, pollId) {
    let answers = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let question = arguments.length > 3 ? arguments[3] : undefined;
    let isMultipleResponse = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    Session.setItem('openPanel', 'poll');
    Session.setItem('forcePollOpen', true);
    window.dispatchEvent(new Event('panelChanged'));
    createPoll({
      variables: {
        pollType,
        pollId: "".concat(pollId, "/").concat(new Date().getTime()),
        secretPoll: false,
        question,
        isMultipleResponse,
        answers
      }
    });
  };
  const isPollingEnabled = useIsPollingEnabled();
  const meetingIsBreakout = useMeetingIsBreakout();
  const allowInfiniteWhiteboard = useIsInfiniteWhiteboardEnabled();
  if (userIsPresenter && !layoutSwapped) {
    // Only show controls if user is presenter and layout isn't swapped

    const pluginProvidedPresentationToolbarItems = pluginsExtensibleAreasAggregatedState === null || pluginsExtensibleAreasAggregatedState === void 0 ? void 0 : pluginsExtensibleAreasAggregatedState.presentationToolbarItems;
    return /*#__PURE__*/React.createElement(PresentationToolbar, _extends({}, props, {
      amIPresenter: userIsPresenter,
      endCurrentPoll: endCurrentPoll,
      isPollingEnabled: isPollingEnabled,
      allowInfiniteWhiteboardInBreakouts: WHITEBOARD_CONFIG === null || WHITEBOARD_CONFIG === void 0 ? void 0 : WHITEBOARD_CONFIG.allowInfiniteWhiteboardInBreakouts,
      allowInfiniteWhiteboard: allowInfiniteWhiteboard
      // TODO: Remove this
      ,
      isMeteorConnected: true,
      pluginProvidedPresentationToolbarItems,
      handleToggleFullScreen,
      startPoll,
      previousSlide,
      nextSlide,
      skipToSlide,
      setPresentationPageInfiniteWhiteboard,
      currentSlide,
      currentPresentationPage,
      infiniteWhiteboardIcon,
      resetSlide,
      meetingIsBreakout
    }));
  }
  return null;
};
module.exportDefault(PresentationToolbarContainer);
PresentationToolbarContainer.propTypes = {
  // Number of current slide being displayed
  currentSlideNum: PropTypes.number.isRequired,
  // Total number of slides in this presentation
  numberOfSlides: PropTypes.number.isRequired,
  // Actions required for the presenter toolbar
  layoutSwapped: PropTypes.bool
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toolbar/styles.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let QuickPollDropdownContainer;
module.link("/imports/ui/components/actions-bar/quick-poll-dropdown/container", {
  default(v) {
    QuickPollDropdownContainer = v;
  }
}, 1);
let colorOffWhite, colorBlueLightest, toolbarButtonColor, colorDanger, colorWhite, colorGrayDark;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  colorBlueLightest(v) {
    colorBlueLightest = v;
  },
  toolbarButtonColor(v) {
    toolbarButtonColor = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  }
}, 2);
let whiteboardToolbarMargin, whiteboardToolbarPaddingSm, whiteboardToolbarPadding, borderSize, smPaddingY, borderSizeLarge, smPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  whiteboardToolbarMargin(v) {
    whiteboardToolbarMargin = v;
  },
  whiteboardToolbarPaddingSm(v) {
    whiteboardToolbarPaddingSm = v;
  },
  whiteboardToolbarPadding(v) {
    whiteboardToolbarPadding = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  }
}, 3);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 4);
const PresentationToolbarWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  align-self: center;\n  z-index: 1;\n  background-color: ", ";\n  border-top: 1px solid ", ";\n  min-width: fit-content;\n  width: 100%;\n  bottom: 0px;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  padding: 2px;\n\n  select {\n    &:-moz-focusring {\n      outline: none;\n    }\n    border: 0;\n    background-color: ", ";\n    color: ", ";\n    cursor: pointer;\n    margin: 0 ", " 0 0;\n    padding: ", ";\n    padding-left: ", ";\n\n    [dir=\"rtl\"] & {\n      margin: 0 0 0 ", ";\n      padding: ", ";\n      padding-right: ", ";\n    }\n\n    & > option {\n      color: ", ";\n      background-color: ", ";\n    }\n  }\n\n  i {\n    color: ", ";\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n"])), colorOffWhite, colorBlueLightest, colorOffWhite, toolbarButtonColor, whiteboardToolbarMargin, whiteboardToolbarPadding, whiteboardToolbarPaddingSm, whiteboardToolbarMargin, whiteboardToolbarPadding, whiteboardToolbarPaddingSm, toolbarButtonColor, colorOffWhite, toolbarButtonColor);
const QuickPollButton = styled(QuickPollDropdownContainer)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n  color: ", ";\n  background-color: ", ";\n  border-radius: 0;\n  box-shadow: none !important;\n  border: 0;\n\n  &:focus {\n    background-color: ", ";\n  }\n"])), toolbarButtonColor, colorOffWhite, colorOffWhite);
const QuickPollButtonWrapper = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n"])));
const PresentationSlideControls = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  justify-content: center;\n  padding-left: ", ";\n  padding-right: ", ";\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  & > button {\n    padding: ", ";\n  }\n"])), whiteboardToolbarPadding, whiteboardToolbarPadding, whiteboardToolbarPadding);
const PrevSlideButton = styled(Button)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  i {\n    font-size: 1rem;\n    padding-left: 20%;\n\n    [dir=\"rtl\"] & {\n      -webkit-transform: scale(-1, 1);\n      -moz-transform: scale(-1, 1);\n      -ms-transform: scale(-1, 1);\n      -o-transform: scale(-1, 1);\n      transform: scale(-1, 1);\n    }\n  }\n"])));
const NextSlideButton = styled(Button)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  i {\n    font-size: 1rem;\n    padding-left: 60%;\n    \n    [dir=\"rtl\"] & {\n      -webkit-transform: scale(-1, 1);\n      -moz-transform: scale(-1, 1);\n      -ms-transform: scale(-1, 1);\n      -o-transform: scale(-1, 1);\n      transform: scale(-1, 1);\n    }\n  }\n"])));
const SkipSlideSelect = styled.select(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  padding: 0 ", ";\n  margin: ", ";\n  margin-left: ", ";\n\n  [dir=\"rtl\"] & {\n    margin: ", ";\n    margin-right: ", ";\n  }\n\n  &:-moz-focusring {\n    outline: none;\n  }\n\n  &:focus,\n  &:hover {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n    background-color: #DCE4EC;\n    border-radius: 4px;\n  }\n\n  &:focus {\n    outline-style: solid;\n    box-shadow: 0 0 0 1px #cdd6e0 !important;\n  }\n"])), smPaddingY, borderSize, whiteboardToolbarMargin, borderSize, whiteboardToolbarMargin, borderSize);
const PresentationZoomControls = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  justify-content: flex-end;\n  padding: 0 ", " 0 0;\n\n  [dir=\"rtl\"] & {\n    padding: 0 0 0 ", ";\n  }\n\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  button {\n    padding: ", ";\n  }\n\n  i {\n    font-size: 1.2rem;\n  }\n"])), whiteboardToolbarPadding, whiteboardToolbarPadding, whiteboardToolbarPadding);
const FitToWidthButton = styled(Button)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  border: none !important;\n\n  & > i {\n    font-size: 1.2rem;\n\n    [dir=\"rtl\"] & {\n      -webkit-transform: scale(-1, 1);\n      -moz-transform: scale(-1, 1);\n      -ms-transform: scale(-1, 1);\n      -o-transform: scale(-1, 1);\n      transform: scale(-1, 1);\n    }\n  }\n\n  margin-left: ", ";\n  margin-right: ", ";\n\n  position: relative;\n  color: ", ";\n  background-color: ", ";\n  border-radius: 0;\n  box-shadow: none !important;\n  border: 0;\n\n  ", "\n\n  &:focus {\n    background-color: ", ";\n    border: 0;\n  }\n"])), whiteboardToolbarMargin, whiteboardToolbarMargin, toolbarButtonColor, colorOffWhite, _ref => {
  let {
    $fitToWidth
  } = _ref;
  return $fitToWidth && "\n    & > span {\n      border: solid ".concat(borderSizeLarge, " ").concat(colorGrayDark, ";\n    }\n  ");
}, colorOffWhite);
const MultiUserTool = styled.span(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  border-radius: 50%;\n  width: 1rem;\n  height: 1rem;\n  position: relative;\n  z-index: 2;\n  bottom: 0.5rem;\n  color: ", ";\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  box-shadow: 1px 1px ", " ", ";\n  font-size: ", ";\n  user-select: none;\n  cursor: pointer;\n\n  [dir=\"ltr\"] & {\n    right: 1rem;\n  }\n\n  [dir=\"rtl\"] & {\n    left: 1rem;\n  }\n"])), colorDanger, colorWhite, borderSizeLarge, colorGrayDark, smPaddingX);
const MUTPlaceholder = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  width: 1rem;\n  height: 1rem;\n  position: relative;\n  bottom: 0.5rem;\n\n  [dir=\"ltr\"] & {\n    right: 1rem;\n  }\n\n  [dir=\"rtl\"] & {\n    left: 1rem;\n  }\n"])));
const WBAccessButton = styled(Button)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  border: none !important;\n\n  i {\n    font-size: 1.2rem;\n\n    [dir=\"rtl\"] & {\n      -webkit-transform: scale(-1, 1);\n      -moz-transform: scale(-1, 1);\n      -ms-transform: scale(-1, 1);\n      -o-transform: scale(-1, 1);\n      transform: scale(-1, 1);\n    }\n  }\n\n  position: relative;\n  color: ", ";\n  background-color: ", ";\n  border-radius: 0;\n  box-shadow: none !important;\n  border: 0;\n\n  &:focus {\n    background-color: ", ";\n    border: 0;\n  }\n"])), toolbarButtonColor, colorOffWhite, colorOffWhite);
const InfiniteWhiteboardButton = styled(Button)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  border: none !important;\n\n  svg {\n    [dir=\"rtl\"] & {\n      -webkit-transform: scale(-1, 1);\n      -moz-transform: scale(-1, 1);\n      -ms-transform: scale(-1, 1);\n      -o-transform: scale(-1, 1);\n      transform: scale(-1, 1);\n    }\n  }\n\n  position: relative;\n  color: ", ";\n  background-color: ", ";\n  border-radius: 0;\n  box-shadow: none !important;\n  border: 0;\n  margin-left: 2px;\n  margin-right: 2px;\n\n  &:focus {\n    background-color: ", ";\n    border: 0;\n  }\n"])), toolbarButtonColor, colorOffWhite, colorOffWhite);
module.exportDefault({
  PresentationToolbarWrapper,
  QuickPollButton,
  QuickPollButtonWrapper,
  PresentationSlideControls,
  PrevSlideButton,
  NextSlideButton,
  SkipSlideSelect,
  PresentationZoomControls,
  FitToWidthButton,
  MultiUserTool,
  WBAccessButton,
  MUTPlaceholder,
  InfiniteWhiteboardButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation-uploader":{"presentation-download-dropdown":{"presentation-download-dropdown-wrapper":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-uploader/presentation-download-dropdown/presentation-download-dropd //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
const propTypes = {
  children: PropTypes.shape({}).isRequired,
  disabled: PropTypes.bool.isRequired
};
class PresentationDownloadDropdownWrapper extends PureComponent {
  validateDisabled(eventHandler) {
    const {
      disabled
    } = this.props;
    if (!disabled && typeof eventHandler === 'function') {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return eventHandler(...args);
    }
    return null;
  }
  render() {
    const {
      disabled,
      children
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.DropdownMenuWrapper, {
      disabled: disabled,
      "aria-disabled": disabled
    }, children);
  }
}
PresentationDownloadDropdownWrapper.propTypes = propTypes;
module.exportDefault(PresentationDownloadDropdownWrapper);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-uploader/presentation-download-dropdown/presentation-download-dropd //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const DropdownMenuWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    display: inline-block;\n\n    &[aria-disabled=\"true\"] {\n    cursor: not-allowed;\n    opacity: .5;\n    box-shadow: none;\n    pointer-events: none;\n  }\n"])));
module.exportDefault({
  DropdownMenuWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-uploader/presentation-download-dropdown/component.jsx               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 3);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 4);
let Trigger;
module.link("/imports/ui/components/common/control-header/right/component", {
  default(v) {
    Trigger = v;
  }
}, 5);
let PresentationDownloadDropdownWrapper;
module.link("./presentation-download-dropdown-wrapper/component", {
  default(v) {
    PresentationDownloadDropdownWrapper = v;
  }
}, 6);
const intlMessages = defineMessages({
  enableOriginalPresentationDownload: {
    id: 'app.presentationUploader.enableOriginalPresentationDownload',
    description: 'Send original presentation to chat'
  },
  disableOriginalPresentationDownload: {
    id: 'app.presentationUploader.disableOriginalPresentationDownload',
    description: 'Send original presentation to chat'
  },
  sendCurrentStateDocument: {
    id: 'app.presentationUploader.exportCurrentStatePresentation',
    description: 'Send presentation to chat in the current state label'
  },
  copySuccess: {
    id: 'app.chat.copySuccess',
    description: 'aria success alert'
  },
  copyErr: {
    id: 'app.chat.copyErr',
    description: 'aria error alert'
  },
  options: {
    id: 'app.presentationUploader.dropdownExportOptions',
    description: 'Chat Options'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  handleDownloadingOfPresentation: PropTypes.func.isRequired,
  handleDownloadableChange: PropTypes.func.isRequired,
  isDownloadable: PropTypes.bool.isRequired,
  allowDownloadOriginal: PropTypes.bool.isRequired,
  allowDownloadConverted: PropTypes.bool.isRequired,
  allowDownloadWithAnnotations: PropTypes.bool.isRequired,
  item: PropTypes.shape({
    id: PropTypes.string,
    filename: PropTypes.string,
    filenameConverted: PropTypes.string,
    isCurrent: PropTypes.bool,
    temporaryPresentationId: PropTypes.string,
    isDownloadable: PropTypes.bool,
    isRemovable: PropTypes.bool,
    conversion: PropTypes.shape({
      done: PropTypes.bool,
      error: PropTypes.bool,
      status: PropTypes.string,
      numPages: PropTypes.number,
      pagesCompleted: PropTypes.number
    }),
    upload: PropTypes.shape({
      done: PropTypes.bool,
      error: PropTypes.bool
    }),
    exportation: PropTypes.shape({
      status: PropTypes.string
    }),
    uploadTimestamp: PropTypes.string,
    downloadableExtension: PropTypes.string
  }),
  closeModal: PropTypes.func.isRequired,
  disabled: PropTypes.bool.isRequired
};
const defaultProps = {
  item: {}
};
class PresentationDownloadDropdown extends PureComponent {
  constructor(props) {
    super(props);
    this.actionsKey = [uniqueId('action-item-'), uniqueId('action-item-'), uniqueId('action-item-')];
  }
  getAvailableActions() {
    const {
      intl,
      handleDownloadingOfPresentation,
      handleDownloadableChange,
      isDownloadable,
      allowDownloadOriginal,
      allowDownloadConverted,
      allowDownloadWithAnnotations,
      item,
      closeModal
    } = this.props;
    this.menuItems = [];
    const {
      filenameConverted,
      name,
      downloadFileUri
    } = item;
    const convertedFileExtension = filenameConverted === null || filenameConverted === void 0 ? void 0 : filenameConverted.split('.').slice(-1)[0];
    const downloadableExtension = downloadFileUri === null || downloadFileUri === void 0 ? void 0 : downloadFileUri.split('.').slice(-1)[0];
    const originalFileExtension = name === null || name === void 0 ? void 0 : name.split('.').slice(-1)[0];
    const changeDownloadOriginalOrConvertedPresentation = (enableDownload, fileStateType) => {
      handleDownloadableChange(item === null || item === void 0 ? void 0 : item.presentationId, fileStateType, enableDownload);
      if (enableDownload) {
        handleDownloadingOfPresentation(fileStateType);
      }
      closeModal();
    };
    if (allowDownloadOriginal) {
      if (isDownloadable && !!downloadableExtension && downloadableExtension === originalFileExtension) {
        this.menuItems.push({
          key: this.actionsKey[0],
          dataTest: 'disableOriginalPresentationDownload',
          label: intl.formatMessage(intlMessages.disableOriginalPresentationDownload, {
            0: originalFileExtension
          }),
          onClick: () => changeDownloadOriginalOrConvertedPresentation(false, 'Original')
        });
      } else {
        this.menuItems.push({
          key: this.actionsKey[0],
          dataTest: 'enableOriginalPresentationDownload',
          label: intl.formatMessage(intlMessages.enableOriginalPresentationDownload, {
            0: originalFileExtension
          }),
          onClick: () => changeDownloadOriginalOrConvertedPresentation(true, 'Original')
        });
      }
    }
    if (allowDownloadConverted) {
      if (!!filenameConverted && filenameConverted !== '' && convertedFileExtension !== originalFileExtension) {
        if (isDownloadable && !!downloadableExtension && downloadableExtension === convertedFileExtension) {
          this.menuItems.push({
            key: this.actionsKey[0],
            dataTest: 'disableOriginalPresentationDownload',
            label: intl.formatMessage(intlMessages.disableOriginalPresentationDownload, {
              0: convertedFileExtension
            }),
            onClick: () => changeDownloadOriginalOrConvertedPresentation(false, 'Converted')
          });
        } else {
          this.menuItems.push({
            key: this.actionsKey[0],
            dataTest: 'enableOriginalPresentationDownload',
            label: intl.formatMessage(intlMessages.enableOriginalPresentationDownload, {
              0: convertedFileExtension
            }),
            onClick: () => changeDownloadOriginalOrConvertedPresentation(true, 'Converted')
          });
        }
      }
    }
    if (allowDownloadWithAnnotations) {
      this.menuItems.push({
        key: this.actionsKey[1],
        id: 'sendCurrentStateDocument',
        dataTest: 'sendCurrentStateDocument',
        label: intl.formatMessage(intlMessages.sendCurrentStateDocument),
        onClick: () => {
          closeModal();
          handleDownloadingOfPresentation('Annotated');
        }
      });
    }
    return this.menuItems;
  }
  render() {
    const {
      intl,
      disabled
    } = this.props;
    const customStyles = {
      zIndex: 9999
    };
    return /*#__PURE__*/React.createElement(PresentationDownloadDropdownWrapper, {
      disabled: disabled
    }, /*#__PURE__*/React.createElement(BBBMenu, {
      customStyles: customStyles,
      trigger: /*#__PURE__*/React.createElement(Trigger, {
        "data-test": "presentationOptionsDownload",
        icon: "more",
        label: intl.formatMessage(intlMessages.options),
        "aria-label": intl.formatMessage(intlMessages.options),
        onClick: () => null
      }),
      opts: {
        id: 'presentation-download-dropdown',
        keepMounted: true,
        transitionDuration: 0,
        elevation: 2,
        getcontentanchorel: null,
        fullwidth: 'true',
        anchorOrigin: {
          vertical: 'bottom',
          horizontal: 'left'
        },
        transformOrigin: {
          vertical: 'top',
          horizontal: 'left'
        }
      },
      actions: this.getAvailableActions()
    }));
  }
}
PresentationDownloadDropdown.propTypes = propTypes;
PresentationDownloadDropdown.defaultProps = defaultProps;
module.exportDefault(injectIntl(PresentationDownloadDropdown));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-uploader/component.jsx                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let TAB;
module.link("/imports/utils/keyCodes", {
  TAB(v) {
    TAB = v;
  }
}, 3);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
let update;
module.link("immutability-helper", {
  default(v) {
    update = v;
  }
}, 6);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 7);
let toast;
module.link("react-toastify", {
  toast(v) {
    toast = v;
  }
}, 8);
let registerTitleView, unregisterTitleView;
module.link("/imports/utils/dom-utils", {
  registerTitleView(v) {
    registerTitleView = v;
  },
  unregisterTitleView(v) {
    unregisterTitleView = v;
  }
}, 9);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 10);
let PresentationDownloadDropdown;
module.link("./presentation-download-dropdown/component", {
  default(v) {
    PresentationDownloadDropdown = v;
  }
}, 11);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 12);
let Radio;
module.link("/imports/ui/components/common/radio/component", {
  default(v) {
    Radio = v;
  }
}, 13);
let unique;
module.link("radash", {
  unique(v) {
    unique = v;
  }
}, 14);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 15);
const {
  isMobile
} = deviceInfo;
const propTypes = {
  allowDownloadOriginal: PropTypes.bool.isRequired,
  allowDownloadConverted: PropTypes.bool.isRequired,
  allowDownloadWithAnnotations: PropTypes.bool.isRequired,
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  fileUploadConstraintsHint: PropTypes.bool.isRequired,
  fileSizeMax: PropTypes.number.isRequired,
  filePagesMax: PropTypes.number.isRequired,
  handleSave: PropTypes.func.isRequired,
  dispatchChangePresentationDownloadable: PropTypes.func.isRequired,
  fileValidMimeTypes: PropTypes.arrayOf(PropTypes.shape).isRequired,
  presentations: PropTypes.arrayOf(PropTypes.shape({
    presentationId: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
    current: PropTypes.bool.isRequired
  })).isRequired,
  currentPresentation: PropTypes.string.isRequired,
  isOpen: PropTypes.bool.isRequired,
  handleFiledrop: PropTypes.func.isRequired,
  selectedToBeNextCurrent: PropTypes.string,
  renderPresentationItemStatus: PropTypes.func.isRequired,
  externalUploadData: PropTypes.shape({
    presentationUploadExternalDescription: PropTypes.string.isRequired,
    presentationUploadExternalUrl: PropTypes.string.isRequired
  }).isRequired,
  isPresenter: PropTypes.bool.isRequired,
  exportPresentation: PropTypes.func.isRequired
};
const defaultProps = {
  selectedToBeNextCurrent: ''
};
const intlMessages = defineMessages({
  currentBadge: {
    id: 'app.presentationUploder.currentBadge'
  },
  title: {
    id: 'app.presentationUploder.title',
    description: 'title of the modal'
  },
  message: {
    id: 'app.presentationUploder.message',
    description: 'message warning the types of files accepted'
  },
  uploadLabel: {
    id: 'app.presentationUploder.uploadLabel',
    description: 'confirm label when presentations are to be uploaded'
  },
  confirmLabel: {
    id: 'app.presentationUploder.confirmLabel',
    description: 'confirm label when no presentations are to be uploaded'
  },
  confirmDesc: {
    id: 'app.presentationUploder.confirmDesc',
    description: 'description of the confirm'
  },
  dismissLabel: {
    id: 'app.presentationUploder.dismissLabel',
    description: 'used in the button that close modal'
  },
  dismissDesc: {
    id: 'app.presentationUploder.dismissDesc',
    description: 'description of the dismiss'
  },
  dropzoneLabel: {
    id: 'app.presentationUploder.dropzoneLabel',
    description: 'message warning where drop files for upload'
  },
  externalUploadTitle: {
    id: 'app.presentationUploder.externalUploadTitle',
    description: 'title for external upload area'
  },
  externalUploadLabel: {
    id: 'app.presentationUploder.externalUploadLabel',
    description: 'message of external upload button'
  },
  dropzoneImagesLabel: {
    id: 'app.presentationUploder.dropzoneImagesLabel',
    description: 'message warning where drop images for upload'
  },
  browseFilesLabel: {
    id: 'app.presentationUploder.browseFilesLabel',
    description: 'message use on the file browser'
  },
  browseImagesLabel: {
    id: 'app.presentationUploder.browseImagesLabel',
    description: 'message use on the image browser'
  },
  fileToUpload: {
    id: 'app.presentationUploder.fileToUpload',
    description: 'message used in the file selected for upload'
  },
  extraHint: {
    id: 'app.presentationUploder.extraHint',
    description: 'message used to indicate upload file max sizes'
  },
  rejectedError: {
    id: 'app.presentationUploder.rejectedError',
    description: 'some files rejected, please check the file mime types'
  },
  badConnectionError: {
    id: 'app.presentationUploder.connectionClosedError',
    description: 'message indicating that the connection was closed'
  },
  uploadProcess: {
    id: 'app.presentationUploder.upload.progress',
    description: 'message that indicates the percentage of the upload'
  },
  413: {
    id: 'app.presentationUploder.upload.413',
    description: 'error that file exceed the size limit'
  },
  408: {
    id: 'app.presentationUploder.upload.408',
    description: 'error for token request timeout'
  },
  404: {
    id: 'app.presentationUploder.upload.404',
    description: 'error not found'
  },
  401: {
    id: 'app.presentationUploder.upload.401',
    description: 'error for failed upload token request.'
  },
  FILE_VIRUS: {
    id: 'app.presentationUploder.upload.fileVirus',
    description: 'error that the file could not be uploaded due to security concerns',
  },
  conversionProcessingSlides: {
    id: 'app.presentationUploder.conversion.conversionProcessingSlides',
    description: 'indicates how many slides were converted'
  },
  genericError: {
    id: 'app.presentationUploder.genericError',
    description: 'generic error while uploading/converting'
  },
  genericConversionStatus: {
    id: 'app.presentationUploder.conversion.genericConversionStatus',
    description: 'indicates that file is being converted'
  },
  TIMEOUT: {
    id: 'app.presentationUploder.conversion.timeout'
  },
  CONVERSION_TIMEOUT: {
    id: 'app.presentationUploder.conversion.conversionTimeout',
    description: 'warns the user that the presentation timed out in the back-end in specific page of the document'
  },
  GENERATING_THUMBNAIL: {
    id: 'app.presentationUploder.conversion.generatingThumbnail',
    description: 'indicatess that it is generating thumbnails'
  },
  GENERATING_SVGIMAGES: {
    id: 'app.presentationUploder.conversion.generatingSvg',
    description: 'warns that it is generating svg images'
  },
  GENERATED_SLIDE: {
    id: 'app.presentationUploder.conversion.generatedSlides',
    description: 'warns that were slides generated'
  },
  PAGE_COUNT_EXCEEDED: {
    id: 'app.presentationUploder.conversion.pageCountExceeded',
    description: 'warns the user that the conversion failed because of the page count'
  },
  PDF_HAS_BIG_PAGE: {
    id: 'app.presentationUploder.conversion.pdfHasBigPage',
    description: 'warns the user that the conversion failed because of the pdf page siz that exceeds the allowed limit'
  },
  OFFICE_DOC_CONVERSION_INVALID: {
    id: 'app.presentationUploder.conversion.officeDocConversionInvalid',
    description: ''
  },
  OFFICE_DOC_CONVERSION_FAILED: {
    id: 'app.presentationUploder.conversion.officeDocConversionFailed',
    description: 'warns the user that the conversion failed because of wrong office file'
  },
  UNSUPPORTED_DOCUMENT: {
    id: 'app.presentationUploder.conversion.unsupportedDocument',
    description: 'warns the user that the file extension is not supported'
  },
  isDownloadable: {
    id: 'app.presentationUploder.isDownloadableLabel',
    description: 'presentation is available for downloading by all viewers'
  },
  isNotDownloadable: {
    id: 'app.presentationUploder.isNotDownloadableLabel',
    description: 'presentation is not available for downloading the viewers'
  },
  removePresentation: {
    id: 'app.presentationUploder.removePresentationLabel',
    description: 'select to delete this presentation'
  },
  setAsCurrentPresentation: {
    id: 'app.presentationUploder.setAsCurrentPresentation',
    description: 'set this presentation to be the current one'
  },
  status: {
    id: 'app.presentationUploder.tableHeading.status',
    description: 'aria label status table heading'
  },
  options: {
    id: 'app.presentationUploder.tableHeading.options',
    description: 'aria label for options table heading'
  },
  filename: {
    id: 'app.presentationUploder.tableHeading.filename',
    description: 'aria label for file name table heading'
  },
  uploading: {
    id: 'app.presentationUploder.uploading',
    description: 'uploading label for toast notification'
  },
  uploadStatus: {
    id: 'app.presentationUploder.uploadStatus',
    description: 'upload status for toast notification'
  },
  completed: {
    id: 'app.presentationUploder.completed',
    description: 'uploads complete label for toast notification'
  },
  item: {
    id: 'app.presentationUploder.item',
    description: 'single item label'
  },
  itemPlural: {
    id: 'app.presentationUploder.itemPlural',
    description: 'plural item label'
  },
  clearErrors: {
    id: 'app.presentationUploder.clearErrors',
    description: 'button label for clearing upload errors'
  },
  clearErrorsDesc: {
    id: 'app.presentationUploder.clearErrorsDesc',
    description: 'aria description for button clearing upload error'
  },
  uploadViewTitle: {
    id: 'app.presentationUploder.uploadViewTitle',
    description: 'view name apended to document title'
  },
  exportHint: {
    id: 'app.presentationUploader.exportHint',
    description: 'message to indicate the export presentation option'
  },
  exportToastHeader: {
    id: 'app.presentationUploader.exportToastHeader',
    description: 'exporting toast header'
  },
  exportToastHeaderPlural: {
    id: 'app.presentationUploader.exportToastHeaderPlural',
    description: 'exporting toast header in plural'
  },
  export: {
    id: 'app.presentationUploader.export',
    description: 'send presentation to chat'
  },
  exporting: {
    id: 'app.presentationUploader.exporting',
    description: 'presentation is being sent to chat'
  },
  currentLabel: {
    id: 'app.presentationUploader.currentPresentationLabel',
    description: 'current presentation label'
  },
  actionsLabel: {
    id: 'app.presentation.actionsLabel',
    description: 'actions label'
  }
});
const handleDismissToast = id => toast.dismiss(id);
class PresentationUploader extends Component {
  constructor(props) {
    super(props);
    this.state = {
      presentations: [],
      disableActions: false,
      presExporting: new Set()
    };
    this.toastId = null;
    this.hasError = null;
    this.exportToastId = null;
    const {
      handleFiledrop
    } = this.props;
    // handlers
    this.handleFiledrop = handleFiledrop;
    this.handleConfirm = this.handleConfirm.bind(this);
    this.handleDismiss = this.handleDismiss.bind(this);
    this.handleRemove = this.handleRemove.bind(this);
    this.handleCurrentChange = this.handleCurrentChange.bind(this);
    this.handleDownloadingOfPresentation = this.handleDownloadingOfPresentation.bind(this);
    // renders
    this.renderDropzone = this.renderDropzone.bind(this);
    this.renderExternalUpload = this.renderExternalUpload.bind(this);
    this.renderPicDropzone = this.renderPicDropzone.bind(this);
    this.renderPresentationList = this.renderPresentationList.bind(this);
    this.renderPresentationItem = this.renderPresentationItem.bind(this);
    // utilities
    this.deepMergeUpdateFileKey = this.deepMergeUpdateFileKey.bind(this);
    this.updateFileKey = this.updateFileKey.bind(this);
    this.getPresentationsToShow = this.getPresentationsToShow.bind(this);
    this.handleDownloadableChange = this.handleDownloadableChange.bind(this);
  }
  componentDidUpdate(prevProps) {
    const {
      isOpen,
      presentations: propPresentations,
      currentPresentation,
      intl
    } = this.props;
    const {
      presentations
    } = this.state;
    const {
      presentations: prevPropPresentations
    } = prevProps;
    let shouldUpdateState = isOpen && !prevProps.isOpen;
    const presState = Object.values(_objectSpread(_objectSpread({}, JSON.parse(JSON.stringify(propPresentations))), JSON.parse(JSON.stringify(presentations))));
    if (propPresentations.length > prevPropPresentations.length) {
      shouldUpdateState = true;
      const propsDiffs = propPresentations.filter(p => !prevPropPresentations.some(presentation => p.presentationId === presentation.presentationId || p.temporaryPresentationId === presentation.temporaryPresentationId));
      propsDiffs.forEach(p => {
        const index = presState.findIndex(pres => pres.temporaryPresentationId === p.temporaryPresentationId || pres.presentationId === p.presentationId);
        if (index === -1) {
          presState.push(p);
        }
      });
    }
    const presStateFiltered = presState.filter(presentation => {
      const currentPropPres = propPresentations.find(pres => pres.presentationId === presentation.presentationId);
      const prevPropPres = prevPropPresentations.find(pres => pres.presentationId === presentation.presentationId);
      const hasConversionError = !!(presentation !== null && presentation !== void 0 && presentation.uploadErrorMsgKey);
      const finishedConversion = !(presentation !== null && presentation !== void 0 && presentation.uploadInProgress) || !(currentPropPres !== null && currentPropPres !== void 0 && currentPropPres.uploadInProgress);
      const hasTemporaryId = presentation.presentationId.startsWith(presentation.name);
      if (hasConversionError || !finishedConversion && hasTemporaryId) return true;
      if (!currentPropPres) return false;
      const modPresentation = presentation;
      if (currentPropPres.current !== (prevPropPres === null || prevPropPres === void 0 ? void 0 : prevPropPres.current)) {
        modPresentation.current = currentPropPres.current;
        shouldUpdateState = true;
      }
      if ((currentPropPres === null || currentPropPres === void 0 ? void 0 : currentPropPres.totalPagesUploaded) !== (prevPropPres === null || prevPropPres === void 0 ? void 0 : prevPropPres.totalPagesUploaded) || presentation.totalPagesUploaded !== (currentPropPres === null || currentPropPres === void 0 ? void 0 : currentPropPres.totalPagesUploaded)) {
        modPresentation.totalPagesUploaded = currentPropPres.totalPagesUploaded;
        shouldUpdateState = true;
      }
      if ((currentPropPres === null || currentPropPres === void 0 ? void 0 : currentPropPres.uploadCompleted) !== (prevPropPres === null || prevPropPres === void 0 ? void 0 : prevPropPres.uploadCompleted) || presentation.uploadCompleted !== (currentPropPres === null || currentPropPres === void 0 ? void 0 : currentPropPres.uploadCompleted)) {
        modPresentation.uploadCompleted = currentPropPres.uploadCompleted;
        shouldUpdateState = true;
      }
      if ((currentPropPres === null || currentPropPres === void 0 ? void 0 : currentPropPres.totalPages) !== (prevPropPres === null || prevPropPres === void 0 ? void 0 : prevPropPres.totalPages) || presentation.totalPages !== (currentPropPres === null || currentPropPres === void 0 ? void 0 : currentPropPres.totalPages)) {
        modPresentation.totalPages = currentPropPres.totalPages;
        shouldUpdateState = true;
      }
      if ((currentPropPres === null || currentPropPres === void 0 ? void 0 : currentPropPres.downloadable) !== (prevPropPres === null || prevPropPres === void 0 ? void 0 : prevPropPres.downloadable)) {
        presentation.downloadable = currentPropPres.downloadable;
        shouldUpdateState = true;
      }
      if ((currentPropPres === null || currentPropPres === void 0 ? void 0 : currentPropPres.downloadFileUri) !== (prevPropPres === null || prevPropPres === void 0 ? void 0 : prevPropPres.downloadFileUri)) {
        presentation.downloadFileUri = currentPropPres.downloadFileUri;
        shouldUpdateState = true;
      }
      if ((currentPropPres === null || currentPropPres === void 0 ? void 0 : currentPropPres.filenameConverted) !== (prevPropPres === null || prevPropPres === void 0 ? void 0 : prevPropPres.filenameConverted)) {
        presentation.filenameConverted = currentPropPres.filenameConverted;
        shouldUpdateState = true;
      }
      modPresentation.uploadInProgress = currentPropPres.uploadInProgress;
      modPresentation.removable = currentPropPres.removable;
      return true;
    }).filter(presentation => {
      const duplicated = presentations.find(pres => pres.name === presentation.name && pres.presentationId !== presentation.presentationId);
      if (duplicated && duplicated.presentationId.startsWith(presentation.name) && !presentation.presentationId.startsWith(presentation.name) && (presentation === null || presentation === void 0 ? void 0 : presentation.uploadInProgress) === (duplicated === null || duplicated === void 0 ? void 0 : duplicated.uploadInProgress)) {
        return false; // Prioritizing propPresentations (the one with id from back-end)
      }

      return true;
    });
    if (shouldUpdateState) {
      this.setState({
        presentations: unique(presStateFiltered, p => p.presentationId)
      });
    }
    if (!isOpen && prevProps.isOpen) {
      unregisterTitleView();
    }

    // Updates presentation list when modal opens to avoid missing presentations
    if (isOpen && !prevProps.isOpen) {
      registerTitleView(intl.formatMessage(intlMessages.uploadViewTitle));
      const focusableElements = 'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
      const modal = document.getElementById('upload-modal');
      const firstFocusableElement = modal === null || modal === void 0 ? void 0 : modal.querySelectorAll(focusableElements)[0];
      const focusableContent = modal === null || modal === void 0 ? void 0 : modal.querySelectorAll(focusableElements);
      const lastFocusableElement = focusableContent[focusableContent.length - 1];
      firstFocusableElement.focus();
      modal.addEventListener('keydown', e => {
        const tab = e.key === 'Tab' || e.keyCode === TAB;
        if (!tab) return;
        if (e.shiftKey) {
          if (document.activeElement === firstFocusableElement) {
            lastFocusableElement.focus();
            e.preventDefault();
          }
        } else if (document.activeElement === lastFocusableElement) {
          firstFocusableElement.focus();
          e.preventDefault();
        }
      });
    }
    if (currentPresentation && currentPresentation !== prevProps.currentPresentation) {
      this.handleCurrentChange(currentPresentation);
    }
    if (presentations.length > 0) {
      const selected = propPresentations.filter(p => p.current);
      if (selected.length > 0) Session.setItem('selectedToBeNextCurrent', selected[0].presentationId);
    }
    if (this.exportToastId) {
      if (!prevProps.isOpen && isOpen) {
        handleDismissToast(this.exportToastId);
      }
      toast.update(this.exportToastId, {
        render: this.renderExportToast()
      });
    }
  }
  componentWillUnmount() {
    const id = Session.getItem('presentationUploaderToastId');
    if (id) {
      toast.dismiss(id);
    }
    Session.setItem('showUploadPresentationView', false);
  }
  handleRemove(item) {
    let withErr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (withErr) {
      const {
        presentations
      } = this.state;
      const {
        presentations: propPresentations
      } = this.props;
      const filteredPropPresentations = propPresentations.filter(d => d.uploadCompleted && !d.uploadInProgress);
      const ids = new Set(filteredPropPresentations.map(d => d.presentationId));
      const filteredPresentations = presentations.filter(d => {
        d.current = false;
        return !ids.has(d.presentationId) && !d.uploadErrorMsgKey && !(d.uploadCompleted && !d.uploadInProgress);
      });
      const merged = [...filteredPresentations, ...filteredPropPresentations];
      let hasUploading;
      merged.forEach(d => {
        if (!d.uploadCompleted || d.uploadInProgress) {
          hasUploading = true;
        }
      });
      this.hasError = false;
      if (hasUploading) {
        return this.setState({
          presentations: merged
        });
      } else {
        return this.setState({
          presentations: merged,
          disableActions: false
        });
      }
    }
    const {
      presentations
    } = this.state;
    const toRemoveIndex = presentations.indexOf(item);
    return this.setState({
      presentations: update(presentations, {
        $splice: [[toRemoveIndex, 1]]
      })
    }, () => {
      const {
        presentations: updatedPresentations,
        oldCurrentId
      } = this.state;
      const commands = {};
      const currentIndex = updatedPresentations.findIndex(p => p.current);
      const actualCurrentIndex = updatedPresentations.findIndex(p => p.presentationId === oldCurrentId);
      if (currentIndex === -1 && updatedPresentations.length > 0) {
        const newCurrentIndex = actualCurrentIndex === -1 ? 0 : actualCurrentIndex;
        commands[newCurrentIndex] = {
          $apply: presentation => {
            const p = presentation;
            p.current = true;
            return p;
          }
        };
      }
      const updatedCurrent = update(updatedPresentations, commands);
      this.setState({
        presentations: updatedCurrent
      });
    });
  }
  handleCurrentChange(id) {
    const {
      presentations,
      disableActions
    } = this.state;
    if (disableActions || (presentations === null || presentations === void 0 ? void 0 : presentations.length) === 0) return;
    const currentIndex = presentations.findIndex(p => p.current);
    const newCurrentIndex = presentations.findIndex(p => p.presentationId === id);
    const commands = {};

    // we can end up without a current presentation
    if (currentIndex !== -1) {
      commands[currentIndex] = {
        $apply: presentation => {
          const p = presentation;
          p.current = false;
          return p;
        }
      };
    }
    commands[newCurrentIndex] = {
      $apply: presentation => {
        if (!presentation) return;
        const p = presentation;
        if (p) {
          p.current = true;
        }
        return p;
      }
    };
    const presentationsUpdated = update(presentations, commands);
    this.setState({
      presentations: presentationsUpdated
    });
  }
  handleConfirm() {
    const {
      handleSave,
      selectedToBeNextCurrent,
      presentations: propPresentations,
      dispatchChangePresentationDownloadable,
      setPresentation,
      removePresentation,
      presentationEnabled
    } = this.props;
    const {
      disableActions,
      presentations
    } = this.state;
    const presentationsToSave = presentations;
    if (!presentationEnabled) {
      this.setState({
        presentations: []
      }, Session.setItem('showUploadPresentationView', false));
      return null;
    }
    this.setState({
      disableActions: true
    });
    presentations.forEach(item => {
      if (item.uploadCompleted) {
        const didDownloadableStateChange = propPresentations.some(p => p.presentationId === item.presentationId && p.downloadable !== item.downloadable);
        if (didDownloadableStateChange) {
          dispatchChangePresentationDownloadable(item, item.downloadable);
        }
      }
    });
    if (!disableActions) {
      Session.setItem('showUploadPresentationView', false);
      return handleSave(presentationsToSave, true, {}, propPresentations, setPresentation, removePresentation, presentationEnabled).then(() => {
        const hasError = presentations.some(p => !!p.uploadErrorMsgKey);
        if (!hasError) {
          this.setState({
            disableActions: false
          });
          return;
        }
        // if there's error we don't want to close the modal
        this.setState({
          disableActions: true
          // preventClosing: true,
        }, () => {
          // if the selected current has error we revert back to the old one
          const newCurrent = presentations.find(p => p.current);
          if (newCurrent.uploadErrorMsgKey) {
            this.handleCurrentChange(selectedToBeNextCurrent);
          }
        });
      }).catch(error => {
        logger.error({
          logCode: 'presentationuploader_component_save_error',
          extraInfo: {
            error
          }
        }, 'Presentation uploader catch error on confirm');
      });
    }
    Session.setItem('showUploadPresentationView', false);
    return null;
  }
  handleDownloadableChange(item, fileStateType, downloadable) {
    const {
      dispatchChangePresentationDownloadable
    } = this.props;
    dispatchChangePresentationDownloadable(item, downloadable, fileStateType);
  }
  handleDismiss() {
    const {
      presentations
    } = this.state;
    const {
      presentations: propPresentations
    } = this.props;
    const ids = new Set(propPresentations.map(d => d.presentationId));
    const filteredPresentations = presentations.filter(d => !ids.has(d.presentationId) && (d.uploadCompleted || d.totalPagesUploaded !== 0));
    const isThereStateCurrentPres = filteredPresentations.some(p => p.current);
    const merged = [...filteredPresentations, ...propPresentations.filter(p => {
      if (isThereStateCurrentPres) {
        p.current = false;
      }
      return true;
    })];
    this.setState({
      presentations: merged
    }, Session.setItem('showUploadPresentationView', false));
  }
  handleDownloadingOfPresentation(item, fileStateType) {
    const {
      exportPresentation
    } = this.props;
    exportPresentation(item.presentationId, fileStateType);
  }
  getPresentationsToShow() {
    const {
      presentations,
      presExporting
    } = this.state;
    return Array.from(presExporting).map(id => presentations.find(p => p.presentationId === id)).filter(p => p);
  }
  deepMergeUpdateFileKey(id, key, value) {
    const applyValue = toUpdate => update(toUpdate, {
      $merge: value
    });
    this.updateFileKey(id, key, applyValue, '$apply');
  }
  updateFileKey(id, key, value) {
    let operation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '$set';
    this.setState(_ref => {
      let {
        presentations
      } = _ref;
      const fileIndex = presentations.findIndex(f => f.presentationId === id);
      return fileIndex === -1 ? false : {
        presentations: update(presentations, {
          [fileIndex]: {
            $apply: file => update(file, {
              [key]: {
                [operation]: value
              }
            })
          }
        })
      };
    });
  }
  renderExtraHint() {
    const {
      intl,
      fileSizeMax,
      filePagesMax
    } = this.props;
    const options = {
      0: fileSizeMax / 1000000,
      1: filePagesMax
    };
    return /*#__PURE__*/React.createElement(Styled.ExtraHint, null, intl.formatMessage(intlMessages.extraHint, options));
  }
  renderPresentationList() {
    const {
      presentations
    } = this.state;
    const {
      intl
    } = this.props;
    let presentationsSorted = presentations;
    try {
      presentationsSorted = presentations.sort((a, b) => a.uploadTimestamp - b.uploadTimestamp).sort((a, b) => a.name.localeCompare(b.name)).sort((a, b) => b.totalPagesUploaded - a.totalPagesUploaded).sort((a, b) => b.uploadInProgress - a.uploadInProgress).sort((a, b) => {
        const aUploadNotTriggeredYet = !a.uploadCompleted && a.totalPagesUploaded === 0;
        const bUploadNotTriggeredYet = !b.uploadCompleted && b.totalPagesUploaded === 0;
        return bUploadNotTriggeredYet - aUploadNotTriggeredYet;
      });
    } catch (error) {
      logger.error({
        logCode: 'presentationuploader_component_render_error',
        extraInfo: {
          error
        }
      }, 'Presentation uploader catch error on render presentation list');
    }
    return /*#__PURE__*/React.createElement(Styled.FileList, null, /*#__PURE__*/React.createElement(Styled.Table, null, /*#__PURE__*/React.createElement("thead", null, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement(Styled.VisuallyHidden, null, intl.formatMessage(intlMessages.setAsCurrentPresentation)), /*#__PURE__*/React.createElement(Styled.VisuallyHidden, {
      colSpan: 2
    }, intl.formatMessage(intlMessages.filename)), /*#__PURE__*/React.createElement(Styled.VisuallyHidden, null, intl.formatMessage(intlMessages.status)), /*#__PURE__*/React.createElement(Styled.VisuallyHidden, null, intl.formatMessage(intlMessages.options))), /*#__PURE__*/React.createElement(Styled.Head, null, /*#__PURE__*/React.createElement("th", {
      colSpan: 4
    }, intl.formatMessage(intlMessages.currentLabel)), /*#__PURE__*/React.createElement("th", null, intl.formatMessage(intlMessages.actionsLabel)))), /*#__PURE__*/React.createElement("tbody", null, unique(presentationsSorted, p => p.presentationId).map(item => this.renderPresentationItem(item)))));
  }
  renderDownloadableWithAnnotationsHint() {
    const {
      intl,
      allowDownloadWithAnnotations
    } = this.props;
    return allowDownloadWithAnnotations ? /*#__PURE__*/React.createElement(Styled.ExportHint, null, intl.formatMessage(intlMessages.exportHint)) : null;
  }
  renderPresentationItem(item) {
    const {
      disableActions
    } = this.state;
    const {
      intl,
      selectedToBeNextCurrent,
      allowDownloadOriginal,
      allowDownloadConverted,
      allowDownloadWithAnnotations,
      renderPresentationItemStatus
    } = this.props;
    const isActualCurrent = selectedToBeNextCurrent ? item.presentationId === selectedToBeNextCurrent : item.current;
    const isUploading = !item.uploadCompleted;
    const uploadInProgress = item.uploadInProgress;
    const hasError = !!item.uploadErrorMsgKey;
    const isProcessing = (isUploading || uploadInProgress) && !hasError;
    if (hasError) {
      this.hasError = true;
    }
    const Settings = getSettingsSingletonInstance();
    const {
      animations
    } = Settings.application;
    const {
      removable,
      downloadable
    } = item;
    const isExporting = (item === null || item === void 0 ? void 0 : item.exportToChatStatus) === 'RUNNING';
    const shouldDisableExportButton = isExporting || !item.uploadCompleted || hasError || disableActions;
    const formattedDownloadLabel = isExporting ? intl.formatMessage(intlMessages.exporting) : intl.formatMessage(intlMessages.export);
    const formattedDownloadAriaLabel = "".concat(formattedDownloadLabel, " ").concat(item.name);
    return /*#__PURE__*/React.createElement(Styled.PresentationItem, {
      key: item.presentationId,
      isNew: item.presentationId.indexOf(item.name) !== -1,
      uploading: isUploading,
      uploadInProgress: uploadInProgress,
      error: hasError,
      animated: isProcessing,
      animations: animations
    }, /*#__PURE__*/React.createElement(Styled.SetCurrentAction, null, /*#__PURE__*/React.createElement(Radio, {
      animations: animations,
      ariaLabel: "".concat(intl.formatMessage(intlMessages.setAsCurrentPresentation), " ").concat(item.name),
      checked: item.current,
      keyValue: item.presentationId,
      onChange: () => this.handleCurrentChange(item.presentationId),
      disabled: disableActions || hasError
    })), /*#__PURE__*/React.createElement(Styled.TableItemName, {
      colSpan: !isActualCurrent ? 2 : 0
    }, /*#__PURE__*/React.createElement("span", null, item.name)), isActualCurrent ? /*#__PURE__*/React.createElement(Styled.TableItemCurrent, null, /*#__PURE__*/React.createElement(Styled.CurrentLabel, null, intl.formatMessage(intlMessages.currentBadge))) : null, /*#__PURE__*/React.createElement(Styled.TableItemStatus, {
      colSpan: hasError ? 2 : 0
    }, renderPresentationItemStatus(item, intl)), hasError ? null : /*#__PURE__*/React.createElement(Styled.TableItemActions, {
      notDownloadable: !allowDownloadOriginal
    }, allowDownloadOriginal || allowDownloadWithAnnotations || allowDownloadConverted ? /*#__PURE__*/React.createElement(PresentationDownloadDropdown, {
      disabled: shouldDisableExportButton,
      "data-test": "exportPresentation",
      "aria-label": formattedDownloadAriaLabel,
      color: "primary",
      isDownloadable: downloadable,
      allowDownloadOriginal: allowDownloadOriginal,
      allowDownloadConverted: allowDownloadConverted,
      allowDownloadWithAnnotations: allowDownloadWithAnnotations,
      handleDownloadableChange: this.handleDownloadableChange,
      item: item,
      closeModal: () => Session.setItem('showUploadPresentationView', false),
      handleDownloadingOfPresentation: fileStateType => this.handleDownloadingOfPresentation(item, fileStateType)
    }) : null, removable ? /*#__PURE__*/React.createElement(Styled.RemoveButton, {
      disabled: disableActions,
      label: intl.formatMessage(intlMessages.removePresentation),
      "data-test": "removePresentation",
      "aria-label": "".concat(intl.formatMessage(intlMessages.removePresentation), " ").concat(item.name),
      size: "sm",
      icon: "delete",
      hideLabel: true,
      onClick: () => this.handleRemove(item),
      animations: animations
    }) : null));
  }
  renderDropzone() {
    const {
      intl,
      fileValidMimeTypes
    } = this.props;
    const {
      disableActions
    } = this.state;
    if (disableActions && !this.hasError) return null;
    return this.hasError ? /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
      color: "danger",
      onClick: () => this.handleRemove(null, true),
      label: intl.formatMessage(intlMessages.clearErrors),
      "aria-describedby": "clearErrorDesc"
    }), /*#__PURE__*/React.createElement("div", {
      id: "clearErrorDesc",
      style: {
        display: 'none'
      }
    }, intl.formatMessage(intlMessages.clearErrorsDesc))) :
    /*#__PURE__*/
    // Until the Dropzone package has fixed the mime type hover validation, the rejectClassName
    // prop is being remove to prevent the error styles from being applied to valid file types.
    // Error handling is being done in the onDrop prop.
    React.createElement(Styled.UploaderDropzone, {
      multiple: true,
      activeClassName: "dropzoneActive",
      accept: fileValidMimeTypes.map(fileValid => fileValid.extension),
      disablepreview: "true",
      onDrop: (files, files2) => this.handleFiledrop(files, files2, this, intl, intlMessages)
    }, /*#__PURE__*/React.createElement(Styled.DropzoneIcon, {
      iconName: "upload"
    }), /*#__PURE__*/React.createElement(Styled.DropzoneMessage, null, intl.formatMessage(intlMessages.dropzoneLabel), "\xA0", /*#__PURE__*/React.createElement(Styled.DropzoneLink, null, intl.formatMessage(intlMessages.browseFilesLabel))));
  }
  renderExternalUpload() {
    const {
      externalUploadData,
      intl
    } = this.props;
    const {
      presentationUploadExternalDescription,
      presentationUploadExternalUrl
    } = externalUploadData;
    if (!presentationUploadExternalDescription || !presentationUploadExternalUrl) return null;
    return /*#__PURE__*/React.createElement(Styled.ExternalUpload, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.ExternalUploadTitle, null, intl.formatMessage(intlMessages.externalUploadTitle)), /*#__PURE__*/React.createElement("p", null, presentationUploadExternalDescription)), /*#__PURE__*/React.createElement(Styled.ExternalUploadButton, {
      color: "default",
      onClick: () => window.open("".concat(presentationUploadExternalUrl)),
      label: intl.formatMessage(intlMessages.externalUploadLabel),
      "aria-describedby": intl.formatMessage(intlMessages.externalUploadLabel)
    }));
  }
  renderPicDropzone() {
    const {
      intl
    } = this.props;
    const {
      disableActions
    } = this.state;
    if (disableActions && !this.hasError) return null;
    return this.hasError ? /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
      color: "danger",
      onClick: () => this.handleRemove(null, true),
      label: intl.formatMessage(intlMessages.clearErrors),
      "aria-describedby": "clearErrorDesc"
    }), /*#__PURE__*/React.createElement("div", {
      id: "clearErrorDesc",
      style: {
        display: 'none'
      }
    }, intl.formatMessage(intlMessages.clearErrorsDesc))) : /*#__PURE__*/React.createElement(Styled.UploaderDropzone, {
      multiple: true,
      accept: "image/*",
      disablepreview: "true",
      "data-test": "fileUploadDropZone",
      onDrop: (files, files2) => this.handleFiledrop(files, files2, this, intl, intlMessages)
    }, /*#__PURE__*/React.createElement(Styled.DropzoneIcon, {
      iconName: "upload"
    }), /*#__PURE__*/React.createElement(Styled.DropzoneMessage, null, intl.formatMessage(intlMessages.dropzoneImagesLabel), "\xA0", /*#__PURE__*/React.createElement(Styled.DropzoneLink, null, intl.formatMessage(intlMessages.browseImagesLabel))));
  }
  render() {
    const {
      isOpen,
      isPresenter,
      intl,
      fileUploadConstraintsHint
    } = this.props;
    if (!isPresenter) return null;
    const {
      presentations,
      disableActions
    } = this.state;
    let hasNewUpload = false;
    presentations.forEach(item => {
      if ((item === null || item === void 0 ? void 0 : item.presentationId.indexOf(item.name)) !== -1 && item.totalPagesUploaded === 0) hasNewUpload = true;
    });
    return /*#__PURE__*/React.createElement(React.Fragment, null, isOpen ? /*#__PURE__*/React.createElement(Styled.UploaderModal, {
      id: "upload-modal"
    }, /*#__PURE__*/React.createElement(Styled.ModalInner, null, /*#__PURE__*/React.createElement(Styled.ModalHeader, null, /*#__PURE__*/React.createElement(Styled.Title, null, intl.formatMessage(intlMessages.title)), /*#__PURE__*/React.createElement(Styled.ActionWrapper, null, /*#__PURE__*/React.createElement(Styled.DismissButton, {
      color: "secondary",
      onClick: this.handleDismiss,
      label: intl.formatMessage(intlMessages.dismissLabel),
      "aria-describedby": intl.formatMessage(intlMessages.dismissDesc)
    }), /*#__PURE__*/React.createElement(Styled.ConfirmButton, {
      "data-test": "confirmManagePresentation",
      color: "primary",
      onClick: () => this.handleConfirm(),
      disabled: disableActions,
      label: hasNewUpload ? intl.formatMessage(intlMessages.uploadLabel) : intl.formatMessage(intlMessages.confirmLabel)
    }))), /*#__PURE__*/React.createElement(Styled.ModalHint, null, "".concat(intl.formatMessage(intlMessages.message)), fileUploadConstraintsHint ? this.renderExtraHint() : null), this.renderPresentationList(), this.renderDownloadableWithAnnotationsHint(), isMobile ? this.renderPicDropzone() : null, this.renderDropzone(), this.renderExternalUpload())) : null);
  }
}
PresentationUploader.propTypes = propTypes;
PresentationUploader.defaultProps = defaultProps;
module.exportDefault(injectIntl(PresentationUploader));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-uploader/container.jsx                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let ErrorBoundary;
module.link("/imports/ui/components/common/error-boundary/component", {
  default(v) {
    ErrorBoundary = v;
  }
}, 1);
let FallbackModal;
module.link("/imports/ui/components/common/fallback-errors/fallback-modal/component", {
  default(v) {
    FallbackModal = v;
  }
}, 2);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 3);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 4);
let PresUploaderToast;
module.link("/imports/ui/components/presentation/presentation-toast/presentation-uploader-toast/component", {
  default(v) {
    PresUploaderToast = v;
  }
}, 5);
let PresentationUploader;
module.link("./component", {
  default(v) {
    PresentationUploader = v;
  }
}, 6);
let useIsPresentationEnabled, useIsDownloadPresentationOriginalFileEnabled, useIsDownloadPresentationConvertedToPdfEnabled, useIsDownloadPresentationWithAnnotationsEnabled;
module.link("/imports/ui/services/features", {
  useIsPresentationEnabled(v) {
    useIsPresentationEnabled = v;
  },
  useIsDownloadPresentationOriginalFileEnabled(v) {
    useIsDownloadPresentationOriginalFileEnabled = v;
  },
  useIsDownloadPresentationConvertedToPdfEnabled(v) {
    useIsDownloadPresentationConvertedToPdfEnabled = v;
  },
  useIsDownloadPresentationWithAnnotationsEnabled(v) {
    useIsDownloadPresentationWithAnnotationsEnabled = v;
  }
}, 7);
let PRESENTATIONS_SUBSCRIPTION;
module.link("/imports/ui/components/whiteboard/queries", {
  PRESENTATIONS_SUBSCRIPTION(v) {
    PRESENTATIONS_SUBSCRIPTION = v;
  }
}, 8);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 9);
let PRESENTATION_SET_DOWNLOADABLE, PRESENTATION_EXPORT, PRESENTATION_SET_CURRENT, PRESENTATION_REMOVE;
module.link("../mutations", {
  PRESENTATION_SET_DOWNLOADABLE(v) {
    PRESENTATION_SET_DOWNLOADABLE = v;
  },
  PRESENTATION_EXPORT(v) {
    PRESENTATION_EXPORT = v;
  },
  PRESENTATION_SET_CURRENT(v) {
    PRESENTATION_SET_CURRENT = v;
  },
  PRESENTATION_REMOVE(v) {
    PRESENTATION_REMOVE = v;
  }
}, 10);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 11);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 12);
const PresentationUploaderContainer = props => {
  var _presentations$find;
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    presenter: user.presenter
  }));
  const userIsPresenter = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.presenter;
  const {
    data: presentationData
  } = useDeduplicatedSubscription(PRESENTATIONS_SUBSCRIPTION);
  const presentations = (presentationData === null || presentationData === void 0 ? void 0 : presentationData.pres_presentation) || [];
  const currentPresentation = ((_presentations$find = presentations.find(p => p.current)) === null || _presentations$find === void 0 ? void 0 : _presentations$find.presentationId) || '';
  const [presentationSetDownloadable] = useMutation(PRESENTATION_SET_DOWNLOADABLE);
  const [presentationExport] = useMutation(PRESENTATION_EXPORT);
  const [presentationSetCurrent] = useMutation(PRESENTATION_SET_CURRENT);
  const [presentationRemove] = useMutation(PRESENTATION_REMOVE);
  const exportPresentation = (presentationId, fileStateType) => {
    presentationExport({
      variables: {
        presentationId,
        fileStateType
      }
    });
  };
  const dispatchChangePresentationDownloadable = (presentationId, downloadable, fileStateType) => {
    presentationSetDownloadable({
      variables: {
        presentationId,
        downloadable,
        fileStateType
      }
    });
  };
  const setPresentation = presentationId => {
    presentationSetCurrent({
      variables: {
        presentationId
      }
    });
  };
  const removePresentation = presentationId => {
    presentationRemove({
      variables: {
        presentationId
      }
    });
  };
  const presentationEnabled = useIsPresentationEnabled();
  const allowDownloadOriginal = useIsDownloadPresentationOriginalFileEnabled();
  const allowDownloadConverted = useIsDownloadPresentationConvertedToPdfEnabled();
  const allowDownloadWithAnnotations = useIsDownloadPresentationWithAnnotationsEnabled();
  const externalUploadData = Service.useExternalUploadData();
  const PRESENTATION_CONFIG = window.meetingClientSettings.public.presentation;
  const isOpen = (useStorageKey('showUploadPresentationView') || false) && presentationEnabled;
  const selectedToBeNextCurrent = useStorageKey('selectedToBeNextCurrent') || null;
  return userIsPresenter && /*#__PURE__*/React.createElement(ErrorBoundary, {
    Fallback: FallbackModal
  }, /*#__PURE__*/React.createElement(PresentationUploader, _extends({
    isPresenter: userIsPresenter,
    presentations: presentations,
    currentPresentation: currentPresentation,
    exportPresentation: exportPresentation,
    dispatchChangePresentationDownloadable: dispatchChangePresentationDownloadable,
    setPresentation: setPresentation,
    removePresentation: removePresentation,
    isOpen: isOpen,
    selectedToBeNextCurrent: selectedToBeNextCurrent,
    fileUploadConstraintsHint: PRESENTATION_CONFIG.fileUploadConstraintsHint,
    fileSizeMax: PRESENTATION_CONFIG.mirroredFromBBBCore.uploadSizeMax,
    filePagesMax: PRESENTATION_CONFIG.mirroredFromBBBCore.uploadPagesMax,
    fileValidMimeTypes: PRESENTATION_CONFIG.uploadValidMimeTypes,
    allowDownloadOriginal: allowDownloadOriginal,
    allowDownloadConverted: allowDownloadConverted,
    allowDownloadWithAnnotations: allowDownloadWithAnnotations,
    presentationEnabled: presentationEnabled,
    externalUploadData: externalUploadData,
    handleSave: Service.handleSavePresentation,
    handleDismissToast: PresUploaderToast.handleDismissToast,
    renderToastList: Service.renderToastList,
    renderPresentationItemStatus: PresUploaderToast.renderPresentationItemStatus,
    handleFiledrop: Service.handleFiledrop,
    dispatchDisableDownloadable: Service.dispatchDisableDownloadable,
    dispatchEnableDownloadable: Service.dispatchEnableDownloadable
  }, props)));
};
module.exportDefault(PresentationUploaderContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutation.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-uploader/mutation.ts                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  requestPresentationUploadTokenMutation: () => requestPresentationUploadTokenMutation
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const requestPresentationUploadTokenMutation = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation RequestPresentationUploadToken($podId: String!, $filename: String!, $uploadTemporaryId: String!) {\n    presentationRequestUploadToken(\n      podId: $podId,\n      filename: $filename,\n      uploadTemporaryId: $uploadTemporaryId,\n    )\n  }\n"])));
module.exportDefault({
  requestPresentationUploadTokenMutation
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-uploader/queries.ts                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  getPresentationUploadToken: () => getPresentationUploadToken
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const getPresentationUploadToken = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  query getPresentationUploadToken ($uploadTemporaryId: String!){\n    pres_presentation_uploadToken(where: {uploadTemporaryId: {_eq: $uploadTemporaryId}}) {\n      presentationId\n      uploadTemporaryId\n      uploadToken\n    }\n  }\n"])));
module.exportDefault({
  getPresentationUploadToken
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-uploader/service.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 1);
let partition;
module.link("/imports/utils/array-utils", {
  partition(v) {
    partition = v;
  }
}, 2);
let update;
module.link("immutability-helper", {
  default(v) {
    update = v;
  }
}, 3);
let uuid;
module.link("uuid", {
  v4(v) {
    uuid = v;
  }
}, 4);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 5);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 6);
let apolloContextHolder;
module.link("/imports/ui/core/graphql/apolloContextHolder/apolloContextHolder", {
  default(v) {
    apolloContextHolder = v;
  }
}, 7);
let getPresentationUploadToken;
module.link("./queries", {
  getPresentationUploadToken(v) {
    getPresentationUploadToken = v;
  }
}, 8);
let requestPresentationUploadTokenMutation;
module.link("./mutation", {
  requestPresentationUploadTokenMutation(v) {
    requestPresentationUploadTokenMutation = v;
  }
}, 9);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 10);
const TOKEN_TIMEOUT = 5000;
const POD_ID = 'DEFAULT_PRESENTATION_POD';

// fetch doesn't support progress. So we use xhr which support progress.
const futch = function (url) {
  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let onProgress = arguments.length > 2 ? arguments[2] : undefined;
  return new Promise((res, rej) => {
    const xhr = new XMLHttpRequest();
    xhr.open(opts.method || 'get', url);
    Object.keys(opts.headers || {}).forEach(k => xhr.setRequestHeader(k, opts.headers[k]));
    xhr.onload = e => {
      if (e.target.status !== 200) {
        return rej(new Error({
          code: e.target.status,
          message: e.target.statusText
        }));
      }
      return res(e.target.responseText);
    };
    xhr.onerror = rej;
    if (xhr.upload && onProgress) {
      xhr.upload.addEventListener('progress', onProgress, false);
    }
    xhr.send(opts.body);
  });
};
const requestPresentationUploadToken = (temporaryPresentationId, meetingId, filename) => new Promise((resolve, reject) => {
  const client = apolloContextHolder.getClient();
  client.mutate({
    mutation: requestPresentationUploadTokenMutation,
    variables: {
      podId: POD_ID,
      filename,
      uploadTemporaryId: temporaryPresentationId
    }
  });
  const timeout = setTimeout(() => {
    reject(new Error({
      code: 408,
      message: 'requestPresentationUploadToken timeout'
    }));
  }, TOKEN_TIMEOUT);
  const getData = function () {
    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    if (n > 10) return;
    let recursiveTimeout = null;
    client.query({
      query: getPresentationUploadToken,
      variables: {
        uploadTemporaryId: temporaryPresentationId
      },
      fetchPolicy: 'network-only'
    }).then(result => {
      if (result.data.pres_presentation_uploadToken.length > 0) {
        clearTimeout(recursiveTimeout);
        clearTimeout(timeout);
        resolve(result.data.pres_presentation_uploadToken[0].uploadToken);
      }
    });
    recursiveTimeout = setTimeout(() => {
      getData(n + 1);
    }, 1000);
  };
  setTimeout(getData, 100);
});
const uploadAndConvertPresentation = (file, downloadable, meetingId, endpoint, onUpload, onProgress, onConversion, current) => {
  if (!file) return Promise.resolve();
  const temporaryPresentationId = uniqueId(uuid());
  const data = new FormData();
  data.append('fileUpload', file);
  data.append('conference', meetingId);
  data.append('room', meetingId);
  data.append('temporaryPresentationId', temporaryPresentationId);

  // TODO: Currently the uploader is not related to a POD so the id is fixed to the default
  data.append('pod_id', POD_ID);
  data.append('is_downloadable', downloadable);
  data.append('current', current);
  const opts = {
    method: 'POST',
    body: data
  };
  return requestPresentationUploadToken(temporaryPresentationId, meetingId, file.name).then(token => futch(endpoint.replace('upload', "".concat(token, "/upload")), opts, onProgress))
  // Trap the error so we can have parallel upload
  .catch(error => {
    logger.debug({
      logCode: 'presentation_uploader_service',
      extraInfo: {
        error
      }
    }, 'Generic presentation upload exception catcher');
    onUpload({
      error: true,
      done: true,
      status: error.code
    });
    return Promise.resolve();
  });
};
const uploadAndConvertPresentations = (presentationsToUpload, meetingId, uploadEndpoint) => Promise.all(presentationsToUpload.map(p => uploadAndConvertPresentation(p.file, p.downloadable, meetingId, uploadEndpoint, p.onUpload, p.onProgress, p.onConversion, p.current)));
const removePresentations = (presentationsToRemove, removePresentation) => Promise.all(presentationsToRemove.map(p => removePresentation(p.presentationId)));
const persistPresentationChanges = (oldState, newState, uploadEndpoint, setPresentation, removePresentation) => {
  const presentationsToUpload = newState.filter(p => !p.uploadCompleted);
  const presentationsToRemove = oldState.filter(p => !newState.find(u => {
    return u.presentationId === p.presentationId;
  }));
  let currentPresentation = newState.find(p => p.current);
  return uploadAndConvertPresentations(presentationsToUpload, Auth.meetingID, uploadEndpoint).then(presentations => {
    if (!presentations.length && !currentPresentation) return Promise.resolve();

    // Update the presentation with their new ids
    presentations.forEach((p, i) => {
      if (p === undefined) return;
      presentationsToUpload[i].onDone(p.presentationId);
    });
    return Promise.resolve(presentations);
  }).then(presentations => {
    var _currentPresentation, _currentPresentation2, _currentPresentation3, _currentPresentation4;
    if (currentPresentation === undefined) {
      setPresentation('');
      return Promise.resolve();
    }

    // If its a newly uploaded presentation we need to get it from promise result
    if ((_currentPresentation = currentPresentation) !== null && _currentPresentation !== void 0 && _currentPresentation.uploadInProgress) {
      const currentIndex = presentationsToUpload.findIndex(p => p === currentPresentation);
      currentPresentation = presentations[currentIndex];
    }

    // skip setting as current if error happened
    if ((_currentPresentation2 = currentPresentation) !== null && _currentPresentation2 !== void 0 && (_currentPresentation3 = _currentPresentation2.conversion) !== null && _currentPresentation3 !== void 0 && _currentPresentation3.error) {
      return Promise.resolve();
    }
    return setPresentation((_currentPresentation4 = currentPresentation) === null || _currentPresentation4 === void 0 ? void 0 : _currentPresentation4.presentationId);
  }).then(removePresentations.bind(null, presentationsToRemove, removePresentation));
};
const handleSavePresentation = function () {
  let presentations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let isFromPresentationUploaderInterface = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  let newPres = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let currentPresentations = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  let setPresentation = arguments.length > 4 ? arguments[4] : undefined;
  let removePresentation = arguments.length > 5 ? arguments[5] : undefined;
  let isPresentationEnabled = arguments.length > 6 ? arguments[6] : undefined;
  if (!isPresentationEnabled) {
    return null;
  }
  const PRESENTATION_CONFIG = window.meetingClientSettings.public.presentation;
  if (!isFromPresentationUploaderInterface) {
    if (presentations.length === 0) {
      presentations = [...currentPresentations];
    }
    presentations = presentations.map(p => update(p, {
      current: {
        $set: false
      }
    }));
    newPres.current = true;
    presentations.push(newPres);
  }
  return persistPresentationChanges(currentPresentations, presentations, PRESENTATION_CONFIG.uploadEndpoint, setPresentation, removePresentation);
};
const useExternalUploadData = () => {
  const {
    data: meeting
  } = useMeeting(m => ({
    presentationUploadExternalDescription: m.presentationUploadExternalDescription,
    presentationUploadExternalUrl: m.presentationUploadExternalUrl
  }));
  const {
    presentationUploadExternalDescription,
    presentationUploadExternalUrl
  } = meeting || {};
  return {
    presentationUploadExternalDescription,
    presentationUploadExternalUrl
  };
};
function handleFiledrop(files, files2, that, intl, intlMessages) {
  if (that) {
    const {
      fileValidMimeTypes
    } = that.props;
    const {
      toUploadCount
    } = that.state;
    const validMimes = fileValidMimeTypes.map(fileValid => fileValid.mime);
    const validExtentions = fileValidMimeTypes.map(fileValid => fileValid.extension);
    const [accepted, rejected] = partition(files.concat(files2), f => validMimes.includes(f.type) || validExtentions.includes(".".concat(f.name.split('.').pop())));
    const presentationsToUpload = accepted.map(file => {
      const id = uniqueId(file.name);
      return {
        file,
        downloadable: false,
        // by default new presentations are set not to be downloadable
        isRemovable: true,
        presentationId: id,
        name: file.name,
        current: false,
        conversion: {
          done: false,
          error: false
        },
        upload: {
          done: false,
          error: false,
          progress: 0
        },
        exportation: {
          error: false
        },
        onProgress: event => {
          if (!event.lengthComputable) {
            that.deepMergeUpdateFileKey(id, 'upload', {
              progress: 100,
              done: true
            });
            return;
          }
          that.deepMergeUpdateFileKey(id, 'upload', {
            progress: event.loaded / event.total * 100,
            done: event.loaded === event.total
          });
        },
        onConversion: conversion => {
          that.deepMergeUpdateFileKey(id, 'conversion', conversion);
        },
        onUpload: upload => {
          that.deepMergeUpdateFileKey(id, 'upload', upload);
        },
        onDone: newId => {
          that.updateFileKey(id, 'id', newId);
        }
      };
    });
    that.setState(_ref => {
      let {
        presentations
      } = _ref;
      return {
        presentations: presentations.concat(presentationsToUpload),
        toUploadCount: toUploadCount + presentationsToUpload.length
      };
    }, () => {
      // after the state is set (files have been dropped),
      // make the first of the new presentations current
      if (presentationsToUpload && presentationsToUpload.length) {
        that.handleCurrentChange(presentationsToUpload[0].presentationId);
      }
    });
    if (rejected.length > 0) {
      notify(intl.formatMessage(intlMessages.rejectedError), 'error');
    }
  }
}
module.exportDefault({
  handleSavePresentation,
  persistPresentationChanges,
  requestPresentationUploadToken,
  uploadAndConvertPresentation,
  handleFiledrop,
  useExternalUploadData
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-uploader/styles.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46, _templateObject47;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 1);
let Dropzone;
module.link("react-dropzone", {
  default(v) {
    Dropzone = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
let fileLineWidth, iconPaddingMd, borderSizeLarge, lgPaddingX, statusIconSize, toastMdMargin, uploadListHeight, smPaddingX, smPaddingY, borderSize, borderRadius, lgPaddingY, mdPaddingY, modalInnerWidth, statusInfoHeight, itemActionsWidth, uploadIconSize, iconLineHeight, mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  fileLineWidth(v) {
    fileLineWidth = v;
  },
  iconPaddingMd(v) {
    iconPaddingMd = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  },
  lgPaddingX(v) {
    lgPaddingX = v;
  },
  statusIconSize(v) {
    statusIconSize = v;
  },
  toastMdMargin(v) {
    toastMdMargin = v;
  },
  uploadListHeight(v) {
    uploadListHeight = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  modalInnerWidth(v) {
    modalInnerWidth = v;
  },
  statusInfoHeight(v) {
    statusInfoHeight = v;
  },
  itemActionsWidth(v) {
    itemActionsWidth = v;
  },
  uploadIconSize(v) {
    uploadIconSize = v;
  },
  iconLineHeight(v) {
    iconLineHeight = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 4);
let headingsFontWeight, fontSizeLarge, fontSizeLarger;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  headingsFontWeight(v) {
    headingsFontWeight = v;
  },
  fontSizeLarge(v) {
    fontSizeLarge = v;
  },
  fontSizeLarger(v) {
    fontSizeLarger = v;
  }
}, 5);
let colorGrayLight, colorGrayDark, colorPrimary, colorWhite, colorDanger, colorGray, colorGrayLighter, colorLink, colorSuccess, colorGrayLightest, colorText, colorBlueLight, colorOffWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayLight(v) {
    colorGrayLight = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorLink(v) {
    colorLink = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  colorText(v) {
    colorText = v;
  },
  colorBlueLight(v) {
    colorBlueLight = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  }
}, 6);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 7);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 8);
const barStripes = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  from { background-position: 1rem 0; }\n  to { background-position: 0 0; }\n"])));
const rotate = keyframes(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  0% { transform: rotate(0); }\n  100% { transform: rotate(360deg); }\n"])));
const UploadRow = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n"])));
const FileLine = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding-bottom: ", ";\n  width: ", ";\n"])), iconPaddingMd, fileLineWidth);
const ToastFileName = styled.span(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  height: 1.25rem !important;\n  margin-left: ", ";\n  height: 1rem;\n  width: auto;\n  text-align: left;\n  font-weight: ", ";\n\n  [dir=\"rtl\"] & {\n    margin-right: ", ";\n    margin-left: 0;\n    text-align: right;\n  }\n"])), mdPaddingY, headingsFontWeight, mdPaddingY);
const StatusIcon = styled.span(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  & > i {\n    height: ", ";\n    width: ", ";\n  }\n"])), statusIconSize, statusIconSize);
const StatusInfo = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  padding: 0;\n  bottom: ", ";\n  position: relative;\n  left: ", ";\n  \n  [dir=\"rtl\"] & {\n    right: ", ";\n    left: 0;\n  }\n"])), toastMdMargin, borderSizeLarge, borderSizeLarge);
const FileList = styled(ScrollboxVertical)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  height: 100%;\n  max-height: ", ";\n  padding: 1px;\n  margin-bottom: 2rem;\n  overflow-x: hidden;\n"])), uploadListHeight);
const Table = styled.table(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  position: relative;\n  width: 100%;\n  border-spacing: 0;\n  border-collapse: collapse;\n\n  & > tbody {\n    text-align: left;\n\n    [dir=\"rtl\"] & {\n      text-align: right;\n    }\n\n    > tr {\n      border-bottom: 1px solid ", ";\n\n      &:last-child {\n        border-bottom: 0;\n      }\n\n      &:hover,\n      &:focus {\n        background-color: transparentize(#8B9AA8, .85);\n      }\n\n      th,\n      td {\n        padding: calc(", " * 2) calc(", " / 2);\n        white-space: nowrap;\n      }\n\n      th {\n        font-weight: bold;\n        color: ", ";\n      }\n    }\n  }\n"])), colorGrayLight, smPaddingY, smPaddingX, colorGrayDark);
const VisuallyHidden = styled.th(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px; width: 1px;\n  margin: -1px; padding: 0; border: 0;\n"])));
const ToastWrapper = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  max-height: 50%;\n  width: ", ";\n"])), fileLineWidth);
const UploadToastHeader = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  position: relative;\n  margin-bottom: ", ";\n  padding-bottom: ", ";\n"])), toastMdMargin, smPaddingX);
const UploadIcon = styled(Icon)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  color: ", ";\n  height: ", ";\n  width: ", ";\n  border-radius: 50%;\n  font-size: 135%;\n  line-height: ", ";\n  margin-right: ", ";\n\n  [dir=\"rtl\"] & {\n    margin-left: ", ";\n    margin-right: 0;\n  }\n"])), colorPrimary, colorWhite, uploadIconSize, uploadIconSize, iconLineHeight, smPaddingX, smPaddingX);
const UploadToastTitle = styled.span(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  position: fixed;\n  font-weight: 600;\n  margin-top: ", ";\n"])), toastMdMargin);
const InnerToast = styled(ScrollboxVertical)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  position: relative;\n  width: 100%;\n  height: 100%;\n  max-height: ", ";\n  overflow-y: auto;\n  padding-right: 1.5rem;\n  box-sizing: content-box;\n  background: none;\n\n  [dir=\"rtl\"] & {\n    padding-right: 0;\n    padding-left: 1.5rem;\n  }\n"])), uploadListHeight);
const TableItemIcon = styled.td(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  width: 1%;\n\n  & > i {\n  font-size: 1.35rem;\n  }\n"])));
const TableItemCurrent = styled.th(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n  width: 1%;\n\n  padding-left: 0;\n  padding-right: inherit;\n\n  [dir=\"rtl\"] & {\n    padding-left: inherit;\n    padding-right: 0;\n  }\n"])));
const CurrentLabel = styled.span(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n  display: inline;\n  padding: .25em .5em;\n  font-size: 75%;\n  font-weight: 700;\n  line-height: 1;\n  color: ", ";\n  background: ", ";\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: .25em;\n  text-transform: uppercase;\n"])), colorWhite, colorPrimary);
const TableItemName = styled.th(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n  height: 1rem;\n  width: auto;\n  position: relative;\n\n  &:before {\n    content: \"\\00a0\";\n    visibility: hidden;\n  }\n\n  & > span {\n    min-width: 0;\n    display: inline-block;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    position: absolute;\n    left: 0;\n    right: 0;\n\n    [dir=\"rtl\"] & {\n      right: 1rem;\n    }\n  }\n"], ["\n  height: 1rem;\n  width: auto;\n  position: relative;\n\n  &:before {\n    content: \"\\\\00a0\";\n    visibility: hidden;\n  }\n\n  & > span {\n    min-width: 0;\n    display: inline-block;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n\n    position: absolute;\n    left: 0;\n    right: 0;\n\n    [dir=\"rtl\"] & {\n      right: 1rem;\n    }\n  }\n"])));
const TableItemStatus = styled.td(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["\n  width: 1%;\n\n  text-align: right;\n\n  [dir=\"rtl\"] & {\n    text-align: left;\n  }\n"])));
const ItemAction = styled.div(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\n  margin-left: ", ";\n  &, & i {\n    margin-top: .25rem;\n    display: inline-block;\n    border: 0;\n    background: transparent;\n    cursor: pointer;\n    font-size: 1.35rem;\n    color: ", ";\n    padding: 0;\n    ", "\n    :hover, :focus {\n      padding: unset !important;\n    }\n  }\n"])), smPaddingX, colorGrayLight, _ref => {
  let {
    animations
  } = _ref;
  return animations && "\n      transition: all .25s;\n    ";
});
const RemoveButton = styled(Button)(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\n  [dir=\"ltr\"] & {\n    margin-left: ", ";\n  }\n\n  [dir=\"rtl\"] & {\n    margin-right: ", ";\n  }\n\n  div > i {\n    margin-top: .25rem;\n  }\n\n  &,\n  & > i {\n    display: inline-block;\n    border: 0;\n    background: transparent;\n    cursor: pointer;\n    font-size: 1.35rem;\n    color: ", ";\n    padding: 0;\n\n    ", "\n\n    :hover, :focus {\n      padding: unset !important;\n    }\n  }\n\n  background-color: transparent;\n  border: 0 !important;\n\n  & > i:focus,\n  & > i:hover {\n    color: ", " !important;\n  }\n\n  &[aria-disabled=\"true\"] {\n    cursor: not-allowed;\n    opacity: .5;\n    box-shadow: none;\n    pointer-events: none;\n  }\n"])), smPaddingX, smPaddingX, colorGrayLight, _ref2 => {
  let {
    animations
  } = _ref2;
  return animations && "\n      transition: all .25s;\n    ";
}, colorDanger);
const UploaderDropzone = styled(Dropzone)(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\n  flex: auto;\n  border: ", " dashed ", ";\n  color: ", ";\n  border-radius: ", ";\n  padding: calc(", " * 2.5) ", ";\n  text-align: center;\n  font-size: ", ";\n  cursor: pointer;\n\n  & .dropzoneActive {\n    background-color: ", ";\n  }\n"])), borderSize, colorGray, colorGray, borderRadius, lgPaddingY, lgPaddingX, fontSizeLarge, colorGrayLighter);
const DropzoneIcon = styled(Icon)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["\n  font-size: calc(", " * 3);\n"])), fontSizeLarge);
const DropzoneMessage = styled.p(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["\n  margin: ", " 0;\n"])), mdPaddingY);
const DropzoneLink = styled.span(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["\n  color: ", ";\n  text-decoration: underline;\n  font-size: 80%;\n  display: block;\n"])), colorLink);
const UploaderModal = styled.div(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["\n  background-color: white;\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 1300;\n"])));
const ModalInner = styled.div(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["\n  margin-left: auto;\n  margin-right: auto;\n  width: ", ";\n  max-height: 100%;\n  max-width: 100%;\n  padding-bottom: .75rem;\n  overflow-y: auto;\n  \n  @media ", " {\n    padding-left: ", ";\n    padding-right: ", ";\n  }\n"])), modalInnerWidth, smallOnly, statusInfoHeight, statusInfoHeight);
const ModalHeader = styled.div(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  border-bottom:", " solid ", ";\n  margin-bottom: 2rem;\n  padding: ", " 0;\n\n  div {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n"])), borderSize, colorGrayLighter, mdPaddingX);
const ActionWrapper = styled.div(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  margin: 0 0.25rem;\n"])));
const DismissButton = styled(Button)(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["\n  min-width: 6rem;\n  height: 1.875rem;\n  margin-right: ", ";\n"])), toastMdMargin);
const ConfirmButton = styled(Button)(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["\n  min-width: 6rem;\n  height: 1.875rem;\n"])));
const ModalHint = styled.div(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["\n  margin-bottom: 1rem;\n  color: ", ";\n  font-weight: normal;\n"])), colorText);
const ToastItemIcon = styled(Icon)(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["\n  position: relative;\n  width: ", ";\n  height: ", ";\n  font-size: 117%;\n  left: ", ";\n\n  [dir=\"rtl\"] & {\n    left: unset;\n    right: ", ";\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n"])), statusIconSize, statusIconSize, statusInfoHeight, statusInfoHeight, _ref3 => {
  let {
    done
  } = _ref3;
  return done && "\n    color: ".concat(colorSuccess, ";\n  ");
}, _ref4 => {
  let {
    error
  } = _ref4;
  return error && "\n    color: ".concat(colorDanger, ";\n  ");
}, _ref5 => {
  let {
    loading
  } = _ref5;
  return loading && css(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["\n    color: ", ";\n    border: 1px solid;\n    border-radius: 50%;\n    border-right-color: ", ";\n    animation: ", " 1s linear infinite;\n  "])), colorGrayLightest, _ref6 => {
    let {
      color
    } = _ref6;
    return color || colorGray;
  }, rotate);
});
const StatusInfoSpan = styled.span(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["\n  font-size: 70%;\n\n  ", "\n"])), _ref7 => {
  let {
    styles
  } = _ref7;
  return styles === 'error' && "\n    display: inline-block;\n    color: ".concat(colorDanger, ";\n  ");
});
const PresentationItem = styled.tr(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), _ref8 => {
  let {
    isNew
  } = _ref8;
  return isNew && "\n    background-color: rgba(0, 128, 129, 0.05);\n  ";
}, _ref9 => {
  let {
    uploading
  } = _ref9;
  return uploading && "\n    background-color: rgba(0, 128, 129, 0.25);\n  ";
}, _ref10 => {
  let {
    uploadInProgress
  } = _ref10;
  return uploadInProgress && "\n    background-color: rgba(0, 128, 129, 0.25);\n  ";
}, _ref11 => {
  let {
    error
  } = _ref11;
  return error && "\n    background-color: rgba(223, 39, 33, 0.25);\n  ";
}, _ref12 => {
  let {
    animated
  } = _ref12;
  return animated && "\n    background-image: linear-gradient(45deg,\n    rgba(255, 255, 255, .15) 25%,\n    transparent 25%,\n    transparent 50%,\n    rgba(255, 255, 255, .15) 50%,\n    rgba(255, 255, 255, .15) 75%,\n    transparent 75%,\n    transparent\n    );\n    background-size: 1rem 1rem;\n\n    ".concat(_ref13 => {
    let {
      animations
    } = _ref13;
    return animations && css(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["\n      animation: ", " 1s linear infinite;\n    "])), barStripes);
  }, "\n    }\n  ");
});
const TableItemActions = styled.td(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["\n  width: 1%;\n  min-width: ", ";\n  text-align: left;\n\n  [dir=\"rtl\"] & {\n    text-align: right;\n  }\n\n  ", "\n"])), itemActionsWidth, _ref14 => {
  let {
    notDownloadable
  } = _ref14;
  return notDownloadable && "\n    min-width: 48px;\n  ";
});
const ExtraHint = styled.div(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["\n  margin-top: 1rem;\n  font-weight: bold;\n"])));
const ExternalUpload = styled.div(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  border-radius: ", ";\n  margin-top: 2rem;\n  padding: ", ";\n  color: ", ";\n  font-weight: normal;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n\n  & p {\n    margin: 0;\n  }\n"])), colorOffWhite, borderRadius, lgPaddingX, colorText);
const ExternalUploadTitle = styled.h4(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["\n  font-size: 0.9rem;\n  margin: 0;\n"])));
const ExternalUploadButton = styled(Button)(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["\n  height: 2rem;\n  align-self: center;\n  margin-left: 2rem;\n"])));
const ExportHint = styled(ModalHint)(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["\n  margin: 2rem 0;\n"])));
const SetCurrentAction = styled.td(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral(["\n  width: 0;\n\n  &, & i {\n    border: 0;\n    background: transparent;\n    cursor: pointer;\n    font-size: 1.35rem;\n\n    [dir=\"ltr\"] & {\n      padding-left: 0 !important;\n    }\n\n    [dir=\"rtl\"] & {\n      padding-right: 0 !important;\n    }\n\n    ", "\n  }\n"])), _ref15 => {
  let {
    animations
  } = _ref15;
  return animations && "\n      transition: all .25s;\n    ";
});
const Head = styled.tr(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["\n  color: ", ";\n\n  th {\n    padding: calc(", " * 2) calc(", " / 2);\n    white-space: nowrap;\n    text-align: left;\n\n    [dir=\"rtl\"] & {\n      text-align: right;\n    }\n\n    &:first-child {\n      [dir=\"ltr\"] & {\n        padding-left: 0;\n      }\n\n      [dir=\"rtl\"] & {\n        padding-right: 0;\n      }\n    }\n  }\n"])), colorText, smPaddingY, smPaddingX);
const Title = styled.h1(_templateObject47 || (_templateObject47 = _taggedTemplateLiteral(["\n  margin: 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-size: ", ";\n  font-weight: ", ";\n"])), fontSizeLarger, headingsFontWeight);
module.exportDefault({
  UploadRow,
  FileLine,
  ToastFileName,
  StatusIcon,
  StatusInfo,
  FileList,
  Table,
  VisuallyHidden,
  ToastWrapper,
  UploadToastHeader,
  UploadIcon,
  UploadToastTitle,
  InnerToast,
  TableItemIcon,
  TableItemCurrent,
  CurrentLabel,
  TableItemName,
  TableItemStatus,
  ItemAction,
  RemoveButton,
  UploaderDropzone,
  DropzoneIcon,
  DropzoneMessage,
  DropzoneLink,
  UploaderModal,
  ModalInner,
  ModalHeader,
  ActionWrapper,
  DismissButton,
  ConfirmButton,
  ModalHint,
  ToastItemIcon,
  StatusInfoSpan,
  PresentationItem,
  TableItemActions,
  ExtraHint,
  ExternalUpload,
  ExternalUploadTitle,
  ExternalUploadButton,
  ExportHint,
  SetCurrentAction,
  Head,
  Title
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation-toast":{"presentation-uploader-toast":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toast/presentation-uploader-toast/component.jsx                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  PresentationUploaderToast: () => PresentationUploaderToast
});
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 1);
let Styled;
module.link("/imports/ui/components/presentation/presentation-uploader/styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let toast;
module.link("react-toastify", {
  toast(v) {
    toast = v;
  }
}, 3);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 4);
let usePreviousValue;
module.link("/imports/ui/hooks/usePreviousValue", {
  default(v) {
    usePreviousValue = v;
  }
}, 5);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 6);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 7);
const EXPORT_STATUSES = {
  RUNNING: 'RUNNING',
  COLLECTING: 'COLLECTING',
  PROCESSING: 'PROCESSING',
  TIMEOUT: 'TIMEOUT',
  EXPORTED: 'EXPORTED'
};
const intlMessages = defineMessages({
  item: {
    id: 'app.presentationUploder.item',
    description: 'single item label'
  },
  itemPlural: {
    id: 'app.presentationUploder.itemPlural',
    description: 'plural item label'
  },
  uploading: {
    id: 'app.presentationUploder.uploading',
    description: 'uploading label for toast notification'
  },
  uploadStatus: {
    id: 'app.presentationUploder.uploadStatus',
    description: 'upload status for toast notification'
  },
  completed: {
    id: 'app.presentationUploder.completed',
    description: 'uploads complete label for toast notification'
  },
  GENERATING_THUMBNAIL: {
    id: 'app.presentationUploder.conversion.generatingThumbnail',
    description: 'indicatess that it is generating thumbnails'
  },
  GENERATING_SVGIMAGES: {
    id: 'app.presentationUploder.conversion.generatingSvg',
    description: 'warns that it is generating svg images'
  },
  GENERATED_SLIDE: {
    id: 'app.presentationUploder.conversion.generatedSlides',
    description: 'warns that were slides generated'
  },
  413: {
    id: 'app.presentationUploder.upload.413',
    description: 'error that file exceed the size limit'
  },
  FILE_VIRUS: {
    id: 'app.presentationUploder.upload.fileVirus',
    description: 'error that the file could not be uploaded due to security concerns',
  },
  CONVERSION_TIMEOUT: {
    id: 'app.presentationUploder.conversion.conversionTimeout',
    description: 'warns the user that the presentation timed out in the back-end in specific page of the document'
  },
  FILE_TOO_LARGE: {
    id: 'app.presentationUploder.upload.413',
    description: 'error that file exceed the size limit'
  },
  INVALID_MIME_TYPE: {
    id: 'app.presentationUploder.conversion.invalidMimeType',
    description: 'warns user that the file\'s mime type is not supported or it doesn\'t match the extension'
  },
  PAGE_COUNT_EXCEEDED: {
    id: 'app.presentationUploder.conversion.pageCountExceeded',
    description: 'warns the user that the conversion failed because of the page count'
  },
  PDF_HAS_BIG_PAGE: {
    id: 'app.presentationUploder.conversion.pdfHasBigPage',
    description: 'warns the user that the conversion failed because of the pdf page siz that exceeds the allowed limit'
  },
  OFFICE_DOC_CONVERSION_INVALID: {
    id: 'app.presentationUploder.conversion.officeDocConversionInvalid',
    description: ''
  },
  OFFICE_DOC_CONVERSION_FAILED: {
    id: 'app.presentationUploder.conversion.officeDocConversionFailed',
    description: 'warns the user that the conversion failed because of wrong office file'
  },
  UNSUPPORTED_DOCUMENT: {
    id: 'app.presentationUploder.conversion.unsupportedDocument',
    description: 'warns the user that the file extension is not supported'
  },
  204: {
    id: 'app.presentationUploder.conversion.204',
    description: 'error indicating that the file has no content to capture'
  },
  fileToUpload: {
    id: 'app.presentationUploder.fileToUpload',
    description: 'message used in the file selected for upload'
  },
  uploadProcess: {
    id: 'app.presentationUploder.upload.progress',
    description: 'message that indicates the percentage of the upload'
  },
  badConnectionError: {
    id: 'app.presentationUploder.connectionClosedError',
    description: 'message indicating that the connection was closed'
  },
  conversionProcessingSlides: {
    id: 'app.presentationUploder.conversion.conversionProcessingSlides',
    description: 'indicates how many slides were converted'
  },
  genericError: {
    id: 'app.presentationUploder.genericError',
    description: 'generic error while uploading/converting'
  },
  genericConversionStatus: {
    id: 'app.presentationUploder.conversion.genericConversionStatus',
    description: 'indicates that file is being converted'
  },
  linkAvailable: {
    id: 'app.presentationUploader.export.linkAvailable',
    description: 'download presentation link available on public chat'
  },
  downloadButtonAvailable: {
    id: 'app.presentationUploader.export.downloadButtonAvailable',
    description: 'download presentation link available on public chat'
  },
  exportToastHeader: {
    id: 'app.presentationUploader.exportToastHeader',
    description: 'exporting toast header'
  },
  exportToastHeaderPlural: {
    id: 'app.presentationUploader.exportToastHeaderPlural',
    description: 'exporting toast header in plural'
  },
  sending: {
    id: 'app.presentationUploader.sending',
    description: 'sending label'
  },
  collecting: {
    id: 'app.presentationUploader.collecting',
    description: 'collecting label'
  },
  processing: {
    id: 'app.presentationUploader.processing',
    description: 'processing label'
  },
  sent: {
    id: 'app.presentationUploader.sent',
    description: 'sent label'
  },
  exportingTimeout: {
    id: 'app.presentationUploader.exportingTimeout',
    description: 'exporting timeout label'
  }
});
function renderPresentationItemStatus(item, intl) {
  if ('progress' in item && item.progress === 0 || 'upload' in item && item.upload.progress === 0 && !item.upload.error) {
    return intl.formatMessage(intlMessages.fileToUpload);
  }
  if ('progress' in item && item.progress < 100 && !('conversion' in item)) {
    return intl.formatMessage(intlMessages.uploadProcess, {
      0: Math.floor(item.progress).toString()
    });
  }
  const constraint = {};
  if ('upload' in item && item.upload.done && item.upload.error) {
    if (item.conversion.status === 'FILE_TOO_LARGE' || item.upload.status !== 413) {
      constraint['0'] = (item.conversion.maxFileSize / 1000 / 1000).toFixed(2);
    } else if (item.progress < 100) {
      const errorMessage = intlMessages.badConnectionError;
      return intl.formatMessage(errorMessage);
    }
    const errorMessage = intlMessages[item.upload.status] || intlMessages.genericError;
    return intl.formatMessage(errorMessage, constraint);
  }
  if ('uploadErrorMsgKey' in item && item.uploadErrorMsgKey) {
    const errorMessage = intlMessages[item.uploadErrorMsgKey] || intlMessages.genericConversionStatus;
    switch (item.uploadErrorMsgKey) {
      case 'CONVERSION_TIMEOUT':
        constraint['0'] = item.uploadErrorDetailsJson.numberPageError;
        constraint['1'] = item.uploadErrorDetailsJson.maxNumberOfAttempts;
        break;
      case 'FILE_TOO_LARGE':
        constraint['0'] = (item.uploadErrorDetailsJson.maxFileSize / 1000 / 1000).toFixed(2);
        break;
      case 'PAGE_COUNT_EXCEEDED':
        constraint['0'] = item.uploadErrorDetailsJson.maxNumberPages;
        break;
      case 'PDF_HAS_BIG_PAGE':
        constraint['0'] = (item.uploadErrorDetailsJson.bigPageSize / 1000 / 1000).toFixed(2);
        break;
      case 'INVALID_MIME_TYPE':
        constraint['0'] = item.uploadErrorDetailsJson.fileExtension;
        constraint['1'] = item.uploadErrorDetailsJson.fileMime;
        break;
      default:
        break;
    }
    return intl.formatMessage(errorMessage, constraint);
  }
  if ('uploadInProgress' in item && item.uploadInProgress && !item.uploadErrorMsgKey || 'progress' in item && item.progress === 100) {
    let conversionStatusMessage;
    if ('totalPagesUploaded' in item) {
      var _item$conversion;
      if (item.totalPagesUploaded < item.totalPages) {
        return intl.formatMessage(intlMessages.conversionProcessingSlides, {
          0: item.totalPagesUploaded,
          1: item.totalPages
        });
      }
      conversionStatusMessage = intlMessages[(_item$conversion = item.conversion) === null || _item$conversion === void 0 ? void 0 : _item$conversion.status] || intlMessages.genericConversionStatus;
    } else {
      conversionStatusMessage = intlMessages.genericConversionStatus;
    }
    return intl.formatMessage(conversionStatusMessage);
  }
  return null;
}
function renderToastItem(item, intl) {
  const isUploading = 'totalPages' in item && item.totalPages > 0;
  const uploadInProgress = 'uploadCompleted' in item && !item.uploadCompleted;
  const hasError = 'uploadErrorMsgKey' in item && item.uploadErrorMsgKey;
  const isProcessing = (isUploading || uploadInProgress) && !hasError;
  let icon = isProcessing ? 'blank' : 'check';
  if (hasError) icon = 'circle_close';
  return /*#__PURE__*/React.createElement(Styled.UploadRow, {
    key: item.presentationId || item.temporaryPresentationId,
    onClick: () => {
      if (hasError || isProcessing) Session.setItem('showUploadPresentationView', true);
    }
  }, /*#__PURE__*/React.createElement(Styled.FileLine, null, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(Icon, {
    iconName: "file"
  })), /*#__PURE__*/React.createElement(Styled.ToastFileName, null, /*#__PURE__*/React.createElement("span", null, item.filename || item.name)), /*#__PURE__*/React.createElement(Styled.StatusIcon, null, /*#__PURE__*/React.createElement(Styled.ToastItemIcon, {
    done: !isProcessing && !hasError,
    error: hasError,
    loading: isProcessing,
    iconName: icon
  }))), /*#__PURE__*/React.createElement(Styled.StatusInfo, null, /*#__PURE__*/React.createElement(Styled.StatusInfoSpan, {
    "data-test": "presentationStatusInfo",
    styles: hasError ? 'error' : 'info'
  }, renderPresentationItemStatus(item, intl))));
}
const renderToastList = (presentations, intl) => {
  let converted = 0;
  const presentationsSorted = presentations.sort((a, b) => a.uploadCompleted - b.uploadCompleted);
  presentationsSorted.forEach(p => {
    const presDone = !p.uploadInProgress;
    if (presDone) converted += 1;
    return p;
  });
  let toastHeading = '';
  const itemLabel = presentationsSorted.length > 1 ? intl.formatMessage(intlMessages.itemPlural) : intl.formatMessage(intlMessages.item);
  if (converted === 0) {
    toastHeading = intl.formatMessage(intlMessages.uploading, {
      0: presentationsSorted.length,
      1: itemLabel
    });
  }
  if (converted > 0 && converted !== presentationsSorted.length) {
    toastHeading = intl.formatMessage(intlMessages.uploadStatus, {
      0: converted,
      1: presentationsSorted.length
    });
  }
  if (converted === presentationsSorted.length) {
    toastHeading = intl.formatMessage(intlMessages.completed, {
      0: converted
    });
  }
  return /*#__PURE__*/React.createElement(Styled.ToastWrapper, {
    "data-test": "presentationUploadProgressToast"
  }, /*#__PURE__*/React.createElement(Styled.UploadToastHeader, null, /*#__PURE__*/React.createElement(Styled.UploadIcon, {
    iconName: "upload"
  }), /*#__PURE__*/React.createElement(Styled.UploadToastTitle, null, toastHeading)), /*#__PURE__*/React.createElement(Styled.InnerToast, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, presentationsSorted.map(item => renderToastItem(item, intl))))));
};
function handleDismissToast(toastId) {
  return toast.dismiss(toastId);
}
function renderExportationStatus(item, intl) {
  switch (item.exportToChatStatus) {
    case EXPORT_STATUSES.RUNNING:
      return intl.formatMessage(intlMessages.sending);
    case EXPORT_STATUSES.COLLECTING:
      return intl.formatMessage(intlMessages.collecting, {
        0: item.exportToChatCurrentPage,
        1: item.totalPages
      });
    case EXPORT_STATUSES.PROCESSING:
      return intl.formatMessage(intlMessages.processing, {
        0: item.exportToChatCurrentPage,
        1: item.totalPages
      });
    case EXPORT_STATUSES.TIMEOUT:
      return intl.formatMessage(intlMessages.exportingTimeout);
    case EXPORT_STATUSES.EXPORTED:
      return intl.formatMessage(intlMessages.sent);
    default:
      return '';
  }
}
function renderToastExportItem(item, intl) {
  const {
    exportToChatStatus: status
  } = item;
  const loading = [EXPORT_STATUSES.RUNNING, EXPORT_STATUSES.COLLECTING, EXPORT_STATUSES.PROCESSING].includes(status);
  const done = status === EXPORT_STATUSES.EXPORTED;
  const statusIconMap = {
    [EXPORT_STATUSES.RUNNING]: 'blank',
    [EXPORT_STATUSES.COLLECTING]: 'blank',
    [EXPORT_STATUSES.PROCESSING]: 'blank',
    [EXPORT_STATUSES.EXPORTED]: 'check',
    [EXPORT_STATUSES.TIMEOUT]: 'warning'
  };
  const icon = statusIconMap[status] || '';
  return /*#__PURE__*/React.createElement(Styled.UploadRow, {
    key: item.presentationId || item.temporaryPresentationId
  }, /*#__PURE__*/React.createElement(Styled.FileLine, null, /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(Icon, {
    iconName: "file"
  })), /*#__PURE__*/React.createElement(Styled.ToastFileName, null, /*#__PURE__*/React.createElement("span", null, item.name)), /*#__PURE__*/React.createElement(Styled.StatusIcon, null, /*#__PURE__*/React.createElement(Styled.ToastItemIcon, {
    loading: loading,
    done: done,
    iconName: icon,
    color: "#0F70D7"
  }))), /*#__PURE__*/React.createElement(Styled.StatusInfo, null, /*#__PURE__*/React.createElement(Styled.StatusInfoSpan, null, renderExportationStatus(item, intl))));
}
function renderExportToast(presToShow, intl) {
  const isAllExported = presToShow.every(p => p.exportToChatStatus === EXPORT_STATUSES.EXPORTED);
  const shouldDismiss = isAllExported && this.exportToastId;
  if (shouldDismiss) {
    handleDismissToast(this.exportToastId);
    return null;
  }
  const presToShowSorted = [...presToShow.filter(p => p.exportToChatStatus === EXPORT_STATUSES.RUNNING), ...presToShow.filter(p => p.exportToChatStatus === EXPORT_STATUSES.COLLECTING), ...presToShow.filter(p => p.exportToChatStatus === EXPORT_STATUSES.PROCESSING), ...presToShow.filter(p => p.exportToChatStatus === EXPORT_STATUSES.TIMEOUT), ...presToShow.filter(p => p.exportToChatStatus === EXPORT_STATUSES.EXPORTED)];
  const headerLabelId = presToShowSorted.length === 1 ? 'exportToastHeader' : 'exportToastHeaderPlural';
  return /*#__PURE__*/React.createElement(Styled.ToastWrapper, {
    "data-test": "downloadPresentationToast"
  }, /*#__PURE__*/React.createElement(Styled.UploadToastHeader, null, /*#__PURE__*/React.createElement(Styled.UploadIcon, {
    iconName: "download"
  }), /*#__PURE__*/React.createElement(Styled.UploadToastTitle, null, intl.formatMessage(intlMessages[headerLabelId], {
    0: presToShowSorted.length
  }))), /*#__PURE__*/React.createElement(Styled.InnerToast, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, presToShowSorted.map(item => renderToastExportItem(item, intl))))));
}
const PresentationUploaderToast = _ref => {
  let {
    intl,
    convertingPresentations,
    presentations
  } = _ref;
  const prevPresentations = usePreviousValue(presentations);
  useEffect(() => {
    presentations.forEach(p => {
      const prevPropPres = (prevPresentations || []).find(pres => pres.presentationId === p.presentationId);
      // display notification when presentation is exported
      let exportToastId = Session.getItem('presentationUploaderExportToastId');
      if (prevPropPres !== null && prevPropPres !== void 0 && prevPropPres.exportToChatStatus && (p === null || p === void 0 ? void 0 : p.exportToChatStatus) === EXPORT_STATUSES.EXPORTED && (prevPropPres === null || prevPropPres === void 0 ? void 0 : prevPropPres.exportToChatStatus) !== (p === null || p === void 0 ? void 0 : p.exportToChatStatus)) {
        notify(intl.formatMessage(intlMessages.linkAvailable, {
          0: p.name
        }), 'success');
        Session.setItem('presentationUploaderExportToastId', null);
        handleDismissToast(exportToastId);
      }

      // display notification for exportation status
      if ([EXPORT_STATUSES.RUNNING, EXPORT_STATUSES.COLLECTING, EXPORT_STATUSES.PROCESSING].includes(p === null || p === void 0 ? void 0 : p.exportToChatStatus)) {
        if (exportToastId) {
          toast.update(exportToastId, {
            render: renderExportToast(presentations, intl)
          });
        } else {
          exportToastId = toast.info(renderExportToast(presentations, intl), {
            hideProgressBar: true,
            autoClose: false,
            newestOnTop: true,
            closeOnClick: true,
            onClose: () => {
              Session.setItem('presentationUploaderExportToastId', null);
            }
          });
          Session.setItem('presentationUploaderExportToastId', exportToastId);
        }
      }
    });
  }, [presentations]);
  let activeToast = Session.getItem('presentationUploaderToastId');
  const showToast = convertingPresentations.length > 0;
  if (showToast && !activeToast) {
    activeToast = toast.info(() => renderToastList(convertingPresentations, intl), {
      hideProgressBar: true,
      autoClose: false,
      newestOnTop: true,
      closeOnClick: true,
      className: 'presentationUploaderToast toastClass',
      onClose: () => {
        Session.setItem('presentationUploaderToastId', null);
      }
    });
    Session.setItem('presentationUploaderToastId', activeToast);
  } else if (!showToast && activeToast) {
    handleDismissToast(activeToast);
  } else {
    toast.update(activeToast, {
      render: renderToastList(convertingPresentations, intl)
    });
  }
  return null;
};
module.exportDefault({
  handleDismissToast,
  renderPresentationItemStatus
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-toast/presentation-uploader-toast/container.jsx                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PresentationUploaderToast;
module.link("./component", {
  PresentationUploaderToast(v) {
    PresentationUploaderToast = v;
  }
}, 1);
let EXPORTING_PRESENTATIONS_SUBSCRIPTION;
module.link("/imports/ui/components/whiteboard/queries", {
  EXPORTING_PRESENTATIONS_SUBSCRIPTION(v) {
    EXPORTING_PRESENTATIONS_SUBSCRIPTION = v;
  }
}, 2);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 3);
const PresentationUploaderToastContainer = props => {
  const {
    data: presentationData,
    loading: presentationLoading
  } = useDeduplicatedSubscription(EXPORTING_PRESENTATIONS_SUBSCRIPTION);
  const presentations = (presentationData === null || presentationData === void 0 ? void 0 : presentationData.pres_presentation) || [];
  const convertingPresentations = presentations.filter(p => !p.uploadCompleted || !!p.uploadErrorMsgKey);
  if (presentationLoading) return null;
  if (!presentations.length) return null;
  return /*#__PURE__*/React.createElement(PresentationUploaderToast, _objectSpread({
    presentations: presentations.filter(p => p),
    convertingPresentations
  }, props));
};
module.exportDefault(PresentationUploaderToastContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"download-presentation-button":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/download-presentation-button/component.jsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const intlMessages = defineMessages({
  downloadPresentationButton: {
    id: 'app.downloadPresentationButton.label',
    description: 'Download presentation label'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  handleDownloadPresentation: PropTypes.func.isRequired,
  dark: PropTypes.bool
};
const DownloadPresentationButton = _ref => {
  let {
    intl,
    handleDownloadPresentation,
    dark = false
  } = _ref;
  return /*#__PURE__*/React.createElement(Styled.ButtonWrapper, {
    theme: dark ? 'dark' : 'light'
  }, /*#__PURE__*/React.createElement(Styled.DownloadButton, {
    "data-test": "presentationDownload",
    color: "default",
    icon: "template_download",
    size: "sm",
    onClick: handleDownloadPresentation,
    label: intl.formatMessage(intlMessages.downloadPresentationButton),
    hideLabel: true
  }));
};
DownloadPresentationButton.propTypes = propTypes;
module.exportDefault(injectIntl(DownloadPresentationButton));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/download-presentation-button/styles.js                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let colorWhite, colorBlack, colorTransparent;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorBlack(v) {
    colorBlack = v;
  },
  colorTransparent(v) {
    colorTransparent = v;
  }
}, 2);
const DownloadButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &,\n  &:active,\n  &:hover,\n  &:focus {\n    background-color: ", " !important;\n    border: none !important;\n\n    i {\n      border: none !important;\n      background-color: ", " !important;\n    }\n  }\n\n  padding: 5px;\n\n  &:hover {\n    border: 0;\n  }\n\n  i {\n    font-size: 1rem;\n  }\n"])), colorTransparent, colorTransparent);
const ButtonWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute;\n  right: auto;\n  left: 0;\n  background-color: ", ";\n  cursor: pointer;\n  border: 0;\n  z-index: 999;\n  margin: 2px;\n  bottom: 0;\n\n  [dir=\"rtl\"] & {\n    right: 0;\n    left : auto;\n  }\n\n  [class*=\"presentationZoomControls\"] & {\n    position: relative !important;\n  }\n\n  ", "\n\n  ", "\n"])), colorTransparent, _ref => {
  let {
    theme
  } = _ref;
  return theme === 'dark' && "\n    background-color: rgba(0,0,0,.3) !important;\n\n    & > button i {\n      color: ".concat(colorWhite, " !important;\n    }\n  ");
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme === 'light' && "\n    background-color: ".concat(colorTransparent, " !important;\n\n    & > button i {\n      color: ").concat(colorBlack, " !important;\n    }\n  ");
});
module.exportDefault({
  DownloadButton,
  ButtonWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation-menu":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-menu/component.jsx                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useState, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let toPng;
module.link("html-to-image", {
  toPng(v) {
    toPng = v;
  }
}, 3);
let toast;
module.link("react-toastify", {
  toast(v) {
    toast = v;
  }
}, 4);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 5);
let PresentationDropdownItemType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/presentation-dropdown-item/enums", {
  PresentationDropdownItemType(v) {
    PresentationDropdownItemType = v;
  }
}, 6);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 7);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 8);
let TooltipContainer;
module.link("/imports/ui/components/common/tooltip/container", {
  default(v) {
    TooltipContainer = v;
  }
}, 9);
let ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 10);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 11);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 12);
let AppService;
module.link("/imports/ui/components/app/service", {
  default(v) {
    AppService = v;
  }
}, 13);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 14);
const intlMessages = defineMessages({
  downloading: {
    id: 'app.presentation.options.downloading',
    description: 'Downloading label',
    defaultMessage: 'Downloading...'
  },
  downloaded: {
    id: 'app.presentation.options.downloaded',
    description: 'Downloaded label',
    defaultMessage: 'Current presentation was downloaded'
  },
  downloadFailed: {
    id: 'app.presentation.options.downloadFailed',
    description: 'Downloaded failed label',
    defaultMessage: 'Could not download current presentation'
  },
  fullscreenLabel: {
    id: 'app.presentation.options.fullscreen',
    description: 'Fullscreen label',
    defaultMessage: 'Fullscreen'
  },
  exitFullscreenLabel: {
    id: 'app.presentation.options.exitFullscreen',
    description: 'Exit fullscreen label',
    defaultMessage: 'Exit fullscreen'
  },
  minimizePresentationLabel: {
    id: 'app.presentation.options.minimize',
    description: 'Minimize presentation label',
    defaultMessage: 'Minimize'
  },
  optionsLabel: {
    id: 'app.navBar.optionsDropdown.optionsLabel',
    description: 'Options button label',
    defaultMessage: 'Options'
  },
  snapshotLabel: {
    id: 'app.presentation.options.snapshot',
    description: 'Snapshot of current slide label',
    defaultMessage: 'Snapshot of current slide'
  },
  whiteboardLabel: {
    id: 'app.shortcut-help.whiteboard',
    description: 'used for aria whiteboard options button label',
    defaultMessage: 'Whiteboard'
  },
  hideToolsDesc: {
    id: 'app.presentation.presentationToolbar.hideToolsDesc',
    description: 'Hide toolbar label'
  },
  showToolsDesc: {
    id: 'app.presentation.presentationToolbar.showToolsDesc',
    description: 'Show toolbar label'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  allowSnapshotOfCurrentSlide: PropTypes.bool,
  handleToggleFullscreen: PropTypes.func.isRequired,
  isFullscreen: PropTypes.bool,
  elementName: PropTypes.string,
  fullscreenRef: PropTypes.instanceOf(Element),
  meetingName: PropTypes.string,
  isIphone: PropTypes.bool,
  elementId: PropTypes.string,
  elementGroup: PropTypes.string,
  currentElement: PropTypes.string,
  currentGroup: PropTypes.string,
  layoutContextDispatch: PropTypes.func.isRequired,
  isRTL: PropTypes.bool,
  tldrawAPI: PropTypes.shape({
    getSvg: PropTypes.func.isRequired,
    getCurrentPageShapes: PropTypes.func.isRequired
  }),
  presentationDropdownItems: PropTypes.arrayOf(PropTypes.shape({
    id: PropTypes.string,
    type: PropTypes.string
  })).isRequired
};
const PresentationMenu = props => {
  const Settings = getSettingsSingletonInstance();
  const {
    intl,
    isFullscreen = false,
    elementId = '',
    elementName = '',
    elementGroup = '',
    currentElement = '',
    currentGroup = '',
    fullscreenRef = null,
    tldrawAPI = null,
    handleToggleFullscreen,
    layoutContextDispatch,
    meetingName = '',
    isIphone = false,
    isRTL = Settings.application.isRTL,
    isToolbarVisible,
    setIsToolbarVisible,
    allowSnapshotOfCurrentSlide = false,
    presentationDropdownItems,
    slideNum,
    currentUser,
    whiteboardId,
    persistShape
  } = props;
  const [state, setState] = useState({
    hasError: false,
    loading: false
  });
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const toastId = useRef(null);
  const dropdownRef = useRef(null);
  const formattedLabel = fullscreen => fullscreen ? intl.formatMessage(intlMessages.exitFullscreenLabel) : intl.formatMessage(intlMessages.fullscreenLabel);
  const formattedVisibilityLabel = visible => visible ? intl.formatMessage(intlMessages.hideToolsDesc) : intl.formatMessage(intlMessages.showToolsDesc);
  const extractShapes = savedState => {
    let data;

    // Check if savedState is a string (JSON) or an object
    if (typeof savedState === 'string') {
      try {
        data = JSON.parse(savedState);
      } catch (e) {
        console.error('Error parsing JSON:', e);
        return {};
      }
    } else if (typeof savedState === 'object' && savedState !== null) {
      data = savedState;
    } else {
      console.error('Invalid savedState type:', typeof savedState);
      return {};
    }

    // Check if 'records' key exists and extract shapes into an object keyed by shape ID
    if (data && data.records) {
      return data.records.reduce((acc, record) => {
        if (record.typeName === 'shape') {
          acc[record.id] = record;
        }
        return acc;
      }, {});
    }
    return {};
  };
  const handleFileInput = event => {
    const fileInput = event.target;
    const file = fileInput.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = e => {
        const fileContent = e.target.result;
        const dataObj = extractShapes(JSON.parse(fileContent));
        const dataArray = Object.values(dataObj);
        dataArray.forEach(originalShape => {
          const shape = _objectSpread(_objectSpread({}, originalShape), {}, {
            parentId: "page:".concat(slideNum),
            meta: _objectSpread(_objectSpread({}, originalShape.meta), {}, {
              createdBy: currentUser.userId
            })
          });
          persistShape(shape, whiteboardId, currentUser.isModerator);
        });
      };
      reader.readAsText(file);

      // Reset the file input
      fileInput.value = '';
    }
  };

  // const handleFileClick = () => {
  //   const fileInput = document.getElementById('hiddenFileInput');
  //   if (fileInput) {
  //     fileInput.click();
  //   } else {
  //     console.error('File input not found');
  //   }
  // };

  function renderToastContent() {
    const {
      loading,
      hasError
    } = state;
    let icon = loading ? 'blank' : 'check';
    if (hasError) icon = 'circle_close';
    return /*#__PURE__*/React.createElement(Styled.Line, null, /*#__PURE__*/React.createElement(Styled.ToastText, null, /*#__PURE__*/React.createElement("span", null, loading && !hasError && intl.formatMessage(intlMessages.downloading), !loading && !hasError && intl.formatMessage(intlMessages.downloaded), !loading && hasError && intl.formatMessage(intlMessages.downloadFailed))), /*#__PURE__*/React.createElement(Styled.StatusIcon, null, /*#__PURE__*/React.createElement(Styled.ToastIcon, {
      done: !loading && !hasError,
      error: hasError,
      loading: loading,
      iconName: icon
    })));
  }
  function getAvailableOptions() {
    const menuItems = [];
    if (!isIphone) {
      menuItems.push({
        key: 'list-item-fullscreen',
        dataTest: 'presentationFullscreen',
        label: formattedLabel(isFullscreen),
        icon: isFullscreen ? 'exit_fullscreen' : 'fullscreen',
        onClick: () => {
          handleToggleFullscreen(fullscreenRef);
          const newElement = elementId === currentElement ? '' : elementId;
          const newGroup = elementGroup === currentGroup ? '' : elementGroup;
          layoutContextDispatch({
            type: ACTIONS.SET_FULLSCREEN_ELEMENT,
            value: {
              element: newElement,
              group: newGroup
            }
          });
        }
      });
    }
    const {
      isIos
    } = deviceInfo;
    const {
      isSafari
    } = browserInfo;
    if (allowSnapshotOfCurrentSlide) {
      menuItems.push({
        key: 'list-item-screenshot',
        label: intl.formatMessage(intlMessages.snapshotLabel),
        dataTest: 'presentationSnapshot',
        icon: 'video',
        onClick: async () => {
          setState({
            loading: true,
            hasError: false
          });
          toastId.current = toast.info(renderToastContent(), {
            hideProgressBar: true,
            autoClose: false,
            newestOnTop: true,
            closeOnClick: true,
            onClose: () => {
              toastId.current = null;
            }
          });

          // This is a workaround to a conflict of the
          // dark mode's styles and the html-to-image lib.
          // Issue:
          //  https://github.com/bubkoo/html-to-image/issues/370
          const darkThemeState = AppService.isDarkThemeEnabled();
          AppService.setDarkTheme(false);
          try {
            // filter shapes that are inside the slide
            const backgroundShape = tldrawAPI.getCurrentPageShapes().find(s => s.id === "shape:BG-".concat(slideNum));
            const shapes = tldrawAPI.getCurrentPageShapes().filter(shape => shape.x <= backgroundShape.props.w && shape.y <= backgroundShape.props.h && shape.x >= 0 && shape.y >= 0);
            const svgElem = await tldrawAPI.getSvg(shapes.map(shape => shape.id));

            // workaround for ios
            if (isIos || isSafari) {
              svgElem.setAttribute('width', backgroundShape.props.w);
              svgElem.setAttribute('height', backgroundShape.props.h);
              svgElem.setAttribute('viewBox', "1 1 ".concat(backgroundShape.props.w, " ").concat(backgroundShape.props.h));
              const svgString = new XMLSerializer().serializeToString(svgElem);
              const blob = new Blob([svgString], {
                type: 'image/svg+xml'
              });
              const data = URL.createObjectURL(blob);
              const anchor = document.createElement('a');
              anchor.href = data;
              anchor.setAttribute('download', "".concat(elementName, "_").concat(meetingName, "_").concat(new Date().toISOString(), ".svg"));
              anchor.click();
            } else {
              var _svgElem$width$baseVa, _svgElem$width, _svgElem$width$baseVa2, _svgElem$height$baseV, _svgElem$height, _svgElem$height$baseV2;
              const width = (_svgElem$width$baseVa = svgElem === null || svgElem === void 0 ? void 0 : (_svgElem$width = svgElem.width) === null || _svgElem$width === void 0 ? void 0 : (_svgElem$width$baseVa2 = _svgElem$width.baseVal) === null || _svgElem$width$baseVa2 === void 0 ? void 0 : _svgElem$width$baseVa2.value) !== null && _svgElem$width$baseVa !== void 0 ? _svgElem$width$baseVa : window.screen.width;
              const height = (_svgElem$height$baseV = svgElem === null || svgElem === void 0 ? void 0 : (_svgElem$height = svgElem.height) === null || _svgElem$height === void 0 ? void 0 : (_svgElem$height$baseV2 = _svgElem$height.baseVal) === null || _svgElem$height$baseV2 === void 0 ? void 0 : _svgElem$height$baseV2.value) !== null && _svgElem$height$baseV !== void 0 ? _svgElem$height$baseV : window.screen.height;
              const data = await toPng(svgElem, {
                width,
                height,
                backgroundColor: '#FFF'
              });
              const anchor = document.createElement('a');
              anchor.href = data;
              anchor.setAttribute('download', "".concat(elementName, "_").concat(meetingName, "_").concat(new Date().toISOString(), ".png"));
              anchor.click();
            }
            setState({
              loading: false,
              hasError: false
            });
          } catch (e) {
            setState({
              loading: false,
              hasError: true
            });
            logger.warn({
              logCode: 'presentation_snapshot_error',
              extraInfo: e
            });
          } finally {
            // Workaround
            AppService.setDarkTheme(darkThemeState);
          }
        }
      });
    }
    menuItems.push({
      key: 'list-item-toolvisibility',
      dataTest: 'toolVisibility',
      label: formattedVisibilityLabel(isToolbarVisible),
      icon: isToolbarVisible ? 'close' : 'pen_tool',
      onClick: () => {
        setIsToolbarVisible(!isToolbarVisible);
      }
    });

    // if (props.amIPresenter) {
    //   menuItems.push({
    //     key: 'list-item-load-shapes',
    //     dataTest: 'loadShapes',
    //     label: 'Load .tldr Data',
    //     icon: 'pen_tool',
    //     onClick: handleFileClick,
    //   });
    // }

    presentationDropdownItems.forEach((item, index) => {
      switch (item.type) {
        case PresentationDropdownItemType.OPTION:
          menuItems.push({
            key: "".concat(item.id, "-").concat(index),
            label: item.label,
            icon: item.icon,
            onClick: item.onClick
          });
          break;
        case PresentationDropdownItemType.SEPARATOR:
          menuItems.push({
            key: "".concat(item.id, "-").concat(index),
            isSeparator: true
          });
          break;
        default:
          break;
      }
    });
    return menuItems;
  }
  useEffect(() => {
    if (toastId.current) {
      toast.update(toastId.current, {
        render: renderToastContent(),
        hideProgressBar: state.loading,
        autoClose: state.loading ? false : 3000,
        newestOnTop: true,
        closeOnClick: true,
        onClose: () => {
          toastId.current = null;
        }
      });
    }
    if (dropdownRef.current) {
      document.activeElement.blur();
      dropdownRef.current.focus();
    }
  });
  const options = getAvailableOptions();
  if (options.length === 0) {
    var _document$getElementB, _document$getElementB2;
    const undoCtrls = (_document$getElementB = document.getElementById('TD-Styles')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.nextSibling;
    if (undoCtrls !== null && undoCtrls !== void 0 && undoCtrls.style) {
      undoCtrls.style = 'padding:0px';
    }
    const styleTool = (_document$getElementB2 = document.getElementById('TD-Styles')) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.parentNode;
    if (styleTool !== null && styleTool !== void 0 && styleTool.style) {
      styleTool.style = 'right:0px';
    }
    return null;
  }
  return /*#__PURE__*/React.createElement(Styled.Left, {
    id: "WhiteboardOptionButton"
  }, /*#__PURE__*/React.createElement(BBBMenu, {
    trigger: /*#__PURE__*/React.createElement(TooltipContainer, {
      title: intl.formatMessage(intlMessages.optionsLabel)
    }, /*#__PURE__*/React.createElement(Styled.DropdownButton, {
      state: isDropdownOpen ? 'open' : 'closed',
      "aria-label": "".concat(intl.formatMessage(intlMessages.whiteboardLabel), " ").concat(intl.formatMessage(intlMessages.optionsLabel)),
      "data-test": "whiteboardOptionsButton",
      "data-state": isDropdownOpen ? 'open' : 'closed',
      onClick: () => {
        setIsDropdownOpen(isOpen => !isOpen);
      }
    }, /*#__PURE__*/React.createElement("svg", {
      width: "22",
      height: "22",
      viewBox: "0 0 16 16",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    }, /*#__PURE__*/React.createElement("path", {
      d: " M9 11.25H11.25 M11.25 11.25H13.5 M11.25 11.25V9 M11.25 11.25V13.5 M4 7H5.5 C5.89782 7 6.27936 6.84196 6.56066 6.56066 C6.84196 6.27936 7 5.89782 7 5.5V4 C7 3.60218 6.84196 3.22064 6.56066 2.93934 C6.27936 2.65804 5.89782 2.5 5.5 2.5H4 C3.60218 2.5 3.22064 2.65804 2.93934 2.93934 C2.65804 3.22064 2.5 3.60218 2.5 4V5.5 C2.5 5.89782 2.65804 6.27936 2.93934 6.56066 C3.22064 6.84196 3.60218 7 4 7 ZM4 13.5H5.5 C5.89782 13.5 6.27936 13.342 6.56066 13.0607 C6.84196 12.7794 7 12.3978 7 12V10.5 C7 10.1022 6.84196 9.72064 6.56066 9.43934 C6.27936 9.15804 5.89782 9 5.5 9H4 C3.60218 9 3.22064 9.15804 2.93934 9.43934 C2.65804 9.72064 2.5 10.1022 2.5 10.5V12 C2.5 12.3978 2.65804 12.7794 2.93934 13.0607 C3.22064 13.342 3.60218 13.5 4 13.5 ZM10.5 7H12 C12.3978 7 12.7794 6.84196 13.0607 6.56066 C13.342 6.27936 13.5 5.89782 13.5 5.5V4 C13.5 3.60218 13.342 3.22064 13.0607 2.93934 C12.7794 2.65804 12.3978 2.5 12 2.5H10.5 C10.1022 2.5 9.72064 2.65804 9.43934 2.93934 C9.15804 3.22064 9 3.60218 9 4V5.5 C9 5.89782 9.15804 6.27936 9.43934 6.56066 C9.72064 6.84196 10.1022 7 10.5 7 ",
      stroke: "currentcolor",
      strokeLinecap: "round",
      strokeLinejoin: "round"
    })))),
    opts: {
      id: 'presentation-dropdown-menu',
      keepMounted: true,
      transitionDuration: 0,
      elevation: 3,
      getcontentanchorel: null,
      fullwidth: 'true',
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: isRTL ? 'right' : 'left'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: isRTL ? 'right' : 'left'
      },
      container: fullscreenRef
    },
    actions: options
  }), /*#__PURE__*/React.createElement("input", {
    type: "file",
    id: "hiddenFileInput",
    style: {
      display: 'none'
    },
    onChange: handleFileInput
  }));
};
PresentationMenu.propTypes = propTypes;
module.exportDefault(injectIntl(PresentationMenu));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-menu/container.jsx                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let PresentationMenu;
module.link("./component", {
  default(v) {
    PresentationMenu = v;
  }
}, 2);
let FullscreenService;
module.link("/imports/ui/components/common/fullscreen-button/service", {
  default(v) {
    FullscreenService = v;
  }
}, 3);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 4);
let layoutSelect, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 5);
let useIsSnapshotOfCurrentSlideEnabled;
module.link("/imports/ui/services/features", {
  useIsSnapshotOfCurrentSlideEnabled(v) {
    useIsSnapshotOfCurrentSlideEnabled = v;
  }
}, 6);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 7);
let CURRENT_PAGE_WRITERS_SUBSCRIPTION;
module.link("/imports/ui/components/whiteboard/queries", {
  CURRENT_PAGE_WRITERS_SUBSCRIPTION(v) {
    CURRENT_PAGE_WRITERS_SUBSCRIPTION = v;
  }
}, 8);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 9);
let persistShape;
module.link("/imports/ui/components/whiteboard/service", {
  persistShape(v) {
    persistShape = v;
  }
}, 10);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 11);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 12);
const PresentationMenuContainer = props => {
  const fullscreen = layoutSelect(i => i.fullscreen);
  const {
    element: currentElement,
    group: currentGroup
  } = fullscreen;
  const layoutContextDispatch = layoutDispatch();
  const {
    elementId,
    whiteboardId
  } = props;
  const isFullscreen = currentElement === elementId;
  const Settings = getSettingsSingletonInstance();
  const {
    isRTL
  } = Settings.application;
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let presentationDropdownItems = [];
  if (pluginsExtensibleAreasAggregatedState.presentationDropdownItems) {
    presentationDropdownItems = [...pluginsExtensibleAreasAggregatedState.presentationDropdownItems];
  }
  const {
    data: whiteboardWritersData
  } = useDeduplicatedSubscription(CURRENT_PAGE_WRITERS_SUBSCRIPTION, {
    variables: {
      pageId: whiteboardId
    },
    skip: !whiteboardId
  });
  const whiteboardWriters = (whiteboardWritersData === null || whiteboardWritersData === void 0 ? void 0 : whiteboardWritersData.pres_page_writers) || [];
  const hasWBAccess = whiteboardWriters === null || whiteboardWriters === void 0 ? void 0 : whiteboardWriters.some(writer => writer.userId === Auth.userID);
  const meetingInfo = useMeeting(meeting => ({
    name: meeting === null || meeting === void 0 ? void 0 : meeting.name
  }));
  const handleToggleFullscreen = ref => FullscreenService.toggleFullScreen(ref);
  const isIphone = !!navigator.userAgent.match(/iPhone/i);
  const allowSnapshotOfCurrentSlide = useIsSnapshotOfCurrentSlideEnabled();
  return /*#__PURE__*/React.createElement(PresentationMenu, _extends({}, props, {
    currentElement,
    currentGroup,
    isFullscreen,
    layoutContextDispatch,
    isRTL,
    presentationDropdownItems,
    hasWBAccess,
    meetingName: meetingInfo === null || meetingInfo === void 0 ? void 0 : meetingInfo.name,
    handleToggleFullscreen,
    isIphone,
    allowSnapshotOfCurrentSlide,
    persistShape
  }));
};
module.exportDefault(PresentationMenuContainer);
PresentationMenuContainer.propTypes = {
  elementId: PropTypes.string.isRequired
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/presentation-menu/styles.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 1);
let headingsFontWeight;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  headingsFontWeight(v) {
    headingsFontWeight = v;
  }
}, 2);
let colorDanger, colorGray, colorGrayDark, colorSuccess, colorGrayLightest, colorOffWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorDanger(v) {
    colorDanger = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  }
}, 3);
let borderSizeLarge, lgPaddingX, statusIconSize, borderSize, statusInfoHeight;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSizeLarge(v) {
    borderSizeLarge = v;
  },
  lgPaddingX(v) {
    lgPaddingX = v;
  },
  statusIconSize(v) {
    statusIconSize = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  statusInfoHeight(v) {
    statusInfoHeight = v;
  }
}, 4);
const DropdownButton = styled.button(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: ", ";\n  border: none;\n  border-radius: 13px;\n  box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.16),\n    0px 2px 3px rgba(0, 0, 0, 0.24),\n    0px 2px 6px rgba(0, 0, 0, 0.1);\n  color: #2d2d2d;\n  cursor: pointer;\n  padding: .3rem .5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  tab-index: 0;\n\n  &:hover {\n    background-color: ", ";\n  }\n"])), colorOffWhite, colorGrayLightest);
const Left = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  cursor: pointer;\n  position: absolute;\n  left: 2px;\n  top: 2px;\n  z-index: 999;\n\n  > div {\n    width: 50px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  button {\n    height: 100%;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  [dir=\"rtl\"] & {\n    right: 2px;\n    left: auto;\n  }\n"])));
const ToastText = styled.span(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  overflow: hidden;\n  text-overflow: ellipsis;\n  text-align: left;\n  white-space: nowrap;\n  position: relative;\n  top: ", ";\n  width: auto;\n  font-weight: ", ";\n\n  [dir=\"rtl\"] & {\n    text-align: right;\n  }\n"])), borderSizeLarge, headingsFontWeight);
const StatusIcon = styled.span(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin-left: auto;\n\n  [dir=\"rtl\"] & {\n    margin-right: auto;\n    margin-left: 0;\n  }\n\n  & > i {\n    position: relative;\n    top: 1px;\n    height: ", ";\n    width: ", ";\n  }\n"])), statusIconSize, statusIconSize);
const rotate = keyframes(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  0% { transform: rotate(0); }\n  100% { transform: rotate(360deg); }\n"])));
const ToastIcon = styled(Icon)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  position: relative;\n  width: ", ";\n  height: ", ";\n  font-size: 117%;\n  bottom: ", ";\n  left: ", ";\n\n  [dir=\"rtl\"] & {\n    left: auto;\n    right: ", ";\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n"])), statusIconSize, statusIconSize, borderSize, statusInfoHeight, statusInfoHeight, _ref => {
  let {
    done
  } = _ref;
  return done && "\n    color: ".concat(colorSuccess, ";\n  ");
}, _ref2 => {
  let {
    error
  } = _ref2;
  return error && "\n    color: ".concat(colorDanger, ";\n  ");
}, _ref3 => {
  let {
    loading
  } = _ref3;
  return loading && css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n    color: ", ";\n    border: 1px solid;\n    border-radius: 50%;\n    border-right-color: ", ";\n    animation: ", " 1s linear infinite;\n  "])), colorGrayLightest, colorGray, rotate);
});
const Line = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  display: flex;\n  width: 100%;\n  flex-wrap: nowrap;\n  padding: ", " 0;\n"])), lgPaddingX);
const ButtonIcon = styled(Icon)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  width: 1em;\n  text-align: center;\n"])));
module.exportDefault({
  DropdownButton,
  Left,
  ToastText,
  StatusIcon,
  ToastIcon,
  Line,
  ButtonIcon
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"resize-wrapper":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/resize-wrapper/component.jsx                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
const injectWbResizeEvent = WrappedComponent => class Resize extends Component {
  componentDidMount() {
    window.dispatchEvent(new Event('resize'));
  }
  componentWillUnmount() {
    window.dispatchEvent(new Event('resize'));
  }
  render() {
    return /*#__PURE__*/React.createElement(WrappedComponent, this.props);
  }
};
module.exportDefault(injectWbResizeEvent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/component.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let WhiteboardContainer;
module.link("/imports/ui/components/whiteboard/container", {
  default(v) {
    WhiteboardContainer = v;
  }
}, 2);
let HUNDRED_PERCENT, MAX_PERCENT;
module.link("/imports/utils/slideCalcUtils", {
  HUNDRED_PERCENT(v) {
    HUNDRED_PERCENT = v;
  },
  MAX_PERCENT(v) {
    MAX_PERCENT = v;
  }
}, 3);
let SPACE;
module.link("/imports/utils/keyCodes", {
  SPACE(v) {
    SPACE = v;
  }
}, 4);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 5);
let toast;
module.link("react-toastify", {
  toast(v) {
    toast = v;
  }
}, 6);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 7);
let PresentationToolbarContainer;
module.link("./presentation-toolbar/container", {
  default(v) {
    PresentationToolbarContainer = v;
  }
}, 8);
let PresentationMenu;
module.link("./presentation-menu/container", {
  default(v) {
    PresentationMenu = v;
  }
}, 9);
let DownloadPresentationButton;
module.link("./download-presentation-button/component", {
  default(v) {
    DownloadPresentationButton = v;
  }
}, 10);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 11);
let FullscreenService;
module.link("/imports/ui/components/common/fullscreen-button/service", {
  default(v) {
    FullscreenService = v;
  }
}, 12);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 13);
let PollingContainer;
module.link("/imports/ui/components/polling/container", {
  default(v) {
    PollingContainer = v;
  }
}, 14);
let ACTIONS, LAYOUT_TYPE;
module.link("../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  }
}, 15);
let DEFAULT_VALUES;
module.link("../layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 16);
let colorContentBackground;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorContentBackground(v) {
    colorContentBackground = v;
  }
}, 17);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 18);
let addAlert;
module.link("../screenreader-alert/service", {
  addAlert(v) {
    addAlert = v;
  }
}, 19);
let debounce;
module.link("/imports/utils/debounce", {
  debounce(v) {
    debounce = v;
  }
}, 20);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 21);
let LocatedErrorBoundary;
module.link("/imports/ui/components/common/error-boundary/located-error-boundary/component", {
  default(v) {
    LocatedErrorBoundary = v;
  }
}, 22);
let FallbackView;
module.link("/imports/ui/components/common/fallback-errors/fallback-view/component", {
  default(v) {
    FallbackView = v;
  }
}, 23);
const intlMessages = defineMessages({
  presentationLabel: {
    id: 'app.presentationUploder.title',
    description: 'presentation area element label'
  },
  changeNotification: {
    id: 'app.presentation.notificationLabel',
    description: 'label displayed in toast when presentation switches'
  },
  downloadLabel: {
    id: 'app.presentation.downloadLabel',
    description: 'label for downloadable presentations'
  },
  slideContentStart: {
    id: 'app.presentation.startSlideContent',
    description: 'Indicate the slide content start'
  },
  slideContentEnd: {
    id: 'app.presentation.endSlideContent',
    description: 'Indicate the slide content end'
  },
  slideContentChanged: {
    id: 'app.presentation.changedSlideContent',
    description: 'Indicate the slide content has changed'
  },
  noSlideContent: {
    id: 'app.presentation.emptySlideContent',
    description: 'No content available for slide'
  }
});
const {
  isSafari
} = browserInfo;
const FULLSCREEN_CHANGE_EVENT = isSafari ? 'webkitfullscreenchange' : 'fullscreenchange';
const getToolbarHeight = () => {
  let height = 0;
  const toolbarEl = document.getElementById('presentationToolbarWrapper');
  if (toolbarEl) {
    const {
      clientHeight
    } = toolbarEl;
    height = clientHeight;
  }
  return height;
};
class Presentation extends PureComponent {
  constructor() {
    super();
    this.state = {
      presentationWidth: 0,
      presentationHeight: 0,
      zoom: 100,
      isFullscreen: false,
      tldrawAPI: null,
      isPanning: false,
      tldrawIsMounting: true,
      isToolbarVisible: true,
      hadPresentation: false
    };
    const PAN_ZOOM_INTERVAL = window.meetingClientSettings.public.presentation.panZoomInterval || 200;
    this.currentPresentationToastId = null;
    this.getSvgRef = this.getSvgRef.bind(this);
    this.zoomChanger = debounce(this.zoomChanger.bind(this), 200);
    this.updateLocalPosition = this.updateLocalPosition.bind(this);
    this.panAndZoomChanger = throttle(this.panAndZoomChanger.bind(this), PAN_ZOOM_INTERVAL);
    this.fitToWidthHandler = this.fitToWidthHandler.bind(this);
    this.onFullscreenChange = this.onFullscreenChange.bind(this);
    this.getPresentationSizesAvailable = this.getPresentationSizesAvailable.bind(this);
    this.handleResize = debounce(this.handleResize.bind(this), 200);
    this.setTldrawAPI = this.setTldrawAPI.bind(this);
    this.setIsPanning = this.setIsPanning.bind(this);
    this.setIsToolbarVisible = this.setIsToolbarVisible.bind(this);
    this.handlePanShortcut = this.handlePanShortcut.bind(this);
    this.renderPresentationMenu = this.renderPresentationMenu.bind(this);
    this.onResize = () => setTimeout(this.handleResize.bind(this), 0);
    this.renderCurrentPresentationToast = this.renderCurrentPresentationToast.bind(this);
    this.setPresentationRef = this.setPresentationRef.bind(this);
    this.setTldrawIsMounting = this.setTldrawIsMounting.bind(this);
    Session.setItem('componentPresentationWillUnmount', false);
  }
  static getDerivedStateFromProps(props, state) {
    var _prevProps$currentSli, _props$currentSlide;
    const {
      prevProps
    } = state;
    const stateChange = {
      prevProps: props
    };
    if (props.userIsPresenter && (!prevProps || !prevProps.userIsPresenter) && props.currentSlide && props.slidePosition) {
      let potentialZoom = 100 / (props.slidePosition.viewBoxWidth / props.slidePosition.width);
      potentialZoom = Math.max(HUNDRED_PERCENT, Math.min(MAX_PERCENT, potentialZoom));
      stateChange.zoom = potentialZoom;
    }
    if (!prevProps) return stateChange;

    // When presenter is changed or slide changed we reset localPosition
    if (((_prevProps$currentSli = prevProps.currentSlide) === null || _prevProps$currentSli === void 0 ? void 0 : _prevProps$currentSli.id) !== ((_props$currentSlide = props.currentSlide) === null || _props$currentSlide === void 0 ? void 0 : _props$currentSlide.id) || prevProps.userIsPresenter !== props.userIsPresenter) {
      stateChange.localPosition = undefined;
    }
    return stateChange;
  }
  componentDidMount() {
    this.getInitialPresentationSizes();
    this.refPresentationContainer.addEventListener('keydown', this.handlePanShortcut);
    this.refPresentationContainer.addEventListener('keyup', this.handlePanShortcut);
    this.refPresentationContainer.addEventListener(FULLSCREEN_CHANGE_EVENT, this.onFullscreenChange);
    window.addEventListener('resize', this.onResize, false);
    const {
      currentSlide,
      slidePosition,
      totalPages,
      layoutContextDispatch,
      currentPresentationId
    } = this.props;
    if (currentPresentationId) {
      this.setState({
        hadPresentation: true
      });
    }
    if (currentSlide) {
      layoutContextDispatch({
        type: ACTIONS.SET_PRESENTATION_NUM_CURRENT_SLIDE,
        value: currentSlide.num
      });
      layoutContextDispatch({
        type: ACTIONS.SET_PRESENTATION_CURRENT_SLIDE_SIZE,
        value: {
          width: slidePosition.width,
          height: slidePosition.height
        }
      });
      layoutContextDispatch({
        type: ACTIONS.SET_PRESENTATION_SLIDES_LENGTH,
        value: totalPages
      });
    } else {
      layoutContextDispatch({
        type: ACTIONS.SET_PRESENTATION_SLIDES_LENGTH,
        value: 0
      });
    }
  }
  componentDidUpdate(prevProps) {
    var _prevProps$currentSli2, _prevProps$currentSli3;
    const {
      slidePosition,
      presentationIsOpen,
      currentSlide,
      publishedPoll,
      setPresentationIsOpen,
      restoreOnUpdate,
      layoutContextDispatch,
      userIsPresenter,
      presentationBounds,
      numCameras,
      intl,
      totalPages,
      currentPresentationId,
      fitToWidth,
      isDefaultPresentation,
      presentationIsDownloadable
    } = this.props;
    const {
      presentationWidth,
      presentationHeight,
      zoom,
      isPanning,
      presentationId,
      hadPresentation
    } = this.state;
    const {
      numCameras: prevNumCameras,
      presentationBounds: prevPresentationBounds
    } = prevProps;
    if (numCameras !== prevNumCameras) {
      this.onResize();
    }
    if (totalPages !== prevProps.totalPages) {
      layoutContextDispatch({
        type: ACTIONS.SET_PRESENTATION_SLIDES_LENGTH,
        value: totalPages
      });
    }
    if ((currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.num) != null && (prevProps === null || prevProps === void 0 ? void 0 : (_prevProps$currentSli2 = prevProps.currentSlide) === null || _prevProps$currentSli2 === void 0 ? void 0 : _prevProps$currentSli2.num) != null && (currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.num) !== ((_prevProps$currentSli3 = prevProps.currentSlide) === null || _prevProps$currentSli3 === void 0 ? void 0 : _prevProps$currentSli3.num)) {
      addAlert(intl.formatMessage(intlMessages.slideContentChanged, {
        0: currentSlide.num
      }));
    }
    if (currentPresentationId) {
      const downloadableOn = !(prevProps !== null && prevProps !== void 0 && prevProps.presentationIsDownloadable) && presentationIsDownloadable;
      const shouldCloseToast = !(presentationIsDownloadable && !userIsPresenter);
      if ((prevProps === null || prevProps === void 0 ? void 0 : prevProps.currentPresentationId) !== currentPresentationId || downloadableOn && !userIsPresenter) {
        if (this.currentPresentationToastId) {
          toast.update(this.currentPresentationToastId, {
            autoClose: shouldCloseToast,
            render: this.renderCurrentPresentationToast()
          });
        } else {
          this.currentPresentationToastId = toast(this.renderCurrentPresentationToast(), {
            onClose: () => {
              this.currentPresentationToastId = null;
            },
            autoClose: shouldCloseToast,
            className: 'actionToast currentPresentationToast'
          });
        }
      }
      const downloadableOff = (prevProps === null || prevProps === void 0 ? void 0 : prevProps.presentationIsDownloadable) && !presentationIsDownloadable;
      if (this.currentPresentationToastId && downloadableOff) {
        toast.update(this.currentPresentationToastId, {
          autoClose: true,
          render: this.renderCurrentPresentationToast()
        });
      }
    }
    if (prevProps !== null && prevProps !== void 0 && prevProps.slidePosition && slidePosition) {
      const {
        width: prevWidth,
        height: prevHeight
      } = prevProps.slidePosition;
      const {
        width: currWidth,
        height: currHeight
      } = slidePosition;
      if (prevWidth !== currWidth || prevHeight !== currHeight) {
        layoutContextDispatch({
          type: ACTIONS.SET_PRESENTATION_CURRENT_SLIDE_SIZE,
          value: {
            width: currWidth,
            height: currHeight
          }
        });
      }
      const presentationChanged = presentationId !== currentPresentationId;
      if (!presentationIsOpen && restoreOnUpdate && (currentSlide || presentationChanged)) {
        const slideChanged = currentSlide.id !== prevProps.currentSlide.id;
        const positionChanged = slidePosition.viewBoxHeight !== prevProps.slidePosition.viewBoxHeight || slidePosition.viewBoxWidth !== prevProps.slidePosition.viewBoxWidth;
        const pollPublished = publishedPoll && !prevProps.publishedPoll;
        if (slideChanged || positionChanged || pollPublished || presentationChanged && (hadPresentation || !isDefaultPresentation)) {
          setPresentationIsOpen(layoutContextDispatch, !presentationIsOpen);
        }
      }
      if (presentationChanged) {
        this.setState({
          presentationId: currentPresentationId,
          hadPresentation: true
        });
      }
      if (presentationBounds !== prevPresentationBounds || !presentationWidth && !presentationHeight) this.onResize();
    } else if (slidePosition) {
      const {
        width: currWidth,
        height: currHeight
      } = slidePosition;
      layoutContextDispatch({
        type: ACTIONS.SET_PRESENTATION_CURRENT_SLIDE_SIZE,
        value: {
          width: currWidth,
          height: currHeight
        }
      });
      layoutContextDispatch({
        type: ACTIONS.SET_PRESENTATION_NUM_CURRENT_SLIDE,
        value: currentSlide.num
      });
    }
    if (zoom <= HUNDRED_PERCENT && isPanning && !fitToWidth || !userIsPresenter && prevProps.userIsPresenter) {
      this.setIsPanning();
    }
  }
  componentWillUnmount() {
    Session.setItem('componentPresentationWillUnmount', true);
    const {
      fullscreenContext,
      layoutContextDispatch
    } = this.props;
    window.removeEventListener('resize', this.onResize, false);
    this.refPresentationContainer.removeEventListener(FULLSCREEN_CHANGE_EVENT, this.onFullscreenChange);
    this.refPresentationContainer.removeEventListener('keydown', this.handlePanShortcut);
    this.refPresentationContainer.removeEventListener('keyup', this.handlePanShortcut);
    if (fullscreenContext) {
      layoutContextDispatch({
        type: ACTIONS.SET_FULLSCREEN_ELEMENT,
        value: {
          element: '',
          group: ''
        }
      });
    }
  }
  handlePanShortcut(e) {
    const {
      userIsPresenter
    } = this.props;
    const {
      isPanning
    } = this.state;
    if (e.keyCode === SPACE && userIsPresenter) {
      switch (e.type) {
        case 'keyup':
          return isPanning && this.setIsPanning();
        case 'keydown':
          return !isPanning && this.setIsPanning();
        default:
      }
    }
    return null;
  }
  handleResize() {
    const presentationSizes = this.getPresentationSizesAvailable();
    if (Object.keys(presentationSizes).length > 0) {
      // updating the size of the space available for the slide
      if (!Session.getItem('componentPresentationWillUnmount')) {
        this.setState({
          presentationHeight: presentationSizes.presentationHeight,
          presentationWidth: presentationSizes.presentationWidth
        });
      }
    }
  }
  onFullscreenChange() {
    const {
      isFullscreen
    } = this.state;
    const newIsFullscreen = FullscreenService.isFullScreen(this.refPresentationContainer);
    if (isFullscreen !== newIsFullscreen) {
      this.setState({
        isFullscreen: newIsFullscreen
      });
    }
  }
  setTldrawAPI(api) {
    this.setState({
      tldrawAPI: api
    });
  }
  setTldrawIsMounting(value) {
    this.setState({
      tldrawIsMounting: value
    });
  }
  setIsPanning() {
    this.setState(prevState => ({
      isPanning: !prevState.isPanning
    }));
  }
  setIsToolbarVisible(isVisible) {
    this.setState({
      isToolbarVisible: isVisible
    });
  }
  setPresentationRef(ref) {
    this.refPresentationContainer = ref;
  }

  // returns a ref to the svg element, which is required by a WhiteboardOverlay
  // to transform screen coordinates to svg coordinate system
  getSvgRef() {
    return this.svggroup;
  }
  getPresentationSizesAvailable() {
    const {
      presentationBounds,
      presentationAreaSize: newPresentationAreaSize
    } = this.props;
    const presentationSizes = {
      presentationWidth: 0,
      presentationHeight: 0
    };
    if (newPresentationAreaSize) {
      presentationSizes.presentationWidth = newPresentationAreaSize.presentationAreaWidth;
      presentationSizes.presentationHeight = newPresentationAreaSize.presentationAreaHeight - (getToolbarHeight() || 0);
      return presentationSizes;
    }
    presentationSizes.presentationWidth = presentationBounds.width;
    presentationSizes.presentationHeight = presentationBounds.height;
    return presentationSizes;
  }
  getInitialPresentationSizes() {
    // determining the presentationWidth and presentationHeight (available
    // space for the svg) on the initial load

    const presentationSizes = this.getPresentationSizesAvailable();
    if (Object.keys(presentationSizes).length > 0) {
      // setting the state of the available space for the svg
      this.setState({
        presentationHeight: presentationSizes.presentationHeight,
        presentationWidth: presentationSizes.presentationWidth
      });
    }
  }
  zoomChanger(zoom) {
    let boundZoom = parseInt(zoom);
    if (boundZoom < HUNDRED_PERCENT) {
      boundZoom = HUNDRED_PERCENT;
    } else if (boundZoom > MAX_PERCENT) {
      boundZoom = MAX_PERCENT;
    }
    this.setState({
      zoom: boundZoom
    });
  }
  fitToWidthHandler() {
    const {
      setPresentationFitToWidth,
      fitToWidth
    } = this.props;
    setPresentationFitToWidth(!fitToWidth);
    this.setState({
      zoom: HUNDRED_PERCENT
    });
  }
  updateLocalPosition(x, y, width, height, zoom) {
    this.setState({
      localPosition: {
        x,
        y,
        width,
        height
      },
      zoom
    });
  }
  calculateSize(viewBoxDimensions) {
    const {
      presentationHeight,
      presentationWidth
    } = this.state;
    const {
      userIsPresenter,
      currentSlide,
      slidePosition,
      fitToWidth
    } = this.props;
    if (!currentSlide || !slidePosition) {
      return {
        width: 0,
        height: 0
      };
    }
    const originalWidth = slidePosition.width;
    const originalHeight = slidePosition.height;
    const viewBoxWidth = viewBoxDimensions.width;
    const viewBoxHeight = viewBoxDimensions.height;
    let svgWidth;
    let svgHeight;
    if (!userIsPresenter) {
      svgWidth = presentationHeight * viewBoxWidth / viewBoxHeight;
      if (presentationWidth < svgWidth) {
        svgHeight = presentationHeight * presentationWidth / svgWidth;
        svgWidth = presentationWidth;
      } else {
        svgHeight = presentationHeight;
      }
    } else if (!fitToWidth) {
      svgWidth = presentationHeight * originalWidth / originalHeight;
      if (presentationWidth < svgWidth) {
        svgHeight = presentationHeight * presentationWidth / svgWidth;
        svgWidth = presentationWidth;
      } else {
        svgHeight = presentationHeight;
      }
    } else {
      svgWidth = presentationWidth;
      svgHeight = svgWidth * originalHeight / originalWidth;
      if (svgHeight > presentationHeight) svgHeight = presentationHeight;
    }
    if (typeof svgHeight !== 'number' || typeof svgWidth !== 'number') {
      return {
        width: 0,
        height: 0
      };
    }
    return {
      width: svgWidth,
      height: svgHeight
    };
  }
  panAndZoomChanger(w, h, x, y) {
    const {
      zoomSlide
    } = this.props;
    zoomSlide(w, h, x, y);
  }
  renderPresentationToolbar() {
    let svgWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    const {
      currentSlide,
      isMobile,
      layoutType,
      numCameras,
      fullscreenElementId,
      fullscreenContext,
      layoutContextDispatch,
      presentationIsOpen,
      slidePosition,
      addWhiteboardGlobalAccess,
      removeWhiteboardGlobalAccess,
      multiUserSize,
      multiUser,
      fitToWidth,
      totalPages,
      userIsPresenter,
      hasPoll,
      currentPresentationPage
    } = this.props;
    const {
      zoom,
      isPanning,
      tldrawAPI
    } = this.state;
    if (!currentSlide) return null;
    const {
      presentationToolbarMinWidth
    } = DEFAULT_VALUES;
    const toolbarWidth = this.refWhiteboardArea && svgWidth > presentationToolbarMinWidth || isMobile || layoutType === LAYOUT_TYPE.VIDEO_FOCUS && numCameras > 0 ? svgWidth : presentationToolbarMinWidth;
    return /*#__PURE__*/React.createElement(PresentationToolbarContainer, {
      fitToWidth,
      zoom,
      currentSlide,
      slidePosition,
      toolbarWidth,
      fullscreenElementId,
      layoutContextDispatch,
      presentationIsOpen,
      userIsPresenter,
      currentPresentationPage,
      tldrawAPI,
      setIsPanning: this.setIsPanning,
      isPanning: isPanning,
      currentSlideNum: currentSlide.num,
      presentationId: currentSlide.presentationId,
      zoomChanger: this.zoomChanger,
      fitToWidthHandler: this.fitToWidthHandler,
      isFullscreen: fullscreenContext,
      fullscreenAction: ACTIONS.SET_FULLSCREEN_ELEMENT,
      fullscreenRef: this.refPresentationContainer,
      addWhiteboardGlobalAccess: addWhiteboardGlobalAccess,
      removeWhiteboardGlobalAccess: removeWhiteboardGlobalAccess,
      multiUserSize: multiUserSize,
      multiUser: multiUser,
      whiteboardId: currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.id,
      numberOfSlides: totalPages,
      layoutSwapped: false,
      hasPoll: hasPoll
    });
  }
  renderCurrentPresentationToast() {
    const {
      intl,
      userIsPresenter,
      downloadPresentationUri,
      presentationIsDownloadable,
      presentationName
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.InnerToastWrapper, {
      "data-test": "currentPresentationToast"
    }, /*#__PURE__*/React.createElement(Styled.ToastIcon, null, /*#__PURE__*/React.createElement(Styled.IconWrapper, null, /*#__PURE__*/React.createElement(Icon, {
      iconName: "presentation"
    }))), /*#__PURE__*/React.createElement(Styled.ToastTextContent, {
      "data-test": "toastSmallMsg"
    }, /*#__PURE__*/React.createElement("div", null, "".concat(intl.formatMessage(intlMessages.changeNotification))), /*#__PURE__*/React.createElement(Styled.PresentationName, null, "".concat(presentationName))), presentationIsDownloadable && !userIsPresenter ? /*#__PURE__*/React.createElement(Styled.ToastDownload, null, /*#__PURE__*/React.createElement(Styled.ToastSeparator, null), /*#__PURE__*/React.createElement("a", {
      "data-test": "toastDownload",
      "aria-label": "".concat(intl.formatMessage(intlMessages.downloadLabel), " ").concat(presentationName),
      href: downloadPresentationUri,
      target: "_blank",
      rel: "noopener noreferrer"
    }, intl.formatMessage(intlMessages.downloadLabel))) : null);
  }
  renderPresentationDownload() {
    const {
      presentationIsDownloadable,
      downloadPresentationUri
    } = this.props;
    if (!presentationIsDownloadable || !downloadPresentationUri) return null;
    const handleDownloadPresentation = () => {
      window.open(downloadPresentationUri);
    };
    return /*#__PURE__*/React.createElement(DownloadPresentationButton, {
      handleDownloadPresentation: handleDownloadPresentation,
      dark: true
    });
  }
  renderPresentationMenu() {
    const {
      intl,
      fullscreenElementId,
      layoutContextDispatch,
      userIsPresenter,
      currentSlide,
      currentUser
    } = this.props;
    const {
      tldrawAPI,
      isToolbarVisible
    } = this.state;
    return /*#__PURE__*/React.createElement(PresentationMenu, {
      fullscreenRef: this.refPresentationContainer,
      tldrawAPI: tldrawAPI,
      elementName: intl.formatMessage(intlMessages.presentationLabel),
      elementId: fullscreenElementId,
      layoutContextDispatch: layoutContextDispatch,
      setIsToolbarVisible: this.setIsToolbarVisible,
      isToolbarVisible: isToolbarVisible,
      amIPresenter: userIsPresenter,
      slideNum: currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.num,
      currentUser: currentUser,
      whiteboardId: currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.id
    });
  }
  render() {
    const {
      userIsPresenter,
      currentSlide,
      slidePosition,
      presentationBounds,
      fullscreenContext,
      isMobile,
      layoutType,
      numCameras,
      currentPresentationId,
      intl,
      fullscreenElementId,
      layoutContextDispatch,
      presentationIsOpen,
      darkTheme,
      isViewersAnnotationsLocked,
      fitToWidth
    } = this.props;
    const {
      isFullscreen,
      localPosition,
      zoom,
      tldrawIsMounting,
      isPanning,
      tldrawAPI,
      isToolbarVisible,
      presentationWidth
    } = this.state;
    let viewBoxDimensions;
    if (userIsPresenter && localPosition) {
      viewBoxDimensions = {
        width: localPosition.width,
        height: localPosition.height
      };
    } else if (slidePosition) {
      viewBoxDimensions = {
        width: slidePosition.viewBoxWidth,
        height: slidePosition.viewBoxHeight
      };
    } else {
      viewBoxDimensions = {
        width: 0,
        height: 0
      };
    }
    const svgDimensions = this.calculateSize(viewBoxDimensions);
    const svgHeight = svgDimensions.height;
    const svgWidth = svgDimensions.width;
    const toolbarHeight = getToolbarHeight();
    const {
      presentationToolbarMinWidth
    } = DEFAULT_VALUES;
    const isLargePresentation = (svgWidth > presentationToolbarMinWidth || isMobile) && !(layoutType === LAYOUT_TYPE.VIDEO_FOCUS && numCameras > 0 && !fullscreenContext);
    const containerWidth = isLargePresentation ? svgWidth : presentationToolbarMinWidth;
    const slideContent = currentSlide !== null && currentSlide !== void 0 && currentSlide.content ? "".concat(intl.formatMessage(intlMessages.slideContentStart), "\n    ").concat(currentSlide.content, "\n    ").concat(intl.formatMessage(intlMessages.slideContentEnd)) : intl.formatMessage(intlMessages.noSlideContent);
    const isVideoFocus = layoutType === LAYOUT_TYPE.VIDEO_FOCUS;
    const presentationZIndex = fullscreenContext ? presentationBounds.zIndex : undefined;
    const APP_CRASH_METADATA = {
      logCode: 'whiteboard_crash',
      logMessage: 'Possible whiteboard crash'
    };
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.PresentationContainer, {
      role: "region",
      "data-test": "presentationContainer",
      ref: ref => {
        this.refPresentationContainer = ref;
      },
      style: {
        top: presentationBounds.top,
        left: presentationBounds.left,
        right: presentationBounds.right,
        width: presentationBounds.width,
        height: presentationBounds.height,
        display: !presentationIsOpen ? 'none' : 'flex',
        overflow: 'hidden',
        zIndex: !isVideoFocus ? presentationZIndex : 0,
        background: layoutType === isVideoFocus && !fullscreenContext ? colorContentBackground : null
      }
    }, /*#__PURE__*/React.createElement(Styled.Presentation, {
      ref: ref => {
        this.refPresentation = ref;
      }
    }, /*#__PURE__*/React.createElement(Styled.SvgContainer, {
      style: {
        height: svgHeight + toolbarHeight
      }
    }, /*#__PURE__*/React.createElement("div", {
      style: {
        position: 'absolute',
        width: svgDimensions.width < 0 ? 0 : svgDimensions.width,
        height: svgDimensions.height < 0 ? 0 : svgDimensions.height,
        textAlign: 'center',
        display: !presentationIsOpen ? 'none' : 'block',
        zIndex: 1
      },
      id: "presentationInnerWrapper"
    }, this.renderPresentationDownload(), /*#__PURE__*/React.createElement(Styled.VisuallyHidden, {
      id: "currentSlideText"
    }, slideContent), !tldrawIsMounting && presentationWidth > 0 && currentSlide && this.renderPresentationMenu(), /*#__PURE__*/React.createElement(LocatedErrorBoundary, {
      Fallback: FallbackView,
      logMetadata: APP_CRASH_METADATA
    }, /*#__PURE__*/React.createElement(WhiteboardContainer, {
      whiteboardId: currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.id,
      slidePosition: slidePosition,
      getSvgRef: this.getSvgRef,
      tldrawAPI: tldrawAPI,
      setTldrawAPI: this.setTldrawAPI,
      curPageId: (currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.num.toString()) || '0',
      svgUri: currentSlide === null || currentSlide === void 0 ? void 0 : currentSlide.svgUri,
      intl: intl,
      presentationWidth: svgWidth,
      presentationHeight: svgHeight,
      presentationAreaHeight: presentationBounds === null || presentationBounds === void 0 ? void 0 : presentationBounds.height,
      presentationAreaWidth: presentationBounds === null || presentationBounds === void 0 ? void 0 : presentationBounds.width,
      isPanning: isPanning,
      zoomChanger: this.zoomChanger,
      fitToWidth: fitToWidth,
      zoomValue: zoom,
      setTldrawIsMounting: this.setTldrawIsMounting,
      setIsToolbarVisible: this.setIsToolbarVisible,
      isFullscreen: isFullscreen,
      fullscreenAction: ACTIONS.SET_FULLSCREEN_ELEMENT,
      fullscreenElementId: fullscreenElementId,
      layoutContextDispatch: layoutContextDispatch,
      fullscreenRef: this.refPresentationContainer,
      presentationId: currentPresentationId,
      darkTheme: darkTheme,
      isToolbarVisible: isToolbarVisible,
      isViewersAnnotationsLocked: isViewersAnnotationsLocked
    })), isFullscreen && /*#__PURE__*/React.createElement(PollingContainer, null)), !tldrawIsMounting && presentationWidth > 0 && /*#__PURE__*/React.createElement(Styled.PresentationToolbar, {
      ref: ref => {
        this.refPresentationToolbar = ref;
      },
      style: {
        width: containerWidth
      }
    }, this.renderPresentationToolbar(svgWidth))))));
  }
}
module.exportDefault(injectIntl(Presentation));
Presentation.propTypes = {
  // Defines a boolean value to detect whether a current user is a presenter
  userIsPresenter: PropTypes.bool,
  currentSlide: PropTypes.shape({
    presentationId: PropTypes.string.isRequired,
    current: PropTypes.bool.isRequired,
    num: PropTypes.number.isRequired,
    id: PropTypes.string.isRequired,
    imageUri: PropTypes.string.isRequired,
    curPageId: PropTypes.string,
    svgUri: PropTypes.string.isRequired,
    content: PropTypes.string.isRequired
  }),
  slidePosition: PropTypes.shape({
    x: PropTypes.number.isRequired,
    y: PropTypes.number.isRequired,
    height: PropTypes.number.isRequired,
    width: PropTypes.number.isRequired,
    viewBoxWidth: PropTypes.number.isRequired,
    viewBoxHeight: PropTypes.number.isRequired
  }),
  // current multi-user status
  multiUser: PropTypes.bool.isRequired,
  setPresentationIsOpen: PropTypes.func.isRequired,
  layoutContextDispatch: PropTypes.func.isRequired,
  presentationIsDownloadable: PropTypes.bool,
  presentationName: PropTypes.string,
  currentPresentationId: PropTypes.string,
  presentationIsOpen: PropTypes.bool.isRequired,
  totalPages: PropTypes.number.isRequired,
  publishedPoll: PropTypes.bool.isRequired,
  presentationBounds: PropTypes.shape({
    top: PropTypes.number,
    left: PropTypes.number,
    right: PropTypes.number,
    width: PropTypes.number,
    height: PropTypes.number,
    zIndex: PropTypes.number
  }),
  restoreOnUpdate: PropTypes.bool.isRequired,
  numCameras: PropTypes.number.isRequired,
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  isMobile: PropTypes.bool.isRequired,
  fullscreenContext: PropTypes.bool.isRequired,
  presentationAreaSize: PropTypes.shape({
    presentationAreaWidth: PropTypes.number.isRequired,
    presentationAreaHeight: PropTypes.number.isRequired
  }),
  zoomSlide: PropTypes.func.isRequired,
  addWhiteboardGlobalAccess: PropTypes.func.isRequired,
  removeWhiteboardGlobalAccess: PropTypes.func.isRequired,
  multiUserSize: PropTypes.number.isRequired,
  layoutType: PropTypes.string.isRequired,
  fullscreenElementId: PropTypes.string.isRequired,
  downloadPresentationUri: PropTypes.string,
  darkTheme: PropTypes.bool.isRequired
};
Presentation.defaultProps = {
  currentSlide: undefined,
  slidePosition: undefined,
  presentationAreaSize: undefined,
  presentationBounds: undefined,
  downloadPresentationUri: undefined,
  userIsPresenter: false,
  presentationIsDownloadable: false,
  currentPresentationId: '',
  presentationName: ''
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/container.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 2);
let Presentation;
module.link("/imports/ui/components/presentation/component", {
  default(v) {
    Presentation = v;
  }
}, 3);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 4);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 5);
let useMutation, useLazyQuery;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useLazyQuery(v) {
    useLazyQuery = v;
  }
}, 6);
let layoutSelect, layoutSelectInput, layoutSelectOutput, layoutDispatch;
module.link("../layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 7);
let DEVICE_TYPE;
module.link("../layout/enums", {
  DEVICE_TYPE(v) {
    DEVICE_TYPE = v;
  }
}, 8);
let MediaService;
module.link("../media/service", {
  default(v) {
    MediaService = v;
  }
}, 9);
let CURRENT_PRESENTATION_PAGE_SUBSCRIPTION, CURRENT_PAGE_WRITERS_SUBSCRIPTION;
module.link("/imports/ui/components/whiteboard/queries", {
  CURRENT_PRESENTATION_PAGE_SUBSCRIPTION(v) {
    CURRENT_PRESENTATION_PAGE_SUBSCRIPTION = v;
  },
  CURRENT_PAGE_WRITERS_SUBSCRIPTION(v) {
    CURRENT_PAGE_WRITERS_SUBSCRIPTION = v;
  }
}, 10);
let POLL_SUBSCRIPTION;
module.link("/imports/ui/core/graphql/queries/pollSubscription", {
  default(v) {
    POLL_SUBSCRIPTION = v;
  }
}, 11);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 12);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 13);
let PRESENTATION_SET_ZOOM, PRESENTATION_SET_WRITERS;
module.link("./mutations", {
  PRESENTATION_SET_ZOOM(v) {
    PRESENTATION_SET_ZOOM = v;
  },
  PRESENTATION_SET_WRITERS(v) {
    PRESENTATION_SET_WRITERS = v;
  }
}, 14);
let GET_USER_IDS;
module.link("/imports/ui/core/graphql/queries/users", {
  GET_USER_IDS(v) {
    GET_USER_IDS = v;
  }
}, 15);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 16);
const fetchedpresentation = {};
const PresentationContainer = props => {
  var _meeting$lockSettings, _pollData$poll;
  const {
    data: presentationPageData
  } = useDeduplicatedSubscription(CURRENT_PRESENTATION_PAGE_SUBSCRIPTION);
  const {
    pres_page_curr: presentationPageArray
  } = presentationPageData || {};
  const currentPresentationPage = presentationPageArray && presentationPageArray[0];
  const slideSvgUrl = currentPresentationPage && currentPresentationPage.svgUrl;
  const {
    data: whiteboardWritersData
  } = useDeduplicatedSubscription(CURRENT_PAGE_WRITERS_SUBSCRIPTION, {
    variables: {
      pageId: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.pageId
    },
    skip: !(currentPresentationPage !== null && currentPresentationPage !== void 0 && currentPresentationPage.pageId)
  });
  const whiteboardWriters = (whiteboardWritersData === null || whiteboardWritersData === void 0 ? void 0 : whiteboardWritersData.pres_page_writers) || [];
  const [presentationSetZoom] = useMutation(PRESENTATION_SET_ZOOM);
  const [presentationSetWriters] = useMutation(PRESENTATION_SET_WRITERS);
  const [getUsers, {
    data: usersData
  }] = useLazyQuery(GET_USER_IDS, {
    fetchPolicy: 'no-cache'
  });
  const users = (usersData === null || usersData === void 0 ? void 0 : usersData.user) || [];
  const APP_CONFIG = window.meetingClientSettings.public.app;
  const PRELOAD_NEXT_SLIDE = APP_CONFIG.preloadNextSlides;
  const addWhiteboardGlobalAccess = () => {
    const usersIds = users.map(user => user.userId);
    const {
      pageId
    } = currentPresentationPage;
    presentationSetWriters({
      variables: {
        pageId,
        usersIds
      }
    });
  };

  // users will only be fetched when getUsers is called
  useEffect(() => {
    if (users.length > 0) {
      addWhiteboardGlobalAccess();
    }
  }, [users]);
  const removeWhiteboardGlobalAccess = () => {
    const {
      pageId
    } = currentPresentationPage;
    presentationSetWriters({
      variables: {
        pageId,
        usersIds: []
      }
    });
  };
  const zoomSlide = (widthRatio, heightRatio, xOffset, yOffset) => {
    const {
      presentationId,
      pageId,
      num
    } = currentPresentationPage;
    presentationSetZoom({
      variables: {
        presentationId,
        pageId,
        pageNum: num,
        xOffset,
        yOffset,
        widthRatio,
        heightRatio
      }
    });
  };
  const meeting = useMeeting(m => ({
    lockSettings: m === null || m === void 0 ? void 0 : m.lockSettings
  }));
  const isViewersAnnotationsLocked = meeting ? (_meeting$lockSettings = meeting.lockSettings) === null || _meeting$lockSettings === void 0 ? void 0 : _meeting$lockSettings.hideViewersAnnotation : true;
  const multiUserData = {
    active: (whiteboardWriters === null || whiteboardWriters === void 0 ? void 0 : whiteboardWriters.length) > 0,
    size: (whiteboardWriters === null || whiteboardWriters === void 0 ? void 0 : whiteboardWriters.length) || 0,
    hasAccess: whiteboardWriters === null || whiteboardWriters === void 0 ? void 0 : whiteboardWriters.some(writer => writer.userId === Auth.userID)
  };
  const {
    data: pollData
  } = useDeduplicatedSubscription(POLL_SUBSCRIPTION);
  const poll = (pollData === null || pollData === void 0 ? void 0 : pollData.poll[0]) || {};
  const hasPoll = (pollData === null || pollData === void 0 ? void 0 : (_pollData$poll = pollData.poll) === null || _pollData$poll === void 0 ? void 0 : _pollData$poll.length) > 0;
  const currentSlide = currentPresentationPage ? {
    content: currentPresentationPage.content,
    current: currentPresentationPage.isCurrentPage,
    height: currentPresentationPage.height,
    width: currentPresentationPage.width,
    id: currentPresentationPage.pageId,
    imageUri: slideSvgUrl,
    num: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.num,
    presentationId: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.presentationId,
    svgUri: slideSvgUrl,
    infiniteWhiteboard: currentPresentationPage.infiniteWhiteboard
  } : null;
  let slidePosition;
  if (currentSlide) {
    const {
      presentationId
    } = currentSlide;
    slidePosition = {
      height: currentPresentationPage.scaledHeight,
      id: currentPresentationPage.pageId,
      presentationId: currentPresentationPage.presentationId,
      viewBoxHeight: currentPresentationPage.scaledViewBoxHeight,
      viewBoxWidth: currentPresentationPage.scaledViewBoxWidth,
      width: currentPresentationPage.scaledWidth,
      x: currentPresentationPage.xOffset,
      y: currentPresentationPage.yOffset
    };
    if (PRELOAD_NEXT_SLIDE && !fetchedpresentation[presentationId]) {
      fetchedpresentation[presentationId] = {
        canFetch: true,
        fetchedSlide: {}
      };
    }
    const presentation = fetchedpresentation[presentationId];
    if (PRELOAD_NEXT_SLIDE && !presentation.fetchedSlide[currentSlide.num + PRELOAD_NEXT_SLIDE] && presentation.canFetch) {
      // TODO: preload next slides should be reimplemented in graphql
      const slidesToFetch = [currentPresentationPage];
      const promiseImageGet = slidesToFetch.filter(s => !fetchedpresentation[presentationId].fetchedSlide[s.num]).map(async slide => {
        if (presentation.canFetch) presentation.canFetch = false;
        const image = await fetch(slide.svgUrl);
        if (image.ok) {
          presentation.fetchedSlide[slide.num] = true;
        }
      });
      Promise.all(promiseImageGet).then(() => {
        presentation.canFetch = true;
      });
    }
  }
  const {
    presentationIsOpen
  } = props;
  const cameraDock = layoutSelectInput(i => i.cameraDock);
  const presentation = layoutSelectOutput(i => i.presentation);
  const fullscreen = layoutSelect(i => i.fullscreen);
  const deviceType = layoutSelect(i => i.deviceType);
  const layoutContextDispatch = layoutDispatch();
  const {
    numCameras
  } = cameraDock;
  const {
    element
  } = fullscreen;
  const fullscreenElementId = 'Presentation';
  const fullscreenContext = element === fullscreenElementId;
  const isIphone = !!navigator.userAgent.match(/iPhone/i);
  const {
    data: currentUser
  } = useCurrentUser(user => ({
    presenter: user.presenter,
    userId: user.userId,
    isModerator: user.isModerator
  }));
  const userIsPresenter = currentUser === null || currentUser === void 0 ? void 0 : currentUser.presenter;
  const presentationAreaSize = {
    presentationAreaWidth: presentation === null || presentation === void 0 ? void 0 : presentation.width,
    presentationAreaHeight: presentation === null || presentation === void 0 ? void 0 : presentation.height
  };
  return /*#__PURE__*/React.createElement(Presentation, _objectSpread(_objectSpread({
    layoutContextDispatch,
    numCameras
  }, props), {}, {
    userIsPresenter,
    presentationBounds: presentation,
    fullscreenContext,
    fullscreenElementId,
    isMobile: deviceType === DEVICE_TYPE.MOBILE,
    isIphone,
    currentSlide,
    slidePosition,
    downloadPresentationUri: "".concat(APP_CONFIG.bbbWebBase, "/").concat(currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.downloadFileUri),
    multiUser: (multiUserData.hasAccess || multiUserData.active) && presentationIsOpen,
    presentationIsDownloadable: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.downloadable,
    mountPresentation: !!currentSlide,
    currentPresentationId: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.presentationId,
    totalPages: (currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.totalPages) || 0,
    notify,
    zoomSlide,
    publishedPoll: (poll === null || poll === void 0 ? void 0 : poll.published) || false,
    restoreOnUpdate: getFromUserSettings('bbb_force_restore_presentation_on_new_events', window.meetingClientSettings.public.presentation.restoreOnUpdate),
    addWhiteboardGlobalAccess: getUsers,
    removeWhiteboardGlobalAccess,
    multiUserSize: multiUserData.size,
    isViewersAnnotationsLocked,
    setPresentationIsOpen: MediaService.setPresentationIsOpen,
    isDefaultPresentation: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.isDefaultPresentation,
    presentationName: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.presentationName,
    presentationAreaSize,
    currentUser,
    hasPoll,
    currentPresentationPage
  }));
};
module.exportDefault(PresentationContainer);
PresentationContainer.propTypes = {
  presentationIsOpen: PropTypes.bool.isRequired
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/mutations.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  PRESENTATION_SET_ZOOM: () => PRESENTATION_SET_ZOOM,
  PRESENTATION_SET_WRITERS: () => PRESENTATION_SET_WRITERS,
  PRESENTATION_SET_PAGE: () => PRESENTATION_SET_PAGE,
  PRESENTATION_SET_DOWNLOADABLE: () => PRESENTATION_SET_DOWNLOADABLE,
  PRESENTATION_EXPORT: () => PRESENTATION_EXPORT,
  PRESENTATION_SET_CURRENT: () => PRESENTATION_SET_CURRENT,
  PRESENTATION_REMOVE: () => PRESENTATION_REMOVE,
  PRES_ANNOTATION_DELETE: () => PRES_ANNOTATION_DELETE,
  PRES_ANNOTATION_SUBMIT: () => PRES_ANNOTATION_SUBMIT,
  PRESENTATION_PUBLISH_CURSOR: () => PRESENTATION_PUBLISH_CURSOR,
  PRESENTATION_SET_PAGE_INFINITE_WHITEBOARD: () => PRESENTATION_SET_PAGE_INFINITE_WHITEBOARD
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const PRESENTATION_SET_ZOOM = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation PresentationSetZoom($presentationId: String!, $pageId: String!, $pageNum: Int!, $xOffset: Float!, $yOffset: Float!, $widthRatio: Float!, $heightRatio: Float!) {\n    presentationSetZoom(\n      presentationId: $presentationId,\n      pageId: $pageId,\n      pageNum: $pageNum,\n      xOffset: $xOffset,\n      yOffset: $yOffset,\n      widthRatio: $widthRatio,\n      heightRatio: $heightRatio,\n    )\n  }\n"])));
const PRESENTATION_SET_WRITERS = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation PresentationSetWriters($pageId: String!, $usersIds: [String]!) {\n    presentationSetWriters(\n      pageId: $pageId,\n      usersIds: $usersIds,\n    )\n  }\n"])));
const PRESENTATION_SET_PAGE = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  mutation PresentationSetPage($presentationId: String!, $pageId: String!) {\n    presentationSetPage(\n      presentationId: $presentationId,\n      pageId: $pageId,\n    )\n  }\n"])));
const PRESENTATION_SET_DOWNLOADABLE = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  mutation PresentationSetDownloadable(\n    $presentationId: String!,\n    $downloadable: Boolean!,\n    $fileStateType: String!,) {\n    presentationSetDownloadable(\n      presentationId: $presentationId,\n      downloadable: $downloadable,\n      fileStateType: $fileStateType,\n    )\n  }\n"])));
const PRESENTATION_EXPORT = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  mutation PresentationExport(\n    $presentationId: String!,\n    $fileStateType: String!,) {\n    presentationExport(\n      presentationId: $presentationId,\n      fileStateType: $fileStateType,\n    )\n  }\n"])));
const PRESENTATION_SET_CURRENT = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  mutation PresentationSetCurrent($presentationId: String!) {\n    presentationSetCurrent(\n      presentationId: $presentationId,\n    )\n  }\n"])));
const PRESENTATION_REMOVE = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  mutation PresentationRemove($presentationId: String!) {\n    presentationRemove(\n      presentationId: $presentationId,\n    )\n  }\n"])));
const PRES_ANNOTATION_DELETE = gql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  mutation PresAnnotationDelete($pageId: String!, $annotationsIds: [String]!) {\n    presAnnotationDelete(\n      pageId: $pageId,\n      annotationsIds: $annotationsIds,\n    )\n  }\n"])));
const PRES_ANNOTATION_SUBMIT = gql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  mutation PresAnnotationSubmit($pageId: String!, $annotations: json!) {\n    presAnnotationSubmit(\n      pageId: $pageId,\n      annotations: $annotations,\n    )\n  }\n"])));
const PRESENTATION_PUBLISH_CURSOR = gql(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  mutation PresentationPublishCursor($whiteboardId: String!, $xPercent: Float!, $yPercent: Float!) {\n    presentationPublishCursor(\n      whiteboardId: $whiteboardId,\n      xPercent: $xPercent,\n      yPercent: $yPercent,\n    )\n  }\n"])));
const PRESENTATION_SET_PAGE_INFINITE_WHITEBOARD = gql(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  mutation PresentationSetPageInfiniteWhiteboard($pageId: String!, $infiniteWhiteboard: Boolean!) {\n    presentationSetPageInfiniteWhiteboard(\n      pageId: $pageId,\n      infiniteWhiteboard: $infiniteWhiteboard\n    )\n  }\n"])));
module.exportDefault({
  PRESENTATION_SET_ZOOM,
  PRESENTATION_SET_WRITERS,
  PRESENTATION_SET_PAGE,
  PRESENTATION_SET_DOWNLOADABLE,
  PRESENTATION_EXPORT,
  PRESENTATION_SET_CURRENT,
  PRESENTATION_REMOVE,
  PRES_ANNOTATION_DELETE,
  PRES_ANNOTATION_SUBMIT,
  PRESENTATION_PUBLISH_CURSOR,
  PRESENTATION_SET_PAGE_INFINITE_WHITEBOARD
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presentation/styles.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let innerToastWidth, toastIconSide, smPaddingX, smPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  innerToastWidth(v) {
    innerToastWidth = v;
  },
  toastIconSide(v) {
    toastIconSide = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  }
}, 1);
let colorPrimary, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 2);
let fontSizeLarger;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarger(v) {
    fontSizeLarger = v;
  }
}, 3);
let FullscreenButtonContainer;
module.link("/imports/ui/components/common/fullscreen-button/container", {
  default(v) {
    FullscreenButtonContainer = v;
  }
}, 4);
let ToastStyled;
module.link("/imports/ui/components/common/toast/styles", {
  default(v) {
    ToastStyled = v;
  }
}, 5);
const VisuallyHidden = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  overflow: hidden;\n  clip: rect(0 0 0 0);\n  height: 1px; width: 1px;\n  margin: -1px; padding: 0; border: 0;\n"])));
const PresentationSvg = styled.svg(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n  max-width: 100%;\n  max-height: 100%;\n\n  //always show an arrow by default\n  cursor: default;\n\n  //double click on the whiteboard shouldn't change the cursor\n  -moz-user-select: -moz-none;\n  -webkit-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n"])));
const PresentationFullscreenButton = styled(FullscreenButtonContainer)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  z-index: 1;\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: auto;\n  cursor: pointer;\n\n  [dir=\"rtl\"] & {\n    right: auto;\n    left : 0;\n  }\n"])));
const InnerToastWrapper = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  width: ", ";\n"])), innerToastWidth);
const ToastIcon = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  margin-right: ", ";\n  [dir=\"rtl\"] & {\n    margin-right: 0;\n    margin-left: ", ";\n  }\n"])), smPaddingX, smPaddingX);
const IconWrapper = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  width: ", ";\n  height: ", ";\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  & > i {\n    position: relative;\n    color: ", ";\n    font-size: ", ";\n  }\n"])), colorPrimary, toastIconSide, toastIconSide, colorWhite, fontSizeLarger);
const ToastTextContent = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  position: relative;\n  overflow: hidden;\n  margin-top: ", ";\n\n  & > div:first-of-type {\n    font-weight: bold;\n  }\n"])), smPaddingY);
const PresentationName = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  text-overflow: ellipsis;\n  overflow: hidden;\n"])));
const ToastDownload = styled.span(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    color: ", ";\n    cursor: pointer;\n    text-decoration: none;\n\n    &:focus,\n    &:hover,\n    &:active {\n      color: ", ";\n      box-shadow: 0;\n    }\n  }\n"])), colorPrimary, colorPrimary);
const PresentationContainer = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n"])));
const Presentation = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  order: 1;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n"])));
const SvgContainer = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  width: 100%;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n"])));
const WhiteboardSizeAvailable = styled.div(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  z-index: -1;\n"])));
const PresentationToolbar = styled.div(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  display: flex;\n  overflow-x: visible;\n  order: 2;\n  position: absolute;\n  bottom: 0;\n  z-index: 0;\n"])));
const ToastSeparator = styled(ToastStyled.Separator)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([""])));
module.exportDefault({
  VisuallyHidden,
  PresentationSvg,
  PresentationFullscreenButton,
  InnerToastWrapper,
  ToastIcon,
  IconWrapper,
  ToastTextContent,
  PresentationName,
  ToastDownload,
  PresentationContainer,
  Presentation,
  SvgContainer,
  WhiteboardSizeAvailable,
  PresentationToolbar,
  ToastSeparator
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"video-provider":{"video-list":{"video-list-item":{"drag-and-drop":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/drag-and-drop/component.tsx                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useContext, useEffect, useState, useCallback;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let injectIntl, defineMessages;
module.link("react-intl", {
  injectIntl(v) {
    injectIntl = v;
  },
  defineMessages(v) {
    defineMessages = v;
  }
}, 1);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 2);
let ConfirmationModal;
module.link("/imports/ui/components/common/modal/confirmation/component", {
  default(v) {
    ConfirmationModal = v;
  }
}, 3);
let CustomVirtualBackgroundsContext;
module.link("/imports/ui/components/video-preview/virtual-background/context", {
  CustomVirtualBackgroundsContext(v) {
    CustomVirtualBackgroundsContext = v;
  }
}, 4);
let EFFECT_TYPES;
module.link("/imports/ui/services/virtual-background/service", {
  EFFECT_TYPES(v) {
    EFFECT_TYPES = v;
  }
}, 5);
let VirtualBgService;
module.link("/imports/ui/components/video-preview/virtual-background/service", {
  default(v) {
    VirtualBgService = v;
  }
}, 6);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 7);
let withFileReader;
module.link("/imports/ui/components/common/file-reader/component", {
  default(v) {
    withFileReader = v;
  }
}, 8);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 9);
const {
  MIME_TYPES_ALLOWED,
  MAX_FILE_SIZE
} = VirtualBgService;
const intlMessages = defineMessages({
  confirmationTitle: {
    id: 'app.confirmation.virtualBackground.title',
    description: 'Confirmation modal title'
  },
  confirmationDescription: {
    id: 'app.confirmation.virtualBackground.description',
    description: 'Confirmation modal description'
  }
});
const DragAndDrop = props => {
  const {
    children,
    intl,
    readFile,
    onVirtualBgDrop: onAction,
    isStream
  } = props;
  const [dragging, setDragging] = useState(false);
  const [draggingOver, setDraggingOver] = useState(false);
  const [isConfirmModalOpen, setConfirmModalIsOpen] = useState(false);
  const [file, setFile] = useState(null);
  const {
    dispatch: dispatchCustomBackground
  } = useContext(CustomVirtualBackgroundsContext);
  const resetEvent = e => {
    e.preventDefault();
    e.stopPropagation();
  };
  useEffect(() => {
    const onDragOver = e => {
      resetEvent(e);
      setDragging(true);
    };
    const onDragLeave = e => {
      resetEvent(e);
      setDragging(false);
    };
    const onDrop = e => {
      resetEvent(e);
      setDragging(false);
    };
    window.addEventListener('dragover', onDragOver);
    window.addEventListener('dragleave', onDragLeave);
    window.addEventListener('drop', onDrop);
    return () => {
      window.removeEventListener('dragover', onDragOver);
      window.removeEventListener('dragleave', onDragLeave);
      window.removeEventListener('drop', onDrop);
    };
  }, []);
  const handleStartAndSaveVirtualBackground = file => {
    const onSuccess = background => {
      const {
        filename,
        data
      } = background;
      if (onAction) {
        onAction(EFFECT_TYPES.IMAGE_TYPE, filename, data).then(() => {
          dispatchCustomBackground({
            type: 'new',
            background: _objectSpread(_objectSpread({}, background), {}, {
              custom: true,
              lastActivityDate: Date.now()
            })
          });
        });
      } else {
        dispatchCustomBackground({
          type: 'new',
          background: _objectSpread(_objectSpread({}, background), {}, {
            custom: true,
            lastActivityDate: Date.now()
          })
        });
      }
    };
    const onError = error => {
      logger.warn({
        logCode: 'read_file_error',
        extraInfo: {
          errorName: error.name,
          errorMessage: error.message
        }
      }, error.message);
    };
    readFile(file, onSuccess, onError);
  };
  const callback = checked => {
    if (!file) return;
    handleStartAndSaveVirtualBackground(file);
    Session.setItem('skipBackgroundDropConfirmation', checked);
  };
  const makeDragOperations = useCallback(userId => {
    const PUBLIC_CONFIG = window.meetingClientSettings.public;
    const ENABLE_WEBCAM_BACKGROUND_UPLOAD = PUBLIC_CONFIG.virtualBackgrounds.enableVirtualBackgroundUpload;
    if (!userId || Auth.userID !== userId || !ENABLE_WEBCAM_BACKGROUND_UPLOAD || !isStream) return {};
    const startAndSaveVirtualBackground = file => handleStartAndSaveVirtualBackground(file);
    const onDragOverHandler = e => {
      resetEvent(e);
      setDraggingOver(true);
      setDragging(false);
    };
    const onDropHandler = e => {
      resetEvent(e);
      setDraggingOver(false);
      setDragging(false);
      if (e.dataTransfer) {
        const {
          files
        } = e.dataTransfer;
        const file = files[0];
        if (Session.getItem('skipBackgroundDropConfirmation')) {
          return startAndSaveVirtualBackground(file);
        }
        setFile(file);
        setConfirmModalIsOpen(true);
      }
      return null;
    };
    const onDragLeaveHandler = e => {
      resetEvent(e);
      setDragging(false);
      setDraggingOver(false);
    };
    return {
      onDragOver: onDragOverHandler,
      onDrop: onDropHandler,
      onDragLeave: onDragLeaveHandler
    };
  }, [Auth.userID]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.cloneElement(children, _objectSpread(_objectSpread({}, props), {}, {
    dragging,
    draggingOver,
    makeDragOperations
  })), isConfirmModalOpen ? /*#__PURE__*/React.createElement(ConfirmationModal, {
    intl: intl,
    onConfirm: callback,
    title: intl.formatMessage(intlMessages.confirmationTitle),
    description: intl.formatMessage(intlMessages.confirmationDescription, {
      0: file === null || file === void 0 ? void 0 : file.name
    }),
    checkboxMessageId: "app.confirmation.skipConfirm",
    onRequestClose: () => setConfirmModalIsOpen(false),
    priority: 'low',
    setIsOpen: setConfirmModalIsOpen,
    isOpen: isConfirmModalOpen
  }) : null);
};
const Wrapper = Component => props => /*#__PURE__*/React.createElement(DragAndDrop
// eslint-disable-next-line react/jsx-props-no-spreading
, props, /*#__PURE__*/React.createElement(Component, null));
const withDragAndDrop = Component => injectIntl(withFileReader(Wrapper(Component), MIME_TYPES_ALLOWED, MAX_FILE_SIZE));
module.exportDefault(withDragAndDrop);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"pin-area":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/pin-area/component.tsx                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let SET_CAMERA_PINNED;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  SET_CAMERA_PINNED(v) {
    SET_CAMERA_PINNED = v;
  }
}, 4);
let useIsVideoPinEnabledForCurrentUser;
module.link("/imports/ui/components/video-provider/hooks", {
  useIsVideoPinEnabledForCurrentUser(v) {
    useIsVideoPinEnabledForCurrentUser = v;
  }
}, 5);
let VIDEO_TYPES;
module.link("/imports/ui/components/video-provider/enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 6);
const intlMessages = defineMessages({
  unpinLabel: {
    id: 'app.videoDock.webcamUnpinLabel'
  },
  unpinLabelDisabled: {
    id: 'app.videoDock.webcamUnpinLabelDisabled'
  }
});
const PinArea = props => {
  const intl = useIntl();
  const {
    stream,
    amIModerator
  } = props;
  const {
    userId,
    type
  } = stream;
  const pinned = type === VIDEO_TYPES.STREAM && stream.user.pinned;
  const videoPinActionAvailable = useIsVideoPinEnabledForCurrentUser(amIModerator);
  const [setCameraPinned] = useMutation(SET_CAMERA_PINNED);
  if (!pinned) return /*#__PURE__*/React.createElement(Styled.PinButtonWrapper, null);
  return /*#__PURE__*/React.createElement(Styled.PinButtonWrapper, null, /*#__PURE__*/React.createElement(Styled.PinButton, {
    color: "default",
    icon: !pinned ? 'pin-video_on' : 'pin-video_off',
    size: "sm",
    onClick: () => {
      setCameraPinned({
        variables: {
          userId,
          pinned: false
        }
      });
    },
    label: videoPinActionAvailable ? intl.formatMessage(intlMessages.unpinLabel) : intl.formatMessage(intlMessages.unpinLabelDisabled),
    hideLabel: true,
    disabled: !videoPinActionAvailable,
    "data-test": "pinVideoButton"
  }));
};
module.exportDefault(PinArea);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/pin-area/styles.ts                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let colorTransparent, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorTransparent(v) {
    colorTransparent = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 2);
const PinButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  padding: 5px;\n  &,\n  &:active,\n  &:hover,\n  &:focus {\n    background-color: ", " !important;\n    border: none !important;\n\n    & > i {\n      border: none !important;\n      color: ", ";\n      font-size: 1rem;\n      background-color: ", " !important;\n    }\n  }\n"])), colorTransparent, colorWhite, colorTransparent);
const PinButtonWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  background-color: rgba(0,0,0,.3);\n  cursor: pointer;\n  border: 0;\n  margin: 2px;\n  height: fit-content;\n\n  [dir=\"rtl\"] & {\n    right: auto;\n    left :0;\n  }\n\n  [class*=\"presentationZoomControls\"] & {\n    position: relative !important;\n  }\n"])));
module.exportDefault({
  PinButtonWrapper,
  PinButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-actions":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/user-actions/component.tsx                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useContext, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 3);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 4);
let FullscreenService;
module.link("/imports/ui/components/common/fullscreen-button/service", {
  default(v) {
    FullscreenService = v;
  }
}, 5);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 6);
let UserCameraDropdownItemType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/user-camera-dropdown-item/enums", {
  UserCameraDropdownItemType(v) {
    UserCameraDropdownItemType = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 9);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 10);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 11);
let SET_CAMERA_PINNED;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  SET_CAMERA_PINNED(v) {
    SET_CAMERA_PINNED = v;
  }
}, 12);
let ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 13);
let useIsVideoPinEnabledForCurrentUser;
module.link("/imports/ui/components/video-provider/hooks", {
  useIsVideoPinEnabledForCurrentUser(v) {
    useIsVideoPinEnabledForCurrentUser = v;
  }
}, 14);
let VIDEO_TYPES;
module.link("/imports/ui/components/video-provider/enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 15);
const intlMessages = defineMessages({
  focusLabel: {
    id: 'app.videoDock.webcamFocusLabel'
  },
  focusDesc: {
    id: 'app.videoDock.webcamFocusDesc'
  },
  unfocusLabel: {
    id: 'app.videoDock.webcamUnfocusLabel'
  },
  unfocusDesc: {
    id: 'app.videoDock.webcamUnfocusDesc'
  },
  pinLabel: {
    id: 'app.videoDock.webcamPinLabel'
  },
  unpinLabel: {
    id: 'app.videoDock.webcamUnpinLabel'
  },
  disableLabel: {
    id: 'app.videoDock.webcamDisableLabel'
  },
  enableLabel: {
    id: 'app.videoDock.webcamEnableLabel'
  },
  pinDesc: {
    id: 'app.videoDock.webcamPinDesc'
  },
  unpinDesc: {
    id: 'app.videoDock.webcamUnpinDesc'
  },
  enableMirrorLabel: {
    id: 'app.videoDock.webcamEnableMirrorLabel'
  },
  enableMirrorDesc: {
    id: 'app.videoDock.webcamEnableMirrorDesc'
  },
  disableMirrorLabel: {
    id: 'app.videoDock.webcamDisableMirrorLabel'
  },
  disableMirrorDesc: {
    id: 'app.videoDock.webcamDisableMirrorDesc'
  },
  fullscreenLabel: {
    id: 'app.videoDock.webcamFullscreenLabel',
    description: 'Make fullscreen option label'
  },
  exitFullscreenLabel: {
    id: 'app.videoDock.webcamExitFullscreenLabel',
    description: 'Make exit fullscreen option label'
  },
  squeezedLabel: {
    id: 'app.videoDock.webcamSqueezedButtonLabel',
    description: 'User selected webcam squeezed options'
  },
  disableDesc: {
    id: 'app.videoDock.webcamDisableDesc'
  },
  disableWarning: {
    id: 'app.videoDock.webcamDisableWarning'
  }
});
const UserActions = props => {
  const {
    name,
    cameraId,
    numOfStreams,
    onHandleVideoFocus,
    stream,
    focused,
    onHandleMirror,
    isVideoSqueezed = false,
    videoContainer,
    isRTL,
    isStream,
    isSelfViewDisabled,
    isMirrored,
    amIModerator,
    isFullscreenContext,
    layoutContextDispatch
  } = props;
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let userCameraDropdownItems = [];
  if (pluginsExtensibleAreasAggregatedState.userCameraDropdownItems) {
    userCameraDropdownItems = [...pluginsExtensibleAreasAggregatedState.userCameraDropdownItems];
  }
  const intl = useIntl();
  const enableVideoMenu = window.meetingClientSettings.public.kurento.enableVideoMenu || false;
  const {
    isFirefox
  } = browserInfo;
  const [setCameraPinned] = useMutation(SET_CAMERA_PINNED);
  const pinEnabledForCurrentUser = useIsVideoPinEnabledForCurrentUser(amIModerator);
  useEffect(() => () => {
    if (isFullscreenContext) {
      layoutContextDispatch({
        type: ACTIONS.SET_FULLSCREEN_ELEMENT,
        value: {
          element: '',
          group: ''
        }
      });
    }
  }, []);
  const getAvailableActions = () => {
    const pinned = stream.type === VIDEO_TYPES.STREAM && stream.user.pinned;
    const {
      userId
    } = stream;
    const isPinnedIntlKey = !pinned ? 'pin' : 'unpin';
    const isFocusedIntlKey = !focused ? 'focus' : 'unfocus';
    const isMirroredIntlKey = !isMirrored ? 'enableMirror' : 'disableMirror';
    const disabledCams = Session.getItem('disabledCams') || [];
    const isCameraDisabled = Array.isArray(disabledCams) && (disabledCams === null || disabledCams === void 0 ? void 0 : disabledCams.includes(cameraId));
    const enableSelfCamIntlKey = !isCameraDisabled ? 'disable' : 'enable';
    const ALLOW_FULLSCREEN = window.meetingClientSettings.public.app.allowFullscreen;
    const menuItems = [];
    const toggleDisableCam = () => {
      if (!isCameraDisabled) {
        Session.setItem('disabledCams', [...disabledCams, cameraId]);
        notify(intl.formatMessage(intlMessages.disableWarning), 'info', 'warning');
      } else {
        Session.setItem('disabledCams', disabledCams.filter(cId => cId !== cameraId));
      }
    };
    if (isVideoSqueezed) {
      menuItems.push({
        key: "".concat(cameraId, "-name"),
        label: name,
        description: name,
        onClick: () => {},
        disabled: true
      });
    }
    if (userId === Auth.userID && isStream && !isSelfViewDisabled) {
      menuItems.push({
        key: "".concat(cameraId, "-disable"),
        label: intl.formatMessage(intlMessages["".concat(enableSelfCamIntlKey, "Label")]),
        description: intl.formatMessage(intlMessages["".concat(enableSelfCamIntlKey, "Label")]),
        onClick: () => toggleDisableCam(),
        dataTest: 'selfViewDisableBtn'
      });
    }
    if (isStream) {
      menuItems.push({
        key: "".concat(cameraId, "-mirror"),
        label: intl.formatMessage(intlMessages["".concat(isMirroredIntlKey, "Label")]),
        description: intl.formatMessage(intlMessages["".concat(isMirroredIntlKey, "Desc")]),
        onClick: () => onHandleMirror(),
        dataTest: 'mirrorWebcamBtn'
      });
    }
    if (numOfStreams > 2 && isStream) {
      menuItems.push({
        key: "".concat(cameraId, "-focus"),
        label: intl.formatMessage(intlMessages["".concat(isFocusedIntlKey, "Label")]),
        description: intl.formatMessage(intlMessages["".concat(isFocusedIntlKey, "Desc")]),
        onClick: () => onHandleVideoFocus === null || onHandleVideoFocus === void 0 ? void 0 : onHandleVideoFocus(cameraId),
        dataTest: 'FocusWebcamBtn'
      });
    }
    if (pinEnabledForCurrentUser && isStream) {
      menuItems.push({
        key: "".concat(cameraId, "-pin"),
        label: intl.formatMessage(intlMessages["".concat(isPinnedIntlKey, "Label")]),
        description: intl.formatMessage(intlMessages["".concat(isPinnedIntlKey, "Desc")]),
        onClick: () => {
          setCameraPinned({
            variables: {
              userId,
              pinned: !pinned
            }
          });
        },
        dataTest: 'pinWebcamBtn'
      });
    }
    if (isStream && ALLOW_FULLSCREEN) {
      menuItems.push({
        key: "".concat(cameraId, "-fullscreen"),
        label: isFullscreenContext ? intl.formatMessage(intlMessages.exitFullscreenLabel) : intl.formatMessage(intlMessages.fullscreenLabel),
        description: isFullscreenContext ? intl.formatMessage(intlMessages.exitFullscreenLabel) : intl.formatMessage(intlMessages.fullscreenLabel),
        dataTest: 'webcamsFullscreenButton',
        onClick: () => {
          setTimeout(() => {
            layoutContextDispatch({
              type: ACTIONS.SET_FULLSCREEN_ELEMENT,
              value: {
                element: isFullscreenContext ? '' : cameraId,
                group: isFullscreenContext ? '' : 'webcams'
              }
            });
            // @ts-ignore JS code
            FullscreenService.toggleFullScreen(videoContainer === null || videoContainer === void 0 ? void 0 : videoContainer.current);
          }, 100);
        }
      });
    }
    userCameraDropdownItems.forEach(pluginItem => {
      switch (pluginItem.type) {
        case UserCameraDropdownItemType.OPTION:
          menuItems.push({
            key: pluginItem.id,
            // @ts-expect-error -> Plugin-related.
            label: pluginItem.label,
            // @ts-expect-error -> Plugin-related.
            onClick: pluginItem.onClick,
            // @ts-expect-error -> Plugin-related.
            icon: pluginItem.icon
          });
          break;
        case UserCameraDropdownItemType.SEPARATOR:
          menuItems.push({
            key: pluginItem.id,
            isSeparator: true
          });
          break;
        default:
          break;
      }
    });
    return menuItems;
  };
  const renderSqueezedButton = () => /*#__PURE__*/React.createElement(Styled.MenuWrapperSqueezed, null, /*#__PURE__*/React.createElement(BBBMenu, {
    trigger: /*#__PURE__*/React.createElement(Styled.OptionsButton, {
      label: intl.formatMessage(intlMessages.squeezedLabel),
      "aria-label": "".concat(name, " ").concat(intl.formatMessage(intlMessages.squeezedLabel)),
      "data-test": "webcamOptionsMenuSqueezed",
      icon: "device_list_selector",
      ghost: true,
      color: "primary",
      hideLabel: true,
      size: "sm",
      onClick: () => null
    }),
    actions: getAvailableActions(),
    opts: {
      container: isFullscreenContext ? videoContainer === null || videoContainer === void 0 ? void 0 : videoContainer.current : document.body
    }
  }));
  const renderDefaultButton = () => /*#__PURE__*/React.createElement(Styled.MenuWrapper, null, enableVideoMenu && getAvailableActions().length >= 1 ? /*#__PURE__*/React.createElement(BBBMenu, {
    trigger: /*#__PURE__*/React.createElement(Styled.DropdownTrigger, {
      tabIndex: 0,
      "data-test": "dropdownWebcamButton",
      $isRTL: isRTL
    }, name),
    actions: getAvailableActions(),
    opts: {
      id: "webcam-".concat(stream.userId, "-dropdown-menu"),
      keepMounted: true,
      transitionDuration: 0,
      elevation: 3,
      getcontentanchorel: null,
      fullwidth: 'true',
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: isRTL ? 'right' : 'left'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: isRTL ? 'right' : 'left'
      },
      container: isFullscreenContext ? videoContainer === null || videoContainer === void 0 ? void 0 : videoContainer.current : document.body
    }
  }) : /*#__PURE__*/React.createElement(Styled.Dropdown, {
    $isFirefox: isFirefox
  }, /*#__PURE__*/React.createElement(Styled.UserName, {
    $noMenu: numOfStreams < 3
  }, name)));
  return isVideoSqueezed ? renderSqueezedButton() : renderDefaultButton();
};
module.exportDefault(UserActions);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/user-actions/styles.ts                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorOffWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorOffWhite(v) {
    colorOffWhite = v;
  }
}, 1);
let TextElipsis, DivElipsis;
module.link("/imports/ui/stylesheets/styled-components/placeholders", {
  TextElipsis(v) {
    TextElipsis = v;
  },
  DivElipsis(v) {
    DivElipsis = v;
  }
}, 2);
let landscape, mediumUp;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  landscape(v) {
    landscape = v;
  },
  mediumUp(v) {
    mediumUp = v;
  }
}, 3);
let fontSizeSmaller;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmaller(v) {
    fontSizeSmaller = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
const DropdownTrigger = styled(DivElipsis)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  user-select: none;\n  position: relative;\n  // Keep the background with 0.5 opacity, but leave the text with 1\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 10px;\n  color: ", ";\n  padding: 0 1rem 0 .5rem !important;\n  font-size: 80%;\n  cursor: pointer;\n  white-space: nowrap;\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  &::after {\n    content: \"\\203a\";\n    position: absolute;\n    transform: rotate(90deg);\n    ", "\n    top: 45%;\n    width: 0;\n    line-height: 0;\n    right: .45rem;\n  }\n"], ["\n  user-select: none;\n  position: relative;\n  // Keep the background with 0.5 opacity, but leave the text with 1\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 10px;\n  color: ", ";\n  padding: 0 1rem 0 .5rem !important;\n  font-size: 80%;\n  cursor: pointer;\n  white-space: nowrap;\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  &::after {\n    content: \"\\\\203a\";\n    position: absolute;\n    transform: rotate(90deg);\n    ", "\n    top: 45%;\n    width: 0;\n    line-height: 0;\n    right: .45rem;\n  }\n"])), colorOffWhite, _ref => {
  let {
    $isRTL
  } = _ref;
  return $isRTL && "\n      transform: rotate(-90deg);\n    ";
});
const UserName = styled(TextElipsis)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n  // Keep the background with 0.5 opacity, but leave the text with 1\n  color: ", ";\n  padding: 0 1rem 0 .5rem !important;\n  font-size: 80%;\n\n  ", "\n"])), colorOffWhite, _ref2 => {
  let {
    $noMenu
  } = _ref2;
  return $noMenu && "\n    padding: 0 .5rem 0 .5rem !important;\n  ";
});
const Dropdown = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  outline: none !important;\n  background-color: rgba(0, 0, 0, 0.5);\n  border-radius: 10px;\n  display: inline-block;\n\n  @media ", " {\n    >[aria-expanded] {\n      padding: .25rem;\n    }\n  }\n\n  @media ", " {\n    button {\n      width: calc(100vw - 4rem);\n      margin-left: 1rem;\n    }\n  }\n\n  ", "\n"])), mediumUp, landscape, _ref3 => {
  let {
    $isFirefox
  } = _ref3;
  return $isFirefox && "\n    max-width: 100%;\n  ";
});
const MenuWrapper = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  max-width: 60%;\n"])));
const MenuWrapperSqueezed = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  position: absolute;\n  right: 0;\n  top: 0;\n"])));
const OptionsButton = styled(Button)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  position: absolute;\n  right: 7px;\n  top: 7px;\n  z-index: 2;\n  background-color: rgba(0,0,0,0.4);\n  color: ", ";\n  overflow: hidden;\n  border: none !important;\n  padding: 3px;\n\n  i {\n    width: auto;\n    font-size: ", " !important;\n    background-color: transparent !important;\n  }\n\n  &,\n  &:active,\n  &:focus,\n  &:hover {\n    background-color: rgba(0,0,0,0.5) !important;\n    border: none !important;\n    color: white !important;\n    opacity: 100% !important;\n  }\n  \n  &:hover {\n    transform: scale(1.3);\n    transition-duration: 150ms;\n  }\n"])), colorOffWhite, fontSizeSmaller);
module.exportDefault({
  DropdownTrigger,
  UserName,
  Dropdown,
  MenuWrapper,
  MenuWrapperSqueezed,
  OptionsButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-avatar":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/user-avatar/component.tsx                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const UserAvatarVideo = props => {
  const {
    user,
    stream,
    unhealthyStream,
    squeezed,
    voiceUser = {
      talking: false
    }
  } = props;
  const data = _objectSpread(_objectSpread({}, user), stream);
  const {
    name = '',
    color = '',
    avatar = '',
    isModerator
  } = data;
  let {
    presenter = false,
    clientType
  } = data;
  const {
    talking = false
  } = voiceUser;
  const handleUserIcon = () => {
    return /*#__PURE__*/React.createElement(React.Fragment, null, name.toLowerCase().slice(0, 2));
  };
  // hide icons when squeezed
  if (squeezed) {
    presenter = false;
    clientType = '';
  }
  return /*#__PURE__*/React.createElement(Styled.UserAvatarStyled, {
    moderator: isModerator,
    presenter: presenter,
    dialIn: clientType === 'dial-in-user',
    color: color,
    emoji: false,
    avatar: avatar,
    unhealthyStream: unhealthyStream,
    talking: talking,
    whiteboardAccess: undefined
  }, handleUserIcon());
};
module.exportDefault(UserAvatarVideo);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/user-avatar/styles.ts                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let UserAvatar;
module.link("/imports/ui/components/user-avatar/component", {
  default(v) {
    UserAvatar = v;
  }
}, 0);
let userIndicatorsOffset, mdPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  userIndicatorsOffset(v) {
    userIndicatorsOffset = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  }
}, 1);
let colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 2);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 3);
const UserAvatarStyled = styled(UserAvatar)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: 60%;\n  width: 45%;\n  max-width: 66px;\n  max-height: 66px;\n  scale: 1.5;\n\n  ", "\n\n  ", "\n\n    ", ";\n"])), _ref => {
  let {
    unhealthyStream
  } = _ref;
  return unhealthyStream && "\n    filter: grayscale(50%) opacity(50%);\n  ";
}, _ref2 => {
  let {
    dialIn
  } = _ref2;
  return dialIn && "\n    &:before {\n      content: \"\\00a0\\e91a\\00a0\";\n      padding: ".concat(mdPaddingY, ";\n      opacity: 1;\n      top: ").concat(userIndicatorsOffset, ";\n      right: ").concat(userIndicatorsOffset, ";\n      bottom: auto;\n      left: auto;\n      border-radius: 50%;\n      background-color: ").concat(colorPrimary, ";\n      padding: 0.7rem !important;\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: ").concat(userIndicatorsOffset, ";\n        letter-spacing: -.33rem;\n      }\n    }\n  ");
}, _ref3 => {
  let {
    presenter
  } = _ref3;
  return presenter && "\n    &:before {\n      padding: 0.7rem !important;\n    }\n  ";
});
module.exportDefault({
  UserAvatarStyled
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-status":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/user-status/component.tsx                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const UserStatus = props => {
  const {
    voiceUser,
    user,
    stream
  } = props;
  const data = _objectSpread(_objectSpread({}, user), stream);
  const listenOnly = voiceUser === null || voiceUser === void 0 ? void 0 : voiceUser.listenOnly;
  const muted = voiceUser === null || voiceUser === void 0 ? void 0 : voiceUser.muted;
  const voiceUserJoined = voiceUser === null || voiceUser === void 0 ? void 0 : voiceUser.joined;
  const emoji = data === null || data === void 0 ? void 0 : data.reactionEmoji;
  const away = data === null || data === void 0 ? void 0 : data.away;
  return /*#__PURE__*/React.createElement("div", null, away && /*#__PURE__*/React.createElement("span", null, "\u23F0"), emoji && emoji !== 'none' && !away && /*#__PURE__*/React.createElement("span", null, emoji), muted && !listenOnly && /*#__PURE__*/React.createElement(Styled.Muted, {
    iconName: "unmute_filled"
  }), listenOnly && /*#__PURE__*/React.createElement(Styled.Voice, {
    iconName: "listen"
  }), voiceUserJoined && !muted && /*#__PURE__*/React.createElement(Styled.Voice, {
    iconName: "unmute"
  }));
};
module.exportDefault(UserStatus);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/user-status/styles.ts                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 1);
let colorDanger, colorSuccess, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorDanger(v) {
    colorDanger = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 2);
const Voice = styled(Icon)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: 1.1rem;\n  width: 1.1rem;\n  margin-left: 0.5rem;\n  color: ", ";\n  border-radius: 50%;\n\n  &::before {\n    font-size: 80%;\n  }\n\n  background-color: ", ";\n"])), colorWhite, colorSuccess);
const Muted = styled(Icon)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  height: 1.1rem;\n  width: 1.1rem;\n  color: ", ";\n  border-radius: 50%;\n  margin-left: 0.5rem;\n\n  &::before {\n    font-size: 80%;\n  }\n\n  background-color: ", ";\n"])), colorWhite, colorDanger);
module.exportDefault({
  Voice,
  Muted
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/component.tsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useRef, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 2);
let UserActions;
module.link("/imports/ui/components/video-provider/video-list/video-list-item/user-actions/component", {
  default(v) {
    UserActions = v;
  }
}, 3);
let UserStatus;
module.link("/imports/ui/components/video-provider/video-list/video-list-item/user-status/component", {
  default(v) {
    UserStatus = v;
  }
}, 4);
let PinArea;
module.link("/imports/ui/components/video-provider/video-list/video-list-item/pin-area/component", {
  default(v) {
    PinArea = v;
  }
}, 5);
let UserAvatarVideo;
module.link("/imports/ui/components/video-provider/video-list/video-list-item/user-avatar/component", {
  default(v) {
    UserAvatarVideo = v;
  }
}, 6);
let isStreamStateUnhealthy, subscribeToStreamStateChange, unsubscribeFromStreamStateChange;
module.link("/imports/ui/services/bbb-webrtc-sfu/stream-state-service", {
  isStreamStateUnhealthy(v) {
    isStreamStateUnhealthy = v;
  },
  subscribeToStreamStateChange(v) {
    subscribeToStreamStateChange = v;
  },
  unsubscribeFromStreamStateChange(v) {
    unsubscribeFromStreamStateChange = v;
  }
}, 7);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 8);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 9);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 10);
let withDragAndDrop;
module.link("./drag-and-drop/component", {
  default(v) {
    withDragAndDrop = v;
  }
}, 11);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 12);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 13);
let VIDEO_TYPES;
module.link("/imports/ui/components/video-provider/enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 14);
const intlMessages = defineMessages({
  disableDesc: {
    id: 'app.videoDock.webcamDisableDesc'
  }
});
const VIDEO_CONTAINER_WIDTH_BOUND = 125;
const VideoListItem = props => {
  const {
    name,
    voiceUser,
    isFullscreenContext,
    layoutContextDispatch,
    onHandleVideoFocus,
    cameraId,
    numOfStreams,
    focused,
    onVideoItemMount,
    onVideoItemUnmount,
    makeDragOperations,
    dragging,
    draggingOver,
    isRTL,
    isStream,
    settingsSelfViewDisable,
    disabledCams,
    amIModerator,
    stream
  } = props;
  const intl = useIntl();
  const [videoDataLoaded, setVideoDataLoaded] = useState(false);
  const [isStreamHealthy, setIsStreamHealthy] = useState(false);
  const [isMirrored, setIsMirrored] = useState(VideoService.mirrorOwnWebcam(stream.userId));
  const [isVideoSqueezed, setIsVideoSqueezed] = useState(false);
  const [isSelfViewDisabled, setIsSelfViewDisabled] = useState(false);
  const resizeObserver = new ResizeObserver(entry => {
    var _entry$, _entry$$contentRect;
    if (entry && ((_entry$ = entry[0]) === null || _entry$ === void 0 ? void 0 : (_entry$$contentRect = _entry$.contentRect) === null || _entry$$contentRect === void 0 ? void 0 : _entry$$contentRect.width) < VIDEO_CONTAINER_WIDTH_BOUND) {
      return setIsVideoSqueezed(true);
    }
    return setIsVideoSqueezed(false);
  });
  const videoTag = useRef(null);
  const videoContainer = useRef(null);
  const videoIsReady = isStreamHealthy && videoDataLoaded && !isSelfViewDisabled;
  const Settings = getSettingsSingletonInstance();
  const {
    animations,
    webcamBorderHighlightColor
  } = Settings.application;
  const talking = voiceUser === null || voiceUser === void 0 ? void 0 : voiceUser.talking;
  const raiseHand = stream.type === VIDEO_TYPES.GRID && stream.raiseHand || stream.type === VIDEO_TYPES.STREAM && stream.user.raiseHand;
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    userId: u.userId,
    pinned: u.pinned,
    nameSortable: u.nameSortable,
    name: u.name,
    away: u.away,
    disconnected: u.disconnected,
    role: u.role,
    avatar: u.avatar,
    color: u.color,
    presenter: u.presenter,
    clientType: u.clientType,
    raiseHand: u.raiseHand,
    isModerator: u.isModerator,
    reactionEmoji: u.reactionEmoji
  }));
  let user;
  switch (stream.type) {
    case VIDEO_TYPES.STREAM:
      {
        user = stream.user;
        break;
      }
    case VIDEO_TYPES.GRID:
      {
        user = stream;
        break;
      }
    case VIDEO_TYPES.CONNECTING:
    default:
      {
        user = currentUser !== null && currentUser !== void 0 ? currentUser : {};
        break;
      }
  }
  const onStreamStateChange = e => {
    const {
      streamState
    } = e.detail;
    const newHealthState = !isStreamStateUnhealthy(streamState);
    e.stopPropagation();
    setIsStreamHealthy(newHealthState);
  };
  const onLoadedData = () => {
    setVideoDataLoaded(true);
    window.dispatchEvent(new Event('resize'));
    /* used when re-sharing cameras after leaving a breakout room.
    it is needed in cases where the user has more than one active camera
    so we only share the second camera after the first
    has finished loading (can't share more than one at the same time) */
    Session.setItem('canConnect', true);
  };
  // component did mount
  useEffect(() => {
    var _videoTag$current;
    subscribeToStreamStateChange(cameraId, onStreamStateChange);
    onVideoItemMount(videoTag.current);
    if (videoContainer.current) resizeObserver.observe(videoContainer.current);
    videoTag === null || videoTag === void 0 ? void 0 : (_videoTag$current = videoTag.current) === null || _videoTag$current === void 0 ? void 0 : _videoTag$current.addEventListener('loadeddata', onLoadedData);
    return () => {
      var _videoTag$current2;
      videoTag === null || videoTag === void 0 ? void 0 : (_videoTag$current2 = videoTag.current) === null || _videoTag$current2 === void 0 ? void 0 : _videoTag$current2.removeEventListener('loadeddata', onLoadedData);
      resizeObserver.disconnect();
    };
  }, []);
  // component will mount
  useEffect(() => {
    const playElement = elem => {
      if (elem.paused) {
        elem.play().catch(error => {
          // NotAllowedError equals autoplay issues, fire autoplay handling event
          if (error.name === 'NotAllowedError') {
            const tagFailedEvent = new CustomEvent('videoPlayFailed', {
              detail: {
                mediaElement: elem
              }
            });
            window.dispatchEvent(tagFailedEvent);
          }
        });
      }
    };
    if (!isSelfViewDisabled && videoDataLoaded) {
      playElement(videoTag.current);
    }
    if (isSelfViewDisabled && stream.userId === Auth.userID || disabledCams !== null && disabledCams !== void 0 && disabledCams.includes(cameraId)) {
      var _videoTag$current3, _videoTag$current3$pa;
      (_videoTag$current3 = videoTag.current) === null || _videoTag$current3 === void 0 ? void 0 : (_videoTag$current3$pa = _videoTag$current3.pause) === null || _videoTag$current3$pa === void 0 ? void 0 : _videoTag$current3$pa.call(_videoTag$current3);
    }
  }, [isSelfViewDisabled, videoDataLoaded]);
  // component will unmount
  useEffect(() => () => {
    unsubscribeFromStreamStateChange(cameraId, onStreamStateChange);
    onVideoItemUnmount(cameraId);
  }, []);
  useEffect(() => {
    setIsSelfViewDisabled(settingsSelfViewDisable);
  }, [settingsSelfViewDisable]);
  const renderSqueezedButton = () => /*#__PURE__*/React.createElement(UserActions, {
    name: name,
    stream: stream,
    videoContainer: videoContainer,
    isVideoSqueezed: isVideoSqueezed,
    cameraId: cameraId,
    numOfStreams: numOfStreams,
    onHandleVideoFocus: onHandleVideoFocus,
    focused: focused,
    onHandleMirror: () => setIsMirrored(value => !value),
    isMirrored: isMirrored,
    isRTL: isRTL,
    isStream: isStream,
    onHandleDisableCam: () => setIsSelfViewDisabled(value => !value),
    isSelfViewDisabled: isSelfViewDisabled,
    amIModerator: amIModerator,
    isFullscreenContext: isFullscreenContext,
    layoutContextDispatch: layoutContextDispatch
  });
  const renderWebcamConnecting = () => /*#__PURE__*/React.createElement(Styled.WebcamConnecting, {
    "data-test": "webcamConnecting",
    animations: animations
  }, /*#__PURE__*/React.createElement(UserAvatarVideo, {
    user: user,
    stream: stream,
    voiceUser: voiceUser,
    unhealthyStream: videoDataLoaded && !isStreamHealthy,
    squeezed: false
  }), /*#__PURE__*/React.createElement(Styled.TopBar, null, raiseHand && /*#__PURE__*/React.createElement(Styled.RaiseHand, null, "\u270B")), /*#__PURE__*/React.createElement(Styled.BottomBar, null, /*#__PURE__*/React.createElement(UserActions, {
    name: name,
    stream: stream,
    cameraId: cameraId,
    numOfStreams: numOfStreams,
    onHandleVideoFocus: onHandleVideoFocus,
    focused: focused,
    onHandleMirror: () => setIsMirrored(value => !value),
    isMirrored: isMirrored,
    isRTL: isRTL,
    isStream: isStream,
    onHandleDisableCam: () => setIsSelfViewDisabled(value => !value),
    isSelfViewDisabled: isSelfViewDisabled,
    amIModerator: amIModerator,
    videoContainer: videoContainer,
    isFullscreenContext: isFullscreenContext,
    layoutContextDispatch: layoutContextDispatch
  }), /*#__PURE__*/React.createElement(UserStatus, {
    voiceUser: voiceUser,
    user: user,
    stream: stream
  })));
  const renderWebcamConnectingSqueezed = () => /*#__PURE__*/React.createElement(Styled.WebcamConnecting, {
    "data-test": "webcamConnectingSqueezed",
    animations: animations
  }, /*#__PURE__*/React.createElement(UserAvatarVideo, {
    user: user,
    stream: stream,
    unhealthyStream: videoDataLoaded && !isStreamHealthy,
    squeezed: true
  }), renderSqueezedButton());
  const renderDefaultButtons = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.TopBar, null, raiseHand && /*#__PURE__*/React.createElement(Styled.RaiseHand, null, "\u270B"), /*#__PURE__*/React.createElement(PinArea, {
    stream: stream,
    amIModerator: amIModerator
  })), /*#__PURE__*/React.createElement(Styled.BottomBar, null, /*#__PURE__*/React.createElement(UserActions, {
    name: name,
    stream: stream,
    cameraId: cameraId,
    numOfStreams: numOfStreams,
    onHandleVideoFocus: onHandleVideoFocus,
    focused: focused,
    onHandleMirror: () => setIsMirrored(value => !value),
    isMirrored: isMirrored,
    isRTL: isRTL,
    isStream: isStream,
    onHandleDisableCam: () => setIsSelfViewDisabled(value => !value),
    isSelfViewDisabled: isSelfViewDisabled,
    amIModerator: amIModerator,
    videoContainer: videoContainer,
    isFullscreenContext: isFullscreenContext,
    layoutContextDispatch: layoutContextDispatch
  }), /*#__PURE__*/React.createElement(UserStatus, {
    voiceUser: voiceUser,
    user: user,
    stream: stream
  })));
  const {
    onDragLeave,
    onDragOver,
    onDrop
  } = makeDragOperations(stream.userId);
  return (
    /*#__PURE__*/
    // @ts-expect-error -> Until everything in Typescript.
    React.createElement(Styled.Content, {
      ref: videoContainer,
      talking: talking,
      customHighlight: webcamBorderHighlightColor,
      fullscreen: isFullscreenContext,
      "data-test": talking ? 'webcamItemTalkingUser' : 'webcamItem',
      animations: animations,
      isStream: isStream,
      onDragLeave,
      onDragOver,
      onDrop,
      dragging,
      draggingOver
    }, /*#__PURE__*/React.createElement(Styled.VideoContainer, {
      $selfViewDisabled: isSelfViewDisabled && stream.userId === Auth.userID || disabledCams.includes(cameraId)
    }, /*#__PURE__*/React.createElement(Styled.Video, {
      mirrored: isMirrored,
      unhealthyStream: videoDataLoaded && !isStreamHealthy,
      "data-test": isMirrored ? 'mirroredVideoContainer' : 'videoContainer',
      ref: videoTag,
      muted: true,
      autoPlay: true,
      playsInline: true
    })), isStream && (isSelfViewDisabled && stream.userId === Auth.userID || disabledCams.includes(cameraId)) && /*#__PURE__*/React.createElement(Styled.VideoDisabled, null, intl.formatMessage(intlMessages.disableDesc)), (videoIsReady || isSelfViewDisabled || disabledCams.includes(cameraId)) && (isVideoSqueezed ? renderSqueezedButton() : renderDefaultButtons()), !videoIsReady && (!isSelfViewDisabled || !isStream) && (isVideoSqueezed ? renderWebcamConnectingSqueezed() : renderWebcamConnecting()), (isSelfViewDisabled && stream.userId === Auth.userID || disabledCams.includes(cameraId)) && renderWebcamConnecting())
  );
};
// @ts-expect-error -> Until everything in Typescript.
module.exportDefault(withDragAndDrop(VideoListItem));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/container.tsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 2);
let layoutSelect, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 3);
let VideoListItem;
module.link("./component", {
  default(v) {
    VideoListItem = v;
  }
}, 4);
let useSettings;
module.link("/imports/ui/services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 5);
let SETTINGS;
module.link("/imports/ui/services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 6);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 7);
let useWhoIsTalking;
module.link("/imports/ui/core/hooks/useWhoIsTalking", {
  default(v) {
    useWhoIsTalking = v;
  }
}, 8);
let useWhoIsUnmuted;
module.link("/imports/ui/core/hooks/useWhoIsUnmuted", {
  default(v) {
    useWhoIsUnmuted = v;
  }
}, 9);
let VIDEO_TYPES;
module.link("/imports/ui/components/video-provider/enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 10);
const VideoListItemContainer = props => {
  const {
    cameraId,
    focused,
    isStream,
    name,
    numOfStreams,
    onHandleVideoFocus,
    onVideoItemMount,
    onVideoItemUnmount,
    onVirtualBgDrop,
    stream,
    userId
  } = props;
  const fullscreen = layoutSelect(i => i.fullscreen);
  const {
    element
  } = fullscreen;
  const isFullscreenContext = element === cameraId;
  const layoutContextDispatch = layoutDispatch();
  const isRTL = layoutSelect(i => i.isRTL);
  // @ts-ignore Untyped object
  const {
    selfViewDisable: settingsSelfViewDisable
  } = useSettings(SETTINGS.APPLICATION);
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    isModerator: user.isModerator
  }));
  const amIModerator = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.isModerator;
  const disabledCams = useStorageKey('disabledCams') || [];
  const {
    data: talkingUsers
  } = useWhoIsTalking();
  const {
    data: unmutedUsers
  } = useWhoIsUnmuted();
  const voiceUser = stream.type !== VIDEO_TYPES.CONNECTING && stream.voice ? _objectSpread(_objectSpread({}, stream.voice), {}, {
    talking: talkingUsers[userId],
    muted: !unmutedUsers[userId]
  }) : {};
  return /*#__PURE__*/React.createElement(VideoListItem, {
    isFullscreenContext,
    layoutContextDispatch,
    isRTL,
    amIModerator,
    cameraId: cameraId,
    disabledCams: disabledCams,
    focused: focused,
    isStream: isStream,
    name: name,
    numOfStreams: numOfStreams,
    onHandleVideoFocus: onHandleVideoFocus,
    onVideoItemMount: onVideoItemMount,
    onVideoItemUnmount: onVideoItemUnmount,
    onVirtualBgDrop: onVirtualBgDrop,
    settingsSelfViewDisable: settingsSelfViewDisable,
    stream: stream,
    voiceUser: voiceUser
  });
};
module.exportDefault(VideoListItemContainer);
VideoListItemContainer.propTypes = {
  cameraId: PropTypes.string.isRequired
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/video-list-item/styles.ts                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, keyframes, css;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  keyframes(v) {
    keyframes = v;
  },
  css(v) {
    css = v;
  }
}, 0);
let colorPrimary, colorBlack, colorWhite, webcamBackgroundColor, colorDanger, webcamPlaceholderBorder;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorBlack(v) {
    colorBlack = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  webcamBackgroundColor(v) {
    webcamBackgroundColor = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  webcamPlaceholderBorder(v) {
    webcamPlaceholderBorder = v;
  }
}, 1);
let TextElipsis;
module.link("/imports/ui/stylesheets/styled-components/placeholders", {
  TextElipsis(v) {
    TextElipsis = v;
  }
}, 2);
const rotate360 = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  from {\n    transform: rotate(360deg);\n  }\n  to {\n    transform: rotate(0deg);\n  }\n"])));
const fade = keyframes(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  from {\n    opacity: 0.7;\n  }\n  to {\n    opacity: 0;\n  }\n"])));
const Content = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: relative;\n  display: flex;\n  min-width: 100%;\n  border-radius: 10px;\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    border: 2px solid ", ";\n    border-radius: 10px;\n\n    ", "\n\n    ", "\n\n    ", "\n\n    ", "\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n"])), colorBlack, _ref => {
  let {
    isStream
  } = _ref;
  return !isStream && "\n      border: 2px solid ".concat(webcamPlaceholderBorder, ";\n    ");
}, _ref2 => {
  let {
    talking
  } = _ref2;
  return talking && "\n      border: 2px solid ".concat(colorPrimary, ";\n    ");
}, _ref3 => {
  let {
    talking,
    customHighlight
  } = _ref3;
  return talking && customHighlight && customHighlight.length > 0 && "\n      border: 2px solid rgb(".concat(customHighlight[0], ", ").concat(customHighlight[1], ", ").concat(customHighlight[2], ");\n    ");
}, _ref4 => {
  let {
    animations
  } = _ref4;
  return animations && "\n      transition: opacity .1s;\n    ";
}, _ref5 => {
  let {
    dragging,
    animations
  } = _ref5;
  return dragging && animations && css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n    &::after {\n      animation: ", " .5s linear infinite;\n      animation-direction: alternate;\n    }\n  "])), fade);
}, _ref6 => {
  let {
    dragging,
    draggingOver
  } = _ref6;
  return (dragging || draggingOver) && "\n    &::after {\n      opacity: 0.7;\n      border-style: dashed;\n      border-color: ".concat(colorDanger, ";\n      transition: opacity 0s;\n    }\n  ");
}, _ref7 => {
  let {
    fullscreen
  } = _ref7;
  return fullscreen && "\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    z-index: 99;\n  ";
});
const WebcamConnecting = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  width: 100%;\n  min-width: 100%;\n  border-radius: 10px;\n  background-color: ", ";\n  z-index: 0;\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    opacity: 0;\n    pointer-events: none;\n\n    ", "\n  }\n"])), webcamBackgroundColor, _ref8 => {
  let {
    animations
  } = _ref8;
  return animations && "\n      transition: opacity .1s;\n    ";
});
const LoadingText = styled(TextElipsis)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: 100%;\n"])), colorWhite);
const VideoContainer = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n\n  ", "\n"])), _ref9 => {
  let {
    $selfViewDisabled
  } = _ref9;
  return $selfViewDisabled && 'display: none';
});
const Video = styled.video(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  position: relative;\n  height: 100%;\n  width: calc(100% - 1px);\n  object-fit: contain;\n  background-color: ", ";\n  border-radius: 10px;\n\n  ", "\n\n  ", "\n"])), colorBlack, _ref10 => {
  let {
    mirrored
  } = _ref10;
  return mirrored && "\n    transform: scale(-1, 1);\n  ";
}, _ref11 => {
  let {
    unhealthyStream
  } = _ref11;
  return unhealthyStream && "\n    filter: grayscale(50%) opacity(50%);\n  ";
});
const VideoDisabled = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  color: white;\n  width: 100%;\n  height: 20%;\n  background-color: rgba(0, 0, 0, 0.7);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  border-radius: 10px;\n  z-index: 2;\n  top: 40%;\n  transform: translate(-50%, -50%);\n  top: 50%;\n  left: 50%;\n  padding: 20px;\n  backdrop-filter: blur(10px); \n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n"])));
const TopBar = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  position: absolute;\n  display: flex;\n  width: 100%;\n  z-index: 1;\n  top: 0;\n  padding: 5px;\n  justify-content: space-between;\n"])));
const BottomBar = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  position: absolute;\n  display: flex;\n  width: 100%;\n  z-index: 1;\n  bottom: 0;\n  padding: 1px 7px;\n  justify-content: space-between;\n"])));
const RaiseHand = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  font-size: 32px;\n"])));
module.exportDefault({
  Content,
  WebcamConnecting,
  LoadingText,
  VideoContainer,
  Video,
  TopBar,
  BottomBar,
  VideoDisabled,
  RaiseHand
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/component.tsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 2);
let range;
module.link("/imports/utils/array-utils", {
  range(v) {
    range = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let VideoListItemContainer;
module.link("./video-list-item/container", {
  default(v) {
    VideoListItemContainer = v;
  }
}, 5);
let AutoplayOverlay;
module.link("/imports/ui/components/media/autoplay-overlay/component", {
  default(v) {
    AutoplayOverlay = v;
  }
}, 6);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 7);
let playAndRetry;
module.link("/imports/utils/mediaElementPlayRetry", {
  default(v) {
    playAndRetry = v;
  }
}, 8);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 9);
let ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 10);
let VIDEO_TYPES;
module.link("/imports/ui/components/video-provider/enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 11);
const intlMessages = defineMessages({
  autoplayBlockedDesc: {
    id: 'app.videoDock.autoplayBlockedDesc'
  },
  autoplayAllowLabel: {
    id: 'app.videoDock.autoplayAllowLabel'
  },
  nextPageLabel: {
    id: 'app.video.pagination.nextPage'
  },
  prevPageLabel: {
    id: 'app.video.pagination.prevPage'
  }
});
const findOptimalGrid = function (canvasWidth, canvasHeight, gutter, aspectRatio, numItems) {
  let columns = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
  const rows = Math.ceil(numItems / columns);
  const gutterTotalWidth = (columns - 1) * gutter;
  const gutterTotalHeight = (rows - 1) * gutter;
  const usableWidth = canvasWidth - gutterTotalWidth;
  const usableHeight = canvasHeight - gutterTotalHeight;
  let cellWidth = Math.floor(usableWidth / columns);
  let cellHeight = Math.ceil(cellWidth / aspectRatio);
  if (cellHeight * rows > usableHeight) {
    cellHeight = Math.floor(usableHeight / rows);
    cellWidth = Math.ceil(cellHeight * aspectRatio);
  }
  return {
    columns,
    rows,
    width: cellWidth * columns + gutterTotalWidth,
    height: cellHeight * rows + gutterTotalHeight,
    filledArea: cellWidth * cellHeight * numItems
  };
};
const ASPECT_RATIO = 4 / 3;
class VideoList extends Component {
  constructor(props) {
    super(props);
    this.ticking = void 0;
    this.grid = void 0;
    this.canvas = void 0;
    this.failedMediaElements = void 0;
    this.autoplayWasHandled = void 0;
    this.state = {
      optimalGrid: {
        cols: 1,
        rows: 1,
        filledArea: 0,
        columns: 0,
        height: 0,
        width: 0
      },
      autoplayBlocked: false
    };
    this.ticking = false;
    this.grid = null;
    this.canvas = null;
    this.failedMediaElements = [];
    this.handleCanvasResize = throttle(this.handleCanvasResize.bind(this), 66, {
      leading: true,
      trailing: true
    });
    this.setOptimalGrid = this.setOptimalGrid.bind(this);
    this.handleAllowAutoplay = this.handleAllowAutoplay.bind(this);
    this.handlePlayElementFailed = this.handlePlayElementFailed.bind(this);
    this.autoplayWasHandled = false;
  }
  componentDidMount() {
    this.handleCanvasResize();
    window.addEventListener('resize', this.handleCanvasResize, false);
    window.addEventListener('videoPlayFailed', this.handlePlayElementFailed);
  }
  componentDidUpdate(prevProps) {
    const {
      layoutType,
      cameraDock,
      streams,
      focusedId
    } = this.props;
    const {
      width: cameraDockWidth,
      height: cameraDockHeight
    } = cameraDock;
    const {
      layoutType: prevLayoutType,
      cameraDock: prevCameraDock,
      streams: prevStreams,
      focusedId: prevFocusedId
    } = prevProps;
    const {
      width: prevCameraDockWidth,
      height: prevCameraDockHeight
    } = prevCameraDock;
    if (layoutType !== prevLayoutType || focusedId !== prevFocusedId || cameraDockWidth !== prevCameraDockWidth || cameraDockHeight !== prevCameraDockHeight || streams.length !== prevStreams.length) {
      this.handleCanvasResize();
    }
  }
  componentWillUnmount() {
    window.removeEventListener('resize', this.handleCanvasResize, false);
    window.removeEventListener('videoPlayFailed', this.handlePlayElementFailed);
  }
  handleAllowAutoplay() {
    const {
      autoplayBlocked
    } = this.state;
    logger.info({
      logCode: 'video_provider_autoplay_allowed'
    }, 'Video media autoplay allowed by the user');
    this.autoplayWasHandled = true;
    window.removeEventListener('videoPlayFailed', this.handlePlayElementFailed);
    while (this.failedMediaElements.length) {
      const mediaElement = this.failedMediaElements.shift();
      if (mediaElement) {
        const played = playAndRetry(mediaElement);
        if (!played) {
          logger.error({
            logCode: 'video_provider_autoplay_handling_failed'
          }, 'Video autoplay handling failed to play media');
        } else {
          logger.info({
            logCode: 'video_provider_media_play_success'
          }, 'Video media played successfully');
        }
      }
    }
    if (autoplayBlocked) {
      this.setState({
        autoplayBlocked: false
      });
    }
  }
  handlePlayElementFailed(e) {
    const {
      mediaElement
    } = e.detail;
    const {
      autoplayBlocked
    } = this.state;
    e.stopPropagation();
    this.failedMediaElements.push(mediaElement);
    if (!autoplayBlocked && !this.autoplayWasHandled) {
      logger.info({
        logCode: 'video_provider_autoplay_prompt'
      }, 'Prompting user for action to play video media');
      this.setState({
        autoplayBlocked: true
      });
    }
  }
  handleCanvasResize() {
    if (!this.ticking) {
      window.requestAnimationFrame(() => {
        this.ticking = false;
        this.setOptimalGrid();
      });
    }
    this.ticking = true;
  }
  setOptimalGrid() {
    const {
      streams,
      cameraDock,
      layoutContextDispatch
    } = this.props;
    let numItems = streams.length;
    if (numItems < 1 || !this.canvas || !this.grid) {
      return;
    }
    const {
      focusedId
    } = this.props;
    const canvasWidth = cameraDock === null || cameraDock === void 0 ? void 0 : cameraDock.width;
    const canvasHeight = cameraDock === null || cameraDock === void 0 ? void 0 : cameraDock.height;
    const gridGutter = parseInt(window.getComputedStyle(this.grid).getPropertyValue('grid-row-gap'), 10);
    const hasFocusedItem = streams.filter(s => s.type !== VIDEO_TYPES.GRID && s.stream === focusedId).length && numItems > 2;
    // Has a focused item so we need +3 cells
    if (hasFocusedItem) {
      numItems += 3;
    }
    const optimalGrid = range(1, numItems + 1).reduce((currentGrid, col) => {
      const testGrid = findOptimalGrid(canvasWidth, canvasHeight, gridGutter, ASPECT_RATIO, numItems, col);
      // We need a minimum of 2 rows and columns for the focused
      const focusedConstraint = hasFocusedItem ? testGrid.rows > 1 && testGrid.columns > 1 : true;
      const betterThanCurrent = testGrid.filledArea > currentGrid.filledArea;
      return focusedConstraint && betterThanCurrent ? testGrid : currentGrid;
    }, {
      filledArea: 0
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAMERA_DOCK_OPTIMAL_GRID_SIZE,
      value: {
        width: optimalGrid.width,
        height: optimalGrid.height
      }
    });
    this.setState({
      optimalGrid
    });
  }
  displayPageButtons() {
    const {
      numberOfPages,
      cameraDock
    } = this.props;
    const {
      width: cameraDockWidth
    } = cameraDock;
    if (!VideoService.isPaginationEnabled() || numberOfPages <= 1 || cameraDockWidth === 0) {
      return false;
    }
    return true;
  }
  renderNextPageButton() {
    const {
      intl,
      numberOfPages,
      currentVideoPageIndex,
      cameraDock
    } = this.props;
    const {
      position
    } = cameraDock;
    if (!this.displayPageButtons()) return null;
    const currentPage = currentVideoPageIndex + 1;
    const nextPageLabel = intl.formatMessage(intlMessages.nextPageLabel);
    const nextPageDetailedLabel = "".concat(nextPageLabel, " (").concat(currentPage, "/").concat(numberOfPages, ")");
    return /*#__PURE__*/React.createElement(Styled.NextPageButton, {
      role: "button",
      "aria-label": nextPageLabel,
      color: "primary",
      icon: "right_arrow",
      size: "md",
      onClick: VideoService.getNextVideoPage,
      label: nextPageDetailedLabel,
      hideLabel: true,
      position: position
    });
  }
  renderPreviousPageButton() {
    const {
      intl,
      currentVideoPageIndex,
      numberOfPages,
      cameraDock
    } = this.props;
    const {
      position
    } = cameraDock;
    if (!this.displayPageButtons()) return null;
    const currentPage = currentVideoPageIndex + 1;
    const prevPageLabel = intl.formatMessage(intlMessages.prevPageLabel);
    const prevPageDetailedLabel = "".concat(prevPageLabel, " (").concat(currentPage, "/").concat(numberOfPages, ")");
    return /*#__PURE__*/React.createElement(Styled.PreviousPageButton, {
      role: "button",
      "aria-label": prevPageLabel,
      color: "primary",
      icon: "left_arrow",
      size: "md",
      onClick: VideoService.getPreviousVideoPage,
      label: prevPageDetailedLabel,
      hideLabel: true,
      position: position
    });
  }
  renderVideoList() {
    const {
      streams,
      onVirtualBgDrop,
      onVideoItemMount,
      onVideoItemUnmount,
      handleVideoFocus,
      focusedId
    } = this.props;
    const numOfStreams = streams.length;
    return streams.map(item => {
      const {
        userId,
        name
      } = item;
      const isStream = item.type !== VIDEO_TYPES.GRID;
      const stream = isStream ? item.stream : null;
      const key = isStream ? stream : userId;
      const isFocused = isStream && focusedId === stream && numOfStreams > 2;
      return /*#__PURE__*/React.createElement(Styled.VideoListItem, {
        key: key,
        $focused: isFocused,
        "data-test": "webcamVideoItem"
      }, /*#__PURE__*/React.createElement(VideoListItemContainer, {
        numOfStreams: numOfStreams,
        cameraId: stream,
        userId: userId,
        name: name,
        focused: isFocused,
        isStream: isStream,
        onHandleVideoFocus: isStream ? handleVideoFocus : null,
        onVideoItemMount: videoRef => {
          this.handleCanvasResize();
          if (isStream) onVideoItemMount(item.stream, videoRef);
        },
        stream: item,
        onVideoItemUnmount: onVideoItemUnmount,
        onVirtualBgDrop: (type, name, data) => {
          return isStream ? onVirtualBgDrop(item.stream, type, name, data) : Promise.resolve(null);
        }
      }));
    });
  }
  render() {
    const {
      streams,
      intl,
      cameraDock,
      isGridEnabled
    } = this.props;
    const {
      optimalGrid,
      autoplayBlocked
    } = this.state;
    const {
      position
    } = cameraDock;
    return /*#__PURE__*/React.createElement(Styled.VideoCanvas, {
      $position: position,
      ref: ref => {
        this.canvas = ref;
      },
      style: {
        minHeight: 'inherit'
      }
    }, this.renderPreviousPageButton(), !streams.length && !isGridEnabled ? null : /*#__PURE__*/React.createElement(Styled.VideoList, {
      ref: ref => {
        this.grid = ref;
      },
      style: {
        width: "".concat(optimalGrid.width, "px"),
        height: "".concat(optimalGrid.height, "px"),
        gridTemplateColumns: "repeat(".concat(optimalGrid.columns, ", 1fr)"),
        gridTemplateRows: "repeat(".concat(optimalGrid.rows, ", 1fr)")
      }
    }, this.renderVideoList()), !autoplayBlocked ? null : /*#__PURE__*/React.createElement(AutoplayOverlay, {
      autoplayBlockedDesc: intl.formatMessage(intlMessages.autoplayBlockedDesc),
      autoplayAllowLabel: intl.formatMessage(intlMessages.autoplayAllowLabel),
      handleAllowAutoplay: this.handleAllowAutoplay
    }), (position === 'contentRight' || position === 'contentLeft') && /*#__PURE__*/React.createElement(Styled.Break, null), this.renderNextPageButton());
  }
}
module.exportDefault(injectIntl(VideoList));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/container.tsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let VideoList;
module.link("/imports/ui/components/video-provider/video-list/component", {
  default(v) {
    VideoList = v;
  }
}, 1);
let layoutSelect, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let useNumberOfPages;
module.link("/imports/ui/components/video-provider/hooks", {
  useNumberOfPages(v) {
    useNumberOfPages = v;
  }
}, 3);
const VideoListContainer = props => {
  const layoutType = layoutSelect(i => i.layoutType);
  const layoutContextDispatch = layoutDispatch();
  const {
    streams,
    cameraDock,
    currentVideoPageIndex,
    focusedId,
    handleVideoFocus,
    isGridEnabled,
    onVideoItemMount,
    onVideoItemUnmount,
    onVirtualBgDrop
  } = props;
  const numberOfPages = useNumberOfPages();
  return !streams.length ? null : /*#__PURE__*/React.createElement(VideoList, {
    layoutType: layoutType,
    layoutContextDispatch: layoutContextDispatch,
    numberOfPages: numberOfPages,
    currentVideoPageIndex: currentVideoPageIndex,
    cameraDock: cameraDock,
    focusedId: focusedId,
    handleVideoFocus: handleVideoFocus,
    isGridEnabled: isGridEnabled,
    streams: streams,
    onVideoItemMount: onVideoItemMount,
    onVideoItemUnmount: onVideoItemUnmount,
    onVirtualBgDrop: onVirtualBgDrop
  });
};
module.exportDefault(VideoListContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-list/styles.ts                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 1);
let mediumUp;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  mediumUp(v) {
    mediumUp = v;
  }
}, 2);
let actionsBarHeight, navbarHeight, mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  actionsBarHeight(v) {
    actionsBarHeight = v;
  },
  navbarHeight(v) {
    navbarHeight = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 3);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 4);
// @ts-expect-error -> Untyped component.
const NextPageButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  color: ", ";\n  width: ", ";\n\n  & > i {\n    [dir=\"rtl\"] & {\n      -webkit-transform: scale(-1, 1);\n      -moz-transform: scale(-1, 1);\n      -ms-transform: scale(-1, 1);\n      -o-transform: scale(-1, 1);\n      transform: scale(-1, 1);\n    }\n  }\n\n  margin-left: 1px;\n\n  @media ", " {\n    margin-left: 2px;\n  }\n\n  ", "\n"])), colorWhite, mdPaddingX, mediumUp, _ref => {
  let {
    position
  } = _ref;
  return (position === 'contentRight' || position === 'contentLeft') && "\n    order: 3;\n    margin-right: 2px;\n  ";
});
// @ts-expect-error -> Untyped component.
const PreviousPageButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  color: ", ";\n  width: ", ";\n\n  i {\n    [dir=\"rtl\"] & {\n      -webkit-transform: scale(-1, 1);\n      -moz-transform: scale(-1, 1);\n      -ms-transform: scale(-1, 1);\n      -o-transform: scale(-1, 1);\n      transform: scale(-1, 1);\n    }\n  }\n\n  margin-right: 1px;\n\n  @media ", " {\n    margin-right: 2px;\n  }\n\n  ", "\n"])), colorWhite, mdPaddingX, mediumUp, _ref2 => {
  let {
    position
  } = _ref2;
  return (position === 'contentRight' || position === 'contentLeft') && "\n    order: 2;\n    margin-left: 2px;\n  ";
});
const VideoListItem = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  overflow: hidden;\n  width: 100%;\n  max-height: 100%;\n\n  ", "\n"])), _ref3 => {
  let {
    $focused
  } = _ref3;
  return $focused && "\n    grid-column: 1 / span 2;\n    grid-row: 1 / span 2;\n  ";
});
const VideoCanvas = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: absolute;\n  width: 100%;\n  min-height: calc((100vh - calc(", " + ", ")) * 0.2);\n  height: 100%;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ", "\n"])), navbarHeight, actionsBarHeight, _ref4 => {
  let {
    $position
  } = _ref4;
  return ($position === 'contentRight' || $position === 'contentLeft') && "\n    flex-wrap: wrap;\n    align-content: center;\n    order: 0;\n  ";
});
const VideoList = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: grid;\n\n  grid-auto-flow: dense;\n  grid-gap: 1px;\n\n  justify-content: center;\n\n  @media ", " {\n    grid-gap: 2px;\n  }\n"])), mediumUp);
const Break = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  order: 1;\n  flex-basis: 100%;\n  height: 5px;\n"])));
module.exportDefault({
  NextPageButton,
  PreviousPageButton,
  VideoListItem,
  VideoCanvas,
  VideoList,
  Break
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"hooks":{"index.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/hooks/index.ts                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  useStatus: () => useStatus,
  useDisableReason: () => useDisableReason,
  useIsUserLocked: () => useIsUserLocked,
  useVideoStreamsCount: () => useVideoStreamsCount,
  useLocalVideoStreamsCount: () => useLocalVideoStreamsCount,
  useInfo: () => useInfo,
  useHasCapReached: () => useHasCapReached,
  useDisableCam: () => useDisableCam,
  usePageSizeDictionary: () => usePageSizeDictionary,
  useMyRole: () => useMyRole,
  useMyPageSize: () => useMyPageSize,
  useIsPaginationEnabled: () => useIsPaginationEnabled,
  useStreams: () => useStreams,
  useGridUsers: () => useGridUsers,
  useSharedDevices: () => useSharedDevices,
  useNumberOfPages: () => useNumberOfPages,
  useCurrentVideoPageIndex: () => useCurrentVideoPageIndex,
  useGridSize: () => useGridSize,
  useVideoStreams: () => useVideoStreams,
  useHasVideoStream: () => useHasVideoStream,
  useExitVideo: () => useExitVideo,
  useViewersInWebcamCount: () => useViewersInWebcamCount,
  useLockUser: () => useLockUser,
  useStopVideo: () => useStopVideo,
  useActivePeers: () => useActivePeers,
  useGetStats: () => useGetStats,
  useShouldRenderPaginationToggle: () => useShouldRenderPaginationToggle,
  useIsVideoPinEnabledForCurrentUser: () => useIsVideoPinEnabledForCurrentUser
});
let useCallback, useEffect;
module.link("react", {
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let useReactiveVar, useLazyQuery, useMutation, useSubscription;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  },
  useLazyQuery(v) {
    useLazyQuery = v;
  },
  useMutation(v) {
    useMutation = v;
  },
  useSubscription(v) {
    useSubscription = v;
  }
}, 1);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 2);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 3);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 4);
let partition;
module.link("/imports/utils/array-utils", {
  partition(v) {
    partition = v;
  }
}, 5);
let USER_AGGREGATE_COUNT_SUBSCRIPTION;
module.link("/imports/ui/core/graphql/queries/users", {
  USER_AGGREGATE_COUNT_SUBSCRIPTION(v) {
    USER_AGGREGATE_COUNT_SUBSCRIPTION = v;
  }
}, 6);
let getSortingMethod, sortVideoStreams;
module.link("/imports/ui/components/video-provider/stream-sorting", {
  getSortingMethod(v) {
    getSortingMethod = v;
  },
  sortVideoStreams(v) {
    sortVideoStreams = v;
  }
}, 7);
let useVideoState, getConnectingStream, setVideoState, useConnectingStream, streams, getVideoState;
module.link("../state", {
  useVideoState(v) {
    useVideoState = v;
  },
  getConnectingStream(v) {
    getConnectingStream = v;
  },
  setVideoState(v) {
    setVideoState = v;
  },
  useConnectingStream(v) {
    useConnectingStream = v;
  },
  streams(v) {
    streams = v;
  },
  getVideoState(v) {
    getVideoState = v;
  }
}, 8);
let OWN_VIDEO_STREAMS_QUERY, GRID_USERS_SUBSCRIPTION, VIEWERS_IN_WEBCAM_COUNT_SUBSCRIPTION;
module.link("../queries", {
  OWN_VIDEO_STREAMS_QUERY(v) {
    OWN_VIDEO_STREAMS_QUERY = v;
  },
  GRID_USERS_SUBSCRIPTION(v) {
    GRID_USERS_SUBSCRIPTION = v;
  },
  VIEWERS_IN_WEBCAM_COUNT_SUBSCRIPTION(v) {
    VIEWERS_IN_WEBCAM_COUNT_SUBSCRIPTION = v;
  }
}, 9);
let videoService;
module.link("../service", {
  default(v) {
    videoService = v;
  }
}, 10);
let CAMERA_BROADCAST_STOP;
module.link("../mutations", {
  CAMERA_BROADCAST_STOP(v) {
    CAMERA_BROADCAST_STOP = v;
  }
}, 11);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 12);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 13);
let useMeetingIsBreakout;
module.link("/imports/ui/components/app/service", {
  useMeetingIsBreakout(v) {
    useMeetingIsBreakout = v;
  }
}, 14);
let useSettings;
module.link("/imports/ui/services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 15);
let SETTINGS;
module.link("/imports/ui/services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 16);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 17);
let ConnectionStatus;
module.link("/imports/ui/core/graphql/singletons/connectionStatus", {
  default(v) {
    ConnectionStatus = v;
  }
}, 18);
let VIDEO_TYPES;
module.link("/imports/ui/components/video-provider/enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 19);
const FILTER_VIDEO_STATS = ['outbound-rtp', 'inbound-rtp'];
const useStatus = () => {
  const {
    isConnected,
    isConnecting
  } = useVideoState();
  if (isConnecting) return 'videoConnecting';
  if (isConnected) return 'connected';
  return 'disconnected';
};
const useDisableReason = () => {
  const videoLocked = useIsUserLocked();
  const hasCapReached = useHasCapReached();
  const hasVideoStream = useHasVideoStream();
  const connected = useReactiveVar(ConnectionStatus.getConnectedStatusVar());
  const locks = {
    videoLocked,
    camCapReached: hasCapReached && !hasVideoStream,
    disconnected: !connected
  };
  const locksKeys = Object.keys(locks);
  const disableReason = locksKeys.filter(i => locks[i]).shift();
  return disableReason;
};
const useIsUserLocked = () => {
  const disableCam = useDisableCam();
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    locked: u.locked,
    isModerator: u.isModerator
  }));
  return !!(currentUser !== null && currentUser !== void 0 && currentUser.locked) && !currentUser.isModerator && disableCam;
};
const useVideoStreamsCount = () => {
  const {
    streams
  } = useStreams();
  return streams.length;
};
const useLocalVideoStreamsCount = () => {
  const {
    streams
  } = useStreams();
  const localStreams = streams.filter(vs => videoService.isLocalStream(vs.stream));
  return localStreams.length;
};
const useInfo = () => {
  const {
    data
  } = useMeeting(m => {
    var _m$voiceSettings;
    return {
      voiceSettings: {
        // @ts-expect-error -> There seems to be a design issue on the projection portion.
        voiceConf: (_m$voiceSettings = m.voiceSettings) === null || _m$voiceSettings === void 0 ? void 0 : _m$voiceSettings.voiceConf
      }
    };
  });
  const voiceBridge = data !== null && data !== void 0 && data.voiceSettings ? data.voiceSettings.voiceConf : null;
  return {
    userId: Auth.userID,
    userName: Auth.fullname,
    meetingId: Auth.meetingID,
    sessionToken: Auth.sessionToken,
    voiceBridge
  };
};
const useHasCapReached = () => {
  const {
    data: meeting
  } = useMeeting(m => {
    var _m$usersPolicies;
    return {
      meetingCameraCap: m.meetingCameraCap,
      usersPolicies: {
        // @ts-expect-error -> There seems to be a design issue on the projection portion.
        userCameraCap: (_m$usersPolicies = m.usersPolicies) === null || _m$usersPolicies === void 0 ? void 0 : _m$usersPolicies.userCameraCap
      }
    };
  });
  const videoStreamsCount = useVideoStreamsCount();
  const localVideoStreamsCount = useLocalVideoStreamsCount();
  // If the meeting prop data is unreachable, force a safe return
  if ((meeting === null || meeting === void 0 ? void 0 : meeting.usersPolicies) === undefined || !(meeting !== null && meeting !== void 0 && meeting.meetingCameraCap) === undefined) return true;
  const {
    meetingCameraCap
  } = meeting;
  const {
    userCameraCap
  } = meeting.usersPolicies;
  // @ts-expect-error -> There seems to be a design issue on the projection portion.
  const meetingCap = meetingCameraCap !== 0 && videoStreamsCount >= meetingCameraCap;
  const userCap = userCameraCap !== 0 && localVideoStreamsCount >= userCameraCap;
  return meetingCap || userCap;
};
const useDisableCam = () => {
  const {
    data: meeting
  } = useMeeting(m => {
    var _m$lockSettings;
    return {
      lockSettings: {
        // @ts-expect-error -> There seems to be a design issue on the projection portion.
        disableCam: (_m$lockSettings = m.lockSettings) === null || _m$lockSettings === void 0 ? void 0 : _m$lockSettings.disableCam
      }
    };
  });
  return meeting !== null && meeting !== void 0 && meeting.lockSettings ? meeting === null || meeting === void 0 ? void 0 : meeting.lockSettings.disableCam : false;
};
const usePageSizeDictionary = () => {
  var _countData$user_aggre, _countData$user_aggre2;
  const {
    desktopPageSizes: DESKTOP_PAGE_SIZES,
    mobilePageSizes: MOBILE_PAGE_SIZES
  } = window.meetingClientSettings.public.kurento.pagination;
  const PAGINATION_THRESHOLDS_CONF = window.meetingClientSettings.public.kurento.paginationThresholds;
  const PAGINATION_THRESHOLDS_ENABLED = PAGINATION_THRESHOLDS_CONF.enabled;
  const PAGINATION_THRESHOLDS = PAGINATION_THRESHOLDS_CONF.thresholds.sort((t1, t2) => t1.users - t2.users);
  const {
    data: countData
  } = useDeduplicatedSubscription(USER_AGGREGATE_COUNT_SUBSCRIPTION);
  const userCount = (countData === null || countData === void 0 ? void 0 : (_countData$user_aggre = countData.user_aggregate) === null || _countData$user_aggre === void 0 ? void 0 : (_countData$user_aggre2 = _countData$user_aggre.aggregate) === null || _countData$user_aggre2 === void 0 ? void 0 : _countData$user_aggre2.count) || 0;
  // Dynamic page sizes are disabled. Fetch the stock page sizes.
  if (!PAGINATION_THRESHOLDS_ENABLED || PAGINATION_THRESHOLDS.length <= 0) {
    return !videoService.isMobile ? DESKTOP_PAGE_SIZES : MOBILE_PAGE_SIZES;
  }
  // Dynamic page sizes are enabled. Get the user count, isolate the
  // matching threshold entry, return the val.
  let targetThreshold;
  const processThreshold = function () {
    let threshold = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      desktopPageSizes: DESKTOP_PAGE_SIZES,
      mobilePageSizes: MOBILE_PAGE_SIZES
    };
    // We don't demand that all page sizes should be set in pagination profiles.
    // That saves us some space because don't necessarily need to scale mobile
    // endpoints.
    // If eg mobile isn't set, then return the default value.
    if (!videoService.isMobile) {
      return threshold.desktopPageSizes || DESKTOP_PAGE_SIZES;
    }
    return threshold.mobilePageSizes || MOBILE_PAGE_SIZES;
  };
  // Short-circuit: no threshold yet, return stock values (processThreshold has a default arg)
  if (userCount < PAGINATION_THRESHOLDS[0].users) return processThreshold();
  // Reverse search for the threshold where our participant count is directly equal or great
  // The PAGINATION_THRESHOLDS config is sorted when imported.
  for (let mapIndex = PAGINATION_THRESHOLDS.length - 1; mapIndex >= 0; mapIndex -= 1) {
    targetThreshold = PAGINATION_THRESHOLDS[mapIndex];
    if (targetThreshold.users <= userCount) {
      return processThreshold(targetThreshold);
    }
  }
  return undefined;
};
const useMyRole = () => {
  const {
    data
  } = useCurrentUser(u => ({
    role: u.role
  }));
  return data === null || data === void 0 ? void 0 : data.role;
};
const useMyPageSize = () => {
  var _size;
  const myRole = useMyRole();
  const pageSizes = usePageSizeDictionary();
  const ROLE_MODERATOR = videoService.getRoleModerator();
  const ROLE_VIEWER = videoService.getRoleViewer();
  let size;
  switch (myRole) {
    case ROLE_MODERATOR:
      size = pageSizes === null || pageSizes === void 0 ? void 0 : pageSizes.moderator;
      break;
    case ROLE_VIEWER:
    default:
      size = pageSizes === null || pageSizes === void 0 ? void 0 : pageSizes.viewer;
  }
  const actualSize = (_size = size) !== null && _size !== void 0 ? _size : 0;
  useEffect(() => {
    setVideoState({
      pageSize: actualSize
    });
  }, [actualSize]);
  return actualSize;
};
const useIsPaginationEnabled = () => {
  const myPageSize = useMyPageSize();
  const {
    paginationEnabled
  } = useSettings(SETTINGS.APPLICATION);
  return myPageSize > 0 && paginationEnabled;
};
const useStreams = () => {
  const videoStreams = useReactiveVar(streams);
  return {
    streams: videoStreams
  };
};
const useGridUsers = (exceptUserIds, visibleStreamCount) => {
  const gridSize = useGridSize();
  const isGridEnabled = useStorageKey('isGridEnabled');
  const {
    data: gridData,
    error: gridError
  } = useSubscription(GRID_USERS_SUBSCRIPTION, {
    variables: {
      exceptUserIds,
      limit: Math.max(gridSize - visibleStreamCount, 0)
    },
    skip: !isGridEnabled
  });
  if (gridError) {
    logger.error({
      logCode: 'grid_users_sub_error',
      extraInfo: {
        errorName: gridError.name,
        errorMessage: gridError.message
      }
    }, 'Grid users subscription failed.');
  }
  let gridUsers = [];
  if (gridData) {
    const newGridUsers = gridData.user.map(user => _objectSpread(_objectSpread({}, user), {}, {
      type: VIDEO_TYPES.GRID
    }));
    gridUsers = newGridUsers;
  }
  return gridUsers;
};
const useSharedDevices = () => {
  const {
    streams
  } = useStreams();
  const devices = streams.filter(s => videoService.isLocalStream(s.stream)).map(vs => vs.deviceId);
  return devices;
};
const useNumberOfPages = () => {
  const {
    numberOfPages
  } = useVideoState();
  return numberOfPages;
};
const useCurrentVideoPageIndex = () => {
  const {
    currentVideoPageIndex
  } = useVideoState();
  return currentVideoPageIndex;
};
const useGridSize = () => {
  let size;
  const myRole = useMyRole();
  const ROLE_MODERATOR = videoService.getRoleModerator();
  const ROLE_VIEWER = videoService.getRoleViewer();
  const {
    desktopGridSizes: DESKTOP_GRID_SIZES,
    mobileGridSizes: MOBILE_GRID_SIZES
  } = window.meetingClientSettings.public.kurento.pagination;
  const gridSizes = !videoService.isMobile ? DESKTOP_GRID_SIZES : MOBILE_GRID_SIZES;
  switch (myRole) {
    case ROLE_MODERATOR:
      size = gridSizes.moderator;
      break;
    case ROLE_VIEWER:
    default:
      size = gridSizes.viewer;
  }
  return size;
};
const useVideoStreams = () => {
  const {
    viewParticipantsWebcams
  } = useSettings(SETTINGS.DATA_SAVING);
  const {
    currentVideoPageIndex,
    numberOfPages
  } = useVideoState();
  const {
    streams: videoStreams
  } = useStreams();
  const connectingStream = useConnectingStream(videoStreams);
  const myPageSize = useMyPageSize();
  const isPaginationEnabled = useIsPaginationEnabled();
  let streams = [...videoStreams];
  let totalNumberOfOtherStreams;
  const {
    paginationSorting: PAGINATION_SORTING,
    defaultSorting: DEFAULT_SORTING
  } = window.meetingClientSettings.public.kurento.cameraSortingModes;
  if (connectingStream) streams.push(connectingStream);
  if (!viewParticipantsWebcams) {
    streams = streams.filter(vs => videoService.isLocalStream(vs.stream));
  }
  if (isPaginationEnabled) {
    const [filtered, others] = partition(streams, vs => videoService.isLocalStream(vs.stream) || vs.type === VIDEO_TYPES.STREAM && vs.user.pinned);
    const [pin, mine] = partition(filtered, vs => vs.type === VIDEO_TYPES.STREAM && vs.user.pinned);
    totalNumberOfOtherStreams = others.length;
    const chunkIndex = currentVideoPageIndex * myPageSize;
    const sortingMethod = numberOfPages > 1 ? PAGINATION_SORTING : DEFAULT_SORTING;
    const paginatedStreams = sortVideoStreams(others, sortingMethod).slice(chunkIndex, chunkIndex + myPageSize) || [];
    if (getSortingMethod(sortingMethod).localFirst) {
      streams = [...pin, ...mine, ...paginatedStreams];
    } else {
      streams = [...pin, ...paginatedStreams, ...mine];
    }
  } else {
    streams = sortVideoStreams(streams, DEFAULT_SORTING);
  }
  const gridUsers = useGridUsers(videoStreams.map(s => s.userId), streams.length);
  return {
    streams,
    gridUsers,
    totalNumberOfStreams: streams.length,
    totalNumberOfOtherStreams
  };
};
const useHasVideoStream = () => {
  const {
    streams
  } = useStreams();
  const connectingStream = useConnectingStream();
  return !!connectingStream || streams.some(s => videoService.isLocalStream(s.stream));
};
const useOwnVideoStreamsQuery = () => useLazyQuery(OWN_VIDEO_STREAMS_QUERY, {
  variables: {
    userId: Auth.userID,
    streamIdPrefix: "".concat(videoService.getPrefix(), "%")
  }
});
const useExitVideo = function () {
  let forceExit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  const [cameraBroadcastStop] = useMutation(CAMERA_BROADCAST_STOP);
  const [getOwnVideoStreams] = useOwnVideoStreamsQuery();
  const exitVideo = useCallback(async () => {
    const {
      isConnected
    } = getVideoState();
    if (isConnected || forceExit) {
      const sendUserUnshareWebcam = cameraId => {
        return cameraBroadcastStop({
          variables: {
            cameraId
          }
        });
      };
      return getOwnVideoStreams().then(async _ref => {
        let {
          data
        } = _ref;
        if (data) {
          const streams = data.user_camera || [];
          const results = streams.map(s => sendUserUnshareWebcam(s.streamId));
          return Promise.all(results).then(() => {
            videoService.exitedVideo();
            return true;
          }).catch(e => {
            logger.warn({
              logCode: 'exit_audio',
              extraInfo: e
            }, 'Exiting audio');
            return false;
          });
        }
        return true;
      });
    }
    return true;
  }, [cameraBroadcastStop]);
  return exitVideo;
};
const useViewersInWebcamCount = () => {
  var _data$user_camera_agg, _data$user_camera_agg2;
  const {
    data
  } = useDeduplicatedSubscription(VIEWERS_IN_WEBCAM_COUNT_SUBSCRIPTION);
  return (data === null || data === void 0 ? void 0 : (_data$user_camera_agg = data.user_camera_aggregate) === null || _data$user_camera_agg === void 0 ? void 0 : (_data$user_camera_agg2 = _data$user_camera_agg.aggregate) === null || _data$user_camera_agg2 === void 0 ? void 0 : _data$user_camera_agg2.count) || 0;
};
const useLockUser = () => {
  const exitVideo = useExitVideo();
  return useCallback(() => {
    const {
      isConnected
    } = getVideoState();
    if (isConnected) {
      exitVideo();
    }
  }, [exitVideo]);
};
const useStopVideo = () => {
  const [cameraBroadcastStop] = useMutation(CAMERA_BROADCAST_STOP);
  const [getOwnVideoStreams] = useOwnVideoStreamsQuery();
  return useCallback(async cameraId => {
    var _data$user_camera;
    const {
      data
    } = await getOwnVideoStreams();
    const streams = (_data$user_camera = data === null || data === void 0 ? void 0 : data.user_camera) !== null && _data$user_camera !== void 0 ? _data$user_camera : [];
    const connectingStream = getConnectingStream();
    const hasTargetStream = streams.some(s => s.streamId === cameraId);
    const hasOtherStream = streams.some(s => s.streamId !== cameraId);
    if (hasTargetStream) {
      cameraBroadcastStop({
        variables: {
          cameraId
        }
      });
    }
    if (!hasOtherStream && !connectingStream) {
      videoService.exitedVideo();
    } else {
      videoService.stopConnectingStream();
    }
  }, [cameraBroadcastStop]);
};
const useActivePeers = () => {
  const videoData = useVideoStreams();
  if (!videoData) return null;
  const {
    streams: activeVideoStreams
  } = videoData;
  if (!activeVideoStreams) return null;
  const activePeers = {};
  activeVideoStreams.forEach(stream => {
    if (videoService.webRtcPeersRef()[stream.stream]) {
      activePeers[stream.stream] = videoService.webRtcPeersRef()[stream.stream].peerConnection;
    }
  });
  return activePeers;
};
const useGetStats = () => {
  const peers = useActivePeers();
  return useCallback(async () => {
    if (!peers) return null;
    const stats = {};
    await Promise.all(Object.keys(peers).map(async peerId => {
      const peerStats = await peers[peerId].getStats();
      const videoStats = {};
      peerStats.forEach(stat => {
        if (FILTER_VIDEO_STATS.includes(stat.type)) {
          videoStats[stat.type] = stat;
        }
      });
      stats[peerId] = videoStats;
    }));
    return stats;
  }, [peers]);
};
const useShouldRenderPaginationToggle = () => {
  const myPageSize = useMyPageSize();
  const {
    paginationToggleEnabled: PAGINATION_TOGGLE_ENABLED
  } = window.meetingClientSettings.public.kurento.pagination;
  return PAGINATION_TOGGLE_ENABLED && myPageSize > 0;
};
const useIsVideoPinEnabledForCurrentUser = isModerator => {
  const isBreakout = useMeetingIsBreakout();
  const isPinEnabled = videoService.isPinEnabled();
  return !!(isModerator && isPinEnabled && !isBreakout);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"many-users-notify":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/many-users-notify/component.tsx                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 2);
let toast;
module.link("react-toastify", {
  toast(v) {
    toast = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const intlMessages = defineMessages({
  suggestLockTitle: {
    id: 'app.video.suggestWebcamLock',
    description: 'Label for notification title'
  },
  suggestLockReason: {
    id: 'app.video.suggestWebcamLockReason',
    description: 'Reason for activate the webcams\'s lock'
  },
  enable: {
    id: 'app.video.enable',
    description: 'Enable button label'
  },
  cancel: {
    id: 'app.video.cancel',
    description: 'Cancel button label'
  }
});
const REPEAT_INTERVAL = 120000;
class LockViewersNotifyComponent extends Component {
  constructor(props) {
    super(props);
    this.interval = void 0;
    this.interval = null;
    this.intervalCallback = this.intervalCallback.bind(this);
  }
  componentDidUpdate() {
    const {
      viewersInWebcam,
      lockSettingsDisableCam,
      limitOfViewersInWebcam,
      webcamOnlyForModerator,
      currentUserIsModerator,
      limitOfViewersInWebcamIsEnable
    } = this.props;
    const viwerersInWebcamGreaterThatLimit = viewersInWebcam >= limitOfViewersInWebcam && limitOfViewersInWebcamIsEnable;
    const webcamForViewersIsLocked = lockSettingsDisableCam || webcamOnlyForModerator;
    if (viwerersInWebcamGreaterThatLimit && !webcamForViewersIsLocked && currentUserIsModerator && !this.interval) {
      this.interval = setInterval(this.intervalCallback, REPEAT_INTERVAL);
      this.intervalCallback();
    }
    if (webcamForViewersIsLocked || !viwerersInWebcamGreaterThatLimit && this.interval) {
      if (this.interval) clearInterval(this.interval);
      this.interval = null;
    }
  }
  intervalCallback() {
    const {
      toggleWebcamsOnlyForModerator,
      intl
    } = this.props;
    const lockToastId = "suggestLock-".concat(new Date().getTime());
    notify( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.Info, null, intl.formatMessage(intlMessages.suggestLockTitle)), /*#__PURE__*/React.createElement(Styled.ButtonWrapper, null, /*#__PURE__*/React.createElement(Styled.ManyUsersButton, {
      label: intl.formatMessage(intlMessages.enable),
      "aria-label": intl.formatMessage(intlMessages.enable),
      onClick: toggleWebcamsOnlyForModerator
    }), "|", /*#__PURE__*/React.createElement(Styled.ManyUsersButton, {
      label: intl.formatMessage(intlMessages.cancel),
      "aria-label": intl.formatMessage(intlMessages.cancel),
      onClick: () => toast.dismiss(lockToastId)
    })), /*#__PURE__*/React.createElement(Styled.Info, null, intl.formatMessage(intlMessages.suggestLockReason))), 'info', 'rooms', {
      toastId: lockToastId
    });
  }
  render() {
    return null;
  }
}
module.exportDefault(injectIntl(LockViewersNotifyComponent));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/many-users-notify/container.tsx                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let ManyUsersComponent;
module.link("./component", {
  default(v) {
    ManyUsersComponent = v;
  }
}, 2);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 3);
let SET_WEBCAM_ONLY_FOR_MODERATOR;
module.link("/imports/ui/components/lock-viewers/mutations", {
  SET_WEBCAM_ONLY_FOR_MODERATOR(v) {
    SET_WEBCAM_ONLY_FOR_MODERATOR = v;
  }
}, 4);
let useViewersInWebcamCount;
module.link("../hooks", {
  useViewersInWebcamCount(v) {
    useViewersInWebcamCount = v;
  }
}, 5);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 6);
const ManyUsersContainer = () => {
  var _meetingData$usersPol, _meetingData$lockSett;
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    isModerator: user.isModerator
  }));
  const {
    data: meetingData
  } = useMeeting(m => ({
    usersPolicies: m.usersPolicies,
    lockSettings: m.lockSettings
  }));
  const [setWebcamOnlyForModerator] = useMutation(SET_WEBCAM_ONLY_FOR_MODERATOR);
  const toggleWebcamsOnlyForModerator = () => {
    setWebcamOnlyForModerator({
      variables: {
        webcamsOnlyForModerator: true
      }
    });
  };
  const viewersInWebcam = useViewersInWebcamCount();
  const currentUserIsModerator = !!(currentUserData !== null && currentUserData !== void 0 && currentUserData.isModerator);
  const webcamOnlyForModerator = !!(meetingData !== null && meetingData !== void 0 && (_meetingData$usersPol = meetingData.usersPolicies) !== null && _meetingData$usersPol !== void 0 && _meetingData$usersPol.webcamsOnlyForModerator);
  const lockSettingsDisableCam = !!(meetingData !== null && meetingData !== void 0 && (_meetingData$lockSett = meetingData.lockSettings) !== null && _meetingData$lockSett !== void 0 && _meetingData$lockSett.disableCam);
  return /*#__PURE__*/React.createElement(ManyUsersComponent, {
    toggleWebcamsOnlyForModerator: toggleWebcamsOnlyForModerator,
    currentUserIsModerator: currentUserIsModerator,
    viewersInWebcam: viewersInWebcam,
    limitOfViewersInWebcam: window.meetingClientSettings.public.app.viewersInWebcam,
    limitOfViewersInWebcamIsEnable: window.meetingClientSettings.public.app.enableLimitOfViewersInWebcam,
    lockSettingsDisableCam: lockSettingsDisableCam,
    webcamOnlyForModerator: webcamOnlyForModerator
  });
};
module.exportDefault(ManyUsersContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/many-users-notify/styles.ts                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 1);
let Styled;
module.link("/imports/ui/components/breakout-room/breakout-room/styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
const Info = styled.p(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin: 0;\n"])));
const ButtonWrapper = styled(Styled.BreakoutActions)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  background-color: inherit;\n\n  &:focus,&:hover {\n    background-color: inherit;\n  }\n"])));
// @ts-expect-error -> Untyped component.
const ManyUsersButton = styled(Button)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  flex: 0 1 48%;\n  color: ", ";\n  margin: 0;\n  font-weight: inherit;\n\n  background-color: inherit;\n\n  &:focus,&:hover {\n    background-color: inherit;\n  }\n"])), colorPrimary);
module.exportDefault({
  Info,
  ButtonWrapper,
  ManyUsersButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"video-button":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-button/component.tsx                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, memo, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  memo(v) {
    memo = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let ButtonEmoji;
module.link("/imports/ui/components/common/button/button-emoji/ButtonEmoji", {
  default(v) {
    ButtonEmoji = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 3);
let debounce;
module.link("/imports/utils/debounce", {
  debounce(v) {
    debounce = v;
  }
}, 4);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 5);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 6);
let VideoPreviewContainer;
module.link("/imports/ui/components/video-preview/container", {
  default(v) {
    VideoPreviewContainer = v;
  }
}, 7);
let CameraSettingsDropdownItemType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/camera-settings-dropdown-item/enums", {
  CameraSettingsDropdownItemType(v) {
    CameraSettingsDropdownItemType = v;
  }
}, 8);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 9);
let VideoService;
module.link("../service", {
  default(v) {
    VideoService = v;
  }
}, 10);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 11);
const intlMessages = defineMessages({
  videoSettings: {
    id: 'app.video.videoSettings',
    description: 'Open video settings'
  },
  visualEffects: {
    id: 'app.video.visualEffects',
    description: 'Visual effects label'
  },
  joinVideo: {
    id: 'app.video.joinVideo',
    description: 'Join video button label'
  },
  leaveVideo: {
    id: 'app.video.leaveVideo',
    description: 'Leave video button label'
  },
  advancedVideo: {
    id: 'app.video.advancedVideo',
    description: 'Open advanced video label'
  },
  videoLocked: {
    id: 'app.video.videoLocked',
    description: 'video disabled label'
  },
  videoConnecting: {
    id: 'app.video.connecting',
    description: 'video connecting label'
  },
  camCapReached: {
    id: 'app.video.meetingCamCapReached',
    description: 'meeting camera cap label'
  },
  disconnected: {
    id: 'app.video.clientDisconnected',
    description: 'Client disconnected label'
  }
});
const JOIN_VIDEO_DELAY_MILLISECONDS = 500;
const JoinVideoButton = _ref => {
  let {
    intl,
    hasVideoStream,
    status,
    disableReason,
    updateSettings,
    cameraSettingsDropdownItems,
    setLocalSettings,
    exitVideo: exit,
    stopVideo
  } = _ref;
  const {
    isMobile
  } = deviceInfo;
  const isMobileSharingCamera = hasVideoStream && isMobile;
  const isDesktopSharingCamera = hasVideoStream && !isMobile;
  const ENABLE_WEBCAM_SELECTOR_BUTTON = window.meetingClientSettings.public.app.enableWebcamSelectorButton;
  const shouldEnableWebcamSelectorButton = ENABLE_WEBCAM_SELECTOR_BUTTON && isDesktopSharingCamera;
  const exitVideo = () => isDesktopSharingCamera && (!VideoService.isMultipleCamerasEnabled() || shouldEnableWebcamSelectorButton);
  const [propsToPassModal, setPropsToPassModal] = useState({});
  const [forceOpen, setForceOpen] = useState(false);
  const [isVideoPreviewModalOpen, setVideoPreviewModalIsOpen] = useState(false);
  const [wasSelfViewDisabled, setWasSelfViewDisabled] = useState(false);
  useEffect(() => {
    const Settings = getSettingsSingletonInstance();
    const isSelfViewDisabled = Settings.application.selfViewDisable;
    if (isVideoPreviewModalOpen && isSelfViewDisabled) {
      setWasSelfViewDisabled(true);
      const obj = {
        application: _objectSpread(_objectSpread({}, Settings.application), {}, {
          selfViewDisable: false
        })
      };
      updateSettings(obj, null, setLocalSettings);
    }
  }, [isVideoPreviewModalOpen]);
  const handleOnClick = debounce(() => {
    switch (status) {
      case 'videoConnecting':
        stopVideo();
        break;
      case 'connected':
      default:
        if (exitVideo()) {
          exit();
        } else {
          setForceOpen(isMobileSharingCamera);
          setVideoPreviewModalIsOpen(true);
        }
    }
  }, JOIN_VIDEO_DELAY_MILLISECONDS);
  const handleOpenAdvancedOptions = callback => {
    if (callback) callback();
    setForceOpen(isDesktopSharingCamera);
    setVideoPreviewModalIsOpen(true);
  };
  const getMessageFromStatus = () => {
    let statusMessage = status;
    if (status !== 'videoConnecting') {
      statusMessage = exitVideo() ? 'leaveVideo' : 'joinVideo';
    }
    return statusMessage;
  };
  const label = disableReason ? intl.formatMessage(intlMessages[disableReason]) : intl.formatMessage(intlMessages[getMessageFromStatus()]);
  const renderUserActions = () => {
    const actions = [];
    if (shouldEnableWebcamSelectorButton) {
      actions.push({
        key: 'advancedVideo',
        label: intl.formatMessage(intlMessages.advancedVideo),
        onClick: () => handleOpenAdvancedOptions(),
        dataTest: 'advancedVideoSettingsButton'
      });
    }
    if (actions.length === 0) return null;
    const customStyles = {
      top: '-3.6rem'
    };
    cameraSettingsDropdownItems.forEach(plugin => {
      switch (plugin.type) {
        case CameraSettingsDropdownItemType.OPTION:
          actions.push({
            key: plugin.id,
            // @ts-expect-error -> Plugin-related.
            label: plugin.label,
            // @ts-expect-error -> Plugin-related.
            onClick: plugin.onClick,
            // @ts-expect-error -> Plugin-related.
            icon: plugin.icon
          });
          break;
        case CameraSettingsDropdownItemType.SEPARATOR:
          actions.push({
            key: plugin.id,
            isSeparator: true
          });
          break;
        default:
          break;
      }
    });
    return /*#__PURE__*/React.createElement(BBBMenu, {
      customStyles: !isMobile ? customStyles : null,
      trigger: /*#__PURE__*/React.createElement(ButtonEmoji, {
        emoji: "device_list_selector",
        "data-test": "videoDropdownMenu",
        hideLabel: true,
        label: intl.formatMessage(intlMessages.videoSettings),
        rotate: true,
        tabIndex: 0
      }),
      actions: actions,
      opts: {
        id: 'video-dropdown-menu',
        keepMounted: true,
        transitionDuration: 0,
        elevation: 3,
        getcontentanchorel: null,
        fullwidth: 'true',
        anchorOrigin: {
          vertical: 'top',
          horizontal: 'center'
        },
        transformOrigin: {
          vertical: 'top',
          horizontal: 'center'
        }
      }
    });
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.OffsetBottom, null, /*#__PURE__*/React.createElement(Button, {
    label: label,
    "data-test": hasVideoStream ? 'leaveVideo' : 'joinVideo',
    onClick: handleOnClick,
    hideLabel: true,
    color: hasVideoStream ? 'primary' : 'default',
    icon: hasVideoStream ? 'video' : 'video_off',
    ghost: !hasVideoStream,
    size: "lg",
    circle: true,
    disabled: !!disableReason
  }), renderUserActions()), isVideoPreviewModalOpen ? /*#__PURE__*/React.createElement(VideoPreviewContainer, {
    callbackToClose: () => {
      if (wasSelfViewDisabled) {
        setTimeout(() => {
          const obj = {
            application: _objectSpread(_objectSpread({}, Settings.application), {}, {
              selfViewDisable: true
            })
          };
          updateSettings(obj, null, setLocalSettings);
          setWasSelfViewDisabled(false);
        }, 100);
      }
      setPropsToPassModal({});
      setForceOpen(false);
    },
    forceOpen,
    priority: 'low',
    setIsOpen: setVideoPreviewModalIsOpen,
    isOpen: isVideoPreviewModalOpen,
    isVisualEffects: propsToPassModal.isVisualEffects
  }) : null);
};
module.exportDefault(injectIntl( /*#__PURE__*/memo(JoinVideoButton)));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-button/container.tsx                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let updateSettings;
module.link("/imports/ui/components/settings/service", {
  updateSettings(v) {
    updateSettings = v;
  }
}, 1);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 2);
let useUserChangedLocalSettings;
module.link("/imports/ui/services/settings/hooks/useUserChangedLocalSettings", {
  default(v) {
    useUserChangedLocalSettings = v;
  }
}, 3);
let useDisableReason, useExitVideo, useHasVideoStream, useStatus, useStopVideo;
module.link("/imports/ui/components/video-provider/hooks", {
  useDisableReason(v) {
    useDisableReason = v;
  },
  useExitVideo(v) {
    useExitVideo = v;
  },
  useHasVideoStream(v) {
    useHasVideoStream = v;
  },
  useStatus(v) {
    useStatus = v;
  },
  useStopVideo(v) {
    useStopVideo = v;
  }
}, 4);
let JoinVideoButton;
module.link("./component", {
  default(v) {
    JoinVideoButton = v;
  }
}, 5);
const JoinVideoOptionsContainer = () => {
  const setLocalSettings = useUserChangedLocalSettings();
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let cameraSettingsDropdownItems = [];
  if (pluginsExtensibleAreasAggregatedState.cameraSettingsDropdownItems) {
    cameraSettingsDropdownItems = [...pluginsExtensibleAreasAggregatedState.cameraSettingsDropdownItems];
  }
  const hasVideoStream = useHasVideoStream();
  const disableReason = useDisableReason();
  const status = useStatus();
  const exitVideo = useExitVideo();
  const stopVideo = useStopVideo();
  return /*#__PURE__*/React.createElement(JoinVideoButton, {
    cameraSettingsDropdownItems: cameraSettingsDropdownItems,
    hasVideoStream: hasVideoStream,
    updateSettings: updateSettings,
    disableReason: disableReason,
    status: status,
    setLocalSettings: setLocalSettings,
    exitVideo: exitVideo,
    stopVideo: stopVideo
  });
};
module.exportDefault(JoinVideoOptionsContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/video-button/styles.ts                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const OffsetBottom = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n"])));
module.exportDefault({
  OffsetBottom
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"adapter.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/adapter.tsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let throttle;
module.link("radash", {
  throttle(v) {
    throttle = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
let VIDEO_STREAMS_SUBSCRIPTION;
module.link("./queries", {
  VIDEO_STREAMS_SUBSCRIPTION(v) {
    VIDEO_STREAMS_SUBSCRIPTION = v;
  }
}, 3);
let setStreams;
module.link("./state", {
  setStreams(v) {
    setStreams = v;
  }
}, 4);
let createUseSubscription;
module.link("/imports/ui/core/hooks/createUseSubscription", {
  default(v) {
    createUseSubscription = v;
  }
}, 5);
let VIDEO_TYPES;
module.link("./enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 6);
const throttledSetStreams = throttle({
  interval: 500
}, setStreams);
const useVideoStreamsSubscription = createUseSubscription(VIDEO_STREAMS_SUBSCRIPTION, {}, true);
const VideoStreamAdapter = _ref => {
  let {
    onReady,
    children
  } = _ref;
  const ready = useRef(false);
  const {
    data,
    loading,
    errors
  } = useVideoStreamsSubscription();
  useEffect(() => {
    if (loading) return;
    if (errors) {
      errors.forEach(error => {
        logger.error({
          logCode: 'video_stream_sub_error',
          extraInfo: {
            errorName: error.name,
            errorMessage: error.message
          }
        }, 'Video streams subscription failed.');
      });
    }
    if (!data) {
      throttledSetStreams([]);
      return;
    }
    const streams = data.map(_ref2 => {
      var _voice$floor, _voice$lastFloorTime;
      let {
        streamId,
        user,
        voice
      } = _ref2;
      return {
        stream: streamId,
        deviceId: streamId.split('_')[3],
        name: user.name,
        nameSortable: user.nameSortable,
        userId: user.userId,
        user,
        floor: (_voice$floor = voice === null || voice === void 0 ? void 0 : voice.floor) !== null && _voice$floor !== void 0 ? _voice$floor : false,
        lastFloorTime: (_voice$lastFloorTime = voice === null || voice === void 0 ? void 0 : voice.lastFloorTime) !== null && _voice$lastFloorTime !== void 0 ? _voice$lastFloorTime : '0',
        voice,
        type: VIDEO_TYPES.STREAM
      };
    });
    throttledSetStreams(streams);
  }, [data]);
  useEffect(() => {
    if (!ready.current) {
      ready.current = true;
      onReady('VideoStreamAdapter');
    }
  }, [loading]);
  return children;
};
module.exportDefault(VideoStreamAdapter);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/component.tsx                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let ReconnectingWebSocket;
module.link("reconnecting-websocket", {
  default(v) {
    ReconnectingWebSocket = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let debounce;
module.link("/imports/utils/debounce", {
  debounce(v) {
    debounce = v;
  }
}, 3);
let VideoService;
module.link("./service", {
  default(v) {
    VideoService = v;
  }
}, 4);
let VideoListContainer;
module.link("./video-list/container", {
  default(v) {
    VideoListContainer = v;
  }
}, 5);
let fetchWebRTCMappedStunTurnServers, getMappedFallbackStun;
module.link("/imports/utils/fetchStunTurnServers", {
  fetchWebRTCMappedStunTurnServers(v) {
    fetchWebRTCMappedStunTurnServers = v;
  },
  getMappedFallbackStun(v) {
    getMappedFallbackStun = v;
  }
}, 6);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 7);
let notifyStreamStateChange;
module.link("/imports/ui/services/bbb-webrtc-sfu/stream-state-service", {
  notifyStreamStateChange(v) {
    notifyStreamStateChange = v;
  }
}, 8);
let VideoPreviewService;
module.link("/imports/ui/components/video-preview/service", {
  default(v) {
    VideoPreviewService = v;
  }
}, 9);
let MediaStreamUtils;
module.link("/imports/utils/media-stream-utils", {
  default(v) {
    MediaStreamUtils = v;
  }
}, 10);
let BBBVideoStream;
module.link("/imports/ui/services/webrtc-base/bbb-video-stream", {
  default(v) {
    BBBVideoStream = v;
  }
}, 11);
let shouldForceRelay;
module.link("/imports/ui/services/bbb-webrtc-sfu/utils", {
  shouldForceRelay(v) {
    shouldForceRelay = v;
  }
}, 12);
let WebRtcPeer;
module.link("/imports/ui/services/webrtc-base/peer", {
  default(v) {
    WebRtcPeer = v;
  }
}, 13);
let VIDEO_TYPES;
module.link("./enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 14);
const intlClientErrors = defineMessages({
  permissionError: {
    id: 'app.video.permissionError',
    description: 'Webcam permission error'
  },
  iceConnectionStateError: {
    id: 'app.video.iceConnectionStateError',
    description: 'Ice connection state failed'
  },
  mediaFlowTimeout: {
    id: 'app.video.mediaFlowTimeout1020',
    description: 'Media flow timeout'
  },
  mediaTimedOutError: {
    id: 'app.video.mediaTimedOutError',
    description: 'Media was ejected by the server due to lack of valid media'
  },
  virtualBgGenericError: {
    id: 'app.video.virtualBackground.genericError',
    description: 'Failed to apply camera effect'
  },
  inactiveError: {
    id: 'app.video.inactiveError',
    description: 'Camera stopped unexpectedly'
  }
});
const intlSFUErrors = defineMessages({
  2000: {
    id: 'app.sfu.mediaServerConnectionError2000',
    description: 'SFU connection to the media server'
  },
  2001: {
    id: 'app.sfu.mediaServerOffline2001',
    description: 'SFU is offline'
  },
  2002: {
    id: 'app.sfu.mediaServerNoResources2002',
    description: 'Media server lacks disk, CPU or FDs'
  },
  2003: {
    id: 'app.sfu.mediaServerRequestTimeout2003',
    description: 'Media requests timeout due to lack of resources'
  },
  2021: {
    id: 'app.sfu.serverIceGatheringFailed2021',
    description: 'Server cannot enact ICE gathering'
  },
  2022: {
    id: 'app.sfu.serverIceStateFailed2022',
    description: 'Server endpoint transitioned to a FAILED ICE state'
  },
  2200: {
    id: 'app.sfu.mediaGenericError2200',
    description: 'SFU component generated a generic error'
  },
  2202: {
    id: 'app.sfu.invalidSdp2202',
    description: 'Client provided an invalid SDP'
  },
  2203: {
    id: 'app.sfu.noAvailableCodec2203',
    description: 'Server has no available codec for the client'
  }
});
class VideoProvider extends Component {
  onBeforeUnload() {
    const {
      exitVideo
    } = this.props;
    exitVideo();
  }
  static shouldAttachVideoStream(peer, videoElement) {
    var _videoElement$srcObje;
    // Conditions to safely attach a stream to a video element in all browsers:
    // 1 - Peer exists, video element exists
    // 2 - Target stream differs from videoElement's (diff)
    // 3a - If the stream is a remote one, the safest (*ahem* Safari) moment to
    //      do so is waiting for the server to confirm that media has flown out of it
    //      towards te remote end (peer.started)
    // 3b - If the stream is a local one (webcam sharer) and is started
    // 4 - If the stream is local one, check if there area video tracks there are
    //     video tracks: attach it
    if (peer == null || videoElement == null) return false;
    const stream = peer.isPublisher ? peer.getLocalStream() : peer.getRemoteStream();
    const diff = stream && (stream.id !== ((_videoElement$srcObje = videoElement.srcObject) === null || _videoElement$srcObje === void 0 ? void 0 : _videoElement$srcObje.id) || !videoElement.paused);
    if (peer.started && diff) return true;
    return peer.isPublisher && peer.getLocalStream() && peer.getLocalStream().getVideoTracks().length > 0 && diff;
  }
  constructor(props) {
    super(props);
    this.info = void 0;
    this.mounted = false;
    this.webRtcPeers = void 0;
    this.debouncedConnectStreams = void 0;
    this.ws = null;
    this.wsQueues = void 0;
    this.outboundIceQueues = void 0;
    this.restartTimeout = void 0;
    this.restartTimer = void 0;
    this.videoTags = void 0;
    const {
      info
    } = this.props;
    // socketOpen state is there to force update when the signaling socket opens or closes
    this.state = {
      socketOpen: false
    };
    this.mounted = false;
    this.info = info;
    // Signaling message queue arrays indexed by stream (== cameraId)
    this.wsQueues = {};
    this.restartTimeout = {};
    this.restartTimer = {};
    this.webRtcPeers = {};
    this.outboundIceQueues = {};
    this.videoTags = {};
    this.createVideoTag = this.createVideoTag.bind(this);
    this.destroyVideoTag = this.destroyVideoTag.bind(this);
    this.onWsOpen = this.onWsOpen.bind(this);
    this.onWsClose = this.onWsClose.bind(this);
    this.onWsMessage = this.onWsMessage.bind(this);
    this.updateStreams = this.updateStreams.bind(this);
    this.connectStreams = this.connectStreams.bind(this);
    this.debouncedConnectStreams = debounce(this.connectStreams, VideoService.getPageChangeDebounceTime(), {
      leading: false,
      trailing: true
    });
    this.startVirtualBackgroundByDrop = this.startVirtualBackgroundByDrop.bind(this);
    this.onBeforeUnload = this.onBeforeUnload.bind(this);
  }
  componentDidMount() {
    this.mounted = true;
    VideoService.updatePeerDictionaryReference(this.webRtcPeers);
    this.ws = this.openWs();
    window.addEventListener('beforeunload', this.onBeforeUnload);
  }
  componentDidUpdate(prevProps) {
    const {
      isUserLocked,
      streams,
      currentVideoPageIndex,
      isClientConnected,
      lockUser
    } = this.props;
    const {
      socketOpen
    } = this.state;
    // Only debounce when page changes to avoid unnecessary debouncing
    const shouldDebounce = VideoService.isPaginationEnabled() && prevProps.currentVideoPageIndex !== currentVideoPageIndex;
    if (isClientConnected && socketOpen) this.updateStreams(streams, shouldDebounce);
    if (!prevProps.isUserLocked && isUserLocked) {
      lockUser();
    }
    // Signaling socket expired its retries and meteor is connected - create
    // a new signaling socket instance from scratch
    if (!socketOpen && isClientConnected && this.ws == null) {
      this.ws = this.openWs();
    }
  }
  componentWillUnmount() {
    const {
      exitVideo
    } = this.props;
    this.mounted = false;
    VideoService.updatePeerDictionaryReference({});
    if (this.ws) {
      this.ws.onmessage = null;
      this.ws.onopen = null;
      this.ws.onclose = null;
    }
    window.removeEventListener('beforeunload', this.onBeforeUnload);
    exitVideo();
    Object.keys(this.webRtcPeers).forEach(stream => {
      this.stopWebRTCPeer(stream, false);
    });
    this.terminateWs();
  }
  openWs() {
    const {
      connectionTimeout: WS_CONN_TIMEOUT = 4000,
      maxRetries: WS_MAX_RETRIES = 5,
      debug: WS_DEBUG
    } = window.meetingClientSettings.public.kurento.cameraWsOptions;
    const ws = new ReconnectingWebSocket(VideoService.getAuthenticatedURL(), [], {
      connectionTimeout: WS_CONN_TIMEOUT,
      debug: WS_DEBUG,
      maxRetries: WS_MAX_RETRIES,
      maxEnqueuedMessages: 0
    });
    ws.onopen = this.onWsOpen;
    ws.onclose = this.onWsClose;
    ws.onmessage = this.onWsMessage;
    return ws;
  }
  terminateWs() {
    if (this.ws) {
      this.clearWSHeartbeat();
      this.ws.close();
      this.ws = null;
    }
  }
  updateLastMsgTime() {
    if (this.ws) {
      this.ws.isAlive = true;
      this.ws.lastMsgTime = Date.now();
    }
  }
  getTimeSinceLastMsg() {
    return Date.now() - this.ws.lastMsgTime;
  }
  setupWSHeartbeat() {
    const {
      heartbeat: WS_HEARTBEAT_OPTS = {
        interval: 15000,
        delay: 3000,
        reconnectOnFailure: true
      }
    } = window.meetingClientSettings.public.kurento.cameraWsOptions;
    if (WS_HEARTBEAT_OPTS.interval === 0 || this.ws == null || this.ws.wsHeartbeat) return;
    this.ws.isAlive = true;
    this.ws.wsHeartbeat = setInterval(() => {
      if (this.ws.isAlive === false) {
        logger.warn({
          logCode: 'video_provider_ws_heartbeat_failed'
        }, 'Video provider WS heartbeat failed.');
        if (WS_HEARTBEAT_OPTS.reconnectOnFailure) this.ws.reconnect();
        return;
      }
      if (this.getTimeSinceLastMsg() < WS_HEARTBEAT_OPTS.interval - WS_HEARTBEAT_OPTS.delay) {
        return;
      }
      this.ws.isAlive = false;
      this.ping();
    }, WS_HEARTBEAT_OPTS.interval);
    this.ping();
  }
  clearWSHeartbeat() {
    var _this$ws;
    if ((_this$ws = this.ws) !== null && _this$ws !== void 0 && _this$ws.wsHeartbeat) {
      clearInterval(this.ws.wsHeartbeat);
      this.ws.wsHeartbeat = null;
    }
  }
  onWsMessage(message) {
    this.updateLastMsgTime();
    const parsedMessage = JSON.parse(message.data);
    if (parsedMessage.id === 'pong') return;
    switch (parsedMessage.id) {
      case 'startResponse':
        this.startResponse(parsedMessage);
        break;
      case 'playStart':
        this.handlePlayStart(parsedMessage);
        break;
      case 'playStop':
        this.handlePlayStop(parsedMessage);
        break;
      case 'iceCandidate':
        this.handleIceCandidate(parsedMessage);
        break;
      case 'pong':
        break;
      case 'error':
      default:
        this.handleSFUError(parsedMessage);
        break;
    }
  }
  onWsClose() {
    const {
      maxRetries: WS_MAX_RETRIES = 5
    } = window.meetingClientSettings.public.kurento.cameraWsOptions;
    const {
      exitVideo
    } = this.props;
    logger.info({
      logCode: 'video_provider_onwsclose'
    }, 'Multiple video provider websocket connection closed.');
    this.clearWSHeartbeat();
    exitVideo();
    // Media is currently tied to signaling state  - so if signaling shuts down,
    // media will shut down server-side. This cleans up our local state faster
    // and notify the state change as failed so the UI rolls back to the placeholder
    // avatar UI in the camera container
    Object.keys(this.webRtcPeers).forEach(stream => {
      if (this.stopWebRTCPeer(stream, false)) {
        notifyStreamStateChange(stream, 'failed');
      }
    });
    this.setState({
      socketOpen: false
    });
    if (this.ws && this.ws.retryCount >= WS_MAX_RETRIES) {
      this.terminateWs();
    }
  }
  onWsOpen() {
    logger.info({
      logCode: 'video_provider_onwsopen'
    }, 'Multiple video provider websocket connection opened.');
    this.updateLastMsgTime();
    this.setupWSHeartbeat();
    this.setState({
      socketOpen: true
    });
    // Resend queued messages that happened when socket was not connected
    Object.entries(this.wsQueues).forEach(_ref => {
      let [stream, queue] = _ref;
      if (this.webRtcPeers[stream] && queue !== null) {
        // Peer - send enqueued
        while (queue.length > 0) {
          this.sendMessage(queue.pop());
        }
      } else {
        // No peer - delete queue
        this.wsQueues[stream] = null;
      }
    });
  }
  findAllPrivilegedStreams() {
    const {
      streams
    } = this.props;
    // Privileged streams are: floor holders, pinned users
    return streams.filter(stream => stream.type === VIDEO_TYPES.STREAM && (stream.floor || stream.pinned));
  }
  updateQualityThresholds(numberOfPublishers) {
    const {
      privilegedStreams: CAMERA_QUALITY_THR_PRIVILEGED = true
    } = window.meetingClientSettings.public.kurento.cameraQualityThresholds;
    const {
      applyCameraProfile
    } = this.props;
    const {
      threshold,
      profile
    } = VideoService.getThreshold(numberOfPublishers);
    if (profile) {
      const privilegedStreams = this.findAllPrivilegedStreams();
      Object.values(this.webRtcPeers).filter(peer => peer.isPublisher).forEach(peer => {
        // Conditions which make camera revert their original profile
        // 1) Threshold 0 means original profile/inactive constraint
        // 2) Privileged streams
        const exempt = threshold === 0 || CAMERA_QUALITY_THR_PRIVILEGED && privilegedStreams.some(vs => vs.stream === peer.stream);
        const profileToApply = exempt ? peer.originalProfileId : profile;
        applyCameraProfile(peer, profileToApply);
      });
    }
  }
  getStreamsToConnectAndDisconnect(streams) {
    const streamsCameraIds = streams.filter(s => (s === null || s === void 0 ? void 0 : s.type) !== VIDEO_TYPES.GRID).map(s => s.stream);
    const streamsConnected = Object.keys(this.webRtcPeers);
    const streamsToConnect = streamsCameraIds.filter(stream => {
      return !streamsConnected.includes(stream);
    });
    const streamsToDisconnect = streamsConnected.filter(stream => {
      return !streamsCameraIds.includes(stream);
    });
    return [streamsToConnect, streamsToDisconnect];
  }
  connectStreams(streamsToConnect) {
    streamsToConnect.forEach(stream => {
      const isLocal = VideoService.isLocalStream(stream);
      this.createWebRTCPeer(stream, isLocal);
    });
  }
  disconnectStreams(streamsToDisconnect) {
    streamsToDisconnect.forEach(stream => this.stopWebRTCPeer(stream, false));
  }
  updateStreams(streams) {
    let shouldDebounce = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const [streamsToConnect, streamsToDisconnect] = this.getStreamsToConnectAndDisconnect(streams);
    if (shouldDebounce) {
      this.debouncedConnectStreams(streamsToConnect);
    } else {
      this.connectStreams(streamsToConnect);
    }
    this.disconnectStreams(streamsToDisconnect);
    const {
      enabled: CAMERA_QUALITY_THRESHOLDS_ENABLED = true
    } = window.meetingClientSettings.public.kurento.cameraQualityThresholds;
    if (CAMERA_QUALITY_THRESHOLDS_ENABLED) {
      const {
        totalNumberOfStreams
      } = this.props;
      this.updateQualityThresholds(totalNumberOfStreams);
    }
  }
  ping() {
    const message = {
      id: 'ping'
    };
    this.sendMessage(message);
  }
  sendMessage(message) {
    const {
      ws
    } = this;
    if (this.connectedToMediaServer()) {
      const jsonMessage = JSON.stringify(message);
      try {
        ws === null || ws === void 0 ? void 0 : ws.send(jsonMessage);
      } catch (error) {
        logger.error({
          logCode: 'video_provider_ws_send_error',
          extraInfo: {
            errorMessage: error.message || 'Unknown',
            errorCode: error.code
          }
        }, 'Camera request failed to be sent to SFU');
      }
    } else if (message.id !== 'stop') {
      // No need to queue video stop messages
      const {
        cameraId
      } = message;
      if (cameraId) {
        var _this$wsQueues$camera;
        if (this.wsQueues[cameraId] == null) this.wsQueues[cameraId] = [];
        (_this$wsQueues$camera = this.wsQueues[cameraId]) === null || _this$wsQueues$camera === void 0 ? void 0 : _this$wsQueues$camera.push(message);
      }
    }
  }
  connectedToMediaServer() {
    return this.ws && this.ws.readyState === ReconnectingWebSocket.OPEN;
  }
  processOutboundIceQueue(peer, role, stream) {
    const queue = this.outboundIceQueues[stream];
    while (queue && queue.length) {
      const candidate = queue.shift();
      this.sendIceCandidateToSFU(peer, role, candidate, stream);
    }
  }
  sendLocalAnswer(peer, stream, answer) {
    const message = {
      id: 'subscriberAnswer',
      type: 'video',
      role: VideoService.getRole(peer.isPublisher),
      cameraId: stream,
      answer
    };
    this.sendMessage(message);
  }
  startResponse(message) {
    const {
      cameraId: stream,
      role
    } = message;
    const peer = this.webRtcPeers[stream];
    logger.debug({
      logCode: 'video_provider_start_response_success',
      extraInfo: {
        cameraId: stream,
        role
      }
    }, "Camera start request accepted by SFU. Role: ".concat(role));
    if (peer) {
      const processorFunc = peer.isPublisher ? peer.processAnswer.bind(peer) : peer.processOffer.bind(peer);
      processorFunc(message.sdpAnswer).then(answer => {
        if (answer) this.sendLocalAnswer(peer, stream, answer);
        peer.didSDPAnswered = true;
        this.processOutboundIceQueue(peer, role, stream);
        VideoService.processInboundIceQueue(peer, stream);
      }).catch(error => {
        logger.error({
          logCode: 'video_provider_peerconnection_process_error',
          extraInfo: {
            cameraId: stream,
            role,
            errorMessage: error.message,
            errorCode: error.code
          }
        }, 'Camera answer processing failed');
      });
    } else {
      logger.warn({
        logCode: 'video_provider_startresponse_no_peer',
        extraInfo: {
          cameraId: stream,
          role
        }
      }, 'No peer on SFU camera start response handler');
    }
  }
  handleIceCandidate(message) {
    const {
      cameraId: stream,
      candidate
    } = message;
    const peer = this.webRtcPeers[stream];
    if (peer) {
      if (peer.didSDPAnswered) {
        VideoService.addCandidateToPeer(peer, candidate, stream);
      } else {
        // ICE candidates are queued until a SDP answer has been processed.
        // This was done due to a long term iOS/Safari quirk where it'd
        // fail if candidates were added before the offer/answer cycle was completed.
        // Dunno if that still happens, but it works even if it slows the ICE checks
        // a bit  - prlanzarin july 2019
        if (peer.inboundIceQueue == null) {
          peer.inboundIceQueue = [];
        }
        peer.inboundIceQueue.push(candidate);
      }
    } else {
      logger.warn({
        logCode: 'video_provider_addicecandidate_no_peer',
        extraInfo: {
          cameraId: stream
        }
      }, 'Trailing camera ICE candidate, discarded');
    }
  }
  clearRestartTimers(stream) {
    if (this.restartTimeout[stream]) {
      clearTimeout(this.restartTimeout[stream]);
      delete this.restartTimeout[stream];
    }
    if (this.restartTimer[stream]) {
      delete this.restartTimer[stream];
    }
  }
  stopWebRTCPeer(stream) {
    let restarting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const isLocal = VideoService.isLocalStream(stream);
    const {
      stopVideo
    } = this.props;
    // in this case, 'closed' state is not caused by an error;
    // we stop listening to prevent this from being treated as an error
    const peer = this.webRtcPeers[stream];
    if (peer && peer.peerConnection) {
      const conn = peer.peerConnection;
      conn.oniceconnectionstatechange = null;
    }
    if (isLocal) {
      stopVideo(stream);
    }
    const role = VideoService.getRole(isLocal);
    logger.info({
      logCode: 'video_provider_stopping_webcam_sfu',
      extraInfo: {
        role,
        cameraId: stream,
        restarting
      }
    }, "Camera feed stop requested. Role ".concat(role, ", restarting ").concat(restarting));
    this.sendMessage({
      id: 'stop',
      type: 'video',
      cameraId: stream,
      role
    });
    // Clear the shared camera media flow timeout and current reconnect period
    // when destroying it if the peer won't restart
    if (!restarting) {
      this.clearRestartTimers(stream);
    }
    return this.destroyWebRTCPeer(stream);
  }
  destroyWebRTCPeer(stream) {
    let stopped = false;
    const peer = this.webRtcPeers[stream];
    const isLocal = VideoService.isLocalStream(stream);
    const role = VideoService.getRole(isLocal);
    if (peer) {
      if (peer && peer.bbbVideoStream) {
        if (typeof peer.inactivationHandler === 'function') {
          peer.bbbVideoStream.removeListener('inactive', peer.inactivationHandler);
        }
        peer.bbbVideoStream.stop();
      }
      if (typeof peer.dispose === 'function') {
        peer.dispose();
      }
      delete this.webRtcPeers[stream];
      stopped = true;
    } else {
      logger.warn({
        logCode: 'video_provider_destroywebrtcpeer_no_peer',
        extraInfo: {
          cameraId: stream,
          role
        }
      }, 'Trailing camera destroy request.');
    }
    delete this.outboundIceQueues[stream];
    delete this.wsQueues[stream];
    return stopped;
  }
  createPublisher(stream, peerOptions) {
    return new Promise((resolve, reject) => {
      try {
        const {
          id: profileId
        } = VideoService.getCameraProfile();
        let bbbVideoStream = VideoService.getPreloadedStream();
        if (bbbVideoStream) {
          peerOptions.videoStream = bbbVideoStream.mediaStream;
        }
        const peer = new WebRtcPeer('sendonly', peerOptions);
        peer.bbbVideoStream = bbbVideoStream;
        this.webRtcPeers[stream] = peer;
        peer.stream = stream;
        peer.started = false;
        peer.didSDPAnswered = false;
        peer.inboundIceQueue = [];
        peer.isPublisher = true;
        peer.originalProfileId = profileId;
        peer.currentProfileId = profileId;
        peer.start();
        peer.generateOffer().then(offer => {
          // Store the media stream if necessary. The scenario here is one where
          // there is no preloaded stream stored.
          if (peer.bbbVideoStream == null) {
            bbbVideoStream = new BBBVideoStream(peer.getLocalStream());
            VideoPreviewService.storeStream(MediaStreamUtils.extractDeviceIdFromStream(bbbVideoStream.mediaStream, 'video'), bbbVideoStream);
          }
          peer.bbbVideoStream = bbbVideoStream;
          bbbVideoStream.on('streamSwapped', _ref2 => {
            let {
              newStream
            } = _ref2;
            if (newStream && newStream instanceof MediaStream) {
              this.replacePCVideoTracks(stream, newStream);
            }
          });
          peer.inactivationHandler = () => this.handleLocalStreamInactive(stream);
          bbbVideoStream.once('inactive', peer.inactivationHandler);
          resolve(offer);
        }).catch(reject);
      } catch (error) {
        reject(error);
      }
    });
  }
  createSubscriber(stream, peerOptions) {
    return new Promise((resolve, reject) => {
      try {
        const peer = new WebRtcPeer('recvonly', peerOptions);
        this.webRtcPeers[stream] = peer;
        peer.stream = stream;
        peer.started = false;
        peer.didSDPAnswered = false;
        peer.inboundIceQueue = [];
        peer.isPublisher = false;
        peer.start();
        resolve(null);
      } catch (error) {
        reject(error);
      }
    });
  }
  async createWebRTCPeer(stream, isLocal) {
    const {
      myRole
    } = this.props;
    let iceServers = [];
    const role = VideoService.getRole(isLocal);
    const peerBuilderFunc = isLocal ? this.createPublisher.bind(this) : this.createSubscriber.bind(this);
    // Check if the peer is already being processed
    if (this.webRtcPeers[stream]) {
      return;
    }
    const {
      webcam: NETWORK_PRIORITY
    } = window.meetingClientSettings.public.media.networkPriorities || {};
    const TRACE_LOGS = window.meetingClientSettings.public.kurento.traceLogs;
    const GATHERING_TIMEOUT = window.meetingClientSettings.public.kurento.gatheringTimeout;
    this.webRtcPeers[stream] = {};
    this.outboundIceQueues[stream] = [];
    const {
      constraints,
      bitrate
    } = VideoService.getCameraProfile();
    const peerOptions = {
      mediaConstraints: {
        audio: false,
        video: constraints
      },
      onicecandidate: this.getOnIceCandidateCallback(stream, isLocal),
      configuration: {},
      trace: TRACE_LOGS,
      networkPriorities: NETWORK_PRIORITY ? {
        video: NETWORK_PRIORITY
      } : undefined,
      gatheringTimeout: GATHERING_TIMEOUT
    };
    try {
      iceServers = await fetchWebRTCMappedStunTurnServers(this.info.sessionToken);
    } catch (error) {
      logger.error({
        logCode: 'video_provider_fetchstunturninfo_error',
        extraInfo: {
          cameraId: stream,
          role,
          errorCode: error.code,
          errorMessage: error.message
        }
      }, 'video-provider failed to fetch STUN/TURN info, using default');
      // Use fallback STUN server
      iceServers = getMappedFallbackStun();
    } finally {
      // we need to set iceTransportPolicy after `fetchWebRTCMappedStunTurnServers`
      // because `shouldForceRelay` uses the information from the stun API
      peerOptions.configuration.iceTransportPolicy = shouldForceRelay() ? 'relay' : undefined;
      if (iceServers.length > 0) {
        peerOptions.configuration.iceServers = iceServers;
      }
      peerBuilderFunc(stream, peerOptions).then(offer => {
        if (!this.mounted) {
          return this.stopWebRTCPeer(stream, false);
        }
        const peer = this.webRtcPeers[stream];
        if (peer && peer.peerConnection) {
          const conn = peer.peerConnection;
          conn.onconnectionstatechange = () => {
            this.handleIceConnectionStateChange(stream, isLocal);
          };
        }
        const message = {
          id: 'start',
          type: 'video',
          cameraId: stream,
          role,
          sdpOffer: offer,
          bitrate,
          record: VideoService.getRecord(myRole),
          mediaServer: VideoService.getMediaServerAdapter()
        };
        logger.info({
          logCode: 'video_provider_sfu_request_start_camera',
          extraInfo: {
            cameraId: stream,
            role
          }
        }, "Camera offer generated. Role: ".concat(role));
        this.setReconnectionTimeout(stream, isLocal, false);
        this.sendMessage(message);
        return null;
      }).catch(error => {
        return this.onWebRTCError(error, stream, isLocal);
      });
    }
  }
  getWebRTCStartTimeout(stream, isLocal) {
    const {
      intl
    } = this.props;
    const {
      maxTimeout: MAX_CAMERA_SHARE_FAILED_WAIT_TIME = 60000
    } = window.meetingClientSettings.public.kurento.cameraTimeouts || {};
    return () => {
      const role = VideoService.getRole(isLocal);
      if (!isLocal) {
        // Peer that timed out is a subscriber/viewer
        // Subscribers try to reconnect according to their timers if media could
        // not reach the server. That's why we pass the restarting flag as true
        // to the stop procedure as to not destroy the timers
        // Create new reconnect interval time
        const oldReconnectTimer = this.restartTimer[stream];
        const newReconnectTimer = Math.min(2 * oldReconnectTimer, MAX_CAMERA_SHARE_FAILED_WAIT_TIME);
        this.restartTimer[stream] = newReconnectTimer;
        // Clear the current reconnect interval so it can be re-set in createWebRTCPeer
        if (this.restartTimeout[stream]) {
          delete this.restartTimeout[stream];
        }
        logger.error({
          logCode: 'video_provider_camera_view_timeout',
          extraInfo: {
            cameraId: stream,
            role,
            oldReconnectTimer,
            newReconnectTimer
          }
        }, 'Camera VIEWER failed. Reconnecting.');
        this.reconnect(stream, isLocal);
      } else {
        // Peer that timed out is a sharer/publisher, clean it up, stop.
        logger.error({
          logCode: 'video_provider_camera_share_timeout',
          extraInfo: {
            cameraId: stream,
            role
          }
        }, 'Camera SHARER failed.');
        VideoService.notify(intl.formatMessage(intlClientErrors.mediaFlowTimeout));
        this.stopWebRTCPeer(stream, false);
      }
    };
  }
  onWebRTCError(error, stream, isLocal) {
    const {
      intl,
      streams
    } = this.props;
    const {
      name: errorName,
      message: errorMessage
    } = error;
    const errorLocale = intlClientErrors[errorName] || intlClientErrors[errorMessage] || intlSFUErrors[error];
    logger.error({
      logCode: 'video_provider_webrtc_peer_error',
      extraInfo: {
        cameraId: stream,
        role: VideoService.getRole(isLocal),
        errorName: error.name,
        errorMessage: error.message
      }
    }, 'Camera peer failed');
    // Only display WebRTC negotiation error toasts to sharers. The viewer streams
    // will try to autoreconnect silently, but the error will log nonetheless
    if (isLocal) {
      this.stopWebRTCPeer(stream, false);
      if (errorLocale) VideoService.notify(intl.formatMessage(errorLocale));
    } else {
      // If it's a viewer, set the reconnection timeout. There's a good chance
      // no local candidate was generated and it wasn't set.
      const peer = this.webRtcPeers[stream];
      const stillExists = streams.some(item => item.type === VIDEO_TYPES.STREAM && item.stream === stream);
      if (stillExists) {
        const isEstablishedConnection = peer && peer.started;
        this.setReconnectionTimeout(stream, isLocal, isEstablishedConnection);
      }
      // second argument means it will only try to reconnect if
      // it's a viewer instance (see stopWebRTCPeer restarting argument)
      this.stopWebRTCPeer(stream, stillExists);
    }
  }
  reconnect(stream, isLocal) {
    this.stopWebRTCPeer(stream, true);
    this.createWebRTCPeer(stream, isLocal);
  }
  setReconnectionTimeout(stream, isLocal, isEstablishedConnection) {
    const peer = this.webRtcPeers[stream];
    const shouldSetReconnectionTimeout = !this.restartTimeout[stream] && !isEstablishedConnection;
    const {
      baseTimeout: CAMERA_SHARE_FAILED_WAIT_TIME = 15000
    } = window.meetingClientSettings.public.kurento.cameraTimeouts || {};
    // This is an ongoing reconnection which succeeded in the first place but
    // then failed mid call. Try to reconnect it right away. Clear the restart
    // timers since we don't need them in this case.
    if (isEstablishedConnection) {
      this.clearRestartTimers(stream);
      return this.reconnect(stream, isLocal);
    }
    // This is a reconnection timer for a peer that hasn't succeeded in the first
    // place. Set reconnection timeouts with random intervals between them to try
    // and reconnect without flooding the server
    if (shouldSetReconnectionTimeout) {
      const newReconnectTimer = this.restartTimer[stream] || CAMERA_SHARE_FAILED_WAIT_TIME;
      this.restartTimer[stream] = newReconnectTimer;
      this.restartTimeout[stream] = setTimeout(this.getWebRTCStartTimeout(stream, isLocal), this.restartTimer[stream]);
    }
    return null;
  }
  getOnIceCandidateCallback(stream, isLocal) {
    const SIGNAL_CANDIDATES = window.meetingClientSettings.public.kurento.signalCandidates;
    if (SIGNAL_CANDIDATES) {
      return candidate => {
        const peer = this.webRtcPeers[stream];
        const role = VideoService.getRole(isLocal);
        if (peer && !peer.didSDPAnswered) {
          this.outboundIceQueues[stream].push(candidate);
          return;
        }
        this.sendIceCandidateToSFU(peer, role, candidate, stream);
      };
    }
    return null;
  }
  sendIceCandidateToSFU(peer, role, candidate, stream) {
    const message = {
      type: 'video',
      role,
      id: 'onIceCandidate',
      candidate,
      cameraId: stream
    };
    this.sendMessage(message);
  }
  handleLocalStreamInactive(stream) {
    const peer = this.webRtcPeers[stream];
    const isLocal = VideoService.isLocalStream(stream);
    const role = VideoService.getRole(isLocal);
    // Peer == null: this is a trailing event.
    // !isLocal: someone is misusing this handler - local streams only.
    if (peer == null || !isLocal) return;
    logger.error({
      logCode: 'video_provider_local_stream_inactive',
      extraInfo: {
        cameraId: stream,
        role
      }
    }, 'Local camera stream stopped unexpectedly');
    const error = new Error('inactiveError');
    this.onWebRTCError(error, stream, isLocal);
  }
  handleIceConnectionStateChange(stream, isLocal) {
    const peer = this.webRtcPeers[stream];
    const role = VideoService.getRole(isLocal);
    if (peer && peer.peerConnection) {
      const pc = peer.peerConnection;
      const {
        connectionState
      } = pc;
      notifyStreamStateChange(stream, connectionState);
      if (connectionState === 'failed' || connectionState === 'closed') {
        const error = new Error('iceConnectionStateError');
        // prevent the same error from being detected multiple times
        pc.onconnectionstatechange = null;
        logger.error({
          logCode: 'video_provider_ice_connection_failed_state',
          extraInfo: {
            cameraId: stream,
            connectionState,
            role
          }
        }, "Camera ICE connection state changed: ".concat(connectionState, ". Role: ").concat(role, "."));
        this.onWebRTCError(error, stream, isLocal);
      }
    } else {
      logger.error({
        logCode: 'video_provider_ice_connection_nopeer',
        extraInfo: {
          cameraId: stream,
          role
        }
      }, "No peer at ICE connection state handler. Camera: ".concat(stream, ". Role: ").concat(role));
    }
  }
  static attach(peer, videoElement) {
    if (peer && videoElement) {
      const stream = peer.isPublisher ? peer.getLocalStream() : peer.getRemoteStream();
      videoElement.pause();
      videoElement.srcObject = stream;
      videoElement.load();
    }
  }
  getVideoElement(streamId) {
    return this.videoTags[streamId];
  }
  attachVideoStream(stream) {
    const videoElement = this.getVideoElement(stream);
    const isLocal = VideoService.isLocalStream(stream);
    const peer = this.webRtcPeers[stream];
    if (VideoProvider.shouldAttachVideoStream(peer, videoElement)) {
      const pc = peer.peerConnection;
      // Notify current stream state again on attachment since the
      // video-list-item component may not have been mounted before the stream
      // reached the connected state.
      // This is necessary to ensure that the video element is properly
      // hidden/shown when the stream is attached.
      notifyStreamStateChange(stream, pc.connectionState);
      VideoProvider.attach(peer, videoElement);
    }
  }
  startVirtualBackgroundByDrop(stream, type, name, data) {
    return new Promise((resolve, reject) => {
      const peer = this.webRtcPeers[stream];
      const {
        bbbVideoStream
      } = peer;
      const video = this.getVideoElement(stream);
      if (peer && video && video.srcObject) {
        bbbVideoStream.startVirtualBackground(type, name, {
          file: data
        }).then(resolve).catch(reject);
      }
    }).catch(error => {
      VideoProvider.handleVirtualBgErrorByDropping(error, type, name);
    });
  }
  static handleVirtualBgErrorByDropping(error, type, name) {
    logger.error({
      logCode: 'video_provider_virtualbg_error',
      extraInfo: {
        errorName: error.name,
        errorMessage: error.message,
        virtualBgType: type,
        virtualBgName: name
      }
    }, "Failed to start virtual background by dropping image: ".concat(error.message));
  }
  createVideoTag(stream, video) {
    const peer = this.webRtcPeers[stream];
    this.videoTags[stream] = video;
    if (peer && peer.stream === stream) {
      this.attachVideoStream(stream);
    }
  }
  destroyVideoTag(stream) {
    const videoElement = this.videoTags[stream];
    if (videoElement == null) return;
    if (typeof videoElement.pause === 'function') {
      videoElement.pause();
      videoElement.srcObject = null;
    }
    delete this.videoTags[stream];
  }
  handlePlayStop(message) {
    const {
      intl
    } = this.props;
    const {
      cameraId: stream,
      role
    } = message;
    logger.info({
      logCode: 'video_provider_handle_play_stop',
      extraInfo: {
        cameraId: stream,
        role
      }
    }, "Received request from SFU to stop camera. Role: ".concat(role));
    VideoService.notify(intl.formatMessage(intlClientErrors.mediaTimedOutError));
    this.stopWebRTCPeer(stream, false);
  }
  handlePlayStart(message) {
    const {
      cameraId: stream,
      role
    } = message;
    const peer = this.webRtcPeers[stream];
    const {
      playStart
    } = this.props;
    if (peer) {
      logger.info({
        logCode: 'video_provider_handle_play_start_flowing',
        extraInfo: {
          cameraId: stream,
          role
        }
      }, "Camera media is flowing (server). Role: ".concat(role));
      peer.started = true;
      // Clear camera shared timeout when camera successfully starts
      this.clearRestartTimers(stream);
      this.attachVideoStream(stream);
      playStart(stream);
    } else {
      logger.warn({
        logCode: 'video_provider_playstart_no_peer',
        extraInfo: {
          cameraId: stream,
          role
        }
      }, 'Trailing camera playStart response.');
    }
  }
  handleSFUError(message) {
    const {
      intl,
      streams,
      stopVideo
    } = this.props;
    const {
      code,
      reason,
      streamId
    } = message;
    const isLocal = VideoService.isLocalStream(streamId);
    const role = VideoService.getRole(isLocal);
    logger.error({
      logCode: 'video_provider_handle_sfu_error',
      extraInfo: {
        errorCode: code,
        errorReason: reason,
        cameraId: streamId,
        role
      }
    }, "SFU returned an error. Code: ".concat(code, ", reason: ").concat(reason));
    if (isLocal) {
      // The publisher instance received an error from the server. There's no reconnect,
      // stop it.
      VideoService.notify(intl.formatMessage(intlSFUErrors[code] || intlSFUErrors[2200]));
      stopVideo(streamId);
    } else {
      const peer = this.webRtcPeers[streamId];
      const stillExists = streams.some(item => item.type === VIDEO_TYPES.STREAM && streamId === item.stream);
      if (stillExists) {
        const isEstablishedConnection = peer && peer.started;
        this.setReconnectionTimeout(streamId, isLocal, isEstablishedConnection);
      }
      this.stopWebRTCPeer(streamId, stillExists);
    }
  }
  replacePCVideoTracks(streamId, mediaStream) {
    const peer = this.webRtcPeers[streamId];
    const videoElement = this.getVideoElement(streamId);
    if (peer == null || mediaStream == null || videoElement == null) return;
    const pc = peer.peerConnection;
    const newTracks = mediaStream.getVideoTracks();
    if (pc) {
      const trackReplacers = pc.getSenders().map(async (sender, index) => {
        if (sender.track == null || sender.track.kind !== 'video') return false;
        const newTrack = newTracks[index];
        if (newTrack == null) return false;
        try {
          await sender.replaceTrack(newTrack);
          return true;
        } catch (error) {
          logger.warn({
            logCode: 'video_provider_replacepc_error',
            extraInfo: {
              errorMessage: error.message,
              cameraId: streamId
            }
          }, "Failed to replace peer connection tracks: ".concat(error.message));
          return false;
        }
      });
      Promise.all(trackReplacers).then(() => {
        VideoProvider.attach(peer, videoElement);
      });
    }
  }
  render() {
    const {
      swapLayout,
      currentVideoPageIndex,
      streams,
      cameraDock,
      focusedId,
      handleVideoFocus,
      isGridEnabled
    } = this.props;
    return /*#__PURE__*/React.createElement(VideoListContainer, {
      streams,
      swapLayout,
      currentVideoPageIndex,
      cameraDock,
      focusedId,
      handleVideoFocus,
      isGridEnabled,
      onVideoItemMount: this.createVideoTag,
      onVideoItemUnmount: this.destroyVideoTag,
      onVirtualBgDrop: this.startVirtualBackgroundByDrop
    });
  }
}
module.exportDefault(injectIntl(VideoProvider));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/container.tsx                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let useMutation, useReactiveVar;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 2);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 3);
let useCurrentVideoPageIndex, useExitVideo, useInfo, useIsPaginationEnabled, useIsUserLocked, useLockUser, useMyPageSize, useMyRole, useStopVideo, useVideoStreams;
module.link("./hooks", {
  useCurrentVideoPageIndex(v) {
    useCurrentVideoPageIndex = v;
  },
  useExitVideo(v) {
    useExitVideo = v;
  },
  useInfo(v) {
    useInfo = v;
  },
  useIsPaginationEnabled(v) {
    useIsPaginationEnabled = v;
  },
  useIsUserLocked(v) {
    useIsUserLocked = v;
  },
  useLockUser(v) {
    useLockUser = v;
  },
  useMyPageSize(v) {
    useMyPageSize = v;
  },
  useMyRole(v) {
    useMyRole = v;
  },
  useStopVideo(v) {
    useStopVideo = v;
  },
  useVideoStreams(v) {
    useVideoStreams = v;
  }
}, 4);
let CAMERA_BROADCAST_START;
module.link("./mutations", {
  CAMERA_BROADCAST_START(v) {
    CAMERA_BROADCAST_START = v;
  }
}, 5);
let VideoProvider;
module.link("./component", {
  default(v) {
    VideoProvider = v;
  }
}, 6);
let VideoService;
module.link("./service", {
  default(v) {
    VideoService = v;
  }
}, 7);
let debounce;
module.link("/imports/utils/debounce", {
  debounce(v) {
    debounce = v;
  }
}, 8);
let useSettings;
module.link("/imports/ui/services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 9);
let SETTINGS;
module.link("/imports/ui/services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 10);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 11);
let ConnectionStatus;
module.link("/imports/ui/core/graphql/singletons/connectionStatus", {
  default(v) {
    ConnectionStatus = v;
  }
}, 12);
let setVideoState, useVideoState;
module.link("./state", {
  setVideoState(v) {
    setVideoState = v;
  },
  useVideoState(v) {
    useVideoState = v;
  }
}, 13);
let VIDEO_TYPES;
module.link("./enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 14);
const VideoProviderContainer = props => {
  var _currentUser$userId, _currentMeeting$users;
  const {
    cameraDock,
    focusedId,
    handleVideoFocus,
    swapLayout
  } = props;
  const [cameraBroadcastStart] = useMutation(CAMERA_BROADCAST_START);
  const sendUserShareWebcam = cameraId => {
    return cameraBroadcastStart({
      variables: {
        cameraId
      }
    });
  };
  const playStart = cameraId => {
    if (VideoService.isLocalStream(cameraId)) {
      sendUserShareWebcam(cameraId).then(() => {
        VideoService.joinedVideo();
      });
    }
  };
  const {
    debounceTime: CAMERA_QUALITY_THR_DEBOUNCE = 2500
  } = window.meetingClientSettings.public.kurento.cameraQualityThresholds;
  const applyCameraProfile = debounce(VideoService.applyCameraProfile, CAMERA_QUALITY_THR_DEBOUNCE, {
    leading: false,
    trailing: true
  });
  const {
    data: currentMeeting
  } = useMeeting(m => ({
    usersPolicies: m.usersPolicies
  }));
  const {
    data: currentUser
  } = useCurrentUser(user => ({
    locked: user.locked,
    userId: user.userId
  }));
  const currentUserId = (_currentUser$userId = currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId) !== null && _currentUser$userId !== void 0 ? _currentUser$userId : '';
  // @ts-ignore Untyped object
  const {
    paginationEnabled
  } = useSettings(SETTINGS.APPLICATION);
  // @ts-ignore Untyped object
  const {
    viewParticipantsWebcams
  } = useSettings(SETTINGS.DATA_SAVING);
  const isClientConnected = useReactiveVar(ConnectionStatus.getConnectedStatusVar());
  const {
    streams,
    gridUsers,
    totalNumberOfStreams,
    totalNumberOfOtherStreams
  } = useVideoStreams();
  let usersVideo = streams;
  if (gridUsers.length > 0) {
    usersVideo = usersVideo.concat(gridUsers);
  }
  if (currentMeeting !== null && currentMeeting !== void 0 && (_currentMeeting$users = currentMeeting.usersPolicies) !== null && _currentMeeting$users !== void 0 && _currentMeeting$users.webcamsOnlyForModerator && currentUser !== null && currentUser !== void 0 && currentUser.locked) {
    usersVideo = usersVideo.filter(uv => uv.type === VIDEO_TYPES.STREAM && uv.user.isModerator || uv.type === VIDEO_TYPES.GRID && uv.isModerator || uv.userId === currentUserId);
  }
  const isUserLocked = useIsUserLocked();
  const currentVideoPageIndex = useCurrentVideoPageIndex();
  const exitVideo = useExitVideo();
  const lockUser = useLockUser();
  const stopVideo = useStopVideo();
  const info = useInfo();
  const myRole = useMyRole();
  const myPageSize = useMyPageSize();
  const {
    numberOfPages
  } = useVideoState();
  const isPaginationEnabled = useIsPaginationEnabled();
  const isGridEnabled = useStorageKey('isGridEnabled');
  useEffect(() => {
    if (isPaginationEnabled) {
      const total = totalNumberOfOtherStreams !== null && totalNumberOfOtherStreams !== void 0 ? totalNumberOfOtherStreams : 0;
      const nOfPages = Math.ceil(total / myPageSize);
      if (nOfPages !== numberOfPages) {
        setVideoState({
          numberOfPages: nOfPages
        });
        if (nOfPages === 0) {
          setVideoState({
            currentVideoPageIndex: 0
          });
        } else if (currentVideoPageIndex + 1 > nOfPages) {
          VideoService.getPreviousVideoPage();
        }
      }
    } else {
      setVideoState({
        numberOfPages: 0,
        currentVideoPageIndex: 0
      });
    }
  }, [myPageSize, numberOfPages, totalNumberOfOtherStreams, isPaginationEnabled]);
  if (!usersVideo.length && !isGridEnabled) return null;
  return /*#__PURE__*/React.createElement(VideoProvider, {
    cameraDock: cameraDock,
    focusedId: focusedId,
    handleVideoFocus: handleVideoFocus,
    isGridEnabled: isGridEnabled,
    isClientConnected: isClientConnected,
    swapLayout: swapLayout,
    currentUserId: currentUserId,
    paginationEnabled: paginationEnabled,
    viewParticipantsWebcams: viewParticipantsWebcams,
    totalNumberOfStreams: totalNumberOfStreams,
    isUserLocked: isUserLocked,
    currentVideoPageIndex: currentVideoPageIndex,
    streams: usersVideo,
    info: info,
    playStart: playStart,
    exitVideo: exitVideo,
    lockUser: lockUser,
    stopVideo: stopVideo,
    applyCameraProfile: applyCameraProfile,
    myRole: myRole
  });
};
module.exportDefault(VideoProviderContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"enums.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/enums.ts                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  VIDEO_TYPES: () => VIDEO_TYPES
});
const VIDEO_TYPES = Object.freeze({
  CONNECTING: 'connecting',
  STREAM: 'stream',
  GRID: 'grid'
});
module.exportDefault({
  VIDEO_TYPES
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/mutations.ts                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  CAMERA_BROADCAST_START: () => CAMERA_BROADCAST_START,
  CAMERA_BROADCAST_STOP: () => CAMERA_BROADCAST_STOP
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CAMERA_BROADCAST_START = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation CameraBroadcastStart($cameraId: String!) {\n    cameraBroadcastStart(\n      stream: $cameraId\n    )\n  }\n"])));
const CAMERA_BROADCAST_STOP = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation CameraBroadcastStop($cameraId: String!) {\n    cameraBroadcastStop(\n      stream: $cameraId\n    )\n  }\n"])));
module.exportDefault({
  CAMERA_BROADCAST_START,
  CAMERA_BROADCAST_STOP
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/queries.ts                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  VIDEO_STREAMS_SUBSCRIPTION: () => VIDEO_STREAMS_SUBSCRIPTION,
  OWN_VIDEO_STREAMS_QUERY: () => OWN_VIDEO_STREAMS_QUERY,
  VIEWERS_IN_WEBCAM_COUNT_SUBSCRIPTION: () => VIEWERS_IN_WEBCAM_COUNT_SUBSCRIPTION,
  GRID_USERS_SUBSCRIPTION: () => GRID_USERS_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const VIDEO_STREAMS_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription VideoStreams {\n    user_camera {\n      streamId\n      user {\n        name\n        userId\n        nameSortable\n        pinned\n        away\n        disconnected\n        role\n        avatar\n        color\n        presenter\n        clientType\n        raiseHand\n        isModerator\n        reactionEmoji\n      }\n      voice {\n        floor\n        lastFloorTime\n        joined\n        listenOnly\n        userId\n      }\n    }\n  }\n"])));
const OWN_VIDEO_STREAMS_QUERY = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  query OwnVideoStreams($userId: String!, $streamIdPrefix: String!) {\n    user_camera(\n      where: {\n        userId: { _eq: $userId },\n        streamId: { _like: $streamIdPrefix }\n      },\n    ) {\n      streamId\n    }\n  }\n"])));
const VIEWERS_IN_WEBCAM_COUNT_SUBSCRIPTION = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  subscription ViewerVideoStreams {\n    user_camera_aggregate(where: {\n      user: { role: { _eq: \"VIEWER\" }, presenter: { _eq: false } }\n    }) {\n      aggregate {\n        count\n      }\n    }\n  }\n"])));
const GRID_USERS_SUBSCRIPTION = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  subscription GridUsers($exceptUserIds: [String]!, $limit: Int!) {\n    user(\n      where: {\n        userId: {\n          _nin: $exceptUserIds,\n        },\n      },\n      limit: $limit,\n      order_by: {\n        nameSortable: asc,\n        userId: asc,\n      },\n    ) {\n      name\n      userId\n      nameSortable\n      pinned\n      away\n      disconnected\n      role\n      avatar\n      color\n      presenter\n      clientType\n      raiseHand\n      isModerator\n      reactionEmoji\n      voice {\n        joined\n        listenOnly\n        userId\n      }\n    }\n  }\n"])));
module.exportDefault({
  OWN_VIDEO_STREAMS_QUERY,
  VIDEO_STREAMS_SUBSCRIPTION,
  VIEWERS_IN_WEBCAM_COUNT_SUBSCRIPTION,
  GRID_USERS_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/service.ts                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 0);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 1);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 2);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 3);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 4);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 5);
let VideoPreviewService;
module.link("/imports/ui/components/video-preview/service", {
  default(v) {
    VideoPreviewService = v;
  }
}, 6);
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 7);
let getStorageSingletonInstance;
module.link("/imports/ui/services/storage", {
  getStorageSingletonInstance(v) {
    getStorageSingletonInstance = v;
  }
}, 8);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 9);
let getFromMeetingSettings;
module.link("/imports/ui/services/meeting-settings", {
  default(v) {
    getFromMeetingSettings = v;
  }
}, 10);
let setVideoState, setConnectingStream, getVideoState;
module.link("./state", {
  setVideoState(v) {
    setVideoState = v;
  },
  setConnectingStream(v) {
    setConnectingStream = v;
  },
  getVideoState(v) {
    getVideoState = v;
  }
}, 11);
let MediaStreamUtils;
module.link("/imports/utils/media-stream-utils", {
  default(v) {
    MediaStreamUtils = v;
  }
}, 12);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 13);
let VIDEO_TYPES;
module.link("./enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 14);
const TOKEN = '_';
class VideoService {
  constructor() {
    this.isMobile = void 0;
    this.webRtcPeersRef = void 0;
    this.userParameterProfile = void 0;
    this.isSafari = void 0;
    this.numberOfDevices = void 0;
    this.record = void 0;
    this.hackRecordViewer = void 0;
    this.deviceId = null;
    this.clientSessionUUID = void 0;
    this.userParameterProfile = null;
    this.isMobile = deviceInfo.isMobile;
    this.isSafari = browserInfo.isSafari;
    this.numberOfDevices = 0;
    this.record = null;
    this.hackRecordViewer = null;
    this.clientSessionUUID = sessionStorage.getItem('clientSessionUUID') || '0';
    if (navigator.mediaDevices) {
      this.updateNumberOfDevices = this.updateNumberOfDevices.bind(this);
      if (!this.isSafari) {
        navigator.mediaDevices.ondevicechange = () => this.updateNumberOfDevices();
      }
      this.updateNumberOfDevices();
    }
    this.webRtcPeersRef = {};
  }
  static fetchNumberOfDevices(devices) {
    const deviceIds = [];
    devices.forEach(d => {
      const validDeviceId = d.deviceId !== '' && !deviceIds.includes(d.deviceId);
      if (d.kind === 'videoinput' && validDeviceId) {
        deviceIds.push(d.deviceId);
      }
    });
    return deviceIds.length;
  }
  updateNumberOfDevices() {
    let devices = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    if (devices) {
      this.numberOfDevices = VideoService.fetchNumberOfDevices(devices);
    } else {
      navigator.mediaDevices.enumerateDevices().then(devices => {
        this.numberOfDevices = VideoService.fetchNumberOfDevices(devices);
      });
    }
  }
  joinVideo(deviceId, isUserLocked) {
    this.deviceId = deviceId;
    Storage.setItem('isFirstJoin', false);
    if (!isUserLocked) {
      const streamName = this.buildStreamName(deviceId);
      const stream = {
        stream: streamName,
        userId: Auth.userID,
        name: Auth.fullname,
        nameSortable: Auth.fullname,
        type: VIDEO_TYPES.CONNECTING
      };
      setConnectingStream(stream);
      setVideoState({
        isConnecting: true
      });
    }
  }
  static joinedVideo() {
    setVideoState({
      isConnected: true,
      isConnecting: false
    });
  }
  storeDeviceIds(streams) {
    const deviceIds = [];
    streams.filter(s => this.isLocalStream(s.stream)).forEach(s => {
      deviceIds.push(s.deviceId);
    });
    Session.setItem('deviceIds', deviceIds.join());
  }
  exitedVideo() {
    this.stopConnectingStream();
    setVideoState({
      isConnected: false,
      isConnecting: false
    });
  }
  static getAuthenticatedURL() {
    const SFU_URL = window.meetingClientSettings.public.kurento.wsUrl;
    return Auth.authenticateURL(SFU_URL);
  }
  static getCameraProfiles() {
    return window.meetingClientSettings.public.kurento.cameraProfiles;
  }
  static isPaginationEnabled() {
    const Settings = getSettingsSingletonInstance();
    return Settings.application.paginationEnabled;
  }
  static setCurrentVideoPageIndex(newVideoPageIndex) {
    const {
      currentVideoPageIndex
    } = getVideoState();
    if (currentVideoPageIndex !== newVideoPageIndex) {
      setVideoState({
        currentVideoPageIndex: newVideoPageIndex
      });
    }
  }
  static getCurrentVideoPageIndex() {
    const {
      currentVideoPageIndex
    } = getVideoState();
    return currentVideoPageIndex;
  }
  static calculateNextPage() {
    const {
      numberOfPages,
      currentVideoPageIndex
    } = getVideoState();
    if (numberOfPages === 0) {
      return 0;
    }
    return ((currentVideoPageIndex + 1) % numberOfPages + numberOfPages) % numberOfPages;
  }
  static calculatePreviousPage() {
    const {
      numberOfPages,
      currentVideoPageIndex
    } = getVideoState();
    if (numberOfPages === 0) {
      return 0;
    }
    return ((currentVideoPageIndex - 1) % numberOfPages + numberOfPages) % numberOfPages;
  }
  static getNextVideoPage() {
    const nextPage = VideoService.calculateNextPage();
    VideoService.setCurrentVideoPageIndex(nextPage);
  }
  static getPreviousVideoPage() {
    const previousPage = VideoService.calculatePreviousPage();
    VideoService.setCurrentVideoPageIndex(previousPage);
  }
  static isGridEnabled() {
    return Session.getItem('isGridEnabled');
  }
  stopConnectingStream() {
    this.deviceId = null;
    setConnectingStream(null);
  }
  buildStreamName(deviceId) {
    return "".concat(this.getPrefix()).concat(TOKEN).concat(deviceId);
  }
  static getMediaServerAdapter() {
    const DEFAULT_VIDEO_MEDIA_SERVER = window.meetingClientSettings.public.kurento.videoMediaServer;
    return getFromMeetingSettings('media-server-video', DEFAULT_VIDEO_MEDIA_SERVER);
  }
  static getRoleModerator() {
    return window.meetingClientSettings.public.user.role_moderator;
  }
  static getRoleViewer() {
    return window.meetingClientSettings.public.user.role_viewer;
  }
  static getPageChangeDebounceTime() {
    const {
      pageChangeDebounceTime: PAGE_CHANGE_DEBOUNCE_TIME
    } = window.meetingClientSettings.public.kurento.pagination;
    return PAGE_CHANGE_DEBOUNCE_TIME;
  }
  getRecord(myRole) {
    const ROLE_MODERATOR = VideoService.getRoleModerator();
    if (this.record === null) {
      this.record = getFromUserSettings('bbb_record_video', true);
    }
    if (this.hackRecordViewer === null) {
      const value = getFromMeetingSettings('hack-record-viewer-video', null);
      this.hackRecordViewer = value ? value.toLowerCase() === 'true' : true;
    }
    const hackRecord = myRole === ROLE_MODERATOR || this.hackRecordViewer;
    return this.record && hackRecord;
  }
  static mirrorOwnWebcam() {
    let userId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    const MIRROR_WEBCAM = window.meetingClientSettings.public.app.mirrorOwnWebcam;
    const isOwnWebcam = userId ? Auth.userID === userId : true;
    const isEnabledMirroring = getFromUserSettings('bbb_mirror_own_webcam', MIRROR_WEBCAM);
    return isOwnWebcam && isEnabledMirroring;
  }
  static isPinEnabled() {
    return window.meetingClientSettings.public.kurento.enableVideoPin;
  }
  getMyStreamId(deviceId, streams) {
    const videoStream = streams.find(vs => this.isLocalStream(vs.stream) && vs.deviceId === deviceId);
    return videoStream ? videoStream.stream : null;
  }
  isLocalStream() {
    let cameraId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return cameraId.startsWith(this.getPrefix());
  }
  static getCameraProfile() {
    const CAMERA_PROFILES = VideoService.getCameraProfiles();
    const BBBStorage = getStorageSingletonInstance();
    const profileId = BBBStorage.getItem('WebcamProfileId') || '';
    const cameraProfile = CAMERA_PROFILES.find(profile => profile.id === profileId) || CAMERA_PROFILES.find(profile => profile.default) || CAMERA_PROFILES[0];
    const deviceId = BBBStorage.getItem('WebcamDeviceId');
    if (deviceId) {
      // @ts-expect-error -> Untyped object.
      cameraProfile.constraints = cameraProfile.constraints || {};
      // @ts-expect-error -> Untyped object.
      cameraProfile.constraints.deviceId = {
        exact: deviceId
      };
    }
    return cameraProfile;
  }
  static addCandidateToPeer(peer, candidate, cameraId) {
    peer.addIceCandidate(candidate).catch(error => {
      if (error) {
        logger.error({
          logCode: 'video_provider_addicecandidate_error',
          extraInfo: {
            cameraId,
            error
          }
        }, "Adding ICE candidate failed for ".concat(cameraId, " due to ").concat(error.message));
      }
    });
  }
  static processInboundIceQueue(peer, cameraId) {
    // @ts-expect-error -> Untyped object.
    while (peer.inboundIceQueue.length) {
      // @ts-expect-error -> Untyped object.
      const candidate = peer.inboundIceQueue.shift();
      VideoService.addCandidateToPeer(peer, candidate, cameraId);
    }
  }
  static getRole(isLocal) {
    return isLocal ? 'share' : 'viewer';
  }
  getUserParameterProfile() {
    const CAMERA_PROFILES = VideoService.getCameraProfiles();
    if (this.userParameterProfile === null) {
      this.userParameterProfile = getFromUserSettings('bbb_preferred_camera_profile', (CAMERA_PROFILES.find(i => i.default) || {}).id || null);
    }
    return this.userParameterProfile;
  }
  isMultipleCamerasEnabled() {
    const MULTIPLE_CAMERAS = window.meetingClientSettings.public.app.enableMultipleCameras;
    return MULTIPLE_CAMERAS && !VideoPreviewService.getSkipVideoPreview() && !this.isMobile && !this.isSafari && this.numberOfDevices > 1;
  }
  static isProfileBetter(newProfileId, originalProfileId) {
    const CAMERA_PROFILES = VideoService.getCameraProfiles();
    return CAMERA_PROFILES.findIndex(_ref => {
      let {
        id
      } = _ref;
      return id === newProfileId;
    }) > CAMERA_PROFILES.findIndex(_ref2 => {
      let {
        id
      } = _ref2;
      return id === originalProfileId;
    });
  }
  static applyBitrate(peer, bitrate) {
    const {
      peerConnection
    } = peer;
    if ('RTCRtpSender' in window && 'setParameters' in window.RTCRtpSender.prototype && 'getParameters' in window.RTCRtpSender.prototype) {
      peerConnection.getSenders().forEach(sender => {
        const {
          track
        } = sender;
        if (track && track.kind === 'video') {
          const parameters = sender.getParameters();
          const normalizedBitrate = bitrate * 1000;
          if (parameters.encodings == null || parameters.encodings.length === 0) {
            parameters.encodings = [{}];
          }
          if (parameters.encodings[0].maxBitrate !== normalizedBitrate) {
            parameters.encodings[0].maxBitrate = normalizedBitrate;
            sender.setParameters(parameters).then(() => {
              logger.info({
                logCode: 'video_provider_bitratechange',
                extraInfo: {
                  bitrate
                }
              }, "Bitrate changed: ".concat(bitrate));
            }).catch(error => {
              logger.warn({
                logCode: 'video_provider_bitratechange_failed',
                extraInfo: {
                  bitrate,
                  errorMessage: error.message,
                  errorCode: error.code
                }
              }, 'Bitrate change failed.');
            });
          }
        }
      });
    }
  }
  static reapplyResolutionIfNeeded(track, constraints) {
    if (typeof track.getSettings !== 'function') {
      return constraints;
    }
    const trackSettings = track.getSettings();
    if (trackSettings.width && trackSettings.height) {
      return _objectSpread(_objectSpread({}, constraints), {}, {
        width: trackSettings.width,
        height: trackSettings.height
      });
    }
    return constraints;
  }
  static applyCameraProfile(peer, profileId) {
    const CAMERA_PROFILES = VideoService.getCameraProfiles();
    const profile = CAMERA_PROFILES.find(targetProfile => targetProfile.id === profileId);
    const {
      applyConstraints: CAMERA_QUALITY_THR_CONSTRAINTS = false
    } = window.meetingClientSettings.public.kurento.cameraQualityThresholds;
    if (!profile || peer == null || peer.peerConnection == null
    // @ts-expect-error -> Untyped object.
    || peer.currentProfileId === profileId
    // @ts-expect-error -> Untyped object.
    || VideoService.isProfileBetter(profileId, peer.originalProfileId)) {
      return;
    }
    const {
      bitrate,
      constraints
    } = profile;
    if (bitrate) VideoService.applyBitrate(peer, bitrate);
    if (CAMERA_QUALITY_THR_CONSTRAINTS && constraints && typeof constraints === 'object') {
      peer.peerConnection.getSenders().forEach(sender => {
        const {
          track
        } = sender;
        if (track && track.kind === 'video' && typeof track.applyConstraints === 'function') {
          const normalizedVideoConstraints = VideoService.reapplyResolutionIfNeeded(track, constraints);
          track.applyConstraints(normalizedVideoConstraints).catch(error => {
            logger.warn({
              logCode: 'video_provider_constraintchange_failed',
              extraInfo: {
                errorName: error.name,
                errorCode: error.code
              }
            }, 'Error applying camera profile');
          });
        }
      });
    }
    logger.info({
      logCode: 'video_provider_profile_applied',
      extraInfo: {
        profileId
      }
    }, "New camera profile applied: ".concat(profileId));
    // @ts-expect-error -> Untyped object.
    // eslint-disable-next-line no-param-reassign
    peer.currentProfileId = profileId;
  }
  static getThreshold(numberOfPublishers) {
    const {
      thresholds: CAMERA_QUALITY_THRESHOLDS = []
    } = window.meetingClientSettings.public.kurento.cameraQualityThresholds;
    let targetThreshold = {
      threshold: 0,
      profile: 'original'
    };
    let finalThreshold = {
      threshold: 0,
      profile: 'original'
    };
    for (let mapIndex = 0; mapIndex < CAMERA_QUALITY_THRESHOLDS.length; mapIndex += 1) {
      targetThreshold = CAMERA_QUALITY_THRESHOLDS[mapIndex];
      if (targetThreshold.threshold <= numberOfPublishers) {
        finalThreshold = targetThreshold;
      }
    }
    return finalThreshold;
  }
  getPreloadedStream() {
    if (this.deviceId == null) return null;
    return VideoPreviewService.getStream(this.deviceId);
  }
  updatePeerDictionaryReference(newRef) {
    this.webRtcPeersRef = newRef;
  }
  setTrackEnabled(value) {
    const localPeers = Object.values(this.webRtcPeersRef).filter(
    // @ts-expect-error -> Until all codebase is in Typescript.
    peer => peer.isPublisher);
    localPeers.forEach(peer => {
      const stream = peer.getLocalStream();
      MediaStreamUtils.getVideoTracks(stream).forEach(track => {
        // eslint-disable-next-line no-param-reassign
        track.enabled = value;
      });
    });
  }
  getPrefix() {
    return "".concat(Auth.userID).concat(TOKEN).concat(this.clientSessionUUID);
  }
}
const videoService = new VideoService();
module.exportDefault({
  addCandidateToPeer: VideoService.addCandidateToPeer,
  getMyStreamId: videoService.getMyStreamId.bind(videoService),
  getAuthenticatedURL: VideoService.getAuthenticatedURL,
  getRole: VideoService.getRole,
  getMediaServerAdapter: VideoService.getMediaServerAdapter,
  getCameraProfile: VideoService.getCameraProfile,
  getThreshold: VideoService.getThreshold,
  getPreviousVideoPage: VideoService.getPreviousVideoPage,
  getNextVideoPage: VideoService.getNextVideoPage,
  getCurrentVideoPageIndex: VideoService.getCurrentVideoPageIndex,
  isLocalStream: videoService.isLocalStream.bind(videoService),
  isPaginationEnabled: VideoService.isPaginationEnabled,
  mirrorOwnWebcam: VideoService.mirrorOwnWebcam,
  processInboundIceQueue: VideoService.processInboundIceQueue,
  storeDeviceIds: videoService.storeDeviceIds.bind(videoService),
  joinedVideo: () => VideoService.joinedVideo(),
  exitedVideo: () => videoService.exitedVideo(),
  getPreloadedStream: () => videoService.getPreloadedStream(),
  getRecord: myRole => videoService.getRecord(myRole),
  getPageChangeDebounceTime: () => VideoService.getPageChangeDebounceTime(),
  getUserParameterProfile: () => videoService.getUserParameterProfile(),
  isMultipleCamerasEnabled: () => videoService.isMultipleCamerasEnabled(),
  joinVideo: (deviceId, isUserLocked) => videoService.joinVideo(deviceId, isUserLocked),
  updateNumberOfDevices: devices => videoService.updateNumberOfDevices(devices),
  stopConnectingStream: videoService.stopConnectingStream,
  updatePeerDictionaryReference: newRef => videoService.updatePeerDictionaryReference(newRef),
  webRtcPeersRef: () => videoService.webRtcPeersRef,
  isMobile: videoService.isMobile,
  notify: message => notify(message, 'error', 'video'),
  applyCameraProfile: VideoService.applyCameraProfile,
  setTrackEnabled: value => videoService.setTrackEnabled(value),
  getRoleModerator: VideoService.getRoleModerator,
  getRoleViewer: VideoService.getRoleViewer,
  getPrefix: videoService.getPrefix.bind(videoService),
  isPinEnabled: VideoService.isPinEnabled
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"state.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/state.ts                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  useVideoState: () => useVideoState,
  setVideoState: () => setVideoState,
  getVideoState: () => getVideoState,
  useConnectingStream: () => useConnectingStream,
  getConnectingStream: () => getConnectingStream,
  setConnectingStream: () => setConnectingStream,
  setStreams: () => setStreams,
  getStreams: () => getStreams,
  streams: () => streams
});
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 0);
const videoState = makeVar({
  isConnecting: false,
  isConnected: false,
  currentVideoPageIndex: 0,
  numberOfPages: 0,
  pageSize: 0,
  userId: null
});
const useVideoState = () => useReactiveVar(videoState);
const setVideoState = state => {
  videoState(_objectSpread(_objectSpread({}, videoState()), state));
};
const getVideoState = () => videoState();
const connectingStream = makeVar(null);
const useConnectingStream = streams => {
  const connecting = useReactiveVar(connectingStream);
  if (!connecting) return null;
  const hasStream = streams && streams.find(s => s.stream === connecting.stream);
  if (hasStream) {
    return null;
  }
  return connecting;
};
const setConnectingStream = stream => {
  connectingStream(stream);
};
const getConnectingStream = () => connectingStream();
const streams = makeVar([]);
const setStreams = vs => {
  streams(vs);
};
const getStreams = () => streams();
module.exportDefault({
  useVideoState,
  setVideoState,
  getVideoState,
  useConnectingStream,
  getConnectingStream,
  setConnectingStream,
  setStreams,
  getStreams,
  streams
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"stream-sorting.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-provider/stream-sorting.ts                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  sortPin: () => sortPin,
  mandatorySorting: () => mandatorySorting,
  sortVoiceActivity: () => sortVoiceActivity,
  sortVoiceActivityLocal: () => sortVoiceActivityLocal,
  sortByLocal: () => sortByLocal,
  sortLocalVoiceActivity: () => sortLocalVoiceActivity,
  sortLocalAlphabetical: () => sortLocalAlphabetical,
  sortPresenter: () => sortPresenter,
  sortLocalPresenterAlphabetical: () => sortLocalPresenterAlphabetical,
  getSortingMethod: () => getSortingMethod,
  sortVideoStreams: () => sortVideoStreams
});
let UserListService;
module.link("/imports/ui/components/user-list/service", {
  default(v) {
    UserListService = v;
  }
}, 0);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 1);
let VideoService;
module.link("./service", {
  default(v) {
    VideoService = v;
  }
}, 2);
let VIDEO_TYPES;
module.link("./enums", {
  VIDEO_TYPES(v) {
    VIDEO_TYPES = v;
  }
}, 3);
const DEFAULT_SORTING_MODE = 'LOCAL_ALPHABETICAL';
// connecting last -> pin first
const sortPin = (s1, s2) => {
  if (s1.type === VIDEO_TYPES.CONNECTING) {
    return 1;
  }
  if (s2.type === VIDEO_TYPES.CONNECTING) {
    return -1;
  }
  if (s1.user.pinned) {
    return -1;
  }
  if (s2.user.pinned) {
    return 1;
  }
  return 0;
};
const mandatorySorting = (s1, s2) => sortPin(s1, s2);
const sortVoiceActivity = (s1, s2) => {
  if (s1.type === VIDEO_TYPES.CONNECTING) {
    return 1;
  }
  if (s2.type === VIDEO_TYPES.CONNECTING) {
    return -1;
  }
  if (s2.lastFloorTime < s1.lastFloorTime) {
    return -1;
  }
  if (s2.lastFloorTime > s1.lastFloorTime) {
    return 1;
  }
  return 0;
};
const sortVoiceActivityLocal = (s1, s2) => {
  if (s1.userId === Auth.userID) {
    return 1;
  }
  if (s2.userId === Auth.userID) {
    return -1;
  }
  return mandatorySorting(s1, s2) || sortVoiceActivity(s1, s2) || UserListService.sortUsersByName(s1, s2);
};
const sortByLocal = (s1, s2) => {
  if (VideoService.isLocalStream(s1.stream)) {
    return -1;
  }
  if (VideoService.isLocalStream(s2.stream)) {
    return 1;
  }
  return 0;
};
const sortLocalVoiceActivity = (s1, s2) => mandatorySorting(s1, s2) || sortByLocal(s1, s2) || sortVoiceActivity(s1, s2) || UserListService.sortUsersByName(s1, s2);
const sortLocalAlphabetical = (s1, s2) => mandatorySorting(s1, s2) || sortByLocal(s1, s2) || UserListService.sortUsersByName(s1, s2);
const sortPresenter = (s1, s2) => {
  if (s1.type === VIDEO_TYPES.STREAM && s1.user.presenter) {
    return -1;
  }
  if (s2.type === VIDEO_TYPES.STREAM && s2.user.presenter) {
    return 1;
  }
  return 0;
};
const sortLocalPresenterAlphabetical = (s1, s2) => mandatorySorting(s1, s2) || sortByLocal(s1, s2) || sortPresenter(s1, s2) || UserListService.sortUsersByName(s1, s2);
const SORTING_METHODS = Object.freeze({
  // Default
  LOCAL_ALPHABETICAL: {
    sortingMethod: sortLocalAlphabetical,
    localFirst: true
  },
  VOICE_ACTIVITY_LOCAL: {
    sortingMethod: sortVoiceActivityLocal,
    localFirst: false
  },
  LOCAL_VOICE_ACTIVITY: {
    sortingMethod: sortLocalVoiceActivity,
    localFirst: true
  },
  LOCAL_PRESENTER_ALPHABETICAL: {
    sortingMethod: sortLocalPresenterAlphabetical,
    localFirst: true
  }
});
const getSortingMethod = identifier => {
  return SORTING_METHODS[identifier] || SORTING_METHODS[DEFAULT_SORTING_MODE];
};
const sortVideoStreams = (streams, mode) => {
  const {
    sortingMethod
  } = getSortingMethod(mode);
  const sorted = streams.sort(sortingMethod);
  return sorted;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"app":{"app-graphql":{"time-sync":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/app/app-graphql/time-sync/component.tsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useLazyQuery;
module.link("@apollo/client", {
  useLazyQuery(v) {
    useLazyQuery = v;
  }
}, 0);
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 1);
let GET_SERVER_TIME;
module.link("./queries", {
  GET_SERVER_TIME(v) {
    GET_SERVER_TIME = v;
  }
}, 2);
let setTimeSync;
module.link("/imports/ui/core/local-states/useTimeSync", {
  setTimeSync(v) {
    setTimeSync = v;
  }
}, 3);
const TimeSync = () => {
  const [loadGetServerTime, {
    called,
    loading,
    data,
    error
  }] = useLazyQuery(GET_SERVER_TIME);
  useEffect(() => {
    if (!called) {
      loadGetServerTime();
    }
  }, []);
  if (error) {
    return /*#__PURE__*/React.createElement("div", null, JSON.stringify(error));
  }
  useEffect(() => {
    if (!loading && data) {
      const time = new Date(data.current_time[0].currentTimestamp);
      const dateNow = new Date();
      setTimeSync(time.getTime() - dateNow.getTime());
    }
  }, [data, loading]);
  return null;
};
module.exportDefault(TimeSync);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/app/app-graphql/time-sync/queries.ts                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  GET_SERVER_TIME: () => GET_SERVER_TIME
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const GET_SERVER_TIME = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  query getServerTime {\n    current_time {\n      currentTimestamp\n    }\n  }\n"])));
module.exportDefault({
  GET_SERVER_TIME
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/app/component.jsx                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 2);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 3);
let ReactModal;
module.link("react-modal", {
  default(v) {
    ReactModal = v;
  }
}, 4);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 5);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 6);
let PollingContainer;
module.link("/imports/ui/components/polling/container", {
  default(v) {
    PollingContainer = v;
  }
}, 7);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 8);
let ActivityCheckContainer;
module.link("/imports/ui/components/activity-check/container", {
  default(v) {
    ActivityCheckContainer = v;
  }
}, 9);
let ToastContainer;
module.link("/imports/ui/components/common/toast/container", {
  default(v) {
    ToastContainer = v;
  }
}, 10);
let PadsSessionsContainer;
module.link("/imports/ui/components/pads/pads-graphql/sessions/component", {
  default(v) {
    PadsSessionsContainer = v;
  }
}, 11);
let WakeLockContainer;
module.link("../wake-lock/container", {
  default(v) {
    WakeLockContainer = v;
  }
}, 12);
let NotificationsBarContainer;
module.link("../notifications-bar/container", {
  default(v) {
    NotificationsBarContainer = v;
  }
}, 13);
let AudioContainer;
module.link("../audio/container", {
  default(v) {
    AudioContainer = v;
  }
}, 14);
let BannerBarContainer;
module.link("/imports/ui/components/banner-bar/container", {
  default(v) {
    BannerBarContainer = v;
  }
}, 15);
let RaiseHandNotifier;
module.link("/imports/ui/components/raisehand-notifier/container", {
  default(v) {
    RaiseHandNotifier = v;
  }
}, 16);
let ManyWebcamsNotifier;
module.link("/imports/ui/components/video-provider/many-users-notify/container", {
  default(v) {
    ManyWebcamsNotifier = v;
  }
}, 17);
let AudioCaptionsSpeechContainer;
module.link("/imports/ui/components/audio/audio-graphql/audio-captions/speech/component", {
  default(v) {
    AudioCaptionsSpeechContainer = v;
  }
}, 18);
let UploaderContainer;
module.link("/imports/ui/components/presentation/presentation-uploader/container", {
  default(v) {
    UploaderContainer = v;
  }
}, 19);
let ScreenReaderAlertContainer;
module.link("../screenreader-alert/container", {
  default(v) {
    ScreenReaderAlertContainer = v;
  }
}, 20);
let ScreenReaderAlertAdapter;
module.link("../screenreader-alert/adapter", {
  default(v) {
    ScreenReaderAlertAdapter = v;
  }
}, 21);
let WebcamContainer;
module.link("../webcam/component", {
  default(v) {
    WebcamContainer = v;
  }
}, 22);
let PresentationContainer;
module.link("../presentation/container", {
  default(v) {
    PresentationContainer = v;
  }
}, 23);
let ScreenshareContainer;
module.link("../screenshare/container", {
  default(v) {
    ScreenshareContainer = v;
  }
}, 24);
let ExternalVideoPlayerContainer;
module.link("../external-video-player/external-video-player-graphql/component", {
  default(v) {
    ExternalVideoPlayerContainer = v;
  }
}, 25);
let GenericContentMainAreaContainer;
module.link("../generic-content/generic-main-content/container", {
  default(v) {
    GenericContentMainAreaContainer = v;
  }
}, 26);
let EmojiRainContainer;
module.link("../emoji-rain/container", {
  default(v) {
    EmojiRainContainer = v;
  }
}, 27);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 28);
let DEVICE_TYPE, ACTIONS, SMALL_VIEWPORT_BREAKPOINT, PANELS;
module.link("../layout/enums", {
  DEVICE_TYPE(v) {
    DEVICE_TYPE = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  },
  SMALL_VIEWPORT_BREAKPOINT(v) {
    SMALL_VIEWPORT_BREAKPOINT = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 29);
let isMobile, isTablet, isTabletPortrait, isTabletLandscape, isDesktop;
module.link("../layout/utils", {
  isMobile(v) {
    isMobile = v;
  },
  isTablet(v) {
    isTablet = v;
  },
  isTabletPortrait(v) {
    isTabletPortrait = v;
  },
  isTabletLandscape(v) {
    isTabletLandscape = v;
  },
  isDesktop(v) {
    isDesktop = v;
  }
}, 30);
let LayoutEngine;
module.link("../layout/layout-manager/layoutEngine", {
  default(v) {
    LayoutEngine = v;
  }
}, 31);
let NavBarContainer;
module.link("../nav-bar/container", {
  default(v) {
    NavBarContainer = v;
  }
}, 32);
let SidebarNavigationContainer;
module.link("../sidebar-navigation/container", {
  default(v) {
    SidebarNavigationContainer = v;
  }
}, 33);
let SidebarContentContainer;
module.link("../sidebar-content/container", {
  default(v) {
    SidebarContentContainer = v;
  }
}, 34);
let PluginsEngineManager;
module.link("../plugins-engine/manager", {
  default(v) {
    PluginsEngineManager = v;
  }
}, 35);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 36);
let Notifications;
module.link("../notifications/component", {
  default(v) {
    Notifications = v;
  }
}, 37);
let GlobalStyles;
module.link("/imports/ui/stylesheets/styled-components/globalStyles", {
  default(v) {
    GlobalStyles = v;
  }
}, 38);
let ActionsBarContainer;
module.link("../actions-bar/container", {
  default(v) {
    ActionsBarContainer = v;
  }
}, 39);
let PushLayoutEngine;
module.link("../layout/push-layout/pushLayoutEngine", {
  default(v) {
    PushLayoutEngine = v;
  }
}, 40);
let AudioService;
module.link("/imports/ui/components/audio/service", {
  default(v) {
    AudioService = v;
  }
}, 41);
let NotesContainer;
module.link("/imports/ui/components/notes/component", {
  default(v) {
    NotesContainer = v;
  }
}, 42);
let AppService;
module.link("/imports/ui/components/app/service", {
  default(v) {
    AppService = v;
  }
}, 43);
let TimeSync;
module.link("./app-graphql/time-sync/component", {
  default(v) {
    TimeSync = v;
  }
}, 44);
let PresentationUploaderToastContainer;
module.link("/imports/ui/components/presentation/presentation-toast/presentation-uploader-toast/container", {
  default(v) {
    PresentationUploaderToastContainer = v;
  }
}, 45);
let BreakoutJoinConfirmationContainerGraphQL;
module.link("../breakout-join-confirmation/breakout-join-confirmation-graphql/component", {
  default(v) {
    BreakoutJoinConfirmationContainerGraphQL = v;
  }
}, 46);
let FloatingWindowContainer;
module.link("/imports/ui/components/floating-window/container", {
  default(v) {
    FloatingWindowContainer = v;
  }
}, 47);
let ChatAlertContainerGraphql;
module.link("../chat/chat-graphql/alert/component", {
  default(v) {
    ChatAlertContainerGraphql = v;
  }
}, 48);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 49);
let VoiceActivityAdapter;
module.link("../../core/adapters/voice-activity", {
  default(v) {
    VoiceActivityAdapter = v;
  }
}, 50);
const MOBILE_MEDIA = 'only screen and (max-width: 40em)';
const intlMessages = defineMessages({
  userListLabel: {
    id: 'app.userList.label',
    description: 'Aria-label for Userlist Nav'
  },
  chatLabel: {
    id: 'app.chat.label',
    description: 'Aria-label for Chat Section'
  },
  actionsBarLabel: {
    id: 'app.actionsBar.label',
    description: 'Aria-label for ActionsBar Section'
  },
  clearedReaction: {
    id: 'app.toast.clearedReactions.label',
    description: 'message for cleared reactions'
  },
  raisedHand: {
    id: 'app.toast.setEmoji.raiseHand',
    description: 'toast message for raised hand notification'
  },
  loweredHand: {
    id: 'app.toast.setEmoji.lowerHand',
    description: 'toast message for lowered hand notification'
  },
  away: {
    id: 'app.toast.setEmoji.away',
    description: 'toast message for set away notification'
  },
  notAway: {
    id: 'app.toast.setEmoji.notAway',
    description: 'toast message for remove away notification'
  },
  meetingMuteOn: {
    id: 'app.toast.meetingMuteOn.label',
    description: 'message used when meeting has been muted'
  },
  meetingMuteOff: {
    id: 'app.toast.meetingMuteOff.label',
    description: 'message used when meeting has been unmuted'
  },
  pollPublishedLabel: {
    id: 'app.whiteboard.annotations.poll',
    description: 'message displayed when a poll is published'
  },
  defaultViewLabel: {
    id: 'app.title.defaultViewLabel',
    description: 'view name appended to document title'
  },
  promotedLabel: {
    id: 'app.toast.promotedLabel',
    description: 'notification message when promoted'
  },
  demotedLabel: {
    id: 'app.toast.demotedLabel',
    description: 'notification message when demoted'
  }
});
const propTypes = {
  darkTheme: PropTypes.bool.isRequired
};
const isLayeredView = window.matchMedia("(max-width: ".concat(SMALL_VIEWPORT_BREAKPOINT, "px)"));
class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      enableResize: !window.matchMedia(MOBILE_MEDIA).matches,
      isAudioModalOpen: false,
      isVideoPreviewModalOpen: false,
      presentationFitToWidth: false
    };
    this.timeOffsetInterval = null;
    this.setPresentationFitToWidth = this.setPresentationFitToWidth.bind(this);
    this.handleWindowResize = throttle(this.handleWindowResize).bind(this);
    this.shouldAriaHide = this.shouldAriaHide.bind(this);
    this.setAudioModalIsOpen = this.setAudioModalIsOpen.bind(this);
    this.setVideoPreviewModalIsOpen = this.setVideoPreviewModalIsOpen.bind(this);
    this.createBeforeUnloadWindowEvent = this.createBeforeUnloadWindowEvent.bind(this);
    this.throttledDeviceType = throttle(() => this.setDeviceType(), 50, {
      trailing: true,
      leading: true
    }).bind(this);
  }
  componentDidMount() {
    const {
      layoutContextDispatch,
      isRTL
    } = this.props;
    const {
      browserName
    } = browserInfo;
    const {
      osName
    } = deviceInfo;
    layoutContextDispatch({
      type: ACTIONS.SET_IS_RTL,
      value: isRTL
    });
    ReactModal.setAppElement('#app');
    const APP_CONFIG = window.meetingClientSettings.public.app;
    const DESKTOP_FONT_SIZE = APP_CONFIG.desktopFontSize;
    const MOBILE_FONT_SIZE = APP_CONFIG.mobileFontSize;
    const Settings = getSettingsSingletonInstance();
    const fontSize = isMobile() ? MOBILE_FONT_SIZE : DESKTOP_FONT_SIZE;
    document.getElementsByTagName('html')[0].style.fontSize = fontSize;
    layoutContextDispatch({
      type: ACTIONS.SET_FONT_SIZE,
      value: parseInt(fontSize.slice(0, -2), 10)
    });
    const body = document.getElementsByTagName('body')[0];
    if (browserName) {
      body.classList.add("browser-".concat(browserName.split(' ').pop().toLowerCase()));
    }
    body.classList.add("os-".concat(osName.split(' ').shift().toLowerCase()));
    this.handleWindowResize();
    window.addEventListener('resize', this.handleWindowResize, false);
    window.addEventListener('localeChanged', () => {
      layoutContextDispatch({
        type: ACTIONS.SET_IS_RTL,
        value: Settings.application.isRTL
      });
    });
    window.ondragover = e => {
      e.preventDefault();
    };
    window.ondrop = e => {
      e.preventDefault();
    };
    this.createBeforeUnloadWindowEvent();
    logger.info({
      logCode: 'app_component_componentdidmount'
    }, 'Client loaded successfully');
  }
  componentDidUpdate(prevProps) {
    var _selectedLayout$toLow, _selectedLayout$toLow2, _selectedLayout$toLow3;
    const {
      currentUserAway,
      currentUserRaiseHand,
      intl,
      deviceType,
      selectedLayout,
      sidebarContentIsOpen,
      layoutContextDispatch,
      numCameras,
      presentationIsOpen,
      hideActionsBar,
      hideNavBar,
      muteMicrophone
    } = this.props;
    this.renderDarkMode();
    if (prevProps.muteMicrophone !== muteMicrophone) {
      this.createBeforeUnloadWindowEvent();
    }
    if (prevProps.currentUserAway !== currentUserAway) {
      if (currentUserAway === true) {
        notify(intl.formatMessage(intlMessages.away), 'info', 'user');
      } else {
        notify(intl.formatMessage(intlMessages.notAway), 'info', 'clear_status');
      }
    }
    if (prevProps.currentUserRaiseHand !== currentUserRaiseHand) {
      if (currentUserRaiseHand === true) {
        notify(intl.formatMessage(intlMessages.raisedHand), 'info', 'user');
      } else {
        notify(intl.formatMessage(intlMessages.loweredHand), 'info', 'clear_status');
      }
    }
    if (deviceType === null || prevProps.deviceType !== deviceType) this.throttledDeviceType();
    const CHAT_CONFIG = window.meetingClientSettings.public.chat;
    const PUBLIC_CHAT_ID = CHAT_CONFIG.public_group_id;
    if (selectedLayout !== prevProps.selectedLayout && selectedLayout !== null && selectedLayout !== void 0 && (_selectedLayout$toLow = selectedLayout.toLowerCase) !== null && _selectedLayout$toLow !== void 0 && (_selectedLayout$toLow2 = _selectedLayout$toLow.call(selectedLayout)) !== null && _selectedLayout$toLow2 !== void 0 && (_selectedLayout$toLow3 = _selectedLayout$toLow2.includes) !== null && _selectedLayout$toLow3 !== void 0 && _selectedLayout$toLow3.call(_selectedLayout$toLow2, 'focus') && !sidebarContentIsOpen && deviceType !== DEVICE_TYPE.MOBILE && numCameras > 0 && presentationIsOpen) {
      setTimeout(() => {
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: true
        });
        layoutContextDispatch({
          type: ACTIONS.SET_ID_CHAT_OPEN,
          value: PUBLIC_CHAT_ID
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.CHAT
        });
      }, 0);
    }
    layoutContextDispatch({
      type: ACTIONS.SET_HAS_ACTIONBAR,
      value: !hideActionsBar
    });
    layoutContextDispatch({
      type: ACTIONS.SET_HAS_NAVBAR,
      value: !hideNavBar
    });
  }
  componentWillUnmount() {
    window.removeEventListener('resize', this.handleWindowResize, false);
    window.onbeforeunload = null;
    if (this.timeOffsetInterval) {
      clearInterval(this.timeOffsetInterval);
    }
  }
  handleWindowResize() {
    const {
      enableResize
    } = this.state;
    const shouldEnableResize = !window.matchMedia(MOBILE_MEDIA).matches;
    if (enableResize === shouldEnableResize) return;
    this.setState({
      enableResize: shouldEnableResize
    });
    this.throttledDeviceType();
  }
  setPresentationFitToWidth(presentationFitToWidth) {
    this.setState({
      presentationFitToWidth
    });
  }
  setDeviceType() {
    const {
      deviceType,
      layoutContextDispatch
    } = this.props;
    let newDeviceType = null;
    if (isMobile()) newDeviceType = DEVICE_TYPE.MOBILE;
    if (isTablet()) newDeviceType = DEVICE_TYPE.TABLET;
    if (isTabletPortrait()) newDeviceType = DEVICE_TYPE.TABLET_PORTRAIT;
    if (isTabletLandscape()) newDeviceType = DEVICE_TYPE.TABLET_LANDSCAPE;
    if (isDesktop()) newDeviceType = DEVICE_TYPE.DESKTOP;
    if (newDeviceType !== deviceType) {
      layoutContextDispatch({
        type: ACTIONS.SET_DEVICE_TYPE,
        value: newDeviceType
      });
    }
  }
  setAudioModalIsOpen(value) {
    this.setState({
      isAudioModalOpen: value
    });
  }
  setVideoPreviewModalIsOpen(value) {
    this.setState({
      isVideoPreviewModalOpen: value
    });
  }
  createBeforeUnloadWindowEvent() {
    const {
      muteMicrophone
    } = this.props;
    const CONFIRMATION_ON_LEAVE = window.meetingClientSettings.public.app.askForConfirmationOnLeave;
    if (CONFIRMATION_ON_LEAVE) {
      window.onbeforeunload = event => {
        if (AudioService.isUsingAudio() && !AudioService.isMuted()) {
          muteMicrophone();
        }
        event.stopImmediatePropagation();
        event.preventDefault();
        // eslint-disable-next-line no-param-reassign
        event.returnValue = '';
      };
    }
  }
  shouldAriaHide() {
    const {
      sidebarNavigationIsOpen,
      sidebarContentIsOpen,
      isPhone
    } = this.props;
    return sidebarNavigationIsOpen && sidebarContentIsOpen && (isPhone || isLayeredView.matches);
  }
  mountPushLayoutEngine() {
    const {
      cameraWidth,
      cameraHeight,
      cameraIsResizing,
      cameraPosition,
      focusedCamera,
      horizontalPosition,
      isMeetingLayoutResizing,
      isPresenter,
      isModerator,
      layoutContextDispatch,
      meetingLayout,
      meetingLayoutCameraPosition,
      meetingLayoutFocusedCamera,
      meetingLayoutVideoRate,
      meetingPresentationIsOpen,
      meetingLayoutUpdatedAt,
      presentationIsOpen,
      presentationVideoRate,
      pushLayout,
      pushLayoutMeeting,
      selectedLayout,
      setMeetingLayout,
      setPushLayout,
      shouldShowScreenshare,
      shouldShowExternalVideo,
      enforceLayout,
      setLocalSettings
    } = this.props;
    return /*#__PURE__*/React.createElement(PushLayoutEngine, {
      cameraWidth,
      cameraHeight,
      cameraIsResizing,
      cameraPosition,
      focusedCamera,
      horizontalPosition,
      isMeetingLayoutResizing,
      isPresenter,
      isModerator,
      layoutContextDispatch,
      meetingLayout,
      meetingLayoutCameraPosition,
      meetingLayoutFocusedCamera,
      meetingLayoutVideoRate,
      meetingPresentationIsOpen,
      meetingLayoutUpdatedAt,
      presentationIsOpen,
      presentationVideoRate,
      pushLayout,
      pushLayoutMeeting,
      selectedLayout,
      setMeetingLayout,
      setPushLayout,
      shouldShowScreenshare,
      shouldShowExternalVideo: !!shouldShowExternalVideo,
      enforceLayout,
      setLocalSettings
    });
  }
  renderDarkMode() {
    const {
      darkTheme
    } = this.props;
    AppService.setDarkTheme(darkTheme);
  }
  renderActivityCheck() {
    const {
      inactivityWarningDisplay,
      inactivityWarningTimeoutSecs
    } = this.props;
    return inactivityWarningDisplay ? /*#__PURE__*/React.createElement(ActivityCheckContainer, {
      inactivityCheck: inactivityWarningDisplay,
      responseDelay: inactivityWarningTimeoutSecs
    }) : null;
  }
  renderActionsBar() {
    const {
      intl,
      actionsBarStyle,
      hideActionsBar,
      setPushLayout,
      setMeetingLayout,
      presentationIsOpen,
      selectedLayout
    } = this.props;
    const LAYOUT_CONFIG = window.meetingClientSettings.public.layout;
    const {
      showPushLayoutButton
    } = LAYOUT_CONFIG;
    if (hideActionsBar) return null;
    return /*#__PURE__*/React.createElement(Styled.ActionsBar, {
      id: "ActionsBar",
      role: "region",
      "aria-label": intl.formatMessage(intlMessages.actionsBarLabel),
      "aria-hidden": this.shouldAriaHide(),
      style: {
        position: 'absolute',
        top: actionsBarStyle.top,
        left: actionsBarStyle.left,
        height: actionsBarStyle.height,
        width: actionsBarStyle.width,
        padding: actionsBarStyle.padding
      }
    }, /*#__PURE__*/React.createElement(ActionsBarContainer, {
      setPushLayout: setPushLayout,
      setMeetingLayout: setMeetingLayout,
      showPushLayout: showPushLayoutButton && selectedLayout === 'custom',
      presentationIsOpen: presentationIsOpen,
      setPresentationFitToWidth: this.setPresentationFitToWidth
    }));
  }
  renderAudioCaptions() {
    const {
      audioCaptions,
      captionsStyle
    } = this.props;
    if (!audioCaptions) return null;
    return /*#__PURE__*/React.createElement(Styled.CaptionsWrapper, {
      role: "region",
      style: {
        position: 'absolute',
        left: captionsStyle.left,
        right: captionsStyle.right,
        maxWidth: captionsStyle.maxWidth
      }
    }, audioCaptions);
  }
  render() {
    const {
      customStyle,
      customStyleUrl,
      audioAlertEnabled,
      pushAlertEnabled,
      shouldShowPresentation,
      shouldShowScreenshare,
      isSharedNotesPinned,
      isPresenter,
      selectedLayout,
      presentationIsOpen,
      darkTheme,
      intl,
      genericMainContentId,
      speechLocale,
      connected,
      isPresentationEnabled
    } = this.props;
    const {
      isAudioModalOpen,
      isVideoPreviewModalOpen,
      presentationFitToWidth
    } = this.state;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ScreenReaderAlertAdapter, null), /*#__PURE__*/React.createElement(PluginsEngineManager, null), /*#__PURE__*/React.createElement(FloatingWindowContainer, null), /*#__PURE__*/React.createElement(TimeSync, null), /*#__PURE__*/React.createElement(Notifications, null), this.mountPushLayoutEngine(), /*#__PURE__*/React.createElement(LayoutEngine, {
      layoutType: selectedLayout,
      isPresentationEnabled: isPresentationEnabled
    }), /*#__PURE__*/React.createElement(GlobalStyles, null), /*#__PURE__*/React.createElement(Styled.Layout, {
      id: "layout",
      style: {
        width: '100%',
        height: '100%'
      }
    }, this.renderActivityCheck(), /*#__PURE__*/React.createElement(ScreenReaderAlertContainer, null), /*#__PURE__*/React.createElement(BannerBarContainer, null), /*#__PURE__*/React.createElement(NotificationsBarContainer, {
      connected: connected
    }), /*#__PURE__*/React.createElement(SidebarNavigationContainer, null), /*#__PURE__*/React.createElement(SidebarContentContainer, {
      isSharedNotesPinned: isSharedNotesPinned
    }), /*#__PURE__*/React.createElement(NavBarContainer, {
      main: "new"
    }), /*#__PURE__*/React.createElement(WebcamContainer, {
      isLayoutSwapped: !presentationIsOpen,
      layoutType: selectedLayout
    }), /*#__PURE__*/React.createElement(ExternalVideoPlayerContainer, null), /*#__PURE__*/React.createElement(GenericContentMainAreaContainer, {
      genericMainContentId: genericMainContentId
    }), shouldShowPresentation ? /*#__PURE__*/React.createElement(PresentationContainer, {
      setPresentationFitToWidth: this.setPresentationFitToWidth,
      fitToWidth: presentationFitToWidth,
      darkTheme: darkTheme,
      presentationIsOpen: presentationIsOpen,
      layoutType: selectedLayout
    }) : null, shouldShowScreenshare ? /*#__PURE__*/React.createElement(ScreenshareContainer, {
      isLayoutSwapped: !presentationIsOpen,
      isPresenter: isPresenter
    }) : null, isSharedNotesPinned ? /*#__PURE__*/React.createElement(NotesContainer, {
      area: "media"
    }) : null, /*#__PURE__*/React.createElement(AudioCaptionsSpeechContainer, null), this.renderAudioCaptions(), /*#__PURE__*/React.createElement(PresentationUploaderToastContainer, {
      intl: intl
    }), /*#__PURE__*/React.createElement(UploaderContainer, null), /*#__PURE__*/React.createElement(BreakoutJoinConfirmationContainerGraphQL, null), /*#__PURE__*/React.createElement(AudioContainer, {
      isAudioModalOpen,
      setAudioModalIsOpen: this.setAudioModalIsOpen,
      isVideoPreviewModalOpen,
      setVideoPreviewModalIsOpen: this.setVideoPreviewModalIsOpen,
      speechLocale
    }), /*#__PURE__*/React.createElement(ToastContainer, {
      rtl: true
    }), (audioAlertEnabled || pushAlertEnabled) && /*#__PURE__*/React.createElement(ChatAlertContainerGraphql, {
      audioAlertEnabled: audioAlertEnabled,
      pushAlertEnabled: pushAlertEnabled
    }), /*#__PURE__*/React.createElement(RaiseHandNotifier, null), /*#__PURE__*/React.createElement(ManyWebcamsNotifier, null), /*#__PURE__*/React.createElement(PollingContainer, null), /*#__PURE__*/React.createElement(PadsSessionsContainer, null), /*#__PURE__*/React.createElement(WakeLockContainer, null), this.renderActionsBar(), /*#__PURE__*/React.createElement(EmojiRainContainer, null), /*#__PURE__*/React.createElement(VoiceActivityAdapter, null), customStyleUrl ? /*#__PURE__*/React.createElement("link", {
      rel: "stylesheet",
      type: "text/css",
      href: customStyleUrl
    }) : null, customStyle ? /*#__PURE__*/React.createElement("link", {
      rel: "stylesheet",
      type: "text/css",
      href: "data:text/css;charset=UTF-8,".concat(encodeURIComponent(customStyle))
    }) : null));
  }
}
App.propTypes = propTypes;
module.exportDefault(injectIntl(App));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/app/container.jsx                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["actionsbar", "currentUserId", "shouldShowScreenshare", "isModalOpen"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let AudioCaptionsLiveContainer;
module.link("/imports/ui/components/audio/audio-graphql/audio-captions/live/component", {
  default(v) {
    AudioCaptionsLiveContainer = v;
  }
}, 1);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 2);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 3);
let MediaService;
module.link("/imports/ui/components/media/service", {
  default(v) {
    MediaService = v;
  }
}, 4);
let useIsPresentationEnabled, useIsScreenSharingEnabled, useIsExternalVideoEnabled;
module.link("/imports/ui/services/features", {
  useIsPresentationEnabled(v) {
    useIsPresentationEnabled = v;
  },
  useIsScreenSharingEnabled(v) {
    useIsScreenSharingEnabled = v;
  },
  useIsExternalVideoEnabled(v) {
    useIsExternalVideoEnabled = v;
  }
}, 5);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 6);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 7);
let ACTIONS, LAYOUT_TYPE, PRESENTATION_AREA;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  },
  PRESENTATION_AREA(v) {
    PRESENTATION_AREA = v;
  }
}, 8);
let useMutation, useReactiveVar;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 9);
let layoutSelect, layoutSelectInput, layoutSelectOutput, layoutDispatch;
module.link("../layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 10);
let SET_SYNC_WITH_PRESENTER_LAYOUT, SET_LAYOUT_PROPS;
module.link("./mutations", {
  SET_SYNC_WITH_PRESENTER_LAYOUT(v) {
    SET_SYNC_WITH_PRESENTER_LAYOUT = v;
  },
  SET_LAYOUT_PROPS(v) {
    SET_LAYOUT_PROPS = v;
  }
}, 11);
let useSetSpeechOptions;
module.link("../audio/audio-graphql/hooks/useSetSpeechOptions", {
  default(v) {
    useSetSpeechOptions = v;
  }
}, 12);
let App;
module.link("./component", {
  default(v) {
    App = v;
  }
}, 13);
let useUserChangedLocalSettings;
module.link("../../services/settings/hooks/useUserChangedLocalSettings", {
  default(v) {
    useUserChangedLocalSettings = v;
  }
}, 14);
let PINNED_PAD_SUBSCRIPTION;
module.link("../notes/queries", {
  PINNED_PAD_SUBSCRIPTION(v) {
    PINNED_PAD_SUBSCRIPTION = v;
  }
}, 15);
let connectionStatus;
module.link("../../core/graphql/singletons/connectionStatus", {
  default(v) {
    connectionStatus = v;
  }
}, 16);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 17);
let VideoStreamsState;
module.link("../video-provider/state", {
  default(v) {
    VideoStreamsState = v;
  }
}, 18);
let useSettings;
module.link("../../services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 19);
let SETTINGS;
module.link("../../services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 20);
let useStorageKey;
module.link("../../services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 21);
let useMuteMicrophone;
module.link("../audio/audio-graphql/hooks/useMuteMicrophone", {
  default(v) {
    useMuteMicrophone = v;
  }
}, 22);
const currentUserEmoji = currentUser => currentUser ? {
  status: currentUser.reactionEmoji,
  changedAt: currentUser.reactionEmojiTime
} : {
  status: 'none',
  changedAt: null
};
const AppContainer = props => {
  var _pinnedPadData$shared, _currentMeeting$compo, _currentMeeting$compo2;
  const LAYOUT_CONFIG = window.meetingClientSettings.public.layout;
  const layoutType = useRef(null);
  const {
      actionsbar,
      currentUserId,
      shouldShowScreenshare: propsShouldShowScreenshare,
      isModalOpen
    } = props,
    otherProps = _objectWithoutProperties(props, _excluded);
  const {
    viewScreenshare
  } = useSettings(SETTINGS.DATA_SAVING);
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    away: u.away,
    reactionEmoji: u.reactionEmoji,
    approved: 1,
    raiseHand: u.raiseHand,
    userId: u.userId,
    role: u.role,
    inactivityWarningDisplay: u.inactivityWarningDisplay,
    presenter: u.presenter
  }));
  const {
    data: currentMeeting
  } = useMeeting(m => ({
    layout: m.layout,
    componentsFlags: m.componentsFlags
  }));
  const meetingLayout = LAYOUT_TYPE[currentMeeting === null || currentMeeting === void 0 ? void 0 : currentMeeting.layout.currentLayoutType];
  const meetingLayoutUpdatedAt = new Date(currentMeeting === null || currentMeeting === void 0 ? void 0 : currentMeeting.layout.updatedAt).getTime();
  const meetingPresentationIsOpen = !(currentMeeting !== null && currentMeeting !== void 0 && currentMeeting.layout.presentationMinimized);
  const presentationRestoreOnUpdate = getFromUserSettings('bbb_force_restore_presentation_on_new_events', window.meetingClientSettings.public.presentation.restoreOnUpdate);
  const {
    propagateLayout: pushLayoutMeeting,
    cameraDockIsResizing: isMeetingLayoutResizing,
    cameraDockPlacement: meetingLayoutCameraPosition,
    cameraDockAspectRatio: meetingLayoutVideoRate,
    cameraWithFocus: meetingLayoutFocusedCamera
  } = (currentMeeting === null || currentMeeting === void 0 ? void 0 : currentMeeting.layout) || {};
  const isLargeFont = useStorageKey('isLargeFont');
  const ignorePollNotifications = useStorageKey('ignorePollNotifications');
  const NOTES_CONFIG = window.meetingClientSettings.public.notes;
  const {
    selectedLayout,
    pushLayout,
    audioAlertEnabled,
    pushAlertEnabled,
    darkTheme,
    fontSize = '16px'
  } = useSettings(SETTINGS.APPLICATION);
  const {
    partialUtterances,
    minUtteranceLength
  } = useSettings(SETTINGS.TRANSCRIPTION);
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const genericMainContent = layoutSelectInput(i => i.genericMainContent);
  const sidebarNavigation = layoutSelectInput(i => i.sidebarNavigation);
  const actionsBarStyle = layoutSelectOutput(i => i.actionBar);
  const captionsStyle = layoutSelectOutput(i => i.captions);
  const cameraDock = layoutSelectOutput(i => i.cameraDock);
  const cameraDockInput = layoutSelectInput(i => i.cameraDock);
  const presentation = layoutSelectInput(i => i.presentation);
  const sharedNotesInput = layoutSelectInput(i => i.sharedNotes);
  const deviceType = layoutSelect(i => i.deviceType);
  const hasExternalVideoOnLayout = layoutSelectInput(i => i.externalVideo.hasExternalVideo);
  const layoutContextDispatch = layoutDispatch();
  const [setSyncWithPresenterLayout] = useMutation(SET_SYNC_WITH_PRESENTER_LAYOUT);
  const [setMeetingLayoutProps] = useMutation(SET_LAYOUT_PROPS);
  const setLocalSettings = useUserChangedLocalSettings();
  const setSpeechOptions = useSetSpeechOptions();
  const {
    data: pinnedPadData
  } = useDeduplicatedSubscription(PINNED_PAD_SUBSCRIPTION);
  const isSharedNotesPinnedFromGraphql = !!pinnedPadData && ((_pinnedPadData$shared = pinnedPadData.sharedNotes[0]) === null || _pinnedPadData$shared === void 0 ? void 0 : _pinnedPadData$shared.sharedNotesExtId) === NOTES_CONFIG.id;
  const isSharedNotesPinned = (sharedNotesInput === null || sharedNotesInput === void 0 ? void 0 : sharedNotesInput.isPinned) && isSharedNotesPinnedFromGraphql;
  const isThereWebcam = VideoStreamsState.getStreams().length > 0;
  const muteMicrophone = useMuteMicrophone();
  const isScreenSharingEnabled = useIsScreenSharingEnabled();
  const isExternalVideoEnabled = useIsExternalVideoEnabled();
  const isPresentationEnabled = useIsPresentationEnabled();
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    enforceLayout: user.enforceLayout,
    isModerator: user.isModerator,
    presenter: user.presenter,
    speechLocale: user.speechLocale,
    inactivityWarningDisplay: user.inactivityWarningDisplay,
    inactivityWarningTimeoutSecs: user.inactivityWarningTimeoutSecs
  }));
  const isModerator = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.isModerator;
  const isPresenter = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.presenter;
  const inactivityWarningDisplay = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.inactivityWarningDisplay;
  const inactivityWarningTimeoutSecs = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.inactivityWarningTimeoutSecs;
  const {
    sidebarContentPanel,
    isOpen: sidebarContentIsOpen
  } = sidebarContent;
  const {
    sidebarNavPanel,
    isOpen: sidebarNavigationIsOpen
  } = sidebarNavigation;
  const {
    isOpen
  } = presentation;
  const presentationIsOpen = isOpen;
  const {
    focusedId
  } = cameraDock;
  const connected = useReactiveVar(connectionStatus.getConnectedStatusVar());
  useEffect(() => {
    if (layoutContextDispatch && typeof meetingLayout !== 'undefined' && layoutType.current !== meetingLayout && sharedNotesInput !== null && sharedNotesInput !== void 0 && sharedNotesInput.isPinned) {
      layoutType.current = meetingLayout;
      MediaService.setPresentationIsOpen(layoutContextDispatch, true);
    }
  }, [meetingLayout, layoutContextDispatch, layoutType]);
  useEffect(() => {
    layoutContextDispatch({
      type: ACTIONS.SET_LAYOUT_TYPE,
      value: selectedLayout
    });
  }, [selectedLayout]);
  const horizontalPosition = cameraDock.position === 'contentLeft' || cameraDock.position === 'contentRight';
  // this is not exactly right yet
  let presentationVideoRate;
  if (horizontalPosition) {
    presentationVideoRate = cameraDock.width / window.innerWidth;
  } else {
    presentationVideoRate = cameraDock.height / window.innerHeight;
  }
  presentationVideoRate = parseFloat(presentationVideoRate.toFixed(2));
  const setPushLayout = () => {
    setSyncWithPresenterLayout({
      variables: {
        syncWithPresenterLayout: pushLayout
      }
    });
  };
  const setMeetingLayout = () => {
    const {
      isResizing
    } = cameraDockInput;
    setMeetingLayoutProps({
      variables: {
        layout: selectedLayout,
        syncWithPresenterLayout: pushLayout,
        presentationIsOpen,
        isResizing,
        cameraPosition: cameraDock.position || 'contentTop',
        focusedCamera: focusedId,
        presentationVideoRate
      }
    });
  };
  const isSharingVideo = currentMeeting === null || currentMeeting === void 0 ? void 0 : currentMeeting.componentsFlags.hasExternalVideo;
  useEffect(() => {
    MediaService.buildLayoutWhenPresentationAreaIsDisabled(layoutContextDispatch, isSharingVideo, sharedNotesInput === null || sharedNotesInput === void 0 ? void 0 : sharedNotesInput.isPinned, isThereWebcam, isScreenSharingEnabled, isPresentationEnabled);
  });
  useEffect(() => {
    if (isSharingVideo && !hasExternalVideoOnLayout) {
      layoutContextDispatch({
        type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
        value: {
          content: PRESENTATION_AREA.EXTERNAL_VIDEO,
          open: true
        }
      });
      layoutContextDispatch({
        type: ACTIONS.SET_HAS_EXTERNAL_VIDEO,
        value: true
      });
    } else if (hasExternalVideoOnLayout) {
      layoutContextDispatch({
        type: ACTIONS.SET_HAS_EXTERNAL_VIDEO,
        value: false
      });
    }
  }, [isSharingVideo]);
  const shouldShowExternalVideo = isExternalVideoEnabled && isSharingVideo;
  const shouldShowGenericMainContent = !!genericMainContent.genericContentId;
  const validateEnforceLayout = currUser => {
    const layoutTypes = Object.keys(LAYOUT_TYPE);
    const enforceLayout = currUser === null || currUser === void 0 ? void 0 : currUser.enforceLayout;
    return enforceLayout && layoutTypes.includes(enforceLayout) ? enforceLayout : null;
  };
  const shouldShowScreenshare = (viewScreenshare || isPresenter) && ((currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$compo = currentMeeting.componentsFlags) === null || _currentMeeting$compo === void 0 ? void 0 : _currentMeeting$compo.hasScreenshare) || (currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$compo2 = currentMeeting.componentsFlags) === null || _currentMeeting$compo2 === void 0 ? void 0 : _currentMeeting$compo2.hasCameraAsContent));
  const shouldShowPresentation = !shouldShowScreenshare && !isSharedNotesPinned && !shouldShowExternalVideo && !shouldShowGenericMainContent && (presentationIsOpen || presentationRestoreOnUpdate) && isPresentationEnabled;
  useEffect(() => {
    setSpeechOptions(partialUtterances, minUtteranceLength);
  }, [partialUtterances, minUtteranceLength]);

  // Update after editing app savings
  useEffect(() => {
    setSpeechOptions(partialUtterances, minUtteranceLength);
  }, [partialUtterances, minUtteranceLength]);
  const customStyleUrl = getFromUserSettings('bbb_custom_style_url', false) || window.meetingClientSettings.public.app.customStyleUrl;
  if (!currentUserData) return null;
  return currentUser !== null && currentUser !== void 0 && currentUser.userId ? /*#__PURE__*/React.createElement(App, _extends({
    presentationRestoreOnUpdate,
    hidePresentationOnJoin: getFromUserSettings('bbb_hide_presentation_on_join', LAYOUT_CONFIG.hidePresentationOnJoin),
    hideActionsBar: getFromUserSettings('bbb_hide_actions_bar', false),
    hideNavBar: getFromUserSettings('bbb_hide_nav_bar', false),
    customStyle: getFromUserSettings('bbb_custom_style', false),
    isPhone: deviceInfo.isPhone,
    isRTL: document.documentElement.getAttribute('dir') === 'rtl',
    currentUserEmoji: currentUserEmoji(currentUser),
    currentUserAway: currentUser.away,
    currentUserRaiseHand: currentUser.raiseHand,
    currentUserId: currentUser.userId,
    User: currentUser,
    customStyleUrl,
    connected,
    actionsBarStyle,
    captionsStyle,
    setPushLayout,
    setMeetingLayout,
    meetingLayout,
    selectedLayout,
    pushLayout,
    pushLayoutMeeting,
    meetingLayoutUpdatedAt,
    presentationIsOpen,
    cameraPosition: cameraDock.position,
    focusedCamera: focusedId,
    presentationVideoRate,
    cameraWidth: cameraDock.width,
    cameraHeight: cameraDock.height,
    cameraIsResizing: cameraDockInput.isResizing,
    meetingPresentationIsOpen,
    isMeetingLayoutResizing,
    meetingLayoutCameraPosition,
    meetingLayoutFocusedCamera,
    meetingLayoutVideoRate,
    horizontalPosition,
    deviceType,
    layoutContextDispatch,
    sidebarNavPanel,
    sidebarNavigationIsOpen,
    sidebarContentPanel,
    sidebarContentIsOpen,
    shouldShowExternalVideo,
    isPresenter,
    numCameras: cameraDockInput.numCameras,
    enforceLayout: validateEnforceLayout(currentUserData),
    speechLocale: currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.speechLocale,
    isModerator,
    shouldShowScreenshare,
    isSharedNotesPinned,
    shouldShowPresentation,
    setLocalSettings,
    genericMainContentId: genericMainContent.genericContentId,
    audioCaptions: /*#__PURE__*/React.createElement(AudioCaptionsLiveContainer, null),
    inactivityWarningDisplay,
    inactivityWarningTimeoutSecs,
    setSpeechOptions,
    audioAlertEnabled,
    pushAlertEnabled,
    darkTheme,
    fontSize,
    isLargeFont,
    ignorePollNotifications,
    muteMicrophone,
    isPresentationEnabled
  }, otherProps)) : null;
};
module.exportDefault(AppContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/app/mutations.jsx                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  SET_SYNC_WITH_PRESENTER_LAYOUT: () => SET_SYNC_WITH_PRESENTER_LAYOUT,
  SET_LAYOUT_PROPS: () => SET_LAYOUT_PROPS
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const SET_SYNC_WITH_PRESENTER_LAYOUT = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation SetSyncWithPresenterLayout($syncWithPresenterLayout: Boolean!) {\n    meetingLayoutSetSyncWithPresenterLayout(\n      syncWithPresenterLayout: $syncWithPresenterLayout,\n    )\n  }\n"])));
const SET_LAYOUT_PROPS = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation SetLayoutProps($layout: String!, $syncWithPresenterLayout: Boolean!, $presentationIsOpen: Boolean!, $isResizing: Boolean!, $cameraPosition: String!, $focusedCamera: String!, $presentationVideoRate: Float!) {\n    meetingLayoutSetProps(\n      layout: $layout,\n      syncWithPresenterLayout: $syncWithPresenterLayout,\n      presentationIsOpen: $presentationIsOpen,\n      isResizing: $isResizing,\n      cameraPosition: $cameraPosition,\n      focusedCamera: $focusedCamera,\n      presentationVideoRate: $presentationVideoRate,\n    )\n  }\n"])));
module.exportDefault({
  SET_SYNC_WITH_PRESENTER_LAYOUT,
  SET_LAYOUT_PROPS
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/app/service.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  useMeetingIsBreakout: () => useMeetingIsBreakout,
  setDarkTheme: () => setDarkTheme,
  isDarkThemeEnabled: () => isDarkThemeEnabled
});
let DarkReader;
module.link("darkreader", {
  default(v) {
    DarkReader = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
let useMeeting;
module.link("../../core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 3);
function useMeetingIsBreakout() {
  const {
    data: meeting
  } = useMeeting(m => ({
    isBreakout: m.isBreakout
  }));
  return meeting && meeting.isBreakout;
}
const setDarkTheme = value => {
  if (value && !DarkReader.isEnabled()) {
    DarkReader.enable({
      brightness: 100,
      contrast: 90
    }, {
      invert: [Styled.DtfInvert],
      ignoreInlineStyle: [Styled.DtfCss],
      ignoreImageAnalysis: [Styled.DtfImages]
    });
    logger.info({
      logCode: 'dark_mode'
    }, 'Dark mode is on.');
  }
  if (!value && DarkReader.isEnabled()) {
    DarkReader.disable();
    logger.info({
      logCode: 'dark_mode'
    }, 'Dark mode is off.');
  }
};
const isDarkThemeEnabled = () => DarkReader.isEnabled();
module.exportDefault({
  setDarkTheme,
  isDarkThemeEnabled,
  useMeetingIsBreakout
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/app/styles.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let barsPadding;
module.link("/imports/ui/stylesheets/styled-components/general", {
  barsPadding(v) {
    barsPadding = v;
  }
}, 1);
let FlexColumn;
module.link("/imports/ui/stylesheets/styled-components/placeholders", {
  FlexColumn(v) {
    FlexColumn = v;
  }
}, 2);
let colorBackground;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorBackground(v) {
    colorBackground = v;
  }
}, 3);
const CaptionsWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: auto;\n  bottom: 100px;\n  left: 20%;\n  z-index: 5;\n  pointer-events: none;\n  user-select:none;\n"])));
const ActionsBar = styled.section(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  flex: 1;\n  padding: ", ";\n  background-color: ", ";\n  position: relative;\n  order: 3;\n"])), barsPadding, colorBackground);
const Layout = styled(FlexColumn)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const DtfInvert = "\n  body {\n    background-color: var(--darkreader-neutral-background) !important;\n  }\n  header[id=\"Navbar\"] {\n    background-color: var(--darkreader-neutral-background) !important;\n  }\n  section[id=\"ActionsBar\"] {\n    background-color: var(--darkreader-neutral-background) !important;\n  }\n  select {\n    border: 0.1rem solid #FFFFFF !important;\n  }\n  select[data-test=\"skipSlide\"] {\n    border: unset !important;\n  }\n  div[data-test=\"presentationContainer\"] {\n    background-color: var(--darkreader-neutral-background) !important;\n  }\n  select {\n    border-top: unset !important;\n    border-right: unset !important;\n    border-left: unset !important;\n  }\n  .tl-container {\n    background-color: var(--tl-background) !important;\n  }\n  #TD-Tools button, #TD-TopPanel-Undo, #TD-TopPanel-Redo, #TD-Styles {\n    border-color: transparent !important;\n  }\n  [id=\"TD-StylesMenu\"],\n  [id=\"TD-Styles-Color-Container\"],\n  div[data-test=\"brandingArea\"],\n  #connectionBars > div\n";
const DtfCss = "\n  [id=\"colorPicker\"],\n  path,\n  svg\n";
const DtfImages = "\n  svg\n";
module.exportDefault({
  CaptionsWrapper,
  ActionsBar,
  Layout,
  DtfInvert,
  DtfCss,
  DtfImages
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"common":{"button":{"base":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/button/base/component.jsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
module.export({
  default: () => ButtonBase
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let omit;
module.link("radash", {
  omit(v) {
    omit = v;
  }
}, 2);
const propTypes = {
  /**
   * Defines HTML disable Attribute
   * @defaultValue false
   */
  disabled: PropTypes.bool,
  /**
   * Defines HTML Tag
   * @defaultValue 'button'
   */
  tagName: PropTypes.string,
  /**
   * Defines the button label
   * @defaultValue undefined
   */
  label: PropTypes.string.isRequired,
  /**
   * Defines the button click handler
   * @defaultValue undefined
   */
  onClick: (props, propName, componentName) => {
    if (!props.onClick && !props.onMouseDown && !props.onMouseUp) {
      return new Error('One of props \'onClick\' or \'onMouseDown\' or' + " 'onMouseUp' was not specified in '".concat(componentName, "'."));
    }
    return null;
  },
  onMouseDown: (props, propName, componentName) => {
    if (!props.onClick && !props.onMouseDown && !props.onMouseUp) {
      return new Error('One of props \'onClick\' or \'onMouseDown\' or' + " 'onMouseUp' was not specified in '".concat(componentName, "'."));
    }
    return null;
  },
  onMouseUp: (props, propName, componentName) => {
    if (!props.onClick && !props.onMouseDown && !props.onMouseUp) {
      return new Error('One of props \'onClick\' or \'onMouseDown\' or' + " 'onMouseUp' was not specified in '".concat(componentName, "'."));
    }
    return null;
  },
  onKeyPress: PropTypes.func,
  onKeyDown: PropTypes.func,
  onKeyUp: PropTypes.func,
  setRef: PropTypes.func
};
const defaultProps = {
  disabled: false,
  tagName: 'button',
  onClick: undefined,
  onMouseDown: undefined,
  onMouseUp: undefined,
  onKeyPress: undefined,
  onKeyDown: undefined,
  onKeyUp: undefined,
  setRef: undefined
};

/**
 * Event handlers below are used to intercept a parent event handler from
 * firing when the Button is disabled.
 * Key press event handlers intercept firing for
 * keyboard users to comply with ARIA standards.
 */

class ButtonBase extends React.Component {
  constructor(props) {
    super(props);

    // Bind Mouse Event Handlers
    this.internalClickHandler = this.internalClickHandler.bind(this);
    this.internalDoubleClickHandler = this.internalDoubleClickHandler.bind(this);
    this.internalMouseDownHandler = this.internalMouseDownHandler.bind(this);
    this.internalMouseUpHandler = this.internalMouseUpHandler.bind(this);

    // Bind Keyboard Event Handlers
    this.internalKeyPressHandler = this.internalKeyPressHandler.bind(this);
    this.internalKeyDownHandler = this.internalKeyDownHandler.bind(this);
    this.internalKeyUpHandler = this.internalKeyUpHandler.bind(this);
  }
  validateDisabled(eventHandler) {
    if (!this.props.disabled && typeof eventHandler === 'function') {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return eventHandler(...args);
    }
    return null;
  }

  // Define Mouse Event Handlers
  internalClickHandler() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return this.validateDisabled(this.props.onClick, ...args);
  }
  internalDoubleClickHandler() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return this.validateDisabled(this.props.onDoubleClick, ...args);
  }
  internalMouseDownHandler() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return this.validateDisabled(this.props.onMouseDown, ...args);
  }
  internalMouseUpHandler() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    return this.validateDisabled(this.props.onMouseUp, ...args);
  }

  // Define Keyboard Event Handlers
  internalKeyPressHandler() {
    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }
    return this.validateDisabled(this.props.onKeyPress, ...args);
  }
  internalKeyDownHandler() {
    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }
    return this.validateDisabled(this.props.onKeyDown, ...args);
  }
  internalKeyUpHandler() {
    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }
    return this.validateDisabled(this.props.onKeyUp, ...args);
  }
  render() {
    const Component = this.props.tagName;
    const remainingProps = Object.assign({}, this.props);
    delete remainingProps.label;
    delete remainingProps.tagName;
    delete remainingProps.disabled;

    // Delete Mouse event handlers
    delete remainingProps.onClick;
    delete remainingProps.onDoubleClick;
    delete remainingProps.onMouseDown;
    delete remainingProps.onMouseUp;

    // Delete Keyboard event handlers
    delete remainingProps.onKeyPress;
    delete remainingProps.onKeyDown;
    delete remainingProps.onKeyUp;

    // Delete setRef callback if it exists
    delete remainingProps.setRef;
    const styleProps = ['ghost', 'circle', 'block', 'hasNotification', 'isStyled', 'isDownloadable', 'animations', 'small', 'full', 'iconRight', 'isVisualEffects', 'panning', 'panSelected'];
    return /*#__PURE__*/React.createElement(Component, _extends({
      ref: this.props.setRef,
      "aria-label": this.props.label,
      "aria-disabled": this.props.disabled

      // Render Mouse event handlers
      ,
      onClick: this.internalClickHandler,
      onDoubleClick: this.internalDoubleClickHandler,
      onMouseDown: this.internalMouseDownHandler,
      onMouseUp: this.internalMouseUpHandler

      // Render Keyboard event handlers
      ,
      onKeyPress: this.internalKeyPressHandler,
      onKeyDown: this.internalKeyDownHandler,
      onKeyUp: this.internalKeyUpHandler

      // remove props used in styled-components
    }, omit(remainingProps, styleProps)), this.props.children);
  }
}
ButtonBase.propTypes = propTypes;
ButtonBase.defaultProps = defaultProps;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"button-emoji":{"ButtonEmoji.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/button/button-emoji/ButtonEmoji.jsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["hideLabel", "className", "hidden", "rotate"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let TooltipContainer;
module.link("/imports/ui/components/common/tooltip/container", {
  default(v) {
    TooltipContainer = v;
  }
}, 3);
const propTypes = {
  /**
   * Defines the name of the emoji to be used, as defined in bbb-icons.css
   * @type String
   * @defaultValue ''
   */
  emoji: PropTypes.string,
  label: PropTypes.string,
  onClick: PropTypes.func,
  onKeyDown: PropTypes.func,
  onFocus: PropTypes.func,
  tabIndex: PropTypes.number,
  hideLabel: PropTypes.bool,
  className: PropTypes.string,
  rotate: PropTypes.bool
};
const ButtonEmoji = props => {
  const {
      hideLabel = false,
      className = '',
      hidden,
      rotate = false
    } = props,
    newProps = _objectWithoutProperties(props, _excluded);
  const {
    emoji = '',
    label = '',
    tabIndex = -1,
    onClick = null,
    onKeyDown = null,
    onFocus = null
  } = newProps;
  const IconComponent = /*#__PURE__*/React.createElement(Styled.EmojiButtonIcon, {
    iconName: emoji,
    rotate: rotate
  });
  return /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(Styled.EmojiButtonSpace, {
    hidden: hidden
  }), /*#__PURE__*/React.createElement(TooltipContainer, {
    title: label
  }, /*#__PURE__*/React.createElement(Styled.EmojiButton, _extends({
    type: "button",
    tabIndex: tabIndex
  }, newProps, {
    "aria-label": label,
    onClick: onClick,
    onKeyDown: onKeyDown,
    onFocus: onFocus,
    className: className
  }), /*#__PURE__*/React.createElement(Styled.Label, null, !hideLabel && label, IconComponent))));
};
module.exportDefault(ButtonEmoji);
ButtonEmoji.propTypes = propTypes;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/button/button-emoji/styles.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 1);
let btnDefaultColor, btnDefaultBg, colorBackground;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  btnDefaultColor(v) {
    btnDefaultColor = v;
  },
  btnDefaultBg(v) {
    btnDefaultBg = v;
  },
  colorBackground(v) {
    colorBackground = v;
  }
}, 2);
let btnSpacing;
module.link("/imports/ui/stylesheets/styled-components/general", {
  btnSpacing(v) {
    btnSpacing = v;
  }
}, 3);
const EmojiButtonIcon = styled(Icon)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  height: 40%;\n  left: 0;\n  width: 75%;\n  margin-left: 14%;\n  font-size: 50%;\n  margin-top: 30%;\n  color: ", ";\n"])), btnDefaultColor);
const Label = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  & + i,\n  & + button {\n    margin: 0 0 0 ", ";\n\n    [dir=\"rtl\"] & {\n      margin: 0 ", " 0 0;\n    }\n  }\n  &:hover {\n    opacity: .5;\n  }\n"])), btnSpacing, btnSpacing);
const EmojiButton = styled.button(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: absolute;\n  border-radius: 50%;\n  width: 1em;\n  height: 1em;\n  right: -.2em;\n  bottom: 0;\n  background-color: ", ";\n  overflow: hidden;\n  z-index: 2;\n  border: none;\n  padding: 0;\n\n  [dir=\"rtl\"] & {\n    right: initial;\n    left: -.2em;\n  }\n\n  &:hover {\n    transform: scale(1.5);\n    transition-duration: 150ms;\n  }\n\n  & > i {\n    position: absolute;\n    top: 0;\n    height: 60%;\n    left: 0;\n    margin-left: 25%;\n    font-size: 50%;\n    margin-top: 40%;\n    color: ", ";\n  }\n"])), btnDefaultBg, btnDefaultColor);
const EmojiButtonSpace = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: absolute;\n  height: 1.4em;\n  width: 1.4em;\n  background-color: ", ";\n  right: -.4em;\n  bottom: -.2em;\n  border-radius: 50%;\n\n  [dir=\"rtl\"] & {\n    right: initial;\n    left: -.4em;\n  }\n"])), colorBackground);
module.exportDefault({
  EmojiButtonIcon,
  Label,
  EmojiButton,
  EmojiButtonSpace
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/button/component.jsx                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["className", "iconRight", "size", "color", "ghost", "circle", "block"],
  _excluded2 = ["className", "size", "iconRight", "children", "color", "ghost", "circle", "block"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 2);
module.export({
  default: () => Button
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let cx;
module.link("classnames", {
  default(v) {
    cx = v;
  }
}, 2);
let TooltipContainer;
module.link("/imports/ui/components/common/tooltip/container", {
  default(v) {
    TooltipContainer = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let BaseButton;
module.link("./base/component", {
  default(v) {
    BaseButton = v;
  }
}, 5);
let ButtonEmoji;
module.link("./button-emoji/ButtonEmoji", {
  default(v) {
    ButtonEmoji = v;
  }
}, 6);
const SIZES = ['jumbo', 'lg', 'md', 'sm'];
const COLORS = ['default', 'primary', 'danger', 'warning', 'success', 'dark', 'light', 'offline', 'muted', 'secondary'];
const propTypes = _objectSpread(_objectSpread({}, BaseButton.propTypes), {}, {
  /**
   * Defines the button size style
   * @type {("lg"|"md"|"sm")}
   * @defaultValue 'md'
   */
  size: PropTypes.oneOf(SIZES),
  /**
   * Defines the button color style
   * @type {("default"|"primary"|"danger"|"success")}
   * @defaultValue 'md'
   */
  color: PropTypes.oneOf(COLORS),
  /**
   * Defines if the button should be styled as a ghost (outline)
   * @defaultValue false
   */
  ghost: PropTypes.bool,
  /**
   * Defines if the button should be styled as circle
   * @defaultValue false
   */
  circle: PropTypes.bool,
  /**
   * Defines if the button should have `display: block`
   * @defaultValue false
   */
  block: PropTypes.bool,
  /**
   * Defines the button icon
   * @defaultValue undefined
   */
  icon: PropTypes.string,
  /**
   * Defines the button icon is on the right side
   * @defaultValue false
   */
  iconRight: PropTypes.bool,
  /**
   * Defines the button label should be visible
   * @defaultValue false
   */
  hideLabel: PropTypes.bool,
  /**
   * Optional SVG / html object can be passed to the button as an icon
   * Has to be styled before being sent to the Button
   * (e.g width, height, position and percentage-based object's coordinates)
   * @defaultvalue undefined
   */
  customIcon: PropTypes.node
});
const defaultProps = _objectSpread(_objectSpread({}, BaseButton.defaultProps), {}, {
  size: 'md',
  color: 'default',
  ghost: false,
  circle: false,
  block: false,
  iconRight: false,
  hideLabel: false,
  tooltipLabel: ''
});
class Button extends BaseButton {
  _cleanProps(otherProps) {
    const remainingProps = Object.assign({}, otherProps);
    delete remainingProps.icon;
    delete remainingProps.customIcon;
    delete remainingProps.size;
    delete remainingProps.color;
    delete remainingProps.ghost;
    delete remainingProps.circle;
    delete remainingProps.block;
    delete remainingProps.hideLabel;
    delete remainingProps.tooltipLabel;
    return remainingProps;
  }
  hasButtonEmojiComponent() {
    const {
      children
    } = this.props;
    if (!children) return false;
    const buttonEmoji = React.Children.only(children);
    return buttonEmoji && buttonEmoji.type && buttonEmoji.type.name ? buttonEmoji.type.name === ButtonEmoji.name : false;
  }
  render() {
    const {
      circle,
      hideLabel,
      label,
      'aria-label': ariaLabel,
      'aria-expanded': ariaExpanded,
      tooltipLabel,
      tooltipdelay,
      tooltipplacement
    } = this.props;
    const renderFuncName = circle ? 'renderCircle' : 'renderDefault';
    if (hideLabel && !ariaExpanded || tooltipLabel) {
      const buttonLabel = label || ariaLabel;
      return /*#__PURE__*/React.createElement(TooltipContainer, {
        title: tooltipLabel || buttonLabel,
        delay: tooltipdelay,
        placement: tooltipplacement
      }, this[renderFuncName]());
    }
    return this[renderFuncName]();
  }
  renderDefault() {
    const _this$props = this.props,
      {
        className,
        iconRight,
        size,
        color,
        ghost,
        circle,
        block
      } = _this$props,
      otherProps = _objectWithoutProperties(_this$props, _excluded);
    const remainingProps = this._cleanProps(otherProps);
    return /*#__PURE__*/React.createElement(Styled.Button, _extends({
      size: size,
      color: color,
      ghost: ghost,
      circle: circle,
      block: block,
      className: className,
      iconRight: iconRight
    }, remainingProps), this.renderIcon(), this.renderLabel());
  }
  renderCircle() {
    const _this$props2 = this.props,
      {
        className,
        size,
        iconRight,
        children,
        color,
        ghost,
        circle,
        block
      } = _this$props2,
      otherProps = _objectWithoutProperties(_this$props2, _excluded2);
    const remainingProps = this._cleanProps(otherProps);
    return /*#__PURE__*/React.createElement(Styled.ButtonWrapper, _extends({
      size: size,
      className: cx(size, 'buttonWrapper', className),
      color: color,
      ghost: ghost,
      circle: circle,
      block: block
    }, remainingProps), this.renderButtonEmojiSibling(), !iconRight ? null : this.renderLabel(), /*#__PURE__*/React.createElement(Styled.ButtonSpan, {
      size: size,
      color: color,
      ghost: ghost,
      circle: circle,
      block: block
    }, this.renderIcon()), iconRight ? null : this.renderLabel(), this.hasButtonEmojiComponent() ? children : null);
  }
  renderButtonEmojiSibling() {
    if (!this.hasButtonEmojiComponent()) {
      return null;
    }
    return /*#__PURE__*/React.createElement(Styled.EmojiButtonSibling, null);
  }
  renderIcon() {
    const {
      icon: iconName,
      customIcon
    } = this.props;
    if (iconName) {
      return /*#__PURE__*/React.createElement(Styled.ButtonIcon, {
        iconName: iconName
      });
    }
    if (customIcon) {
      return customIcon;
    }
    return null;
  }
  renderLabel() {
    const {
      label,
      hideLabel
    } = this.props;
    if (!label) return null;
    return /*#__PURE__*/React.createElement(Styled.ButtonLabel, {
      hideLabel: hideLabel
    }, label, !this.hasButtonEmojiComponent() ? this.props.children : null);
  }
}
Button.propTypes = propTypes;
Button.defaultProps = defaultProps;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/button/styles.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 1);
let btnSpacing, borderRadius, borderSizeSmall, borderSize, borderSizeLarge, smPaddingY, smPaddingX, mdPaddingY, mdPaddingX, lgPaddingY, lgPaddingX, jumboPaddingY, jumboPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  btnSpacing(v) {
    btnSpacing = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  borderSizeSmall(v) {
    borderSizeSmall = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  lgPaddingX(v) {
    lgPaddingX = v;
  },
  jumboPaddingY(v) {
    jumboPaddingY = v;
  },
  jumboPaddingX(v) {
    jumboPaddingX = v;
  }
}, 2);
let fontSizeSmall, fontSizeBase, fontSizeLarge, btnFontWeight;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  },
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  fontSizeLarge(v) {
    fontSizeLarge = v;
  },
  btnFontWeight(v) {
    btnFontWeight = v;
  }
}, 3);
let btnDefaultColor, btnDefaultBg, btnDefaultGhostColor, btnDefaultGhostBg, btnDefaultGhostActiveBg, btnDefaultGhostBorder, btnPrimaryBorder, btnPrimaryColor, btnPrimaryBg, btnPrimaryHoverBg, btnPrimaryActiveBg, btnSuccessBorder, btnSuccessColor, btnSuccessBg, btnWarningBorder, btnWarningColor, btnWarningBg, btnDangerBorder, btnDangerColor, btnDangerBg, btnDangerBgHover, btnDarkBorder, btnDarkColor, btnDarkBg, btnOfflineBorder, btnOfflineColor, btnOfflineBg, btnMutedBorder, btnMutedColor, btnMutedBg, colorWhite, colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  btnDefaultColor(v) {
    btnDefaultColor = v;
  },
  btnDefaultBg(v) {
    btnDefaultBg = v;
  },
  btnDefaultGhostColor(v) {
    btnDefaultGhostColor = v;
  },
  btnDefaultGhostBg(v) {
    btnDefaultGhostBg = v;
  },
  btnDefaultGhostActiveBg(v) {
    btnDefaultGhostActiveBg = v;
  },
  btnDefaultGhostBorder(v) {
    btnDefaultGhostBorder = v;
  },
  btnPrimaryBorder(v) {
    btnPrimaryBorder = v;
  },
  btnPrimaryColor(v) {
    btnPrimaryColor = v;
  },
  btnPrimaryBg(v) {
    btnPrimaryBg = v;
  },
  btnPrimaryHoverBg(v) {
    btnPrimaryHoverBg = v;
  },
  btnPrimaryActiveBg(v) {
    btnPrimaryActiveBg = v;
  },
  btnSuccessBorder(v) {
    btnSuccessBorder = v;
  },
  btnSuccessColor(v) {
    btnSuccessColor = v;
  },
  btnSuccessBg(v) {
    btnSuccessBg = v;
  },
  btnWarningBorder(v) {
    btnWarningBorder = v;
  },
  btnWarningColor(v) {
    btnWarningColor = v;
  },
  btnWarningBg(v) {
    btnWarningBg = v;
  },
  btnDangerBorder(v) {
    btnDangerBorder = v;
  },
  btnDangerColor(v) {
    btnDangerColor = v;
  },
  btnDangerBg(v) {
    btnDangerBg = v;
  },
  btnDangerBgHover(v) {
    btnDangerBgHover = v;
  },
  btnDarkBorder(v) {
    btnDarkBorder = v;
  },
  btnDarkColor(v) {
    btnDarkColor = v;
  },
  btnDarkBg(v) {
    btnDarkBg = v;
  },
  btnOfflineBorder(v) {
    btnOfflineBorder = v;
  },
  btnOfflineColor(v) {
    btnOfflineColor = v;
  },
  btnOfflineBg(v) {
    btnOfflineBg = v;
  },
  btnMutedBorder(v) {
    btnMutedBorder = v;
  },
  btnMutedColor(v) {
    btnMutedColor = v;
  },
  btnMutedBg(v) {
    btnMutedBg = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorGray(v) {
    colorGray = v;
  }
}, 4);
let BaseButton;
module.link("./base/component", {
  default(v) {
    BaseButton = v;
  }
}, 5);
const ButtonIcon = styled(Icon)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  width: 1em;\n  height: 1em;\n  text-align: center;\n\n  &:before {\n    width: 1em;\n    height: 1em;\n  }\n\n  .buttonWrapper & {\n    font-size: 125%;\n  }\n\n  & + span {\n    margin: 0 0 0 ", ";\n\n    [dir=\"rtl\"] & {\n      margin: 0 ", " 0 0;\n    }\n  }\n"])), btnSpacing, btnSpacing);
const EmojiButtonSibling = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: 0;\n"])));
const ButtonLabel = styled.span(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  & + i,\n  & + button {\n    margin: 0 0 0 ", ";\n\n    [dir=\"rtl\"] & {\n      margin: 0 ", " 0 0;\n    }\n  }\n  &:hover,\n  .buttonWrapper:hover & {\n    opacity: .5;\n  }\n\n  ", "\n"])), btnSpacing, btnSpacing, _ref => {
  let {
    hideLabel
  } = _ref;
  return hideLabel && "\n    font-size: 0;\n    height: 0;\n    width: 0;\n    margin: 0 !important;\n    padding: 0 !important;\n    overflow: hidden;\n    display: none !important;\n  ";
});
const ButtonWrapper = styled(BaseButton)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  border: none;\n  overflow: visible !important;\n  display: inline-block;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n\n  &:focus {\n    outline-style: solid;\n  }\n\n  &:-moz-focusring {\n    outline-color: transparent;\n    outline-offset: ", ";\n  }\n\n  &:active {\n    &:focus {\n      span:first-of-type::before {\n        border-radius: 50%;\n        outline: transparent;\n        outline-width: ", ";\n        outline-style: solid;\n      }\n    }\n  }\n\n  line-height: 1.5;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  background: none;\n  padding: 0 !important;\n\n  &[aria-disabled=\"true\"] > span {\n    cursor: not-allowed;\n    opacity: .65;\n    box-shadow: none;\n  }\n\n  & > span {\n    display: block;\n    text-align: center;\n    white-space: nowrap;\n    border: ", " solid transparent;\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), borderSize, borderRadius, borderSize, borderSizeSmall, _ref2 => {
  let {
    size
  } = _ref2;
  return size === 'sm' && "\n    font-size: calc(".concat(fontSizeSmall, " * .85);\n    padding: ").concat(smPaddingY, " ").concat(smPaddingX, ";\n\n    & > span {\n      border: ").concat(borderSizeLarge, " solid transparent;\n    }\n\n    & > label {\n      display: inline-block;\n      margin: 0 0 0 ").concat(btnSpacing, ";\n\n      [dir=\"rtl\"] & {\n        margin:0 ").concat(btnSpacing, " 0 0;\n      }\n    }\n  ");
}, _ref3 => {
  let {
    size
  } = _ref3;
  return size === 'md' && "\n    font-size: calc(".concat(fontSizeBase, " * .85);\n    padding: ").concat(mdPaddingY, " ").concat(mdPaddingX, ";\n\n    & > span {\n      border: ").concat(borderSizeLarge, " solid transparent;\n    }\n  ");
}, _ref4 => {
  let {
    size
  } = _ref4;
  return size === 'lg' && "\n    font-size: ".concat(fontSizeBase, ";\n    padding: ").concat(lgPaddingY, " ").concat(lgPaddingX, ";\n  ");
}, _ref5 => {
  let {
    size
  } = _ref5;
  return size === 'jumbo' && "\n    font-size: 3rem;\n    padding: ".concat(jumboPaddingY, " ").concat(jumboPaddingX, ";\n  ");
}, _ref6 => {
  let {
    size,
    circle,
    color
  } = _ref6;
  return size === 'lg' && circle && color === 'primary' && "\n    &:focus:not([aria-disabled=\"true\"]){\n      & > span{\n        color: ".concat(btnPrimaryColor, ";\n        background-color: ").concat(btnPrimaryBg, ";\n        background-clip: padding-box;\n        box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnPrimaryBorder, ";\n      }\n    }\n\n    &:hover{\n      & > span{\n        filter: brightness(90%);\n        color: ").concat(btnPrimaryColor, ";\n        background-color: ").concat(btnPrimaryHoverBg, " !important;\n      }\n    }\n\n    &:active:focus{\n      & > span{\n        filter: brightness(85%);\n        color: ").concat(btnPrimaryColor, ";\n        background-color: ").concat(btnPrimaryActiveBg, ";\n      }\n    }\n\n    &:active{\n      & > span{\n        filter: brightness(85%);\n        color: ").concat(btnPrimaryColor, ";\n        background-color: ").concat(btnPrimaryActiveBg, ";\n      }\n    }\n  ");
}, _ref7 => {
  let {
    size,
    circle,
    ghost,
    color
  } = _ref7;
  return size === 'lg' && circle && ghost && color === 'default' && "\n    span {\n      box-shadow: 0 0 1px 0px ".concat(btnDefaultGhostColor, " inset, 0 0 1px 0px ").concat(btnDefaultGhostColor, ";\n      background-color: transparent !important;\n      border-color: ").concat(btnDefaultGhostColor, " !important;\n    }\n\n    & > span{\n      color: ").concat(btnDefaultGhostColor, ";\n    }\n\n    &:focus:not([aria-disabled=\"true\"]){\n      & > span{\n        background-color: ").concat(btnDefaultGhostBg, " !important;\n        background-clip: padding-box;\n        box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnDefaultGhostBorder, ";\n        border-color: transparent !important;\n      }\n    }\n\n    &:hover{\n      & > span{\n        filter: brightness(85%);\n        background-color: ").concat(btnDefaultGhostBg, " !important;\n      }\n    }\n\n    &:active:focus{\n      & > span{\n        filter: brightness(85%);\n        background-color: ").concat(btnDefaultGhostActiveBg, " !important;\n      }\n    }\n\n    &:active{\n      & > span{\n        filter: brightness(85%);\n        background-color: ").concat(btnDefaultGhostActiveBg, ";\n      }\n    }\n  ");
}, _ref8 => {
  let {
    ghost
  } = _ref8;
  return ghost && "\n    & > span{\n      background-image: none;\n      background-color: transparent;\n    }\n  ";
});
const ButtonSpan = styled.span(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  border: none;\n  overflow: visible;\n  display: inline-block;\n  border-radius: ", ";\n  font-weight: ", ";\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  cursor: pointer;\n  user-select: none;\n\n  &:-moz-focusring {\n    outline: none;\n  }\n\n  &:hover,\n  &:focus {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n    text-decoration: none;\n  }\n\n  &:active,\n  &:focus {\n    outline: transparent;\n    outline-width: ", ";\n    outline-style: solid;\n  }\n\n  &:active {\n    background-image: none;\n  }\n\n  &[aria-disabled=\"true\"] {\n    cursor: not-allowed;\n    opacity: .65;\n    box-shadow: none;\n  }\n\n  &,\n  &:active {\n    &:focus {\n      span:first-of-type::before {\n        border-radius: ", ";\n      }\n    }\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), borderSize, btnFontWeight, borderSize, borderSize, borderSize, _ref9 => {
  let {
    size
  } = _ref9;
  return size === 'sm' && "\n    font-size: calc(".concat(fontSizeSmall, " * .85);\n    padding: ").concat(smPaddingY, " ").concat(smPaddingX, ";\n  ");
}, _ref10 => {
  let {
    size
  } = _ref10;
  return size === 'md' && "\n    font-size: calc(".concat(fontSizeBase, " * .85);\n    padding: ").concat(mdPaddingY, " ").concat(mdPaddingX, ";\n  ");
}, _ref11 => {
  let {
    size
  } = _ref11;
  return size === 'lg' && "\n    height: 3rem;\n    width: 3rem;\n    display: flex !important;\n    align-items: center;\n    justify-content: center;\n  ";
}, _ref12 => {
  let {
    size
  } = _ref12;
  return size === 'jumbo' && "\n    font-size: 3rem;\n    padding: ".concat(jumboPaddingY, " ").concat(jumboPaddingX, ";\n  ");
}, _ref13 => {
  let {
    size,
    color
  } = _ref13;
  return size === 'md' && color === 'light' && "\n    color: ".concat(colorGray, ";\n    \n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(colorGray, ";\n      box-shadow: 0 0 0 1px #CDD6E0 !important;\n      background-color: #DCE4EC !important;\n    }\n    \n    &:hover {\n      color: hsl(210, 13%, 20%) !important;\n      background-color: #DCE4EC !important;\n    }\n\n    &:active {\n      color: hsl(210, 13%, 20%) !important;\n      background-color: hsl(210, 30%, 80%) !important;\n    }\n\n    &:focus:hover {\n      color: hsl(210, 13%, 20%) !important;\n      box-shadow: 0 0 0 1px #CDD6E0 !important;\n      background-color: #DCE4EC !important;\n    }\n\n    &:focus:active {\n      color: hsl(210, 13%, 20%) !important;\n      box-shadow: 0 0 0 1px #CDD6E0 !important;\n      background-color: hsl(210, 30%, 80%) !important;\n    }\n  ");
}, _ref14 => {
  let {
    size,
    color
  } = _ref14;
  return size === 'md' && color === 'dark' && "\n    color: ".concat(colorWhite, ";\n    background: none !important;\n    \n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(colorWhite, ";\n      box-shadow: 0 0 0 1px ").concat(btnDefaultGhostBorder, " !important;\n      background-color: ").concat(btnDefaultGhostBg, " !important;\n    }\n    \n    &:hover {\n      color: hsl(0, 0%, 85%) !important;\n      background-color: ").concat(btnDefaultGhostBg, " !important;\n    }\n\n    &:active {\n      color: hsl(0, 0%, 85%) !important;\n      background-color: ").concat(btnDefaultGhostActiveBg, " !important;\n    }\n\n    &:focus:hover {\n      color: hsl(0, 0%, 85%) !important;\n      box-shadow: 0 0 0 1px ").concat(btnDefaultGhostBorder, " !important;\n      background-color: ").concat(btnDefaultGhostBg, " !important;\n    }\n\n    &:focus:active {\n      color: hsl(0, 0%, 85%) !important;\n      box-shadow: 0 0 0 1px ").concat(btnDefaultGhostBorder, " !important;\n      background-color: ").concat(btnDefaultGhostActiveBg, " !important;\n    }\n  ");
}, _ref15 => {
  let {
    color,
    ghost
  } = _ref15;
  return color === 'default' && !ghost && "\n    color: ".concat(btnDefaultColor, ";\n    background-color: ").concat(btnDefaultBg, ";\n    border: ").concat(borderSizeLarge, " solid transparent;\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnDefaultColor, ";\n      background-color: ").concat(btnDefaultBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnPrimaryBg, ";\n    }\n\n    &:hover & {\n      color: ").concat(btnDefaultBg, ";\n    }\n  ");
}, _ref16 => {
  let {
    color
  } = _ref16;
  return color === 'primary' && "\n    color: ".concat(btnPrimaryColor, ";\n    background-color: ").concat(btnPrimaryBg, ";\n    border: ").concat(borderSizeLarge, " solid transparent;\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnPrimaryColor, ";\n      background-color: ").concat(btnPrimaryBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnPrimaryBg, ";\n    }\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnPrimaryColor, ";\n    }\n  \n  ");
}, _ref17 => {
  let {
    color
  } = _ref17;
  return color === 'success' && "\n    color: ".concat(btnSuccessColor, ";\n    background-color: ").concat(btnSuccessBg, ";\n    border: ").concat(borderSizeLarge, " solid transparent;\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnSuccessColor, ";\n      background-color: ").concat(btnSuccessBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnSuccessBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnSuccessColor, ";\n    }\n  ");
}, _ref18 => {
  let {
    color
  } = _ref18;
  return color === 'warning' && "\n    color: ".concat(btnWarningColor, ";\n    background-color: ").concat(btnWarningBg, ";\n    border: ").concat(borderSizeLarge, " solid transparent;\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnWarningColor, ";\n      background-color: ").concat(btnWarningBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnWarningBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnWarningColor, ";\n    }\n  ");
}, _ref19 => {
  let {
    color
  } = _ref19;
  return color === 'danger' && "\n    color: ".concat(btnDangerColor, ";\n    background-color: ").concat(btnDangerBg, ";\n    border: ").concat(borderSizeLarge, " solid transparent;\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnDangerColor, ";\n      background-color: ").concat(btnDangerBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnDangerBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDangerColor, ";\n      background-color: ").concat(btnDangerBgHover, ";\n    }\n  ");
}, _ref20 => {
  let {
    color
  } = _ref20;
  return color === 'dark' && "\n    color: ".concat(btnDarkColor, ";\n    background-color: ").concat(btnDarkBg, ";\n    border: ").concat(borderSizeLarge, " solid transparent;\n\n    &:focus {\n      color: ").concat(btnDarkColor, ";\n      background-color: ").concat(btnDarkBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnDarkBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDarkColor, ";\n    }\n  ");
}, _ref21 => {
  let {
    color
  } = _ref21;
  return color === 'offline' && "\n    color: ".concat(btnOfflineColor, ";\n    background-color: ").concat(btnOfflineBg, ";\n    border: ").concat(borderSizeLarge, " solid transparent;\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnOfflineColor, ";\n      background-color: ").concat(btnOfflineBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnOfflineBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnOfflineColor, ";\n    }\n  ");
}, _ref22 => {
  let {
    color
  } = _ref22;
  return color === 'muted' && "\n    color: ".concat(btnMutedColor, ";\n    background-color: ").concat(btnMutedBg, ";\n    border: ").concat(borderSizeLarge, " solid transparent;\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnMutedColor, ";\n      background-color: ").concat(btnMutedBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnMutedBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnMutedColor, ";\n    }\n  ");
}, _ref23 => {
  let {
    ghost,
    color,
    size
  } = _ref23;
  return ghost && color === 'default' && size !== 'lg' && "\n    color: ".concat(btnDefaultBg, ";\n    background-image: none;\n    background-color: transparent;\n    border: ").concat(borderSizeLarge, " solid transparent;\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnDefaultBg, ";\n      background-color: ").concat(btnDefaultColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnDefaultBg, " !important;\n    }\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDefaultBg, ";\n      background-color: ").concat(btnDefaultColor, ";\n    }\n  ");
}, _ref24 => {
  let {
    ghost,
    color
  } = _ref24;
  return ghost && color === 'primary' && "\n    color: ".concat(btnPrimaryBg, ";\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnPrimaryBg, ";\n      background-color: ").concat(btnPrimaryColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnPrimaryBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnPrimaryBg, ";\n      background-color: ").concat(btnPrimaryColor, ";\n    }\n  ");
}, _ref25 => {
  let {
    ghost,
    color
  } = _ref25;
  return ghost && color === 'success' && "\n    color: ".concat(btnSuccessBg, ";\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnSuccessBg, ";\n      background-color: ").concat(btnSuccessColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnSuccessBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnSuccessBg, ";\n      background-color: ").concat(btnSuccessColor, ";\n    }\n  ");
}, _ref26 => {
  let {
    ghost,
    color
  } = _ref26;
  return ghost && color === 'warning' && "\n    color: ".concat(btnWarningBg, ";\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnWarningBg, ";\n      background-color: ").concat(btnWarningColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnWarningBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnWarningBg, ";\n      background-color: ").concat(btnWarningColor, ";\n    }\n  ");
}, _ref27 => {
  let {
    ghost,
    color
  } = _ref27;
  return ghost && color === 'danger' && "\n    color: ".concat(btnDangerBg, ";\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnDangerBg, ";\n      background-color: ").concat(btnDangerColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnDangerBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDangerBg, ";\n      background-color: ").concat(btnDangerColor, ";\n    }\n  ");
}, _ref28 => {
  let {
    ghost,
    color
  } = _ref28;
  return ghost && color === 'dark' && "\n    color: ".concat(btnDarkBg, ";\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnDarkBg, ";\n      background-color: ").concat(btnDarkColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnDarkBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDarkBg, ";\n      background-color: ").concat(btnDarkColor, ";\n    }\n  ");
}, _ref29 => {
  let {
    ghost,
    color
  } = _ref29;
  return ghost && color === 'offline' && "\n    color: ".concat(btnOfflineBg, ";\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnOfflineBg, ";\n      background-color: ").concat(btnOfflineColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnOfflineBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnOfflineBg, ";\n      background-color: ").concat(btnOfflineColor, ";\n    }\n  ");
}, _ref30 => {
  let {
    ghost,
    color
  } = _ref30;
  return ghost && color === 'muted' && "\n    color: ".concat(btnMutedBg, ";\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnMutedBg, ";\n      background-color: ").concat(btnMutedColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnMutedBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnMutedBg, ";\n      background-color: ").concat(btnMutedColor, ";\n    }\n  ");
}, _ref31 => {
  let {
    circle
  } = _ref31;
  return circle && "\n    border-radius: 50%;\n  ";
}, _ref32 => {
  let {
    circle,
    size
  } = _ref32;
  return circle && size === 'sm' && "\n    padding: calc(".concat(smPaddingX, " / 2);\n  ");
}, _ref33 => {
  let {
    circle,
    size
  } = _ref33;
  return circle && size === 'md' && "\n    padding: calc(".concat(mdPaddingX, " / 2);\n  ");
}, _ref34 => {
  let {
    circle,
    size
  } = _ref34;
  return circle && size === 'lg' && "\n    padding: calc(".concat(lgPaddingX, " / 2);\n  ");
}, _ref35 => {
  let {
    circle,
    size
  } = _ref35;
  return circle && size === 'jumbo' && "\n    padding: calc(".concat(jumboPaddingX, " / 2);\n  ");
}, _ref36 => {
  let {
    block
  } = _ref36;
  return block && "\n    display: block;\n    width: 100%;\n  ";
});
const Button = styled(BaseButton)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  border: ", " solid transparent;\n  border: none;\n  overflow: visible;\n  display: inline-block;\n  border-radius: ", ";\n  font-weight: ", ";\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  cursor: pointer;\n  user-select: none;\n\n  &:-moz-focusring {\n    outline: none;\n  }\n\n  &:hover,\n  &:focus {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n    text-decoration: none;\n  }\n\n  &:active,\n  &:focus {\n    outline: transparent;\n    outline-width: ", ";\n    outline-style: solid;\n  }\n\n  &:active {\n    background-image: none;\n  }\n\n  &[aria-disabled=\"true\"] {\n    cursor: not-allowed;\n    opacity: .65;\n    box-shadow: none;\n  }\n\n  &,\n  &:active {\n    &:focus {\n      span:first-of-type::before {\n        border-radius: ", ";\n      }\n    }\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), borderSizeLarge, borderSize, btnFontWeight, borderSize, borderSize, borderSize, _ref37 => {
  let {
    size
  } = _ref37;
  return size === 'sm' && "\n    font-size: calc(".concat(fontSizeSmall, " * .85);\n    padding: ").concat(smPaddingY, " ").concat(smPaddingX, ";\n  ");
}, _ref38 => {
  let {
    size
  } = _ref38;
  return size === 'md' && "\n    font-size: calc(".concat(fontSizeBase, " * .85);\n    padding: ").concat(mdPaddingY, " ").concat(mdPaddingX, ";\n  ");
}, _ref39 => {
  let {
    size
  } = _ref39;
  return size === 'lg' && "\n    font-size: calc(".concat(fontSizeLarge, " * .85);\n    padding: ").concat(lgPaddingY, " ").concat(lgPaddingX, ";\n  ");
}, _ref40 => {
  let {
    size
  } = _ref40;
  return size === 'jumbo' && "\n    font-size: 3rem;\n    padding: ".concat(jumboPaddingY, " ").concat(jumboPaddingX, ";\n  ");
}, _ref41 => {
  let {
    color
  } = _ref41;
  return color === 'default' && "\n    color: ".concat(btnDefaultColor, ";\n    background-color: ").concat(btnDefaultBg, ";\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnDefaultColor, ";\n      background-color: ").concat(btnDefaultBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnPrimaryBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDefaultColor, ";\n    }\n  ");
}, _ref42 => {
  let {
    color
  } = _ref42;
  return color === 'primary' && "\n    color: ".concat(btnPrimaryColor, ";\n    background-color: ").concat(btnPrimaryBg, ";\n    border: ").concat(borderSizeLarge, " solid transparent !important;\n\n    &:focus:not([aria-disabled=\"true\"]){\n      color: ").concat(btnPrimaryColor, ";\n      background-color: ").concat(btnPrimaryBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnPrimaryBorder, ";\n    }\n\n    &:hover{\n      filter: brightness(90%);\n      color: ").concat(btnPrimaryColor, ";\n      background-color: ").concat(btnPrimaryHoverBg, " !important;\n    }\n\n    &:active:focus{\n      filter: brightness(85%);\n      color: ").concat(btnPrimaryColor, ";\n      background-color: ").concat(btnPrimaryActiveBg, ";\n    }\n\n    &:active{\n      filter: brightness(85%);\n      color: ").concat(btnPrimaryColor, ";\n      background-color: ").concat(btnPrimaryActiveBg, " !important;\n    }\n  ");
}, _ref43 => {
  let {
    color
  } = _ref43;
  return color === 'success' && "\n    color: ".concat(btnSuccessColor, ";\n    background-color: ").concat(btnSuccessBg, ";\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnSuccessColor, ";\n      background-color: ").concat(btnSuccessBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnSuccessBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnSuccessColor, ";\n    }\n  ");
}, _ref44 => {
  let {
    color
  } = _ref44;
  return color === 'warning' && "\n    color: ".concat(btnWarningColor, ";\n    background-color: ").concat(btnWarningBg, ";\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnWarningColor, ";\n      background-color: ").concat(btnWarningBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnWarningBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnWarningColor, ";\n    }\n  ");
}, _ref45 => {
  let {
    color
  } = _ref45;
  return color === 'danger' && "\n    color: ".concat(btnDangerColor, ";\n    background-color: ").concat(btnDangerBg, ";\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnDangerColor, ";\n      background-color: ").concat(btnDangerBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnDangerBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDangerColor, ";\n    }\n  ");
}, _ref46 => {
  let {
    color
  } = _ref46;
  return color === 'dark' && "\n    color: ".concat(btnDarkColor, ";\n    background-color: ").concat(btnDarkBg, ";\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnDarkColor, ";\n      background-color: ").concat(btnDarkBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnDarkBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDarkColor, ";\n    }\n  ");
}, _ref47 => {
  let {
    color
  } = _ref47;
  return color === 'offline' && "\n    color: ".concat(btnOfflineColor, ";\n    background-color: ").concat(btnOfflineBg, ";\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnOfflineColor, ";\n      background-color: ").concat(btnOfflineBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnOfflineBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnOfflineColor, ";\n    }\n  ");
}, _ref48 => {
  let {
    color
  } = _ref48;
  return color === 'muted' && "\n    color: ".concat(btnMutedColor, ";\n    background-color: ").concat(btnMutedBg, ";\n\n    &:focus,\n    .buttonWrapper:focus:not([aria-disabled=\"true\"]) & {\n      color: ").concat(btnMutedColor, ";\n      background-color: ").concat(btnMutedBg, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSize, " ").concat(btnMutedBorder, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnMutedColor, ";\n    }\n  ");
}, _ref49 => {
  let {
    color
  } = _ref49;
  return color === 'secondary' && "\n    background: transparent;\n    color: ".concat(colorGray, ";\n    border: 3px solid transparent;\n    border-radius: 4px;\n  \n\n    &:focus {\n      background: hsl(210, 30%, 95%);\n      box-shadow: 0 0 0 ").concat(borderSize, " hsl(211, 87%, 80%);\n    }\n\n    &:hover {\n      background: hsl(210, 30%, 95%);\n      color: hsl(210, 13%, 35%);\n    }\n\n    &:active {\n      background: hsl(210, 30%, 89%);\n      color: hsl(210, 13%, 30%);\n    }\n\n    &:hover {\n      &:focus {\n        background: hsl(210, 30%, 95%);\n        color: hsl(210, 13%, 30%);\n        box-shadow: 0 0 0 ").concat(borderSize, " hsl(211, 87%, 80%);\n      }\n    }\n\n    &:focus {\n      &:active {\n        background: hsl(210, 30%, 89%);\n        color: hsl(210, 13%, 30%);\n        box-shadow: 0 0 0 ").concat(borderSize, " hsl(211, 87%, 80%);\n      }\n    }\n  ");
}, _ref50 => {
  let {
    ghost,
    color
  } = _ref50;
  return ghost && color === 'default' && "\n    color: ".concat(btnDefaultBg, ";\n    background-image: none;\n    background-color: transparent;\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnDefaultBg, ";\n      background-color: ").concat(btnDefaultColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnDefaultBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDefaultBg, ";\n      background-color: ").concat(btnDefaultColor, ";\n    }\n  ");
}, _ref51 => {
  let {
    ghost,
    color
  } = _ref51;
  return ghost && color === 'primary' && "\n    color: ".concat(btnPrimaryBg, ";\n    background-image: none;\n    background-color: transparent;\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnPrimaryBg, ";\n      background-color: ").concat(btnPrimaryColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnPrimaryBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnPrimaryBg, ";\n      background-color: ").concat(btnPrimaryColor, ";\n    }\n  ");
}, _ref52 => {
  let {
    ghost,
    color
  } = _ref52;
  return ghost && color === 'success' && "\n    color: ".concat(btnSuccessBg, ";\n    background-image: none;\n    background-color: transparent;\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnSuccessBg, ";\n      background-color: ").concat(btnSuccessColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnSuccessBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnSuccessBg, ";\n      background-color: ").concat(btnSuccessColor, ";\n    }\n  ");
}, _ref53 => {
  let {
    ghost,
    color
  } = _ref53;
  return ghost && color === 'warning' && "\n    color: ".concat(btnWarningBg, ";\n    background-image: none;\n    background-color: transparent;\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnWarningBg, ";\n      background-color: ").concat(btnWarningColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnWarningBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnWarningBg, ";\n      background-color: ").concat(btnWarningColor, ";\n    }\n  ");
}, _ref54 => {
  let {
    ghost,
    color
  } = _ref54;
  return ghost && color === 'danger' && "\n    color: ".concat(btnDangerBg, ";\n    background-image: none;\n    background-color: transparent;\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnDangerBg, ";\n      background-color: ").concat(btnDangerColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnDangerBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDangerBg, ";\n      background-color: ").concat(btnDangerColor, ";\n    }\n  ");
}, _ref55 => {
  let {
    ghost,
    color
  } = _ref55;
  return ghost && color === 'dark' && "\n    color: ".concat(btnDarkBg, ";\n    background-image: none;\n    background-color: transparent;\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnDarkBg, ";\n      background-color: ").concat(btnDarkColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnDarkBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnDarkBg, ";\n      background-color: ").concat(btnDarkColor, ";\n    }\n  ");
}, _ref56 => {
  let {
    ghost,
    color
  } = _ref56;
  return ghost && color === 'offline' && "\n    color: ".concat(btnOfflineBg, ";\n    background-image: none;\n    background-color: transparent;\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnOfflineBg, ";\n      background-color: ").concat(btnOfflineColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnOfflineBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnOfflineBg, ";\n      background-color: ").concat(btnOfflineColor, ";\n    }\n  ");
}, _ref57 => {
  let {
    ghost,
    color
  } = _ref57;
  return ghost && color === 'muted' && "\n    color: ".concat(btnMutedBg, ";\n    background-image: none;\n    background-color: transparent;\n\n    &:focus,\n    .buttonWrapper:focus & {\n      color: ").concat(btnMutedBg, ";\n      background-color: ").concat(btnMutedColor, ";\n      background-clip: padding-box;\n      box-shadow: 0 0 0 ").concat(borderSizeLarge, " ").concat(btnMutedBg, ";\n    }\n\n    &:hover,\n    .buttonWrapper:hover & {\n      color: ").concat(btnMutedBg, ";\n      background-color: ").concat(btnMutedColor, ";\n    }\n  ");
}, _ref58 => {
  let {
    circle
  } = _ref58;
  return circle && "\n    border-radius: 50%;\n  ";
}, _ref59 => {
  let {
    circle,
    size
  } = _ref59;
  return circle && size === 'sm' && "\n    padding: calc(".concat(smPaddingX, " / 2);\n  ");
}, _ref60 => {
  let {
    circle,
    size
  } = _ref60;
  return circle && size === 'md' && "\n    padding: calc(".concat(mdPaddingX, " / 2);\n  ");
}, _ref61 => {
  let {
    circle,
    size
  } = _ref61;
  return circle && size === 'lg' && "\n    padding: calc(".concat(lgPaddingX, " / 2);\n  ");
}, _ref62 => {
  let {
    circle,
    size
  } = _ref62;
  return circle && size === 'jumbo' && "\n    padding: calc(".concat(jumboPaddingX, " / 2);\n  ");
}, _ref63 => {
  let {
    block
  } = _ref63;
  return block && "\n    display: block;\n    width: 100%;\n  ";
}, _ref64 => {
  let {
    iconRight
  } = _ref64;
  return iconRight && "\n    display: flex;\n    flex-direction: row-reverse;\n  ";
});
module.exportDefault({
  ButtonIcon,
  EmojiButtonSibling,
  ButtonLabel,
  ButtonWrapper,
  ButtonSpan,
  Button
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"control-header":{"left":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/control-header/left/component.jsx                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
class Left extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    return /*#__PURE__*/React.createElement(Styled.HideButton, _extends({
      className: "buttonWrapper",
      icon: "left_arrow",
      tabIndex: 0
    }, this.props));
  }
}
Left.propTypes = {
  accessKey: PropTypes.any,
  'aria-label': PropTypes.string,
  'data-test': PropTypes.string,
  label: PropTypes.string,
  onClick: PropTypes.func
};
module.exportDefault(Left);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/control-header/left/styles.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 2);
const HideButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  padding: 0;\n  margin: 0;\n  line-height: normal;\n  display: flex;\n  align-items: center;\n  min-width: 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  & > i,\n  & > i::before {\n    width: auto;\n    font-size: ", " !important;\n\n    [dir=\"rtl\"] & {\n      -webkit-transform: scale(-1, 1);\n      -moz-transform: scale(-1, 1);\n      -ms-transform: scale(-1, 1);\n      -o-transform: scale(-1, 1);\n      transform: scale(-1, 1);\n    }\n  }\n"])), fontSizeBase);
module.exportDefault({
  HideButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"right":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/control-header/right/component.jsx                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
class Right extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    return /*#__PURE__*/React.createElement(Styled.CloseButton, _extends({
      size: "md",
      color: "light",
      hideLabel: true,
      circle: true
    }, this.props));
  }
}
Right.propTypes = {
  accessKey: PropTypes.any,
  'aria-label': PropTypes.string,
  'data-test': PropTypes.string,
  icon: PropTypes.string,
  label: PropTypes.string,
  onClick: PropTypes.func
};
module.exportDefault(Right);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/control-header/right/styles.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 2);
const CloseButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  span:first-of-type {\n    padding: 0;\n    margin: 0;\n\n    & > i,\n    & > i::before {\n      width: auto;\n      font-size: ", ";\n    }\n  }\n"])), fontSizeBase);
module.exportDefault({
  CloseButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/control-header/component.jsx                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["leftButtonProps", "rightButtonProps", "customRightButton", "data-test"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let Left;
module.link("./left/component", {
  default(v) {
    Left = v;
  }
}, 3);
let Right;
module.link("./right/component", {
  default(v) {
    Right = v;
  }
}, 4);
const Header = _ref => {
  let {
      leftButtonProps,
      rightButtonProps,
      customRightButton,
      'data-test': dataTest
    } = _ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  const renderCloseButton = () => /*#__PURE__*/React.createElement(Right, rightButtonProps);
  const renderCustomRightButton = () => /*#__PURE__*/React.createElement(Styled.RightWrapper, null, customRightButton);
  return /*#__PURE__*/React.createElement(Styled.Header, _extends({
    "data-test": dataTest ? dataTest : ''
  }, rest), leftButtonProps ? /*#__PURE__*/React.createElement(Left, leftButtonProps) : /*#__PURE__*/React.createElement("div", null), customRightButton ? renderCustomRightButton() : rightButtonProps ? renderCloseButton() : null);
};
Header.propTypes = {
  leftButtonProps: PropTypes.object,
  rightButtonProps: PropTypes.object,
  customRightButton: PropTypes.element,
  dataTest: PropTypes.string
};
module.exportDefault(Header);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/control-header/styles.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let jumboPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  jumboPaddingY(v) {
    jumboPaddingY = v;
  }
}, 1);
const Header = styled.header(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding-bottom: ", ";\n"])), jumboPaddingY);
const RightWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  & > div {\n    display: flex;\n  }\n"])));
module.exportDefault({
  Header,
  RightWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"error-boundary":{"located-error-boundary":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/error-boundary/located-error-boundary/component.jsx                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["children"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let ErrorBoundary;
module.link("../component", {
  default(v) {
    ErrorBoundary = v;
  }
}, 2);
const intlMessages = defineMessages({
  errorMessage: {
    id: 'app.presentationUploder.genericError',
    defaultMessage: 'Something went wrong'
  }
});
const LocatedErrorBoundary = _ref => {
  let {
      children
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const intl = useIntl();
  return /*#__PURE__*/React.createElement(ErrorBoundary, _extends({}, props, {
    errorMessage: intl.formatMessage(intlMessages.errorMessage)
  }), children);
};
module.exportDefault(LocatedErrorBoundary);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/error-boundary/component.jsx                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  withErrorBoundary: () => withErrorBoundary
});
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let logger, generateLoggerStreams;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  },
  generateLoggerStreams(v) {
    generateLoggerStreams = v;
  }
}, 2);
let apolloContextHolder;
module.link("/imports/ui/core/graphql/apolloContextHolder/apolloContextHolder", {
  default(v) {
    apolloContextHolder = v;
  }
}, 3);
let ApolloLink;
module.link("@apollo/client", {
  ApolloLink(v) {
    ApolloLink = v;
  }
}, 4);
const propTypes = {
  children: PropTypes.element.isRequired,
  Fallback: PropTypes.func,
  errorMessage: PropTypes.string,
  logMetadata: PropTypes.shape({
    logCode: PropTypes.string,
    logMessage: PropTypes.string
  })
};
const defaultProps = {
  Fallback: null,
  errorMessage: 'Something went wrong',
  logMetadata: {
    logCode: 'Error_Boundary_wrapper',
    logMessage: 'generic error boundary logger'
  }
};
class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = {
      error: '',
      errorInfo: null
    };
  }
  componentDidMount() {
    const data = window.meetingClientSettings.public;
    const logConfig = data === null || data === void 0 ? void 0 : data.clientLog;
    if (logConfig) {
      generateLoggerStreams(logConfig).forEach(stream => {
        logger.addStream(stream);
      });
    }
  }
  componentDidUpdate() {
    const {
      error,
      errorInfo
    } = this.state;
    const {
      logMetadata: {
        logCode,
        logMessage
      }
    } = this.props;
    if (error || errorInfo) {
      logger.error({
        logCode,
        extraInfo: {
          errorMessage: error === null || error === void 0 ? void 0 : error.message,
          errorStack: error === null || error === void 0 ? void 0 : error.stack,
          errorInfo
        }
      }, logMessage);
    }
  }
  componentDidCatch(error, errorInfo) {
    window.dispatchEvent(new Event('StopAudioTracks'));
    const data = window.meetingClientSettings.public.media;
    const mediaElement = document.querySelector((data === null || data === void 0 ? void 0 : data.mediaTag) || '#remote-media');
    if (mediaElement) {
      mediaElement.pause();
      mediaElement.srcObject = null;
    }
    const apolloClient = apolloContextHolder.getClient();
    if (apolloClient) {
      apolloClient.stop();
    }
    const ws = apolloContextHolder.getLink();
    if (ws) {
      // delay to termintate the connection, for user receive the end eject message
      setTimeout(() => {
        apolloClient.setLink(ApolloLink.empty());
        ws.terminate();
      }, 5000);
    }
    this.setState({
      error,
      errorInfo
    });
  }
  render() {
    const {
      error,
      errorInfo
    } = this.state;
    const {
      children,
      Fallback,
      errorMessage
    } = this.props;
    const fallbackElement = Fallback && error ? /*#__PURE__*/React.createElement(Fallback, {
      error: error || {},
      errorInfo: errorInfo
    }) : /*#__PURE__*/React.createElement("div", null, errorMessage);
    return error ? fallbackElement : children;
  }
}
ErrorBoundary.propTypes = propTypes;
ErrorBoundary.defaultProps = defaultProps;
module.exportDefault(ErrorBoundary);
const withErrorBoundary = (WrappedComponent, FallbackComponent) => props => /*#__PURE__*/React.createElement(ErrorBoundary, {
  Fallback: FallbackComponent
}, /*#__PURE__*/React.createElement(WrappedComponent, props));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"fallback-errors":{"fallback-modal":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/fallback-errors/fallback-modal/component.jsx                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let FallbackView;
module.link("../fallback-view/component", {
  default(v) {
    FallbackView = v;
  }
}, 3);
const intlMessages = defineMessages({
  ariaTitle: {
    id: 'app.error.fallback.modal.ariaTitle',
    description: 'title announced when fallback modal is showed'
  }
});
const FallbackModal = _ref => {
  let {
    error,
    intl
  } = _ref;
  return /*#__PURE__*/React.createElement(ModalSimple, {
    hideBorder: true,
    priority: "medium",
    shouldShowCloseButton: false,
    contentLabel: intl.formatMessage(intlMessages.ariaTitle),
    isOpen: !!error
  }, /*#__PURE__*/React.createElement(FallbackView, {
    error
  }));
};
module.exportDefault(injectIntl(FallbackModal));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"fallback-view":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/fallback-errors/fallback-view/component.jsx                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const intlMessages = defineMessages({
  title: {
    id: 'app.error.fallback.presentation.title',
    description: 'title for presentation when fallback is showed'
  },
  description: {
    id: 'app.error.fallback.presentation.description',
    description: 'description for presentation when fallback is showed'
  },
  reloadButton: {
    id: 'app.error.fallback.presentation.reloadButton',
    description: 'Button label when fallback is showed'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  error: PropTypes.shape({
    message: PropTypes.string.isRequired
  })
};
const defaultError = {
  message: ''
};
const FallbackView = _ref => {
  let {
    error = defaultError,
    intl
  } = _ref;
  return /*#__PURE__*/React.createElement(Styled.Background, null, /*#__PURE__*/React.createElement(Styled.CodeError, null, intl.formatMessage(intlMessages.title)), /*#__PURE__*/React.createElement(Styled.Message, null, intl.formatMessage(intlMessages.description)), /*#__PURE__*/React.createElement(Styled.Separator, null), /*#__PURE__*/React.createElement(Styled.SessionMessage, null, error.message), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.ReloadButton, {
    size: "sm",
    color: "primary",
    onClick: () => window.location.reload(),
    label: intl.formatMessage(intlMessages.reloadButton)
  })));
};
FallbackView.propTypes = propTypes;
module.exportDefault(injectIntl(FallbackView));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/fallback-errors/fallback-view/styles.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite, colorBackground, colorGrayLighter;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorBackground(v) {
    colorBackground = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  }
}, 1);
let fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
const Background = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  background-color: ", ";\n  color: ", ";\n  text-align: center;\n"])), colorBackground, colorWhite);
const CodeError = styled.h1(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin: 0;\n  font-size: 3rem;\n  color: ", ";\n"])), colorWhite);
const Message = styled.h1(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin: 0;\n  color: ", ";\n  font-size: 1.25rem;\n  font-weight: 400;\n"])), colorWhite);
const Separator = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  height: 0;\n  width: 5rem;\n  border: 1px solid ", ";\n  margin: 1.5rem 0 1.5rem 0;\n  align-self: center;\n  opacity: .75;\n"])), colorGrayLighter);
const SessionMessage = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  margin: 0;\n  color: ", ";\n  font-size: ", ";\n  font-weight: 400;\n  margin-bottom: 1.5rem;\n"])), colorWhite, fontSizeBase);
const ReloadButton = styled(Button)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  min-width: 9rem;\n  height: 2rem;\n"])));
module.exportDefault({
  Background,
  CodeError,
  Message,
  Separator,
  SessionMessage,
  ReloadButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"icon":{"icon-ts":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/icon/icon-ts/component.tsx                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, memo;
module.link("react", {
  default(v) {
    React = v;
  },
  memo(v) {
    memo = v;
  }
}, 0);
let cx;
module.link("classnames", {
  default(v) {
    cx = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
const Icon = _ref => {
  let {
    className = '',
    prependIconName = 'icon-bbb-',
    iconName = '',
    rotate = false
  } = _ref;
  return /*#__PURE__*/React.createElement(Styled.Icon, {
    className: cx(className, [prependIconName, iconName].join('')),
    $rotate: rotate
  });
};
module.exportDefault( /*#__PURE__*/memo(Icon));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/icon/icon-ts/styles.ts                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const Icon = styled.i(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n"])), _ref => {
  let {
    $rotate
  } = _ref;
  return $rotate && "\n    transform: rotate(180deg);\n    margin-top: 20%;\n  ";
});
module.exportDefault({
  Icon
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/icon/component.jsx                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["className", "prependIconName", "iconName", "rotate", "color"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React, memo;
module.link("react", {
  default(v) {
    React = v;
  },
  memo(v) {
    memo = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let cx;
module.link("classnames", {
  default(v) {
    cx = v;
  }
}, 2);
let omit;
module.link("radash", {
  omit(v) {
    omit = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const propTypes = {
  iconName: PropTypes.string.isRequired,
  prependIconName: PropTypes.string,
  rotate: PropTypes.bool,
  className: PropTypes.string,
  color: PropTypes.string
};
const Icon = _ref => {
  let {
      className = '',
      prependIconName = 'icon-bbb-',
      iconName,
      rotate = false,
      color = undefined
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(Styled.Icon, _extends({
    color: color,
    className: cx(className, [prependIconName, iconName].join(''))
    // ToastContainer from react-toastify passes a useless closeToast prop here
  }, omit(props, ['closeToast', 'animations', 'loading']), {
    $rotate: rotate
  }));
};
module.exportDefault( /*#__PURE__*/memo(Icon));
Icon.propTypes = propTypes;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/icon/styles.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const Icon = styled.i(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n  ", "\n"])), _ref => {
  let {
    color
  } = _ref;
  return color && "\n    color: ".concat(color, ";\n  ");
}, _ref2 => {
  let {
    $rotate
  } = _ref2;
  return $rotate && "\n    transform: rotate(180deg);\n    margin-top: 20%;\n  ";
});
module.exportDefault({
  Icon
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"loading-screen":{"loading-screen-HOC":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/loading-screen/loading-screen-HOC/component.tsx                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  LoadingContext: () => LoadingContext
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let LoadingScreen;
module.link("../component", {
  default(v) {
    LoadingScreen = v;
  }
}, 1);
const LoadingContext = /*#__PURE__*/React.createContext({
  isLoading: false,
  loadingMessage: '',
  setLoading: () => {}
});
const LoadingScreenHOC = _ref => {
  let {
    children
  } = _ref;
  const [loading, setLoading] = React.useState({
    isLoading: false,
    loadingMessage: ''
  });
  return /*#__PURE__*/React.createElement(LoadingContext.Provider, {
    value: {
      loadingMessage: loading.loadingMessage,
      isLoading: loading.isLoading,
      setLoading: function (isLoading) {
        let loadingMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        setLoading({
          isLoading,
          loadingMessage
        });
      }
    }
  }, loading.isLoading ? /*#__PURE__*/React.createElement(LoadingScreen, null, /*#__PURE__*/React.createElement("h1", null, loading.loadingMessage)) : null, children);
};
module.exportDefault(LoadingScreenHOC);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/loading-screen/component.jsx                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const LoadingScreen = _ref => {
  let {
    children
  } = _ref;
  return /*#__PURE__*/React.createElement(Styled.Background, null, /*#__PURE__*/React.createElement(Styled.Spinner, {
    animations: true
  }, /*#__PURE__*/React.createElement(Styled.Bounce1, {
    animations: true
  }), /*#__PURE__*/React.createElement(Styled.Bounce2, {
    animations: true
  }), /*#__PURE__*/React.createElement("div", null)), /*#__PURE__*/React.createElement(Styled.Message, null, children));
};
module.exportDefault(LoadingScreen);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/loading-screen/styles.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 1);
let loaderBg, loaderBullet, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  loaderBg(v) {
    loaderBg = v;
  },
  loaderBullet(v) {
    loaderBullet = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 2);
let fontSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarge(v) {
    fontSizeLarge = v;
  }
}, 3);
const Background = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: fixed;\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  background-color: ", ";\n  z-index: 4;\n"])), loaderBg);
const skBouncedelay = keyframes(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  0%,\n  80%,\n  100% {\n    transform: scale(0);\n  }\n  40% {\n    transform: scale(1.0);\n  }\n"])));
const Spinner = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: 100%;\n  text-align: center;\n  height: 22px;\n  margin-bottom: ", ";\n\n  & > div {\n    width: 18px;\n    height: 18px;\n    margin: 0 5px;\n    background-color: ", ";\n    border-radius: 100%;\n    display: inline-block;\n\n    ", "\n  }\n"])), mdPaddingX, loaderBullet, _ref => {
  let {
    animations
  } = _ref;
  return animations && css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n      animation: ", " 1.4s infinite ease-in-out both;\n    "])), skBouncedelay);
});
const Bounce1 = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  ", "\n"])), _ref2 => {
  let {
    animations
  } = _ref2;
  return animations && "\n    animation-delay: -0.32s !important;\n  ";
});
const Bounce2 = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  ", "\n"])), _ref3 => {
  let {
    animations
  } = _ref3;
  return animations && "\n    animation-delay: -0.16s !important;\n  ";
});
const Message = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  font-size: ", ";\n  color: ", ";\n  text-align: center;\n"])), fontSizeLarge, colorWhite);
module.exportDefault({
  Background,
  Spinner,
  Bounce1,
  Bounce2,
  Message
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modal":{"base":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/modal/base/component.jsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, useCallback, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const BaseModal = props => {
  const {
    setIsOpen,
    modalName,
    children,
    isOpen,
    onRequestClose,
    className,
    overlayClassName,
    dataTest,
    priority
  } = props;
  const closeEventHandler = useCallback(() => {
    setIsOpen(false);
  }, []);
  useEffect(() => {
    // Only add event listener if name is specified
    if (!modalName) return () => null;
    const closeEventName = "CLOSE_MODAL_".concat(modalName.toUpperCase());

    // Listen to close event on mount
    document.addEventListener(closeEventName, closeEventHandler);

    // Remove listener on unmount
    return () => {
      document.removeEventListener(closeEventName, closeEventHandler);
    };
  }, []);
  const priorityValue = priority || 'low';
  return /*#__PURE__*/React.createElement(Styled.BaseModal, _extends({
    portalClassName: "modal-".concat(priorityValue),
    parentSelector: () => document.querySelector('#modals-container'),
    isOpen: isOpen,
    onRequestClose: onRequestClose,
    className: className,
    overlayClassName: overlayClassName,
    shouldReturnFocusAfterClose: false,
    data: {
      test: dataTest
    }
  }, props), children);
};
module.exportDefault({
  BaseModal
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/modal/base/styles.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let ModalScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ModalScrollboxVertical(v) {
    ModalScrollboxVertical = v;
  }
}, 1);
let borderRadius;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderRadius(v) {
    borderRadius = v;
  }
}, 2);
let smallOnly, mediumUp;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  },
  mediumUp(v) {
    mediumUp = v;
  }
}, 3);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 4);
const BaseModal = styled(ModalScrollboxVertical)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  max-width: 60vw;\n  max-height: 100%;\n  border-radius: ", ";\n  background: ", ";\n  overflow: auto;\n\n  @media ", " {\n    max-width: 95vw;\n  }\n\n  @media ", " {\n    max-width: 80vw;\n  }\n"])), borderRadius, colorWhite, smallOnly, mediumUp);
module.exportDefault({
  BaseModal
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"confirmation":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/modal/confirmation/component.jsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const messages = defineMessages({
  yesLabel: {
    id: 'app.confirmationModal.yesLabel',
    description: 'confirm button label'
  },
  noLabel: {
    id: 'app.endMeeting.noLabel',
    description: 'cancel confirm button label'
  }
});
const propTypes = {
  confirmButtonColor: PropTypes.string,
  disableConfirmButton: PropTypes.bool,
  description: PropTypes.string,
  hideConfirmButton: PropTypes.bool
};
const defaultProps = {
  confirmButtonColor: 'primary',
  disableConfirmButton: false,
  description: '',
  hideConfirmButton: false
};
class ConfirmationModal extends Component {
  constructor(props) {
    super(props);
    this.state = {
      checked: false
    };
  }
  render() {
    const {
      intl,
      setIsOpen,
      onConfirm,
      title,
      titleMessageId,
      titleMessageExtra,
      checkboxMessageId,
      confirmButtonColor,
      confirmButtonLabel,
      cancelButtonLabel,
      hideConfirmButton,
      confirmButtonDataTest,
      confirmParam,
      disableConfirmButton,
      description,
      isOpen,
      onRequestClose,
      priority
    } = this.props;
    const {
      checked
    } = this.state;
    const hasCheckbox = !!checkboxMessageId;
    return /*#__PURE__*/React.createElement(Styled.ConfirmationModal, {
      onRequestClose: () => setIsOpen(false),
      contentLabel: title,
      title: title || intl.formatMessage({
        id: titleMessageId
      }, {
        0: titleMessageExtra
      }),
      isOpen,
      onRequestClose,
      priority
    }, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.Description, null, /*#__PURE__*/React.createElement(Styled.DescriptionText, null, description), hasCheckbox ? /*#__PURE__*/React.createElement(Styled.Label, {
      htmlFor: "confirmationCheckbox",
      key: "confirmation-checkbox"
    }, /*#__PURE__*/React.createElement(Styled.Checkbox, {
      type: "checkbox",
      id: "confirmationCheckbox",
      onChange: () => this.setState({
        checked: !checked
      }),
      checked: checked,
      "aria-label": intl.formatMessage({
        id: checkboxMessageId
      })
    }), /*#__PURE__*/React.createElement("span", {
      "aria-hidden": true
    }, intl.formatMessage({
      id: checkboxMessageId
    }))) : null), /*#__PURE__*/React.createElement(Styled.Footer, null, !hideConfirmButton && /*#__PURE__*/React.createElement(Styled.ConfirmationButton, {
      color: confirmButtonColor,
      label: confirmButtonLabel || intl.formatMessage(messages.yesLabel),
      disabled: disableConfirmButton,
      "data-test": confirmButtonDataTest,
      onClick: () => {
        onConfirm(confirmParam, checked);
        setIsOpen(false);
      }
    }), /*#__PURE__*/React.createElement(Styled.CancelButton, {
      label: cancelButtonLabel || intl.formatMessage(messages.noLabel),
      onClick: () => setIsOpen(false)
    }))));
  }
}
ConfirmationModal.propTypes = propTypes;
ConfirmationModal.defaultProps = defaultProps;
module.exportDefault(ConfirmationModal);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/modal/confirmation/styles.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 2);
let smPaddingX, mdPaddingX, lgPaddingY, jumboPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  jumboPaddingY(v) {
    jumboPaddingY = v;
  }
}, 3);
let colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  }
}, 4);
let lineHeightBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightBase(v) {
    lineHeightBase = v;
  }
}, 5);
const ConfirmationModal = styled(ModalSimple)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  padding: ", ";\n"])), mdPaddingX);
const Container = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: 0;\n  margin-top: 0;\n  margin: auto;\n"])));
const Description = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  text-align: center;\n  line-height: ", ";\n  color: ", ";\n  margin-bottom: ", ";\n"])), lineHeightBase, colorGray, jumboPaddingY);
const DescriptionText = styled.span(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  white-space: pre-line;\n"])));
const Checkbox = styled.input(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  position: relative;\n  top: 0.134rem;\n  margin-right: 0.5rem;\n\n  [dir=\"rtl\"] & {\n    margin-right: 0;\n    margin-left: 0.5rem;\n  }\n"])));
const Footer = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display:flex;\n  margin-bottom: ", ";\n"])), lgPaddingY);
const ConfirmationButton = styled(Button)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  padding-right: ", ";\n  padding-left: ", ";\n  margin: 0 ", " 0 0;\n\n  [dir=\"rtl\"] & {\n    margin: 0 0 0 ", ";\n  }\n"])), jumboPaddingY, jumboPaddingY, smPaddingX, smPaddingX);
const CancelButton = styled(ConfirmationButton)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  margin: 0;\n"])));
const Label = styled.label(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: block;\n"])));
module.exportDefault({
  ConfirmationModal,
  Container,
  Description,
  DescriptionText,
  Checkbox,
  Footer,
  ConfirmationButton,
  CancelButton,
  Label
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"fullscreen":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/modal/fullscreen/component.jsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["intl", "title", "confirm", "dismiss", "className", "children", "isOpen", "preventClosing"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const intlMessages = defineMessages({
  modalClose: {
    id: 'app.modal.close',
    description: 'Close'
  },
  modalCloseDescription: {
    id: 'app.modal.close.description',
    description: 'Disregards changes and closes the modal'
  },
  modalDone: {
    id: 'app.modal.confirm',
    description: 'Close'
  },
  modalDoneDescription: {
    id: 'app.modal.confirm.description',
    description: 'Disregards changes and closes the modal'
  },
  newTabLabel: {
    id: 'app.modal.newTab',
    description: 'aria label used to indicate opening a new window'
  }
});
const propTypes = {
  title: PropTypes.string.isRequired,
  confirm: PropTypes.shape({
    callback: PropTypes.func.isRequired,
    disabled: PropTypes.bool
  }),
  dismiss: PropTypes.shape({
    callback: PropTypes.func,
    disabled: PropTypes.bool
  }),
  preventClosing: PropTypes.bool,
  shouldCloseOnOverlayClick: PropTypes.bool
};
const defaultProps = {
  shouldCloseOnOverlayClick: false,
  confirm: {
    disabled: false
  },
  dismiss: {
    callback: () => {},
    disabled: false
  },
  preventClosing: false
};
class ModalFullscreen extends PureComponent {
  constructor(props) {
    super(props);
    this.handleAction = this.handleAction.bind(this);
  }
  handleAction(name) {
    const {
      confirm,
      dismiss
    } = this.props;
    const {
      callback: callBackConfirm
    } = confirm;
    const {
      callback: callBackDismiss
    } = dismiss;
    let callback;
    switch (name) {
      case 'confirm':
        callback = callBackConfirm;
        break;
      case 'dismiss':
        callback = callBackDismiss;
        break;
      default:
        break;
    }
    return callback();
  }
  render() {
    const _this$props = this.props,
      {
        intl,
        title,
        confirm,
        dismiss,
        className,
        children,
        isOpen,
        preventClosing
      } = _this$props,
      otherProps = _objectWithoutProperties(_this$props, _excluded);
    const popoutIcon = confirm.icon === 'popout_window';
    let confirmAriaLabel = "".concat(confirm.label || intl.formatMessage(intlMessages.modalDone), " ");
    if (popoutIcon) {
      confirmAriaLabel = "".concat(confirmAriaLabel, " ").concat(intl.formatMessage(intlMessages.newTabLabel));
    }
    return /*#__PURE__*/React.createElement(Styled.FullscreenModal, _extends({
      id: "fsmodal",
      isOpen: isOpen || preventClosing,
      contentLabel: title,
      overlayClassName: "fullscreenModalOverlay"
    }, otherProps), /*#__PURE__*/React.createElement(Styled.Header, null, /*#__PURE__*/React.createElement(Styled.Title, null, title), /*#__PURE__*/React.createElement(Styled.Actions, null, /*#__PURE__*/React.createElement(Styled.DismissButton, {
      "data-test": "modalDismissButton",
      label: intl.formatMessage(intlMessages.modalClose),
      "aria-label": "".concat(intl.formatMessage(intlMessages.modalClose), " ").concat(title),
      disabled: dismiss.disabled,
      onClick: () => this.handleAction('dismiss'),
      "aria-describedby": "modalDismissDescription",
      color: "secondary"
    }), /*#__PURE__*/React.createElement(Styled.ConfirmButton, {
      "data-test": "modalConfirmButton",
      color: "primary",
      label: confirm.label || intl.formatMessage(intlMessages.modalDone),
      "aria-label": confirmAriaLabel,
      disabled: confirm.disabled,
      onClick: () => this.handleAction('confirm'),
      "aria-describedby": "modalConfirmDescription",
      icon: confirm.icon || null,
      iconRight: popoutIcon,
      popout: popoutIcon ? 'popout' : 'simple'
    }))), /*#__PURE__*/React.createElement(Styled.Content, null, children), /*#__PURE__*/React.createElement("div", {
      id: "modalDismissDescription",
      hidden: true
    }, intl.formatMessage(intlMessages.modalCloseDescription)), /*#__PURE__*/React.createElement("div", {
      id: "modalConfirmDescription",
      hidden: true
    }, intl.formatMessage(intlMessages.modalDoneDescription)));
  }
}
ModalFullscreen.propTypes = propTypes;
ModalFullscreen.defaultProps = defaultProps;
module.exportDefault(injectIntl(ModalFullscreen));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/modal/fullscreen/styles.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("../base/component", {
  default(v) {
    Styled = v;
  }
}, 1);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
let borderSize, smPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  }
}, 4);
let lineHeightComputed, headingsFontWeight, fontSizeLarger;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  },
  headingsFontWeight(v) {
    headingsFontWeight = v;
  },
  fontSizeLarger(v) {
    fontSizeLarger = v;
  }
}, 5);
let colorGrayLightest, colorText;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  colorText(v) {
    colorText = v;
  }
}, 6);
const FullscreenModal = styled(Styled.BaseModal)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  outline: transparent;\n  outline-width: ", ";\n  outline-style: solid;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  align-self: flex-start;\n  padding: calc(", " / 2) ", ";\n\n  @media ", " {\n    width: 100%;\n  }\n"])), borderSize, lineHeightComputed, lineHeightComputed, smallOnly);
const Header = styled.header(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  padding: ", " 0;\n  border-bottom: ", " solid ", ";\n"])), lineHeightComputed, borderSize, colorGrayLightest);
const Title = styled.h1(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  min-width: 0;\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  flex: 1;\n  margin: 0;\n  font-size: ", ";\n  font-weight: ", ";\n"])), fontSizeLarger, headingsFontWeight);
const Actions = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  flex: 0 1 35%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n"])));
const Content = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-weight: normal;\n  padding: ", " 0;\n"])), colorText, lineHeightComputed);
const DismissButton = styled(Button)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  flex: 0 1 48%;\n"])));
const ConfirmButton = styled(Button)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  flex: 0 1 48%;\n\n  ", "\n"])), _ref => {
  let {
    popout
  } = _ref;
  return popout === 'popout' && "\n    & > i {\n      bottom: ".concat(borderSize, ";\n      left: ").concat(smPaddingX, ";\n\n      [dir=\"rtl\"] & {\n        left: -0.5rem;\n        transform: rotateY(180deg);\n      }\n    }\n  ");
});
module.exportDefault({
  FullscreenModal,
  Header,
  Title,
  Actions,
  Content,
  DismissButton,
  ConfirmButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"header":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/modal/header/component.jsx                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["children", "closeButtonProps", "headerPosition", "hideBorder", "modalDismissDescription", "shouldShowCloseButton"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
const propTypes = {
  hideBorder: PropTypes.bool,
  headerPosition: PropTypes.string,
  shouldShowCloseButton: PropTypes.bool,
  modalDismissDescription: PropTypes.string,
  closeButtonProps: PropTypes.shape({
    label: PropTypes.string,
    'aria-label': PropTypes.string,
    onClick: PropTypes.func
  })
};
const defaultProps = {
  hideBorder: true,
  headerPosition: 'inner',
  shouldShowCloseButton: true,
  modalDismissDescription: '',
  closeButtonProps: {}
};
class Header extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    const _this$props = this.props,
      {
        children,
        closeButtonProps,
        headerPosition,
        hideBorder,
        modalDismissDescription,
        shouldShowCloseButton
      } = _this$props,
      other = _objectWithoutProperties(_this$props, _excluded);
    if (!shouldShowCloseButton && !children) return null;
    const headerOnTop = headerPosition === 'top';
    const innerHeader = headerPosition === 'inner';
    return /*#__PURE__*/React.createElement(Styled.Header, _extends({
      $hideBorder: hideBorder,
      $headerOnTop: headerOnTop,
      $innerHeader: innerHeader
    }, other), /*#__PURE__*/React.createElement(Styled.Title, {
      $hasMarginBottom: innerHeader,
      $headerOnTop: headerOnTop,
      $innerHeader: innerHeader
    }, children), shouldShowCloseButton ? /*#__PURE__*/React.createElement(Styled.DismissButton, _extends({
      "data-test": "closeModal",
      icon: "close",
      circle: true,
      hideLabel: true,
      "aria-describedby": "modalDismissDescription",
      $headerOnTop: headerOnTop,
      $innerHeader: innerHeader
    }, closeButtonProps)) : null, /*#__PURE__*/React.createElement("div", {
      id: "modalDismissDescription",
      hidden: true
    }, modalDismissDescription));
  }
}
;
Header.propTypes = propTypes;
Header.defaultProps = defaultProps;
module.exportDefault(Header);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/modal/header/styles.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let TitleElipsis;
module.link("/imports/ui/stylesheets/styled-components/placeholders", {
  TitleElipsis(v) {
    TitleElipsis = v;
  }
}, 2);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 3);
let colorGrayDark, colorGrayLighter, colorText;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorText(v) {
    colorText = v;
  }
}, 4);
let mdPaddingX, borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  mdPaddingX(v) {
    mdPaddingX = v;
  },
  borderSize(v) {
    borderSize = v;
  }
}, 5);
let fontSizeBase, fontSizeLarge, headingsFontWeight, lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  fontSizeLarge(v) {
    fontSizeLarge = v;
  },
  headingsFontWeight(v) {
    headingsFontWeight = v;
  },
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 6);
const Header = styled.header(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin: 0;\n  padding: 0;\n  border: none;\n  display: grid;\n\n  ", "\n\n  ", "\n\n  ", "\n"])), _ref => {
  let {
    $headerOnTop
  } = _ref;
  return $headerOnTop && "\n    grid-template-columns: auto min-content;\n    grid-template-rows: min-content;\n  ";
}, _ref2 => {
  let {
    $innerHeader
  } = _ref2;
  return $innerHeader && "\n    grid-template-columns: auto;\n    grid-template-rows: min-content min-content;\n  ";
}, _ref3 => {
  let {
    $hideBorder
  } = _ref3;
  return !$hideBorder && "\n    padding: calc(".concat(lineHeightComputed, " / 2) 0;\n    border-bottom: ").concat(borderSize, " solid ").concat(colorGrayLighter, ";\n  ");
});
const Title = styled(TitleElipsis)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: block;\n  text-align: center;\n  font-weight: ", ";\n  font-size: calc(", " + 0.05rem);\n  color: ", ";\n  white-space: normal;\n  margin: 0;\n  line-height: calc(", " * 2);\n\n  @media ", " {\n    font-size: ", ";\n    padding: 0 ", ";\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n"])), headingsFontWeight, fontSizeLarge, colorGrayDark, lineHeightComputed, smallOnly, fontSizeBase, mdPaddingX, _ref4 => {
  let {
    $headerOnTop
  } = _ref4;
  return $headerOnTop && "\n    grid-area: 1 / 1 / 2 / 3;\n  ";
}, _ref5 => {
  let {
    $innerHeader
  } = _ref5;
  return $innerHeader && "\n    grid-area: 2 / 1 / 3 / 2;\n  ";
}, _ref6 => {
  let {
    $hasMarginBottom
  } = _ref6;
  return $hasMarginBottom && "\n    margin-bottom: ".concat(mdPaddingX, ";\n  ");
});
const DismissButton = styled(Button)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  & > span:first-child {\n    border-color: transparent;\n    background-color: transparent;\n\n    & > i { color: ", "; }\n  }\n\n  ", "\n\n  ", "\n\n  justify-self: end;\n"])), colorText, _ref7 => {
  let {
    $headerOnTop
  } = _ref7;
  return $headerOnTop && "\n    grid-area: 1 / 2 / 2 / 3;\n  ";
}, _ref8 => {
  let {
    $innerHeader
  } = _ref8;
  return $innerHeader && "\n    grid-area: 1 / 1 / 2 / 2;\n  ";
});
module.exportDefault({
  Header,
  Title,
  DismissButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"simple":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/modal/simple/component.jsx                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["id", "intl", "title", "hideBorder", "dismiss", "className", "modalisOpen", "onRequestClose", "shouldShowCloseButton", "contentLabel", "headerPosition", "data-test", "children"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let FocusTrap;
module.link("focus-trap-react", {
  default(v) {
    FocusTrap = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const intlMessages = defineMessages({
  modalClose: {
    id: 'app.modal.close',
    description: 'Close'
  },
  modalCloseDescription: {
    id: 'app.modal.close.description',
    description: 'Disregards changes and closes the modal'
  }
});
const propTypes = {
  title: PropTypes.string,
  dismiss: PropTypes.shape({
    callback: PropTypes.func
  }),
  headerPosition: PropTypes.string,
  shouldCloseOnOverlayClick: PropTypes.bool,
  shouldShowCloseButton: PropTypes.bool,
  overlayClassName: PropTypes.string,
  modalisOpen: PropTypes.bool
};
const defaultProps = {
  title: '',
  dismiss: {
    callback: null
  },
  shouldCloseOnOverlayClick: true,
  shouldShowCloseButton: true,
  overlayClassName: 'modalOverlay',
  headerPosition: 'inner',
  modalisOpen: false
};
class ModalSimple extends Component {
  constructor(props) {
    super(props);
    this.modalRef = /*#__PURE__*/React.createRef();
    this.handleDismiss = this.handleDismiss.bind(this);
    this.handleRequestClose = this.handleRequestClose.bind(this);
    this.handleOutsideClick = this.handleOutsideClick.bind(this);
  }
  componentDidMount() {
    document.addEventListener('mousedown', this.handleOutsideClick, false);
  }
  componentWillUnmount() {
    document.removeEventListener('mousedown', this.handleOutsideClick, false);
  }
  handleDismiss() {
    const {
      modalHide,
      dismiss
    } = this.props;
    if (!dismiss || !modalHide) return;
    modalHide(dismiss.callback);
  }
  handleRequestClose(event) {
    const {
      onRequestClose
    } = this.props;
    const closeModal = onRequestClose || this.handleDismiss;
    closeModal();
    if (event && event.type === 'click') {
      setTimeout(() => {
        if (document.activeElement) {
          document.activeElement.blur();
        }
      }, 0);
    }
  }
  handleOutsideClick(e) {
    const {
      modalisOpen
    } = this.props;
    if (this.modalRef.current && !this.modalRef.current.contains(e.target) && modalisOpen) {
      this.handleRequestClose(e);
    }
  }
  render() {
    const _this$props = this.props,
      {
        id,
        intl,
        title,
        hideBorder,
        dismiss,
        className,
        modalisOpen,
        onRequestClose,
        shouldShowCloseButton,
        contentLabel,
        headerPosition,
        'data-test': dataTest,
        children
      } = _this$props,
      otherProps = _objectWithoutProperties(_this$props, _excluded);
    return /*#__PURE__*/React.createElement(Styled.SimpleModal, _extends({
      id: id || 'simpleModal',
      isOpen: modalisOpen,
      className: className,
      onRequestClose: this.handleRequestClose,
      contentLabel: title || contentLabel,
      dataTest: dataTest
    }, otherProps), /*#__PURE__*/React.createElement(FocusTrap, {
      active: modalisOpen,
      focusTrapOptions: {
        initialFocus: false
      }
    }, /*#__PURE__*/React.createElement("div", {
      ref: this.modalRef
    }, /*#__PURE__*/React.createElement(Styled.Header, {
      hideBorder: hideBorder,
      headerPosition: headerPosition,
      shouldShowCloseButton: shouldShowCloseButton,
      modalDismissDescription: intl.formatMessage(intlMessages.modalCloseDescription),
      closeButtonProps: {
        label: intl.formatMessage(intlMessages.modalClose),
        'aria-label': "".concat(intl.formatMessage(intlMessages.modalClose), " ").concat(title || contentLabel),
        onClick: this.handleRequestClose
      }
    }, title || ''), /*#__PURE__*/React.createElement(Styled.Content, null, children))));
  }
}
ModalSimple.propTypes = propTypes;
ModalSimple.defaultProps = defaultProps;
module.exportDefault(injectIntl(ModalSimple));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/modal/simple/styles.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("../base/component", {
  default(v) {
    Styled = v;
  }
}, 1);
let borderSize, mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 2);
let colorWhite, colorText;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorText(v) {
    colorText = v;
  }
}, 3);
let ModalHeader;
module.link("/imports/ui/components/common/modal/header/component", {
  default(v) {
    ModalHeader = v;
  }
}, 4);
const SimpleModal = styled(Styled.BaseModal)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  outline: transparent;\n  outline-width: ", ";\n  outline-style: solid;\n  display: flex;\n  flex-direction: column;\n  padding: ", ";\n  box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.5);\n  background-color: ", " !important;\n"])), borderSize, mdPaddingX, colorWhite);
const Header = styled(ModalHeader)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const Content = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  overflow: visible;\n  color: ", ";\n  font-weight: normal;\n  padding: 0;\n"])), colorText);
module.exportDefault({
  SimpleModal,
  Header,
  Content
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"remaining-time":{"breakout-duration":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/remaining-time/breakout-duration/component.tsx                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let RemainingTime;
module.link("/imports/ui/components/common/remaining-time/component", {
  default(v) {
    RemainingTime = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let FIRST_BREAKOUT_DURATION_DATA_SUBSCRIPTION;
module.link("./queries", {
  FIRST_BREAKOUT_DURATION_DATA_SUBSCRIPTION(v) {
    FIRST_BREAKOUT_DURATION_DATA_SUBSCRIPTION = v;
  }
}, 3);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 4);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 5);
const intlMessages = defineMessages({
  calculatingBreakoutTimeRemaining: {
    id: 'app.calculatingBreakoutTimeRemaining',
    description: 'Message that tells that the remaining time is being calculated'
  },
  breakoutDuration: {
    id: 'app.createBreakoutRoom.duration',
    description: 'breakout duration time'
  }
});
const BreakoutRemainingTimeContainer = _ref => {
  var _breakoutData$breakou, _breakoutData$breakou2;
  let {
    boldText
  } = _ref;
  const intl = useIntl();
  const loadingRemainingTime = () => {
    return /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.calculatingBreakoutTimeRemaining));
  };
  const {
    data: breakoutData,
    loading: breakoutLoading,
    error: breakoutError
  } = useDeduplicatedSubscription(FIRST_BREAKOUT_DURATION_DATA_SUBSCRIPTION);
  if (breakoutLoading) return loadingRemainingTime();
  if (!breakoutData) return null;
  if (breakoutError) {
    logger.error('Error when loading breakout data', breakoutError);
    return /*#__PURE__*/React.createElement("div", null, "Error:", JSON.stringify(breakoutError));
  }
  const breakoutDuration = (_breakoutData$breakou = breakoutData.breakoutRoom[0]) === null || _breakoutData$breakou === void 0 ? void 0 : _breakoutData$breakou.durationInSeconds;
  const breakoutStartedAt = (_breakoutData$breakou2 = breakoutData.breakoutRoom[0]) === null || _breakoutData$breakou2 === void 0 ? void 0 : _breakoutData$breakou2.startedAt;
  const breakoutStartedTime = new Date(breakoutStartedAt).getTime();
  const durationLabel = intlMessages.breakoutDuration;
  return /*#__PURE__*/React.createElement(RemainingTime, {
    referenceStartedTime: breakoutStartedTime,
    durationInSeconds: breakoutDuration,
    durationLabel: durationLabel,
    boldText: boldText,
    isBreakout: false
  });
};
module.exportDefault(BreakoutRemainingTimeContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/remaining-time/breakout-duration/queries.ts                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  FIRST_BREAKOUT_DURATION_DATA_SUBSCRIPTION: () => FIRST_BREAKOUT_DURATION_DATA_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const FIRST_BREAKOUT_DURATION_DATA_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription firstBreakoutData {\n    breakoutRoom(limit: 1) {\n      durationInSeconds\n      startedAt\n    }\n  }\n"])));
module.exportDefault({
  FIRST_BREAKOUT_DURATION_DATA_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"meeting-duration":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/remaining-time/meeting-duration/component.tsx                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let RemainingTime;
module.link("/imports/ui/components/common/remaining-time/component", {
  default(v) {
    RemainingTime = v;
  }
}, 1);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 2);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 3);
const intlMessages = defineMessages({
  calculatingBreakoutTimeRemaining: {
    id: 'app.calculatingBreakoutTimeRemaining',
    description: 'Message that tells that the remaining time is being calculated'
  },
  meetingTimeRemaining: {
    id: 'app.meeting.meetingTimeRemaining',
    description: 'Message that tells how much time is remaining for the meeting'
  },
  meetingWillClose: {
    id: 'app.meeting.meetingTimeHasEnded',
    description: 'Message that tells time has ended and meeting will close'
  },
  breakoutTimeRemaining: {
    id: 'app.breakoutTimeRemainingMessage',
    description: 'Message that tells how much time is remaining for the breakout room'
  },
  breakoutWillClose: {
    id: 'app.breakoutWillCloseMessage',
    description: 'Message that tells time has ended and breakout will close'
  },
  alertBreakoutEndsUnderMinutes: {
    id: 'app.meeting.alertBreakoutEndsUnderMinutes',
    description: 'Alert that tells that the breakout ends under x minutes'
  },
  alertMeetingEndsUnderMinutes: {
    id: 'app.meeting.alertMeetingEndsUnderMinutes',
    description: 'Alert that tells that the meeting ends under x minutes'
  }
});
const MeetingRemainingTimeContainer = () => {
  var _currentMeeting$durat, _currentMeeting$creat;
  const intl = useIntl();
  const loadingRemainingTime = () => {
    return /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.calculatingBreakoutTimeRemaining));
  };
  const {
    data: currentMeeting
  } = useMeeting(m => {
    return {
      isBreakout: m.isBreakout,
      durationInSeconds: m.durationInSeconds,
      createdTime: m.createdTime
    };
  });
  if (!currentMeeting) return loadingRemainingTime();
  const meetingDurationInSeconds = (_currentMeeting$durat = currentMeeting.durationInSeconds) !== null && _currentMeeting$durat !== void 0 ? _currentMeeting$durat : 0;
  const meetingCreatedTime = (_currentMeeting$creat = currentMeeting.createdTime) !== null && _currentMeeting$creat !== void 0 ? _currentMeeting$creat : 0;
  const {
    isBreakout
  } = currentMeeting;
  const durationLabel = isBreakout ? intlMessages.breakoutTimeRemaining : intlMessages.meetingTimeRemaining;
  const endingLabel = isBreakout ? intlMessages.breakoutWillClose : intlMessages.meetingWillClose;
  const alertLabel = isBreakout ? intlMessages.alertBreakoutEndsUnderMinutes : intlMessages.alertMeetingEndsUnderMinutes;
  return /*#__PURE__*/React.createElement(RemainingTime, {
    durationInSeconds: meetingDurationInSeconds,
    referenceStartedTime: meetingCreatedTime,
    durationLabel: durationLabel,
    endingLabel: endingLabel,
    isBreakout: !!isBreakout,
    alertLabel: alertLabel,
    boldText: false
  });
};
module.exportDefault(MeetingRemainingTimeContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/remaining-time/component.tsx                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let useIntl;
module.link("react-intl", {
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let humanizeSeconds;
module.link("/imports/utils/humanizeSeconds", {
  default(v) {
    humanizeSeconds = v;
  }
}, 2);
let Text, Time;
module.link("./styles", {
  Text(v) {
    Text = v;
  },
  Time(v) {
    Time = v;
  }
}, 3);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 4);
let useTimeSync;
module.link("/imports/ui/core/local-states/useTimeSync", {
  default(v) {
    useTimeSync = v;
  }
}, 5);
let lastAlertTime = null;
const RemainingTime = props => {
  const {
    referenceStartedTime,
    durationInSeconds,
    durationLabel,
    endingLabel = undefined,
    alertLabel = undefined,
    isBreakout,
    boldText
  } = props;
  const intl = useIntl();
  const [timeSync] = useTimeSync();
  const timeRemainingInterval = React.useRef();
  const [remainingTime, setRemainingTime] = useState(-1);
  const currentDate = new Date();
  const adjustedCurrent = new Date(currentDate.getTime() + timeSync);
  const calculateRemainingTime = () => {
    const durationInMilliseconds = durationInSeconds * 1000;
    const adjustedCurrentTime = adjustedCurrent.getTime();
    return Math.floor((referenceStartedTime + durationInMilliseconds - adjustedCurrentTime) / 1000);
  };
  useEffect(() => {
    if (remainingTime && durationInSeconds) {
      if (durationInSeconds > 0 && timeRemainingInterval && referenceStartedTime) {
        setRemainingTime(calculateRemainingTime());
      }
      clearInterval(timeRemainingInterval.current);
      const remainingMillisecondsDiff = (referenceStartedTime + durationInSeconds * 60000 - adjustedCurrent.getTime()) % 1000;
      timeRemainingInterval.current = setInterval(() => {
        setRemainingTime(currentTime => currentTime - 1);
      }, remainingMillisecondsDiff === 0 ? 1000 : remainingMillisecondsDiff);
    }
    return () => {
      clearInterval(timeRemainingInterval.current);
    };
  }, [remainingTime, durationInSeconds]);
  const meetingTimeMessage = React.useRef('');
  if (remainingTime >= 0 && timeRemainingInterval) {
    if (remainingTime > 0) {
      const APP_SETTINGS = window.meetingClientSettings.public.app;
      const REMAINING_TIME_ALERT_THRESHOLD_ARRAY = APP_SETTINGS.remainingTimeAlertThresholdArray;
      const alertsInSeconds = REMAINING_TIME_ALERT_THRESHOLD_ARRAY.map(item => item * 60);
      if (alertsInSeconds.includes(remainingTime) && remainingTime !== lastAlertTime && alertLabel) {
        const timeInMinutes = remainingTime / 60;
        const msg = {
          id: "".concat(alertLabel.id).concat(timeInMinutes === 1 ? 'Singular' : 'Plural')
        };
        const alertMessage = intl.formatMessage(msg, {
          0: timeInMinutes
        });
        lastAlertTime = remainingTime;
        notify(alertMessage, 'info', 'rooms');
      }
      meetingTimeMessage.current = intl.formatMessage(durationLabel, {
        0: humanizeSeconds(remainingTime)
      });
      if (isBreakout) {
        return /*#__PURE__*/React.createElement("span", {
          "data-test": "timeRemaining"
        }, meetingTimeMessage.current);
      }
    } else {
      clearInterval(timeRemainingInterval.current);
      if (endingLabel) meetingTimeMessage.current = intl.formatMessage(endingLabel);
    }
  }
  if (boldText) {
    const words = meetingTimeMessage.current.split(' ');
    const time = words.pop();
    const text = words.join(' ');
    return /*#__PURE__*/React.createElement("span", {
      "data-test": "timeRemaining"
    }, /*#__PURE__*/React.createElement(Text, null, text), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(Time, {
      "data-test": "breakoutRemainingTime"
    }, time));
  }
  return /*#__PURE__*/React.createElement("span", {
    "data-test": "timeRemaining"
  }, meetingTimeMessage.current);
};
module.exportDefault(RemainingTime);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/remaining-time/styles.ts                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  Text: () => Text,
  Time: () => Time
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  }
}, 1);
let fontSizeSmaller, fontSizeXL;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmaller(v) {
    fontSizeSmaller = v;
  },
  fontSizeXL(v) {
    fontSizeXL = v;
  }
}, 2);
const Text = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  text-transform: uppercase;\n  color: ", ";\n  font-size: ", ";\n  font-weight: 600;\n"])), colorGray, fontSizeSmaller);
const Time = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  font-size: ", ";\n  font-weight: 600;\n  color: ", ";\n"])), fontSizeXL, colorGray);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"toast":{"inject-notify":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/toast/inject-notify/component.jsx                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 1);
const injectNotify = ComponentToWrap => props => /*#__PURE__*/React.createElement(ComponentToWrap, _extends({}, props, {
  notify: notify
}));
module.exportDefault(injectNotify);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/toast/component.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let toast;
module.link("react-toastify", {
  toast(v) {
    toast = v;
  }
}, 2);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const propTypes = {
  icon: PropTypes.string,
  message: PropTypes.node.isRequired,
  type: PropTypes.oneOf(Object.values(toast.TYPE)).isRequired
};
const defaultIcons = {
  [toast.TYPE.INFO]: 'help',
  [toast.TYPE.SUCCESS]: 'checkmark',
  [toast.TYPE.WARNING]: 'warning',
  [toast.TYPE.ERROR]: 'close',
  [toast.TYPE.DEFAULT]: 'about'
};
const Toast = _ref => {
  let {
    icon = null,
    type,
    message,
    content,
    small
  } = _ref;
  return /*#__PURE__*/React.createElement(Styled.ToastContainer, {
    small: small,
    "data-test": "toastContainer"
  }, /*#__PURE__*/React.createElement(Styled.Toast, {
    type: type
  }, /*#__PURE__*/React.createElement(Styled.ToastIcon, {
    className: "toastIcon",
    small: small
  }, /*#__PURE__*/React.createElement(Icon, {
    iconName: icon || defaultIcons[type]
  })), /*#__PURE__*/React.createElement(Styled.ToastMessage, {
    "data-test": "toastSmallMsg"
  }, /*#__PURE__*/React.createElement("span", null, message))), content ? /*#__PURE__*/React.createElement(Styled.BackgroundColorInherit, null, /*#__PURE__*/React.createElement(Styled.Separator, null), /*#__PURE__*/React.createElement(Styled.BackgroundColorInherit, null, content)) : null);
};
module.exportDefault(Toast);
Toast.propTypes = propTypes;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/toast/container.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 2);
class ToastContainer extends React.Component {
  // we never want this component to update since will break Toastify
  shouldComponentUpdate() {
    return false;
  }
  render() {
    const Settings = getSettingsSingletonInstance();
    const {
      animations
    } = Settings.application;
    return /*#__PURE__*/React.createElement(Styled.ToastifyContainer, {
      closeButton: /*#__PURE__*/React.createElement(Styled.CloseIcon, {
        "data-test": "closeToastBtn",
        iconName: "close",
        animations: animations
      }),
      autoClose: 5000,
      toastClassName: "toastClass",
      bodyClassName: "toastBodyClass",
      progressClassName: "toastProgressClass",
      newestOnTop: false,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true
    });
  }
}
module.exportDefault(ToastContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/toast/styles.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Toastify;
module.link("react-toastify", {
  ToastContainer(v) {
    Toastify = v;
  }
}, 1);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 2);
let fontSizeSmallest, fontSizeSmaller, fontSizeSmall, lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmallest(v) {
    fontSizeSmallest = v;
  },
  fontSizeSmaller(v) {
    fontSizeSmaller = v;
  },
  fontSizeSmall(v) {
    fontSizeSmall = v;
  },
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 3);
let colorGrayDark, toastDefaultColor, toastDefaultBg, toastInfoColor, toastInfoBg, toastSuccessColor, toastSuccessBg, toastErrorColor, toastErrorBg, toastWarningColor, toastWarningBg, colorGrayLighter;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  toastDefaultColor(v) {
    toastDefaultColor = v;
  },
  toastDefaultBg(v) {
    toastDefaultBg = v;
  },
  toastInfoColor(v) {
    toastInfoColor = v;
  },
  toastInfoBg(v) {
    toastInfoBg = v;
  },
  toastSuccessColor(v) {
    toastSuccessColor = v;
  },
  toastSuccessBg(v) {
    toastSuccessBg = v;
  },
  toastErrorColor(v) {
    toastErrorColor = v;
  },
  toastErrorBg(v) {
    toastErrorBg = v;
  },
  toastWarningColor(v) {
    toastWarningColor = v;
  },
  toastWarningBg(v) {
    toastWarningBg = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  }
}, 4);
let toastOffsetSm, smPaddingX, borderSizeSmall, toastIconMd, toastIconSm, jumboPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  toastOffsetSm(v) {
    toastOffsetSm = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  borderSizeSmall(v) {
    borderSizeSmall = v;
  },
  toastIconMd(v) {
    toastIconMd = v;
  },
  toastIconSm(v) {
    toastIconSm = v;
  },
  jumboPaddingY(v) {
    jumboPaddingY = v;
  }
}, 5);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 6);
const CloseIcon = styled(Icon)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background: transparent;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  opacity: .5;\n  font-size: ", ";\n  color: ", ";\n  line-height: 0;\n  position: relative;\n  font-size: 70%;\n  left: ", ";\n  \n  [dir=\"rtl\"] & {\n    left: auto;\n    right: ", ";\n  }\n\n  ", "\n\n  &:before {\n    margin: inherit inherit inherit -.4rem;\n\n    [dir=\"rtl\"] & {\n      margin: inherit -.4rem inherit inherit;\n    }\n  }\n\n  &:hover,\n  &:focus {\n    opacity: 1;\n  }\n\n  @media ", " {\n    position: relative;\n    font-size: ", ";\n    left: auto;\n  }\n"])), fontSizeSmallest, colorGrayDark, toastOffsetSm, toastOffsetSm, _ref => {
  let {
    animations
  } = _ref;
  return animations && "\n    transition: .3s ease;\n  ";
}, smallOnly, fontSizeSmaller);
const ToastContainer = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n\n  ", "\n"])), _ref2 => {
  let {
    small
  } = _ref2;
  return small && "\n    background-color: inherit;\n  ";
});
const ToastIcon = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  align-self: flex-start;\n  margin: 0 ", " auto 0;\n  width: ", ";\n  height: ", ";\n  border-radius: 50%;\n  position: relative;\n  flex-shrink: 0;\n\n  [dir=\"rtl\"]  & {\n    margin: 0 0 auto ", ";\n  }\n\n  & > i {\n    line-height: 0;\n    color: inherit;\n    position: absolute;\n    top: 50%;\n    width: 100%;\n  }\n\n  ", "\n"])), smPaddingX, toastIconMd, toastIconMd, smPaddingX, _ref3 => {
  let {
    small
  } = _ref3;
  return small && "\n    width: ".concat(toastIconSm, ";\n    height: ").concat(toastIconSm, ";\n    & > i {\n      font-size: 70%;\n    }\n  ");
});
const ToastMessage = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin-top: auto;\n  margin-bottom: auto;\n  font-size: ", ";\n  max-height: 15vh;\n  overflow: auto;\n\n  ", "\n"])), fontSizeSmall, _ref4 => {
  let {
    small
  } = _ref4;
  return small && "\n    font-size: 80%;\n  ";
});
const BackgroundColorInherit = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  position: relative;\n"])));
const Separator = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  position: relative;\n  width: 100%;\n  height: ", ";\n  background-color: ", ";\n  margin-top: calc(", " * .5);\n  margin-bottom: calc(", " * .5);\n"])), borderSizeSmall, colorGrayLighter, lineHeightComputed, lineHeightComputed);
const Toast = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: flex;\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), _ref5 => {
  let {
    type
  } = _ref5;
  return type === 'default' && "\n    & .toastIcon {\n      color: ".concat(toastDefaultColor, ";\n      background-color: ").concat(toastDefaultBg, ";\n    }\n  ");
}, _ref6 => {
  let {
    type
  } = _ref6;
  return type === 'error' && "\n    & .toastIcon {\n      color: ".concat(toastErrorColor, ";\n      background-color: ").concat(toastErrorBg, ";\n    }\n  ");
}, _ref7 => {
  let {
    type
  } = _ref7;
  return type === 'info' && "\n    & .toastIcon {\n      color: ".concat(toastInfoColor, ";\n      background-color: ").concat(toastInfoBg, ";\n    }\n  ");
}, _ref8 => {
  let {
    type
  } = _ref8;
  return type === 'success' && "\n    & .toastIcon {\n      color: ".concat(toastSuccessColor, ";\n      background-color: ").concat(toastSuccessBg, ";\n    }\n  ");
}, _ref9 => {
  let {
    type
  } = _ref9;
  return type === 'warning' && "\n    & .toastIcon {\n      color: ".concat(toastWarningColor, ";\n      background-color: ").concat(toastWarningBg, ";\n    }\n  ");
});
const ToastifyContainer = styled(Toastify)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  z-index: 998;\n  position: fixed;\n  min-width: 20rem !important;\n  max-width: 23rem !important;\n  box-sizing: border-box;\n  right: ", ";\n  left: auto;\n  top: 4.5rem;\n  max-height: 75vh;\n  overflow: hidden;\n\n  [dir=\"rtl\"] & {\n    right: auto;\n    left: ", ";\n  }\n\n  @media ", " {\n    width: 75%;\n  }\n"])), jumboPaddingY, jumboPaddingY, smallOnly);
module.exportDefault({
  CloseIcon,
  ToastContainer,
  ToastIcon,
  ToastMessage,
  BackgroundColorInherit,
  Separator,
  Toast,
  ToastifyContainer
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"checkbox":{"base.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/checkbox/base.jsx                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => Base
});
let React, createRef, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  createRef(v) {
    createRef = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
const propTypes = {
  disabled: PropTypes.bool,
  checked: PropTypes.bool,
  onChange: PropTypes.func.isRequired,
  ariaLabelledBy: PropTypes.string,
  ariaLabel: PropTypes.string,
  ariaDescribedBy: PropTypes.string,
  ariaDesc: PropTypes.string
};
const defaultProps = {
  disabled: false,
  checked: false,
  ariaLabelledBy: null,
  ariaLabel: null,
  ariaDescribedBy: null,
  ariaDesc: null
};
class Base extends PureComponent {
  constructor(props) {
    super(props);
    this.onChange = props.onChange;
    this.handleChange = this.handleChange.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.element = /*#__PURE__*/createRef();
  }
  componentDidMount() {
    const element = this.element.current;
    if (element) element.addEventListener('keydown', this.handleKeyDown);
  }
  componentWillUnmount() {
    const element = this.element.current;
    if (element) element.removeEventListener('keydown', this.handleKeyDown);
  }
  handleKeyDown(event) {
    const {
      key
    } = event;
    const node = this.element.current;
    if (key === 'Enter' && node) {
      const input = node.getElementsByTagName('input')[0];
      input === null || input === void 0 ? void 0 : input.click();
    }
  }
  handleChange() {
    const {
      disabled,
      keyValue
    } = this.props;
    if (disabled) return;
    this.onChange(keyValue);
  }
  render() {
    return null;
  }
}
Base.propTypes = propTypes;
Base.defaultProps = defaultProps;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/checkbox/component.jsx                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => Checkbox
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Base;
module.link("./base", {
  default(v) {
    Base = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
class Checkbox extends Base {
  render() {
    const {
      ariaLabel,
      ariaDesc,
      ariaDescribedBy,
      ariaLabelledBy,
      checked,
      disabled,
      label
    } = this.props;
    const checkbox = /*#__PURE__*/React.createElement(Styled.Checkbox, {
      checked: checked,
      disabled: disabled,
      focusRipple: true,
      inputProps: {
        'aria-label': ariaLabel,
        'aria-describedby': ariaDescribedBy,
        'aria-labelledby': ariaLabelledBy
      },
      onChange: this.handleChange,
      ref: this.element
    });
    return /*#__PURE__*/React.createElement(React.Fragment, null, label ? /*#__PURE__*/React.createElement(Styled.Label, {
      label: label,
      control: checkbox
    }) : checkbox, /*#__PURE__*/React.createElement("div", {
      id: ariaDescribedBy,
      hidden: true
    }, ariaDesc));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/checkbox/styles.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let colorText, colorSuccess;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorText(v) {
    colorText = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  }
}, 0);
let BaseCheckbox;
module.link("@mui/material/Checkbox", {
  default(v) {
    BaseCheckbox = v;
  }
}, 1);
let FormControlLabel;
module.link("@mui/material/FormControlLabel", {
  default(v) {
    FormControlLabel = v;
  }
}, 2);
let styled;
module.link("@mui/system", {
  styled(v) {
    styled = v;
  }
}, 3);
const Checkbox = styled(BaseCheckbox)(() => ({
  '&.Mui-checked': {
    color: "".concat(colorSuccess, " !important")
  }
}));
const Label = styled(FormControlLabel)(() => ({
  '& .MuiFormControlLabel-label': {
    fontFamily: 'inherit !important',
    color: "".concat(colorText, " !important")
  },
  '&.Mui-disabled': {
    cursor: 'not-allowed !important'
  }
}));
module.exportDefault({
  Checkbox,
  Label
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"file-reader":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/file-reader/component.jsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 1);
let toast;
module.link("react-toastify", {
  toast(v) {
    toast = v;
  }
}, 2);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 3);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 4);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 5);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 6);
const intlMessages = defineMessages({
  maximumSizeExceeded: {
    id: 'app.video.virtualBackground.maximumFileSizeExceeded',
    description: 'Label for the maximum file size exceeded notification'
  },
  typeNotAllowed: {
    id: 'app.video.virtualBackground.typeNotAllowed',
    description: 'Label for the file type not allowed notification'
  },
  errorOnRead: {
    id: 'app.video.virtualBackground.errorOnRead',
    description: 'Label for the error on read notification'
  },
  uploaded: {
    id: 'app.video.virtualBackground.uploaded',
    description: 'Label for when the file is uploaded'
  },
  uploading: {
    id: 'app.video.virtualBackground.uploading',
    description: 'Label for when the file is uploading'
  }
});
const STATUS = {
  LOADING: 'loading',
  DONE: 'done',
  ERROR: 'error'
};

/**
 * HOC for injecting a file reader utility.
 * @param {(props: any) => JSX.Element} Component
 * @param {string[]} mimeTypesAllowed String array containing MIME types allowed.
 * @param {number} maxFileSize Max file size allowed in Mbytes.
 * @returns A new component which accepts the same props as the wrapped component plus
 * a function called readFile.
 */
const withFileReader = (Component, mimeTypesAllowed, maxFileSize) => props => {
  const {
    intl
  } = props;
  const toastId = useRef(null);
  const parseFilename = function () {
    let filename = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    const substrings = filename.split('.');
    substrings.pop();
    const filenameWithoutExtension = substrings.join('');
    return filenameWithoutExtension;
  };
  const renderToastContent = (text, status) => {
    let icon;
    let statusMessage;
    switch (status) {
      case STATUS.LOADING:
        icon = 'blank';
        statusMessage = intl.formatMessage(intlMessages.uploading);
        break;
      case STATUS.DONE:
        icon = 'check';
        statusMessage = intl.formatMessage(intlMessages.uploaded);
        break;
      case STATUS.ERROR:
      default:
        icon = 'circle_close';
        statusMessage = intl.formatMessage(intlMessages.errorOnRead);
    }
    return /*#__PURE__*/React.createElement(Styled.Content, null, /*#__PURE__*/React.createElement(Styled.FileLine, null, /*#__PURE__*/React.createElement(Icon, {
      iconName: "file"
    }), /*#__PURE__*/React.createElement(Styled.ToastFileName, null, text), /*#__PURE__*/React.createElement("span", null, /*#__PURE__*/React.createElement(Styled.ToastIcon, {
      iconName: icon,
      loading: status === STATUS.LOADING,
      done: status === STATUS.DONE,
      error: status === STATUS.ERROR
    }))), /*#__PURE__*/React.createElement(Styled.Status, null, /*#__PURE__*/React.createElement("span", null, statusMessage)));
  };
  const renderToast = function () {
    let text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : STATUS.DONE;
    let callback = arguments.length > 2 ? arguments[2] : undefined;
    if (toastId.current) {
      toast.dismiss(toastId.current);
    }
    toastId.current = toast.info(renderToastContent(text, status), {
      hideProgressBar: status === STATUS.DONE ? false : true,
      autoClose: status === STATUS.DONE ? 5000 : false,
      newestOnTop: true,
      closeOnClick: true,
      onClose: () => {
        toastId.current = null;
      },
      onOpen: () => {
        if (typeof callback === 'function') callback();
      }
    });
  };
  const readFile = function (file) {
    let onSuccess = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};
    let onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};
    if (!file) return;
    const {
      name,
      size,
      type
    } = file;
    const sizeInKB = size / 1024;
    if (sizeInKB > maxFileSize) {
      notify(intl.formatMessage(intlMessages.maximumSizeExceeded, {
        0: (maxFileSize / 1000).toFixed(0)
      }), 'error');
      return onError(new Error('Maximum file size exceeded.'));
    }
    if (!mimeTypesAllowed.includes(type)) {
      notify(intl.formatMessage(intlMessages.typeNotAllowed), 'error');
      return onError(new Error('File type not allowed.'));
    }
    const filenameWithoutExtension = parseFilename(name);
    const reader = new FileReader();
    reader.onload = e => {
      const data = {
        filename: filenameWithoutExtension,
        data: e.target.result,
        uniqueId: uniqueId()
      };
      renderToast(name, STATUS.DONE, () => {
        onSuccess(data);
      });
    };
    reader.onerror = () => {
      renderToast(name, STATUS.ERROR, () => {
        onError(new Error('Something went wrong when reading the file.'));
      });
    };
    reader.onloadstart = () => {
      renderToast(name, STATUS.LOADING);
    };
    reader.readAsDataURL(file);
  };
  return /*#__PURE__*/React.createElement(Component, _extends({
    readFile: readFile
  }, props));
};
module.exportDefault(withFileReader);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/file-reader/styles.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 1);
let colorDanger, colorGray, colorGrayLightest, colorSuccess;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorDanger(v) {
    colorDanger = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  }
}, 2);
let fileLineWidth, iconPaddingMd, mdPaddingY, statusIconSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  fileLineWidth(v) {
    fileLineWidth = v;
  },
  iconPaddingMd(v) {
    iconPaddingMd = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  statusIconSize(v) {
    statusIconSize = v;
  }
}, 3);
let headingsFontWeight;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  headingsFontWeight(v) {
    headingsFontWeight = v;
  }
}, 4);
const rotate = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0% { transform: rotate(0); }\n  100% { transform: rotate(360deg); }\n"])));
const ToastIcon = styled(Icon)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  font-size: 117%;\n  width: ", ";\n  height: ", ";\n  position: relative;\n  left: 8px;\n\n  [dir=\"rtl\"] & {\n    left: unset;\n    right: 8px;\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n"])), statusIconSize, statusIconSize, _ref => {
  let {
    done
  } = _ref;
  return done && "\n    color: ".concat(colorSuccess, ";\n  ");
}, _ref2 => {
  let {
    error
  } = _ref2;
  return error && "\n    color: ".concat(colorDanger, ";\n  ");
}, _ref3 => {
  let {
    loading
  } = _ref3;
  return loading && css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    color: ", ";\n    border: 1px solid;\n    border-radius: 50%;\n    border-right-color: ", ";\n    animation: ", " 1s linear infinite;\n  "])), colorGrayLightest, colorGray, rotate);
});
const FileLine = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: ", ";\n  padding-bottom: ", ";\n"])), fileLineWidth, iconPaddingMd);
const ToastFileName = styled.span(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  margin-left: ", ";\n  width: auto;\n  text-align: left;\n  font-weight: ", ";\n\n  [dir=\"rtl\"] & {\n    margin-right: ", ";\n    margin-left: 0;\n    text-align: right;\n  }\n"])), mdPaddingY, headingsFontWeight, mdPaddingY);
const Content = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n"])));
const Status = styled.span(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  font-size: 70%;\n"])));
module.exportDefault({
  ToastIcon,
  FileLine,
  ToastFileName,
  Content,
  Status
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"fullscreen-button":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/fullscreen-button/component.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 4);
const intlMessages = defineMessages({
  fullscreenButton: {
    id: 'app.fullscreenButton.label',
    description: 'Fullscreen label'
  },
  fullscreenUndoButton: {
    id: 'app.fullscreenUndoButton.label',
    description: 'Undo fullscreen label'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  fullscreenRef: PropTypes.instanceOf(Element),
  dark: PropTypes.bool,
  bottom: PropTypes.bool,
  isIphone: PropTypes.bool,
  isFullscreen: PropTypes.bool,
  elementName: PropTypes.string,
  handleToggleFullScreen: PropTypes.func.isRequired,
  color: PropTypes.string,
  fullScreenStyle: PropTypes.bool
};
const FullscreenButtonComponent = _ref => {
  let {
    intl,
    dark = false,
    bottom = false,
    elementName = '',
    elementId,
    elementGroup,
    isIphone = false,
    isFullscreen = false,
    layoutContextDispatch,
    currentElement,
    currentGroup,
    color = 'default',
    fullScreenStyle = true,
    fullscreenRef = null,
    handleToggleFullScreen
  } = _ref;
  if (isIphone) return null;
  const formattedLabel = fullscreen => fullscreen ? intl.formatMessage(intlMessages.fullscreenUndoButton, {
    0: elementName || ''
  }) : intl.formatMessage(intlMessages.fullscreenButton, {
    0: elementName || ''
  });
  const handleClick = () => {
    handleToggleFullScreen(fullscreenRef);
    const newElement = elementId === currentElement ? '' : elementId;
    const newGroup = elementGroup === currentGroup ? '' : elementGroup;
    layoutContextDispatch({
      type: ACTIONS.SET_FULLSCREEN_ELEMENT,
      value: {
        element: newElement,
        group: newGroup
      }
    });
  };
  return /*#__PURE__*/React.createElement(Styled.FullscreenButtonWrapper, {
    theme: dark ? 'dark' : 'light',
    position: bottom ? 'bottom' : 'top'
  }, /*#__PURE__*/React.createElement(Styled.FullscreenButton, {
    color: color || 'default',
    icon: !isFullscreen ? 'fullscreen' : 'exit_fullscreen',
    size: "sm",
    onClick: () => handleClick(),
    label: formattedLabel(isFullscreen),
    hideLabel: true,
    isStyled: fullScreenStyle,
    "data-test": "webcamFullscreenButton"
  }));
};
FullscreenButtonComponent.propTypes = propTypes;
module.exportDefault(injectIntl(FullscreenButtonComponent));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/fullscreen-button/container.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let FullscreenButtonComponent;
module.link("./component", {
  default(v) {
    FullscreenButtonComponent = v;
  }
}, 1);
let layoutSelect, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let FullscreenService;
module.link("./service", {
  default(v) {
    FullscreenService = v;
  }
}, 3);
const FullscreenButtonContainer = props => /*#__PURE__*/React.createElement(FullscreenButtonComponent, props);
module.exportDefault(props => {
  const handleToggleFullScreen = ref => FullscreenService.toggleFullScreen(ref);
  const {
    isFullscreen
  } = props;
  const isIphone = !!navigator.userAgent.match(/iPhone/i);
  const fullscreen = layoutSelect(i => i.fullscreen);
  const {
    element: currentElement,
    group: currentGroup
  } = fullscreen;
  const layoutContextDispatch = layoutDispatch();
  return /*#__PURE__*/React.createElement(FullscreenButtonContainer, _extends({}, props, {
    handleToggleFullScreen,
    isIphone,
    isFullscreen,
    currentElement,
    currentGroup,
    layoutContextDispatch
  }));
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/fullscreen-button/service.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getFullscreenElement() {
  if (document.fullscreenElement) return document.fullscreenElement;
  if (document.webkitFullscreenElement) return document.webkitFullscreenElement;
  if (document.mozFullScreenElement) return document.mozFullScreenElement;
  if (document.msFullscreenElement) return document.msFullscreenElement;
  return null;
}
const isFullScreen = element => {
  if (getFullscreenElement() && getFullscreenElement() === element) {
    return true;
  }
  return false;
};
function cancelFullScreen() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.mozCancelFullScreen) {
    document.mozCancelFullScreen();
  } else if (document.webkitExitFullscreen) {
    document.webkitExitFullscreen();
  }
}
function fullscreenRequest(element) {
  if (element.requestFullscreen) {
    element.requestFullscreen();
  } else if (element.mozRequestFullScreen) {
    element.mozRequestFullScreen();
  } else if (element.webkitRequestFullscreen) {
    element.webkitRequestFullscreen();
  } else if (element.msRequestFullscreen) {
    element.msRequestFullscreen();
  } else {
    return;
  }
  document.activeElement.blur();
  element.focus();
}
const toggleFullScreen = function () {
  let ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  const element = ref || document.documentElement;
  if (isFullScreen(element)) {
    cancelFullScreen();
  } else {
    fullscreenRequest(element);
  }
};
module.exportDefault({
  toggleFullScreen,
  isFullScreen,
  getFullscreenElement
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/fullscreen-button/styles.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let colorTransparent, colorWhite, colorBlack;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorTransparent(v) {
    colorTransparent = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorBlack(v) {
    colorBlack = v;
  }
}, 2);
const FullscreenButtonWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  right: 0;\n  left: auto;\n  background-color: ", ";\n  cursor: pointer;\n  border: 0;\n  z-index: 2;\n  margin: 2px;\n\n  [dir=\"rtl\"] & {\n    right: auto;\n    left :0;\n  }\n\n  [class*=\"presentationZoomControls\"] & {\n    position: relative !important;\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), colorTransparent, _ref => {
  let {
    theme
  } = _ref;
  return theme === 'dark' && "\n    background-color: rgba(0,0,0,.3);\n\n    & button i {\n      color: ".concat(colorWhite, ";\n    }\n  ");
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme === 'light' && "\n    background-color: ".concat(colorTransparent, ";\n\n    & button i {\n      color: ").concat(colorBlack, ";\n    }\n  ");
}, _ref3 => {
  let {
    position
  } = _ref3;
  return position === 'bottom' && "\n    bottom: 0;\n  ";
}, _ref4 => {
  let {
    position
  } = _ref4;
  return position === 'top' && "\n    top: 0;\n  ";
});
const FullscreenButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  ", "\n"])), _ref5 => {
  let {
    isStyled
  } = _ref5;
  return isStyled && "\n    &,\n    &:active,\n    &:hover,\n    &:focus {\n      background-color: ".concat(colorTransparent, " !important;\n      border: none !important;\n\n      i {\n        border: none !important;\n        background-color: ").concat(colorTransparent, " !important;\n      }\n    }\n    padding: 5px;\n\n    &:hover {\n      border: 0;\n    }\n\n    i {\n      font-size: 1rem;\n    }\n  ");
});
module.exportDefault({
  FullscreenButtonWrapper,
  FullscreenButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"locales-dropdown":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/locales-dropdown/component.jsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let injectIntl;
module.link("react-intl", {
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
const DEFAULT_VALUE = 'select';
const DEFAULT_KEY = -1;
const propTypes = {
  allLocales: PropTypes.arrayOf(PropTypes.object).isRequired,
  value: PropTypes.string,
  handleChange: PropTypes.func.isRequired,
  elementId: PropTypes.string.isRequired,
  selectMessage: PropTypes.string.isRequired
};
const defaultProps = {
  value: null
};
class LocalesDropdown extends PureComponent {
  // returns an array with the base language list + variations of currently selected language
  filterLocaleVariations(value) {
    const {
      allLocales
    } = this.props;
    if (allLocales) {
      if (window.meetingClientSettings.public.app.showAllAvailableLocales) {
        return allLocales;
      }

      // splits value if not empty
      const splitValue = value ? value.split('-')[0] : '';
      const allLocaleCodes = [];
      allLocales.map(item => allLocaleCodes.push(item.locale));

      /*
        locales show if:
        1. it is a general version of a locale with no specific locales
        2. it is a specific version of a selected locale with many specific versions
        3. it is a specific version of a locale with no general locale
      */
      return allLocales.filter(locale => !locale.locale.includes('-') || locale.locale.split('-')[0] === splitValue || !allLocaleCodes.includes(locale.locale.split('-')[0]));
    }
    return [];
  }
  render() {
    const {
      value,
      handleChange,
      elementId,
      selectMessage,
      ariaLabel,
      intl
    } = this.props;
    const defaultLocale = value || DEFAULT_VALUE;
    const availableLocales = this.filterLocaleVariations(value);
    return /*#__PURE__*/React.createElement("select", {
      id: elementId,
      onChange: handleChange,
      value: defaultLocale,
      "aria-label": ariaLabel || ''
    }, /*#__PURE__*/React.createElement("option", {
      disabled: true,
      key: DEFAULT_KEY,
      value: DEFAULT_VALUE
    }, selectMessage), availableLocales.map(localeItem => {
      const localizedName = localeItem.locale !== value && intl.formatMessage({
        id: "app.submenu.application.localeDropdown.".concat(localeItem.locale),
        defaultMessage: ""
      });
      return /*#__PURE__*/React.createElement("option", {
        key: localeItem.locale,
        value: localeItem.locale,
        lang: localeItem.locale
      }, localeItem.name, localizedName && " - ".concat(localizedName));
    }));
  }
}
LocalesDropdown.propTypes = propTypes;
LocalesDropdown.defaultProps = defaultProps;
module.exportDefault(injectIntl(LocalesDropdown));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"menu":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/menu/component.jsx                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 1);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Divider;
module.link("@mui/material", {
  Divider(v) {
    Divider = v;
  }
}, 3);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 4);
let SMALL_VIEWPORT_BREAKPOINT;
module.link("/imports/ui/components/layout/enums", {
  SMALL_VIEWPORT_BREAKPOINT(v) {
    SMALL_VIEWPORT_BREAKPOINT = v;
  }
}, 5);
let KEY_CODES;
module.link("/imports/utils/keyCodes", {
  default(v) {
    KEY_CODES = v;
  }
}, 6);
let MenuSkeleton;
module.link("./skeleton", {
  default(v) {
    MenuSkeleton = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
const intlMessages = defineMessages({
  close: {
    id: 'app.dropdown.close',
    description: 'Close button label'
  },
  active: {
    id: 'app.dropdown.list.item.activeLabel',
    description: 'active item label'
  }
});
class BBBMenu extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      anchorEl: null
    };
    this.optsToMerge = {};
    this.autoFocus = false;
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleClick = this.handleClick.bind(this);
    this.handleClose = this.handleClose.bind(this);
  }
  componentDidUpdate() {
    const {
      anchorEl
    } = this.state;
    const {
      open
    } = this.props;
    if (open === false && anchorEl) {
      this.setState({
        anchorEl: null
      });
    } else if (open === true && !anchorEl) {
      this.setState({
        anchorEl: this.anchorElRef
      });
    }
  }
  handleKeyDown(event) {
    const {
      anchorEl
    } = this.state;
    const {
      isHorizontal
    } = this.props;
    const isMenuOpen = Boolean(anchorEl);
    const previousKey = isHorizontal ? KEY_CODES.ARROW_LEFT : KEY_CODES.ARROW_UP;
    const nextKey = isHorizontal ? KEY_CODES.ARROW_RIGHT : KEY_CODES.ARROW_DOWN;
    if ([KEY_CODES.ESCAPE, KEY_CODES.TAB].includes(event.which)) {
      this.handleClose();
      return;
    }
    if (isMenuOpen && [previousKey, nextKey].includes(event.which)) {
      event.preventDefault();
      event.stopPropagation();
      const menuItems = Array.from(document.querySelectorAll('[data-key^="menuItem-"]'));
      if (menuItems.length === 0) return;
      const focusedIndex = menuItems.findIndex(item => item === document.activeElement);
      const nextIndex = event.which === previousKey ? focusedIndex - 1 : focusedIndex + 1;
      let indexToFocus = 0;
      if (nextIndex < 0) {
        indexToFocus = menuItems.length - 1;
      } else if (nextIndex >= menuItems.length) {
        indexToFocus = 0;
      } else {
        indexToFocus = nextIndex;
      }
      menuItems[indexToFocus].focus();
    }
  }
  handleClick(event) {
    this.setState({
      anchorEl: event.currentTarget
    });
  }
  handleClose(event) {
    const {
      onCloseCallback
    } = this.props;
    this.setState({
      anchorEl: null
    }, onCloseCallback());
    if (event) {
      event.persist();
      if (event.type === 'click') {
        setTimeout(() => {
          document.activeElement.blur();
        }, 0);
      }
    }
  }
  makeMenuItems() {
    var _actions$map;
    const {
      actions,
      selectedEmoji,
      intl,
      isHorizontal,
      isMobile,
      roundButtons,
      keepOpen
    } = this.props;
    return (_actions$map = actions === null || actions === void 0 ? void 0 : actions.map(a => {
      var _key$toLowerCase;
      const {
        dataTest,
        label,
        onClick,
        key,
        disabled,
        description,
        selected,
        textColor,
        isToggle,
        loading
      } = a;
      const emojiSelected = key === null || key === void 0 ? void 0 : (_key$toLowerCase = key.toLowerCase()) === null || _key$toLowerCase === void 0 ? void 0 : _key$toLowerCase.includes(selectedEmoji === null || selectedEmoji === void 0 ? void 0 : selectedEmoji.toLowerCase());
      let customStyles = {
        paddingLeft: '16px',
        paddingRight: '16px',
        paddingTop: '12px',
        paddingBottom: '12px',
        marginLeft: '0px',
        marginRight: '0px'
      };
      if (a.customStyles) {
        customStyles = _objectSpread(_objectSpread({}, customStyles), a.customStyles);
      }
      if (loading) {
        return /*#__PURE__*/React.createElement(MenuSkeleton, {
          key: label
        });
      }
      return [!a.isSeparator && onClick && /*#__PURE__*/React.createElement(Styled.BBBMenuItem, {
        emoji: emojiSelected ? 'yes' : 'no',
        key: label,
        "data-test": dataTest,
        "data-key": "menuItem-".concat(dataTest),
        disableRipple: true,
        disableGutters: true,
        disabled: disabled,
        style: customStyles,
        $roundButtons: roundButtons,
        $isToggle: isToggle,
        onClick: event => {
          onClick();
          const close = !keepOpen && !(key !== null && key !== void 0 && key.includes('setstatus')) && !(key !== null && key !== void 0 && key.includes('back'));
          // prevent menu close for sub menu actions
          if (close) this.handleClose(event);
          event.stopPropagation();
        }
      }, /*#__PURE__*/React.createElement(Styled.MenuItemWrapper, null, a.icon ? /*#__PURE__*/React.createElement(Icon, {
        iconName: a.icon,
        key: "icon"
      }) : null, /*#__PURE__*/React.createElement(Styled.Option, {
        isHorizontal: isHorizontal,
        isMobile: isMobile,
        "aria-describedby": "".concat(key, "-option-desc")
      }, label), description && /*#__PURE__*/React.createElement("div", {
        className: "sr-only",
        id: "".concat(key, "-option-desc")
      }, "".concat(description).concat(selected ? " - ".concat(intl.formatMessage(intlMessages.active)) : '')), a.iconRight ? /*#__PURE__*/React.createElement(Styled.IconRight, {
        iconName: a.iconRight,
        key: "iconRight"
      }) : null)), !onClick && !a.isSeparator && /*#__PURE__*/React.createElement(Styled.BBBMenuInformation, {
        key: a.key
      }, /*#__PURE__*/React.createElement(Styled.MenuItemWrapper, null, a.icon ? /*#__PURE__*/React.createElement(Icon, {
        color: textColor,
        iconName: a.icon,
        key: "icon"
      }) : null, /*#__PURE__*/React.createElement(Styled.Option, {
        textColor: textColor,
        isHorizontal: isHorizontal,
        isMobile: isMobile,
        "aria-describedby": "".concat(key, "-option-desc")
      }, label), a.iconRight ? /*#__PURE__*/React.createElement(Styled.IconRight, {
        color: textColor,
        iconName: a.iconRight,
        key: "iconRight"
      }) : null)), a.isSeparator && /*#__PURE__*/React.createElement(Divider, {
        disabled: true
      })];
    })) !== null && _actions$map !== void 0 ? _actions$map : [];
  }
  render() {
    const {
      anchorEl
    } = this.state;
    const {
      trigger,
      intl,
      customStyles,
      dataTest,
      opts,
      accessKey,
      open,
      renderOtherComponents,
      customAnchorEl,
      hasRoundedCorners,
      overrideMobileStyles,
      isHorizontal
    } = this.props;
    const actionsItems = this.makeMenuItems();
    const roundedCornersStyles = {
      borderRadius: '1.8rem'
    };
    let menuStyles = {
      zIndex: 999
    };
    if (customStyles) {
      menuStyles = _objectSpread(_objectSpread({}, menuStyles), customStyles);
    }
    if (isHorizontal) {
      const horizontalStyles = {
        display: 'flex'
      };
      menuStyles = _objectSpread(_objectSpread({}, menuStyles), horizontalStyles);
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
      onClick: e => {
        e.persist();
        const firefoxInputSource = ![1, 5].includes(e.nativeEvent.mozInputSource); // 1 = mouse, 5 = touch (firefox only)
        const chromeInputSource = !['mouse', 'touch'].includes(e.nativeEvent.pointerType);
        this.optsToMerge.autoFocus = firefoxInputSource && chromeInputSource;
        this.handleClick(e);
      },
      onKeyPress: e => {
        e.persist();
        if (e.which !== KEY_CODES.ENTER) return null;
        this.handleClick(e);
      },
      accessKey: accessKey,
      ref: ref => this.anchorElRef = ref,
      role: "button",
      tabIndex: -1
    }, trigger), /*#__PURE__*/React.createElement(Styled.MenuWrapper, _extends({}, opts, this.optsToMerge, {
      anchorEl: customAnchorEl ? customAnchorEl : anchorEl,
      open: Boolean(anchorEl),
      onClose: this.handleClose,
      style: menuStyles,
      "data-test": dataTest,
      onKeyDownCapture: this.handleKeyDown,
      $isHorizontal: isHorizontal,
      PaperProps: {
        style: hasRoundedCorners ? roundedCornersStyles : {},
        className: overrideMobileStyles ? 'override-mobile-styles' : 'MuiPaper-root-mobile'
      }
    }), actionsItems, renderOtherComponents, !overrideMobileStyles && anchorEl && window.innerWidth < SMALL_VIEWPORT_BREAKPOINT && /*#__PURE__*/React.createElement(Styled.CloseButton, {
      label: intl.formatMessage(intlMessages.close),
      size: "lg",
      color: "default",
      onClick: this.handleClose
    })));
  }
}
BBBMenu.defaultProps = {
  opts: {
    id: "default-dropdown-menu",
    autoFocus: false,
    keepMounted: true,
    transitionDuration: 0,
    elevation: 3,
    getcontentanchorel: null,
    fullwidth: "true",
    anchorOrigin: {
      vertical: 'top',
      horizontal: 'right'
    },
    transformorigin: {
      vertical: 'top',
      horizontal: 'right'
    }
  },
  onCloseCallback: () => {},
  dataTest: ''
};
BBBMenu.propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  trigger: PropTypes.element.isRequired,
  actions: PropTypes.array.isRequired,
  onCloseCallback: PropTypes.func,
  dataTest: PropTypes.string,
  open: PropTypes.bool,
  customStyles: PropTypes.object,
  opts: PropTypes.object,
  accessKey: PropTypes.string
};
module.exportDefault(injectIntl(BBBMenu));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"skeleton.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/menu/skeleton.tsx                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Skeleton, SkeletonTheme;
module.link("react-loading-skeleton", {
  default(v) {
    Skeleton = v;
  },
  SkeletonTheme(v) {
    SkeletonTheme = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 3);
const MenuSkeleton = () => {
  const Settings = getSettingsSingletonInstance();
  // @ts-ignore
  const {
    isRTL
  } = Settings.application;
  return /*#__PURE__*/React.createElement(Styled.Skeleton, null, /*#__PURE__*/React.createElement(SkeletonTheme, {
    baseColor: "#DCE4EC"
  }, /*#__PURE__*/React.createElement(Styled.SkeletonWrapper, null, /*#__PURE__*/React.createElement(Skeleton, {
    direction: isRTL ? 'rtl' : 'ltr'
  }))));
};
module.exportDefault(MenuSkeleton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/menu/styles.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 2);
let MenuItem;
module.link("@mui/material/MenuItem", {
  default(v) {
    MenuItem = v;
  }
}, 3);
let colorWhite, colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 4);
let fontSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarge(v) {
    fontSizeLarge = v;
  }
}, 5);
let mediumUp;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  mediumUp(v) {
    mediumUp = v;
  }
}, 6);
let Menu;
module.link("@mui/material/Menu", {
  default(v) {
    Menu = v;
  }
}, 7);
const MenuWrapper = styled(Menu)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n"])), _ref => {
  let {
    isMobile
  } = _ref;
  return isMobile && "\n    flex-direction: column;\n    align-items: center;\n    padding: .5rem 0;\n  ";
}, _ref2 => {
  let {
    $isHorizontal,
    isMobile
  } = _ref2;
  return ($isHorizontal || isMobile) && "\n    ul {\n      display: flex;\n    }\n\n    li:hover {\n      background-color: unset !important;\n    }\n\n  ";
});
const MenuItemWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  width: 100%;\n  align-items: center;\n"])));
const Option = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  line-height: 1;\n  margin-right: 1.65rem;\n  margin-left: .5rem;\n  white-space: normal;\n  overflow-wrap: anywhere;\n  padding: .1rem 0;\n\n  [dir=\"rtl\"] & {\n    margin-right: .5rem;\n    margin-left: 1.65rem;\n  }\n\n  ", "\n\n  ", "\n"])), _ref3 => {
  let {
    textColor
  } = _ref3;
  return textColor && "\n    color: ".concat(textColor, ";\n  ");
}, _ref4 => {
  let {
    isHorizontal,
    isMobile
  } = _ref4;
  return (isHorizontal || isMobile) && "\n    margin-right: 0;\n    margin-left: 0;\n  ";
});
const CloseButton = styled(Button)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: fixed;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 5rem;\n  background-color: ", ";\n  padding: 1rem;\n\n  border-radius: 0;\n  z-index: 1011;\n  font-size: calc(", " * 1.1);\n  box-shadow: 0 0 0 2rem ", " !important;\n  border: ", " !important;\n  cursor: pointer !important;\n\n  @media ", " {\n    display: none;\n  }\n"])), colorWhite, fontSizeLarge, colorWhite, colorWhite, mediumUp);
const IconRight = styled(Icon)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: flex-end;\n  flex: 1;\n"])));
const BBBMenuInformation = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  padding: 12px 16px;\n  margin: 0;\n"])));
const BBBMenuItem = styled(MenuItem)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  transition: none !important;\n  font-size: 90% !important;\n  \n  &:focus,\n  &:hover {\n    i { \n      color: #FFF;\n    }\n    color: #FFF !important;\n    background-color: ", " !important;\n  }\n\n  ", "\n  ", "\n  ", "\n"])), colorPrimary, _ref5 => {
  let {
    emoji
  } = _ref5;
  return emoji === 'yes' && "\n    div,\n    i {\n      color: ".concat(colorPrimary, ";\n    }\n\n    &:focus,\n    &:hover {\n      div,\n      i {\n        color: #FFF ;\n      }\n    }\n  ");
}, _ref6 => {
  let {
    $roundButtons,
    $isToggle
  } = _ref6;
  return $roundButtons && !$isToggle && "\n    &:focus,\n    &:hover {\n      background-color: ".concat(colorWhite, " !important;\n      div div div {\n        background-color: ").concat(colorPrimary, " !important;\n        border: 1px solid ").concat(colorPrimary, " !important;\n      }\n    }\n  ");
}, _ref7 => {
  let {
    $isToggle
  } = _ref7;
  return $isToggle && "\n    &:focus,\n    &:hover {\n        color: inherit !important;\n    }\n  ";
});
const Skeleton = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  padding: 12px 16px;\n  font-size: 0.9em !important;\n  line-height: 1;\n"])));
const SkeletonWrapper = styled.span(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  width: 100%;\n"])));
module.exportDefault({
  MenuWrapper,
  MenuItemWrapper,
  Option,
  CloseButton,
  IconRight,
  BBBMenuItem,
  BBBMenuInformation,
  Skeleton,
  SkeletonWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"radio":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/radio/component.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => Radio
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Base;
module.link("../checkbox/base", {
  default(v) {
    Base = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
class Radio extends Base {
  render() {
    const {
      ariaLabel,
      ariaDesc,
      ariaDescribedBy,
      ariaLabelledBy,
      checked,
      disabled,
      label
    } = this.props;
    const radio = /*#__PURE__*/React.createElement(Styled.Radio, {
      checked: checked,
      checkedIcon: /*#__PURE__*/React.createElement(Styled.RadioIconChecked, {
        iconName: "check"
      }),
      icon: /*#__PURE__*/React.createElement(Styled.RadioIcon, {
        iconName: "circle"
      }),
      disabled: disabled,
      inputProps: {
        'aria-label': ariaLabel,
        'aria-describedby': ariaDescribedBy,
        'aria-labelledby': ariaLabelledBy
      },
      onChange: this.handleChange,
      ref: this.element
    });
    return /*#__PURE__*/React.createElement(React.Fragment, null, label ? /*#__PURE__*/React.createElement(Styled.Label, {
      label: label,
      control: radio
    }) : radio, /*#__PURE__*/React.createElement("div", {
      id: ariaDescribedBy,
      hidden: true
    }, ariaDesc));
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/radio/styles.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorText, colorSuccess;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorText(v) {
    colorText = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  }
}, 1);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 2);
let BaseRadio;
module.link("@mui/material/Radio", {
  default(v) {
    BaseRadio = v;
  }
}, 3);
let FormControlLabel;
module.link("@mui/material/FormControlLabel", {
  default(v) {
    FormControlLabel = v;
  }
}, 4);
let muiStyled;
module.link("@mui/system", {
  styled(v) {
    muiStyled = v;
  }
}, 5);
const Radio = muiStyled(BaseRadio)(() => ({
  '&.Mui-checked': {
    color: "".concat(colorSuccess, " !important")
  }
}));
const Label = muiStyled(FormControlLabel)(() => ({
  '& .MuiFormControlLabel-label': {
    fontFamily: 'inherit !important',
    color: "".concat(colorText, " !important")
  },
  '&.Mui-disabled': {
    cursor: 'not-allowed !important'
  }
}));
const RadioIcon = styled(Icon)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const RadioIconChecked = styled(RadioIcon)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
module.exportDefault({
  RadioIcon,
  RadioIconChecked,
  Radio,
  Label
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"separator":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/separator/component.tsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const Separator = () => /*#__PURE__*/React.createElement(Styled.Separator, null);
module.exportDefault(Separator);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/separator/styles.ts                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const Separator = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  width: 10px; \n  height: 100%;"])));
module.exportDefault({
  Separator
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"spinner":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/spinner/component.tsx                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  "*"(v) {
    Styled = v;
  }
}, 1);
const Spinner = () => {
  return /*#__PURE__*/React.createElement(Styled.LoadingSpinnerWrapper, null, /*#__PURE__*/React.createElement(Styled.LoadingSpinner, null));
};
module.exportDefault(Spinner);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/spinner/styles.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  LoadingSpinner: () => LoadingSpinner,
  LoadingSpinnerWrapper: () => LoadingSpinnerWrapper
});
let styled, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
const colorGray = '#4E5A66';
const LoadingSpinnerAnimation = keyframes(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n"])));
const LoadingSpinnerWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 10%;\n  height: 100%;\n"])));
const LoadingSpinner = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  width: 1.7rem;\n  height: 1.7rem;\n  border: 3px solid ", ";\n  border-radius: 2rem;\n  animation: ", " 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n  border-color: ", " transparent transparent transparent;\n  cursor: not-allowed;\n\n  &:nth-child(1) {\n    animation-delay: -0.45s;\n  }\n\n  &:nth-child(2) {\n    animation-delay: -0.3s;\n  }\n\n  &:nth-child(3) {\n    animation-delay: -0.15s;\n  }\n"])), colorGray, LoadingSpinnerAnimation, colorGray);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"switch":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/switch/component.jsx                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["intl", "icons", "ariaLabelledBy", "ariaDescribedBy", "ariaLabel", "ariaDesc", "showToggleLabel", "invertColors", "disabled"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Toggle;
module.link("react-toggle", {
  default(v) {
    Toggle = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const intlMessages = defineMessages({
  on: {
    id: 'app.switch.onLabel',
    description: 'label for toggle switch on state'
  },
  off: {
    id: 'app.switch.offLabel',
    description: 'label for toggle switch off state'
  }
});
const defaultProps = {
  showToggleLabel: true,
  invertColors: false
};
class Switch extends Toggle {
  render() {
    const _this$props = this.props,
      {
        intl,
        icons: _icons,
        ariaLabelledBy,
        ariaDescribedBy,
        ariaLabel,
        ariaDesc,
        showToggleLabel,
        invertColors,
        disabled
      } = _this$props,
      inputProps = _objectWithoutProperties(_this$props, _excluded);
    const Settings = getSettingsSingletonInstance();
    const {
      animations
    } = Settings.application;
    const {
      checked,
      hasFocus
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.Switch, {
      onClick: this.handleClick,
      onTouchStart: this.handleTouchStart,
      onTouchMove: this.handleTouchMove,
      onTouchEnd: this.handleTouchEnd,
      disabled: disabled,
      animations: animations
    }, /*#__PURE__*/React.createElement(Styled.ToggleTrack, {
      "aria-hidden": "true",
      checked: checked,
      invertColors: invertColors,
      animations: animations
    }, /*#__PURE__*/React.createElement(Styled.ToggleTrackCheck, {
      checked: checked,
      animations: animations
    }, showToggleLabel ? intl.formatMessage(intlMessages.on) : null), /*#__PURE__*/React.createElement(Styled.ToggleTrackX, {
      checked: checked,
      animations: animations
    }, showToggleLabel ? intl.formatMessage(intlMessages.off) : null)), /*#__PURE__*/React.createElement(Styled.ToggleThumb, {
      checked: checked,
      hasFocus: hasFocus,
      disabled: disabled,
      animations: animations,
      isRTL: document.getElementsByTagName('html')[0].dir === 'rtl'
    }), /*#__PURE__*/React.createElement(Styled.ScreenreaderInput, _extends({}, inputProps, {
      ref: ref => {
        this.input = ref;
      },
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      type: "checkbox",
      tabIndex: "0",
      disabled: disabled,
      "aria-label": ariaLabel,
      "aria-describedby": ariaDescribedBy
    })), /*#__PURE__*/React.createElement("div", {
      id: ariaDescribedBy,
      hidden: true
    }, ariaDesc));
  }
}
Switch.defaultProps = defaultProps;
module.exportDefault(injectIntl(Switch));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/switch/styles.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  }
}, 0);
let borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  }
}, 1);
let colorDanger, colorSuccess;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorDanger(v) {
    colorDanger = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  }
}, 2);
const Switch = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  &:hover,\n  &:focus,\n  &:focus-within {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n\n  &:focus,\n  &:focus-within {\n    outline-style: solid;\n  }\n\n  display: inline-block;\n  position: relative;\n  cursor: pointer;\n  background-color: transparent;\n  border: 0;\n  padding: 0;\n\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n\n  -webkit-tap-highlight-color: rgba(0,0,0,0);\n  -webkit-tap-highlight-color: transparent;\n\n  ", "\n\n  ", "\n"])), borderSize, _ref => {
  let {
    disabled
  } = _ref;
  return disabled && "\n    cursor: not-allowed;\n    opacity: 0.5;\n  ";
}, _ref2 => {
  let {
    disabled,
    animations
  } = _ref2;
  return disabled && animations && "\n    transition: opacity 0.25s;\n  ";
});
const ToggleTrack = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  overflow: hidden;\n  width: 3.5rem;\n  height: 1.5rem;\n  padding: 0;\n  border-radius: 2rem;\n  background-color: ", ";\n\n  [dir=\"rtl\"] & {\n    width: 4rem;\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n"])), colorDanger, _ref3 => {
  let {
    animations
  } = _ref3;
  return animations && "\n    transition: all 0.2s ease;\n  ";
}, _ref4 => {
  let {
    checked
  } = _ref4;
  return checked && "\n    background-color: ".concat(colorSuccess, ";\n  ");
}, _ref5 => {
  let {
    invertColors,
    checked
  } = _ref5;
  return invertColors && !checked && "\n    background-color: ".concat(colorSuccess, " !important;\n  ");
}, _ref6 => {
  let {
    invertColors,
    checked
  } = _ref6;
  return invertColors && checked && "\n    background-color: ".concat(colorDanger, " !important;\n  ");
});
const ToggleTrackCheck = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  position: absolute;\n  color: white;\n  width: 1rem;\n  line-height: 1.5rem;\n  font-size: 0.8rem;\n  left: 0.5rem;\n  opacity: 0;\n\n  [dir=\"rtl\"] & {\n    left: 0.8rem;\n  }\n\n  ", "\n\n  ", "\n"])), _ref7 => {
  let {
    animations
  } = _ref7;
  return animations && "\n    transition: opacity 0.25s ease;\n  ";
}, _ref8 => {
  let {
    checked
  } = _ref8;
  return checked && "\n    opacity: 1;\n    transition: opacity calc(var(--enableAnimation) * 0.25s) ease;\n  ";
});
const ToggleTrackX = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: absolute;\n  color: white;\n  width: 1rem;\n  line-height: 1.5rem;\n  font-size: 0.8rem;\n  left: 1.7rem;\n  opacity: 1;\n\n  [dir=\"rtl\"] & {\n    left: 2.2rem;\n  }\n\n  ", "\n\n  ", "\n"])), _ref9 => {
  let {
    animations
  } = _ref9;
  return animations && "\n    transition: opacity 0.25s ease;\n  ";
}, _ref10 => {
  let {
    checked
  } = _ref10;
  return checked && "\n    opacity: 0;\n  ";
});
const ToggleThumb = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 1px;\n  left: ", ";\n  width: 1.35rem;\n  height: 1.35rem;\n  border-radius: 50%;\n  background-color: #FAFAFA;\n  box-sizing: border-box;\n  box-shadow: 2px 0px 10px -1px rgba(0,0,0,0.4);\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), _ref11 => {
  let {
    isRTL
  } = _ref11;
  return isRTL ? '2.6rem' : '1px';
}, _ref12 => {
  let {
    animations
  } = _ref12;
  return animations && "\n    transition: all 0.5s cubic-bezier(0.23, 1, 0.32, 1) 0ms;\n  ";
}, _ref13 => {
  let {
    checked
  } = _ref13;
  return checked && css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n    left: ", ";\n    box-shadow: -2px 0px 10px -1px rgba(0,0,0,0.4);\n  "])), _ref14 => {
    let {
      isRTL
    } = _ref14;
    return isRTL ? '1px' : '2.1rem';
  });
}, _ref15 => {
  let {
    hasFocus
  } = _ref15;
  return hasFocus && "\n    box-shadow: 0px 0px 2px 3px #0F70D7;\n  ";
}, _ref16 => {
  let {
    disabled
  } = _ref16;
  return !disabled && "\n    &:active{\n      box-shadow: 0px 0px 5px 5px #0F70D7;\n    }\n  ";
});
const ScreenreaderInput = styled.input(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  border: 0;\n  clip: rect(0 0 0 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n"])));
module.exportDefault({
  Switch,
  ToggleTrack,
  ToggleTrackCheck,
  ToggleTrackX,
  ToggleThumb,
  ScreenreaderInput
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"tooltip":{"bbbtip.css":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/tooltip/bbbtip.css                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.exports = require("meteor/modules").addStyles(
  ".tippy-box[data-theme~='bbbtip']{\r\n    color:#fff;\r\n    background-color:#333333;\r\n    padding: .25rem .5rem;\r\n    border-radius: 4px;\r\n    user-select: none;\r\n}\r\n\r\n.tippy-box[data-theme~='bbbtip']>.tippy-svg-arrow{\r\n    fill: #333333;\r\n    background-color: transparent;\r\n}\r\n\r\n.tippy-box[data-theme~='bbbtip']>.tippy-content{\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n}"
);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/tooltip/component.jsx                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["children", "className", "title"];
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let cx;
module.link("classnames", {
  default(v) {
    cx = v;
  }
}, 2);
let ESCAPE;
module.link("/imports/utils/keyCodes", {
  ESCAPE(v) {
    ESCAPE = v;
  }
}, 3);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 4);
let Tippy, roundArrow;
module.link("tippy.js", {
  default(v) {
    Tippy = v;
  },
  roundArrow(v) {
    roundArrow = v;
  }
}, 5);
module.link("tippy.js/dist/svg-arrow.css");
module.link("tippy.js/animations/shift-away.css");
module.link("./bbbtip.css");
let BaseButton;
module.link("/imports/ui/components/common/button/base/component", {
  default(v) {
    BaseButton = v;
  }
}, 6);
let ButtonEmoji;
module.link("/imports/ui/components/common/button/button-emoji/ButtonEmoji", {
  default(v) {
    ButtonEmoji = v;
  }
}, 7);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 8);
const ANIMATION_DURATION = 350;
const ANIMATION_DELAY = [150, 50];
const DEFAULT_ANIMATION = 'shift-away';
const ANIMATION_NONE = 'none';
const TIP_OFFSET = [0, 10];
const propTypes = {
  title: PropTypes.string,
  position: PropTypes.oneOf(['bottom', 'top']),
  children: PropTypes.element.isRequired,
  className: PropTypes.string
};
const defaultProps = {
  position: 'bottom',
  className: null,
  title: ''
};
class Tooltip extends Component {
  static buttonComponentHasButtonEmoji(_component) {
    return _component && _component.type === BaseButton && _component.props && _component.props.children && typeof _component.props.children.find === 'function' && !!_component.props.children.find(_child => _child && _child.type === ButtonEmoji);
  }
  constructor(props) {
    super(props);
    this.tippySelectorId = uniqueId('tippy-');
    this.onShow = this.onShow.bind(this);
    this.onHide = this.onHide.bind(this);
    this.handleEscapeHide = this.handleEscapeHide.bind(this);
  }
  componentDidMount() {
    const {
      position,
      title,
      delay,
      placement
    } = this.props;
    const Settings = getSettingsSingletonInstance();
    const {
      animations
    } = Settings.application;
    const overridePlacement = placement ? placement : position;
    let overrideDelay;
    if (animations) {
      overrideDelay = delay ? [delay, ANIMATION_DELAY[1]] : ANIMATION_DELAY;
    } else {
      overrideDelay = delay ? [delay, 0] : [ANIMATION_DELAY[0], 0];
    }
    const options = {
      aria: null,
      allowHTML: false,
      animation: animations ? DEFAULT_ANIMATION : ANIMATION_NONE,
      appendTo: document.body,
      arrow: roundArrow,
      popperOptions: {
        modifiers: [{
          name: 'preventOverflow',
          options: {
            altAxis: true,
            boundary: document.documentElement
          }
        }]
      },
      content: title,
      delay: overrideDelay,
      duration: animations ? ANIMATION_DURATION : 0,
      interactive: true,
      interactiveBorder: 10,
      onShow: this.onShow,
      onHide: this.onHide,
      offset: TIP_OFFSET,
      placement: overridePlacement,
      touch: ['hold', 1000],
      theme: 'bbbtip'
    };
    this.tooltip = Tippy("#".concat(this.tippySelectorId), options);
  }
  componentDidUpdate() {
    const Settings = getSettingsSingletonInstance();
    const {
      animations
    } = Settings.application;
    const {
      title
    } = this.props;
    const elements = document.querySelectorAll('[id^="tippy-"]');
    Array.from(elements).filter(e => {
      const instance = e._tippy;
      if (!instance) return false;
      const animation = animations ? DEFAULT_ANIMATION : ANIMATION_NONE;
      if (animation === instance.props.animation) return false;
      return true;
    }).forEach(e => {
      const instance = e._tippy;
      const newProps = {
        animation: animations ? DEFAULT_ANIMATION : ANIMATION_NONE,
        duration: animations ? ANIMATION_DURATION : 0
      };
      if (!e.getAttribute("delay")) {
        newProps["delay"] = animations ? ANIMATION_DELAY : [ANIMATION_DELAY[0], 0];
      }
      instance.setProps(newProps);
    });
    const elem = document.getElementById(this.tippySelectorId);
    const opts = {
      content: title,
      appendTo: document.body
    };
    if (elem && elem._tippy) elem._tippy.setProps(opts);
  }
  componentWillUnmount() {
    setTimeout(() => {
      const tooltip = this.tooltip[0];
      if (tooltip) tooltip.hide();
    }, 150);
  }
  onShow() {
    document.addEventListener('keyup', this.handleEscapeHide);
  }
  onHide() {
    document.removeEventListener('keyup', this.handleEscapeHide);
  }
  handleEscapeHide(e) {
    if (this.tooltip && e.keyCode === ESCAPE && this.tooltip.tooltips && this.tooltip.tooltips[0]) {
      this.tooltip.tooltips[0].hide();
    }
  }
  render() {
    const _this$props = this.props,
      {
        children,
        className,
        title
      } = _this$props,
      restProps = _objectWithoutProperties(_this$props, _excluded);
    let WrappedComponent;
    let WrappedComponentBound;
    if (Tooltip.buttonComponentHasButtonEmoji(children)) {
      const {
        children: grandChildren
      } = children.props;
      let otherChildren;
      [WrappedComponent, ...otherChildren] = grandChildren;
      WrappedComponentBound = /*#__PURE__*/React.cloneElement(WrappedComponent, {
        id: this.tippySelectorId,
        className: cx(WrappedComponent.props.className, className),
        key: this.tippySelectorId
      });
      const ParentComponent = React.Children.only(children);
      const updatedChildren = [WrappedComponentBound, ...otherChildren];
      return /*#__PURE__*/React.cloneElement(ParentComponent, null, updatedChildren);
    }
    WrappedComponent = React.Children.only(children);
    WrappedComponentBound = /*#__PURE__*/React.cloneElement(WrappedComponent, _objectSpread(_objectSpread({}, restProps), {}, {
      id: this.tippySelectorId,
      className: cx(children.props.className, className)
    }));
    return WrappedComponentBound;
  }
}
module.exportDefault(Tooltip);
Tooltip.defaultProps = defaultProps;
Tooltip.propTypes = propTypes;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/common/tooltip/container.jsx                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let FullscreenService;
module.link("/imports/ui/components/common/fullscreen-button/service", {
  default(v) {
    FullscreenService = v;
  }
}, 1);
let Tooltip;
module.link("./component", {
  default(v) {
    Tooltip = v;
  }
}, 2);
const TooltipContainer = props => /*#__PURE__*/React.createElement(Tooltip, _extends({}, props, {
  fullscreen: FullscreenService.getFullscreenElement()
}));
module.exportDefault(TooltipContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"dropdown":{"list":{"item":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/list/item/component.jsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 4);
const propTypes = {
  icon: PropTypes.string,
  label: PropTypes.string,
  description: PropTypes.string,
  accessKey: PropTypes.string,
  tabIndex: PropTypes.number,
  disabled: PropTypes.bool
};
const defaultProps = {
  icon: '',
  label: '',
  description: '',
  tabIndex: 0,
  accessKey: null,
  disabled: false
};
const messages = defineMessages({
  activeAriaLabel: {
    id: 'app.dropdown.list.item.activeLabel'
  }
});
class DropdownListItem extends Component {
  constructor(props) {
    super(props);
    this.labelID = uniqueId('dropdown-item-label-');
    this.descID = uniqueId('dropdown-item-desc-');
  }
  renderDefault() {
    const {
      icon,
      label,
      iconRight,
      accessKey
    } = this.props;
    return [icon ? /*#__PURE__*/React.createElement(Styled.ItemIcon, {
      iconName: icon,
      key: "icon"
    }) : null, /*#__PURE__*/React.createElement(Styled.ItemLabel, {
      key: "label",
      accessKey: accessKey
    }, label), iconRight ? /*#__PURE__*/React.createElement(Styled.IconRight, {
      iconName: iconRight,
      key: "iconRight"
    }) : null];
  }
  render() {
    const {
      id,
      label,
      description,
      children,
      injectRef,
      tabIndex,
      onClick,
      onKeyDown,
      className,
      style,
      intl,
      disabled,
      'data-test': dataTest
    } = this.props;
    const isSelected = className && className.includes('emojiSelected');
    const _label = isSelected ? "".concat(label, " (").concat(intl.formatMessage(messages.activeAriaLabel), ")") : label;
    return /*#__PURE__*/React.createElement(Styled.Item, {
      id: id,
      ref: injectRef,
      onClick: disabled ? () => {} : onClick,
      onKeyDown: disabled ? () => {} : onKeyDown,
      tabIndex: tabIndex,
      "aria-labelledby": this.labelID,
      "aria-describedby": this.descID,
      style: style,
      role: "menuitem",
      "data-test": dataTest
    }, children || this.renderDefault(), label ? /*#__PURE__*/React.createElement("span", {
      id: this.labelID,
      key: "labelledby",
      hidden: true
    }, _label) : null, /*#__PURE__*/React.createElement("span", {
      id: this.descID,
      key: "describedby",
      hidden: true
    }, description));
  }
}
module.exportDefault(injectIntl(DropdownListItem));
DropdownListItem.propTypes = propTypes;
DropdownListItem.defaultProps = defaultProps;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/list/item/styles.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 1);
let lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 2);
let colorGrayDark, colorPrimary, colorWhite, colorText;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorText(v) {
    colorText = v;
  }
}, 3);
let borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  }
}, 4);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 5);
const ItemIcon = styled(Icon)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin: 0 calc(", " / 2) 0 0;\n  color: ", ";\n  flex: 0 0;\n\n  [dir=\"rtl\"] & {\n    margin: 0 0 0 calc(", " / 2);\n  }\n"])), lineHeightComputed, colorText, lineHeightComputed);
const ItemLabel = styled.span(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: 90%;\n  flex: 1;\n"])), colorGrayDark);
const IconRight = styled(ItemIcon)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin-right: 0;\n  margin-left: 1rem;\n  font-size: 12px;\n  line-height: 16px;\n\n  [dir=\"rtl\"] & {\n    margin-left: 0;\n    margin-right: 1rem;\n    -webkit-transform: scale(-1, 1);\n    -moz-transform: scale(-1, 1);\n    -ms-transform: scale(-1, 1);\n    -o-transform: scale(-1, 1);\n    transform: scale(-1, 1);\n  }\n"])));
const Item = styled.li(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex: 1 1 100%;\n  align-items: center;\n  padding: calc(", " / 3) 0;\n\n  &:hover,\n  &:focus {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n\n    cursor: pointer;\n    background-color: ", ";\n    color: ", ";\n\n    & > span {\n      color: ", " !important;\n    }\n\n    margin-left: -.25rem;\n    margin-right: -.25rem;\n    padding-left: .25rem;\n    padding-right: .25rem;\n\n    [dir=\"rtl\"] & {\n      margin-right: -.25rem;\n      margin-left: -.25rem;\n      padding-right: .25rem;\n      padding-left: .25rem;\n    }\n\n\n    @media ", " {\n      border-radius: 0.2rem;\n    }\n\n    & i {\n      color: inherit;\n    }\n  }\n\n  &:focus {\n    box-shadow: 0 0 0 2px ", ", 0 0 2px 4px rgba(", ", .4);\n    outline-style: solid;\n  }\n"])), lineHeightComputed, borderSize, colorPrimary, colorWhite, colorWhite, smallOnly, colorWhite, colorPrimary);
module.exportDefault({
  ItemIcon,
  ItemLabel,
  IconRight,
  Item
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"separator":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/list/separator/component.jsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
const DropdownListSeparator = _ref => {
  let {
    style = null
  } = _ref;
  return /*#__PURE__*/React.createElement(Styled.Separator, {
    style: style
  });
};
DropdownListSeparator.propTypes = {
  style: PropTypes.shape({})
};
module.exportDefault(DropdownListSeparator);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/list/separator/styles.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGrayLighter;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayLighter(v) {
    colorGrayLighter = v;
  }
}, 1);
let lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 2);
const Separator = styled.li(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex: 1 1 100%;\n  height: 1px;\n  min-height: 1px;\n  background-color: ", ";\n  padding: 0;\n  margin-top: calc(", " * .5);\n  margin-bottom: calc(", " * .5);\n"])), colorGrayLighter, lineHeightComputed, lineHeightComputed);
module.exportDefault({
  Separator
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"title":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/list/title/component.jsx                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => DropdownListTitle
});
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 2);
class DropdownListTitle extends Component {
  constructor(props) {
    super(props);
    this.labelID = uniqueId('labelContext-');
  }
  render() {
    const {
      children
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.Title, {
      "aria-hidden": true
    }, children);
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/list/title/styles.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  }
}, 1);
const Title = styled.li(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  color: ", ";\n  font-weight: 600;\n  width: 100%;\n"])), colorGray);
module.exportDefault({
  Title
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/list/component.jsx                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => DropdownList
});
let React, Component, Children, cloneElement;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  },
  Children(v) {
    Children = v;
  },
  cloneElement(v) {
    cloneElement = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let KEY_CODES;
module.link("/imports/utils/keyCodes", {
  default(v) {
    KEY_CODES = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let ListItem;
module.link("./item/component", {
  default(v) {
    ListItem = v;
  }
}, 4);
let ListSeparator;
module.link("./separator/component", {
  default(v) {
    ListSeparator = v;
  }
}, 5);
let ListTitle;
module.link("./title/component", {
  default(v) {
    ListTitle = v;
  }
}, 6);
const propTypes = {
  /*  We should recheck this proptype, sometimes we need to create an container and send to
   dropdown, but with this proptype, is not possible. */
  children: PropTypes.arrayOf((propValue, key, componentName, propFullName) => {
    if (propValue[key].type !== ListItem && propValue[key].type !== ListSeparator && propValue[key].type !== ListTitle) {
      return new Error("Invalid prop `".concat(propFullName, "` supplied to") + " `".concat(componentName, "`. Validation failed."));
    }
    return true;
  }).isRequired,
  horizontal: PropTypes.bool
};
const defaultProps = {
  horizontal: false
};
class DropdownList extends Component {
  constructor(props) {
    super(props);
    this.state = {
      focusedIndex: false
    };
    this.childrenRefs = [];
    this.menuRefs = [];
    this.handleItemKeyDown = this.handleItemKeyDown.bind(this);
    this.handleItemClick = this.handleItemClick.bind(this);
  }
  componentDidMount() {
    this._menu.addEventListener('keydown', event => this.handleItemKeyDown(event));
  }
  componentDidUpdate() {
    const {
      focusedIndex
    } = this.state;
    const children = [].slice.call(this._menu.children);
    this.menuRefs = children.filter(child => child.getAttribute('role') === 'menuitem');
    const activeRef = this.menuRefs[focusedIndex];
    if (activeRef) {
      activeRef.focus();
    }
  }
  handleItemKeyDown(event, callback) {
    const {
      getDropdownMenuParent,
      horizontal
    } = this.props;
    const {
      focusedIndex
    } = this.state;
    let nextFocusedIndex = focusedIndex > 0 ? focusedIndex : 0;
    if (focusedIndex === false) {
      nextFocusedIndex = this.menuRefs.indexOf(document.activeElement);
    }
    const isHorizontal = horizontal;
    const navigationKeys = {
      previous: KEY_CODES["ARROW_".concat(isHorizontal ? 'LEFT' : 'UP')],
      next: KEY_CODES["ARROW_".concat(isHorizontal ? 'RIGHT' : 'DOWN')],
      click: isHorizontal ? [KEY_CODES.ENTER] : [KEY_CODES.ENTER, KEY_CODES.ARROW_RIGHT],
      close: [KEY_CODES.ESCAPE, KEY_CODES.TAB, KEY_CODES["ARROW_".concat(isHorizontal ? 'DOWN' : 'LEFT')]]
    };
    if (navigationKeys.previous === event.which) {
      event.stopPropagation();
      nextFocusedIndex -= 1;
      if (nextFocusedIndex < 0) {
        nextFocusedIndex = this.menuRefs.length - 1;
      } else if (nextFocusedIndex > this.menuRefs.length - 1) {
        nextFocusedIndex = 0;
      }
    }
    if ([navigationKeys.next].includes(event.keyCode)) {
      event.stopPropagation();
      nextFocusedIndex += 1;
      if (nextFocusedIndex > this.menuRefs.length - 1) {
        nextFocusedIndex = 0;
      }
    }
    if (navigationKeys.click.includes(event.keyCode)) {
      nextFocusedIndex = false;
      event.stopPropagation();
      document.activeElement.firstChild.click();
    }
    if (navigationKeys.close.includes(event.keyCode)) {
      nextFocusedIndex = false;
      const {
        dropdownHide
      } = this.props;
      event.stopPropagation();
      event.preventDefault();
      dropdownHide();
      if (getDropdownMenuParent) {
        getDropdownMenuParent().focus();
      }
    }
    this.setState({
      focusedIndex: nextFocusedIndex
    });
    if (typeof callback === 'function') {
      callback(event);
    }
  }
  handleItemClick(event, callback) {
    const {
      getDropdownMenuParent,
      onActionsHide,
      dropdownHide,
      keepOpen
    } = this.props;
    if (!keepOpen) {
      if (getDropdownMenuParent) {
        onActionsHide();
      } else {
        this.setState({
          focusedIndex: null
        });
        dropdownHide();
      }
    }
    if (typeof callback === 'function') {
      callback(event);
    }
  }
  render() {
    const {
      children,
      style,
      horizontal
    } = this.props;
    const boundChildren = Children.map(children, item => {
      if (item.type === ListSeparator) {
        return item;
      }
      return /*#__PURE__*/cloneElement(item, {
        tabIndex: 0,
        injectRef: ref => {
          if (ref && !this.childrenRefs.includes(ref)) {
            this.childrenRefs.push(ref);
          }
        },
        onClick: event => {
          let {
            onClick
          } = item.props;
          onClick = onClick ? onClick.bind(item) : null;
          this.handleItemClick(event, onClick);
        },
        onKeyDown: event => {
          let {
            onKeyDown
          } = item.props;
          onKeyDown = onKeyDown ? onKeyDown.bind(item) : null;
          this.handleItemKeyDown(event, onKeyDown);
        }
      });
    });
    const listDirection = horizontal ? 'horizontal' : 'vertical';
    return /*#__PURE__*/React.createElement(Styled.List, {
      style: style,
      direction: listDirection,
      role: "menu",
      ref: menu => {
        this._menu = menu;
        return menu;
      }
    }, boundChildren);
  }
}
DropdownList.propTypes = propTypes;
DropdownList.defaultProps = defaultProps;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/list/styles.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let fontSizeBase, fontSizeLarge, lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  fontSizeLarge(v) {
    fontSizeLarge = v;
  },
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 1);
let colorGrayDark;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  }
}, 2);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 3);
const List = styled.ul(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  list-style: none;\n  font-size: ", ";\n  margin: 0;\n  padding: 0;\n  text-align: left;\n  color: ", ";\n  display: flex;\n  overflow-wrap: break-word;\n  white-space: pre-line;\n\n  [dir=\"rtl\"] & {\n    text-align: right;\n  }\n\n  @media ", " {\n    font-size: calc(", " * 1.1);\n    padding: ", ";\n  }\n\n  ", "\n\n  ", "\n"])), fontSizeBase, colorGrayDark, smallOnly, fontSizeLarge, lineHeightComputed, _ref => {
  let {
    direction
  } = _ref;
  return direction === 'horizontal' && "\n    padding: 0;\n    flex-direction: row;\n\n    @media ".concat(smallOnly, " {\n      flex-direction: column;\n      padding: calc(").concat(lineHeightComputed, " / 1.5) 0;\n    }\n\n    padding: 0 calc(").concat(lineHeightComputed, " / 3);\n  ");
}, _ref2 => {
  let {
    direction
  } = _ref2;
  return direction === 'vertical' && "\n    flex-direction: column;\n    width: 100%;\n  ";
});
module.exportDefault({
  List
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"content":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/content/component.jsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["children", "dropdownToggle", "dropdownShow", "dropdownHide", "dropdownIsOpen", "keepOpen"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
module.export({
  default: () => DropdownContent
});
let React, Component, Children, cloneElement;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  },
  Children(v) {
    Children = v;
  },
  cloneElement(v) {
    cloneElement = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const defaultProps = {
  'aria-expanded': false
};
class DropdownContent extends Component {
  render() {
    const _this$props = this.props,
      {
        children,
        dropdownToggle,
        dropdownShow,
        dropdownHide,
        dropdownIsOpen,
        keepOpen
      } = _this$props,
      restProps = _objectWithoutProperties(_this$props, _excluded);
    const boundChildren = Children.map(children, child => /*#__PURE__*/cloneElement(child, {
      dropdownIsOpen,
      dropdownToggle,
      dropdownShow,
      dropdownHide,
      keepOpen
    }));
    return /*#__PURE__*/React.createElement(Styled.Content, _extends({
      "data-test": "dropdownContent"
    }, restProps), /*#__PURE__*/React.createElement(Styled.Scrollable, null, boundChildren));
  }
}
DropdownContent.defaultProps = defaultProps;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/content/styles.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 1);
let borderSize, borderRadius, dropdownCaretHeight, dropdownCaretWidth;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  dropdownCaretHeight(v) {
    dropdownCaretHeight = v;
  },
  dropdownCaretWidth(v) {
    dropdownCaretWidth = v;
  }
}, 2);
let colorWhite, colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorGray(v) {
    colorGray = v;
  }
}, 3);
let lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 4);
const Content = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  outline: transparent;\n  outline-width: ", ";\n  outline-style: solid;\n  z-index: 9999;\n  position: absolute;\n  background: ", ";\n  border-radius: ", ";\n  box-shadow: 0 6px 12px rgba(0, 0, 0, .175);\n  border: 0;\n  padding: calc(", " / 2);\n\n  [dir=\"rtl\"] & {\n    right: 10.75rem;\n  }\n\n  &:after,\n  &:before {\n    content: '';\n    position: absolute;\n    width: 0;\n    height: 0;\n  }\n\n  &[aria-expanded=\"false\"] {\n    display: none;\n  }\n\n  &[aria-expanded=\"true\"] {\n    display: block;\n  }\n\n  @media ", " {\n    z-index: 1015;\n    border-radius: 0;\n    background-color: #fff;\n    box-shadow: none;\n    position: fixed;\n    top: 0 !important;\n    left: 0 !important;\n    right: 0 !important;\n    bottom: 0 !important;\n    border: 0 !important;\n    padding: 0 !important;\n    margin: 0 0 calc(", " * 5.25) 0 !important;\n    transform: translateX(0) translateY(0) !important;\n\n    &:after,\n    &:before {\n      display: none !important;\n    }\n  }\n\n  //top-left\n  bottom: 100%;\n  left: 50%;\n  transform: translateX(-50%);\n  margin-bottom: calc(", " * 1.25);\n\n  &:before,\n  &:after {\n    border-left: ", " solid transparent;\n    border-right: ", " solid transparent;\n    border-top: ", " solid ", ";\n    bottom: 0;\n    margin-bottom: calc(", " * -1);\n  }\n\n  &:before {\n    border-top: ", " solid ", ";\n  }\n\n  transform: translateX(100%);\n  right: 100%;\n  left: auto;\n\n  &:after,\n  &:before {\n    left: ", ";\n  }\n\n  min-width: 18rem;\n\n  @media ", " {\n    width: auto;\n  }\n\n  [dir=\"rtl\"] {\n    transform: translateX(25%);\n  }\n"])), borderSize, colorWhite, borderRadius, lineHeightComputed, smallOnly, lineHeightComputed, dropdownCaretHeight, dropdownCaretWidth, dropdownCaretWidth, dropdownCaretHeight, colorWhite, dropdownCaretHeight, dropdownCaretHeight, colorGray, dropdownCaretWidth, smallOnly);
const Scrollable = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  @media ", " {\n    overflow-y: auto;\n    background: linear-gradient(white 30%, rgba(255,255,255,0)),\n      linear-gradient(rgba(255,255,255,0), white 70%) 0 100%,\n      /* Shadows */\n      radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.2), rgba(0,0,0,0)),\n      radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;\n\n    background-repeat: no-repeat;\n    background-color: transparent;\n    background-size: 100% 40px, 100% 40px, 100% 14px, 100% 14px;\n    background-attachment: local, local, scroll, scroll;\n\n    // Fancy scroll\n    &::-webkit-scrollbar {\n      width: 5px;\n      height: 5px;\n    }\n    &::-webkit-scrollbar-button {\n      width: 0;\n      height: 0;\n    }\n    &::-webkit-scrollbar-thumb {\n      background: rgba(0,0,0,.25);\n      border: none;\n      border-radius: 50px;\n    }\n    &::-webkit-scrollbar-thumb:hover { background: rgba(0,0,0,.5); }\n    &::-webkit-scrollbar-thumb:active { background: rgba(0,0,0,.25); }\n    &::-webkit-scrollbar-track {\n      background: rgba(0,0,0,.25);\n      border: none;\n      border-radius: 50px;\n    }\n    &::-webkit-scrollbar-track:hover { background: rgba(0,0,0,.25); }\n    &::-webkit-scrollbar-track:active { background: rgba(0,0,0,.25); }\n    &::-webkit-scrollbar-corner { background: 0 0; }\n\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n"])), smallOnly);
module.exportDefault({
  Content,
  Scrollable
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"trigger":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/trigger/component.jsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["children", "className"];
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 0);
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 1);
module.export({
  default: () => DropdownTrigger
});
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let cx;
module.link("classnames", {
  default(v) {
    cx = v;
  }
}, 3);
let KEY_CODES;
module.link("/imports/utils/keyCodes", {
  default(v) {
    KEY_CODES = v;
  }
}, 4);
const propTypes = {
  children: PropTypes.element.isRequired
};
class DropdownTrigger extends Component {
  static isButtonTriggerOnEmoji(buttonComponent) {
    return buttonComponent && buttonComponent.type === Button && buttonComponent.props && buttonComponent.props.children;
  }
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.trigger = null;
  }
  handleClick(e) {
    e.stopPropagation();
    const {
      dropdownToggle,
      onClick
    } = this.props;
    if (onClick) onClick();
    return dropdownToggle();
  }
  handleKeyDown(event) {
    event.stopPropagation();
    const {
      dropdownShow,
      dropdownHide
    } = this.props;
    if ([KEY_CODES.SPACE, KEY_CODES.ENTER].includes(event.which)) {
      event.preventDefault();
      event.stopPropagation();
    } else if ([KEY_CODES.ARROW_UP, KEY_CODES.ARROW_DOWN].includes(event.which)) {
      dropdownShow();
    } else if (KEY_CODES.ESCAPE === event.which) {
      dropdownHide();
    }
  }
  render() {
    const {
      dropdownIsOpen
    } = this.props;
    const remainingProps = _objectSpread({}, this.props);
    delete remainingProps.dropdownToggle;
    delete remainingProps.dropdownShow;
    delete remainingProps.dropdownHide;
    delete remainingProps.dropdownIsOpen;
    const {
        children,
        className
      } = remainingProps,
      restProps = _objectWithoutProperties(remainingProps, _excluded);
    let TriggerComponent;
    let TriggerComponentBounded;
    const buttonComponentProps = _objectSpread(_objectSpread({}, restProps), {}, {
      'aria-expanded': dropdownIsOpen
    });
    const triggerComponentProps = {
      onClick: this.handleClick,
      onKeyDown: this.handleKeyDown
    };
    if (DropdownTrigger.isButtonTriggerOnEmoji(children)) {
      const {
        children: grandChildren
      } = children.props;
      triggerComponentProps.className = cx(children.props.className, className);
      TriggerComponent = React.Children.only(grandChildren);
      TriggerComponentBounded = /*#__PURE__*/React.cloneElement(TriggerComponent, triggerComponentProps);
      const ButtonComponent = React.Children.only(children);
      return /*#__PURE__*/React.cloneElement(ButtonComponent, buttonComponentProps, TriggerComponentBounded);
    }
    buttonComponentProps.className = cx(children.props.className, className);
    TriggerComponent = React.Children.only(children);
    TriggerComponentBounded = /*#__PURE__*/React.cloneElement(TriggerComponent, _objectSpread(_objectSpread({}, buttonComponentProps), triggerComponentProps));
    return TriggerComponentBounded;
  }
}
DropdownTrigger.propTypes = propTypes;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/component.jsx                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["children", "intl", "keepOpen", "tethered", "placement", "getContent"];
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let findDOMNode;
module.link("react-dom", {
  findDOMNode(v) {
    findDOMNode = v;
  }
}, 2);
let TetherComponent;
module.link("react-tether", {
  default(v) {
    TetherComponent = v;
  }
}, 3);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 4);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 5);
let screenreaderTrap;
module.link("makeup-screenreader-trap", {
  default(v) {
    screenreaderTrap = v;
  }
}, 6);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
let DropdownTrigger;
module.link("/imports/ui/components/dropdown/trigger/component", {
  default(v) {
    DropdownTrigger = v;
  }
}, 9);
let DropdownContent;
module.link("/imports/ui/components/dropdown/content/component", {
  default(v) {
    DropdownContent = v;
  }
}, 10);
let DropdownList;
module.link("/imports/ui/components/dropdown/list/component", {
  default(v) {
    DropdownList = v;
  }
}, 11);
let DropdownListSeparator;
module.link("/imports/ui/components/dropdown/list/separator/component", {
  default(v) {
    DropdownListSeparator = v;
  }
}, 12);
let DropdownListItem;
module.link("/imports/ui/components/dropdown/list/item/component", {
  default(v) {
    DropdownListItem = v;
  }
}, 13);
let DropdownListTitle;
module.link("/imports/ui/components/dropdown/list/title/component", {
  default(v) {
    DropdownListTitle = v;
  }
}, 14);
const intlMessages = defineMessages({
  close: {
    id: 'app.dropdown.close',
    description: 'Close button label'
  }
});
const noop = () => {};
const propTypes = {
  /**
   * The dropdown needs a trigger and a content component as children
   */
  children: (props, propName, componentName) => {
    const children = props[propName];
    if (!children || children.length < 2) {
      return new Error("Invalid prop `".concat(propName, "` supplied to") + " `".concat(componentName, "`. Validation failed."));
    }
    const trigger = children.find(x => x.type === DropdownTrigger);
    const content = children.find(x => x.type === DropdownContent);
    if (!trigger) {
      return new Error("Invalid prop `".concat(propName, "` supplied to") + " `".concat(componentName, "`. Missing `DropdownTrigger`. Validation failed."));
    }
    if (!content) {
      return new Error("Invalid prop `".concat(propName, "` supplied to") + " `".concat(componentName, "`. Missing `DropdownContent`. Validation failed."));
    }
    return null;
  },
  isOpen: PropTypes.bool,
  keepOpen: PropTypes.bool,
  onHide: PropTypes.func,
  onShow: PropTypes.func,
  autoFocus: PropTypes.bool,
  tethered: PropTypes.bool,
  getContent: PropTypes.func
};
const defaultProps = {
  tethered: false,
  children: null,
  onShow: noop,
  onHide: noop,
  autoFocus: false,
  isOpen: false,
  keepOpen: null,
  getContent: () => {}
};
const attachments = {
  'right-bottom': 'bottom left',
  'right-top': 'bottom left'
};
const targetAttachments = {
  'right-bottom': 'bottom right',
  'right-top': 'top right'
};
class Dropdown extends Component {
  constructor(props) {
    super(props);
    this.state = {
      isOpen: false,
      isPortrait: deviceInfo.isPortrait()
    };
    this.handleShow = this.handleShow.bind(this);
    this.handleHide = this.handleHide.bind(this);
    this.handleToggle = this.handleToggle.bind(this);
    this.handleWindowClick = this.handleWindowClick.bind(this);
    this.handleContextMenu = this.handleContextMenu.bind(this);
    this.updateOrientation = this.updateOrientation.bind(this);
    this.updateZIndex = this.updateZIndex.bind(this);
  }
  componentDidMount() {
    window.addEventListener('resize', this.updateOrientation);
    window.addEventListener('contextmenu', this.handleContextMenu);
  }
  componentDidUpdate(prevProps, prevState) {
    const {
      onShow,
      onHide,
      keepOpen,
      tethered
    } = this.props;
    const {
      isOpen
    } = this.state;
    const enableSRTrap = isOpen && !tethered;
    if (enableSRTrap) {
      screenreaderTrap.trap(this.dropdown);
    } else {
      screenreaderTrap.untrap();
    }
    if (isOpen && !prevState.isOpen) {
      onShow();
    }
    if (!isOpen && prevState.isOpen) {
      onHide();
    }
    if (prevProps.keepOpen && !keepOpen) onHide();
  }
  componentWillUnmount() {
    window.removeEventListener('resize', this.updateOrientation);
    window.removeEventListener('contextmenu', this.handleContextMenu);
  }
  handleContextMenu(event) {
    event.preventDefault();
    this.handleHide();
  }
  handleShow() {
    Session.setItem('dropdownOpen', true);
    this.updateZIndex(0);
    const {
      onShow
    } = this.props;
    this.setState({
      isOpen: true
    }, () => {
      const {
        addEventListener
      } = window;
      onShow();
      addEventListener('click', this.handleWindowClick, true);
    });
  }
  handleHide() {
    Session.setItem('dropdownOpen', false);
    this.updateZIndex(1);
    const {
      onHide
    } = this.props;
    this.setState({
      isOpen: false
    }, () => {
      const {
        removeEventListener
      } = window;
      onHide();
      removeEventListener('click', this.handleWindowClick, true);
    });
  }
  handleWindowClick(event) {
    const {
      keepOpen,
      onHide
    } = this.props;
    const {
      isOpen
    } = this.state;
    const triggerElement = findDOMNode(this.trigger);
    const contentElement = findDOMNode(this.content);
    if (!(triggerElement && contentElement)) return;
    if (triggerElement && triggerElement.contains(event.target)) {
      if (keepOpen) {
        onHide();
        return;
      }
      if (isOpen) {
        this.handleHide();
        return;
      }
    }
    if (keepOpen && isOpen && !contentElement.contains(event.target)) {
      if (triggerElement) {
        const {
          parentElement
        } = triggerElement;
        if (parentElement) parentElement.focus();
      }
      onHide();
      this.handleHide();
      return;
    }
    if (keepOpen && triggerElement) {
      const {
        parentElement
      } = triggerElement;
      if (parentElement) parentElement.focus();
    }
    if (keepOpen === true) return;
    this.handleHide();
  }
  handleToggle() {
    const {
      isOpen
    } = this.state;
    return isOpen ? this.handleHide() : this.handleShow();
  }
  updateOrientation() {
    this.setState({
      isPortrait: deviceInfo.isPortrait()
    });
  }
  updateZIndex(zIndex) {
    if (this) {
      const presentationInnerWrapper = document.getElementById('presentationInnerWrapper');
      if (presentationInnerWrapper) {
        presentationInnerWrapper.style.zIndex = zIndex;
      }
    }
  }
  render() {
    const _this$props = this.props,
      {
        children,
        intl,
        keepOpen,
        tethered,
        placement,
        getContent
      } = _this$props,
      otherProps = _objectWithoutProperties(_this$props, _excluded);
    const {
      isOpen,
      isPortrait
    } = this.state;
    const {
      isPhone
    } = deviceInfo;
    const placements = placement && placement.replace(' ', '-');
    const test = isPhone && isPortrait ? {
      width: '100%',
      height: '100%',
      transform: 'translateY(0)'
    } : {
      width: '',
      height: '',
      transform: ''
    };
    let trigger = children.find(x => x.type === DropdownTrigger);
    let content = children.find(x => x.type === DropdownContent);
    trigger = /*#__PURE__*/React.cloneElement(trigger, {
      ref: ref => {
        this.trigger = ref;
      },
      dropdownIsOpen: isOpen,
      dropdownToggle: this.handleToggle,
      dropdownShow: this.handleShow,
      dropdownHide: this.handleHide,
      keepopen: "".concat(keepOpen)
    });
    content = /*#__PURE__*/React.cloneElement(content, {
      ref: ref => {
        getContent(ref);
        this.content = ref;
      },
      'aria-expanded': isOpen,
      dropdownIsOpen: isOpen,
      dropdownToggle: this.handleToggle,
      dropdownShow: this.handleShow,
      dropdownHide: this.handleHide,
      keepopen: "".concat(keepOpen)
    });
    const showCloseBtn = isOpen && keepOpen || isOpen && keepOpen === null;
    return /*#__PURE__*/React.createElement(Styled.Dropdown, {
      "aria-live": otherProps['aria-live'],
      "aria-relevant": otherProps['aria-relevant'],
      "aria-haspopup": otherProps['aria-haspopup'],
      "aria-label": otherProps['aria-label'],
      ref: node => {
        this.dropdown = node;
      },
      tabIndex: -1
    }, tethered ? /*#__PURE__*/React.createElement(TetherComponent, {
      style: _objectSpread({
        zIndex: isOpen ? 15 : -1
      }, test),
      attachment: isPhone && isPortrait ? 'middle center' : attachments[placements],
      targetAttachment: isPhone && isPortrait ? 'auto auto' : targetAttachments[placements],
      constraints: [{
        to: 'scrollParent'
      }],
      renderTarget: ref => /*#__PURE__*/React.createElement("span", {
        ref: ref
      }, trigger),
      renderElement: ref => /*#__PURE__*/React.createElement("div", {
        ref: ref
      }, content, showCloseBtn ? /*#__PURE__*/React.createElement(Styled.CloseButton, {
        label: intl.formatMessage(intlMessages.close),
        size: "lg",
        color: "default",
        onClick: this.handleHide
      }) : null)
    }) :
    /*#__PURE__*/
    // Fix eslint rule https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-fragments.md
    React.createElement(React.Fragment, null, trigger, content, showCloseBtn ? /*#__PURE__*/React.createElement(Styled.CloseButton, {
      label: intl.formatMessage(intlMessages.close),
      size: "lg",
      color: "default",
      onClick: this.handleHide
    }) : null));
  }
}
Dropdown.propTypes = propTypes;
Dropdown.defaultProps = defaultProps;
Dropdown.DropdownTrigger = DropdownTrigger;
Dropdown.DropdownContent = DropdownContent;
Dropdown.DropdownList = DropdownList;
Dropdown.DropdownListSeparator = DropdownListSeparator;
Dropdown.DropdownListItem = DropdownListItem;
Dropdown.DropdownListTitle = DropdownListTitle;
module.exportDefault(injectIntl(Dropdown, {
  forwardRef: true
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/dropdown/styles.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let fontSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarge(v) {
    fontSizeLarge = v;
  }
}, 2);
let lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 3);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 4);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 5);
const Dropdown = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n  z-index: 3;\n\n  &:focus {\n    outline: none;\n  }\n"])));
const CloseButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: none;\n  position: fixed;\n  bottom: 0.8rem;\n  border-radius: 0;\n  z-index: 1011;\n  font-size: calc(", " * 1.1);\n  width: calc(100% - (", " * 2));\n  left: ", ";\n  box-shadow: 0 0 0 2rem ", " !important;\n  border: ", " !important;\n\n  @media ", " {\n    display: block;\n  }\n"])), fontSizeLarge, lineHeightComputed, lineHeightComputed, colorWhite, colorWhite, smallOnly);
module.exportDefault({
  Dropdown,
  CloseButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"pads":{"pads-graphql":{"content":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/content/component.tsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let patch;
module.link("@mconf/bbb-diff", {
  patch(v) {
    patch = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let GET_PAD_CONTENT_DIFF_STREAM;
module.link("./queries", {
  GET_PAD_CONTENT_DIFF_STREAM(v) {
    GET_PAD_CONTENT_DIFF_STREAM = v;
  }
}, 3);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 4);
const PadContent = _ref => {
  let {
    content
  } = _ref;
  const contentSplit = content.split('<body>');
  const contentStyle = "\n  <body>\n  <style type=\"text/css\">\n    body {\n      ".concat(Styled.contentText, "\n    }\n  </style>\n  ");
  const contentWithStyle = [contentSplit[0], contentStyle, contentSplit[1]].join('');
  return /*#__PURE__*/React.createElement(Styled.Wrapper, null, /*#__PURE__*/React.createElement(Styled.Iframe, {
    title: "shared notes viewing mode",
    srcDoc: contentWithStyle,
    "data-test": "sharedNotesViewingMode"
  }));
};
const PadContentContainer = _ref2 => {
  let {
    externalId
  } = _ref2;
  const [content, setContent] = useState('');
  const {
    data: contentDiffData
  } = useDeduplicatedSubscription(GET_PAD_CONTENT_DIFF_STREAM, {
    variables: {
      externalId
    }
  });
  useEffect(() => {
    if (!contentDiffData) return;
    const patches = contentDiffData.sharedNotes_diff_stream;
    const patchedContent = patches.reduce((currentContent, attribs) => patch(currentContent, {
      start: attribs.start,
      end: attribs.end,
      text: attribs.diff
    }), content);
    setContent(patchedContent);
  }, [contentDiffData]);
  return /*#__PURE__*/React.createElement(PadContent, {
    content: content
  });
};
module.exportDefault(PadContentContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/content/queries.ts                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  GET_PAD_CONTENT_DIFF_STREAM: () => GET_PAD_CONTENT_DIFF_STREAM
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const GET_PAD_CONTENT_DIFF_STREAM = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription GetPadContentDiffStream($externalId: String!) {\n    sharedNotes_diff_stream(\n      batch_size: 10,\n      cursor: { initial_value: { rev: 0 } },\n      where: { sharedNotesExtId: { _eq: $externalId } }\n    ) {\n      start\n      end\n      diff\n    }\n  }\n"])));
module.exportDefault({
  GET_PAD_CONTENT_DIFF_STREAM
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/content/styles.ts                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGray, colorGrayLightest;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  }
}, 1);
const Wrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  height: 100%;\n  position: relative;\n  width: 100%;\n"])));
const contentText = "\nfont-family: Verdana, Arial, Helvetica, sans-serif;\nfont-size: 15px;\ncolor: ".concat(colorGray, ";\nbottom: 0;\nbox-sizing: border-box;\ndisplay: block;\noverflow-x: hidden;\noverflow-wrap: break-word;\noverflow-y: auto;\npadding-top: 1rem;\nposition: absolute;\nright: 0;\nleft:0;\ntop: 0;\nwhite-space: normal;\n\n\n[dir=\"ltr\"] & {\n  padding-left: 1rem;\n  padding-right: .5rem;\n}\n\n[dir=\"rtl\"] & {\n  padding-left: .5rem;\n  padding-right: 1rem;\n}\n");
const Iframe = styled.iframe(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  border-width: 0;\n  width: 100%;\n  border-top: 1px solid ", ";\n  border-bottom: 1px solid ", ";\n"])), colorGrayLightest, colorGrayLightest);
module.exportDefault({
  Wrapper,
  Iframe,
  contentText
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"hooks":{"useRev.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/hooks/useRev.ts                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
let useEffect, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 1);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 2);
const GET_PAD_LAST_REV = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription GetPadLastRev($externalId: String!) {\n    sharedNotes(\n      where: { sharedNotesExtId: { _eq: $externalId } }\n    ) {\n      lastRev\n    }\n  }\n"])));
const useRev = externalId => {
  const [rev, setRev] = useState(0);
  const {
    data: padRevData
  } = useDeduplicatedSubscription(GET_PAD_LAST_REV, {
    variables: {
      externalId
    }
  });
  useEffect(() => {
    if (!padRevData) return;
    const pad = padRevData.sharedNotes[0];
    if (!pad) return;
    setRev(pad.lastRev);
  }, [padRevData]);
  return rev;
};
module.exportDefault(useRev);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"sessions":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/sessions/component.tsx                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let PAD_SESSION_SUBSCRIPTION;
module.link("./queries", {
  PAD_SESSION_SUBSCRIPTION(v) {
    PAD_SESSION_SUBSCRIPTION = v;
  }
}, 0);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 1);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 2);
const PadSessionContainerGraphql = () => {
  const {
    data: padSessionData
  } = useDeduplicatedSubscription(PAD_SESSION_SUBSCRIPTION);
  if (padSessionData) {
    const sessions = new Set();
    padSessionData.sharedNotes_session.forEach(session => sessions.add(session.sessionId));
    Service.setCookie(Array.from(sessions));
  }
  return null;
};
module.exportDefault(PadSessionContainerGraphql);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/sessions/queries.ts                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  PAD_SESSION_SUBSCRIPTION: () => PAD_SESSION_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const PAD_SESSION_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription padSession {\n    sharedNotes_session {\n      sessionId\n      sharedNotesExtId\n      padId\n      sharedNotes {\n        padId\n      }\n    }\n  }\n"])));
module.exportDefault({
  PAD_SESSION_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/sessions/service.ts                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const setCookie = sessions => {
  const COOKIE_CONFIG = window.meetingClientSettings.public.pads.cookie;
  const PATH = COOKIE_CONFIG.path;
  const SAME_SITE = COOKIE_CONFIG.sameSite;
  const SECURE = COOKIE_CONFIG.secure;
  const sessionIds = sessions.join(',');
  document.cookie = "sessionID=".concat(sessionIds, "; path=").concat(PATH, "; SameSite=").concat(SAME_SITE, "; ").concat(SECURE ? 'Secure' : '');
};
module.exportDefault({
  setCookie
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/component.tsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let HAS_PAD_SUBSCRIPTION;
module.link("./queries", {
  HAS_PAD_SUBSCRIPTION(v) {
    HAS_PAD_SUBSCRIPTION = v;
  }
}, 3);
let PAD_SESSION_SUBSCRIPTION;
module.link("./sessions/queries", {
  PAD_SESSION_SUBSCRIPTION(v) {
    PAD_SESSION_SUBSCRIPTION = v;
  }
}, 4);
let CREATE_SESSION;
module.link("./mutations", {
  CREATE_SESSION(v) {
    CREATE_SESSION = v;
  }
}, 5);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 6);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 7);
let PadContent;
module.link("./content/component", {
  default(v) {
    PadContent = v;
  }
}, 8);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 9);
const intlMessages = defineMessages({
  hint: {
    id: 'app.pads.hint',
    description: 'Label for hint on how to escape iframe'
  }
});
const PadGraphql = props => {
  const {
    externalId,
    hasSession,
    isResizing,
    isRTL,
    sessionIds,
    padId
  } = props;
  const [padURL, setPadURL] = useState();
  const intl = useIntl();
  useEffect(() => {
    if (!padId) {
      setPadURL(undefined);
      return;
    }
    setPadURL(Service.buildPadURL(padId, sessionIds));
  }, [isRTL, hasSession]);
  if (!hasSession) {
    return /*#__PURE__*/React.createElement(PadContent, {
      externalId: externalId
    });
  }
  return /*#__PURE__*/React.createElement(Styled.Pad, null, /*#__PURE__*/React.createElement(Styled.IFrame, {
    title: "pad",
    src: padURL,
    "aria-describedby": "padEscapeHint",
    style: {
      pointerEvents: isResizing ? 'none' : 'inherit'
    }
  }), /*#__PURE__*/React.createElement(Styled.Hint, {
    id: "padEscapeHint",
    "aria-hidden": true
  }, intl.formatMessage(intlMessages.hint)));
};
const PadContainerGraphql = props => {
  var _padSessionData$share, _session$sharedNotes;
  const {
    externalId,
    hasPermission,
    isRTL,
    isResizing
  } = props;
  const {
    data: hasPadData
  } = useDeduplicatedSubscription(HAS_PAD_SUBSCRIPTION, {
    variables: {
      externalId
    }
  });
  const {
    data: padSessionData
  } = useDeduplicatedSubscription(PAD_SESSION_SUBSCRIPTION);
  const [createSession] = useMutation(CREATE_SESSION);
  const sessionData = (_padSessionData$share = padSessionData === null || padSessionData === void 0 ? void 0 : padSessionData.sharedNotes_session) !== null && _padSessionData$share !== void 0 ? _padSessionData$share : [];
  const session = sessionData.find(s => s.sharedNotesExtId === externalId);
  const hasPad = !!hasPadData && hasPadData.sharedNotes.length > 0;
  const hasSession = !!(session !== null && session !== void 0 && session.sessionId);
  const sessionIds = new Set(sessionData.map(s => s.sessionId));
  if (hasPad && !hasSession && hasPermission) {
    createSession({
      variables: {
        externalId
      }
    });
  }
  return /*#__PURE__*/React.createElement(PadGraphql, {
    hasSession: hasSession,
    externalId: externalId,
    isRTL: isRTL,
    isResizing: isResizing,
    sessionIds: Array.from(sessionIds),
    padId: session === null || session === void 0 ? void 0 : (_session$sharedNotes = session.sharedNotes) === null || _session$sharedNotes === void 0 ? void 0 : _session$sharedNotes.padId
  });
};
module.exportDefault(PadContainerGraphql);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/mutations.ts                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  CREATE_SESSION: () => CREATE_SESSION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CREATE_SESSION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation createSession($externalId: String!) {\n    sharedNotesCreateSession(\n      sharedNotesExtId: $externalId\n    )\n  }\n"])));
module.exportDefault({
  CREATE_SESSION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/queries.ts                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  HAS_PAD_SUBSCRIPTION: () => HAS_PAD_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const HAS_PAD_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription hasPad($externalId: String!) {\n    sharedNotes(\n      where: { sharedNotesExtId: { _eq: $externalId } }\n    ) {\n      sharedNotesExtId\n    }\n  }\n"])));
module.exportDefault({
  HAS_PAD_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/service.ts                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 0);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 1);
const getLang = () => {
  const Settings = getSettingsSingletonInstance();
  // @ts-ignore While Meteor in the project
  const {
    locale
  } = Settings.application;
  return locale ? locale.toLowerCase() : '';
};
const getParams = () => {
  const config = {
    lang: getLang(),
    rtl: document.documentElement.getAttribute('dir') === 'rtl'
  };
  const params = Object.keys(config).map(key => "".concat(key, "=").concat(encodeURIComponent(config[key]))).join('&');
  return params;
};
const buildPadURL = (padId, sessionIds) => {
  const PADS_CONFIG = window.meetingClientSettings.public.pads;
  const params = getParams();
  const sessionIdsStr = sessionIds.join(',');
  const url = Auth.authenticateURL("".concat(PADS_CONFIG.url, "/auth_session?padName=").concat(padId, "&sessionID=").concat(sessionIdsStr, "&").concat(params));
  return url;
};
module.exportDefault({
  buildPadURL,
  getParams
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/pads/pads-graphql/styles.ts                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smPaddingX, lgPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  }
}, 1);
let colorGray, colorGrayLightest;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  }
}, 2);
let fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 3);
const Hint = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  visibility: hidden;\n  position: absolute;\n  @media (pointer: none) {\n    visibility: visible;\n    position: relative;\n    color: ", ";\n    font-size: ", ";\n    font-style: italic;\n    padding: ", " 0 0 ", ";\n    text-align: left;\n    [dir=\"rtl\"] & {\n      padding-right: ", " ", " 0 0;\n      text-align: right;\n    }\n  }\n"])), colorGray, fontSizeSmall, smPaddingX, smPaddingX, lgPaddingY, lgPaddingY);
const Pad = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  height: 100%;\n  width: 100%;\n"])));
const IFrame = styled.iframe(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: 100%;\n  height: auto;\n  overflow: hidden;\n  border-style: none;\n  border-bottom: 1px solid ", ";\n  padding-bottom: 5px;\n"])), colorGrayLightest);
module.exportDefault({
  Hint,
  Pad,
  IFrame
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"settings":{"submenus":{"application":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/submenus/application/component.jsx                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let Toggle;
module.link("/imports/ui/components/common/switch/component", {
  default(v) {
    Toggle = v;
  }
}, 2);
let LocalesDropdown;
module.link("/imports/ui/components/common/locales-dropdown/component", {
  default(v) {
    LocalesDropdown = v;
  }
}, 3);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 4);
let BaseMenu;
module.link("../base/component", {
  default(v) {
    BaseMenu = v;
  }
}, 5);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 6);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 7);
let WakeLockService;
module.link("/imports/ui/components/wake-lock/service", {
  default(v) {
    WakeLockService = v;
  }
}, 8);
let ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 9);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 10);
const MIN_FONTSIZE = 0;
const intlMessages = defineMessages({
  applicationSectionTitle: {
    id: 'app.submenu.application.applicationSectionTitle',
    description: 'Application section title'
  },
  animationsLabel: {
    id: 'app.submenu.application.animationsLabel',
    description: 'animations label'
  },
  audioFilterLabel: {
    id: 'app.submenu.application.audioFilterLabel',
    description: 'audio filters label'
  },
  darkThemeLabel: {
    id: 'app.submenu.application.darkThemeLabel',
    description: 'dark mode label'
  },
  fontSizeControlLabel: {
    id: 'app.submenu.application.fontSizeControlLabel',
    description: 'label for font size ontrol'
  },
  increaseFontBtnLabel: {
    id: 'app.submenu.application.increaseFontBtnLabel',
    description: 'label for button to increase font size'
  },
  increaseFontBtnDesc: {
    id: 'app.submenu.application.increaseFontBtnDesc',
    description: 'adds descriptive context to increase font size button'
  },
  decreaseFontBtnLabel: {
    id: 'app.submenu.application.decreaseFontBtnLabel',
    description: 'label for button to reduce font size'
  },
  decreaseFontBtnDesc: {
    id: 'app.submenu.application.decreaseFontBtnDesc',
    description: 'adds descriptive context to decrease font size button'
  },
  languageLabel: {
    id: 'app.submenu.application.languageLabel',
    description: 'displayed label for changing application locale'
  },
  currentValue: {
    id: 'app.submenu.application.currentSize',
    description: 'current value label'
  },
  languageOptionLabel: {
    id: 'app.submenu.application.languageOptionLabel',
    description: 'default change language option when locales are available'
  },
  noLocaleOptionLabel: {
    id: 'app.submenu.application.noLocaleOptionLabel',
    description: 'default change language option when no locales available'
  },
  paginationEnabledLabel: {
    id: 'app.submenu.application.paginationEnabledLabel',
    description: 'enable/disable video pagination'
  },
  wbToolbarsAutoHideLabel: {
    id: 'app.submenu.application.wbToolbarsAutoHideLabel',
    description: 'enable/disable auto hiding of whitebord toolbars'
  },
  wakeLockEnabledLabel: {
    id: 'app.submenu.application.wakeLockEnabledLabel',
    description: 'enable/disable wake lock'
  },
  layoutOptionLabel: {
    id: 'app.submenu.application.layoutOptionLabel',
    description: 'layout options'
  },
  pushLayoutLabel: {
    id: 'app.submenu.application.pushLayoutLabel',
    description: 'push layout togle'
  },
  customLayout: {
    id: 'app.layout.style.custom',
    description: 'label for custom layout style'
  },
  smartLayout: {
    id: 'app.layout.style.smart',
    description: 'label for smart layout style'
  },
  presentationFocusLayout: {
    id: 'app.layout.style.presentationFocus',
    description: 'label for presentationFocus layout style'
  },
  videoFocusLayout: {
    id: 'app.layout.style.videoFocus',
    description: 'label for videoFocus layout style'
  },
  presentationFocusPushLayout: {
    id: 'app.layout.style.presentationFocusPush',
    description: 'label for presentationFocus layout style (push to all)'
  },
  videoFocusPushLayout: {
    id: 'app.layout.style.videoFocusPush',
    description: 'label for videoFocus layout style (push to all)'
  },
  smartPushLayout: {
    id: 'app.layout.style.smartPush',
    description: 'label for smart layout style (push to all)'
  },
  customPushLayout: {
    id: 'app.layout.style.customPush',
    description: 'label for custom layout style (push to all)'
  },
  disableLabel: {
    id: 'app.videoDock.webcamDisableLabelAllCams'
  },
  autoCloseReactionsBarLabel: {
    id: 'app.actionsBar.reactions.autoCloseReactionsBarLabel'
  }
});
class ApplicationMenu extends BaseMenu {
  static setHtmlFontSize(size) {
    document.getElementsByTagName('html')[0].style.fontSize = size;
  }
  constructor(props) {
    super(props);
    this.state = {
      settingsName: 'application',
      settings: props.settings,
      isLargestFontSize: false,
      isSmallestFontSize: false,
      showSelect: false,
      fontSizes: ['12px', '14px', '16px', '18px', '20px'],
      audioFilterEnabled: ApplicationMenu.isAudioFilterEnabled(props.settings.microphoneConstraints)
    };
  }
  componentDidMount() {
    this.setInitialFontSize();
  }
  componentWillUnmount() {
    // fix Warning: Can't perform a React state update on an unmounted component
    this.setState = () => {};
  }
  setInitialFontSize() {
    const {
      fontSizes
    } = this.state;
    const clientFont = document.getElementsByTagName('html')[0].style.fontSize;
    const hasFont = fontSizes.includes(clientFont);
    if (!hasFont) {
      fontSizes.push(clientFont);
      fontSizes.sort();
    }
    const fontIndex = fontSizes.indexOf(clientFont);
    this.changeFontSize(clientFont);
    this.setState({
      isSmallestFontSize: fontIndex <= MIN_FONTSIZE,
      isLargestFontSize: fontIndex >= fontSizes.length - 1,
      fontSizes
    });
  }
  static isAudioFilterEnabled(_constraints) {
    if (typeof _constraints === 'undefined') return true;
    const _isConstraintEnabled = constraintValue => {
      switch (typeof constraintValue) {
        case 'boolean':
          return constraintValue;
        case 'string':
          return constraintValue === 'true';
        case 'object':
          return !!(constraintValue.exact || constraintValue.ideal);
        default:
          return false;
      }
    };
    let isAnyFilterEnabled = true;
    const constraints = _constraints && typeof _constraints.advanced === 'object' ? _constraints.advanced : _constraints || {};
    isAnyFilterEnabled = Object.values(constraints).find(constraintValue => _isConstraintEnabled(constraintValue));
    return isAnyFilterEnabled;
  }
  handleAudioFilterChange() {
    const _audioFilterEnabled = !ApplicationMenu.isAudioFilterEnabled(this.state.settings.microphoneConstraints);
    const _newConstraints = {
      autoGainControl: _audioFilterEnabled,
      echoCancellation: _audioFilterEnabled,
      noiseSuppression: _audioFilterEnabled
    };
    const obj = this.state;
    obj.settings.microphoneConstraints = _newConstraints;
    this.handleUpdateSettings(this.state.settings, obj.settings);
  }
  handleUpdateFontSize(size) {
    const obj = this.state;
    obj.settings.fontSize = size;
    this.handleUpdateSettings(this.state.settingsName, obj.settings);
  }
  changeFontSize(size) {
    const {
      layoutContextDispatch
    } = this.props;
    const obj = this.state;
    obj.settings.fontSize = size;
    this.setState(obj, () => {
      ApplicationMenu.setHtmlFontSize(this.state.settings.fontSize);
      this.handleUpdateFontSize(this.state.settings.fontSize);
    });
    layoutContextDispatch({
      type: ACTIONS.SET_FONT_SIZE,
      value: parseInt(size.slice(0, -2), 10)
    });
  }
  handleIncreaseFontSize() {
    const currentFontSize = this.state.settings.fontSize;
    const availableFontSizes = this.state.fontSizes;
    const maxFontSize = availableFontSizes.length - 1;
    const canIncreaseFontSize = availableFontSizes.indexOf(currentFontSize) < maxFontSize;
    const fs = canIncreaseFontSize ? availableFontSizes.indexOf(currentFontSize) + 1 : maxFontSize;
    this.changeFontSize(availableFontSizes[fs]);
    if (fs === maxFontSize) this.setState({
      isLargestFontSize: true
    });
    this.setState({
      isSmallestFontSize: false
    });
  }
  handleDecreaseFontSize() {
    const currentFontSize = this.state.settings.fontSize;
    const availableFontSizes = this.state.fontSizes;
    const canDecreaseFontSize = availableFontSizes.indexOf(currentFontSize) > MIN_FONTSIZE;
    const fs = canDecreaseFontSize ? availableFontSizes.indexOf(currentFontSize) - 1 : MIN_FONTSIZE;
    this.changeFontSize(availableFontSizes[fs]);
    if (fs === MIN_FONTSIZE) this.setState({
      isSmallestFontSize: true
    });
    this.setState({
      isLargestFontSize: false
    });
  }
  handleSelectChange(fieldname, e) {
    const obj = this.state;
    obj.settings[fieldname] = e.target.value;
    this.handleUpdateSettings('application', obj.settings);
  }
  renderAudioFilters() {
    let audioFilterOption = null;
    const SHOW_AUDIO_FILTERS = window.meetingClientSettings.public.app.showAudioFilters === undefined ? true : window.meetingClientSettings.public.app.showAudioFilters;
    if (SHOW_AUDIO_FILTERS) {
      const {
        intl,
        showToggleLabel,
        displaySettingsStatus
      } = this.props;
      const {
        settings
      } = this.state;
      const audioFilterStatus = ApplicationMenu.isAudioFilterEnabled(settings.microphoneConstraints);
      audioFilterOption = /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
        "aria-hidden": "true"
      }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.audioFilterLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, displaySettingsStatus(audioFilterStatus), /*#__PURE__*/React.createElement(Toggle, {
        icons: false,
        defaultChecked: this.state.audioFilterEnabled,
        onChange: () => this.handleAudioFilterChange(),
        ariaLabel: "".concat(intl.formatMessage(intlMessages.audioFilterLabel), " - ").concat(displaySettingsStatus(audioFilterStatus, true)),
        showToggleLabel: showToggleLabel
      }))));
    }
    return audioFilterOption;
  }
  renderPaginationToggle() {
    const {
      paginationToggleEnabled
    } = this.props;
    if (!paginationToggleEnabled) return false;
    const {
      intl,
      showToggleLabel,
      displaySettingsStatus
    } = this.props;
    const {
      settings
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.paginationEnabledLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, displaySettingsStatus(settings.paginationEnabled), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.paginationEnabled,
      onChange: () => this.handleToggle('paginationEnabled'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.paginationEnabledLabel), " - ").concat(displaySettingsStatus(settings.paginationEnabled, true)),
      showToggleLabel: showToggleLabel
    }))));
  }
  renderDarkThemeToggle() {
    const {
      intl,
      showToggleLabel,
      displaySettingsStatus
    } = this.props;
    const {
      settings
    } = this.state;
    const isDarkThemeEnabled = window.meetingClientSettings.public.app.darkTheme.enabled;
    if (!isDarkThemeEnabled) return null;
    return /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.darkThemeLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, displaySettingsStatus(settings.darkTheme), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.darkTheme,
      onChange: () => this.handleToggle('darkTheme'),
      showToggleLabel: showToggleLabel,
      ariaLabel: "".concat(intl.formatMessage(intlMessages.darkThemeLabel), " - ").concat(displaySettingsStatus(settings.darkTheme, true)),
      "data-test": "darkModeToggleBtn"
    }))));
  }
  renderWakeLockToggle() {
    if (!WakeLockService.isSupported()) return null;
    const {
      intl,
      showToggleLabel,
      displaySettingsStatus
    } = this.props;
    const {
      settings
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.wakeLockEnabledLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, displaySettingsStatus(settings.wakeLock), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.wakeLock,
      onChange: () => this.handleToggle('wakeLock'),
      ariaLabel: intl.formatMessage(intlMessages.wakeLockEnabledLabel),
      showToggleLabel: showToggleLabel
    }))));
  }
  render() {
    var _Settings$application;
    const {
      allLocales,
      intl,
      showToggleLabel,
      displaySettingsStatus,
      isReactionsEnabled
    } = this.props;
    const {
      isLargestFontSize,
      isSmallestFontSize,
      settings
    } = this.state;

    // conversions can be found at http://pxtoem.com
    const pixelPercentage = {
      '12px': '75%',
      // 14px is actually 87.5%, rounding up to show more friendly value
      '14px': '90%',
      '16px': '100%',
      // 18px is actually 112.5%, rounding down to show more friendly value
      '18px': '110%',
      '20px': '125%'
    };
    const ariaValueLabel = intl.formatMessage(intlMessages.currentValue, {
      0: "".concat(pixelPercentage[settings.fontSize])
    });
    const showSelect = allLocales && allLocales.length > 0;
    const Settings = getSettingsSingletonInstance();
    const animations = Settings === null || Settings === void 0 ? void 0 : (_Settings$application = Settings.application) === null || _Settings$application === void 0 ? void 0 : _Settings$application.animations;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.Title, null, intl.formatMessage(intlMessages.applicationSectionTitle))), /*#__PURE__*/React.createElement(Styled.Form, null, /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.animationsLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, displaySettingsStatus(settings.animations), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.animations,
      onChange: () => this.handleToggle('animations'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.animationsLabel), " - ").concat(displaySettingsStatus(settings.animations, true)),
      showToggleLabel: showToggleLabel
    })))), this.renderAudioFilters(), this.renderPaginationToggle(), this.renderDarkThemeToggle(), this.renderWakeLockToggle(), /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.wbToolbarsAutoHideLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, displaySettingsStatus(settings.whiteboardToolbarAutoHide), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.whiteboardToolbarAutoHide,
      onChange: () => this.handleToggle('whiteboardToolbarAutoHide'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.wbToolbarsAutoHideLabel), " - ").concat(displaySettingsStatus(settings.whiteboardToolbarAutoHide, true)),
      showToggleLabel: showToggleLabel
    })))), /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.disableLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, displaySettingsStatus(settings.selfViewDisable), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.selfViewDisable,
      onChange: () => this.handleToggle('selfViewDisable'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.disableLabel), " - ").concat(displaySettingsStatus(settings.selfViewDisable, false)),
      showToggleLabel: showToggleLabel
    })))), isReactionsEnabled && /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.autoCloseReactionsBarLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, displaySettingsStatus(settings.autoCloseReactionsBar), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.autoCloseReactionsBar,
      onChange: () => this.handleToggle('autoCloseReactionsBar'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.autoCloseReactionsBarLabel), " - ").concat(displaySettingsStatus(settings.autoCloseReactionsBar, false)),
      showToggleLabel: showToggleLabel
    })))), /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, {
      "aria-hidden": true
    }, intl.formatMessage(intlMessages.languageLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, showSelect ? /*#__PURE__*/React.createElement(Styled.LocalesDropdownSelect, null, /*#__PURE__*/React.createElement(LocalesDropdown, {
      allLocales: allLocales,
      handleChange: e => this.handleSelectChange('locale', e),
      value: settings.locale,
      elementId: "langSelector",
      ariaLabel: intl.formatMessage(intlMessages.languageLabel),
      selectMessage: intl.formatMessage(intlMessages.languageOptionLabel)
    })) : /*#__PURE__*/React.createElement(Styled.SpinnerOverlay, {
      animations: animations
    }, /*#__PURE__*/React.createElement(Styled.Bounce1, {
      animations: animations
    }), /*#__PURE__*/React.createElement(Styled.Bounce2, {
      animations: animations
    }), /*#__PURE__*/React.createElement("div", null))))), /*#__PURE__*/React.createElement(Styled.Separator, null), /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.fontSizeControlLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, {
      "aria-hidden": true
    }, /*#__PURE__*/React.createElement(Styled.BoldLabel, null, "".concat(pixelPercentage[settings.fontSize])))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, /*#__PURE__*/React.createElement(Styled.PullContentRight, null, /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Button, {
      onClick: () => this.handleDecreaseFontSize(),
      color: "primary",
      icon: "substract",
      circle: true,
      hideLabel: true,
      label: intl.formatMessage(intlMessages.decreaseFontBtnLabel),
      "aria-label": "".concat(intl.formatMessage(intlMessages.decreaseFontBtnLabel), ", ").concat(ariaValueLabel),
      disabled: isSmallestFontSize,
      "data-test": "decreaseFontSize"
    })), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Button, {
      onClick: () => this.handleIncreaseFontSize(),
      color: "primary",
      icon: "add",
      circle: true,
      hideLabel: true,
      label: intl.formatMessage(intlMessages.increaseFontBtnLabel),
      "aria-label": "".concat(intl.formatMessage(intlMessages.increaseFontBtnLabel), ", ").concat(ariaValueLabel),
      disabled: isLargestFontSize,
      "data-test": "increaseFontSize"
    }))))))));
  }
}
module.exportDefault(injectIntl(ApplicationMenu));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/submenus/application/styles.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGrayLabel, colorPrimary, colorWhite, colorGrayLighter;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayLabel(v) {
    colorGrayLabel = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  }
}, 1);
let borderSize, borderSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  }
}, 2);
let SpinnerStyles;
module.link("/imports/ui/components/common/loading-screen/styles", {
  default(v) {
    SpinnerStyles = v;
  }
}, 3);
let Styled;
module.link("/imports/ui/components/settings/submenus/styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const Row = styled(Styled.Row)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const Col = styled(Styled.Col)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const FormElement = styled(Styled.FormElement)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const Label = styled(Styled.Label)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([""])));
const FormElementRight = styled(Styled.FormElementRight)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""])));
const Select = styled(Styled.Select)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""])));
const Title = styled(Styled.Title)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([""])));
const Form = styled(Styled.Form)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([""])));
const SpinnerOverlay = styled(SpinnerStyles.Spinner)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  & > div {\n    background-color: black;\n  }\n"])));
const Bounce1 = styled(SpinnerStyles.Bounce1)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([""])));
const Bounce2 = styled(SpinnerStyles.Bounce2)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([""])));
const Separator = styled.hr(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  margin: 2.5rem 0;\n  border: 1px solid ", ";\n  opacity: 0.25;\n"])), colorGrayLighter);
const FormElementCenter = styled(Styled.FormElementCenter)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([""])));
const BoldLabel = styled.label(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n  font-weight: bold;\n"])), colorGrayLabel);
const PullContentRight = styled.div(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: flex-end;\n  flex-flow: row;\n  align-items: center;\n"])));
const LocalesDropdownSelect = styled.div(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  & > select {\n    &:focus {\n      box-shadow: inset 0 0 0 ", " ", ";\n      border-radius: ", ";\n    }\n\n    background-color: ", ";\n    border: ", " solid ", ";\n    border-radius: ", ";\n    border-bottom: 0.1rem solid ", ";\n    color: ", ";\n    width: 100%;\n    height: 1.75rem;\n    padding: 1px;\n\n    &:hover,\n    &:focus {\n      outline: transparent;\n      outline-style: dotted;\n      outline-width: ", ";\n    }\n  }\n"])), borderSizeLarge, colorPrimary, borderSize, colorWhite, borderSize, colorWhite, borderSize, colorGrayLighter, colorGrayLabel, borderSize);
module.exportDefault({
  Row,
  Col,
  FormElement,
  Label,
  FormElementRight,
  Select,
  Title,
  Form,
  SpinnerOverlay,
  Bounce1,
  Bounce2,
  Separator,
  FormElementCenter,
  BoldLabel,
  PullContentRight,
  LocalesDropdownSelect
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"base":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/submenus/base/component.jsx                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => BaseMenu
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
class BaseMenu extends React.Component {
  constructor(props) {
    super(props);
    this.handleUpdateSettings = props.handleUpdateSettings;
  }
  handleToggle(key) {
    const obj = this.state;
    obj.settings[key] = !this.state.settings[key];
    this.setState(obj, () => {
      this.handleUpdateSettings(this.state.settingsName, this.state.settings);
    });
  }
  handleInput(key, e) {
    const obj = this.state;
    obj.settings[key] = e.target.value;
    this.setState(obj, () => {
      this.handleUpdateSettings(this.state.settingsName, this.state.settings);
    });
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"data-saving":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/submenus/data-saving/component.jsx                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Toggle;
module.link("/imports/ui/components/common/switch/component", {
  default(v) {
    Toggle = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let BaseMenu;
module.link("../base/component", {
  default(v) {
    BaseMenu = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const intlMessages = defineMessages({
  dataSavingLabel: {
    id: 'app.settings.dataSavingTab.label',
    description: 'label for data savings tab'
  },
  webcamLabel: {
    id: 'app.settings.dataSavingTab.webcam',
    description: 'webcam toggle'
  },
  screenShareLabel: {
    id: 'app.settings.dataSavingTab.screenShare',
    description: 'screenshare toggle'
  },
  dataSavingDesc: {
    id: 'app.settings.dataSavingTab.description',
    description: 'description of data savings tab'
  }
});
class DataSaving extends BaseMenu {
  constructor(props) {
    super(props);
    this.state = {
      settingsName: 'dataSaving',
      settings: props.settings
    };
  }
  render() {
    const {
      intl,
      showToggleLabel,
      displaySettingsStatus,
      isScreenSharingEnabled,
      isVideoEnabled
    } = this.props;
    const {
      viewParticipantsWebcams,
      viewScreenshare
    } = this.state.settings;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.Title, null, intl.formatMessage(intlMessages.dataSavingLabel)), /*#__PURE__*/React.createElement(Styled.SubTitle, null, intl.formatMessage(intlMessages.dataSavingDesc))), /*#__PURE__*/React.createElement(Styled.Form, null, isVideoEnabled ? /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": true
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.webcamLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, displaySettingsStatus(viewParticipantsWebcams), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: viewParticipantsWebcams,
      onChange: () => this.handleToggle('viewParticipantsWebcams'),
      ariaLabelledBy: "webcamToggle",
      ariaLabel: "".concat(intl.formatMessage(intlMessages.webcamLabel), " - ").concat(displaySettingsStatus(viewParticipantsWebcams, true)),
      showToggleLabel: showToggleLabel
    })))) : null, isScreenSharingEnabled ? /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": true
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.screenShareLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, displaySettingsStatus(viewScreenshare), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: viewScreenshare,
      onChange: () => this.handleToggle('viewScreenshare'),
      ariaLabelledBy: "screenShare",
      ariaLabel: "".concat(intl.formatMessage(intlMessages.screenShareLabel), " - ").concat(displaySettingsStatus(viewScreenshare, true)),
      showToggleLabel: showToggleLabel
    })))) : null));
  }
}
module.exportDefault(injectIntl(DataSaving));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/submenus/data-saving/styles.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("/imports/ui/components/settings/submenus/styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const Title = styled(Styled.Title)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const SubTitle = styled(Styled.SubTitle)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const Form = styled(Styled.Form)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const Row = styled(Styled.Row)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([""])));
const Col = styled(Styled.Col)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""])));
const FormElement = styled(Styled.FormElement)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""])));
const FormElementRight = styled(Styled.FormElementRight)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([""])));
const Label = styled(Styled.Label)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([""])));
module.exportDefault({
  Title,
  SubTitle,
  Form,
  Row,
  Col,
  FormElement,
  FormElementRight,
  Label
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"notification":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/submenus/notification/component.jsx                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Toggle;
module.link("/imports/ui/components/common/switch/component", {
  default(v) {
    Toggle = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let BaseMenu;
module.link("../base/component", {
  default(v) {
    BaseMenu = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const intlMessages = defineMessages({
  notificationSectionTitle: {
    id: 'app.submenu.notification.SectionTitle',
    description: 'Notification section title'
  },
  notificationSectionDesc: {
    id: 'app.submenu.notification.Desc',
    description: 'provides extra info for notification section'
  },
  audioAlertLabel: {
    id: 'app.submenu.notification.audioAlertLabel',
    description: 'audio notification label'
  },
  pushAlertLabel: {
    id: 'app.submenu.notification.pushAlertLabel',
    description: 'push notification label'
  },
  messagesLabel: {
    id: 'app.submenu.notification.messagesLabel',
    description: 'label for chat messages'
  },
  userJoinLabel: {
    id: 'app.submenu.notification.userJoinLabel',
    description: 'label for chat messages'
  },
  userLeaveLabel: {
    id: 'app.submenu.notification.userLeaveLabel',
    description: 'label for user leave notifications'
  },
  guestWaitingLabel: {
    id: 'app.submenu.notification.guestWaitingLabel',
    description: 'label for guests waiting for approval'
  },
  raiseHandLabel: {
    id: 'app.submenu.notification.raiseHandLabel',
    description: 'label for raise hand emoji notifications'
  }
});
class NotificationMenu extends BaseMenu {
  constructor(props) {
    super(props);
    this.state = {
      settingsName: 'notification',
      settings: props.settings
    };
  }
  render() {
    const {
      intl,
      isModerator,
      showGuestNotification,
      showToggleLabel,
      displaySettingsStatus,
      isChatEnabled
    } = this.props;
    const {
      settings
    } = this.state;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.Title, null, intl.formatMessage(intlMessages.notificationSectionTitle)), /*#__PURE__*/React.createElement(Styled.SubTitle, null, intl.formatMessage(intlMessages.notificationSectionDesc))), /*#__PURE__*/React.createElement(Styled.Form, null, /*#__PURE__*/React.createElement(Styled.Row, {
      "aria-hidden": true
    }, /*#__PURE__*/React.createElement(Styled.Col, null), /*#__PURE__*/React.createElement(Styled.ColHeading, null, intl.formatMessage(intlMessages.audioAlertLabel)), /*#__PURE__*/React.createElement(Styled.ColHeading, null, intl.formatMessage(intlMessages.pushAlertLabel))), isChatEnabled ? /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.Label, {
      "aria-hidden": true
    }, intl.formatMessage(intlMessages.messagesLabel))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, null, displaySettingsStatus(settings.chatAudioAlerts), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.chatAudioAlerts,
      onChange: () => this.handleToggle('chatAudioAlerts'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.messagesLabel), " ").concat(intl.formatMessage(intlMessages.audioAlertLabel), " - ").concat(displaySettingsStatus(settings.chatAudioAlerts, true)),
      showToggleLabel: showToggleLabel
    }))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, null, displaySettingsStatus(settings.chatPushAlerts), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.chatPushAlerts,
      onChange: () => this.handleToggle('chatPushAlerts'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.messagesLabel), " ").concat(intl.formatMessage(intlMessages.pushAlertLabel), " - ").concat(displaySettingsStatus(settings.chatPushAlerts, true)),
      showToggleLabel: showToggleLabel,
      "data-test": "chatPopupAlertsBtn"
    })))) : null, /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.Label, {
      "aria-hidden": true
    }, intl.formatMessage(intlMessages.userJoinLabel))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, null, displaySettingsStatus(settings.userJoinAudioAlerts), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.userJoinAudioAlerts,
      onChange: () => this.handleToggle('userJoinAudioAlerts'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.userJoinLabel), " ").concat(intl.formatMessage(intlMessages.audioAlertLabel), " - ").concat(displaySettingsStatus(settings.userJoinAudioAlerts, true)),
      showToggleLabel: showToggleLabel
    }))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, null, displaySettingsStatus(settings.userJoinPushAlerts), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.userJoinPushAlerts,
      onChange: () => this.handleToggle('userJoinPushAlerts'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.userJoinLabel), " ").concat(intl.formatMessage(intlMessages.pushAlertLabel), " - ").concat(displaySettingsStatus(settings.userJoinPushAlerts, true)),
      showToggleLabel: showToggleLabel,
      "data-test": "userJoinPopupAlerts"
    })))), /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.Label, {
      "aria-hidden": true
    }, intl.formatMessage(intlMessages.userLeaveLabel))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, null, displaySettingsStatus(settings.userLeaveAudioAlerts), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.userLeaveAudioAlerts,
      onChange: () => this.handleToggle('userLeaveAudioAlerts'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.userLeaveLabel), " ").concat(intl.formatMessage(intlMessages.audioAlertLabel), " - ").concat(displaySettingsStatus(settings.userLeaveAudioAlerts, true)),
      showToggleLabel: showToggleLabel
    }))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, null, displaySettingsStatus(settings.userLeavePushAlerts), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.userLeavePushAlerts,
      onChange: () => this.handleToggle('userLeavePushAlerts'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.userLeaveLabel), " ").concat(intl.formatMessage(intlMessages.pushAlertLabel), " - ").concat(displaySettingsStatus(settings.userLeavePushAlerts, true)),
      showToggleLabel: showToggleLabel
    })))), isModerator && showGuestNotification ? /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.Label, {
      "aria-hidden": true
    }, intl.formatMessage(intlMessages.guestWaitingLabel))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, null, displaySettingsStatus(settings.guestWaitingAudioAlerts), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.guestWaitingAudioAlerts,
      onChange: () => this.handleToggle('guestWaitingAudioAlerts'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.guestWaitingLabel), " ").concat(intl.formatMessage(intlMessages.audioAlertLabel), " - ").concat(displaySettingsStatus(settings.guestWaitingAudioAlerts, true)),
      showToggleLabel: showToggleLabel
    }))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, null, displaySettingsStatus(settings.guestWaitingPushAlerts), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.guestWaitingPushAlerts,
      onChange: () => this.handleToggle('guestWaitingPushAlerts'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.guestWaitingLabel), " ").concat(intl.formatMessage(intlMessages.pushAlertLabel), " - ").concat(displaySettingsStatus(settings.guestWaitingPushAlerts, true)),
      showToggleLabel: showToggleLabel
    })))) : null, isModerator ? /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.Label, {
      "aria-hidden": true
    }, intl.formatMessage(intlMessages.raiseHandLabel))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, null, displaySettingsStatus(settings.raiseHandAudioAlerts), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.raiseHandAudioAlerts,
      onChange: () => this.handleToggle('raiseHandAudioAlerts'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.raiseHandLabel), " ").concat(intl.formatMessage(intlMessages.audioAlertLabel), " - ").concat(displaySettingsStatus(settings.raiseHandAudioAlerts, true)),
      showToggleLabel: showToggleLabel
    }))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementCenter, null, displaySettingsStatus(settings.raiseHandPushAlerts), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: settings.raiseHandPushAlerts,
      onChange: () => this.handleToggle('raiseHandPushAlerts'),
      ariaLabel: "".concat(intl.formatMessage(intlMessages.raiseHandLabel), " ").concat(intl.formatMessage(intlMessages.pushAlertLabel), " - ").concat(displaySettingsStatus(settings.raiseHandPushAlerts, true)),
      showToggleLabel: showToggleLabel
    })))) : null));
  }
}
module.exportDefault(injectIntl(NotificationMenu));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/submenus/notification/styles.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("/imports/ui/components/settings/submenus/styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const Title = styled(Styled.Title)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const SubTitle = styled(Styled.SubTitle)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const Form = styled(Styled.Form)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const Row = styled(Styled.Row)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([""])));
const Col = styled(Styled.Col)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""])));
const FormElement = styled(Styled.FormElement)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""])));
const FormElementRight = styled(Styled.FormElementRight)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([""])));
const FormElementCenter = styled(Styled.FormElementCenter)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([""])));
const Label = styled(Styled.Label)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([""])));
const ColHeading = styled(Styled.Col)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  display: block;\n  text-align: center;\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n  font-weight: bold;\n"])));
module.exportDefault({
  Title,
  SubTitle,
  Form,
  Row,
  Col,
  FormElement,
  FormElementRight,
  FormElementCenter,
  Label,
  ColHeading
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"transcription":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/submenus/transcription/component.jsx                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Toggle;
module.link("/imports/ui/components/common/switch/component", {
  default(v) {
    Toggle = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let BaseMenu;
module.link("../base/component", {
  default(v) {
    BaseMenu = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let SETTINGS;
module.link("/imports/ui/services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 5);
const intlMessages = defineMessages({
  transcriptionLabel: {
    id: 'app.submenu.transcription.sectionTitle'
  },
  transcriptionDesc: {
    id: 'app.submenu.transcription.desc'
  },
  partialUtterancesLabel: {
    id: 'app.settings.transcriptionTab.partialUtterances'
  },
  minUtteranceLengthLabel: {
    id: 'app.settings.transcriptionTab.minUtteranceLength'
  }
});
class Transcription extends BaseMenu {
  constructor(props) {
    super(props);
    this.state = {
      settingsName: SETTINGS.TRANSCRIPTION,
      settings: props.settings
    };
  }
  render() {
    const {
      intl,
      showToggleLabel,
      displaySettingsStatus
    } = this.props;
    const {
      partialUtterances,
      minUtteranceLength
    } = this.state.settings;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.Title, null, intl.formatMessage(intlMessages.transcriptionLabel)), /*#__PURE__*/React.createElement(Styled.SubTitle, null, intl.formatMessage(intlMessages.transcriptionDesc))), /*#__PURE__*/React.createElement(Styled.Form, null, /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": true
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.partialUtterancesLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: partialUtterances,
      onChange: () => this.handleToggle('partialUtterances'),
      ariaLabelledBy: "partialUtterances",
      ariaLabel: "".concat(intl.formatMessage(intlMessages.partialUtterancesLabel), " - ").concat(displaySettingsStatus(partialUtterances, true)),
      showToggleLabel: showToggleLabel
    })))), /*#__PURE__*/React.createElement(Styled.Row, null, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": true
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.minUtteranceLengthLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, /*#__PURE__*/React.createElement("input", {
      value: minUtteranceLength,
      onChange: e => this.handleInput('minUtteranceLength', e),
      type: "number",
      max: "5",
      min: "0"
    }))))));
  }
}
module.exportDefault(injectIntl(Transcription));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/submenus/transcription/styles.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Styled;
module.link("/imports/ui/components/settings/submenus/styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const Title = styled(Styled.Title)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const SubTitle = styled(Styled.SubTitle)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const Form = styled(Styled.Form)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([""])));
const Row = styled(Styled.Row)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([""])));
const Col = styled(Styled.Col)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([""])));
const FormElement = styled(Styled.FormElement)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""])));
const FormElementRight = styled(Styled.FormElementRight)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([""])));
const Label = styled(Styled.Label)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([""])));
module.exportDefault({
  Title,
  SubTitle,
  Form,
  Row,
  Col,
  FormElement,
  FormElementRight,
  Label
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/submenus/styles.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGrayDark, colorGrayLabel, colorPrimary, colorWhite, colorGrayLighter;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorGrayLabel(v) {
    colorGrayLabel = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  }
}, 1);
let borderSize, borderSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  }
}, 2);
const Title = styled.h3(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  color: ", ";\n  font-weight: 400;\n  font-size: 1.3rem;\n  margin: 0;\n  margin-bottom: 1.5rem;\n"])), colorGrayDark);
const SubTitle = styled.h4(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  font-size: 0.9rem;\n  margin-bottom: 1rem;\n"])));
const Form = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n"])));
const Row = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  flex-grow: 1;\n  justify-content: space-between;\n  margin-bottom: 0.7rem;\n"])));
const Col = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-grow: 1;\n  flex-basis: 0;\n\n  &:last-child {\n    padding-right: 0;\n    padding-left: 1rem;\n\n    [dir=\"rtl\"] & {\n      padding-right: 0.1rem;\n      padding-left: 0;\n    }\n  }\n"])));
const FormElement = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  flex-grow: 1;\n"])));
const FormElementRight = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  position: relative;\n  flex-grow: 1;\n  display: flex;\n  justify-content: flex-end;\n  flex-flow: row;\n  align-items: center;\n"])));
const FormElementCenter = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  position: relative;\n  display: flex;\n  flex-grow: 1;\n  justify-content: center;\n  flex-flow: row;\n  align-items: center;\n"])));
const Label = styled.span(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: 0.9rem;\n  margin-bottom: 0.5rem;\n"])), colorGrayLabel);
const Select = styled.select(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  &:focus {\n    box-shadow: inset 0 0 0 ", " ", ";\n    border-radius: ", ";\n  }\n\n  background-color: ", ";\n  border: ", " solid ", ";\n  border-radius: ", ";\n  border-bottom: 0.1rem solid ", ";\n  color: ", ";\n  width: 100%;\n  height: 1.75rem;\n  padding: 1px;\n\n  &:hover,\n  &:focus {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n"])), borderSizeLarge, colorPrimary, borderSize, colorWhite, borderSize, colorWhite, borderSize, colorGrayLighter, colorGrayLabel, borderSize);
module.exportDefault({
  Title,
  SubTitle,
  Form,
  Row,
  Col,
  FormElement,
  FormElementRight,
  FormElementCenter,
  Label,
  Select
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/component.jsx                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let ModalFullscreen;
module.link("/imports/ui/components/common/modal/fullscreen/component", {
  default(v) {
    ModalFullscreen = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Langmap;
module.link("langmap", {
  default(v) {
    Langmap = v;
  }
}, 3);
let DataSaving;
module.link("/imports/ui/components/settings/submenus/data-saving/component", {
  default(v) {
    DataSaving = v;
  }
}, 4);
let Application;
module.link("/imports/ui/components/settings/submenus/application/component", {
  default(v) {
    Application = v;
  }
}, 5);
let Notification;
module.link("/imports/ui/components/settings/submenus/notification/component", {
  default(v) {
    Notification = v;
  }
}, 6);
let clone;
module.link("radash", {
  clone(v) {
    clone = v;
  }
}, 7);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 8);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 9);
let formatLocaleCode;
module.link("/imports/utils/string-utils", {
  formatLocaleCode(v) {
    formatLocaleCode = v;
  }
}, 10);
let setUseCurrentLocale;
module.link("../../core/local-states/useCurrentLocale", {
  setUseCurrentLocale(v) {
    setUseCurrentLocale = v;
  }
}, 11);
let Transcription;
module.link("/imports/ui/components/settings/submenus/transcription/component", {
  default(v) {
    Transcription = v;
  }
}, 12);
const intlMessages = defineMessages({
  appTabLabel: {
    id: 'app.settings.applicationTab.label',
    description: 'label for application tab'
  },
  audioTabLabel: {
    id: 'app.settings.audioTab.label',
    description: 'label for audio tab'
  },
  videoTabLabel: {
    id: 'app.settings.videoTab.label',
    description: 'label for video tab'
  },
  usersTabLabel: {
    id: 'app.settings.usersTab.label',
    description: 'label for participants tab'
  },
  SettingsLabel: {
    id: 'app.settings.main.label',
    description: 'General settings label'
  },
  CancelLabel: {
    id: 'app.settings.main.cancel.label',
    description: 'Discard the changes and close the settings menu'
  },
  CancelLabelDesc: {
    id: 'app.settings.main.cancel.label.description',
    description: 'Settings modal cancel button description'
  },
  SaveLabel: {
    id: 'app.settings.main.save.label',
    description: 'Save the changes and close the settings menu'
  },
  SaveLabelDesc: {
    id: 'app.settings.main.save.label.description',
    description: 'Settings modal save button label'
  },
  notificationLabel: {
    id: 'app.submenu.notification.SectionTitle',
    // set menu label identical to section title
    description: 'label for notification tab'
  },
  dataSavingLabel: {
    id: 'app.settings.dataSavingTab.label',
    description: 'label for data savings tab'
  },
  savedAlertLabel: {
    id: 'app.settings.save-notification.label',
    description: 'label shown in toast when settings are saved'
  },
  on: {
    id: 'app.switch.onLabel',
    description: 'label for toggle switch on state'
  },
  off: {
    id: 'app.switch.offLabel',
    description: 'label for toggle switch off state'
  },
  transcriptionLabel: {
    id: 'app.settings.transcriptionTab.label',
    description: 'label for transcriptions tab'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  dataSaving: PropTypes.shape({
    viewParticipantsWebcams: PropTypes.bool,
    viewScreenshare: PropTypes.bool
  }).isRequired,
  application: PropTypes.shape({
    chatAudioAlerts: PropTypes.bool,
    chatPushAlerts: PropTypes.bool,
    userJoinAudioAlerts: PropTypes.bool,
    userLeaveAudioAlerts: PropTypes.bool,
    userLeavePushAlerts: PropTypes.bool,
    guestWaitingAudioAlerts: PropTypes.bool,
    guestWaitingPushAlerts: PropTypes.bool,
    paginationEnabled: PropTypes.bool,
    darkTheme: PropTypes.bool,
    fallbackLocale: PropTypes.string,
    fontSize: PropTypes.string,
    locale: PropTypes.string,
    microphoneConstraints: PropTypes.objectOf(Object)
  }).isRequired,
  updateSettings: PropTypes.func.isRequired,
  availableLocales: PropTypes.objectOf(PropTypes.array).isRequired,
  showToggleLabel: PropTypes.bool.isRequired,
  isReactionsEnabled: PropTypes.bool.isRequired,
  transcription: PropTypes.shape({
    partialUtterances: PropTypes.bool,
    minUtteraceLength: PropTypes.number
  }).isRequired,
  isGladiaEnabled: PropTypes.bool.isRequired,
  fallbackLocales: PropTypes.objectOf(PropTypes.shape({
    englishName: PropTypes.string.isRequired,
    nativeName: PropTypes.string.isRequired
  })).isRequired
};
class Settings extends Component {
  static setHtmlFontSize(size) {
    document.getElementsByTagName('html')[0].style.fontSize = size;
  }
  constructor(props) {
    super(props);
    const {
      dataSaving,
      application,
      selectedTab,
      transcription
    } = props;
    this.state = {
      current: {
        dataSaving: clone(dataSaving),
        application: clone(application),
        transcription: clone(transcription)
      },
      saved: {
        dataSaving: clone(dataSaving),
        application: clone(application)
      },
      selectedTab: Number.isFinite(selectedTab) && selectedTab >= 0 && selectedTab <= 2 ? selectedTab : 0
    };
    this.updateSettings = props.updateSettings;
    this.handleUpdateSettings = this.handleUpdateSettings.bind(this);
    this.handleSelectTab = this.handleSelectTab.bind(this);
    this.displaySettingsStatus = this.displaySettingsStatus.bind(this);
  }
  componentDidMount() {
    const {
      availableLocales,
      fallbackLocales
    } = this.props;
    availableLocales.then(locales => {
      const tempAggregateLocales = locales.map(file => file.name).map(file => file.replace('.json', '')).map(file => file.replace('_', '-')).map(locale => {
        const localeName = (Langmap[locale] || {}).nativeName || (fallbackLocales[locale] || {}).nativeName || locale;
        return {
          locale,
          name: localeName
        };
      }).reverse().filter((item, index, self) => index === self.findIndex(i => i.name === item.name)).reverse();
      this.setState({
        allLocales: tempAggregateLocales
      });
    });
  }
  handleUpdateSettings(key, newSettings) {
    const settings = this.state;
    settings.current[key] = newSettings;
    this.setState(settings);
  }
  handleSelectTab(tab) {
    this.setState({
      selectedTab: tab
    });
  }
  displaySettingsStatus(status) {
    let textOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const {
      intl
    } = this.props;
    if (textOnly) {
      return status ? intl.formatMessage(intlMessages.on) : intl.formatMessage(intlMessages.off);
    }
    return /*#__PURE__*/React.createElement(Styled.ToggleLabel, {
      "aria-hidden": true
    }, status ? intl.formatMessage(intlMessages.on) : intl.formatMessage(intlMessages.off));
  }
  renderModalContent() {
    const {
      intl,
      isModerator,
      isPresenter,
      showGuestNotification,
      showToggleLabel,
      layoutContextDispatch,
      selectedLayout,
      isScreenSharingEnabled,
      isVideoEnabled,
      isReactionsEnabled,
      isGladiaEnabled,
      paginationToggleEnabled,
      isChatEnabled
    } = this.props;
    const {
      selectedTab,
      current,
      allLocales
    } = this.state;
    const isDataSavingTabEnabled = isScreenSharingEnabled || isVideoEnabled;
    return /*#__PURE__*/React.createElement(Styled.SettingsTabs, {
      onSelect: this.handleSelectTab,
      selectedIndex: selectedTab,
      role: "presentation"
    }, /*#__PURE__*/React.createElement(Styled.SettingsTabList, null, /*#__PURE__*/React.createElement(Styled.SettingsTabSelector, {
      "aria-labelledby": "appTab",
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement(Styled.SettingsIcon, {
      iconName: "application"
    }), /*#__PURE__*/React.createElement("span", {
      id: "appTab"
    }, intl.formatMessage(intlMessages.appTabLabel))), /*#__PURE__*/React.createElement(Styled.SettingsTabSelector, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement(Styled.SettingsIcon, {
      iconName: "alert"
    }), /*#__PURE__*/React.createElement("span", {
      id: "notificationTab"
    }, intl.formatMessage(intlMessages.notificationLabel))), isDataSavingTabEnabled ? /*#__PURE__*/React.createElement(Styled.SettingsTabSelector, {
      "aria-labelledby": "dataSavingTab",
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement(Styled.SettingsIcon, {
      iconName: "network"
    }), /*#__PURE__*/React.createElement("span", {
      id: "dataSaving"
    }, intl.formatMessage(intlMessages.dataSavingLabel))) : null, isGladiaEnabled ? /*#__PURE__*/React.createElement(Styled.SettingsTabSelector, {
      "aria-labelledby": "transcriptionTab",
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement(Styled.SettingsIcon, {
      iconName: "closed_caption"
    }), /*#__PURE__*/React.createElement("span", {
      id: "transcriptionTab"
    }, intl.formatMessage(intlMessages.transcriptionLabel))) : null), /*#__PURE__*/React.createElement(Styled.SettingsTabPanel, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement(Application, {
      allLocales: allLocales,
      handleUpdateSettings: this.handleUpdateSettings,
      settings: current.application,
      showToggleLabel: showToggleLabel,
      displaySettingsStatus: this.displaySettingsStatus,
      layoutContextDispatch: layoutContextDispatch,
      selectedLayout: selectedLayout,
      isPresenter: isPresenter,
      isReactionsEnabled: isReactionsEnabled,
      paginationToggleEnabled: paginationToggleEnabled
    })), /*#__PURE__*/React.createElement(Styled.SettingsTabPanel, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement(Notification, {
      handleUpdateSettings: this.handleUpdateSettings,
      settings: current.application,
      showGuestNotification: showGuestNotification,
      showToggleLabel: showToggleLabel,
      displaySettingsStatus: this.displaySettingsStatus,
      isChatEnabled: isChatEnabled,
      isModerator
    })), isDataSavingTabEnabled ? /*#__PURE__*/React.createElement(Styled.SettingsTabPanel, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement(DataSaving, {
      settings: current.dataSaving,
      handleUpdateSettings: this.handleUpdateSettings,
      showToggleLabel: showToggleLabel,
      displaySettingsStatus: this.displaySettingsStatus,
      isScreenSharingEnabled: isScreenSharingEnabled,
      isVideoEnabled: isVideoEnabled
    })) : null, isGladiaEnabled ? /*#__PURE__*/React.createElement(Styled.SettingsTabPanel, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement(Transcription, {
      handleUpdateSettings: this.handleUpdateSettings,
      settings: current.transcription,
      displaySettingsStatus: this.displaySettingsStatus
    })) : null);
  }
  render() {
    const {
      intl,
      setIsOpen,
      isOpen,
      priority,
      setLocalSettings
    } = this.props;
    const {
      current,
      saved
    } = this.state;
    return /*#__PURE__*/React.createElement(ModalFullscreen, {
      title: intl.formatMessage(intlMessages.SettingsLabel),
      confirm: {
        callback: () => {
          this.updateSettings(current, intlMessages.savedAlertLabel, setLocalSettings);
          if (saved.application.locale !== current.application.locale) {
            const {
              language
            } = formatLocaleCode(saved.application.locale);
            const newLanguage = current.application.locale;
            setUseCurrentLocale(newLanguage);
            document.body.classList.remove("lang-".concat(language));
          }

          /* We need to use setIsOpen(false) here to prevent submenu state updates,
          *  from re-opening the modal.
          */
          setIsOpen(false);
        },
        label: intl.formatMessage(intlMessages.SaveLabel),
        description: intl.formatMessage(intlMessages.SaveLabelDesc)
      },
      dismiss: {
        callback: () => {
          Settings.setHtmlFontSize(saved.application.fontSize);
          document.getElementsByTagName('html')[0].lang = saved.application.locale;
          setIsOpen(false);
        },
        label: intl.formatMessage(intlMessages.CancelLabel),
        description: intl.formatMessage(intlMessages.CancelLabelDesc)
      },
      isOpen,
      priority
    }, this.renderModalContent());
  }
}
Settings.propTypes = propTypes;
module.exportDefault(injectIntl(Settings));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/container.jsx                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 1);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Settings;
module.link("./component", {
  default(v) {
    Settings = v;
  }
}, 1);
let layoutDispatch;
module.link("../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let useIsChatEnabled, useIsScreenSharingEnabled;
module.link("/imports/ui/services/features", {
  useIsChatEnabled(v) {
    useIsChatEnabled = v;
  },
  useIsScreenSharingEnabled(v) {
    useIsScreenSharingEnabled = v;
  }
}, 3);
let UserReactionService;
module.link("/imports/ui/components/user-reaction/service", {
  default(v) {
    UserReactionService = v;
  }
}, 4);
let AudioCaptionsService;
module.link("/imports/ui/components/audio/audio-graphql/audio-captions/service", {
  default(v) {
    AudioCaptionsService = v;
  }
}, 5);
let updateSettings, getAvailableLocales, FALLBACK_LOCALES;
module.link("./service", {
  updateSettings(v) {
    updateSettings = v;
  },
  getAvailableLocales(v) {
    getAvailableLocales = v;
  },
  FALLBACK_LOCALES(v) {
    FALLBACK_LOCALES = v;
  }
}, 6);
let useUserChangedLocalSettings;
module.link("../../services/settings/hooks/useUserChangedLocalSettings", {
  default(v) {
    useUserChangedLocalSettings = v;
  }
}, 7);
let useShouldRenderPaginationToggle;
module.link("/imports/ui/components/video-provider/hooks", {
  useShouldRenderPaginationToggle(v) {
    useShouldRenderPaginationToggle = v;
  }
}, 8);
let useSettings;
module.link("/imports/ui/services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 9);
let SETTINGS;
module.link("/imports/ui/services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 10);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 11);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 12);
const ASK_MODERATOR = 'ASK_MODERATOR';
const SettingsContainer = props => {
  var _currentUser$presente, _currentUser$isModera, _meeting$usersPolicie;
  const layoutContextDispatch = layoutDispatch();
  const setLocalSettings = useUserChangedLocalSettings();
  const paginationToggleEnabled = useShouldRenderPaginationToggle();
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    presenter: u.presenter,
    isModerator: u.isModerator
  }));
  const {
    data: meeting
  } = useMeeting(m => ({
    usersPolicies: {
      guestPolicy: m.usersPolicies.guestPolicy
    }
  }));
  const application = useSettings(SETTINGS.APPLICATION);
  const audio = useSettings(SETTINGS.AUDIO);
  const dataSaving = useSettings(SETTINGS.DATA_SAVING);
  const transcription = useSettings(SETTINGS.TRANSCRIPTION);
  const availableLocales = getAvailableLocales();
  const isPresenter = (_currentUser$presente = currentUser === null || currentUser === void 0 ? void 0 : currentUser.presenter) !== null && _currentUser$presente !== void 0 ? _currentUser$presente : false;
  const isModerator = (_currentUser$isModera = currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator) !== null && _currentUser$isModera !== void 0 ? _currentUser$isModera : false;
  const isScreenSharingEnabled = useIsScreenSharingEnabled();
  const showGuestNotification = (meeting === null || meeting === void 0 ? void 0 : (_meeting$usersPolicie = meeting.usersPolicies) === null || _meeting$usersPolicie === void 0 ? void 0 : _meeting$usersPolicie.guestPolicy) === ASK_MODERATOR;
  const isReactionsEnabled = UserReactionService.useIsEnabled();
  const isGladiaEnabled = AudioCaptionsService.isGladia();
  const isChatEnabled = useIsChatEnabled();
  return /*#__PURE__*/React.createElement(Settings, _extends({}, _objectSpread(_objectSpread({}, props), {}, {
    updateSettings,
    application,
    audio,
    dataSaving,
    transcription,
    availableLocales,
    isPresenter,
    isModerator,
    isScreenSharingEnabled,
    showGuestNotification,
    isReactionsEnabled,
    showToggleLabel: false,
    isVideoEnabled: window.meetingClientSettings.public.kurento.enableVideo,
    isGladiaEnabled,
    isChatEnabled
  }), {
    layoutContextDispatch: layoutContextDispatch,
    setLocalSettings: setLocalSettings,
    paginationToggleEnabled: paginationToggleEnabled,
    fallbackLocales: FALLBACK_LOCALES
  }));
};
module.exportDefault(SettingsContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/service.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  updateSettings: () => updateSettings,
  isKeepPushingLayoutEnabled: () => isKeepPushingLayoutEnabled,
  getAvailableLocales: () => getAvailableLocales,
  FALLBACK_LOCALES: () => FALLBACK_LOCALES
});
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 0);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 1);
let intlHolder;
module.link("../../core/singletons/intlHolder", {
  default(v) {
    intlHolder = v;
  }
}, 2);
const isKeepPushingLayoutEnabled = () => window.meetingClientSettings.public.layout.showPushLayoutToggle;
const updateSettings = (obj, msgDescriptor, mutation) => {
  const Settings = getSettingsSingletonInstance();
  Object.keys(obj).forEach(k => Settings[k] = obj[k]);
  Settings.save(mutation);
  if (msgDescriptor) {
    // prevents React state update on unmounted component
    setTimeout(() => {
      const intl = intlHolder.getIntl();
      notify(intl.formatMessage(msgDescriptor), 'info', 'settings');
    }, 0);
  }
};
const getAvailableLocales = () => fetch('./locales/').then(locales => locales.json());
const FALLBACK_LOCALES = {
  dv: {
    englishName: 'Dhivehi',
    nativeName: 'ދިވެހި'
  },
  hy: {
    englishName: 'Armenian',
    nativeName: 'Հայերեն'
  },
  ka: {
    englishName: 'Georgian',
    nativeName: 'ქართული'
  },
  kk: {
    englishName: 'Kazakh',
    nativeName: 'қазақ'
  },
  'lo-LA': {
    englishName: 'Lao',
    nativeName: 'ລາວ'
  },
  oc: {
    englishName: 'Occitan',
    nativeName: 'Occitan'
  },
  'uz@Cyrl': {
    englishName: 'Uzbek (Cyrillic)',
    nativeName: 'ўзбек тили'
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings/styles.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smPaddingX, smPaddingY, mdPaddingY, mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 1);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 2);
let colorGrayDark, colorPrimary, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 3);
let fontSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarge(v) {
    fontSizeLarge = v;
  }
}, 4);
let Tab, Tabs, TabList, TabPanel;
module.link("react-tabs", {
  Tab(v) {
    Tab = v;
  },
  Tabs(v) {
    Tabs = v;
  },
  TabList(v) {
    TabList = v;
  },
  TabPanel(v) {
    TabPanel = v;
  }
}, 5);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 6);
const ToggleLabel = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-right: ", ";\n\n  [dir=\"rtl\"] & {\n    margin: 0 0 0 ", ";\n  }\n"])), smPaddingX, smPaddingX);
const SettingsTabs = styled(Tabs)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  justify-content: flex-start;\n\n  @media ", " {\n    width: 100%;\n    flex-flow: column;\n  }\n"])), smallOnly);
const SettingsTabList = styled(TabList)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  margin: 0;\n  border: none;\n  padding: 0;\n  width: calc(100% / 3);\n\n  @media ", " {\n    width: 100%;\n    flex-flow: row;\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n"])), smallOnly);
const SettingsTabSelector = styled(Tab)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  font-size: 0.9rem;\n  flex: 0 0 auto;\n  justify-content: flex-start;\n  border: none !important;\n  padding: ", " ", ";\n  color: ", ";\n  border-radius: .2rem;\n  cursor: pointer;\n  margin-bottom: ", ";\n  align-items: center;\n  flex-grow: 0;\n  min-width: 0;\n\n  & > span {\n    min-width: 0;\n    display: inline-block;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  @media ", " {\n    max-width: 100%;\n    margin: 0 ", " 0 0;\n    & > i {\n      display: none;\n    }\n\n    [dir=\"rtl\"] & {\n       margin: 0 0 0 ", ";\n    }\n  }\n\n  &.is-selected {\n    color: ", ";\n    background-color: ", ";\n    font-weight: bold;\n\n    & > i {\n      color: ", ";\n    }\n  }\n"])), mdPaddingY, mdPaddingX, colorGrayDark, smPaddingY, smallOnly, smPaddingX, smPaddingX, colorWhite, colorPrimary, colorWhite);
const SettingsIcon = styled(Icon)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  margin: 0 .5rem 0 0;\n  font-size: ", ";\n\n  [dir=\"rtl\"] & {\n     margin: 0 0 0 .5rem;\n  }\n"])), fontSizeLarge);
const SettingsTabPanel = styled(TabPanel)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: none;\n  margin: 0 0 0 1rem;\n  width: calc(100% / 3 * 2);\n\n  [dir=\"rtl\"] & {\n    margin: 0 1rem 0 0;\n  }\n\n  &.is-selected {\n    display: block;\n  }\n\n  @media ", " {\n    width: 100%;\n    margin: 0;\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n"])), smallOnly);
module.exportDefault({
  ToggleLabel,
  SettingsTabs,
  SettingsTabList,
  SettingsTabSelector,
  SettingsIcon,
  SettingsTabPanel
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"waiting-users":{"waiting-users-graphql":{"guest-items":{"guestPendingUser.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/waiting-users-graphql/guest-items/guestPendingUser.tsx                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let renderGuestUserItem;
module.link("./guestUserItem", {
  default(v) {
    renderGuestUserItem = v;
  }
}, 2);
const ALLOW_STATUS = 'ALLOW';
const DENY_STATUS = 'DENY';
const renderPendingUsers = (message, usersArray, action, privateMessageVisible, setPrivateGuestLobbyMessage, privateGuestLobbyMessage, isGuestLobbyMessageEnabled) => {
  if (!usersArray.length) return null;
  return /*#__PURE__*/React.createElement(Styled.PendingUsers, null, /*#__PURE__*/React.createElement(Styled.MainTitle, null, message), /*#__PURE__*/React.createElement(Styled.UsersWrapper, null, /*#__PURE__*/React.createElement(Styled.Users, null, usersArray.map((user, idx) => {
    var _user$user$name, _user$user$color, _user$user$role, _user$user$userId, _user$user$avatar, _privateGuestLobbyMes, _user$user$userId3, _user$user2;
    return renderGuestUserItem((_user$user$name = user.user.name) !== null && _user$user$name !== void 0 ? _user$user$name : '', (_user$user$color = user.user.color) !== null && _user$user$color !== void 0 ? _user$user$color : '', () => action([user], ALLOW_STATUS), () => action([user], DENY_STATUS), (_user$user$role = user.user.role) !== null && _user$user$role !== void 0 ? _user$user$role : '', idx + 1, (_user$user$userId = user.user.userId) !== null && _user$user$userId !== void 0 ? _user$user$userId : '', (_user$user$avatar = user.user.avatar) !== null && _user$user$avatar !== void 0 ? _user$user$avatar : '', () => privateMessageVisible("privateMessage-".concat(user.user.userId)), msg => {
      var _user$user$userId2, _user$user;
      return setPrivateGuestLobbyMessage(msg, (_user$user$userId2 = user === null || user === void 0 ? void 0 : (_user$user = user.user) === null || _user$user === void 0 ? void 0 : _user$user.userId) !== null && _user$user$userId2 !== void 0 ? _user$user$userId2 : '');
    }, (_privateGuestLobbyMes = privateGuestLobbyMessage((_user$user$userId3 = user === null || user === void 0 ? void 0 : (_user$user2 = user.user) === null || _user$user2 === void 0 ? void 0 : _user$user2.userId) !== null && _user$user$userId3 !== void 0 ? _user$user$userId3 : '')) !== null && _privateGuestLobbyMes !== void 0 ? _privateGuestLobbyMes : '', isGuestLobbyMessageEnabled);
  }))));
};
module.exportDefault(renderPendingUsers);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"guestUserItem.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/waiting-users-graphql/guest-items/guestUserItem.tsx                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 2);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let getNameInitials;
module.link("../service", {
  getNameInitials(v) {
    getNameInitials = v;
  }
}, 4);
let TextInput;
module.link("/imports/ui/components/text-input/component", {
  default(v) {
    TextInput = v;
  }
}, 5);
const intlMessages = defineMessages({
  accept: {
    id: 'app.userList.guest.acceptLabel',
    description: 'Accept guest button label'
  },
  privateMessageLabel: {
    id: 'app.userList.guest.privateMessageLabel',
    description: 'Private message button label'
  },
  deny: {
    id: 'app.userList.guest.denyLabel',
    description: 'Deny guest button label'
  },
  privateInputPlaceholder: {
    id: 'app.userList.guest.privateInputPlaceholder',
    description: 'Private input placeholder'
  },
  emptyMessage: {
    id: 'app.userList.guest.emptyMessage',
    description: 'Empty guest lobby message label'
  }
});
const renderGuestUserItem = (name, color, handleAccept, handleDeny, role, sequence, userId, avatar, privateMessageVisible, setPrivateGuestLobbyMessage, privateGuestLobbyMessage, isGuestLobbyMessageEnabled) => {
  var _Settings$application;
  const intl = useIntl();
  const Settings = getSettingsSingletonInstance();
  const animations = Settings === null || Settings === void 0 ? void 0 : (_Settings$application = Settings.application) === null || _Settings$application === void 0 ? void 0 : _Settings$application.animations;
  return /*#__PURE__*/React.createElement(React.Fragment, {
    key: "user-".concat(userId)
  }, /*#__PURE__*/React.createElement(Styled.ListItem, {
    key: "userlist-item-".concat(userId),
    animations: animations
  }, /*#__PURE__*/React.createElement(Styled.UserContentContainer, {
    key: "user-content-container-".concat(userId)
  }, /*#__PURE__*/React.createElement(Styled.UserAvatarContainer, {
    key: "user-avatar-container-".concat(userId)
  }, /*#__PURE__*/React.createElement(Styled.Avatar, {
    key: "user-avatar-".concat(userId),
    moderator: role === 'MODERATOR',
    avatar: avatar,
    color: color
  }, getNameInitials(name))), /*#__PURE__*/React.createElement(Styled.UserName, {
    key: "user-name-".concat(userId)
  }, "[".concat(sequence, "] ").concat(name))), /*#__PURE__*/React.createElement(Styled.ButtonContainer, {
    key: "userlist-btns-".concat(userId)
  }, /*#__PURE__*/React.createElement(Styled.WaitingUsersButton, {
    key: "userbtn-accept-".concat(userId),
    size: "md",
    "aria-label": intl.formatMessage(intlMessages.accept),
    ghost: true,
    hideLabel: true,
    icon: "add",
    onClick: handleAccept,
    "data-test": "acceptGuest"
  }), isGuestLobbyMessageEnabled ? /*#__PURE__*/React.createElement(Styled.WaitingUsersButtonMsg, {
    key: "userbtn-message-".concat(userId),
    size: "lg",
    "aria-label": intl.formatMessage(intlMessages.privateMessageLabel),
    ghost: true,
    hideLabel: true,
    onClick: privateMessageVisible,
    "data-test": "privateMessageGuest"
  }) : null, /*#__PURE__*/React.createElement(Styled.WaitingUsersButtonDeny, {
    key: "userbtn-deny-".concat(userId),
    "aria-label": intl.formatMessage(intlMessages.deny),
    ghost: true,
    hideLabel: true,
    onClick: handleDeny,
    "data-test": "denyGuest",
    size: "sm",
    icon: "close"
  }))), isGuestLobbyMessageEnabled ? /*#__PURE__*/React.createElement(Styled.PrivateLobbyMessage, {
    id: "privateMessage-".concat(userId),
    "data-test": "privateLobbyMessage"
  }, /*#__PURE__*/React.createElement(TextInput, {
    maxLength: 128,
    placeholder: intl.formatMessage(intlMessages.privateInputPlaceholder, {
      0: name
    }),
    send: setPrivateGuestLobbyMessage
  }), /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("i", null, "\"", privateGuestLobbyMessage && privateGuestLobbyMessage !== ''
  // eslint-disable-next-line react/no-danger
  ? /*#__PURE__*/React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: privateGuestLobbyMessage
    }
  }) : intl.formatMessage(intlMessages.emptyMessage), "\""))) : null);
};
module.exportDefault(renderGuestUserItem);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"noPendingGuestUser.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/waiting-users-graphql/guest-items/noPendingGuestUser.tsx                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const renderNoUserWaitingItem = message => /*#__PURE__*/React.createElement(Styled.PendingUsers, null, /*#__PURE__*/React.createElement(Styled.NoPendingUsers, null, message));
module.exportDefault(renderNoUserWaitingItem);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/waiting-users-graphql/component.tsx                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback, useEffect, useMemo, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  useMeeting(v) {
    useMeeting = v;
  }
}, 3);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 4);
let GET_GUEST_WAITING_USERS_SUBSCRIPTION;
module.link("./queries", {
  GET_GUEST_WAITING_USERS_SUBSCRIPTION(v) {
    GET_GUEST_WAITING_USERS_SUBSCRIPTION = v;
  }
}, 5);
let layoutDispatch;
module.link("../../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 6);
let ACTIONS, PANELS;
module.link("../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
let privateMessageVisible;
module.link("./service", {
  privateMessageVisible(v) {
    privateMessageVisible = v;
  }
}, 9);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 10);
let Header;
module.link("/imports/ui/components/common/control-header/component", {
  default(v) {
    Header = v;
  }
}, 11);
let TextInput;
module.link("/imports/ui/components/text-input/component", {
  default(v) {
    TextInput = v;
  }
}, 12);
let renderNoUserWaitingItem;
module.link("./guest-items/noPendingGuestUser", {
  default(v) {
    renderNoUserWaitingItem = v;
  }
}, 13);
let renderPendingUsers;
module.link("./guest-items/guestPendingUser", {
  default(v) {
    renderPendingUsers = v;
  }
}, 14);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 15);
let SET_POLICY, SUBMIT_APPROVAL_STATUS, SET_LOBBY_MESSAGE, SET_LOBBY_MESSAGE_PRIVATE;
module.link("../mutations", {
  SET_POLICY(v) {
    SET_POLICY = v;
  },
  SUBMIT_APPROVAL_STATUS(v) {
    SUBMIT_APPROVAL_STATUS = v;
  },
  SET_LOBBY_MESSAGE(v) {
    SET_LOBBY_MESSAGE = v;
  },
  SET_LOBBY_MESSAGE_PRIVATE(v) {
    SET_LOBBY_MESSAGE_PRIVATE = v;
  }
}, 16);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 17);
const ALLOW_STATUS = 'ALLOW';
const DENY_STATUS = 'DENY';
const intlMessages = defineMessages({
  waitingUsersTitle: {
    id: 'app.userList.guest.waitingUsersTitle',
    description: 'Title for the notes list'
  },
  title: {
    id: 'app.userList.guest.waitingUsers',
    description: 'Label for the waiting users'
  },
  optionTitle: {
    id: 'app.userList.guest.optionTitle',
    description: 'Label above the options'
  },
  allowAllAuthenticated: {
    id: 'app.userList.guest.allowAllAuthenticated',
    description: 'Title for the waiting users'
  },
  allowAllGuests: {
    id: 'app.userList.guest.allowAllGuests',
    description: 'Title for the waiting users'
  },
  allowEveryone: {
    id: 'app.userList.guest.allowEveryone',
    description: 'Title for the waiting users'
  },
  denyEveryone: {
    id: 'app.userList.guest.denyEveryone',
    description: 'Title for the waiting users'
  },
  pendingUsers: {
    id: 'app.userList.guest.pendingUsers',
    description: 'Title for the waiting users'
  },
  pendingGuestUsers: {
    id: 'app.userList.guest.pendingGuestUsers',
    description: 'Title for the waiting users'
  },
  noPendingUsers: {
    id: 'app.userList.guest.noPendingUsers',
    description: 'Label for no users waiting'
  },
  rememberChoice: {
    id: 'app.userList.guest.rememberChoice',
    description: 'Remember label for checkbox'
  },
  emptyMessage: {
    id: 'app.userList.guest.emptyMessage',
    description: 'Empty guest lobby message label'
  },
  inputPlaceholder: {
    id: 'app.userList.guest.inputPlaceholder',
    description: 'Placeholder to guest lobby message input'
  },
  privateMessageLabel: {
    id: 'app.userList.guest.privateMessageLabel',
    description: 'Private message button label'
  },
  privateInputPlaceholder: {
    id: 'app.userList.guest.privateInputPlaceholder',
    description: 'Private input placeholder'
  },
  accept: {
    id: 'app.userList.guest.acceptLabel',
    description: 'Accept guest button label'
  },
  deny: {
    id: 'app.userList.guest.denyLabel',
    description: 'Deny guest button label'
  },
  feedbackMessage: {
    id: 'app.userList.guest.feedbackMessage',
    description: 'Feedback message moderator action'
  }
});
const GuestUsersManagementPanel = _ref => {
  let {
    authedGuestUsers,
    unauthedGuestUsers,
    layoutContextDispatch,
    guestLobbyEnabled,
    guestLobbyMessage
  } = _ref;
  // @ts-ignore - temporary, while meteor exists in the project
  const isGuestLobbyMessageEnabled = window.meetingClientSettings.public.app.enableGuestLobbyMessage;
  // @ts-ignore - temporary, while meteor exists in the project
  const {
    guestPolicyExtraAllowOptions
  } = window.meetingClientSettings.public.app;
  // We use the dynamicGuestPolicy rule for allowing the rememberChoice checkbox
  // @ts-ignore - temporary, while meteor exists in the project
  const allowRememberChoice = window.meetingClientSettings.public.app.dynamicGuestPolicy;
  const intl = useIntl();
  const {
    isChrome
  } = browserInfo;
  const [rememberChoice, setRememberChoice] = useState(false);
  const [setPolicy] = useMutation(SET_POLICY);
  const [submitApprovalStatus] = useMutation(SUBMIT_APPROVAL_STATUS);
  const [setLobbyMessage] = useMutation(SET_LOBBY_MESSAGE);
  const [setLobbyMessagePrivate] = useMutation(SET_LOBBY_MESSAGE_PRIVATE);
  const guestUsersCall = useCallback((users, status) => {
    const guests = users.map(user => ({
      guest: user.user.userId,
      status
    }));
    submitApprovalStatus({
      variables: {
        guests
      }
    });
  }, []);
  const setGuestLobbyMessage = useCallback(message => {
    setLobbyMessage({
      variables: {
        message
      }
    });
  }, []);
  const setPrivateGuestLobbyMessage = useCallback((message, guestId) => {
    setLobbyMessagePrivate({
      variables: {
        guestId,
        message
      }
    });
  }, []);
  const existPendingUsers = authedGuestUsers.length > 0 || unauthedGuestUsers.length > 0;
  const closePanel = useCallback(() => {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.NONE
    });
  }, []);
  const onCheckBoxChange = useCallback(e => {
    const {
      checked
    } = e.target;
    setRememberChoice(checked);
  }, []);
  const getPrivateGuestLobbyMessage = useCallback(userId => {
    const user = authedGuestUsers.concat(unauthedGuestUsers).find(u => u.user.userId === userId);
    if (!user) return '';
    return user.guestLobbyMessage;
  }, [authedGuestUsers, unauthedGuestUsers]);
  const changePolicy = useCallback((shouldExecutePolicy, policyRule, cb, message) => () => {
    if (shouldExecutePolicy) {
      setPolicy({
        variables: {
          guestPolicy: policyRule
        }
      });
    }
    closePanel();
    notify(intl.formatMessage(intlMessages.feedbackMessage) + message.toUpperCase(), 'success');
    return cb();
  }, []);
  const renderButton = useCallback((message, _ref2) => {
    let {
      key,
      color,
      policy,
      action,
      dataTest
    } = _ref2;
    return /*#__PURE__*/React.createElement(Styled.CustomButton, {
      key: key,
      color: color,
      label: message,
      size: "lg",
      onClick: changePolicy(rememberChoice, policy, action, message),
      "data-test": dataTest
    });
  }, [rememberChoice]);
  useEffect(() => {
    if (!guestLobbyEnabled) {
      closePanel();
    }
  }, [guestLobbyEnabled]);
  const authGuestButtonsData = useMemo(() => [{
    messageId: intlMessages.allowAllAuthenticated,
    action: () => guestUsersCall(authedGuestUsers, ALLOW_STATUS),
    key: 'allow-all-auth',
    color: 'primary',
    policy: 'ALWAYS_ACCEPT_AUTH',
    dataTest: 'allowAllAuthenticated'
  }, {
    messageId: intlMessages.allowAllGuests,
    action: () => guestUsersCall([...unauthedGuestUsers].concat(rememberChoice ? authedGuestUsers : []), ALLOW_STATUS),
    key: 'allow-all-guest',
    color: 'primary',
    policy: 'ALWAYS_ACCEPT',
    dataTest: 'allowAllGuests'
  }], [authedGuestUsers, unauthedGuestUsers, rememberChoice]);
  const guestButtonsData = useMemo(() => [{
    messageId: intlMessages.allowEveryone,
    action: () => guestUsersCall([...unauthedGuestUsers, ...authedGuestUsers], ALLOW_STATUS),
    key: 'allow-everyone',
    color: 'primary',
    policy: 'ALWAYS_ACCEPT',
    dataTest: 'allowEveryone'
  }, {
    messageId: intlMessages.denyEveryone,
    action: () => guestUsersCall([...unauthedGuestUsers, ...authedGuestUsers], DENY_STATUS),
    key: 'deny-everyone',
    color: 'danger',
    policy: 'ALWAYS_DENY',
    dataTest: 'denyEveryone'
  }], [unauthedGuestUsers, authedGuestUsers]);
  const buttonsData = authedGuestUsers && guestPolicyExtraAllowOptions ? authGuestButtonsData.concat(guestButtonsData) : guestButtonsData;
  return /*#__PURE__*/React.createElement(Styled.Panel, {
    "data-test": "note",
    isChrome: isChrome
  }, /*#__PURE__*/React.createElement(Header, {
    leftButtonProps: {
      onClick: () => closePanel(),
      label: intl.formatMessage(intlMessages.title)
    },
    rightButtonProps: null,
    "data-test": "guestUsersManagementPanel",
    customRightButton: null,
    x: "guestUsersManagementPanel"
  }), /*#__PURE__*/React.createElement(Styled.ScrollableArea, null, isGuestLobbyMessageEnabled ? /*#__PURE__*/React.createElement(Styled.LobbyMessage, {
    "data-test": "lobbyMessage"
  }, /*#__PURE__*/React.createElement(TextInput, {
    maxLength: 128,
    placeholder: intl.formatMessage(intlMessages.inputPlaceholder),
    send: setGuestLobbyMessage
  }), /*#__PURE__*/React.createElement("p", null, /*#__PURE__*/React.createElement("i", null, "\"", guestLobbyMessage && guestLobbyMessage !== ''
  // eslint-disable-next-line react/no-danger
  ? /*#__PURE__*/React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: guestLobbyMessage
    }
  }) : intl.formatMessage(intlMessages.emptyMessage), "\""))) : null, /*#__PURE__*/React.createElement(Styled.ModeratorActions, null, /*#__PURE__*/React.createElement(Styled.MainTitle, null, intl.formatMessage(intlMessages.optionTitle)), buttonsData.map(btData => renderButton(intl.formatMessage(btData.messageId), btData)), allowRememberChoice ? /*#__PURE__*/React.createElement(Styled.RememberContainer, null, /*#__PURE__*/React.createElement("input", {
    id: "rememberCheckboxId",
    type: "checkbox",
    onChange: onCheckBoxChange
  }), /*#__PURE__*/React.createElement("label", {
    htmlFor: "rememberCheckboxId"
  }, intl.formatMessage(intlMessages.rememberChoice))) : null), renderPendingUsers(intl.formatMessage(intlMessages.pendingUsers, {
    0: authedGuestUsers.length
  }), authedGuestUsers, guestUsersCall, privateMessageVisible, setPrivateGuestLobbyMessage, getPrivateGuestLobbyMessage, isGuestLobbyMessageEnabled), renderPendingUsers(intl.formatMessage(intlMessages.pendingGuestUsers, {
    0: unauthedGuestUsers.length
  }), unauthedGuestUsers, guestUsersCall, privateMessageVisible, setPrivateGuestLobbyMessage, getPrivateGuestLobbyMessage, isGuestLobbyMessageEnabled), !existPendingUsers && renderNoUserWaitingItem(intl.formatMessage(intlMessages.noPendingUsers))));
};
const GuestUsersManagementPanelContainer = () => {
  var _guestWaitingUsersDat, _guestWaitingUsersDat2, _currentMeeting$users, _currentMeeting$users2, _currentMeeting$users3, _guestWaitingUsersDat3;
  const layoutContextDispatch = layoutDispatch();
  const {
    data: guestWaitingUsersData,
    loading: guestWaitingUsersLoading,
    error: guestWaitingUsersError
  } = useDeduplicatedSubscription(GET_GUEST_WAITING_USERS_SUBSCRIPTION);
  const {
    data: currentMeeting
  } = useMeeting(meeting => {
    const a = {
      usersPolicies: meeting.usersPolicies
    };
    return a;
  });
  if (guestWaitingUsersLoading || !currentMeeting) {
    return null;
  }
  if (guestWaitingUsersError) {
    if (guestWaitingUsersError) logger.error('guestWaitingUsersError', guestWaitingUsersError);
    return /*#__PURE__*/React.createElement("div", null, guestWaitingUsersError && /*#__PURE__*/React.createElement("p", null, JSON.stringify(guestWaitingUsersError)));
  }
  const separateGuestUsersByAuthed = (_guestWaitingUsersDat = guestWaitingUsersData === null || guestWaitingUsersData === void 0 ? void 0 : (_guestWaitingUsersDat2 = guestWaitingUsersData.user_guest) === null || _guestWaitingUsersDat2 === void 0 ? void 0 : _guestWaitingUsersDat2.reduce((acc, user) => {
    if (user.user.authed) {
      acc.authed.push(user);
    } else {
      acc.unauthed.push(user);
    }
    return acc;
  }, {
    authed: [],
    unauthed: []
  })) !== null && _guestWaitingUsersDat !== void 0 ? _guestWaitingUsersDat : {
    authed: [],
    unauthed: []
  };
  return /*#__PURE__*/React.createElement(GuestUsersManagementPanel, {
    authedGuestUsers: separateGuestUsersByAuthed.authed,
    unauthedGuestUsers: separateGuestUsersByAuthed.unauthed,
    guestLobbyMessage: (_currentMeeting$users = currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$users2 = currentMeeting.usersPolicies) === null || _currentMeeting$users2 === void 0 ? void 0 : _currentMeeting$users2.guestLobbyMessage) !== null && _currentMeeting$users !== void 0 ? _currentMeeting$users : null,
    guestLobbyEnabled: (currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$users3 = currentMeeting.usersPolicies) === null || _currentMeeting$users3 === void 0 ? void 0 : _currentMeeting$users3.guestPolicy) === 'ASK_MODERATOR' || !!(guestWaitingUsersData !== null && guestWaitingUsersData !== void 0 && (_guestWaitingUsersDat3 = guestWaitingUsersData.user_guest) !== null && _guestWaitingUsersDat3 !== void 0 && _guestWaitingUsersDat3.length),
    layoutContextDispatch: layoutContextDispatch
  });
};
module.exportDefault(GuestUsersManagementPanelContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/waiting-users-graphql/queries.ts                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  GET_GUEST_WAITING_USERS_SUBSCRIPTION: () => GET_GUEST_WAITING_USERS_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const GET_GUEST_WAITING_USERS_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription getGuestWaitingUsers {\n    user_guest(where: {isWaiting: {_eq: true}}) {\n      guestLobbyMessage\n      isAllowed\n      isDenied\n      userId\n      user {\n        authed\n        userId\n        name\n        color\n        role\n        avatar\n      }\n    }\n  }\n"])));
module.exportDefault({
  GET_GUEST_WAITING_USERS_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/waiting-users-graphql/service.ts                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  privateMessageVisible: () => privateMessageVisible,
  getNameInitials: () => getNameInitials
});
const privateMessageVisible = id => {
  const privateInputSpace = document.getElementById(id);
  if (privateInputSpace) {
    if (privateInputSpace.style.display === 'block') {
      privateInputSpace.style.display = 'none';
    } else {
      privateInputSpace.style.display = 'block';
    }
  }
};
const getNameInitials = name => {
  const nameInitials = name.slice(0, 2);
  return nameInitials.replace(/^\w/, c => c.toUpperCase());
};
module.exportDefault({
  privateMessageVisible,
  getNameInitials
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/waiting-users-graphql/styles.ts                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let colorPrimary, listItemBgHover, itemFocusBorder, colorGray, colorWhite, colorGrayLightest, colorOffWhite, userListBg, colorSuccess, colorDanger;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  listItemBgHover(v) {
    listItemBgHover = v;
  },
  itemFocusBorder(v) {
    itemFocusBorder = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  userListBg(v) {
    userListBg = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorDanger(v) {
    colorDanger = v;
  }
}, 1);
let borderSize, smPaddingX, mdPaddingY, userIndicatorsOffset, indicatorPadding;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  userIndicatorsOffset(v) {
    userIndicatorsOffset = v;
  },
  indicatorPadding(v) {
    indicatorPadding = v;
  }
}, 2);
let fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 3);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 6);
const ListItem = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  flex-direction: row;\n  align-items: center;\n  border-radius: 5px;\n\n  ", "\n\n  &:first-child {\n    margin-top: 0;\n  }\n\n  &:focus {\n    background-color: ", ";\n    box-shadow: inset 0 0 0 ", " ", ", inset 1px 0 0 1px ", ";\n    outline: none;\n  }\n\n  flex-shrink: 0;\n"])), _ref => {
  let {
    animations
  } = _ref;
  return animations && "\n    transition: all .3s;\n  ";
}, listItemBgHover, borderSize, itemFocusBorder, itemFocusBorder);
const UserContentContainer = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  flex: 1;\n  overflow: hidden;\n  align-items: center;\n  flex-direction: row;\n"])));
const UserAvatarContainer = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  min-width: 2.25rem;\n  margin: .5rem;\n"])));
const UserName = styled.p(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  min-width: 0;\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: initial;\n"])));
const ButtonContainer = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-self: flex-end;\n  align-items: center;\n  color: ", ";\n  & > button {\n    padding: ", ";\n    font-size: ", ";\n    border-radius: 50%;\n  }\n"])), colorPrimary, mdPaddingY, fontSizeBase);
// @ts-ignore - Button is JS
const WaitingUsersButton = styled(Button)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  font-weight: 400;\n  color: ", ";\n\n  &:focus {\n    background-color: ", " !important;\n    box-shadow: inset 0 0 0 ", " ", ", inset 1px 0 0 1px ", " ;\n    outline: none;\n  }\n\n  &:hover {\n    color: ", ";\n    background-color: ", " !important;\n  }\n"])), colorPrimary, listItemBgHover, borderSize, itemFocusBorder, itemFocusBorder, colorPrimary, listItemBgHover);
// @ts-ignore - Button is JS
const WaitingUsersButtonMsg = styled(Button)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  font-weight: 400;\n  color: ", ";\n\n  &:after {\n    font-family: 'bbb-icons';\n    content: \"\\E910\";\n  }\n\n  &:focus {\n    background-color: ", " !important;\n    box-shadow: inset 0 0 0 ", " ", ", inset 1px 0 0 1px ", " ;\n    outline: none;\n  }\n\n  &:hover {\n    color: ", ";\n    background-color: ", " !important;\n  }\n"], ["\n  font-weight: 400;\n  color: ", ";\n\n  &:after {\n    font-family: 'bbb-icons';\n    content: \"\\\\E910\";\n  }\n\n  &:focus {\n    background-color: ", " !important;\n    box-shadow: inset 0 0 0 ", " ", ", inset 1px 0 0 1px ", " ;\n    outline: none;\n  }\n\n  &:hover {\n    color: ", ";\n    background-color: ", " !important;\n  }\n"])), colorPrimary, listItemBgHover, borderSize, itemFocusBorder, itemFocusBorder, colorPrimary, listItemBgHover);
// @ts-ignore - Button is JS
const WaitingUsersButtonDeny = styled(Button)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  font-weight: 400;\n  color: #ff0e0e;\n\n  &:focus {\n    background-color: ", " !important;\n    box-shadow: inset 0 0 0 ", " ", ", inset 1px 0 0 1px ", " ;\n    outline: none;\n  }\n\n  &:hover {\n    color: #ff0e0e;\n    background-color: ", " !important;\n  }\n"])), listItemBgHover, borderSize, itemFocusBorder, itemFocusBorder, listItemBgHover);
const PendingUsers = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n"])));
const NoPendingUsers = styled.p(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  text-align: center;\n  font-weight: bold;\n"])));
const MainTitle = styled.p(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  color: ", ";\n"])), colorGray);
const UsersWrapper = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n"])));
const Users = styled.div(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n"])));
// @ts-ignore - Button is JS
const CustomButton = styled(Button)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  width: 100%;\n  padding: .75rem;\n  margin: .3rem 0;\n  font-weight: 400;\n  font-size: ", ";\n  overflow: hidden;\n  text-overflow: ellipsis;\n"])), fontSizeBase);
const Panel = styled.div(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  padding: ", ";\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  justify-content: flex-start;\n  overflow: hidden;\n  height: 100%;\n\n  ", "\n\n  @media ", " {\n    transform: none !important;\n  }\n"])), colorWhite, smPaddingX, _ref2 => {
  let {
    isChrome
  } = _ref2;
  return isChrome && "\n    transform: translateZ(0);\n  ";
}, smallOnly);
const LobbyMessage = styled.div(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  border-bottom: 1px solid ", ";\n  margin: 2px 2px 0 2px;\n\n  & > p {\n    background-color: ", ";\n    box-sizing: border-box;\n    color: ", ";\n    padding: 1rem;\n    text-align: center;\n  }\n"])), colorGrayLightest, colorOffWhite, colorGray);
const PrivateLobbyMessage = styled.div(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n  border-bottom: 1px solid ", ";\n  display: none;\n  & > p {\n    background-color: ", ";\n    box-sizing: border-box;\n    color: ", ";\n    padding: 1rem;\n    text-align: center;\n  }\n"])), colorGrayLightest, colorOffWhite, colorGray);
const RememberContainer = styled.div(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n  margin: 1rem 1rem;\n  height: 2rem;\n  display: flex;\n  align-items: center;\n  & > label {\n    height: fit-content;\n    padding: 0;\n    margin: 0;\n    margin-left: .7rem;\n\n    [dir=\"rtl\"] & {\n      margin: 0;\n      margin-right: .7rem;\n    }\n  }\n"])));
const ScrollableArea = styled(ScrollboxVertical)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n  overflow-y: auto;\n  padding-right: 0.25rem;\n"])));
const ModeratorActions = styled.div(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["\n  padding: 0 .2rem;\n"])));
const pulse = color => keyframes(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\n    0% {\n      box-shadow: 0 0 0 0 ", "80;\n    }\n    100% {\n      box-shadow: 0 0 0 10px ", "00;\n    }\n  }\n"])), color, color);
const Avatar = styled.div(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\n  position: relative;\n  height: 2.25rem;\n  width: 2.25rem;\n  border-radius: 50%;\n  text-align: center;\n  font-size: .85rem;\n  border: 2px solid transparent;\n  user-select: none;\n  ", "\n  }\n\n  ", "\n\n  &:after,\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 0;\n    height: 0;\n    padding-top: .5rem;\n    padding-right: 0;\n    padding-left: 0;\n    padding-bottom: 0;\n    color: inherit;\n    top: auto;\n    left: auto;\n    bottom: ", ";\n    right: ", ";\n    border: 1.5px solid ", ";\n    border-radius: 50%;\n    background-color: ", ";\n    color: ", ";\n    opacity: 0;\n    font-family: 'bbb-icons';\n    font-size: .65rem;\n    line-height: 0;\n    text-align: center;\n    vertical-align: middle;\n    letter-spacing: -.65rem;\n    z-index: 1;\n\n    [dir=\"rtl\"] & {\n      left: ", ";\n      right: auto;\n      padding-right: .65rem;\n      padding-left: 0;\n    }\n\n    ", "\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  // ================ talking animation ================\n  ", "\n  // ================ talking animation ================\n  // ================ image ================\n  ", "\n  // ================ image ================\n\n  // ================ content ================\n  color: ", ";\n  font-size: 110%;\n  text-transform: capitalize;\n  display: flex;\n  justify-content: center;\n  align-items:center;  \n  // ================ content ================\n"])), _ref3 => {
  let {
    color
  } = _ref3;
  return css(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\n    background-color: ", ";\n  "])), color);
}, _ref4 => {
  let {
    animations
  } = _ref4;
  return animations && "\n    transition: .3s ease-in-out;\n  ";
}, userIndicatorsOffset, userIndicatorsOffset, userListBg, colorSuccess, colorWhite, userIndicatorsOffset, _ref5 => {
  let {
    animations
  } = _ref5;
  return animations && "\n      transition: .3s ease-in-out;\n    ";
}, _ref6 => {
  let {
    moderator
  } = _ref6;
  return moderator && "\n    border-radius: 5px;\n  ";
}, _ref7 => {
  let {
    presenter
  } = _ref7;
  return presenter && "\n    &:before {\n      content: \"\\00a0\\e90b\\00a0\";\n      padding: ".concat(mdPaddingY, " !important;\n      opacity: 1;\n      top: ").concat(userIndicatorsOffset, ";\n      left: ").concat(userIndicatorsOffset, ";\n      bottom: auto;\n      right: auto;\n      border-radius: 5px;\n      background-color: ").concat(colorPrimary, ";\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: ").concat(userIndicatorsOffset, ";\n        letter-spacing: -.33rem;\n      }\n    }\n  ");
}, _ref8 => {
  let {
    presenter,
    isChrome,
    isFirefox,
    isEdge
  } = _ref8;
  return presenter && (isChrome || isFirefox || isEdge) && "\n    &:before {\n      padding: ".concat(indicatorPadding, " !important;\n    }\n  ");
}, _ref9 => {
  let {
    whiteboardAccess,
    presenter
  } = _ref9;
  return whiteboardAccess && !presenter && "\n    &:before {\n      content: \"\\00a0\\e925\\00a0\";\n      padding: ".concat(mdPaddingY, " !important;\n      border-radius: 50% !important;\n      opacity: 1;\n      top: ").concat(userIndicatorsOffset, ";\n      left: ").concat(userIndicatorsOffset, ";\n      bottom: auto;\n      right: auto;\n      border-radius: 5px;\n      background-color: ").concat(colorPrimary, ";\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: ").concat(userIndicatorsOffset, ";\n        letter-spacing: -.33rem;\n        transform: scale(-1, 1);\n      }\n    }\n  ");
}, _ref10 => {
  let {
    whiteboardAccess,
    isChrome,
    isFirefox,
    isEdge
  } = _ref10;
  return whiteboardAccess && (isChrome || isFirefox || isEdge) && "\n    &:before {\n      padding: ".concat(indicatorPadding, ";\n    }\n  ");
}, _ref11 => {
  let {
    voice
  } = _ref11;
  return voice && "\n    &:after {\n      content: \"\\00a0\\e931\\00a0\";\n      background-color: ".concat(colorSuccess, ";\n      top: 1.375rem;\n      left: 1.375rem;\n      right: auto;\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: 1.375rem;\n      }\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref12 => {
  let {
    muted
  } = _ref12;
  return muted && "\n    &:after {\n      content: \"\\00a0\\e932\\00a0\";\n      background-color: ".concat(colorDanger, ";\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref13 => {
  let {
    listenOnly
  } = _ref13;
  return listenOnly && "\n    &:after {\n      content: \"\\00a0\\e90c\\00a0\";\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ";
}, _ref14 => {
  let {
    noVoice
  } = _ref14;
  return noVoice && "\n    &:after {\n      content: \"\";\n      background-color: ".concat(colorOffWhite, ";\n      top: 1.375rem;\n      left: 1.375rem;\n      right: auto;\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: 1.375rem;\n      }\n\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref15 => {
  let {
    talking,
    animations,
    color
  } = _ref15;
  return talking && animations && css(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["\n    animation: ", " 1s infinite ease-in;\n  "])), pulse(color));
}, _ref16 => {
  let {
    avatar,
    emoji
  } = _ref16;
  return avatar.length !== 0 && !emoji && css(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["\n    background-image: url(", ");\n    background-repeat: no-repeat;\n    background-size: contain;\n  "])), avatar);
}, colorWhite);
module.exportDefault({
  ListItem,
  UserContentContainer,
  UserAvatarContainer,
  PrivateLobbyMessage,
  UserName,
  ButtonContainer,
  WaitingUsersButton,
  WaitingUsersButtonDeny,
  WaitingUsersButtonMsg,
  PendingUsers,
  NoPendingUsers,
  MainTitle,
  UsersWrapper,
  Users,
  CustomButton,
  Panel,
  LobbyMessage,
  RememberContainer,
  ScrollableArea,
  ModeratorActions,
  Avatar
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"guest-policy":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/guest-policy/component.jsx                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 4);
const ASK_MODERATOR = 'ASK_MODERATOR';
const ALWAYS_ACCEPT = 'ALWAYS_ACCEPT';
const ALWAYS_DENY = 'ALWAYS_DENY';
const intlMessages = defineMessages({
  ariaModalTitle: {
    id: 'app.guest-policy.ariaTitle',
    description: 'Guest policy aria title'
  },
  guestPolicyTitle: {
    id: 'app.guest-policy.title',
    description: 'Guest policy title'
  },
  guestPolicyDescription: {
    id: 'app.guest-policy.description',
    description: 'Guest policy description'
  },
  policyBtnDesc: {
    id: 'app.guest-policy.policyBtnDesc',
    description: 'aria description for guest policy button'
  },
  askModerator: {
    id: 'app.guest-policy.button.askModerator',
    description: 'Ask moderator button label'
  },
  alwaysAccept: {
    id: 'app.guest-policy.button.alwaysAccept',
    description: 'Always accept button label'
  },
  alwaysDeny: {
    id: 'app.guest-policy.button.alwaysDeny',
    description: 'Always deny button label'
  },
  feedbackMessage: {
    id: 'app.guest-policy.feedbackMessage',
    description: 'Feedback message for guest policy change'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  guestPolicy: PropTypes.string.isRequired,
  changeGuestPolicy: PropTypes.func.isRequired
};
class GuestPolicyComponent extends PureComponent {
  constructor(props) {
    super(props);
    this.handleChangePolicy = this.handleChangePolicy.bind(this);
  }
  componentWillUnmount() {
    const {
      setIsOpen
    } = this.props;
    setIsOpen(false);
  }
  handleChangePolicy(policyRule, messageId) {
    const {
      intl,
      changeGuestPolicy
    } = this.props;
    changeGuestPolicy(policyRule);
    notify(intl.formatMessage(intlMessages.feedbackMessage) + intl.formatMessage(messageId), 'success');
  }
  render() {
    const {
      setIsOpen,
      intl,
      guestPolicy,
      isOpen,
      onRequestClose,
      priority
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.GuestPolicyModal, {
      onRequestClose: () => setIsOpen(false),
      contentLabel: intl.formatMessage(intlMessages.ariaModalTitle),
      title: intl.formatMessage(intlMessages.guestPolicyTitle),
      isOpen,
      onRequestClose,
      priority
    }, /*#__PURE__*/React.createElement(Styled.Container, {
      "data-test": "guestPolicySettingsModal"
    }, /*#__PURE__*/React.createElement(Styled.Description, null, intl.formatMessage(intlMessages.guestPolicyDescription)), /*#__PURE__*/React.createElement(Styled.Content, null, /*#__PURE__*/React.createElement(Styled.GuestPolicyButton, {
      color: "primary",
      disabled: guestPolicy === ASK_MODERATOR,
      label: intl.formatMessage(intlMessages.askModerator),
      "aria-describedby": guestPolicy === ASK_MODERATOR ? 'selected-btn-desc' : 'policy-btn-desc',
      "aria-pressed": guestPolicy === ASK_MODERATOR,
      "data-test": "askModerator",
      onClick: () => {
        this.handleChangePolicy(ASK_MODERATOR, intlMessages.askModerator);
        setIsOpen(false);
      }
    }), /*#__PURE__*/React.createElement(Styled.GuestPolicyButton, {
      color: "primary",
      disabled: guestPolicy === ALWAYS_ACCEPT,
      label: intl.formatMessage(intlMessages.alwaysAccept),
      "aria-describedby": guestPolicy === ALWAYS_ACCEPT ? 'selected-btn-desc' : 'policy-btn-desc',
      "aria-pressed": guestPolicy === ALWAYS_ACCEPT,
      "data-test": "alwaysAccept",
      onClick: () => {
        this.handleChangePolicy(ALWAYS_ACCEPT, intlMessages.alwaysAccept);
        setIsOpen(false);
      }
    }), /*#__PURE__*/React.createElement(Styled.GuestPolicyButton, {
      color: "primary",
      disabled: guestPolicy === ALWAYS_DENY,
      label: intl.formatMessage(intlMessages.alwaysDeny),
      "aria-describedby": guestPolicy === ALWAYS_DENY ? 'selected-btn-desc' : 'policy-btn-desc',
      "aria-pressed": guestPolicy === ALWAYS_DENY,
      "data-test": "alwaysDeny",
      onClick: () => {
        this.handleChangePolicy(ALWAYS_DENY, intlMessages.alwaysDeny);
        setIsOpen(false);
      }
    })), /*#__PURE__*/React.createElement("div", {
      id: "policy-btn-desc",
      "aria-hidden": true,
      className: "sr-only"
    }, intl.formatMessage(intlMessages.policyBtnDesc))));
  }
}
GuestPolicyComponent.propTypes = propTypes;
module.exportDefault(injectIntl(GuestPolicyComponent));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/guest-policy/container.jsx                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let GuestPolicyComponent;
module.link("./component", {
  default(v) {
    GuestPolicyComponent = v;
  }
}, 2);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 3);
let SET_POLICY;
module.link("../mutations", {
  SET_POLICY(v) {
    SET_POLICY = v;
  }
}, 4);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 5);
const GuestPolicyContainer = props => {
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    isModerator: user.isModerator
  }));
  const {
    data: currentMeeting
  } = useMeeting(m => ({
    usersPolicies: {
      guestPolicy: m.usersPolicies.guestPolicy
    }
  }));
  const amIModerator = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.isModerator;
  const [setPolicy] = useMutation(SET_POLICY);
  const changeGuestPolicy = guestPolicy => {
    setPolicy({
      variables: {
        guestPolicy
      }
    });
  };
  return amIModerator && /*#__PURE__*/React.createElement(GuestPolicyComponent, _extends({
    changeGuestPolicy: changeGuestPolicy,
    guestPolicy: currentMeeting === null || currentMeeting === void 0 ? void 0 : currentMeeting.usersPolicies.guestPolicy
  }, props));
};
module.exportDefault(GuestPolicyContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/guest-policy/styles.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorGrayDark, colorGray;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorGray(v) {
    colorGray = v;
  }
}, 1);
let jumboPaddingY, lgPaddingX, lgPaddingY, titlePositionLeft, modalMargin;
module.link("/imports/ui/stylesheets/styled-components/general", {
  jumboPaddingY(v) {
    jumboPaddingY = v;
  },
  lgPaddingX(v) {
    lgPaddingX = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  titlePositionLeft(v) {
    titlePositionLeft = v;
  },
  modalMargin(v) {
    modalMargin = v;
  }
}, 2);
let fontSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarge(v) {
    fontSizeLarge = v;
  }
}, 3);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
const GuestPolicyModal = styled(ModalSimple)(_templateObject || (_templateObject = _taggedTemplateLiteral([""])));
const Container = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin: 0 ", " ", ";\n"])), modalMargin, lgPaddingX);
const Description = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  text-align: center;\n  color: ", ";\n  margin-bottom: ", ";\n"])), colorGray, jumboPaddingY);
const Content = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n"])));
const GuestPolicyButton = styled(Button)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  width: 200px;\n  box-sizing: border-box;\n  margin: 5px;\n\n  ", "\n"])), _ref => {
  let {
    disabled
  } = _ref;
  return disabled && "\n    & > span {\n      text-decoration: underline;\n    }\n  ";
});
module.exportDefault({
  GuestPolicyModal,
  Container,
  Description,
  Content,
  GuestPolicyButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"mutations.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/waiting-users/mutations.tsx                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  SET_POLICY: () => SET_POLICY,
  SUBMIT_APPROVAL_STATUS: () => SUBMIT_APPROVAL_STATUS,
  SET_LOBBY_MESSAGE: () => SET_LOBBY_MESSAGE,
  SET_LOBBY_MESSAGE_PRIVATE: () => SET_LOBBY_MESSAGE_PRIVATE
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const SET_POLICY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation SetPolicy($guestPolicy: String!) {\n    guestUsersSetPolicy(\n      guestPolicy: $guestPolicy,\n    )\n  }\n"])));
const SUBMIT_APPROVAL_STATUS = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation SubmitApprovalStatus($guests: [GuestUserApprovalStatus]!) {\n    guestUsersSubmitApprovalStatus(\n      guests: $guests,\n    )\n  }\n"])));
const SET_LOBBY_MESSAGE = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  mutation SetLobbyMessage($message: String!) {\n    guestUsersSetLobbyMessage(\n      message: $message,\n    )\n  }\n"])));
const SET_LOBBY_MESSAGE_PRIVATE = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  mutation SetLobbyMessage($guestId: String!, $message: String!) {\n    guestUsersSetLobbyMessagePrivate(\n      guestId: $guestId,\n      message: $message,\n    )\n  }\n"])));
module.exportDefault({
  SET_POLICY,
  SUBMIT_APPROVAL_STATUS,
  SET_LOBBY_MESSAGE,
  SET_LOBBY_MESSAGE_PRIVATE
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"whiteboard":{"custom-shapes":{"poll":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/custom-shapes/poll/component.tsx                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  PollShapeUtil: () => PollShapeUtil
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let HTMLContainer, Rectangle2d, ShapeUtil, getDefaultColorTheme, resizeBox;
module.link("@bigbluebutton/tldraw", {
  HTMLContainer(v) {
    HTMLContainer = v;
  },
  Rectangle2d(v) {
    Rectangle2d = v;
  },
  ShapeUtil(v) {
    ShapeUtil = v;
  },
  getDefaultColorTheme(v) {
    getDefaultColorTheme = v;
  },
  resizeBox(v) {
    resizeBox = v;
  }
}, 1);
let pollShapeMigrations;
module.link("./poll-shape-migrations", {
  pollShapeMigrations(v) {
    pollShapeMigrations = v;
  }
}, 2);
let pollShapeProps;
module.link("./poll-shape-props", {
  pollShapeProps(v) {
    pollShapeProps = v;
  }
}, 3);
let ChatPollContent;
module.link("/imports/ui/components/chat/chat-graphql/chat-message-list/page/chat-message/message-content/poll-content/component", {
  default(v) {
    ChatPollContent = v;
  }
}, 4);
class PollShapeUtil extends ShapeUtil {
  constructor() {
    super(...arguments);
    this.isAspectRatioLocked = _shape => false;
    this.canResize = _shape => true;
    this.canBind = _shape => true;
    this.onResize = (shape, info) => {
      return resizeBox(shape, info);
    };
  }
  getDefaultProps() {
    return {
      w: 300,
      h: 300,
      color: 'black',
      fill: 'white',
      question: '',
      numRespondents: 0,
      numResponders: 0,
      questionText: '',
      questionType: '',
      answers: []
    };
  }
  // eslint-disable-next-line class-methods-use-this
  getGeometry(shape) {
    return new Rectangle2d({
      width: shape.props.w,
      height: shape.props.h,
      isFilled: true
    });
  }
  component(shape) {
    const {
      bounds
    } = this.editor.getShapeGeometry(shape);
    const theme = getDefaultColorTheme({
      isDarkMode: this.editor.user.getIsDarkMode()
    });
    const contentRef = React.useRef(null);
    const pollMetadata = JSON.stringify({
      id: shape.id,
      question: shape.props.question,
      numRespondents: shape.props.numRespondents,
      numResponders: shape.props.numResponders,
      questionText: shape.props.questionText,
      questionType: shape.props.questionType,
      answers: shape.props.answers
    });
    const adjustedHeight = shape.props.questionText.length > 0 ? bounds.height - 75 : bounds.height;
    return /*#__PURE__*/React.createElement(HTMLContainer, {
      id: shape.id,
      style: {
        border: '1px solid #8B9AA8',
        borderRadius: '4px',
        boxShadow: '0px 0px 4px 0px rgba(0, 0, 0, 0.20)',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center',
        pointerEvents: 'all',
        backgroundColor: theme[shape.props.color].semi,
        color: theme[shape.props.color].solid
      }
    }, /*#__PURE__*/React.createElement("div", {
      ref: contentRef,
      style: {
        width: "".concat(bounds.width, "px"),
        overflow: 'hidden',
        position: 'relative'
      }
    }, /*#__PURE__*/React.createElement(ChatPollContent, {
      metadata: pollMetadata,
      height: adjustedHeight
    })));
  }
  // eslint-disable-next-line class-methods-use-this
  indicator(shape) {
    return /*#__PURE__*/React.createElement("rect", {
      width: shape.props.w,
      height: shape.props.h
    });
  }
}
PollShapeUtil.type = 'poll';
PollShapeUtil.props = pollShapeProps;
PollShapeUtil.migrations = pollShapeMigrations;
module.exportDefault(PollShapeUtil);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"poll-shape-migrations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/custom-shapes/poll/poll-shape-migrations.ts                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  pollShapeMigrations: () => pollShapeMigrations
});
let defineMigrations;
module.link("@bigbluebutton/tldraw", {
  defineMigrations(v) {
    defineMigrations = v;
  }
}, 0);
const pollShapeMigrations = defineMigrations({
  currentVersion: 1,
  migrators: {
    1: {
      // example, removing a property from the shape
      up(shape) {
        const migratedUpShape = _objectSpread({}, shape);
        delete migratedUpShape.somePropertyToRemove;
        return migratedUpShape;
      },
      down(shape) {
        const migratedDownShape = _objectSpread({}, shape);
        migratedDownShape.somePropertyToRemove = 'some value';
        return migratedDownShape;
      }
    }
  }
});
module.exportDefault(pollShapeMigrations);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"poll-shape-props.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/custom-shapes/poll/poll-shape-props.ts                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  pollShapeProps: () => pollShapeProps
});
let DefaultColorStyle, T;
module.link("@bigbluebutton/tldraw", {
  DefaultColorStyle(v) {
    DefaultColorStyle = v;
  },
  T(v) {
    T = v;
  }
}, 0);
const pollShapeProps = {
  w: T.number,
  h: T.number,
  color: DefaultColorStyle,
  fill: T.string,
  question: T.string,
  numRespondents: T.number,
  numResponders: T.number,
  questionText: T.string,
  questionType: T.string,
  answers: T.any
};
module.exportDefault(pollShapeProps);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"custom-tools":{"noop-tool":{"component.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/custom-tools/noop-tool/component.ts                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => NoopTool
});
let StateNode;
module.link("@bigbluebutton/tldraw", {
  StateNode(v) {
    StateNode = v;
  }
}, 0);
class NoopTool extends StateNode {
  constructor() {
    super(...arguments);
    this.onEnter = () => {
      this.editor.setCursor({
        type: 'default',
        rotation: 0
      });
    };
    this.onExit = () => {
      this.editor.setCursor({
        type: 'default',
        rotation: 0
      });
    };
  }
}
NoopTool.id = 'noop';
NoopTool.initial = 'idle';
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/component.jsx                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  "*"(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let useEffect, useRef, useCallback;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useCallback(v) {
    useCallback = v;
  }
}, 2);
let debounce, isEqual;
module.link("radash", {
  debounce(v) {
    debounce = v;
  },
  isEqual(v) {
    isEqual = v;
  }
}, 3);
let Tldraw, DefaultColorStyle, DefaultDashStyle, DefaultFillStyle, DefaultFontStyle, DefaultSizeStyle, InstancePresenceRecordType, setDefaultUiAssetUrls, setDefaultEditorAssetUrls;
module.link("@bigbluebutton/tldraw", {
  Tldraw(v) {
    Tldraw = v;
  },
  DefaultColorStyle(v) {
    DefaultColorStyle = v;
  },
  DefaultDashStyle(v) {
    DefaultDashStyle = v;
  },
  DefaultFillStyle(v) {
    DefaultFillStyle = v;
  },
  DefaultFontStyle(v) {
    DefaultFontStyle = v;
  },
  DefaultSizeStyle(v) {
    DefaultSizeStyle = v;
  },
  InstancePresenceRecordType(v) {
    InstancePresenceRecordType = v;
  },
  setDefaultUiAssetUrls(v) {
    setDefaultUiAssetUrls = v;
  },
  setDefaultEditorAssetUrls(v) {
    setDefaultEditorAssetUrls = v;
  }
}, 4);
module.link("@bigbluebutton/tldraw/tldraw.css");
let compressToBase64, decompressFromBase64;
module.link("lz-string", {
  compressToBase64(v) {
    compressToBase64 = v;
  },
  decompressFromBase64(v) {
    decompressFromBase64 = v;
  }
}, 5);
let SlideCalcUtil;
module.link("/imports/utils/slideCalcUtils", {
  default(v) {
    SlideCalcUtil = v;
  }
}, 6);
let HUNDRED_PERCENT;
module.link("/imports/utils/slideCalcUtils", {
  HUNDRED_PERCENT(v) {
    HUNDRED_PERCENT = v;
  }
}, 7);
let Settings;
module.link("/imports/ui/services/settings", {
  default(v) {
    Settings = v;
  }
}, 8);
let meetingClientSettingsInitialValues;
module.link("/imports/ui/core/initial-values/meetingClientSettings", {
  default(v) {
    meetingClientSettingsInitialValues = v;
  }
}, 9);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 10);
let KEY_CODES;
module.link("/imports/utils/keyCodes", {
  default(v) {
    KEY_CODES = v;
  }
}, 11);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 12);
let mapLanguage, isValidShapeType;
module.link("./utils", {
  mapLanguage(v) {
    mapLanguage = v;
  },
  isValidShapeType(v) {
    isValidShapeType = v;
  }
}, 13);
let useMouseEvents, useCursor;
module.link("./hooks", {
  useMouseEvents(v) {
    useMouseEvents = v;
  },
  useCursor(v) {
    useCursor = v;
  }
}, 14);
let notifyShapeNumberExceeded, getCustomEditorAssetUrls, getCustomAssetUrls;
module.link("./service", {
  notifyShapeNumberExceeded(v) {
    notifyShapeNumberExceeded = v;
  },
  getCustomEditorAssetUrls(v) {
    getCustomEditorAssetUrls = v;
  },
  getCustomAssetUrls(v) {
    getCustomAssetUrls = v;
  }
}, 15);
let NoopTool;
module.link("./custom-tools/noop-tool/component", {
  default(v) {
    NoopTool = v;
  }
}, 16);
let PollShapeUtil;
module.link("./custom-shapes/poll/component", {
  PollShapeUtil(v) {
    PollShapeUtil = v;
  }
}, 17);
const CAMERA_TYPE = "camera";

// Helper functions
const deleteLocalStorageItemsWithPrefix = prefix => {
  const keysToRemove = Object.keys(localStorage).filter(key => key.startsWith(prefix));
  keysToRemove.forEach(key => localStorage.removeItem(key));
};

// Example of typical LocalStorage entry tldraw creates:
// `{ TLDRAW_USER_DATA_v3: '{"version":2,"user":{"id":"epDk1 ...`
const clearTldrawCache = () => {
  deleteLocalStorageItemsWithPrefix("TLDRAW");
};
const calculateEffectiveZoom = (initViewboxWidth, curViewboxWidth, initViewboxHeight, curViewboxHeight) => {
  // Calculate the effective zoom level based on the change in viewBox dimensions
  const widthZoomValue = initViewboxWidth * 100 / curViewboxWidth;
  const heightZoomValue = initViewboxHeight * 100 / curViewboxHeight;

  // Take the smaller zoom value to ensure the entire content fits in the viewbox
  const effectiveZoomValue = Math.min(widthZoomValue, heightZoomValue);
  return effectiveZoomValue;
};
const determineViewerFitToWidth = currentPresentationPage => {
  return (currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledViewBoxWidth) === (currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledWidth) && (currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledViewBoxHeight) !== (currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledHeight);
};
const createCamera = (pageId, zoomLevel) => ({
  id: "camera:page:".concat(pageId),
  meta: {},
  typeName: CAMERA_TYPE,
  x: 0,
  y: 0,
  z: zoomLevel
});
function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
const defaultUser = {
  userId: ''
};
const Whiteboard = /*#__PURE__*/React.memo(function Whiteboard(props) {
  var _tlEditorRef$current41;
  const {
    isPresenter = false,
    removeShapes,
    persistShapeWrapper,
    shapes,
    assets,
    currentUser = defaultUser,
    whiteboardId = undefined,
    zoomSlide,
    curPageId,
    zoomChanger,
    isMultiUserActive,
    isRTL,
    fitToWidth,
    zoomValue,
    colorStyle,
    dashStyle,
    fillStyle,
    fontStyle,
    sizeStyle,
    presentationAreaHeight,
    presentationAreaWidth,
    setTldrawIsMounting,
    setTldrawAPI,
    whiteboardToolbarAutoHide,
    toggleToolsAnimations,
    animations,
    isToolbarVisible,
    isModerator,
    currentPresentationPage,
    presentationId = undefined,
    hasWBAccess,
    bgShape,
    publishCursorUpdate,
    otherCursors,
    hideViewersCursor,
    presentationHeight,
    presentationWidth,
    skipToSlide,
    intl,
    maxNumberOfAnnotations,
    notifyNotAllowedChange,
    locale,
    darkTheme,
    selectedLayout,
    isInfiniteWhiteboard,
    whiteboardWriters
  } = props;
  clearTldrawCache();
  const [tlEditor, setTlEditor] = React.useState(null);
  const [isMounting, setIsMounting] = React.useState(true);
  const [initialViewBoxWidth, setInitialViewBoxWidth] = React.useState(null);
  const [initialViewBoxHeight, setInitialViewBoxHeight] = React.useState(null);
  if (isMounting) {
    setDefaultEditorAssetUrls(getCustomEditorAssetUrls());
    setDefaultUiAssetUrls(getCustomAssetUrls());
  }
  const whiteboardRef = React.useRef(null);
  const zoomValueRef = React.useRef(null);
  const prevShapesRef = React.useRef(shapes);
  const tlEditorRef = React.useRef(tlEditor);
  const slideChanged = React.useRef(false);
  const slideNext = React.useRef(null);
  const prevZoomValueRef = React.useRef(null);
  const initialZoomRef = useRef(null);
  const isMouseDownRef = useRef(false);
  const isMountedRef = useRef(false);
  const isWheelZoomRef = useRef(false);
  const isPresenterRef = useRef(isPresenter);
  const whiteboardIdRef = React.useRef(whiteboardId);
  const curPageIdRef = React.useRef(curPageId);
  const hasWBAccessRef = React.useRef(hasWBAccess);
  const isModeratorRef = React.useRef(isModerator);
  const currentPresentationPageRef = React.useRef(currentPresentationPage);
  const initialViewBoxWidthRef = React.useRef(null);
  const initialViewBoxHeightRef = React.useRef(null);
  const previousTool = React.useRef(null);
  const THRESHOLD = 0.1;
  const CAMERA_UPDATE_DELAY = 500;
  const lastKnownHeight = React.useRef(presentationAreaHeight);
  const lastKnownWidth = React.useRef(presentationAreaWidth);
  const [shapesVersion, setShapesVersion] = React.useState(0);
  const customShapeUtils = [PollShapeUtil];
  const customTools = [NoopTool];
  const presenterChanged = usePrevious(isPresenter) !== isPresenter;
  let clipboardContent = null;
  let isPasting = false;
  let pasteTimeout = null;
  const setIsMouseDown = val => {
    isMouseDownRef.current = val;
  };
  const setIsWheelZoom = val => {
    isWheelZoomRef.current = val;
  };
  const setWheelZoomTimeout = () => {
    isWheelZoomRef.currentTimeout = setTimeout(() => {
      setIsWheelZoom(false);
    }, 300);
  };
  React.useEffect(() => {
    currentPresentationPageRef.current = currentPresentationPage;
  }, [currentPresentationPage]);
  React.useEffect(() => {
    curPageIdRef.current = curPageId;
  }, [curPageId]);
  React.useEffect(() => {
    isModeratorRef.current = isModerator;
  }, [isModerator]);
  React.useEffect(() => {
    whiteboardIdRef.current = whiteboardId;
  }, [whiteboardId]);
  React.useEffect(() => {
    hasWBAccessRef.current = hasWBAccess;
    if (!hasWBAccess && !isPresenter) {
      var _tlEditorRef$current;
      tlEditorRef === null || tlEditorRef === void 0 ? void 0 : (_tlEditorRef$current = tlEditorRef.current) === null || _tlEditorRef$current === void 0 ? void 0 : _tlEditorRef$current.setCurrentTool('noop');
    } else if (hasWBAccess && !isPresenter) {
      var _tlEditorRef$current2;
      tlEditorRef === null || tlEditorRef === void 0 ? void 0 : (_tlEditorRef$current2 = tlEditorRef.current) === null || _tlEditorRef$current2 === void 0 ? void 0 : _tlEditorRef$current2.setCurrentTool('draw');
    }
  }, [hasWBAccess]);
  React.useEffect(() => {
    isPresenterRef.current = isPresenter;
    if (!hasWBAccessRef.current && !isPresenter) {
      var _tlEditorRef$current3;
      tlEditorRef === null || tlEditorRef === void 0 ? void 0 : (_tlEditorRef$current3 = tlEditorRef.current) === null || _tlEditorRef$current3 === void 0 ? void 0 : _tlEditorRef$current3.setCurrentTool('noop');
    }
  }, [isPresenter]);
  React.useEffect(() => {
    if (!isEqual(prevShapesRef.current, shapes)) {
      prevShapesRef.current = shapes;
      setShapesVersion(v => v + 1);
    }
  }, [shapes]);
  React.useEffect(() => {
    if (whiteboardRef.current) {
      whiteboardRef.current.addEventListener("keydown", handleKeyDown, {
        capture: true
      });
    }
    return () => {
      var _whiteboardRef$curren;
      (_whiteboardRef$curren = whiteboardRef.current) === null || _whiteboardRef$curren === void 0 ? void 0 : _whiteboardRef$curren.removeEventListener("keydown", handleKeyDown);
    };
  }, [whiteboardRef.current]);
  const language = React.useMemo(() => {
    return mapLanguage((locale === null || locale === void 0 ? void 0 : locale.toLowerCase()) || "en");
  }, [locale]);
  const [cursorPosition, updateCursorPosition] = useCursor(publishCursorUpdate, whiteboardIdRef.current);
  const pasteTldrawContent = (editor, clipboard, point) => {
    const p = point !== null && point !== void 0 ? point : editor.inputs.shiftKey ? editor.inputs.currentPagePoint : undefined;
    editor.mark('paste');
    editor.putContentOntoCurrentPage(clipboard, {
      point: p,
      select: true
    });
  };
  const handleCut = useCallback(shouldCopy => {
    var _tlEditorRef$current4, _tlEditorRef$current5;
    const selectedShapes = (_tlEditorRef$current4 = tlEditorRef.current) === null || _tlEditorRef$current4 === void 0 ? void 0 : _tlEditorRef$current4.getSelectedShapes();
    if (!selectedShapes || selectedShapes.length === 0) {
      return;
    }
    if (shouldCopy) {
      handleCopy();
    }
    (_tlEditorRef$current5 = tlEditorRef.current) === null || _tlEditorRef$current5 === void 0 ? void 0 : _tlEditorRef$current5.deleteShapes(selectedShapes.map(shape => shape.id));
  }, [tlEditorRef]);
  const handleCopy = useCallback(() => {
    var _tlEditorRef$current6, _tlEditorRef$current7;
    const selectedShapes = (_tlEditorRef$current6 = tlEditorRef.current) === null || _tlEditorRef$current6 === void 0 ? void 0 : _tlEditorRef$current6.getSelectedShapes();
    if (!selectedShapes || selectedShapes.length === 0) {
      return;
    }
    const content = (_tlEditorRef$current7 = tlEditorRef.current) === null || _tlEditorRef$current7 === void 0 ? void 0 : _tlEditorRef$current7.getContentFromCurrentPage(selectedShapes.map(shape => shape.id));
    if (content) {
      var _navigator$clipboard;
      clipboardContent = content;
      const stringifiedClipboard = compressToBase64(JSON.stringify({
        type: 'application/tldraw',
        kind: 'content',
        data: content
      }));
      if ((_navigator$clipboard = navigator.clipboard) !== null && _navigator$clipboard !== void 0 && _navigator$clipboard.write) {
        const htmlBlob = new Blob(["<tldraw>".concat(stringifiedClipboard, "</tldraw>")], {
          type: 'text/html'
        });
        navigator.clipboard.write([new ClipboardItem({
          'text/html': htmlBlob,
          'text/plain': new Blob([''], {
            type: 'text/plain'
          })
        })]);
      } else if (navigator.clipboard.writeText) {
        navigator.clipboard.writeText("<tldraw>".concat(stringifiedClipboard, "</tldraw>"));
      }
    }
  }, [tlEditorRef]);
  const handlePaste = useCallback(() => {
    if (isPasting) {
      return;
    }
    isPasting = true;
    clearTimeout(pasteTimeout);
    pasteTimeout = setTimeout(() => {
      if (clipboardContent) {
        pasteTldrawContent(tlEditorRef.current, clipboardContent);
        isPasting = false;
      } else {
        navigator.clipboard.readText().then(text => {
          const match = text.match(/<tldraw>(.*)<\/tldraw>/);
          if (match && match[1]) {
            const content = JSON.parse(decompressFromBase64(match[1]));
            pasteTldrawContent(tlEditorRef.current, content);
          }
          isPasting = false;
        }).catch(error => {
          isPasting = false;
        });
      }
    }, 100);
  }, [tlEditorRef]);
  const handleKeyDown = useCallback(event => {
    var _tlEditorRef$current11, _tlEditorRef$current12, _tlEditorRef$current31;
    const debouncedUndo = debounce({
      delay: 150
    }, () => {
      var _tlEditorRef$current8;
      (_tlEditorRef$current8 = tlEditorRef.current) === null || _tlEditorRef$current8 === void 0 ? void 0 : _tlEditorRef$current8.undo();
    });
    if (event.key === 'Escape' || event.keyCode === 27) {
      var _tlEditorRef$current9, _tlEditorRef$current10;
      (_tlEditorRef$current9 = tlEditorRef.current) === null || _tlEditorRef$current9 === void 0 ? void 0 : _tlEditorRef$current9.deselect(...((_tlEditorRef$current10 = tlEditorRef.current) === null || _tlEditorRef$current10 === void 0 ? void 0 : _tlEditorRef$current10.getSelectedShapes()));
      return;
    }
    const editingShape = (_tlEditorRef$current11 = tlEditorRef.current) === null || _tlEditorRef$current11 === void 0 ? void 0 : _tlEditorRef$current11.getEditingShape();
    if (editingShape && (isPresenterRef.current || hasWBAccessRef.current)) {
      return;
    }
    if (event.key === 'Delete') {
      handleCut(false);
      return;
    }
    if (event.key === ' ' && ((_tlEditorRef$current12 = tlEditorRef.current) === null || _tlEditorRef$current12 === void 0 ? void 0 : _tlEditorRef$current12.getCurrentToolId()) !== 'hand' && isPresenterRef.current) {
      var _tlEditorRef$current13, _tlEditorRef$current14;
      previousTool.current = (_tlEditorRef$current13 = tlEditorRef.current) === null || _tlEditorRef$current13 === void 0 ? void 0 : _tlEditorRef$current13.getCurrentToolId();
      (_tlEditorRef$current14 = tlEditorRef.current) === null || _tlEditorRef$current14 === void 0 ? void 0 : _tlEditorRef$current14.setCurrentTool("hand");
      return;
    }

    // Mapping of simple key shortcuts to tldraw functions
    const simpleKeyMap = {
      'v': () => {
        var _tlEditorRef$current15;
        return (_tlEditorRef$current15 = tlEditorRef.current) === null || _tlEditorRef$current15 === void 0 ? void 0 : _tlEditorRef$current15.setCurrentTool("select");
      },
      'd': () => {
        var _tlEditorRef$current16;
        return (_tlEditorRef$current16 = tlEditorRef.current) === null || _tlEditorRef$current16 === void 0 ? void 0 : _tlEditorRef$current16.setCurrentTool("draw");
      },
      'e': () => {
        var _tlEditorRef$current17;
        return (_tlEditorRef$current17 = tlEditorRef.current) === null || _tlEditorRef$current17 === void 0 ? void 0 : _tlEditorRef$current17.setCurrentTool("eraser");
      },
      'h': () => {
        var _tlEditorRef$current18;
        return (_tlEditorRef$current18 = tlEditorRef.current) === null || _tlEditorRef$current18 === void 0 ? void 0 : _tlEditorRef$current18.setCurrentTool("hand");
      },
      'r': () => {
        var _tlEditorRef$current19;
        return (_tlEditorRef$current19 = tlEditorRef.current) === null || _tlEditorRef$current19 === void 0 ? void 0 : _tlEditorRef$current19.setCurrentTool("rectangle");
      },
      'o': () => {
        var _tlEditorRef$current20;
        return (_tlEditorRef$current20 = tlEditorRef.current) === null || _tlEditorRef$current20 === void 0 ? void 0 : _tlEditorRef$current20.setCurrentTool("ellipse");
      },
      'a': () => {
        var _tlEditorRef$current21;
        return (_tlEditorRef$current21 = tlEditorRef.current) === null || _tlEditorRef$current21 === void 0 ? void 0 : _tlEditorRef$current21.setCurrentTool("arrow");
      },
      'l': () => {
        var _tlEditorRef$current22;
        return (_tlEditorRef$current22 = tlEditorRef.current) === null || _tlEditorRef$current22 === void 0 ? void 0 : _tlEditorRef$current22.setCurrentTool("line");
      },
      't': () => {
        var _tlEditorRef$current23;
        return (_tlEditorRef$current23 = tlEditorRef.current) === null || _tlEditorRef$current23 === void 0 ? void 0 : _tlEditorRef$current23.setCurrentTool("text");
      },
      'f': () => {
        var _tlEditorRef$current24;
        return (_tlEditorRef$current24 = tlEditorRef.current) === null || _tlEditorRef$current24 === void 0 ? void 0 : _tlEditorRef$current24.setCurrentTool("frame");
      },
      'n': () => {
        var _tlEditorRef$current25;
        return (_tlEditorRef$current25 = tlEditorRef.current) === null || _tlEditorRef$current25 === void 0 ? void 0 : _tlEditorRef$current25.setCurrentTool("note");
      }
    };
    if (event.ctrlKey || event.metaKey) {
      const ctrlKeyMap = {
        'a': () => {
          var _tlEditorRef$current26, _tlEditorRef$current27;
          (_tlEditorRef$current26 = tlEditorRef.current) === null || _tlEditorRef$current26 === void 0 ? void 0 : _tlEditorRef$current26.selectAll();
          (_tlEditorRef$current27 = tlEditorRef.current) === null || _tlEditorRef$current27 === void 0 ? void 0 : _tlEditorRef$current27.setCurrentTool("select");
        },
        'd': () => {
          var _tlEditorRef$current28, _tlEditorRef$current29, _tlEditorRef$current30;
          (_tlEditorRef$current28 = tlEditorRef.current) === null || _tlEditorRef$current28 === void 0 ? void 0 : _tlEditorRef$current28.duplicateShapes((_tlEditorRef$current29 = tlEditorRef.current) === null || _tlEditorRef$current29 === void 0 ? void 0 : _tlEditorRef$current29.getSelectedShapes(), {
            x: 35,
            y: 35
          });
          (_tlEditorRef$current30 = tlEditorRef.current) === null || _tlEditorRef$current30 === void 0 ? void 0 : _tlEditorRef$current30.selectNone();
        },
        'x': () => {
          handleCut(true);
        },
        'c': () => {
          handleCopy();
        },
        'v': () => {
          if (!isPasting) {
            handlePaste();
          }
        },
        'z': debouncedUndo
      };
      if (ctrlKeyMap[event.key]) {
        event.preventDefault();
        event.stopPropagation();
        ctrlKeyMap[event.key]();
        return;
      }
    }
    if (simpleKeyMap[event.key]) {
      event.preventDefault();
      event.stopPropagation();
      simpleKeyMap[event.key]();
      return;
    }
    const moveDistance = 10;
    const selectedShapes = (_tlEditorRef$current31 = tlEditorRef.current) === null || _tlEditorRef$current31 === void 0 ? void 0 : _tlEditorRef$current31.getSelectedShapes().map(shape => shape.id);
    const arrowKeyMap = {
      'ArrowUp': {
        x: 0,
        y: -moveDistance
      },
      'ArrowDown': {
        x: 0,
        y: moveDistance
      },
      'ArrowLeft': {
        x: -moveDistance,
        y: 0
      },
      'ArrowRight': {
        x: moveDistance,
        y: 0
      }
    };
    if (arrowKeyMap[event.key]) {
      var _tlEditorRef$current32;
      event.preventDefault();
      event.stopPropagation();
      (_tlEditorRef$current32 = tlEditorRef.current) === null || _tlEditorRef$current32 === void 0 ? void 0 : _tlEditorRef$current32.nudgeShapes(selectedShapes, arrowKeyMap[event.key], {
        squashing: true
      });
    }
  }, [tlEditorRef, isPresenterRef, hasWBAccessRef, previousTool, handleCut, handleCopy, handlePaste]);
  const handleTldrawMount = editor => {
    var _editor$user;
    setTlEditor(editor);
    setTldrawAPI(editor);
    editor === null || editor === void 0 ? void 0 : (_editor$user = editor.user) === null || _editor$user === void 0 ? void 0 : _editor$user.updateUserPreferences({
      locale: language
    });
    const debouncePersistShape = debounce({
      delay: 0
    }, persistShapeWrapper);
    const colorStyles = ["black", "blue", "green", "grey", "light-blue", "light-green", "light-red", "light-violet", "orange", "red", "violet", "yellow"];
    const dashStyles = ["dashed", "dotted", "draw", "solid"];
    const fillStyles = ["none", "pattern", "semi", "solid"];
    const fontStyles = ["draw", "mono", "sans", "serif"];
    const sizeStyles = ["l", "m", "s", "xl"];
    if (colorStyles.includes(colorStyle)) {
      editor.setStyleForNextShapes(DefaultColorStyle, colorStyle);
    }
    if (dashStyles.includes(dashStyle)) {
      editor.setStyleForNextShapes(DefaultDashStyle, dashStyle);
    }
    if (fillStyles.includes(fillStyle)) {
      editor.setStyleForNextShapes(DefaultFillStyle, fillStyle);
    }
    if (fontStyles.includes(fontStyle)) {
      editor.setStyleForNextShapes(DefaultFontStyle, fontStyle);
    }
    if (sizeStyles.includes(sizeStyle)) {
      editor.setStyleForNextShapes(DefaultSizeStyle, sizeStyle);
    }
    editor.store.listen(entry => {
      const {
        changes
      } = entry;
      const {
        added,
        updated,
        removed
      } = changes;
      const addedCount = Object.keys(added).length;
      const shapeNumberExceeded = Object.keys(prevShapesRef.current).length + addedCount > maxNumberOfAnnotations;
      const invalidShapeType = Object.keys(added).find(id => !isValidShapeType(added[id]));
      if (shapeNumberExceeded || invalidShapeType) {
        // notify and undo last command without persisting to not generate the onUndo/onRedo callback
        if (shapeNumberExceeded) {
          notifyShapeNumberExceeded(intl, maxNumberOfAnnotations);
        } else {
          notifyNotAllowedChange(intl);
        }
        editor.history.undo({
          persist: false
        });
      } else {
        Object.values(added).forEach(record => {
          const updatedRecord = _objectSpread(_objectSpread({}, record), {}, {
            meta: _objectSpread(_objectSpread({}, record.meta), {}, {
              createdBy: currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId
            })
          });
          persistShapeWrapper(updatedRecord, whiteboardIdRef.current, isModeratorRef.current);
        });
      }
      Object.values(updated).forEach(_ref => {
        var _prevShapesRef$curren, _prevShapesRef$curren2;
        let [_, record] = _ref;
        const createdBy = ((_prevShapesRef$curren = prevShapesRef.current[record === null || record === void 0 ? void 0 : record.id]) === null || _prevShapesRef$curren === void 0 ? void 0 : (_prevShapesRef$curren2 = _prevShapesRef$curren.meta) === null || _prevShapesRef$curren2 === void 0 ? void 0 : _prevShapesRef$curren2.createdBy) || (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId);
        const updatedRecord = _objectSpread(_objectSpread({}, record), {}, {
          meta: {
            createdBy,
            updatedBy: currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId
          }
        });
        persistShapeWrapper(updatedRecord, whiteboardIdRef.current, isModeratorRef.current);
      });
      Object.values(removed).forEach(record => {
        removeShapes([record === null || record === void 0 ? void 0 : record.id]);
      });
    }, {
      source: "user",
      scope: "document"
    });
    editor.store.listen(entry => {
      const {
        changes,
        source
      } = entry;
      const {
        updated
      } = changes;
      const {
        "pointer:pointer": pointers
      } = updated;
      if ((isPresenterRef.current || hasWBAccessRef.current) && pointers) {
        const [prevPointer, nextPointer] = pointers;
        updateCursorPosition(nextPointer === null || nextPointer === void 0 ? void 0 : nextPointer.x, nextPointer === null || nextPointer === void 0 ? void 0 : nextPointer.y);
      }
      const camKey = "camera:page:".concat(curPageIdRef.current);
      const {
        [camKey]: cameras
      } = updated;
      if (cameras) {
        const [prevCam, nextCam] = cameras;
        const panned = prevCam.x !== nextCam.x || prevCam.y !== nextCam.y;
        if (panned && isPresenterRef.current) {
          var _editor$getViewportPa, _currentPresentationP, _editor$getViewportPa2, _currentPresentationP2;
          let viewedRegionW = SlideCalcUtil.calcViewedRegionWidth(editor === null || editor === void 0 ? void 0 : (_editor$getViewportPa = editor.getViewportPageBounds()) === null || _editor$getViewportPa === void 0 ? void 0 : _editor$getViewportPa.w, (_currentPresentationP = currentPresentationPageRef.current) === null || _currentPresentationP === void 0 ? void 0 : _currentPresentationP.scaledWidth);
          let viewedRegionH = SlideCalcUtil.calcViewedRegionHeight(editor === null || editor === void 0 ? void 0 : (_editor$getViewportPa2 = editor.getViewportPageBounds()) === null || _editor$getViewportPa2 === void 0 ? void 0 : _editor$getViewportPa2.h, (_currentPresentationP2 = currentPresentationPageRef.current) === null || _currentPresentationP2 === void 0 ? void 0 : _currentPresentationP2.scaledHeight);
          zoomSlide(viewedRegionW, viewedRegionH, nextCam.x, nextCam.y);
        }
      }
    }, {
      source: "user"
    });
    if (editor && curPageIdRef.current) {
      const pages = [{
        meta: {},
        id: "page:".concat(curPageIdRef.current),
        name: "Slide ".concat(curPageIdRef.current),
        index: "a1",
        typeName: "page"
      }];
      editor.store.mergeRemoteChanges(() => {
        editor.batch(() => {
          editor.store.put(pages);
          editor.store.put(assets);
          editor.setCurrentPage("page:".concat(curPageIdRef.current));
          editor.store.put(bgShape);
          editor.history.clear();
        });
      });
      const remoteShapes = shapes;
      const localShapes = editor.store.allRecords();
      const filteredShapes = localShapes.filter(item => item.typeName === "shape") || [];
      const localShapesObj = {};
      filteredShapes.forEach(shape => {
        localShapesObj[shape.id] = shape;
      });
      const shapesToAdd = [];
      for (let id in remoteShapes) {
        if (!localShapesObj[id] || JSON.stringify(remoteShapes[id]) !== JSON.stringify(localShapesObj[id])) {
          shapesToAdd.push(remoteShapes[id]);
        }
      }
      editor.store.mergeRemoteChanges(() => {
        if (shapesToAdd && shapesToAdd.length) {
          shapesToAdd.forEach(shape => {
            delete shape.isModerator;
            delete shape.questionType;
          });
          editor.store.put(shapesToAdd);
        }
      });
      editor.store.onBeforeChange = (prev, next, source) => {
        var _next$id, _currentPresentationP3;
        if ((next === null || next === void 0 ? void 0 : next.typeName) === "instance_page_state") {
          if (isPresenterRef.current || isModeratorRef.current) return next;

          // Filter selectedShapeIds based on shape owner
          if (next.selectedShapeIds.length > 0 && !isEqual(prev.selectedShapeIds, next.selectedShapeIds)) {
            next.selectedShapeIds = next.selectedShapeIds.filter(shapeId => {
              var _prevShapesRef$curren3, _prevShapesRef$curren4;
              const shapeOwner = (_prevShapesRef$curren3 = prevShapesRef.current[shapeId]) === null || _prevShapesRef$curren3 === void 0 ? void 0 : (_prevShapesRef$curren4 = _prevShapesRef$curren3.meta) === null || _prevShapesRef$curren4 === void 0 ? void 0 : _prevShapesRef$curren4.createdBy;
              return !shapeOwner || shapeOwner === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId);
            });
          }
          if (!isEqual(prev.hoveredShapeId, next.hoveredShapeId)) {
            var _prevShapesRef$curren5, _prevShapesRef$curren6;
            const hoveredShapeOwner = (_prevShapesRef$curren5 = prevShapesRef.current[next.hoveredShapeId]) === null || _prevShapesRef$curren5 === void 0 ? void 0 : (_prevShapesRef$curren6 = _prevShapesRef$curren5.meta) === null || _prevShapesRef$curren6 === void 0 ? void 0 : _prevShapesRef$curren6.createdBy;
            if (hoveredShapeOwner !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId)) {
              next.hoveredShapeId = null;
            }
          }
          return next;
        }

        // Get viewport dimensions and bounds
        const viewportPageBounds = editor.getViewportPageBounds();
        const {
          w: viewportWidth,
          h: viewportHeight
        } = viewportPageBounds;
        const presentationWidth = (currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledWidth) || 0;
        const presentationHeight = (currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledHeight) || 0;

        // Adjust camera position to ensure it stays within bounds
        const panned = (next === null || next === void 0 ? void 0 : (_next$id = next.id) === null || _next$id === void 0 ? void 0 : _next$id.includes("camera")) && (prev.x !== next.x || prev.y !== next.y);
        if (panned && !((_currentPresentationP3 = currentPresentationPageRef.current) !== null && _currentPresentationP3 !== void 0 && _currentPresentationP3.infiniteWhiteboard)) {
          // Horizontal bounds check
          if (next.x > 0) {
            next.x = 0;
          } else if (next.x < -(presentationWidth - viewportWidth)) {
            next.x = -(presentationWidth - viewportWidth);
          }

          // Vertical bounds check
          if (next.y > 0) {
            next.y = 0;
          } else if (next.y < -(presentationHeight - viewportHeight)) {
            next.y = -(presentationHeight - viewportHeight);
          }
        }
        return next;
      };
      if (!isPresenterRef.current && !hasWBAccessRef.current) {
        editor.setCurrentTool('noop');
      }
    }
    isMountedRef.current = true;
  };
  const {
    shapesToAdd,
    shapesToUpdate,
    shapesToRemove
  } = React.useMemo(() => {
    var _tlEditorRef$current33;
    const localShapes = (_tlEditorRef$current33 = tlEditorRef.current) === null || _tlEditorRef$current33 === void 0 ? void 0 : _tlEditorRef$current33.getCurrentPageShapes();
    const filteredShapes = (localShapes === null || localShapes === void 0 ? void 0 : localShapes.filter(item => (item === null || item === void 0 ? void 0 : item.index) !== "a0")) || [];
    const localLookup = new Map(filteredShapes.map(shape => [shape.id, shape]));
    const remoteShapeIds = Object.keys(prevShapesRef.current);
    const toAdd = [];
    const toUpdate = [];
    const toRemove = [];
    Object.values(prevShapesRef.current).forEach(remoteShape => {
      if (!remoteShape.id) return;
      const localShape = localLookup.get(remoteShape.id);
      const prevShape = prevShapesRef.current[remoteShape.id];
      if (!localShape) {
        delete remoteShape.isModerator;
        delete remoteShape.questionType;
        toAdd.push(remoteShape);
      } else {
        const remoteShapeMeta = remoteShape === null || remoteShape === void 0 ? void 0 : remoteShape.meta;
        const isCreatedByCurrentUser = (remoteShapeMeta === null || remoteShapeMeta === void 0 ? void 0 : remoteShapeMeta.createdBy) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId);
        const isUpdatedByCurrentUser = (remoteShapeMeta === null || remoteShapeMeta === void 0 ? void 0 : remoteShapeMeta.updatedBy) === (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId);

        // System-level shapes (background image) lack createdBy and updatedBy metadata, which can cause false positives.
        // These cases expect an early return and shouldn't be updated.
        if (remoteShapeMeta && (isCreatedByCurrentUser && isUpdatedByCurrentUser || !isCreatedByCurrentUser && isUpdatedByCurrentUser)) {
          return;
        }
        const diff = remoteShape;
        delete diff.isModerator;
        delete diff.questionType;
        toUpdate.push(diff);
      }
    });
    filteredShapes.forEach(localShape => {
      if (!remoteShapeIds.includes(localShape.id)) {
        toRemove.push(localShape.id);
      }
    });
    return {
      shapesToAdd: toAdd,
      shapesToUpdate: toUpdate,
      shapesToRemove: toRemove
    };
  }, [prevShapesRef.current, curPageId]);
  const setCamera = function (zoom) {
    let x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    if (tlEditorRef.current) {
      tlEditorRef.current.setCamera({
        x,
        y,
        z: zoom
      }, false);
    }
  };
  const calculateZoomValue = function (localWidth, localHeight) {
    let isViewer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let calcedZoom;
    calcedZoom = fitToWidth ? presentationAreaWidth / localWidth : Math.min(presentationAreaWidth / localWidth, presentationAreaHeight / localHeight);
    return calcedZoom === 0 || calcedZoom === Infinity ? HUNDRED_PERCENT : calcedZoom;
  };
  const calculateZoomWithGapValue = function (localWidth, localHeight) {
    let isViewer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let widthAdjustment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    let presentationWidth = presentationAreaWidth - widthAdjustment;
    let calcedZoom = baseZoom = fitToWidth ? presentationWidth / localWidth : Math.min(presentationWidth / localWidth, presentationAreaHeight / localHeight);
    return calcedZoom === 0 || calcedZoom === Infinity ? HUNDRED_PERCENT : calcedZoom;
  };
  useMouseEvents({
    whiteboardRef,
    tlEditorRef,
    isWheelZoomRef,
    initialZoomRef
  }, {
    isPresenter,
    hasWBAccess: hasWBAccessRef.current,
    whiteboardToolbarAutoHide,
    animations,
    publishCursorUpdate,
    whiteboardId: whiteboardIdRef.current,
    cursorPosition,
    updateCursorPosition,
    toggleToolsAnimations,
    currentPresentationPage,
    zoomChanger,
    setIsMouseDown,
    setIsWheelZoom,
    setWheelZoomTimeout
  });
  React.useEffect(() => {
    tlEditorRef.current = tlEditor;
  }, [tlEditor]);
  React.useEffect(() => {
    var _whiteboardRef$curren2, _whiteboardRef$curren3;
    let undoRedoIntervalId = null;
    const undo = () => {
      var _tlEditorRef$current34, _tlEditorRef$current35;
      tlEditorRef === null || tlEditorRef === void 0 ? void 0 : (_tlEditorRef$current34 = tlEditorRef.current) === null || _tlEditorRef$current34 === void 0 ? void 0 : (_tlEditorRef$current35 = _tlEditorRef$current34.history) === null || _tlEditorRef$current35 === void 0 ? void 0 : _tlEditorRef$current35.undo();
    };
    const redo = () => {
      var _tlEditorRef$current36, _tlEditorRef$current37;
      tlEditorRef === null || tlEditorRef === void 0 ? void 0 : (_tlEditorRef$current36 = tlEditorRef.current) === null || _tlEditorRef$current36 === void 0 ? void 0 : (_tlEditorRef$current37 = _tlEditorRef$current36.history) === null || _tlEditorRef$current37 === void 0 ? void 0 : _tlEditorRef$current37.redo();
    };
    const handleArrowPress = event => {
      var _tlEditorRef$current$;
      const currPageNum = parseInt(curPageIdRef.current);
      const shapeSelected = ((_tlEditorRef$current$ = tlEditorRef.current.getSelectedShapes()) === null || _tlEditorRef$current$ === void 0 ? void 0 : _tlEditorRef$current$.length) > 0;
      const changeSlide = direction => {
        if (!currentPresentationPage) return;
        let newSlideNum = currPageNum + direction;
        const outOfBounds = direction > 0 ? newSlideNum > (currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.totalPages) : newSlideNum < 1;
        if (outOfBounds) return;
        skipToSlide(newSlideNum);
        zoomChanger(HUNDRED_PERCENT);
        zoomSlide(HUNDRED_PERCENT, HUNDRED_PERCENT, 0, 0);
      };
      if (!shapeSelected) {
        if (event.keyCode === KEY_CODES.ARROW_RIGHT) {
          changeSlide(1); // Move to the next slide
        } else if (event.keyCode === KEY_CODES.ARROW_LEFT) {
          changeSlide(-1); // Move to the previous slide
        }
      }
    };

    const handleUndoRedoOnCondition = (condition, action) => {
      if (condition) {
        action();
      }
    };
    const handleKeyDown = event => {
      const isUndo = (event.ctrlKey || event.metaKey) && event.key === "z" && !event.shiftKey;
      const isRedo = (event.ctrlKey || event.metaKey) && event.shiftKey && event.key === "Z";
      if ((isUndo || isRedo) && (isPresenterRef.current || hasWBAccessRef.current)) {
        event.preventDefault();
        event.stopPropagation();
        if (!undoRedoIntervalId) {
          undoRedoIntervalId = setInterval(() => {
            handleUndoRedoOnCondition(isUndo, undo);
            handleUndoRedoOnCondition(isRedo, redo);
          }, 300);
        }
      }
      if ((event.keyCode === KEY_CODES.ARROW_RIGHT || event.keyCode === KEY_CODES.ARROW_LEFT) && isPresenterRef.current) {
        handleArrowPress(event);
      }
    };
    const handleKeyUp = event => {
      if ((event.key === "z" || event.key === "Z") && undoRedoIntervalId) {
        clearInterval(undoRedoIntervalId);
        undoRedoIntervalId = null;
      }
      if (event.key === ' ') {
        if (previousTool.current) {
          var _tlEditorRef$current38;
          (_tlEditorRef$current38 = tlEditorRef.current) === null || _tlEditorRef$current38 === void 0 ? void 0 : _tlEditorRef$current38.setCurrentTool(previousTool.current);
          previousTool.current = null;
        }
      }
    };
    (_whiteboardRef$curren2 = whiteboardRef.current) === null || _whiteboardRef$curren2 === void 0 ? void 0 : _whiteboardRef$curren2.addEventListener("keydown", handleKeyDown, {
      capture: true
    });
    (_whiteboardRef$curren3 = whiteboardRef.current) === null || _whiteboardRef$curren3 === void 0 ? void 0 : _whiteboardRef$curren3.addEventListener("keyup", handleKeyUp, {
      capture: true
    });
    return () => {
      var _whiteboardRef$curren4, _whiteboardRef$curren5;
      (_whiteboardRef$curren4 = whiteboardRef.current) === null || _whiteboardRef$curren4 === void 0 ? void 0 : _whiteboardRef$curren4.removeEventListener("keydown", handleKeyDown);
      (_whiteboardRef$curren5 = whiteboardRef.current) === null || _whiteboardRef$curren5 === void 0 ? void 0 : _whiteboardRef$curren5.removeEventListener("keyup", handleKeyUp);
      if (undoRedoIntervalId) {
        clearInterval(undoRedoIntervalId);
      }
    };
  }, [whiteboardRef.current]);
  React.useEffect(() => {
    zoomValueRef.current = zoomValue;
    let timeoutId = null;
    if (tlEditor && curPageIdRef.current && currentPresentationPage && isPresenter && isWheelZoomRef.current === false) {
      const zoomLevelForReset = initialZoomRef.current || calculateZoomValue(currentPresentationPage.scaledWidth, currentPresentationPage.scaledHeight);
      const zoomCamera = zoomValue === HUNDRED_PERCENT ? zoomLevelForReset : zoomLevelForReset * zoomValue / HUNDRED_PERCENT;
      const camera = tlEditorRef.current.getCamera();
      const nextCamera = {
        x: zoomValue === HUNDRED_PERCENT ? 0 : camera.x + ((camera.x + tlEditorRef.current.getViewportPageBounds().w / 2) / zoomCamera - camera.x),
        y: zoomValue === HUNDRED_PERCENT ? 0 : camera.y + ((camera.y + tlEditorRef.current.getViewportPageBounds().h / 2) / zoomCamera - camera.y),
        z: zoomCamera
      };
      if (zoomValue !== prevZoomValueRef.current || zoomValue === HUNDRED_PERCENT) {
        tlEditor.setCamera(nextCamera, false);
        timeoutId = setTimeout(() => {
          if (zoomValue === HUNDRED_PERCENT) {
            zoomChanger(HUNDRED_PERCENT);
            zoomSlide(HUNDRED_PERCENT, HUNDRED_PERCENT, 0, 0);
          } else {
            // Recalculate viewed region width and height for zoomSlide call
            let viewedRegionW = SlideCalcUtil.calcViewedRegionWidth(tlEditorRef.current.getViewportPageBounds().w, currentPresentationPage.scaledWidth);
            let viewedRegionH = SlideCalcUtil.calcViewedRegionHeight(tlEditorRef.current.getViewportPageBounds().h, currentPresentationPage.scaledHeight);
            zoomSlide(viewedRegionW, viewedRegionH, nextCamera.x, nextCamera.y);
          }
        }, 500);
      }
    }

    // Update the previous zoom value ref with the current zoom value
    prevZoomValueRef.current = zoomValue;
    return () => clearTimeout(timeoutId);
  }, [zoomValue, tlEditor, curPageId, isWheelZoomRef.current]);
  React.useEffect(() => {
    // A slight delay to ensure the canvas has rendered
    const timeoutId = setTimeout(() => {
      if (currentPresentationPage.scaledWidth > 0 && currentPresentationPage.scaledHeight > 0) {
        // Subtract the toolbar height from the presentation area height for the presenter
        const adjustedPresentationAreaHeight = isPresenter ? presentationAreaHeight - 40 : presentationAreaHeight;
        const slideAspectRatio = currentPresentationPage.scaledWidth / currentPresentationPage.scaledHeight;
        const presentationAreaAspectRatio = presentationAreaWidth / adjustedPresentationAreaHeight;
        let initialZoom;
        if (slideAspectRatio > presentationAreaAspectRatio) {
          initialZoom = presentationAreaWidth / currentPresentationPage.scaledWidth;
        } else {
          initialZoom = adjustedPresentationAreaHeight / currentPresentationPage.scaledHeight;
        }
        const tldrawZoom = initialZoom;
        initialZoomRef.current = initialZoom;
        prevZoomValueRef.current = zoomValue;
      }
    }, CAMERA_UPDATE_DELAY);
    return () => clearTimeout(timeoutId);
  }, [currentPresentationPage.scaledHeight, currentPresentationPage.scaledWidth, presentationAreaWidth, presentationAreaHeight, isPresenter, presentationId]);
  React.useEffect(() => {
    const handleResize = () => {
      if (!initialViewBoxWidthRef.current) {
        var _currentPresentationP4;
        initialViewBoxWidthRef.current = (_currentPresentationP4 = currentPresentationPageRef.current) === null || _currentPresentationP4 === void 0 ? void 0 : _currentPresentationP4.scaledViewBoxWidth;
      }
      if (!initialViewBoxHeightRef.current) {
        var _currentPresentationP5;
        initialViewBoxHeightRef.current = (_currentPresentationP5 = currentPresentationPageRef.current) === null || _currentPresentationP5 === void 0 ? void 0 : _currentPresentationP5.scaledViewBoxHeight;
      }
      // Calculate the absolute difference
      const heightDifference = Math.abs(presentationAreaHeight - lastKnownHeight.current);
      const widthDifference = Math.abs(presentationAreaWidth - lastKnownWidth.current);

      // Check if the difference is greater than the threshold
      if (heightDifference > THRESHOLD || widthDifference > THRESHOLD) {
        // Update the last known dimensions
        lastKnownHeight.current = presentationAreaHeight;
        lastKnownWidth.current = presentationAreaWidth;
        if (presentationAreaHeight > 0 && presentationAreaWidth > 0 && tlEditor && currentPresentationPage && currentPresentationPage.scaledWidth > 0 && currentPresentationPage.scaledHeight > 0) {
          const currentZoom = zoomValueRef.current || HUNDRED_PERCENT;
          const baseZoom = calculateZoomValue(currentPresentationPage.scaledWidth, currentPresentationPage.scaledHeight);
          let adjustedZoom = baseZoom * (currentZoom / HUNDRED_PERCENT);
          if (isPresenter) {
            const container = document.querySelector('[data-test="presentationContainer"]');
            const innerWrapper = document.getElementById("presentationInnerWrapper");
            const containerWidth = container ? container.offsetWidth : 0;
            const innerWrapperWidth = innerWrapper ? innerWrapper.offsetWidth : 0;
            const widthGap = Math.max(containerWidth - innerWrapperWidth, 0);
            const camera = tlEditorRef.current.getCamera();
            let adjustedZoom;
            if (widthGap > 0) {
              adjustedZoom = calculateZoomWithGapValue(currentPresentationPage.scaledWidth, currentPresentationPage.scaledHeight, false, widthGap);
              adjustedZoom *= currentZoom / HUNDRED_PERCENT;
            } else {
              adjustedZoom = baseZoom * (currentZoom / HUNDRED_PERCENT);
            }
            const zoomToApply = widthGap > 0 ? adjustedZoom : baseZoom * (currentZoom / HUNDRED_PERCENT);
            const formattedPageId = Number(curPageIdRef === null || curPageIdRef === void 0 ? void 0 : curPageIdRef.current);
            const cameras = [createCamera(formattedPageId - 1, zoomToApply), createCamera(formattedPageId, zoomToApply), createCamera(formattedPageId + 1, zoomToApply)];
            tlEditorRef.current.store.put(cameras);
            setCamera(zoomToApply, camera.x, camera.y);
          } else {
            // Viewer logic
            const effectiveZoom = calculateEffectiveZoom(initialViewBoxWidthRef.current, currentPresentationPage.scaledViewBoxWidth, initialViewBoxHeightRef.current, currentPresentationPage.scaledViewBoxHeight);
            adjustedZoom = baseZoom * (effectiveZoom / HUNDRED_PERCENT);
            const camera = tlEditorRef.current.getCamera();
            const formattedPageId = Number(curPageIdRef === null || curPageIdRef === void 0 ? void 0 : curPageIdRef.current);
            const cameras = [createCamera(formattedPageId - 1, adjustedZoom), createCamera(formattedPageId, adjustedZoom), createCamera(formattedPageId + 1, adjustedZoom)];
            tlEditorRef.current.store.put(cameras);
            setCamera(adjustedZoom, camera.x, camera.y);
          }
        }
      }
    };
    const timeoutId = setTimeout(handleResize, CAMERA_UPDATE_DELAY);
    return () => clearTimeout(timeoutId);
  }, [presentationAreaHeight, presentationAreaWidth, curPageId, presentationId]);
  React.useEffect(() => {
    if (!fitToWidth && isPresenter) {
      zoomChanger(HUNDRED_PERCENT);
      zoomSlide(HUNDRED_PERCENT, HUNDRED_PERCENT, 0, 0);
    }
  }, [fitToWidth, isPresenter]);
  React.useEffect(() => {
    if (!isPresenter && tlEditorRef.current && initialViewBoxWidthRef.current && initialViewBoxHeightRef.current && currentPresentationPage) {
      const effectiveZoom = calculateEffectiveZoom(initialViewBoxWidthRef.current, currentPresentationPage.scaledViewBoxWidth, initialViewBoxHeightRef.current, currentPresentationPage.scaledViewBoxHeight);
      let adjustedZoom = calculateZoomValue(currentPresentationPage.scaledWidth, currentPresentationPage.scaledHeight) * (effectiveZoom / HUNDRED_PERCENT);
      const adjustedXPos = currentPresentationPage.xOffset;
      const adjustedYPos = currentPresentationPage.yOffset;
      setCamera(adjustedZoom, adjustedXPos, adjustedYPos);
    }
  }, [currentPresentationPage]);
  React.useEffect(() => {
    if (shapesToAdd.length || shapesToUpdate.length || shapesToRemove.length) {
      const tlStoreUpdateTimeoutId = setTimeout(() => {
        var _tlEditor$store;
        tlEditor === null || tlEditor === void 0 ? void 0 : (_tlEditor$store = tlEditor.store) === null || _tlEditor$store === void 0 ? void 0 : _tlEditor$store.mergeRemoteChanges(() => {
          if (shapesToRemove.length > 0) {
            var _tlEditor$store2;
            tlEditor === null || tlEditor === void 0 ? void 0 : (_tlEditor$store2 = tlEditor.store) === null || _tlEditor$store2 === void 0 ? void 0 : _tlEditor$store2.remove(shapesToRemove);
          }
          if (shapesToAdd.length) {
            var _tlEditor$store3;
            tlEditor === null || tlEditor === void 0 ? void 0 : (_tlEditor$store3 = tlEditor.store) === null || _tlEditor$store3 === void 0 ? void 0 : _tlEditor$store3.put(shapesToAdd);
          }
          if (shapesToUpdate.length) {
            const updatedShapes = shapesToUpdate.map(shape => {
              const currentShape = tlEditor === null || tlEditor === void 0 ? void 0 : tlEditor.getShape(shape.id);
              if (currentShape) {
                return _objectSpread(_objectSpread({}, currentShape), shape);
              }
              return null;
            }).filter(Boolean);
            if (updatedShapes.length) {
              var _tlEditor$store4;
              tlEditor === null || tlEditor === void 0 ? void 0 : (_tlEditor$store4 = tlEditor.store) === null || _tlEditor$store4 === void 0 ? void 0 : _tlEditor$store4.put(updatedShapes);
            }
          }
        });
      }, 300);
      return () => clearTimeout(tlStoreUpdateTimeoutId);
    }
  }, [shapesToAdd, shapesToUpdate, shapesToRemove]);

  // Updating presences in tldraw store based on changes in cursors
  React.useEffect(() => {
    if (tlEditorRef.current) {
      const useElement = document.querySelector(".tl-cursor use");
      if (useElement && !isMultiUserActive && !isPresenter) {
        useElement.setAttribute("href", "#redPointer");
      } else if (useElement) {
        useElement.setAttribute("href", "#cursor");
      }
      const idsToRemove = [];

      // Get all presence records from the store
      const allRecords = tlEditorRef.current.store.allRecords();
      const presenceRecords = allRecords.filter(record => record.id.startsWith('instance_presence:'));

      // Check if any presence records correspond to users not in whiteboardWriters
      presenceRecords.forEach(record => {
        const userId = record.userId.split('instance_presence:')[1];
        const hasAccessToWhiteboard = whiteboardWriters.some(writer => writer.userId === userId);
        if (!hasAccessToWhiteboard) {
          idsToRemove.push(record.id);
        }
      });
      const updatedPresences = otherCursors.map(_ref2 => {
        let {
          userId,
          user,
          xPercent,
          yPercent
        } = _ref2;
        const {
          presenter,
          name
        } = user;
        const id = InstancePresenceRecordType.createId(userId);
        const active = xPercent !== -1 && yPercent !== -1;
        // if cursor is not active remove it from tldraw store
        if (!active || hideViewersCursor && user.role === "VIEWER" && !(currentUser !== null && currentUser !== void 0 && currentUser.presenter) || !presenter && !isMultiUserActive) {
          idsToRemove.push(id);
          return null;
        }
        const cursor = {
          x: xPercent,
          y: yPercent,
          type: "default",
          rotation: 0
        };
        const color = presenter ? "#FF0000" : "#70DB70";
        const c = _objectSpread(_objectSpread({}, InstancePresenceRecordType.create({
          id,
          currentPageId: "page:".concat(curPageIdRef.current),
          userId,
          userName: name,
          cursor,
          color
        })), {}, {
          lastActivityTimestamp: Date.now()
        });
        return c;
      }).filter(cursor => cursor && cursor.userId !== (currentUser === null || currentUser === void 0 ? void 0 : currentUser.userId));
      if (idsToRemove.length) {
        var _tlEditorRef$current39;
        (_tlEditorRef$current39 = tlEditorRef.current) === null || _tlEditorRef$current39 === void 0 ? void 0 : _tlEditorRef$current39.store.remove(idsToRemove);
      }

      // If there are any updated presences, put them all in the store
      if (updatedPresences.length) {
        var _tlEditorRef$current40;
        (_tlEditorRef$current40 = tlEditorRef.current) === null || _tlEditorRef$current40 === void 0 ? void 0 : _tlEditorRef$current40.store.put(updatedPresences);
      }
    }
  }, [otherCursors, whiteboardWriters]);

  // set current tldraw page when presentation id updates
  React.useEffect(() => {
    if (tlEditorRef.current && curPageIdRef.current !== "0") {
      const pages = [{
        meta: {},
        id: "page:".concat(curPageIdRef.current),
        name: "Slide ".concat(curPageIdRef.current),
        index: "a1",
        typeName: "page"
      }];
      tlEditorRef.current.store.mergeRemoteChanges(() => {
        tlEditorRef.current.batch(() => {
          var _tlEditorRef$current$2;
          tlEditorRef.current.store.put(pages);
          const tlZ = (_tlEditorRef$current$2 = tlEditorRef.current.getCamera()) === null || _tlEditorRef$current$2 === void 0 ? void 0 : _tlEditorRef$current$2.z;
          const formattedPageId = Number(curPageIdRef === null || curPageIdRef === void 0 ? void 0 : curPageIdRef.current);
          const cameras = [createCamera(formattedPageId - 1, tlZ), createCamera(formattedPageId, tlZ), createCamera(formattedPageId + 1, tlZ)];
          tlEditorRef.current.store.put(cameras);
          tlEditorRef.current.setCurrentPage("page:".concat(curPageIdRef.current));
          tlEditorRef.current.store.put(assets);
          tlEditorRef.current.store.put(bgShape);
          tlEditorRef.current.history.clear();
        });
      });
      whiteboardToolbarAutoHide && toggleToolsAnimations("fade-in", "fade-out", "0s", hasWBAccessRef.current || isPresenter);
      slideChanged.current = false;
      slideNext.current = null;
    }
  }, [curPageId]);
  const adjustCameraOnMount = function () {
    let includeViewerLogic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    if (presenterChanged) {
      localStorage.removeItem('initialViewBoxWidth');
      localStorage.removeItem('initialViewBoxHeight');
    }
    const storedWidth = localStorage.getItem('initialViewBoxWidth');
    const storedHeight = localStorage.getItem('initialViewBoxHeight');
    if (storedWidth && storedHeight) {
      initialViewBoxWidthRef.current = parseFloat(storedWidth);
      initialViewBoxHeightRef.current = parseFloat(storedHeight);
    } else {
      const currentZoomLevel = currentPresentationPageRef.current.scaledWidth / currentPresentationPageRef.current.scaledViewBoxWidth;
      const calculatedWidth = currentZoomLevel !== 1 ? currentPresentationPageRef.current.scaledWidth / currentZoomLevel : currentPresentationPageRef.current.scaledWidth;
      const calculatedHeight = currentZoomLevel !== 1 ? currentPresentationPageRef.current.scaledHeight / currentZoomLevel : currentPresentationPageRef.current.scaledHeight;
      initialViewBoxWidthRef.current = calculatedWidth;
      initialViewBoxHeightRef.current = calculatedHeight;
      localStorage.setItem('initialViewBoxWidth', calculatedWidth.toString());
      localStorage.setItem('initialViewBoxHeight', calculatedHeight.toString());
    }
    setTimeout(() => {
      if (presentationAreaHeight > 0 && presentationAreaWidth > 0 && currentPresentationPageRef.current && currentPresentationPageRef.current.scaledWidth > 0 && currentPresentationPageRef.current.scaledHeight > 0) {
        const adjustedPresentationAreaHeight = isPresenter ? presentationAreaHeight - 40 : presentationAreaHeight;
        let effectiveZoom = calculateEffectiveZoom(initialViewBoxWidthRef.current, currentPresentationPageRef.current.scaledViewBoxWidth, initialViewBoxHeightRef.current, currentPresentationPageRef.current.scaledViewBoxHeight);
        let baseZoom;
        if (isPresenter) {
          baseZoom = fitToWidth ? presentationAreaWidth / currentPresentationPageRef.current.scaledWidth : Math.min(presentationAreaWidth / currentPresentationPageRef.current.scaledWidth, adjustedPresentationAreaHeight / currentPresentationPageRef.current.scaledHeight);
          const zoomAdjustmentFactor = currentPresentationPageRef.current.scaledWidth / currentPresentationPageRef.current.scaledViewBoxWidth;
          baseZoom *= zoomAdjustmentFactor;
          const adjustedXPos = currentPresentationPageRef.current.xOffset;
          const adjustedYPos = currentPresentationPageRef.current.yOffset;
          setCamera(baseZoom, adjustedXPos, adjustedYPos);
        } else if (includeViewerLogic) {
          baseZoom = Math.min(presentationAreaWidth / currentPresentationPageRef.current.scaledWidth, adjustedPresentationAreaHeight / currentPresentationPageRef.current.scaledHeight);
          const zoomAdjustmentFactor = currentPresentationPageRef.current.scaledWidth / currentPresentationPageRef.current.scaledViewBoxWidth;
          baseZoom *= zoomAdjustmentFactor;
          const presenterXOffset = currentPresentationPageRef.current.xOffset;
          const presenterYOffset = currentPresentationPageRef.current.yOffset;
          const adjustedXPos = isInfiniteWhiteboard ? presenterXOffset : presenterXOffset * effectiveZoom;
          const adjustedYPos = isInfiniteWhiteboard ? presenterYOffset : presenterYOffset * effectiveZoom;
          setCamera(baseZoom, adjustedXPos, adjustedYPos);
        }
      }
    }, CAMERA_UPDATE_DELAY);
  };
  React.useEffect(() => {
    if (isMountedRef.current) {
      adjustCameraOnMount(true);
    }
  }, [isMountedRef.current, presentationId, curPageId, isMultiUserActive, isPresenter, animations, locale, whiteboardToolbarAutoHide, darkTheme, isInfiniteWhiteboard]);
  React.useEffect(() => {
    if (isMountedRef.current) {
      adjustCameraOnMount(false);
    }
  }, [isMountedRef.current, selectedLayout, isInfiniteWhiteboard]);
  React.useEffect(() => {
    setTldrawIsMounting(true);
    return () => {
      isMountedRef.current = false;
      localStorage.removeItem('initialViewBoxWidth');
      localStorage.removeItem('initialViewBoxHeight');
    };
  }, []);
  React.useEffect(() => {
    if (isMounting) {
      setIsMounting(false);
      /// brings presentation toolbar back
      setTldrawIsMounting(false);
    }
  }, [tlEditorRef === null || tlEditorRef === void 0 ? void 0 : (_tlEditorRef$current41 = tlEditorRef.current) === null || _tlEditorRef$current41 === void 0 ? void 0 : _tlEditorRef$current41.camera, presentationAreaWidth, presentationAreaHeight, presentationId]);
  React.useEffect(() => {
    const bbb_multi_user_tools = getFromUserSettings('bbb_multi_user_tools', meetingClientSettingsInitialValues.public.whiteboard.toolbar.multiUserTools);
    const allElements = document.querySelectorAll('[data-testid^="tools."]');
    if (bbb_multi_user_tools.length >= 1 && !isModerator) {
      allElements.forEach(element => {
        const toolName = element.getAttribute('data-testid').split('.')[1];
        if (!bbb_multi_user_tools.includes(toolName)) {
          element.style.display = 'none';
        }
      });
    }
  }), [];
  React.useEffect(() => {
    const bbb_presenter_tools = getFromUserSettings('bbb_presenter_tools', meetingClientSettingsInitialValues.public.whiteboard.toolbar.presenterTools);
    const allElements = document.querySelectorAll('[data-testid^="tools."]');
    if (bbb_presenter_tools.length >= 1 && isPresenter) {
      allElements.forEach(element => {
        const toolName = element.getAttribute('data-testid').split('.')[1];
        if (!bbb_presenter_tools.includes(toolName)) {
          element.style.display = 'none';
        }
      });
    }
  }), [];
  React.useEffect(() => {
    const bbb_multi_user_pen_only = getFromUserSettings('bbb_multi_user_pen_only', false);
    const allElements = document.querySelectorAll('[data-testid^="tools."]');
    if (bbb_multi_user_pen_only && !isModerator && !isPresenter) {
      allElements.forEach(element => {
        const toolName = element.getAttribute('data-testid').split('.')[1];
        if (toolName != 'draw') {
          element.style.display = 'none';
        } else {
          element.style.display = 'flex';
        }
      });
    }
  }), [];
  return /*#__PURE__*/React.createElement("div", {
    ref: whiteboardRef,
    id: "whiteboard-element",
    key: "animations=-".concat(animations, "-").concat(whiteboardToolbarAutoHide, "-").concat(language, "-").concat(presentationId)
  }, /*#__PURE__*/React.createElement(Tldraw, {
    autoFocus: false,
    key: "tldrawv2-".concat(presentationId, "-").concat(animations, "-").concat(isInfiniteWhiteboard),
    forceMobile: true,
    hideUi: hasWBAccessRef.current || isPresenter ? false : true,
    onMount: handleTldrawMount,
    shapeUtils: customShapeUtils,
    tools: customTools
  }), /*#__PURE__*/React.createElement(Styled.TldrawV2GlobalStyle, {
    hasWBAccess: hasWBAccessRef.current,
    isPresenter,
    isRTL,
    isMultiUserActive,
    isToolbarVisible,
    presentationHeight
  }));
});
module.exportDefault(Whiteboard);
Whiteboard.propTypes = {
  isPresenter: PropTypes.bool,
  isIphone: PropTypes.bool.isRequired,
  removeShapes: PropTypes.func.isRequired,
  persistShapeWrapper: PropTypes.func.isRequired,
  notifyNotAllowedChange: PropTypes.func.isRequired,
  shapes: PropTypes.objectOf(PropTypes.shape).isRequired,
  assets: PropTypes.arrayOf(PropTypes.shape).isRequired,
  currentUser: PropTypes.shape({
    userId: PropTypes.string.isRequired
  }),
  whiteboardId: PropTypes.string,
  zoomSlide: PropTypes.func.isRequired,
  curPageId: PropTypes.string.isRequired,
  presentationWidth: PropTypes.number.isRequired,
  presentationHeight: PropTypes.number.isRequired,
  zoomChanger: PropTypes.func.isRequired,
  isRTL: PropTypes.bool.isRequired,
  fitToWidth: PropTypes.bool.isRequired,
  zoomValue: PropTypes.number.isRequired,
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  maxStickyNoteLength: PropTypes.number.isRequired,
  fontFamily: PropTypes.string.isRequired,
  colorStyle: PropTypes.string.isRequired,
  dashStyle: PropTypes.string.isRequired,
  fillStyle: PropTypes.string.isRequired,
  fontStyle: PropTypes.string.isRequired,
  sizeStyle: PropTypes.string.isRequired,
  presentationAreaHeight: PropTypes.number.isRequired,
  presentationAreaWidth: PropTypes.number.isRequired,
  maxNumberOfAnnotations: PropTypes.number.isRequired,
  notifyShapeNumberExceeded: PropTypes.func.isRequired,
  darkTheme: PropTypes.bool.isRequired,
  setTldrawIsMounting: PropTypes.func.isRequired,
  width: PropTypes.number.isRequired,
  height: PropTypes.number.isRequired,
  fullscreenElementId: PropTypes.string.isRequired,
  isFullscreen: PropTypes.bool.isRequired,
  layoutContextDispatch: PropTypes.func.isRequired,
  fullscreenAction: PropTypes.string.isRequired,
  handleToggleFullScreen: PropTypes.func.isRequired,
  presentationId: PropTypes.string
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/container.jsx                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, useEffect, useRef, useState, useMemo, useCallback;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let useMutation, useQuery;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useQuery(v) {
    useQuery = v;
  }
}, 1);
let AssetRecordType;
module.link("@bigbluebutton/tldraw", {
  AssetRecordType(v) {
    AssetRecordType = v;
  }
}, 2);
let throttle;
module.link("radash", {
  throttle(v) {
    throttle = v;
  }
}, 3);
let CURRENT_PRESENTATION_PAGE_SUBSCRIPTION, CURRENT_PAGE_ANNOTATIONS_STREAM, CURRENT_PAGE_ANNOTATIONS_QUERY, CURRENT_PAGE_WRITERS_SUBSCRIPTION;
module.link("./queries", {
  CURRENT_PRESENTATION_PAGE_SUBSCRIPTION(v) {
    CURRENT_PRESENTATION_PAGE_SUBSCRIPTION = v;
  },
  CURRENT_PAGE_ANNOTATIONS_STREAM(v) {
    CURRENT_PAGE_ANNOTATIONS_STREAM = v;
  },
  CURRENT_PAGE_ANNOTATIONS_QUERY(v) {
    CURRENT_PAGE_ANNOTATIONS_QUERY = v;
  },
  CURRENT_PAGE_WRITERS_SUBSCRIPTION(v) {
    CURRENT_PAGE_WRITERS_SUBSCRIPTION = v;
  }
}, 4);
let initDefaultPages, persistShape, notifyNotAllowedChange, notifyShapeNumberExceeded, toggleToolsAnimations, formatAnnotations;
module.link("./service", {
  initDefaultPages(v) {
    initDefaultPages = v;
  },
  persistShape(v) {
    persistShape = v;
  },
  notifyNotAllowedChange(v) {
    notifyNotAllowedChange = v;
  },
  notifyShapeNumberExceeded(v) {
    notifyShapeNumberExceeded = v;
  },
  toggleToolsAnimations(v) {
    toggleToolsAnimations = v;
  },
  formatAnnotations(v) {
    formatAnnotations = v;
  }
}, 5);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 6);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 7);
let layoutSelect, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 8);
let FullscreenService;
module.link("/imports/ui/components/common/fullscreen-button/service", {
  default(v) {
    FullscreenService = v;
  }
}, 9);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 10);
let Whiteboard;
module.link("./component", {
  default(v) {
    Whiteboard = v;
  }
}, 11);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 12);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 13);
let PRESENTATION_SET_ZOOM, PRES_ANNOTATION_DELETE, PRES_ANNOTATION_SUBMIT, PRESENTATION_SET_PAGE, PRESENTATION_PUBLISH_CURSOR;
module.link("../presentation/mutations", {
  PRESENTATION_SET_ZOOM(v) {
    PRESENTATION_SET_ZOOM = v;
  },
  PRES_ANNOTATION_DELETE(v) {
    PRES_ANNOTATION_DELETE = v;
  },
  PRES_ANNOTATION_SUBMIT(v) {
    PRES_ANNOTATION_SUBMIT = v;
  },
  PRESENTATION_SET_PAGE(v) {
    PRESENTATION_SET_PAGE = v;
  },
  PRESENTATION_PUBLISH_CURSOR(v) {
    PRESENTATION_PUBLISH_CURSOR = v;
  }
}, 14);
let useMergedCursorData;
module.link("./hooks.ts", {
  useMergedCursorData(v) {
    useMergedCursorData = v;
  }
}, 15);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 16);
const WhiteboardContainer = props => {
  var _Settings$application, _Settings$application2, _Settings$application3, _Settings$application4, _Settings$application5, _meeting$data, _meeting$data$lockSet;
  const {
    intl,
    zoomChanger
  } = props;
  const WHITEBOARD_CONFIG = window.meetingClientSettings.public.whiteboard;
  const [annotations, setAnnotations] = useState([]);
  const [shapes, setShapes] = useState({});
  const [currentPresentationPage, setCurrentPresentationPage] = useState(null);
  const meeting = useMeeting(m => ({
    lockSettings: m === null || m === void 0 ? void 0 : m.lockSettings
  }));
  const {
    data: currentUser
  } = useCurrentUser(user => ({
    presenter: user.presenter,
    isModerator: user.isModerator,
    userId: user.userId
  }));
  const isPresenter = currentUser === null || currentUser === void 0 ? void 0 : currentUser.presenter;
  const isModerator = currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator;
  const {
    data: presentationPageData
  } = useDeduplicatedSubscription(CURRENT_PRESENTATION_PAGE_SUBSCRIPTION);
  const {
    pres_page_curr: presentationPageArray
  } = presentationPageData || {};
  const newPresentationPage = presentationPageArray && presentationPageArray[0];
  useEffect(() => {
    if (newPresentationPage) {
      setCurrentPresentationPage(newPresentationPage);
    }
  }, [newPresentationPage]);
  const curPageNum = currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.num;
  const curPageId = currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.pageId;
  const isInfiniteWhiteboard = currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.infiniteWhiteboard;
  const curPageIdRef = useRef();
  React.useEffect(() => {
    curPageIdRef.current = curPageId;
  }, [curPageId]);
  const presentationId = currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.presentationId;
  const {
    data: whiteboardWritersData
  } = useDeduplicatedSubscription(CURRENT_PAGE_WRITERS_SUBSCRIPTION, {
    variables: {
      pageId: curPageId
    },
    skip: !curPageId
  });
  const whiteboardWriters = (whiteboardWritersData === null || whiteboardWritersData === void 0 ? void 0 : whiteboardWritersData.pres_page_writers) || [];
  const hasWBAccess = whiteboardWriters === null || whiteboardWriters === void 0 ? void 0 : whiteboardWriters.some(writer => writer.userId === Auth.userID);
  const [presentationSetZoom] = useMutation(PRESENTATION_SET_ZOOM);
  const [presentationSetPage] = useMutation(PRESENTATION_SET_PAGE);
  const [presentationDeleteAnnotations] = useMutation(PRES_ANNOTATION_DELETE);
  const [presentationSubmitAnnotations] = useMutation(PRES_ANNOTATION_SUBMIT);
  const [presentationPublishCursor] = useMutation(PRESENTATION_PUBLISH_CURSOR);
  const setPresentationPage = pageId => {
    presentationSetPage({
      variables: {
        presentationId,
        pageId
      }
    });
  };
  const skipToSlide = slideNum => {
    const slideId = "".concat(presentationId, "/").concat(slideNum);
    setPresentationPage(slideId);
  };
  const removeShapes = shapeIds => {
    presentationDeleteAnnotations({
      variables: {
        pageId: curPageIdRef.current,
        annotationsIds: shapeIds
      }
    });
  };
  const zoomSlide = (widthRatio, heightRatio, xOffset, yOffset) => {
    const {
      pageId,
      num
    } = currentPresentationPage;
    presentationSetZoom({
      variables: {
        presentationId,
        pageId,
        pageNum: num,
        xOffset,
        yOffset,
        widthRatio,
        heightRatio
      }
    });
  };
  const submitAnnotations = async newAnnotations => {
    var _isAnnotationSent$dat;
    const isAnnotationSent = await presentationSubmitAnnotations({
      variables: {
        pageId: curPageIdRef.current,
        annotations: newAnnotations
      }
    });
    return isAnnotationSent === null || isAnnotationSent === void 0 ? void 0 : (_isAnnotationSent$dat = isAnnotationSent.data) === null || _isAnnotationSent$dat === void 0 ? void 0 : _isAnnotationSent$dat.presAnnotationSubmit;
  };
  const persistShapeWrapper = (shape, whiteboardId, amIModerator) => {
    persistShape(shape, whiteboardId, amIModerator, submitAnnotations);
  };
  const publishCursorUpdate = useCallback(payload => {
    const {
      whiteboardId,
      xPercent,
      yPercent
    } = payload;
    if (!whiteboardId || !xPercent || !yPercent || !(hasWBAccess || isPresenter)) return;
    presentationPublishCursor({
      variables: {
        whiteboardId,
        xPercent,
        yPercent
      }
    });
  }, [hasWBAccess, isPresenter]);
  const throttledPublishCursorUpdate = useMemo(() => throttle({
    interval: WHITEBOARD_CONFIG.cursorInterval
  }, publishCursorUpdate), [publishCursorUpdate]);
  const isMultiUserActive = (whiteboardWriters === null || whiteboardWriters === void 0 ? void 0 : whiteboardWriters.length) > 0;
  const cursorArray = useMergedCursorData();
  const {
    data: annotationStreamData
  } = useDeduplicatedSubscription(CURRENT_PAGE_ANNOTATIONS_STREAM, {
    variables: {
      lastUpdatedAt: new Date(0).toISOString()
    }
  });
  const {
    data: initialPageAnnotations,
    refetch: refetchInitialPageAnnotations
  } = useQuery(CURRENT_PAGE_ANNOTATIONS_QUERY, {
    skip: !curPageId
  });
  React.useEffect(() => {
    if (curPageIdRef.current) {
      refetchInitialPageAnnotations();
    }
  }, [curPageIdRef.current]);
  const processAnnotations = data => {
    const newAnnotations = [];
    const annotationsToBeRemoved = [];
    data.forEach(item => {
      if (item.annotationInfo === '') {
        annotationsToBeRemoved.push(item.annotationId);
      } else {
        newAnnotations.push(item);
      }
    });
    const currentAnnotations = annotations.filter(annotation => !annotationsToBeRemoved.includes(annotation.annotationId));
    setAnnotations([...currentAnnotations, ...newAnnotations]);
  };
  React.useEffect(() => {
    if (initialPageAnnotations && initialPageAnnotations.pres_annotation_curr) {
      processAnnotations(initialPageAnnotations.pres_annotation_curr);
    }
  }, [initialPageAnnotations]);
  useEffect(() => {
    const {
      pres_annotation_curr_stream: annotationStream
    } = annotationStreamData || {};
    if (annotationStream) {
      processAnnotations(annotationStream);
    }
  }, [annotationStreamData]);
  const bgShape = [];
  React.useEffect(() => {
    const updatedShapes = formatAnnotations(annotations.filter(annotation => annotation.pageId === curPageIdRef.current), intl, curPageNum, currentPresentationPage);
    setShapes(updatedShapes);
  }, [annotations, intl, curPageNum, currentPresentationPage]);
  const {
    isIphone
  } = deviceInfo;
  const assetId = AssetRecordType.createId(curPageNum);
  const assets = [{
    id: assetId,
    typeName: 'asset',
    type: 'image',
    meta: {},
    props: {
      w: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledWidth,
      h: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledHeight,
      src: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.svgUrl,
      name: '',
      isAnimated: false,
      mimeType: null
    }
  }];
  const Settings = getSettingsSingletonInstance();
  const {
    isRTL
  } = Settings.application;
  const width = layoutSelect(i => {
    var _i$output, _i$output$presentatio;
    return i === null || i === void 0 ? void 0 : (_i$output = i.output) === null || _i$output === void 0 ? void 0 : (_i$output$presentatio = _i$output.presentation) === null || _i$output$presentatio === void 0 ? void 0 : _i$output$presentatio.width;
  });
  const height = layoutSelect(i => {
    var _i$output2, _i$output2$presentati;
    return i === null || i === void 0 ? void 0 : (_i$output2 = i.output) === null || _i$output2 === void 0 ? void 0 : (_i$output2$presentati = _i$output2.presentation) === null || _i$output2$presentati === void 0 ? void 0 : _i$output2$presentati.height;
  });
  const sidebarNavigationWidth = layoutSelect(i => {
    var _i$output3, _i$output3$sidebarNav;
    return i === null || i === void 0 ? void 0 : (_i$output3 = i.output) === null || _i$output3 === void 0 ? void 0 : (_i$output3$sidebarNav = _i$output3.sidebarNavigation) === null || _i$output3$sidebarNav === void 0 ? void 0 : _i$output3$sidebarNav.width;
  });
  const {
    maxStickyNoteLength,
    maxNumberOfAnnotations
  } = WHITEBOARD_CONFIG;
  const fontFamily = WHITEBOARD_CONFIG.styles.text.family;
  const {
    colorStyle,
    dashStyle,
    fillStyle,
    fontStyle,
    sizeStyle
  } = WHITEBOARD_CONFIG.styles;
  const handleToggleFullScreen = ref => FullscreenService.toggleFullScreen(ref);
  const layoutContextDispatch = layoutDispatch();
  bgShape.push({
    x: 1,
    y: 1,
    rotation: 0,
    isLocked: true,
    opacity: 1,
    meta: {},
    id: "shape:BG-".concat(curPageNum),
    type: 'image',
    props: {
      w: (currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledWidth) || 1,
      h: (currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledHeight) || 1,
      assetId,
      playing: true,
      url: '',
      crop: null
    },
    parentId: "page:".concat(curPageNum),
    index: 'a0',
    typeName: 'shape'
  });
  if (!currentPresentationPage) return null;
  return /*#__PURE__*/React.createElement(Whiteboard, _extends({
    key: presentationId,
    isPresenter,
    isModerator,
    currentUser,
    isRTL,
    width,
    height,
    maxStickyNoteLength,
    maxNumberOfAnnotations,
    fontFamily,
    colorStyle,
    dashStyle,
    fillStyle,
    fontStyle,
    sizeStyle,
    handleToggleFullScreen,
    sidebarNavigationWidth,
    layoutContextDispatch,
    initDefaultPages,
    persistShapeWrapper,
    isMultiUserActive,
    shapes,
    bgShape,
    assets,
    removeShapes,
    zoomSlide,
    notifyNotAllowedChange,
    notifyShapeNumberExceeded,
    whiteboardToolbarAutoHide: Settings === null || Settings === void 0 ? void 0 : (_Settings$application = Settings.application) === null || _Settings$application === void 0 ? void 0 : _Settings$application.whiteboardToolbarAutoHide,
    animations: Settings === null || Settings === void 0 ? void 0 : (_Settings$application2 = Settings.application) === null || _Settings$application2 === void 0 ? void 0 : _Settings$application2.animations,
    toggleToolsAnimations,
    isIphone,
    currentPresentationPage,
    numberOfPages: currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.totalPages,
    presentationId,
    hasWBAccess,
    whiteboardWriters,
    zoomChanger,
    skipToSlide,
    locale: Settings === null || Settings === void 0 ? void 0 : (_Settings$application3 = Settings.application) === null || _Settings$application3 === void 0 ? void 0 : _Settings$application3.locale,
    darkTheme: Settings === null || Settings === void 0 ? void 0 : (_Settings$application4 = Settings.application) === null || _Settings$application4 === void 0 ? void 0 : _Settings$application4.darkTheme,
    selectedLayout: Settings === null || Settings === void 0 ? void 0 : (_Settings$application5 = Settings.application) === null || _Settings$application5 === void 0 ? void 0 : _Settings$application5.selectedLayout,
    isInfiniteWhiteboard
  }, props, {
    meetingId: Auth.meetingID,
    publishCursorUpdate: throttledPublishCursorUpdate,
    otherCursors: cursorArray,
    hideViewersCursor: meeting === null || meeting === void 0 ? void 0 : (_meeting$data = meeting.data) === null || _meeting$data === void 0 ? void 0 : (_meeting$data$lockSet = _meeting$data.lockSettings) === null || _meeting$data$lockSet === void 0 ? void 0 : _meeting$data$lockSet.hideViewersCursor
  }));
};
module.exportDefault(WhiteboardContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hooks.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/hooks.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  useMouseEvents: () => useMouseEvents,
  useCursor: () => useCursor
});
let React, useState, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
const useCursor = (publishCursorUpdate, whiteboardId) => {
  const [cursorPosition, setCursorPosition] = useState({
    x: '',
    y: ''
  });
  const updateCursorPosition = (newX, newY) => {
    setCursorPosition({
      x: newX,
      y: newY
    });
  };
  useEffect(() => {
    if (!cursorPosition || cursorPosition.x === '' || cursorPosition.y === '') {
      return;
    }
    publishCursorUpdate({
      whiteboardId,
      xPercent: cursorPosition === null || cursorPosition === void 0 ? void 0 : cursorPosition.x,
      yPercent: cursorPosition === null || cursorPosition === void 0 ? void 0 : cursorPosition.y
    });
  }, [cursorPosition, publishCursorUpdate, whiteboardId]);
  return [cursorPosition, updateCursorPosition];
};
const useMouseEvents = (_ref, _ref2) => {
  let {
    whiteboardRef,
    tlEditorRef,
    isWheelZoomRef,
    initialZoomRef
  } = _ref;
  let {
    isPresenter,
    hasWBAccess,
    whiteboardToolbarAutoHide,
    animations,
    cursorPosition,
    updateCursorPosition,
    toggleToolsAnimations,
    currentPresentationPage,
    zoomChanger,
    setIsMouseDown,
    setIsWheelZoom,
    setWheelZoomTimeout
  } = _ref2;
  const timeoutIdRef = React.useRef();
  const handleMouseUp = () => {
    var _tlEditorRef$current;
    if (timeoutIdRef.current) {
      clearTimeout(timeoutIdRef.current);
    }
    timeoutIdRef.current = setTimeout(() => {
      setIsMouseDown(false);
    }, 1000);
    tlEditorRef === null || tlEditorRef === void 0 ? void 0 : (_tlEditorRef$current = tlEditorRef.current) === null || _tlEditorRef$current === void 0 ? void 0 : _tlEditorRef$current.updateInstanceState({
      canMoveCamera: true,
      isReadonly: false
    });
  };
  const handleMouseDownWhiteboard = event => {
    if (!isPresenter && !hasWBAccess) {
      var _tlEditorRef$current2;
      let updateProps = {
        isReadonly: false
      };
      if (event.button === 1) {
        updateProps.canMoveCamera = false;
      }
      tlEditorRef === null || tlEditorRef === void 0 ? void 0 : (_tlEditorRef$current2 = tlEditorRef.current) === null || _tlEditorRef$current2 === void 0 ? void 0 : _tlEditorRef$current2.updateInstanceState(updateProps);
    }
    setIsMouseDown(true);
  };
  const handleMouseDownWindow = event => {
    const presentationInnerWrapper = document.getElementById('presentationInnerWrapper');
    if (!(presentationInnerWrapper && presentationInnerWrapper.contains(event.target))) {
      var _tlEditorRef$current3;
      const editingShape = (_tlEditorRef$current3 = tlEditorRef.current) === null || _tlEditorRef$current3 === void 0 ? void 0 : _tlEditorRef$current3.getEditingShape();
      if (editingShape) {
        var _tlEditorRef$current4;
        return (_tlEditorRef$current4 = tlEditorRef.current) === null || _tlEditorRef$current4 === void 0 ? void 0 : _tlEditorRef$current4.setEditingShape(null);
      }
    }
    return undefined;
  };
  const handleMouseEnter = () => {
    if (whiteboardToolbarAutoHide) {
      toggleToolsAnimations("fade-out", "fade-in", animations ? ".3s" : "0s", hasWBAccess || isPresenter);
    }
  };
  const handleMouseLeave = () => {
    if (whiteboardToolbarAutoHide) {
      toggleToolsAnimations("fade-in", "fade-out", animations ? "3s" : "0s", hasWBAccess || isPresenter);
    }
    setTimeout(() => {
      updateCursorPosition(-1, -1);
    }, 150);
  };
  const handleMouseWheel = event => {
    event.preventDefault();
    event.stopPropagation();
    if (!tlEditorRef.current || !isPresenter || !currentPresentationPage) {
      return;
    }
    setIsWheelZoom(true);
    const MAX_ZOOM_FACTOR = 4; // Represents 400%
    const MIN_ZOOM_FACTOR = 1; // Represents 100%
    const ZOOM_IN_FACTOR = 0.25;
    const ZOOM_OUT_FACTOR = 0.25;

    // Get the current mouse position
    const mouseX = event.clientX;
    const mouseY = event.clientY;

    // Get the current camera position and zoom level
    const {
      x: cx,
      y: cy,
      z: cz
    } = tlEditorRef.current.getCamera();
    let currentZoomLevel = cz / initialZoomRef.current;
    if (event.deltaY < 0) {
      currentZoomLevel = Math.min(currentZoomLevel + ZOOM_IN_FACTOR, MAX_ZOOM_FACTOR);
    } else {
      currentZoomLevel = Math.max(currentZoomLevel - ZOOM_OUT_FACTOR, MIN_ZOOM_FACTOR);
    }

    // Convert zoom level to a percentage for backend
    const zoomPercentage = currentZoomLevel * 100;
    zoomChanger(zoomPercentage);

    // Calculate the new camera zoom factor
    const newCameraZoomFactor = currentZoomLevel * initialZoomRef.current;

    // Calculate the mouse position in canvas space using whiteboardRef
    const rect = whiteboardRef.current.getBoundingClientRect();
    const canvasMouseX = (mouseX - rect.left) / cz + cx;
    const canvasMouseY = (mouseY - rect.top) / cz + cy;

    // Calculate the new camera position to keep the mouse position under the cursor
    const nextCamera = {
      x: canvasMouseX - (canvasMouseX - cx) * (newCameraZoomFactor / cz),
      y: canvasMouseY - (canvasMouseY - cy) * (newCameraZoomFactor / cz),
      z: newCameraZoomFactor
    };
    tlEditorRef.current.setCamera(nextCamera, {
      duration: 175
    });
    if (isWheelZoomRef.currentTimeout) {
      clearTimeout(isWheelZoomRef.currentTimeout);
    }
    setWheelZoomTimeout();
  };
  React.useEffect(() => {
    if (whiteboardToolbarAutoHide) {
      toggleToolsAnimations("fade-in", "fade-out", animations ? "3s" : "0s", hasWBAccess || isPresenter);
    } else {
      toggleToolsAnimations("fade-out", "fade-in", animations ? ".3s" : "0s", hasWBAccess || isPresenter);
    }
  }, [whiteboardToolbarAutoHide]);
  React.useEffect(() => {
    const whiteboardElement = whiteboardRef.current;
    window.addEventListener('mousedown', handleMouseDownWindow);
    if (whiteboardElement) {
      whiteboardElement.addEventListener("mousedown", handleMouseDownWhiteboard);
      whiteboardElement.addEventListener("mouseup", handleMouseUp);
      whiteboardElement.addEventListener("mouseenter", handleMouseEnter);
      whiteboardElement.addEventListener("mouseleave", handleMouseLeave);
      whiteboardElement.addEventListener("wheel", handleMouseWheel, {
        passive: false,
        capture: true
      });
    }
    return () => {
      if (whiteboardElement) {
        whiteboardElement.removeEventListener("mousedown", handleMouseDownWhiteboard);
        whiteboardElement.removeEventListener("mouseup", handleMouseUp);
        whiteboardElement.removeEventListener("mouseenter", handleMouseEnter);
        whiteboardElement.removeEventListener("mouseleave", handleMouseLeave);
        whiteboardElement.removeEventListener("wheel", handleMouseWheel);
      }
      window.removeEventListener('mousedown', handleMouseDownWindow);
    };
  }, [whiteboardRef, tlEditorRef, handleMouseDownWhiteboard, handleMouseUp, handleMouseEnter, handleMouseLeave, handleMouseWheel]);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hooks.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/hooks.ts                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  useMergedCursorData: () => useMergedCursorData
});
let useState, useEffect;
module.link("react", {
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let cursorUserSubscription, getCursorsCoordinatesStream;
module.link("./queries", {
  cursorUserSubscription(v) {
    cursorUserSubscription = v;
  },
  getCursorsCoordinatesStream(v) {
    getCursorsCoordinatesStream = v;
  }
}, 1);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 2);
const useMergedCursorData = () => {
  const [cursorCoordinates, setCursorCoordinates] = useState({});
  const [userCursor, setUserCursor] = useState({});
  const [userCursorMerged, setUserCursorMerged] = useState([]);
  // Fetch cursor coordinates
  const {
    data: cursorSubscriptionData
  } = useDeduplicatedSubscription(cursorUserSubscription);
  const cursorSubscriptionDataString = JSON.stringify(cursorSubscriptionData);
  const {
    data: cursorCoordinatesData
  } = useDeduplicatedSubscription(getCursorsCoordinatesStream);
  const cursorCoordinatesDataString = JSON.stringify(cursorCoordinatesData);
  useEffect(() => {
    if (cursorCoordinatesData) {
      const cursorData = cursorCoordinatesData.pres_page_cursor_stream.reduce((acc, cursor) => {
        acc[cursor.userId] = cursor;
        return acc;
      }, {});
      setCursorCoordinates(prev => {
        return _objectSpread(_objectSpread({}, prev), cursorData);
      });
    }
  }, [cursorCoordinatesDataString]);
  useEffect(() => {
    if (cursorSubscriptionData) {
      const cursorData = cursorSubscriptionData.pres_page_cursor.reduce((acc, cursor) => {
        acc[cursor.userId] = cursor;
        return acc;
      }, {});
      setUserCursor(cursorData);
    }
  }, [cursorSubscriptionDataString]);
  useEffect(() => {
    if (userCursor) {
      const mergedData = Object.keys(userCursor).map(userId => {
        const cursor = userCursor[userId];
        const coordinates = cursorCoordinates[userId];
        if (coordinates) {
          return _objectSpread(_objectSpread({}, coordinates), cursor);
        }
        return _objectSpread(_objectSpread({}, cursor), {}, {
          userId,
          xPercent: -1,
          yPercent: -1
        });
      });
      setUserCursorMerged(mergedData);
    }
  }, [cursorCoordinates, userCursor]);
  return userCursorMerged;
};
module.exportDefault({
  useMergedCursorData
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/queries.ts                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  CURRENT_PRESENTATION_PAGE_SUBSCRIPTION: () => CURRENT_PRESENTATION_PAGE_SUBSCRIPTION,
  PRESENTATIONS_SUBSCRIPTION: () => PRESENTATIONS_SUBSCRIPTION,
  EXPORTING_PRESENTATIONS_SUBSCRIPTION: () => EXPORTING_PRESENTATIONS_SUBSCRIPTION,
  PROCESSED_PRESENTATIONS_SUBSCRIPTION: () => PROCESSED_PRESENTATIONS_SUBSCRIPTION,
  CURRENT_PAGE_ANNOTATIONS_QUERY: () => CURRENT_PAGE_ANNOTATIONS_QUERY,
  CURRENT_PAGE_ANNOTATIONS_STREAM: () => CURRENT_PAGE_ANNOTATIONS_STREAM,
  CURRENT_PAGE_WRITERS_SUBSCRIPTION: () => CURRENT_PAGE_WRITERS_SUBSCRIPTION,
  CURRENT_PAGE_WRITERS_QUERY: () => CURRENT_PAGE_WRITERS_QUERY,
  cursorUserSubscription: () => cursorUserSubscription,
  getCursorsCoordinatesStream: () => getCursorsCoordinatesStream
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CURRENT_PRESENTATION_PAGE_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["subscription CurrentPresentationPagesSubscription {\n  pres_page_curr {\n    height\n    isCurrentPage\n    num\n    pageId\n    scaledHeight\n    scaledViewBoxHeight\n    scaledViewBoxWidth\n    scaledWidth\n    svgUrl: urlsJson(path: \"$.svg\")\n    width\n    xOffset\n    yOffset\n    presentationId\n    content\n    downloadFileUri\n    totalPages\n    downloadable\n    presentationName\n    isDefaultPresentation\n    infiniteWhiteboard\n  }  \n}"])));
const PRESENTATIONS_SUBSCRIPTION = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["subscription PresentationsSubscription {\n  pres_presentation {\n    uploadInProgress\n    current\n    downloadFileUri\n    downloadable\n    uploadErrorDetailsJson\n    uploadErrorMsgKey\n    filenameConverted\n    isDefault\n    name\n    totalPages\n    totalPagesUploaded\n    presentationId\n    removable\n    uploadCompleted\n  }  \n}"])));
const EXPORTING_PRESENTATIONS_SUBSCRIPTION = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["subscription PresentationsSubscription {\n  pres_presentation {\n    uploadInProgress\n    current\n    downloadFileUri\n    downloadable\n    uploadErrorDetailsJson\n    uploadErrorMsgKey\n    filenameConverted\n    isDefault\n    name\n    totalPages\n    totalPagesUploaded\n    presentationId\n    removable\n    uploadCompleted\n    exportToChatInProgress\n    exportToChatStatus\n    exportToChatCurrentPage\n    exportToChatHasError\n  }  \n}"])));
const PROCESSED_PRESENTATIONS_SUBSCRIPTION = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["subscription ProcessedPresentationsSubscription {\n  pres_presentation(where: { uploadCompleted: { _eq: true } }) {\n    current\n    name\n    presentationId\n  }\n}"])));
const CURRENT_PAGE_ANNOTATIONS_QUERY = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["query CurrentPageAnnotationsQuery {\n  pres_annotation_curr(order_by: { lastUpdatedAt: desc }) {\n    annotationId\n    annotationInfo\n    lastHistorySequence\n    lastUpdatedAt\n    pageId\n    presentationId\n    userId\n  }  \n}"])));
const CURRENT_PAGE_ANNOTATIONS_STREAM = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["subscription annotationsStream($lastUpdatedAt: timestamptz){\n  pres_annotation_curr_stream(batch_size: 1000, cursor: {initial_value: {lastUpdatedAt: $lastUpdatedAt}}) {\n    annotationId\n    annotationInfo\n    lastUpdatedAt\n    pageId\n    presentationId\n    userId\n  }\n}"])));
const CURRENT_PAGE_WRITERS_SUBSCRIPTION = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  subscription currentPageWritersSubscription($pageId: String!) {\n    pres_page_writers(where: { pageId: { _eq: $pageId } }) {\n      userId\n    }\n  }\n"])));
const CURRENT_PAGE_WRITERS_QUERY = gql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  query currentPageWritersQuery($pageId: String!) {\n    pres_page_writers(where: { pageId: { _eq: $pageId } }) {\n      userId\n      pageId\n    }\n  }\n"])));
const cursorUserSubscription = gql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  subscription CursorSubscription {\n    pres_page_cursor(\n      where: {isCurrentPage: {_eq: true}}\n      order_by: { userId: asc }\n    ) {\n      userId\n      user {\n        name\n        presenter\n        role\n      }\n    }  \n  }\n"])));
const getCursorsCoordinatesStream = gql(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  subscription getCursorCoordinatesStream {\n    pres_page_cursor_stream(cursor: {initial_value: {lastUpdatedAt: \"2020-01-01\"}}, \n                            where: {isCurrentPage: {_eq: true}}, \n                            batch_size: 100) {\n      xPercent\n      yPercent\n      lastUpdatedAt\n      userId\n    }\n  }\n"])));
module.exportDefault(CURRENT_PAGE_ANNOTATIONS_QUERY);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/service.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  initDefaultPages: () => initDefaultPages,
  sendAnnotation: () => sendAnnotation,
  persistShape: () => persistShape,
  notifyNotAllowedChange: () => notifyNotAllowedChange,
  notifyShapeNumberExceeded: () => notifyShapeNumberExceeded,
  toggleToolsAnimations: () => toggleToolsAnimations,
  formatAnnotations: () => formatAnnotations,
  getCustomEditorAssetUrls: () => getCustomEditorAssetUrls,
  getCustomAssetUrls: () => getCustomAssetUrls
});
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 0);
let PollService;
module.link("/imports/ui/components/poll/service", {
  default(v) {
    PollService = v;
  }
}, 1);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 2);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 3);
let caseInsensitiveReducer;
module.link("/imports/utils/caseInsensitiveReducer", {
  default(v) {
    caseInsensitiveReducer = v;
  }
}, 4);
const intlMessages = defineMessages({
  notifyNotAllowedChange: {
    id: 'app.whiteboard.annotations.notAllowed',
    description: 'Label shown in toast when the user make a change on a shape he doesnt have permission'
  },
  shapeNumberExceeded: {
    id: 'app.whiteboard.annotations.numberExceeded',
    description: 'Label shown in toast when the user tries to add more shapes than the limit'
  }
});
const annotationsQueue = [];
// How many packets we need to have to use annotationsBufferTimeMax
const annotationsMaxDelayQueueSize = 60;
// Minimum bufferTime
const annotationsBufferTimeMin = 30;
// Maximum bufferTime
const annotationsBufferTimeMax = 200;
// Time before running 'sendBulkAnnotations' again if user is offline
const annotationsRetryDelay = 1000;
let annotationsSenderIsRunning = false;
const proccessAnnotationsQueue = async submitAnnotations => {
  annotationsSenderIsRunning = true;
  const queueSize = annotationsQueue.length;
  if (!queueSize) {
    annotationsSenderIsRunning = false;
    return;
  }
  const annotations = annotationsQueue.splice(0, queueSize);
  try {
    const isAnnotationSent = await submitAnnotations(annotations);
    if (!isAnnotationSent) {
      // undo splice
      annotationsQueue.splice(0, 0, ...annotations);
      setTimeout(() => proccessAnnotationsQueue(submitAnnotations), annotationsRetryDelay);
    } else {
      // ask tiago
      const delayPerc = Math.min(annotationsMaxDelayQueueSize, queueSize) / annotationsMaxDelayQueueSize;
      const delayDelta = annotationsBufferTimeMax - annotationsBufferTimeMin;
      const delayTime = annotationsBufferTimeMin + delayDelta * delayPerc;
      setTimeout(() => proccessAnnotationsQueue(submitAnnotations), delayTime);
    }
  } catch (error) {
    annotationsQueue.splice(0, 0, ...annotations);
    setTimeout(() => proccessAnnotationsQueue(submitAnnotations), annotationsRetryDelay);
  }
};
const sendAnnotation = (annotation, submitAnnotations) => {
  // Prevent sending annotations while disconnected
  // TODO: Change this to add the annotation, but delay the send until we're
  // reconnected. With this it will miss things

  const index = annotationsQueue.findIndex(ann => ann.id === annotation.id);
  if (index !== -1) {
    annotationsQueue[index] = annotation;
  } else {
    annotationsQueue.push(annotation);
  }
  if (!annotationsSenderIsRunning) setTimeout(() => proccessAnnotationsQueue(submitAnnotations), annotationsBufferTimeMin);
};
const persistShape = async (shape, whiteboardId, isModerator, submitAnnotations) => {
  const annotation = {
    id: shape.id,
    annotationInfo: _objectSpread(_objectSpread({}, shape), {}, {
      isModerator
    }),
    wbId: whiteboardId,
    userId: Auth.userID
  };
  sendAnnotation(annotation, submitAnnotations);
};
const initDefaultPages = function () {
  let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  const pages = {};
  const pageStates = {};
  let i = 0;
  while (i < count + 1) {
    pages["".concat(i)] = {
      id: "".concat(i),
      name: "Slide ".concat(i),
      shapes: {},
      bindings: {}
    };
    pageStates["".concat(i)] = {
      id: "".concat(i),
      selectedIds: [],
      camera: {
        point: [0, 0],
        zoom: 1
      }
    };
    i += 1;
  }
  return {
    pages,
    pageStates
  };
};
const notifyNotAllowedChange = intl => {
  if (intl) notify(intl.formatMessage(intlMessages.notifyNotAllowedChange), 'warning', 'whiteboard');
};
const notifyShapeNumberExceeded = (intl, limit) => {
  if (intl) notify(intl.formatMessage(intlMessages.shapeNumberExceeded, {
    0: limit
  }), 'warning', 'whiteboard');
};
const toggleToolsAnimations = function (activeAnim, anim, time) {
  let hasWBAccess = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  const handleOptionsDropdown = () => {
    const optionsDropdown = document.getElementById('WhiteboardOptionButton');
    if (optionsDropdown) {
      optionsDropdown.classList.remove(activeAnim);
      optionsDropdown.style.transition = "opacity ".concat(time, " ease-in-out");
      optionsDropdown.classList.add(anim);
    }
  };
  if (hasWBAccess === false) {
    return handleOptionsDropdown();
  }
  const checkElementsAndRun = () => {
    const tlEls = document.querySelectorAll('.tlui-menu-zone, .tlui-toolbar__tools, .tlui-toolbar__extras, .tlui-style-panel__wrapper');
    if (tlEls.length) {
      tlEls === null || tlEls === void 0 ? void 0 : tlEls.forEach(el => {
        el.classList.remove(activeAnim);
        el.style.transition = "opacity ".concat(time, " ease-in-out");
        el.classList.add(anim);
      });
      handleOptionsDropdown();
    } else {
      // If the elements are not yet in the DOM, wait for 50ms and try again
      setTimeout(checkElementsAndRun, 300);
    }
  };
  checkElementsAndRun();
};
const formatAnnotations = (annotations, intl, curPageId, currentPresentationPage) => {
  const result = {};
  annotations.forEach(annotation => {
    if (annotation.annotationInfo === '') return;
    let annotationInfo = JSON.parse(annotation.annotationInfo);
    if (annotationInfo.questionType) {
      var _annotationInfo, _annotationInfo$id, _annotationInfo$id$sp, _annotationInfo$id$sp2;
      // poll result, convert it to text and create tldraw shape
      if (!annotationInfo.props) {
        annotationInfo.answers = annotationInfo.answers.reduce(caseInsensitiveReducer, []);
        let pollResult = PollService.getPollResultString(annotationInfo, intl).split('<br/>').join('\n').replace(/(<([^>]+)>)/ig, '');
        const lines = pollResult.split('\n');
        const longestLine = lines.reduce((a, b) => a.length > b.length ? a : b, '').length;

        // Text measurement estimation
        const averageCharWidth = 14;
        const lineHeight = 32;
        const padding = 2;
        const annotationWidth = longestLine * averageCharWidth;
        const annotationHeight = lines.length * lineHeight;
        const slideWidth = currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledWidth;
        const slideHeight = currentPresentationPage === null || currentPresentationPage === void 0 ? void 0 : currentPresentationPage.scaledHeight;
        const xPosition = slideWidth - annotationWidth - padding;
        const yPosition = slideHeight - annotationHeight - padding;
        annotationInfo = {
          x: xPosition,
          y: yPosition,
          isLocked: false,
          rotation: 0,
          typeName: 'shape',
          opacity: 1,
          parentId: "page:".concat(curPageId),
          index: 'a1',
          id: "".concat(annotationInfo.id),
          meta: {},
          type: 'poll',
          props: {
            color: 'black',
            fill: 'semi',
            w: annotationWidth,
            h: annotationHeight,
            answers: annotationInfo.answers,
            numRespondents: annotationInfo.numRespondents,
            numResponders: annotationInfo.numResponders,
            questionText: annotationInfo.questionText,
            questionType: annotationInfo.questionType,
            question: annotationInfo.question || ""
          }
        };
      } else {
        annotationInfo = {
          x: annotationInfo.x,
          isLocked: annotationInfo.isLocked,
          y: annotationInfo.y,
          rotation: annotationInfo.rotation,
          typeName: annotationInfo.typeName,
          opacity: annotationInfo.opacity,
          parentId: annotationInfo.parentId,
          index: annotationInfo.index,
          id: annotationInfo.id,
          meta: annotationInfo.meta,
          type: 'poll',
          props: {
            color: 'black',
            fill: 'semi',
            h: annotationInfo.props.h,
            w: annotationInfo.props.w,
            answers: annotationInfo.answers,
            numRespondents: annotationInfo.numRespondents,
            numResponders: annotationInfo.numResponders,
            questionText: annotationInfo.questionText,
            questionType: annotationInfo.questionType,
            question: annotationInfo.question || ''
          }
        };
      }
      const cpg = parseInt((_annotationInfo = annotationInfo) === null || _annotationInfo === void 0 ? void 0 : (_annotationInfo$id = _annotationInfo.id) === null || _annotationInfo$id === void 0 ? void 0 : (_annotationInfo$id$sp = _annotationInfo$id.split) === null || _annotationInfo$id$sp === void 0 ? void 0 : (_annotationInfo$id$sp2 = _annotationInfo$id$sp.call(_annotationInfo$id, '/')) === null || _annotationInfo$id$sp2 === void 0 ? void 0 : _annotationInfo$id$sp2[1], 10);
      if (cpg !== parseInt(curPageId, 10)) return;
      annotationInfo.questionType = false;
    }
    result[annotationInfo.id] = annotationInfo;
  });
  return result;
};
const getCustomEditorAssetUrls = () => {
  const BASENAME = window.meetingClientSettings.public.app.basename;
  const TL_TEXT_PATHS = "".concat(BASENAME, "/fonts/tldraw");
  return {
    fonts: {
      draw: "".concat(TL_TEXT_PATHS, "/Shantell_Sans-Tldrawish.woff2"),
      serif: "".concat(TL_TEXT_PATHS, "/IBMPlexSerif-Medium.woff2"),
      sansSerif: "".concat(TL_TEXT_PATHS, "/IBMPlexSans-Medium.woff2"),
      monospace: "".concat(TL_TEXT_PATHS, "/IBMPlexMono-Medium.woff2")
    }
  };
};
const getCustomAssetUrls = () => {
  const BASENAME = window.meetingClientSettings.public.app.basename;
  const TL_ICON_PATHS = "".concat(BASENAME, "/svgs/tldraw");
  return {
    icons: {
      'menu': "".concat(TL_ICON_PATHS, "/menu.svg"),
      'undo': "".concat(TL_ICON_PATHS, "/undo.svg"),
      'redo': "".concat(TL_ICON_PATHS, "/redo.svg"),
      'trash': "".concat(TL_ICON_PATHS, "/trash.svg"),
      'duplicate': "".concat(TL_ICON_PATHS, "/duplicate.svg"),
      'unlock': "".concat(TL_ICON_PATHS, "/unlock.svg"),
      'arrowhead-none': "".concat(TL_ICON_PATHS, "/arrowhead-none.svg"),
      'arrowhead-arrow': "".concat(TL_ICON_PATHS, "/arrowhead-arrow.svg"),
      'arrowhead-triangle': "".concat(TL_ICON_PATHS, "/arrowhead-triangle.svg"),
      'arrowhead-square': "".concat(TL_ICON_PATHS, "/arrowhead-square.svg"),
      'arrowhead-dot': "".concat(TL_ICON_PATHS, "/arrowhead-dot.svg"),
      'arrowhead-diamond': "".concat(TL_ICON_PATHS, "/arrowhead-diamond.svg"),
      'arrowhead-triangle-inverted': "".concat(TL_ICON_PATHS, "/arrowhead-triangle-inverted.svg"),
      'arrowhead-bar': "".concat(TL_ICON_PATHS, "/arrowhead-bar.svg"),
      'dots-horizontal': "".concat(TL_ICON_PATHS, "/dots-horizontal.svg"),
      'dots-vertical': "".concat(TL_ICON_PATHS, "/dots-vertical.svg"),
      'tool-pointer': "".concat(TL_ICON_PATHS, "/tool-pointer.svg"),
      'tool-media': "".concat(TL_ICON_PATHS, "/tool-media.svg"),
      'tool-hand': "".concat(TL_ICON_PATHS, "/tool-hand.svg"),
      'tool-pencil': "".concat(TL_ICON_PATHS, "/tool-pencil.svg"),
      'tool-eraser': "".concat(TL_ICON_PATHS, "/tool-eraser.svg"),
      'tool-arrow': "".concat(TL_ICON_PATHS, "/tool-arrow.svg"),
      'tool-text': "".concat(TL_ICON_PATHS, "/tool-text.svg"),
      'tool-laser': "".concat(TL_ICON_PATHS, "/tool-laser.svg"),
      'tool-note': "".concat(TL_ICON_PATHS, "/tool-note.svg"),
      'tool-line': "".concat(TL_ICON_PATHS, "/tool-line.svg"),
      'tool-highlight': "".concat(TL_ICON_PATHS, "/tool-highlight.svg"),
      'tool-frame': "".concat(TL_ICON_PATHS, "/tool-frame.svg"),
      'chevron-up': "".concat(TL_ICON_PATHS, "/chevron-up.svg"),
      'chevron-down': "".concat(TL_ICON_PATHS, "/chevron-down.svg"),
      'chevron-right': "".concat(TL_ICON_PATHS, "/chevron-right.svg"),
      'blob': "".concat(TL_ICON_PATHS, "/blob.svg"),
      'geo-rectangle': "".concat(TL_ICON_PATHS, "/geo-rectangle.svg"),
      'geo-ellipse': "".concat(TL_ICON_PATHS, "/geo-ellipse.svg"),
      'geo-diamond': "".concat(TL_ICON_PATHS, "/geo-diamond.svg"),
      'geo-triangle': "".concat(TL_ICON_PATHS, "/geo-triangle.svg"),
      'geo-trapezoid': "".concat(TL_ICON_PATHS, "/geo-trapezoid.svg"),
      'geo-rhombus': "".concat(TL_ICON_PATHS, "/geo-rhombus.svg"),
      'geo-rhombus-2': "".concat(TL_ICON_PATHS, "/geo-rhombus-2.svg"),
      'geo-pentagon': "".concat(TL_ICON_PATHS, "/geo-pentagon.svg"),
      'geo-octagon': "".concat(TL_ICON_PATHS, "/geo-octagon.svg"),
      'geo-hexagon': "".concat(TL_ICON_PATHS, "/geo-hexagon.svg"),
      'geo-cloud': "".concat(TL_ICON_PATHS, "/geo-cloud.svg"),
      'geo-star': "".concat(TL_ICON_PATHS, "/geo-star.svg"),
      'geo-oval': "".concat(TL_ICON_PATHS, "/geo-oval.svg"),
      'geo-x-box': "".concat(TL_ICON_PATHS, "/geo-x-box.svg"),
      'geo-check-box': "".concat(TL_ICON_PATHS, "/geo-check-box.svg"),
      'geo-arrow-left': "".concat(TL_ICON_PATHS, "/geo-arrow-left.svg"),
      'geo-arrow-up': "".concat(TL_ICON_PATHS, "/geo-arrow-up.svg"),
      'geo-arrow-down': "".concat(TL_ICON_PATHS, "/geo-arrow-down.svg"),
      'geo-arrow-right': "".concat(TL_ICON_PATHS, "/geo-arrow-right.svg"),
      'align-left': "".concat(TL_ICON_PATHS, "/align-left.svg"),
      'align-top': "".concat(TL_ICON_PATHS, "/align-top.svg"),
      'align-right': "".concat(TL_ICON_PATHS, "/align-right.svg"),
      'align-center-horizontal': "".concat(TL_ICON_PATHS, "/align-center-horizontal.svg"),
      'align-bottom': "".concat(TL_ICON_PATHS, "/align-bottom.svg"),
      'align-center-vertical': "".concat(TL_ICON_PATHS, "/align-center-vertical.svg"),
      'stretch-vertical': "".concat(TL_ICON_PATHS, "/stretch-vertical.svg"),
      'stretch-horizontal': "".concat(TL_ICON_PATHS, "/stretch-horizontal.svg"),
      'distribute-horizontal': "".concat(TL_ICON_PATHS, "/distribute-horizontal.svg"),
      'distribute-vertical': "".concat(TL_ICON_PATHS, "/distribute-vertical.svg"),
      'stack-horizontal': "".concat(TL_ICON_PATHS, "/stack-horizontal.svg"),
      'stack-vertical': "".concat(TL_ICON_PATHS, "/stack-vertical.svg"),
      'send-to-back': "".concat(TL_ICON_PATHS, "/send-to-back.svg"),
      'send-backward': "".concat(TL_ICON_PATHS, "/send-backward.svg"),
      'bring-forward': "".concat(TL_ICON_PATHS, "/bring-forward.svg"),
      'bring-to-front': "".concat(TL_ICON_PATHS, "/bring-to-front.svg"),
      'reset-zoom': "".concat(TL_ICON_PATHS, "/reset-zoom.svg"),
      'rotate-cw': "".concat(TL_ICON_PATHS, "/rotate-cw.svg"),
      'link': "".concat(TL_ICON_PATHS, "/link.svg"),
      'group': "".concat(TL_ICON_PATHS, "/group.svg"),
      'color': "".concat(TL_ICON_PATHS, "/color.svg"),
      'fill-none': "".concat(TL_ICON_PATHS, "/fill-none.svg"),
      'fill-semi': "".concat(TL_ICON_PATHS, "/fill-semi.svg"),
      'fill-solid': "".concat(TL_ICON_PATHS, "/fill-solid.svg"),
      'fill-pattern': "".concat(TL_ICON_PATHS, "/fill-pattern.svg"),
      'dash-draw': "".concat(TL_ICON_PATHS, "/dash-draw.svg"),
      'dash-dashed': "".concat(TL_ICON_PATHS, "/dash-dashed.svg"),
      'dash-dotted': "".concat(TL_ICON_PATHS, "/dash-dotted.svg"),
      'dash-solid': "".concat(TL_ICON_PATHS, "/dash-solid.svg"),
      'size-small': "".concat(TL_ICON_PATHS, "/size-small.svg"),
      'size-medium': "".concat(TL_ICON_PATHS, "/size-medium.svg"),
      'size-large': "".concat(TL_ICON_PATHS, "/size-large.svg"),
      'size-extra-large': "".concat(TL_ICON_PATHS, "/size-extra-large.svg"),
      'font-draw': "".concat(TL_ICON_PATHS, "/font-draw.svg"),
      'font-sans': "".concat(TL_ICON_PATHS, "/font-sans.svg"),
      'font-serif': "".concat(TL_ICON_PATHS, "/font-serif.svg"),
      'font-mono': "".concat(TL_ICON_PATHS, "/font-mono.svg"),
      'text-align-left': "".concat(TL_ICON_PATHS, "/text-align-left.svg"),
      'text-align-center': "".concat(TL_ICON_PATHS, "/text-align-center.svg"),
      'text-align-right': "".concat(TL_ICON_PATHS, "/text-align-right.svg"),
      'vertical-align-center': "".concat(TL_ICON_PATHS, "/vertical-align-center.svg"),
      'vertical-align-start': "".concat(TL_ICON_PATHS, "/vertical-align-start.svg"),
      'vertical-align-end': "".concat(TL_ICON_PATHS, "/vertical-align-end.svg")
    }
  };
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/styles.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, createGlobalStyle;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  createGlobalStyle(v) {
    createGlobalStyle = v;
  }
}, 0);
let colorOffWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorOffWhite(v) {
    colorOffWhite = v;
  }
}, 1);
const TldrawV2GlobalStyle = createGlobalStyle(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n\n  ", "\n\n  #whiteboard-element {\n    position: relative;\n    height: 100%;\n  }\n\n  #whiteboard-element > * {\n    position: relative; \n    height: 100%;\n  }\n\n  #whiteboard-element .tl-overlays {\n    left: 0px;\n    bottom: 0px;\n  }\n\n  .tlui-navigation-zone,\n  .tlui-help-menu,\n  .tlui-debug-panel {\n    display: none !important;\n  }\n\n  .tlui-style-panel__wrapper {\n    right: 0px;\n    top: -0.35rem;\n    position: relative;\n  }\n\n  .tl-overlays__item {\n    height: auto !important;\n    width: auto !important;\n  }\n\n  ", "\n\n  .tlui-toolbar__extras {\n    position: fixed !important;\n    top: 2px !important;\n    \n  }\n\n  .tlui-toolbar__extras__controls {\n    border-radius: var(--radius-4);\n    border: none;\n    background-color: ", ";\n    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.16),\n      0px 2px 3px rgba(0, 0, 0, 0.24),\n      0px 2px 6px rgba(0, 0, 0, 0.1);\n  }\n\n  ", "\n\n  ", "\n\n  .tlui-helper-buttons,\n  [data-testid=\"main.page-menu\"],\n  [data-testid=\"main.menu\"],\n  [data-testid=\"tools.more.laser\"],\n  [data-testid=\"tools.asset\"],\n  [data-testid=\"page-menu.button\"],\n  .tlui-menu-zone {\n    display: none !important;\n  }\n\n  .tl-collaborator__cursor {\n    height: auto !important;\n    width: auto !important;\n  }\n\n  .tlui-layout__mobile .tlui-button__tool {\n    height: 30px !important;\n    width: 20px !important;\n  }\n\n  .tlui-toolbar__inner {\n    flex-direction: column-reverse !important;\n  }\n\n  .tlui-toolbar__tools {\n    flex-direction: column !important;\n  }\n\n  .tlui-toolbar {\n    align-items: end !important;\n  }\n\n  .tlui-layout__bottom {\n    grid-row: auto / auto !important;\n    position: absolute !important;\n    right: 10px !important;\n  }\n\n  [data-side=\"bottom\"][data-align=\"end\"][data-state=\"open\"][role=\"dialog\"] {\n    right: 3.5rem !important;\n    bottom: 9.5rem !important;\n  }\n\n  [id*=\"shape:poll-result\"] {\n    background-color: white !important;\n  }\n\n  ", "\n"])), _ref => {
  let {
    isPresenter,
    hasWBAccess
  } = _ref;
  return !isPresenter && hasWBAccess && "\n    [data-testid=\"tools.hand\"] {\n      display: none !important;\n    }\n  ";
}, _ref2 => {
  let {
    isMultiUserActive
  } = _ref2;
  return !isMultiUserActive && "\n    .tl-nametag {\n      display: none;\n    }\n  ";
}, _ref3 => {
  let {
    isToolbarVisible
  } = _ref3;
  return !isToolbarVisible && "\n    .tlui-toolbar,\n    .tlui-style-panel__wrapper {\n      visibility: hidden;\n    }\n    #WhiteboardOptionButton {\n      opacity: 0.2;\n    }\n  ";
}, _ref4 => {
  let {
    isPresenter,
    isMultiUserActive
  } = _ref4;
  return !isPresenter && !isMultiUserActive && "\n    .tl-cursor use {\n      transform: scale(0.05)!important;\n    }\n\n    .tl-collaborator__cursor {\n      position: absolute !important;\n      left: -7px !important;\n      top: -6px !important;\n    }\n  ";
}, colorOffWhite, _ref5 => {
  let {
    isRTL
  } = _ref5;
  return !isRTL && "\n    .tlui-toolbar__extras {\n      right: 0;\n      left: 50px !important;\n    }\n  ";
}, _ref6 => {
  let {
    isRTL
  } = _ref6;
  return isRTL && "\n    .tlui-toolbar__extras {\n      right: 50px !important;\n      left: 0;\n    }\n\n    .tlui-toolbar__extras__controls {\n      margin-right: 8px;\n      margin-left: 0;\n    }\n  ";
}, _ref7 => {
  let {
    presentationHeight
  } = _ref7;
  const minRange = {
    height: 345,
    top: 14
  };
  const maxRange = {
    height: 1200,
    top: 384
  };
  const interpolateTop = height => {
    if (height <= minRange.height) return "".concat(minRange.top, "px");
    if (height >= maxRange.height) return "".concat(maxRange.top, "px");
    const slope = (maxRange.top - minRange.top) / (maxRange.height - minRange.height);
    const interpolatedTop = minRange.top + slope * (height - minRange.height);
    return "".concat(interpolatedTop, "px");
  };
  const topValue = interpolateTop(presentationHeight);
  let additionalStyles = '';
  if (presentationHeight <= 332) {
    additionalStyles += "\n        .tlui-layout__mobile .tlui-button__tool > .tlui-icon {\n          height: 11px !important;\n          width: 11px !important;\n        }\n\n        .tlui-toolbar__tools {\n          flex-direction: row !important;\n        }\n\n        .tlui-toolbar__inner {\n          flex-direction: row-reverse !important;\n        }\n\n        .tlui-layout__bottom {\n          grid-row: auto / auto !important;\n          position: relative !important;\n          top: 2px !important;\n        }\n\n        [data-side=\"top\"][role=\"dialog\"] {\n          left: 10rem !important;\n        }\n      ";
  }
  return ".tlui-layout__bottom { top: ".concat(topValue, " !important; }").concat(additionalStyles);
});
const EditableWBWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  &, & > :first-child {\n    cursor: inherit !important;\n  }\n"])));
module.exportDefault({
  TldrawV2GlobalStyle,
  EditableWBWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/whiteboard/utils.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  usePrevious: () => usePrevious,
  findRemoved: () => findRemoved,
  filterInvalidShapes: () => filterInvalidShapes,
  mapLanguage: () => mapLanguage,
  isValidShapeType: () => isValidShapeType
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
const usePrevious = value => {
  const ref = React.useRef();
  React.useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
};
const findRemoved = (A, B) => A.filter(a => !B.includes(a));
const filterInvalidShapes = (shapes, curPageId, tldrawAPI) => {
  const retShapes = shapes;
  const keys = Object.keys(shapes);
  const removedChildren = [];
  const removedParents = [];
  keys.forEach(shape => {
    if (shapes[shape].parentId !== curPageId) {
      if (!keys.includes(shapes[shape].parentId)) {
        delete retShapes[shape];
      }
    } else if (shapes[shape].type === 'group') {
      const groupChildren = shapes[shape].children;
      groupChildren.forEach(child => {
        if (!keys.includes(child)) {
          removedChildren.push(child);
        }
      });
      retShapes[shape].children = groupChildren.filter(child => !removedChildren.includes(child));
      if (shapes[shape].children.length < 2) {
        removedParents.push(shape);
        delete retShapes[shape];
      }
    }
  });
  // remove orphaned children
  Object.keys(shapes).forEach(shape => {
    if (shapes[shape] && shapes[shape].parentId !== curPageId) {
      if (removedParents.includes(shapes[shape].parentId)) {
        delete retShapes[shape];
      }
    }

    // remove orphaned bindings
    if (shapes[shape] && shapes[shape].type === 'arrow' && (shapes[shape].handles.start.bindingId || shapes[shape].handles.end.bindingId)) {
      const startBinding = shapes[shape].handles.start.bindingId;
      const endBinding = shapes[shape].handles.end.bindingId;
      const startBindingData = tldrawAPI === null || tldrawAPI === void 0 ? void 0 : tldrawAPI.getBinding(startBinding);
      const endBindingData = tldrawAPI === null || tldrawAPI === void 0 ? void 0 : tldrawAPI.getBinding(endBinding);
      if (startBinding && !startBindingData && (removedParents.includes(startBindingData === null || startBindingData === void 0 ? void 0 : startBindingData.fromId) || removedParents.includes(startBindingData === null || startBindingData === void 0 ? void 0 : startBindingData.toId) || !keys.includes(startBindingData === null || startBindingData === void 0 ? void 0 : startBindingData.fromId) || !keys.includes(startBindingData === null || startBindingData === void 0 ? void 0 : startBindingData.toId))) {
        delete retShapes[shape].handles.start.bindingId;
      }
      if (endBinding && !endBindingData && (removedParents.includes(endBindingData === null || endBindingData === void 0 ? void 0 : endBindingData.fromId) || removedParents.includes(endBindingData === null || endBindingData === void 0 ? void 0 : endBindingData.toId) || !keys.includes(endBindingData === null || endBindingData === void 0 ? void 0 : endBindingData.fromId) || !keys.includes(endBindingData === null || endBindingData === void 0 ? void 0 : endBindingData.toId))) {
        delete retShapes[shape].handles.end.bindingId;
      }
    }
  });
  return retShapes;
};
const isValidShapeType = shape => {
  const invalidTypes = ['image', 'embed'];
  return !invalidTypes.includes(shape === null || shape === void 0 ? void 0 : shape.type);
};

// map different localeCodes from bbb to tldraw
const mapLanguage = language => {
  // bbb has xx-xx but in tldraw it's only xx
  if (['es', 'fa', 'it', 'pl', 'sv', 'uk'].some(lang => language.startsWith(lang))) {
    return language.substring(0, 2);
  }
  // exceptions
  switch (language) {
    case 'nb-no':
      return 'no';
    case 'zh-cn':
      return 'zh-ch';
    default:
      return language;
  }
};
const Utils = {
  usePrevious,
  findRemoved,
  filterInvalidShapes,
  mapLanguage
};
module.exportDefault(Utils);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"actions-bar":{"actions-dropdown":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/actions-dropdown/component.jsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 2);
let withShortcutHelper;
module.link("/imports/ui/components/shortcut-help/service", {
  default(v) {
    withShortcutHelper = v;
  }
}, 3);
let ExternalVideoModal;
module.link("/imports/ui/components/external-video-player/external-video-player-graphql/modal/component", {
  default(v) {
    ExternalVideoModal = v;
  }
}, 4);
let LayoutModalContainer;
module.link("/imports/ui/components/layout/modal/container", {
  default(v) {
    LayoutModalContainer = v;
  }
}, 5);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 6);
let ActionButtonDropdownItemType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/action-button-dropdown-item/enums", {
  ActionButtonDropdownItemType(v) {
    ActionButtonDropdownItemType = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
let colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 9);
let PANELS, ACTIONS, LAYOUT_TYPE;
module.link("../../layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  },
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  }
}, 10);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 11);
let VideoPreviewContainer;
module.link("/imports/ui/components/video-preview/container", {
  default(v) {
    VideoPreviewContainer = v;
  }
}, 12);
let screenshareHasEnded;
module.link("/imports/ui/components/screenshare/service", {
  screenshareHasEnded(v) {
    screenshareHasEnded = v;
  }
}, 13);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 14);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 15);
const propTypes = {
  amIPresenter: PropTypes.bool,
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  amIModerator: PropTypes.bool,
  shortcuts: PropTypes.string,
  handleTakePresenter: PropTypes.func.isRequired,
  isTimerActive: PropTypes.bool.isRequired,
  isTimerEnabled: PropTypes.bool.isRequired,
  allowExternalVideo: PropTypes.bool.isRequired,
  stopExternalVideoShare: PropTypes.func.isRequired,
  isMobile: PropTypes.bool.isRequired,
  setMeetingLayout: PropTypes.func.isRequired,
  setPushLayout: PropTypes.func.isRequired,
  showPushLayout: PropTypes.bool.isRequired,
  isTimerFeatureEnabled: PropTypes.bool.isRequired,
  isCameraAsContentEnabled: PropTypes.bool.isRequired,
  actionButtonDropdownItems: PropTypes.arrayOf(PropTypes.shape({
    allowed: PropTypes.bool,
    key: PropTypes.string
  })).isRequired
};
const defaultProps = {
  shortcuts: '',
  settingsLayout: LAYOUT_TYPE.SMART_LAYOUT,
  amIPresenter: false,
  amIModerator: false
};
const intlMessages = defineMessages({
  actionsLabel: {
    id: 'app.actionsBar.actionsDropdown.actionsLabel',
    description: 'Actions button label'
  },
  activateTimerStopwatchLabel: {
    id: 'app.actionsBar.actionsDropdown.activateTimerStopwatchLabel',
    description: 'Activate timer/stopwatch label'
  },
  deactivateTimerStopwatchLabel: {
    id: 'app.actionsBar.actionsDropdown.deactivateTimerStopwatchLabel',
    description: 'Deactivate timer/stopwatch label'
  },
  presentationLabel: {
    id: 'app.actionsBar.actionsDropdown.presentationLabel',
    description: 'Upload a presentation option label'
  },
  presentationDesc: {
    id: 'app.actionsBar.actionsDropdown.presentationDesc',
    description: 'adds context to upload presentation option'
  },
  desktopShareDesc: {
    id: 'app.actionsBar.actionsDropdown.desktopShareDesc',
    description: 'adds context to desktop share option'
  },
  stopDesktopShareDesc: {
    id: 'app.actionsBar.actionsDropdown.stopDesktopShareDesc',
    description: 'adds context to stop desktop share option'
  },
  pollBtnLabel: {
    id: 'app.actionsBar.actionsDropdown.pollBtnLabel',
    description: 'poll menu toggle button label'
  },
  pollBtnDesc: {
    id: 'app.actionsBar.actionsDropdown.pollBtnDesc',
    description: 'poll menu toggle button description'
  },
  takePresenter: {
    id: 'app.actionsBar.actionsDropdown.takePresenter',
    description: 'Label for take presenter role option'
  },
  takePresenterDesc: {
    id: 'app.actionsBar.actionsDropdown.takePresenterDesc',
    description: 'Description of take presenter role option'
  },
  startExternalVideoLabel: {
    id: 'app.actionsBar.actionsDropdown.shareExternalVideo',
    description: 'Start sharing external video button'
  },
  stopExternalVideoLabel: {
    id: 'app.actionsBar.actionsDropdown.stopShareExternalVideo',
    description: 'Stop sharing external video button'
  },
  layoutModal: {
    id: 'app.actionsBar.actionsDropdown.layoutModal',
    description: 'Label for layouts selection button'
  },
  shareCameraAsContent: {
    id: 'app.actionsBar.actionsDropdown.shareCameraAsContent',
    description: 'Label for share camera as content'
  },
  unshareCameraAsContent: {
    id: 'app.actionsBar.actionsDropdown.unshareCameraAsContent',
    description: 'Label for unshare camera as content'
  }
});
const handlePresentationClick = () => Session.setItem('showUploadPresentationView', true);
class ActionsDropdown extends PureComponent {
  constructor(props) {
    super(props);
    this.presentationItemId = uniqueId('action-item-');
    this.pollId = uniqueId('action-item-');
    this.takePresenterId = uniqueId('action-item-');
    this.timerId = uniqueId('action-item-');
    this.selectUserRandId = uniqueId('action-item-');
    this.state = {
      isExternalVideoModalOpen: false,
      isLayoutModalOpen: false,
      isCameraAsContentModalOpen: false
    };
    this.handleExternalVideoClick = this.handleExternalVideoClick.bind(this);
    this.makePresentationItems = this.makePresentationItems.bind(this);
    this.setExternalVideoModalIsOpen = this.setExternalVideoModalIsOpen.bind(this);
    this.setLayoutModalIsOpen = this.setLayoutModalIsOpen.bind(this);
    this.setCameraAsContentModalIsOpen = this.setCameraAsContentModalIsOpen.bind(this);
    this.setPropsToPassModal = this.setPropsToPassModal.bind(this);
    this.setForceOpen = this.setForceOpen.bind(this);
    this.handleTimerClick = this.handleTimerClick.bind(this);
  }
  componentDidUpdate(prevProps) {
    const {
      amIPresenter: wasPresenter
    } = prevProps;
    const {
      amIPresenter: isPresenter
    } = this.props;
    if (wasPresenter && !isPresenter) {
      this.setExternalVideoModalIsOpen(false);
    }
  }
  handleExternalVideoClick() {
    this.setExternalVideoModalIsOpen(true);
  }
  handleTimerClick() {
    const {
      isTimerActive,
      activateTimer,
      deactivateTimer
    } = this.props;
    if (!isTimerActive) {
      activateTimer();
    } else {
      deactivateTimer();
    }
  }
  getAvailableActions() {
    const {
      intl,
      amIPresenter,
      allowExternalVideo,
      handleTakePresenter,
      isSharingVideo,
      isPollingEnabled,
      stopExternalVideoShare,
      isTimerActive,
      isTimerEnabled,
      layoutContextDispatch,
      amIModerator,
      hasCameraAsContent,
      actionButtonDropdownItems,
      isCameraAsContentEnabled,
      isTimerFeatureEnabled,
      presentations,
      isDirectLeaveButtonEnabled,
      isLayoutsEnabled,
      isPresentationEnabled
    } = this.props;
    const {
      pollBtnLabel,
      presentationLabel,
      takePresenter
    } = intlMessages;
    const {
      formatMessage
    } = intl;
    const actions = [];
    if (amIPresenter && isPresentationEnabled) {
      if (presentations && presentations.length > 1) {
        actions.push({
          key: 'separator-01',
          isSeparator: true
        });
      }
      actions.push({
        icon: 'upload',
        dataTest: 'managePresentations',
        label: formatMessage(presentationLabel),
        key: this.presentationItemId,
        onClick: handlePresentationClick
      });
    }
    if (amIPresenter && isPollingEnabled) {
      actions.push({
        icon: 'polling',
        dataTest: 'polling',
        label: formatMessage(pollBtnLabel),
        key: this.pollId,
        onClick: () => {
          if (Session.equals('pollInitiated', true)) {
            Session.setItem('resetPollPanel', true);
          }
          layoutContextDispatch({
            type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
            value: true
          });
          layoutContextDispatch({
            type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
            value: PANELS.POLL
          });
          Session.setItem('forcePollOpen', true);
        }
      });
    }
    if (!amIPresenter && amIModerator) {
      actions.push({
        icon: 'presentation',
        label: formatMessage(takePresenter),
        key: this.takePresenterId,
        onClick: () => handleTakePresenter()
      });
    }
    if (amIPresenter && allowExternalVideo) {
      actions.push({
        icon: !isSharingVideo ? 'external-video' : 'external-video_off',
        label: !isSharingVideo ? intl.formatMessage(intlMessages.startExternalVideoLabel) : intl.formatMessage(intlMessages.stopExternalVideoLabel),
        key: 'external-video',
        onClick: isSharingVideo ? stopExternalVideoShare : this.handleExternalVideoClick,
        dataTest: 'shareExternalVideo'
      });
    }
    if (amIModerator && isTimerEnabled && isTimerFeatureEnabled) {
      actions.push({
        icon: 'time',
        label: isTimerActive ? intl.formatMessage(intlMessages.deactivateTimerStopwatchLabel) : intl.formatMessage(intlMessages.activateTimerStopwatchLabel),
        key: this.timerId,
        onClick: () => this.handleTimerClick(),
        dataTest: 'timerStopWatchFeature'
      });
    }
    const Settings = getSettingsSingletonInstance();
    const {
      selectedLayout
    } = Settings.application;
    const shouldShowManageLayoutButton = selectedLayout !== LAYOUT_TYPE.CAMERAS_ONLY && selectedLayout !== LAYOUT_TYPE.PRESENTATION_ONLY && selectedLayout !== LAYOUT_TYPE.PARTICIPANTS_AND_CHAT_ONLY;
    if (shouldShowManageLayoutButton && isLayoutsEnabled && (amIModerator || amIPresenter)) {
      actions.push({
        icon: 'manage_layout',
        label: intl.formatMessage(intlMessages.layoutModal),
        key: 'layoutModal',
        onClick: () => this.setLayoutModalIsOpen(true),
        dataTest: 'manageLayoutBtn',
        divider: !isDirectLeaveButtonEnabled
      });
    }
    if (isCameraAsContentEnabled && amIPresenter) {
      actions.push({
        icon: hasCameraAsContent ? 'video_off' : 'video',
        label: hasCameraAsContent ? intl.formatMessage(intlMessages.unshareCameraAsContent) : intl.formatMessage(intlMessages.shareCameraAsContent),
        key: 'camera as content',
        onClick: hasCameraAsContent ? screenshareHasEnded : () => {
          screenshareHasEnded();
          this.setCameraAsContentModalIsOpen(true);
        },
        dataTest: 'shareCameraAsContent'
      });
    }
    actionButtonDropdownItems.forEach(actionButtonItem => {
      switch (actionButtonItem.type) {
        case ActionButtonDropdownItemType.OPTION:
          actions.push({
            icon: actionButtonItem.icon,
            label: actionButtonItem.label,
            key: actionButtonItem.id,
            onClick: actionButtonItem.onClick,
            allowed: actionButtonItem.allowed
          });
          break;
        case ActionButtonDropdownItemType.SEPARATOR:
          actions.push({
            key: actionButtonItem.id,
            allowed: actionButtonItem.allowed,
            isSeparator: true
          });
          break;
        default:
          break;
      }
    });
    return actions;
  }
  makePresentationItems() {
    const {
      presentations,
      setPresentation,
      setPresentationFitToWidth
    } = this.props;
    const presentationItemElements = presentations.sort((a, b) => a.name.localeCompare(b.name)).map(p => {
      const customStyles = {
        color: colorPrimary
      };
      return {
        customStyles: p.current ? customStyles : null,
        icon: 'file',
        iconRight: p.current ? 'check' : null,
        selected: !!p.current,
        label: p.name,
        description: 'uploaded presentation file',
        key: "uploaded-presentation-".concat(p.presentationId),
        onClick: () => {
          setPresentationFitToWidth(false);
          setPresentation(p.presentationId);
        }
      };
    });
    return presentationItemElements;
  }
  setExternalVideoModalIsOpen(value) {
    this.setState({
      isExternalVideoModalOpen: value
    });
  }
  setLayoutModalIsOpen(value) {
    this.setState({
      isLayoutModalOpen: value
    });
  }
  setCameraAsContentModalIsOpen(value) {
    this.setState({
      isCameraAsContentModalOpen: value
    });
  }
  setPropsToPassModal(value) {
    this.setState({
      propsToPassModal: value
    });
  }
  setForceOpen(value) {
    this.setState({
      forceOpen: value
    });
  }
  renderModal(isOpen, setIsOpen, priority, Component) {
    return isOpen ? /*#__PURE__*/React.createElement(Component, {
      onRequestClose: () => setIsOpen(false),
      priority,
      setIsOpen,
      isOpen
    }) : null;
  }
  render() {
    const {
      intl,
      amIPresenter,
      shortcuts: OPEN_ACTIONS_AK,
      isMeteorConnected,
      isDropdownOpen,
      isMobile,
      isRTL,
      propsToPassModal
    } = this.props;
    const {
      isExternalVideoModalOpen,
      isLayoutModalOpen,
      isCameraAsContentModalOpen
    } = this.state;
    const availableActions = this.getAvailableActions();
    const availablePresentations = this.makePresentationItems();
    const children = availablePresentations.length > 1 && amIPresenter ? availablePresentations.concat(availableActions) : availableActions;
    const customStyles = {
      top: '-1rem'
    };
    if (availableActions.length === 0 || !isMeteorConnected) {
      return null;
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BBBMenu, {
      customStyles: !isMobile ? customStyles : null,
      accessKey: OPEN_ACTIONS_AK,
      trigger: /*#__PURE__*/React.createElement(Styled.HideDropdownButton, {
        open: isDropdownOpen,
        hideLabel: true,
        "aria-label": intl.formatMessage(intlMessages.actionsLabel),
        "data-test": "actionsButton",
        label: intl.formatMessage(intlMessages.actionsLabel),
        icon: "plus",
        color: "primary",
        size: "lg",
        circle: true,
        onClick: () => null
      }),
      actions: children,
      opts: {
        id: 'actions-dropdown-menu',
        keepMounted: true,
        transitionDuration: 0,
        elevation: 3,
        getcontentanchorel: null,
        fullwidth: 'true',
        anchorOrigin: {
          vertical: 'top',
          horizontal: isRTL ? 'right' : 'left'
        },
        transformOrigin: {
          vertical: 'bottom',
          horizontal: isRTL ? 'right' : 'left'
        }
      }
    }), this.renderModal(isExternalVideoModalOpen, this.setExternalVideoModalIsOpen, 'low', ExternalVideoModal), this.renderModal(isLayoutModalOpen, this.setLayoutModalIsOpen, 'low', LayoutModalContainer), this.renderModal(isCameraAsContentModalOpen, this.setCameraAsContentModalIsOpen, 'low', () => /*#__PURE__*/React.createElement(VideoPreviewContainer, _extends({
      cameraAsContent: true,
      amIPresenter: true,
      callbackToClose: () => {
        this.setPropsToPassModal({});
        this.setForceOpen(false);
      },
      priority: 'low',
      setIsOpen: this.setCameraAsContentModalIsOpen,
      isOpen: isCameraAsContentModalOpen
    }, propsToPassModal))));
  }
}
ActionsDropdown.propTypes = propTypes;
ActionsDropdown.defaultProps = defaultProps;
module.exportDefault(ActionsDropdown);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/actions-dropdown/container.jsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let ActionsDropdown;
module.link("./component", {
  default(v) {
    ActionsDropdown = v;
  }
}, 2);
let layoutSelectInput, layoutDispatch, layoutSelect;
module.link("../../layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 3);
let SMALL_VIEWPORT_BREAKPOINT, ACTIONS, PANELS;
module.link("../../layout/enums", {
  SMALL_VIEWPORT_BREAKPOINT(v) {
    SMALL_VIEWPORT_BREAKPOINT = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 4);
let useIsCameraAsContentEnabled, useIsLayoutsEnabled, useIsPresentationEnabled, useIsTimerFeatureEnabled;
module.link("/imports/ui/services/features", {
  useIsCameraAsContentEnabled(v) {
    useIsCameraAsContentEnabled = v;
  },
  useIsLayoutsEnabled(v) {
    useIsLayoutsEnabled = v;
  },
  useIsPresentationEnabled(v) {
    useIsPresentationEnabled = v;
  },
  useIsTimerFeatureEnabled(v) {
    useIsTimerFeatureEnabled = v;
  }
}, 5);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 6);
let useShortcut;
module.link("/imports/ui/core/hooks/useShortcut", {
  useShortcut(v) {
    useShortcut = v;
  }
}, 7);
let PROCESSED_PRESENTATIONS_SUBSCRIPTION;
module.link("/imports/ui/components/whiteboard/queries", {
  PROCESSED_PRESENTATIONS_SUBSCRIPTION(v) {
    PROCESSED_PRESENTATIONS_SUBSCRIPTION = v;
  }
}, 8);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 9);
let SET_PRESENTER;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  SET_PRESENTER(v) {
    SET_PRESENTER = v;
  }
}, 10);
let TIMER_ACTIVATE, TIMER_DEACTIVATE;
module.link("../../timer/mutations", {
  TIMER_ACTIVATE(v) {
    TIMER_ACTIVATE = v;
  },
  TIMER_DEACTIVATE(v) {
    TIMER_DEACTIVATE = v;
  }
}, 11);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 12);
let PRESENTATION_SET_CURRENT;
module.link("../../presentation/mutations", {
  PRESENTATION_SET_CURRENT(v) {
    PRESENTATION_SET_CURRENT = v;
  }
}, 13);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 14);
const ActionsDropdownContainer = props => {
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const sidebarNavigation = layoutSelectInput(i => i.sidebarNavigation);
  const {
    width: browserWidth
  } = layoutSelectInput(i => i.browser);
  const isMobile = browserWidth <= SMALL_VIEWPORT_BREAKPOINT;
  const layoutContextDispatch = layoutDispatch();
  const isRTL = layoutSelect(i => i.isRTL);
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let actionButtonDropdownItems = [];
  if (pluginsExtensibleAreasAggregatedState.actionButtonDropdownItems) {
    actionButtonDropdownItems = [...pluginsExtensibleAreasAggregatedState.actionButtonDropdownItems];
  }
  const openActions = useShortcut('openActions');
  const {
    data: presentationData
  } = useDeduplicatedSubscription(PROCESSED_PRESENTATIONS_SUBSCRIPTION);
  const presentations = (presentationData === null || presentationData === void 0 ? void 0 : presentationData.pres_presentation) || [];
  const [setPresenter] = useMutation(SET_PRESENTER);
  const [timerActivate] = useMutation(TIMER_ACTIVATE);
  const [timerDeactivate] = useMutation(TIMER_DEACTIVATE);
  const [presentationSetCurrent] = useMutation(PRESENTATION_SET_CURRENT);
  const handleTakePresenter = () => {
    setPresenter({
      variables: {
        userId: Auth.userID
      }
    });
  };
  const setPresentation = presentationId => {
    presentationSetCurrent({
      variables: {
        presentationId
      }
    });
  };
  const activateTimer = () => {
    const TIMER_CONFIG = window.meetingClientSettings.public.timer;
    const MILLI_IN_MINUTE = 60000;
    const stopwatch = true;
    const running = false;
    const time = TIMER_CONFIG.time * MILLI_IN_MINUTE;
    timerActivate({
      variables: {
        stopwatch,
        running,
        time
      }
    });
    setTimeout(() => {
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
        value: true
      });
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
        value: PANELS.TIMER
      });
    }, 500);
  };
  const isDropdownOpen = useStorageKey('dropdownOpen');
  const isLayoutsEnabled = useIsLayoutsEnabled();
  const isPresentationEnabled = useIsPresentationEnabled();
  const isTimerFeatureEnabled = useIsTimerFeatureEnabled();
  const isCameraAsContentEnabled = useIsCameraAsContentEnabled();
  return /*#__PURE__*/React.createElement(ActionsDropdown, _objectSpread({
    layoutContextDispatch,
    sidebarContent,
    sidebarNavigation,
    isMobile,
    isRTL,
    actionButtonDropdownItems,
    presentations,
    isTimerFeatureEnabled,
    isDropdownOpen,
    setPresentation,
    isCameraAsContentEnabled,
    handleTakePresenter,
    activateTimer,
    deactivateTimer: timerDeactivate,
    shortcuts: openActions,
    isLayoutsEnabled,
    isPresentationEnabled
  }, props));
};
module.exportDefault(ActionsDropdownContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/actions-dropdown/styles.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 1);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 2);
const HideDropdownButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n"])), _ref => {
  let {
    open
  } = _ref;
  return open && "\n      @media ".concat(smallOnly, " {\n        display:none;\n      }\n   ");
});
module.exportDefault({
  HideDropdownButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presentation-options":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/presentation-options/component.jsx                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 4);
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  setPresentationIsOpen: PropTypes.func.isRequired
};
const intlMessages = defineMessages({
  minimizePresentationLabel: {
    id: 'app.actionsBar.actionsDropdown.minimizePresentationLabel',
    description: ''
  },
  minimizePresentationDesc: {
    id: 'app.actionsBar.actionsDropdown.restorePresentationDesc',
    description: ''
  },
  restorePresentationLabel: {
    id: 'app.actionsBar.actionsDropdown.restorePresentationLabel',
    description: 'Restore Presentation option label'
  },
  restorePresentationDesc: {
    id: 'app.actionsBar.actionsDropdown.restorePresentationDesc',
    description: 'button to restore presentation after it has been closed'
  }
});
const PresentationOptionsContainer = _ref => {
  let {
    intl,
    presentationIsOpen,
    setPresentationIsOpen,
    layoutContextDispatch,
    hasPresentation,
    hasExternalVideo,
    hasScreenshare,
    hasPinnedSharedNotes,
    hasGenericContent,
    hasCameraAsContent
  } = _ref;
  let buttonType = 'presentation';
  if (hasExternalVideo) {
    // hack until we have an external-video icon
    buttonType = 'external-video';
  } else if (hasScreenshare) {
    buttonType = 'desktop';
  } else if (hasCameraAsContent) {
    buttonType = 'video';
  }
  const isThereCurrentPresentation = hasExternalVideo || hasScreenshare || hasPresentation || hasPinnedSharedNotes || hasGenericContent || hasCameraAsContent;
  return /*#__PURE__*/React.createElement(Button, {
    icon: "".concat(buttonType).concat(!presentationIsOpen ? '_off' : ''),
    label: intl.formatMessage(!presentationIsOpen ? intlMessages.restorePresentationLabel : intlMessages.minimizePresentationLabel),
    "aria-label": intl.formatMessage(!presentationIsOpen ? intlMessages.restorePresentationLabel : intlMessages.minimizePresentationLabel),
    "aria-describedby": intl.formatMessage(!presentationIsOpen ? intlMessages.restorePresentationDesc : intlMessages.minimizePresentationDesc),
    description: intl.formatMessage(!presentationIsOpen ? intlMessages.restorePresentationDesc : intlMessages.minimizePresentationDesc),
    color: presentationIsOpen ? "primary" : "default",
    hideLabel: true,
    circle: true,
    size: "lg",
    onClick: () => {
      setPresentationIsOpen(layoutContextDispatch, !presentationIsOpen);
      if (!hasExternalVideo && !hasScreenshare && !hasPinnedSharedNotes) {
        Session.setItem('presentationLastState', !presentationIsOpen);
      }
    },
    id: "restore-presentation",
    ghost: !presentationIsOpen,
    disabled: !isThereCurrentPresentation,
    "data-test": !presentationIsOpen ? 'restorePresentation' : 'minimizePresentation'
  });
};
PresentationOptionsContainer.propTypes = propTypes;
module.exportDefault(injectIntl(PresentationOptionsContainer));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"quick-poll-dropdown":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/quick-poll-dropdown/component.jsx                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let Dropdown;
module.link("/imports/ui/components/dropdown/component", {
  default(v) {
    Dropdown = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let PANELS, ACTIONS;
module.link("../../layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 5);
let uniqueId, safeMatch;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  },
  safeMatch(v) {
    safeMatch = v;
  }
}, 6);
let PollService;
module.link("/imports/ui/components/poll/service", {
  default(v) {
    PollService = v;
  }
}, 7);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 8);
const intlMessages = defineMessages({
  quickPollLabel: {
    id: 'app.poll.quickPollTitle',
    description: 'Quick poll button title'
  },
  trueOptionLabel: {
    id: 'app.poll.t',
    description: 'Poll true option value'
  },
  falseOptionLabel: {
    id: 'app.poll.f',
    description: 'Poll false option value'
  },
  yesOptionLabel: {
    id: 'app.poll.y',
    description: 'Poll yes option value'
  },
  noOptionLabel: {
    id: 'app.poll.n',
    description: 'Poll no option value'
  },
  abstentionOptionLabel: {
    id: 'app.poll.abstention',
    description: 'Poll Abstention option value'
  },
  typedRespLabel: {
    id: 'app.poll.userResponse.label',
    description: 'quick poll typed response label'
  }
});
const propTypes = {
  amIPresenter: PropTypes.bool.isRequired
};
const QuickPollDropdown = props => {
  var _question$2;
  const {
    amIPresenter,
    startPoll,
    stopPoll,
    currentSlide,
    activePoll,
    className,
    layoutContextDispatch,
    pollTypes
  } = props;
  const intl = useIntl();
  const POLL_SETTINGS = window.meetingClientSettings.public.poll;
  const MAX_CUSTOM_FIELDS = POLL_SETTINGS.maxCustom;
  const MAX_CHAR_LIMIT = POLL_SETTINGS.maxTypedAnswerLength;
  const CANCELED_POLL_DELAY = 250;

  // Utility function to escape special characters for regex
  const escapeRegExp = string => string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

  // Function to create a regex pattern
  const createPattern = values => new RegExp(".*(".concat(escapeRegExp(values[0]), "\\/").concat(escapeRegExp(values[1]), "|").concat(escapeRegExp(values[1]), "\\/").concat(escapeRegExp(values[0]), ").*"), 'gmi');
  const yesValue = intl.formatMessage(intlMessages.yesOptionLabel);
  const noValue = intl.formatMessage(intlMessages.noOptionLabel);
  const abstentionValue = intl.formatMessage(intlMessages.abstentionOptionLabel);
  const trueValue = intl.formatMessage(intlMessages.trueOptionLabel);
  const falseValue = intl.formatMessage(intlMessages.falseOptionLabel);
  const quickPollOptions = [];
  let {
    content
  } = currentSlide;
  let lines = content.split('\n');
  let questions = [];
  let questionLines = [];
  for (let line of lines) {
    let startsWithCapital = /^[A-Z]/.test(line);
    let isEndOfQuestion = /\?$/.test(line);
    if (startsWithCapital) {
      if (questionLines.length > 0) {
        questions.push(questionLines.join(' '));
      }
      questionLines = [];
    }
    questionLines.push(line.trim());
    if (isEndOfQuestion) {
      questions.push(questionLines.join(' '));
      questionLines = [];
    }
  }
  if (questionLines.length > 0) {
    questions.push(questionLines.join(' '));
  }
  const question = questions.filter(q => /^[A-Z].*\?$/.test(q === null || q === void 0 ? void 0 : q.trim()));
  if ((question === null || question === void 0 ? void 0 : question.length) > 0) {
    var _question$;
    question[0] = (_question$ = question[0]) === null || _question$ === void 0 ? void 0 : _question$.replace(/\n/g, ' ');
    const urlRegex = /\bhttps?:\/\/\S+\b/g;
    const hasUrl = safeMatch(urlRegex, question[0], '');
    if (hasUrl.length > 0) question.pop();
  }
  const doubleQuestionRegex = /\?{2}/gm;
  const doubleQuestion = safeMatch(doubleQuestionRegex, content, false);
  const yesNoPatt = createPattern([yesValue, noValue]);
  const hasYN = safeMatch(yesNoPatt, content, false);
  const trueFalsePatt = createPattern([trueValue, falseValue]);
  const hasTF = safeMatch(trueFalsePatt, content, false);
  const pollRegex = /\b[1-9A-Ia-i][.)] .*/g;
  let optionsPoll = safeMatch(pollRegex, content, []);
  const optionsWithLabels = [];
  if (hasYN) {
    optionsPoll = ['yes', 'no'];
  }
  if (optionsPoll) {
    optionsPoll = optionsPoll.map(opt => {
      const formattedOpt = opt.substring(0, MAX_CHAR_LIMIT);
      optionsWithLabels.push(formattedOpt);
      return "\r".concat(opt[0], ".");
    });
  }
  optionsPoll.reduce((acc, currentValue) => {
    const lastElement = acc[acc.length - 1];
    if (!lastElement) {
      acc.push({
        options: [currentValue]
      });
      return acc;
    }
    const {
      options
    } = lastElement;
    const lastOption = options[options.length - 1];
    const isLastOptionInteger = !!parseInt(lastOption.charAt(1), 10);
    const isCurrentValueInteger = !!parseInt(currentValue.charAt(1), 10);
    if (isLastOptionInteger === isCurrentValueInteger) {
      if (currentValue.toLowerCase().charCodeAt(1) > lastOption.toLowerCase().charCodeAt(1)) {
        options.push(currentValue);
      } else {
        acc.push({
          options: [currentValue]
        });
      }
    } else {
      acc.push({
        options: [currentValue]
      });
    }
    return acc;
  }, []).filter(_ref => {
    let {
      options
    } = _ref;
    return options.length > 1 && options.length < 10;
  }).forEach(p => {
    const poll = p;
    if (doubleQuestion) poll.multiResp = true;
    if (poll.options.length <= 5 || MAX_CUSTOM_FIELDS <= 5) {
      const maxAnswer = poll.options.length > MAX_CUSTOM_FIELDS ? MAX_CUSTOM_FIELDS : poll.options.length;
      quickPollOptions.push({
        type: "".concat(pollTypes.Letter).concat(maxAnswer),
        poll
      });
    } else {
      quickPollOptions.push({
        type: pollTypes.Custom,
        poll
      });
    }
  });
  if (question.length > 0 && optionsPoll.length === 0 && !doubleQuestion && !hasYN && !hasTF) {
    quickPollOptions.push({
      type: 'R-',
      poll: {
        question: question[0]
      }
    });
  }
  if (quickPollOptions.length > 0) {
    content = content.replace(new RegExp(pollRegex), '');
  }
  const ynPoll = PollService.matchYesNoPoll(yesValue, noValue, content);
  const ynaPoll = PollService.matchYesNoAbstentionPoll(yesValue, noValue, abstentionValue, content);
  const tfPoll = PollService.matchTrueFalsePoll(trueValue, falseValue, content);
  ynPoll.forEach(poll => quickPollOptions.push({
    type: pollTypes.YesNo,
    poll
  }));
  ynaPoll.forEach(poll => quickPollOptions.push({
    type: pollTypes.YesNoAbstention,
    poll
  }));
  tfPoll.forEach(poll => quickPollOptions.push({
    type: pollTypes.TrueFalse,
    poll
  }));
  const pollQuestion = (question === null || question === void 0 ? void 0 : question.length) > 0 && ((_question$2 = question[0]) === null || _question$2 === void 0 ? void 0 : _question$2.replace(/ *\([^)]*\) */g, '')) || '';
  const slideId = currentSlide.id;
  const handleClickQuickPoll = lCDispatch => {
    lCDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: true
    });
    lCDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.POLL
    });
    Session.setItem('forcePollOpen', true);
    Session.setItem('pollInitiated', true);
  };
  const getAvailableQuickPolls = (slideId, parsedSlides, funcStartPoll, _pollTypes, _layoutContextDispatch) => {
    const pollItemElements = parsedSlides.map(poll => {
      var _itemLabel;
      const {
        poll: label
      } = poll;
      const {
        type,
        poll: pollData
      } = poll;
      let itemLabel = label;
      const letterAnswers = [];
      if (type === 'R-') {
        return /*#__PURE__*/React.createElement(Dropdown.DropdownListItem, {
          label: intl.formatMessage(intlMessages.typedRespLabel),
          key: uniqueId('quick-poll-item'),
          onClick: () => {
            if (activePoll) {
              stopPoll();
            }
            setTimeout(() => {
              handleClickQuickPoll(_layoutContextDispatch);
              funcStartPoll(type, slideId, letterAnswers, pollData === null || pollData === void 0 ? void 0 : pollData.question);
            }, CANCELED_POLL_DELAY);
          },
          question: pollData === null || pollData === void 0 ? void 0 : pollData.question
        });
      }
      if (type !== _pollTypes.YesNo && type !== _pollTypes.YesNoAbstention && type !== _pollTypes.TrueFalse) {
        const {
          options
        } = itemLabel;
        itemLabel = options.join('/').replace(/[\n.)]/g, '');
        if (type === _pollTypes.Custom) {
          for (let i = 0; i < options.length; i += 1) {
            var _options$i;
            const letterOption = (_options$i = options[i]) === null || _options$i === void 0 ? void 0 : _options$i.replace(/[\r.)]/g, '').toUpperCase();
            if (letterAnswers.length < MAX_CUSTOM_FIELDS) {
              letterAnswers.push(letterOption);
            } else {
              break;
            }
          }
        }
      }

      // removes any whitespace from the label
      itemLabel = (_itemLabel = itemLabel) === null || _itemLabel === void 0 ? void 0 : _itemLabel.replace(/\s+/g, '').toUpperCase();
      const numChars = {
        1: 'A',
        2: 'B',
        3: 'C',
        4: 'D',
        5: 'E',
        6: 'F',
        7: 'G'
      };
      itemLabel = itemLabel.split('').map(c => {
        if (numChars[c]) return numChars[c];
        return c;
      }).join('');
      return /*#__PURE__*/React.createElement(Dropdown.DropdownListItem, {
        label: itemLabel,
        key: uniqueId('quick-poll-item'),
        onClick: () => {
          if (activePoll) {
            stopPoll();
          }
          setTimeout(() => {
            handleClickQuickPoll(_layoutContextDispatch);
            funcStartPoll(type, slideId, letterAnswers, pollQuestion, pollData === null || pollData === void 0 ? void 0 : pollData.multiResp);
          }, CANCELED_POLL_DELAY);
        },
        answers: letterAnswers,
        multiResp: pollData === null || pollData === void 0 ? void 0 : pollData.multiResp
      });
    });
    const sizes = [];
    return pollItemElements.filter(el => {
      const {
        label
      } = el.props;
      if (label.length === sizes[sizes.length - 1]) return false;
      sizes.push(label.length);
      return el;
    });
  };
  const quickPolls = getAvailableQuickPolls(slideId, quickPollOptions, startPoll, pollTypes, layoutContextDispatch);
  if (quickPollOptions.length === 0) return null;
  let answers = null;
  let quickPollLabel = '';
  let multiResponse = false;
  if (quickPolls.length > 0) {
    const {
      props: pollProps
    } = quickPolls[0];
    quickPollLabel = pollProps === null || pollProps === void 0 ? void 0 : pollProps.label;
    answers = pollProps === null || pollProps === void 0 ? void 0 : pollProps.answers;
    multiResponse = pollProps === null || pollProps === void 0 ? void 0 : pollProps.multiResp;
  }
  let singlePollType = null;
  if (quickPolls.length === 1 && quickPollOptions.length) {
    const {
      type
    } = quickPollOptions[0];
    singlePollType = type;
  }
  let btn = /*#__PURE__*/React.createElement(Styled.QuickPollButton, {
    "aria-label": intl.formatMessage(intlMessages.quickPollLabel),
    label: quickPollLabel,
    tooltipLabel: intl.formatMessage(intlMessages.quickPollLabel),
    onClick: () => {
      if (activePoll) {
        stopPoll();
      }
      setTimeout(() => {
        handleClickQuickPoll(layoutContextDispatch);
        if (singlePollType === 'R-' || singlePollType === 'TF' || singlePollType === 'YN') {
          startPoll(singlePollType, currentSlide.id, answers, pollQuestion, multiResponse);
        } else {
          startPoll(pollTypes.Custom, currentSlide.id, optionsWithLabels, pollQuestion, multiResponse);
        }
      }, CANCELED_POLL_DELAY);
    },
    size: "lg",
    "data-test": "quickPollBtn",
    color: "primary"
  });
  const usePollDropdown = quickPollOptions && quickPollOptions.length && quickPolls.length > 1;
  let dropdown = null;
  if (usePollDropdown) {
    btn = /*#__PURE__*/React.createElement(Styled.QuickPollButton, {
      "aria-label": intl.formatMessage(intlMessages.quickPollLabel),
      label: quickPollLabel,
      tooltipLabel: intl.formatMessage(intlMessages.quickPollLabel),
      onClick: () => null,
      size: "lg",
      "data-test": "yesNoQuickPoll"
    });
    dropdown = /*#__PURE__*/React.createElement(Dropdown, {
      className: className
    }, /*#__PURE__*/React.createElement(Dropdown.DropdownTrigger, {
      tabIndex: 0
    }, btn), /*#__PURE__*/React.createElement(Dropdown.DropdownContent, null, /*#__PURE__*/React.createElement(Dropdown.DropdownList, null, quickPolls)));
  }
  return amIPresenter && usePollDropdown ? dropdown : btn;
};
QuickPollDropdown.propTypes = propTypes;
module.exportDefault(QuickPollDropdown);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/quick-poll-dropdown/container.jsx                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PollService;
module.link("/imports/ui/components/poll/service", {
  default(v) {
    PollService = v;
  }
}, 1);
let QuickPollDropdown;
module.link("./component", {
  default(v) {
    QuickPollDropdown = v;
  }
}, 2);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 3);
let layoutDispatch;
module.link("../../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 4);
let POLL_CANCEL;
module.link("/imports/ui/components/poll/mutations", {
  POLL_CANCEL(v) {
    POLL_CANCEL = v;
  }
}, 5);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 6);
const QuickPollDropdownContainer = props => {
  const {
    pollTypes
  } = PollService;
  const layoutContextDispatch = layoutDispatch();
  const activePoll = useStorageKey('pollInitiated') || false;
  const [stopPoll] = useMutation(POLL_CANCEL);
  return /*#__PURE__*/React.createElement(QuickPollDropdown, _objectSpread({
    layoutContextDispatch,
    pollTypes,
    stopPoll,
    activePoll
  }, props));
};
module.exportDefault(QuickPollDropdownContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/quick-poll-dropdown/styles.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let borderSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSizeLarge(v) {
    borderSizeLarge = v;
  }
}, 2);
let headingsFontWeight;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  headingsFontWeight(v) {
    headingsFontWeight = v;
  }
}, 3);
const QuickPollButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-left: .5rem;\n  padding: .1rem;\n  box-shadow: none !important;\n  background-clip: unset !important;\n\n  & > span:first-child {\n    border-radius: ", ";\n    font-size: small;\n    font-weight: ", ";\n    opacity: 1;\n  }\n\n  & > span:first-child:hover {\n    opacity: 1 !important;\n  }\n"])), borderSizeLarge, headingsFontWeight);
module.exportDefault({
  QuickPollButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"reactions-button":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/reactions-button/component.jsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 1);
let React, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 3);
let convertRemToPixels;
module.link("/imports/utils/dom-utils", {
  convertRemToPixels(v) {
    convertRemToPixels = v;
  }
}, 4);
let data;
module.link("@emoji-mart/data", {
  default(v) {
    data = v;
  }
}, 5);
let withShortcutHelper;
module.link("/imports/ui/components/shortcut-help/service", {
  default(v) {
    withShortcutHelper = v;
  }
}, 6);
let init;
module.link("emoji-mart", {
  init(v) {
    init = v;
  }
}, 7);
let SET_RAISE_HAND, SET_REACTION_EMOJI;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  SET_RAISE_HAND(v) {
    SET_RAISE_HAND = v;
  },
  SET_REACTION_EMOJI(v) {
    SET_REACTION_EMOJI = v;
  }
}, 8);
let SET_AWAY;
module.link("/imports/ui/components/user-list/user-list-content/user-participants/user-list-participants/user-actions/mutations", {
  SET_AWAY(v) {
    SET_AWAY = v;
  }
}, 9);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 10);
let Toggle;
module.link("/imports/ui/components/common/switch/component", {
  default(v) {
    Toggle = v;
  }
}, 11);
let useToggleVoice;
module.link("/imports/ui/components/audio/audio-graphql/hooks/useToggleVoice", {
  default(v) {
    useToggleVoice = v;
  }
}, 12);
let muteAway;
module.link("/imports/ui/components/audio/audio-graphql/audio-controls/input-stream-live-selector/service", {
  muteAway(v) {
    muteAway = v;
  }
}, 13);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 14);
const ReactionsButton = props => {
  const {
    intl,
    actionsBarRef,
    userId,
    raiseHand,
    away,
    muted,
    isMobile,
    shortcuts,
    currentUserReaction,
    autoCloseReactionsBar
  } = props;
  const REACTIONS = window.meetingClientSettings.public.userReaction.reactions;

  // initialize emoji-mart data, need for the new version
  init({
    data
  });
  const [setRaiseHand] = useMutation(SET_RAISE_HAND);
  const [setAway] = useMutation(SET_AWAY);
  const [setReactionEmoji] = useMutation(SET_REACTION_EMOJI);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const voiceToggle = useToggleVoice();
  const intlMessages = defineMessages({
    reactionsLabel: {
      id: 'app.actionsBar.reactions.reactionsButtonLabel',
      description: 'reactions Label'
    },
    raiseHandLabel: {
      id: 'app.actionsBar.reactions.raiseHand',
      description: 'raise Hand Label'
    },
    notRaiseHandLabel: {
      id: 'app.actionsBar.reactions.lowHand',
      description: 'not Raise Hand Label'
    },
    setAwayLabel: {
      id: 'app.actionsBar.reactions.setAway',
      description: 'setAway Label'
    },
    setActiveLabel: {
      id: 'app.actionsBar.reactions.setActive',
      description: 'setActive Label'
    }
  });
  const handleClose = () => {
    setShowEmojiPicker(false);
    setTimeout(() => {
      document.activeElement.blur();
    }, 0);
  };
  const handleReactionSelect = reaction => {
    const newReaction = currentUserReaction === reaction ? 'none' : reaction;
    setReactionEmoji({
      variables: {
        reactionEmoji: newReaction
      }
    });
  };
  const handleRaiseHandButtonClick = () => {
    setRaiseHand({
      variables: {
        userId,
        raiseHand: !raiseHand
      }
    });
  };
  const handleToggleAFK = () => {
    muteAway(muted, away, voiceToggle);
    setAway({
      variables: {
        away: !away
      }
    });
  };
  const ToggleAFKLabel = () => away ? intl.formatMessage(intlMessages.setActiveLabel) : intl.formatMessage(intlMessages.setAwayLabel);
  const RaiseHandButtonLabel = () => {
    if (isMobile) return null;
    return raiseHand ? intl.formatMessage(intlMessages.notRaiseHandLabel) : intl.formatMessage(intlMessages.raiseHandLabel);
  };
  const customStyles = {
    top: '-1rem',
    borderRadius: '1.7rem'
  };
  const actionCustomStyles = {
    paddingLeft: 0,
    paddingRight: 0,
    paddingTop: isMobile ? '0' : '0.5rem',
    paddingBottom: isMobile ? '0' : '0.5rem'
  };
  const emojiProps = {
    size: convertRemToPixels(1.5),
    padding: '4px'
  };
  const handReaction = {
    id: 'hand',
    native: '✋'
  };
  const awayReaction = {
    id: 'clock7',
    native: '⏰'
  };
  let actions = [];
  REACTIONS.forEach(_ref => {
    let {
      id,
      native
    } = _ref;
    actions.push({
      label: /*#__PURE__*/React.createElement(Styled.ButtonWrapper, {
        active: currentUserReaction === native
      }, /*#__PURE__*/React.createElement("em-emoji", _extends({
        key: native,
        native: native
      }, emojiProps))),
      key: id,
      onClick: () => handleReactionSelect(native),
      customStyles: actionCustomStyles
    });
  });
  actions.push({
    label: /*#__PURE__*/React.createElement(Styled.ToggleButtonWrapper, null, /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: away,
      onChange: () => {
        handleToggleAFK();
      },
      ariaLabel: ToggleAFKLabel(),
      showToggleLabel: false
    }), ToggleAFKLabel()),
    key: 'none',
    isToggle: true,
    onClick: () => handleToggleAFK(),
    customStyles: _objectSpread(_objectSpread({}, actionCustomStyles), {}, {
      width: 'auto'
    })
  });
  actions.push({
    label: /*#__PURE__*/React.createElement(Styled.RaiseHandButtonWrapper, {
      accessKey: shortcuts.raisehand,
      isMobile: isMobile,
      "data-test": raiseHand ? 'lowerHandBtn' : 'raiseHandBtn',
      active: raiseHand
    }, /*#__PURE__*/React.createElement("em-emoji", _extends({
      key: handReaction.id,
      native: handReaction.native,
      emoji: {
        id: handReaction.id
      }
    }, emojiProps)), RaiseHandButtonLabel()),
    key: 'hand',
    onClick: () => handleRaiseHandButtonClick(),
    customStyles: _objectSpread(_objectSpread({}, actionCustomStyles), {}, {
      width: 'auto'
    })
  });
  const icon = !raiseHand && !away && currentUserReaction === 'none' ? 'hand' : null;
  const currentUserReactionEmoji = REACTIONS.find(_ref2 => {
    let {
      native
    } = _ref2;
    return native === currentUserReaction;
  });
  let customIcon = null;
  if (raiseHand) {
    customIcon = /*#__PURE__*/React.createElement("em-emoji", _extends({
      key: handReaction.id,
      native: handReaction.native,
      emoji: handReaction
    }, emojiProps));
  } else {
    if (!icon) {
      customIcon = /*#__PURE__*/React.createElement("em-emoji", _extends({
        key: currentUserReactionEmoji === null || currentUserReactionEmoji === void 0 ? void 0 : currentUserReactionEmoji.id,
        native: currentUserReactionEmoji === null || currentUserReactionEmoji === void 0 ? void 0 : currentUserReactionEmoji.native,
        emoji: {
          id: currentUserReactionEmoji === null || currentUserReactionEmoji === void 0 ? void 0 : currentUserReactionEmoji.id
        }
      }, emojiProps));
    }
  }
  if (away) {
    customIcon = /*#__PURE__*/React.createElement("em-emoji", _extends({
      key: awayReaction.id,
      native: awayReaction.native,
      emoji: awayReaction
    }, emojiProps));
  }
  return /*#__PURE__*/React.createElement(BBBMenu, {
    trigger: /*#__PURE__*/React.createElement(Styled.ReactionsDropdown, {
      id: "interactionsButton"
    }, /*#__PURE__*/React.createElement(Styled.RaiseHandButton, {
      "data-test": "reactionsButton",
      icon: icon,
      customIcon: customIcon,
      label: intl.formatMessage(intlMessages.reactionsLabel),
      description: "Reactions",
      ghost: !showEmojiPicker && !customIcon,
      onKeyPress: () => {},
      onClick: () => setShowEmojiPicker(true),
      color: showEmojiPicker || customIcon ? 'primary' : 'default',
      hideLabel: true,
      circle: true,
      size: "lg"
    })),
    actions: actions,
    onCloseCallback: () => handleClose(),
    customAnchorEl: !isMobile ? actionsBarRef.current : null,
    customStyles: customStyles,
    open: showEmojiPicker,
    hasRoundedCorners: true,
    overrideMobileStyles: true,
    isHorizontal: !isMobile,
    isMobile: isMobile,
    roundButtons: true,
    keepOpen: !autoCloseReactionsBar,
    opts: {
      id: 'reactions-dropdown-menu',
      keepMounted: true,
      transitionDuration: 0,
      elevation: 3,
      getcontentanchorel: null,
      anchorOrigin: {
        vertical: 'top',
        horizontal: 'center'
      },
      transformOrigin: {
        vertical: 'bottom',
        horizontal: 'center'
      }
    }
  });
};
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  userId: PropTypes.string.isRequired,
  sidebarContentPanel: PropTypes.string.isRequired,
  layoutContextDispatch: PropTypes.func.isRequired,
  muted: PropTypes.bool.isRequired
};
ReactionsButton.propTypes = propTypes;
module.exportDefault(withShortcutHelper(ReactionsButton, ['raiseHand']));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/reactions-button/container.jsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let _objectDestructuringEmpty;
module.link("@babel/runtime/helpers/objectDestructuringEmpty", {
  default(v) {
    _objectDestructuringEmpty = v;
  }
}, 1);
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 2);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let layoutSelectInput, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 1);
let injectIntl;
module.link("react-intl", {
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let ReactionsButton;
module.link("./component", {
  default(v) {
    ReactionsButton = v;
  }
}, 3);
let SMALL_VIEWPORT_BREAKPOINT;
module.link("/imports/ui/components/layout/enums", {
  SMALL_VIEWPORT_BREAKPOINT(v) {
    SMALL_VIEWPORT_BREAKPOINT = v;
  }
}, 4);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 5);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 6);
let useSettings;
module.link("/imports/ui/services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 7);
let SETTINGS;
module.link("/imports/ui/services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 8);
let useWhoIsUnmuted;
module.link("/imports/ui/core/hooks/useWhoIsUnmuted", {
  default(v) {
    useWhoIsUnmuted = v;
  }
}, 9);
const ReactionsButtonContainer = _ref => {
  var _currentUserData$reac;
  let props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  const layoutContextDispatch = layoutDispatch();
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    sidebarContentPanel
  } = sidebarContent;
  const {
    width: browserWidth
  } = layoutSelectInput(i => i.browser);
  const isMobile = browserWidth <= SMALL_VIEWPORT_BREAKPOINT;
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    raiseHand: user.raiseHand,
    away: user.away,
    voice: user.voice,
    reactionEmoji: user.reactionEmoji
  }));
  const {
    data: unmutedUsers
  } = useWhoIsUnmuted();
  const currentUser = {
    userId: Auth.userID,
    raiseHand: currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.raiseHand,
    away: currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.away,
    muted: !unmutedUsers[Auth.userID]
  };
  const {
    autoCloseReactionsBar
  } = useSettings(SETTINGS.APPLICATION);
  return /*#__PURE__*/React.createElement(ReactionsButton, _objectSpread(_objectSpread({
    currentUserReaction: (_currentUserData$reac = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.reactionEmoji) !== null && _currentUserData$reac !== void 0 ? _currentUserData$reac : 'none',
    layoutContextDispatch,
    sidebarContentPanel,
    isMobile,
    autoCloseReactionsBar
  }, currentUser), props));
};
module.exportDefault(injectIntl(ReactionsButtonContainer));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/reactions-button/styles.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 1);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 2);
let colorGrayDark, colorGrayLightest, btnPrimaryColor, btnPrimaryActiveBg;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  btnPrimaryColor(v) {
    btnPrimaryColor = v;
  },
  btnPrimaryActiveBg(v) {
    btnPrimaryActiveBg = v;
  }
}, 3);
const RaiseHandButton = styled(Button)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n", "\n"])), _ref => {
  let {
    ghost
  } = _ref;
  return ghost && "\n  & > span {\n    box-shadow: none;\n    background-color: transparent !important;\n    border-color: ".concat(colorWhite, " !important;\n  }\n   ");
});
const ReactionsDropdown = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n"])));
const ButtonWrapper = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  border: 1px solid transparent;\n  cursor: pointer;\n  height: 2.5rem;\n  display: flex;\n  align-items: center;\n  border-radius: 50%;\n  margin: 0 .5rem;\n\n  &:focus {\n    background-color: ", ";\n  }\n\n  & > button {\n    cursor: pointer;\n    flex: auto;\n  }\n\n  & > * > span {\n    padding: 4px;\n  }\n\n  ", "\n"])), colorGrayDark, _ref2 => {
  let {
    active
  } = _ref2;
  return active && "\n    color: ".concat(btnPrimaryColor, ";\n    background-color: ").concat(btnPrimaryActiveBg, ";\n\n    &:hover{\n      filter: brightness(90%);\n      color: ").concat(btnPrimaryColor, ";\n      background-color: ").concat(btnPrimaryActiveBg, " !important;\n    }\n  ");
});
const RaiseHandButtonWrapper = styled(ButtonWrapper)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  width: 2.5rem;\n  border-radius: 1.7rem;\n\n\n  ", "\n\n  ", "\n"])), _ref3 => {
  let {
    isMobile
  } = _ref3;
  return !isMobile && "\n    border: 1px solid ".concat(colorGrayLightest, ";\n    padding: 1rem 0.5rem;\n    width: auto;\n  ");
}, _ref4 => {
  let {
    active
  } = _ref4;
  return active && "\n    color: ".concat(btnPrimaryColor, ";\n    background-color: ").concat(btnPrimaryActiveBg, ";\n\n    &:hover{\n      filter: brightness(90%);\n      color: ").concat(btnPrimaryColor, ";\n      background-color: ").concat(btnPrimaryActiveBg, " !important;\n    }  \n  ");
});
const ToggleButtonWrapper = styled(ButtonWrapper)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  width: auto;\n  padding: 1rem 0.5rem;\n  cursor: inherit;\n  & > div {\n    margin-right: 0.5rem;\n    filter: grayscale(100%);\n  }\n  &:hover {\n    background-color: transparent !important;\n  }\n"])));
module.exportDefault({
  RaiseHandButton,
  ReactionsDropdown,
  ButtonWrapper,
  RaiseHandButtonWrapper,
  ToggleButtonWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"screenshare":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/screenshare/component.jsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, memo, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  memo(v) {
    memo = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 3);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 4);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 5);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 6);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
let ScreenshareBridgeService;
module.link("/imports/api/screenshare/client/bridge/service", {
  default(v) {
    ScreenshareBridgeService = v;
  }
}, 9);
let shareScreen, screenshareHasEnded, useIsCameraAsContentBroadcasting;
module.link("/imports/ui/components/screenshare/service", {
  shareScreen(v) {
    shareScreen = v;
  },
  screenshareHasEnded(v) {
    screenshareHasEnded = v;
  },
  useIsCameraAsContentBroadcasting(v) {
    useIsCameraAsContentBroadcasting = v;
  }
}, 10);
let SCREENSHARING_ERRORS;
module.link("/imports/api/screenshare/client/bridge/errors", {
  SCREENSHARING_ERRORS(v) {
    SCREENSHARING_ERRORS = v;
  }
}, 11);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 12);
let parsePayloads;
module.link("sdp-transform", {
  parsePayloads(v) {
    parsePayloads = v;
  }
}, 13);
let EXTERNAL_VIDEO_STOP;
module.link("../../external-video-player/mutations", {
  EXTERNAL_VIDEO_STOP(v) {
    EXTERNAL_VIDEO_STOP = v;
  }
}, 14);
const {
  isMobile
} = deviceInfo;
const {
  isSafari,
  isTabletApp
} = browserInfo;
const propTypes = {
  intl: PropTypes.objectOf(Object).isRequired,
  enabled: PropTypes.bool.isRequired,
  amIPresenter: PropTypes.bool,
  isScreenBroadcasting: PropTypes.bool.isRequired,
  isMeteorConnected: PropTypes.bool.isRequired,
  screenshareDataSavingSetting: PropTypes.bool.isRequired
};
const intlMessages = defineMessages({
  desktopShareLabel: {
    id: 'app.actionsBar.actionsDropdown.desktopShareLabel',
    description: 'Desktop Share option label'
  },
  stopDesktopShareLabel: {
    id: 'app.actionsBar.actionsDropdown.stopDesktopShareLabel',
    description: 'Stop Desktop Share option label'
  },
  desktopShareDesc: {
    id: 'app.actionsBar.actionsDropdown.desktopShareDesc',
    description: 'adds context to desktop share option'
  },
  stopDesktopShareDesc: {
    id: 'app.actionsBar.actionsDropdown.stopDesktopShareDesc',
    description: 'adds context to stop desktop share option'
  },
  screenShareNotSupported: {
    id: 'app.media.screenshare.notSupported',
    descriptions: 'error message when trying share screen on unsupported browsers'
  },
  screenShareUnavailable: {
    id: 'app.media.screenshare.unavailable',
    descriptions: 'title for unavailable screen share modal'
  },
  finalError: {
    id: 'app.screenshare.screenshareFinalError',
    description: 'Screen sharing failures with no recovery procedure'
  },
  retryError: {
    id: 'app.screenshare.screenshareRetryError',
    description: 'Screen sharing failures where a retry is recommended'
  },
  retryOtherEnvError: {
    id: 'app.screenshare.screenshareRetryOtherEnvError',
    description: 'Screen sharing failures where a retry in another environment is recommended'
  },
  unsupportedEnvError: {
    id: 'app.screenshare.screenshareUnsupportedEnv',
    description: 'Screen sharing is not supported, changing browser or device is recommended'
  },
  permissionError: {
    id: 'app.screenshare.screensharePermissionError',
    description: 'Screen sharing failure due to lack of permission'
  }
});
const getErrorLocale = errorCode => {
  switch (errorCode) {
    // Denied getDisplayMedia permission error
    case SCREENSHARING_ERRORS.NotAllowedError.errorCode:
      return intlMessages.permissionError;
    // Browser is supposed to be supported, but a browser-related error happening.
    // Suggest retrying in another device/browser/env
    case SCREENSHARING_ERRORS.AbortError.errorCode:
    case SCREENSHARING_ERRORS.InvalidStateError.errorCode:
    case SCREENSHARING_ERRORS.OverconstrainedError.errorCode:
    case SCREENSHARING_ERRORS.TypeError.errorCode:
    case SCREENSHARING_ERRORS.NotFoundError.errorCode:
    case SCREENSHARING_ERRORS.NotReadableError.errorCode:
    case SCREENSHARING_ERRORS.PEER_NEGOTIATION_FAILED.errorCode:
    case SCREENSHARING_ERRORS.SCREENSHARE_PLAY_FAILED.errorCode:
    case SCREENSHARING_ERRORS.MEDIA_NO_AVAILABLE_CODEC.errorCode:
    case SCREENSHARING_ERRORS.MEDIA_INVALID_SDP.errorCode:
      return intlMessages.retryOtherEnvError;
    // Fatal errors where a retry isn't warranted. This probably means the server
    // is misconfigured somehow or the provider is utterly botched, so nothing
    // the end user can do besides requesting support
    case SCREENSHARING_ERRORS.SIGNALLING_TRANSPORT_CONNECTION_FAILED.errorCode:
    case SCREENSHARING_ERRORS.MEDIA_SERVER_CONNECTION_ERROR.errorCode:
    case SCREENSHARING_ERRORS.SFU_INVALID_REQUEST.errorCode:
      return intlMessages.finalError;
    // Unsupported errors
    case SCREENSHARING_ERRORS.NotSupportedError.errorCode:
      return intlMessages.unsupportedEnvError;
    // Errors that should be silent/ignored. They WILL NOT be LOGGED nor NOTIFIED via toasts.
    case SCREENSHARING_ERRORS.ENDED_WHILE_STARTING.errorCode:
      return null;
    // Fall through: everything else is an error which might be solved with a retry
    default:
      return intlMessages.retryError;
  }
};
const ScreenshareButton = _ref => {
  let {
    intl,
    enabled,
    isScreenBroadcasting,
    amIPresenter = false,
    isMeteorConnected
  } = _ref;
  const [stopExternalVideoShare] = useMutation(EXTERNAL_VIDEO_STOP);
  const isCameraAsContentBroadcasting = useIsCameraAsContentBroadcasting();

  // This is the failure callback that will be passed to the /api/screenshare/kurento.js
  // script on the presenter's call
  const handleFailure = error => {
    const {
      errorCode = SCREENSHARING_ERRORS.UNKNOWN_ERROR.errorCode,
      errorMessage = error.message
    } = error;
    const localizedError = getErrorLocale(errorCode);
    if (localizedError) {
      notify(intl.formatMessage(localizedError, {
        0: errorCode
      }), 'error', 'desktop');
      logger.error({
        logCode: 'screenshare_failed',
        extraInfo: {
          errorCode,
          errorMessage
        }
      }, "Screenshare failed: ".concat(errorMessage, " (code=").concat(errorCode, ")"));
    }
    screenshareHasEnded();
  };
  const [isScreenshareUnavailableModalOpen, setScreenshareUnavailableModalIsOpen] = useState(false);
  const RenderScreenshareUnavailableModal = otherProps => /*#__PURE__*/React.createElement(Styled.ScreenShareModal, _extends({
    hideBorder: true,
    contentLabel: intl.formatMessage(intlMessages.screenShareUnavailable)
  }, otherProps), /*#__PURE__*/React.createElement(Styled.Title, null, intl.formatMessage(intlMessages.screenShareUnavailable)), /*#__PURE__*/React.createElement("p", null, intl.formatMessage(intlMessages.screenShareNotSupported)));
  const screenshareLabel = intlMessages.desktopShareLabel;
  const vLabel = isScreenBroadcasting ? intlMessages.stopDesktopShareLabel : screenshareLabel;
  const vDescr = isScreenBroadcasting ? intlMessages.stopDesktopShareDesc : intlMessages.desktopShareDesc;
  const amIBroadcasting = isScreenBroadcasting && amIPresenter;
  const shouldAllowScreensharing = enabled && (!isMobile || isTabletApp) && amIPresenter;
  const dataTest = isScreenBroadcasting ? 'stopScreenShare' : 'startScreenShare';
  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldAllowScreensharing ? /*#__PURE__*/React.createElement(Button, {
    disabled: !isMeteorConnected && !isScreenBroadcasting,
    icon: amIBroadcasting ? 'desktop' : 'desktop_off',
    "data-test": dataTest,
    label: intl.formatMessage(vLabel),
    description: intl.formatMessage(vDescr),
    color: amIBroadcasting ? 'primary' : 'default',
    ghost: !amIBroadcasting,
    hideLabel: true,
    circle: true,
    size: "lg",
    onClick: amIBroadcasting ? screenshareHasEnded : () => {
      if (isSafari && !ScreenshareBridgeService.HAS_DISPLAY_MEDIA) {
        setScreenshareUnavailableModalIsOpen(true);
      } else {
        shareScreen(isCameraAsContentBroadcasting, stopExternalVideoShare, amIPresenter, handleFailure);
      }
    },
    id: amIBroadcasting ? 'unshare-screen-button' : 'share-screen-button'
  }) : null, isScreenshareUnavailableModalOpen ? /*#__PURE__*/React.createElement(RenderScreenshareUnavailableModal, {
    onRequestClose: () => setScreenshareUnavailableModalIsOpen(false),
    priority: "low",
    setIsOpen: setScreenshareUnavailableModalIsOpen,
    isOpen: isScreenshareUnavailableModalOpen
  }) : null);
};
ScreenshareButton.propTypes = propTypes;
module.exportDefault(injectIntl( /*#__PURE__*/memo(ScreenshareButton)));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/screenshare/container.jsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let ScreenshareButton;
module.link("./component", {
  default(v) {
    ScreenshareButton = v;
  }
}, 1);
let useIsScreenSharingEnabled;
module.link("/imports/ui/services/features", {
  useIsScreenSharingEnabled(v) {
    useIsScreenSharingEnabled = v;
  }
}, 2);
let useIsScreenBroadcasting;
module.link("/imports/ui/components/screenshare/service", {
  useIsScreenBroadcasting(v) {
    useIsScreenBroadcasting = v;
  }
}, 3);
let useSettings;
module.link("/imports/ui/services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 4);
let SETTINGS;
module.link("/imports/ui/services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 5);
const ScreenshareButtonContainer = props => {
  const {
    viewScreenshare: screenshareDataSavingSetting
  } = useSettings(SETTINGS.DATA_SAVING);
  const screenIsBroadcasting = useIsScreenBroadcasting();
  const enabled = useIsScreenSharingEnabled();
  return /*#__PURE__*/React.createElement(ScreenshareButton, _extends({
    screenshareDataSavingSetting: screenshareDataSavingSetting,
    isScreenBroadcasting: screenIsBroadcasting,
    enabled: enabled
  }, props));
};

/*
 * All props, including the ones that are inherited from actions-bar
 * isScreenBroadcasting,
 * amIPresenter,
 * screenSharingCheck,
 * isMeteorConnected,
 * screenshareDataSavingSetting,
 */
module.exportDefault(ScreenshareButtonContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/screenshare/styles.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 1);
let colorGrayDark;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  }
}, 2);
let jumboPaddingY, minModalHeight, headingsFontWeight, mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  jumboPaddingY(v) {
    jumboPaddingY = v;
  },
  minModalHeight(v) {
    minModalHeight = v;
  },
  headingsFontWeight(v) {
    headingsFontWeight = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 3);
let fontSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarge(v) {
    fontSizeLarge = v;
  }
}, 4);
const ScreenShareModal = styled(ModalSimple)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  padding: ", ";\n  min-height: ", ";\n  text-align: center;\n"])), jumboPaddingY, minModalHeight);
const Title = styled.h3(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  font-weight: ", ";\n  font-size: ", ";\n  color: ", ";\n  white-space: normal;\n  padding-bottom: ", ";\n"])), headingsFontWeight, fontSizeLarge, colorGrayDark, mdPaddingX);
module.exportDefault({
  ScreenShareModal,
  Title
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/component.jsx                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let ActionsBarItemType, ActionsBarPosition;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/actions-bar-item/enums", {
  ActionsBarItemType(v) {
    ActionsBarItemType = v;
  },
  ActionsBarPosition(v) {
    ActionsBarPosition = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let ActionsDropdown;
module.link("./actions-dropdown/container", {
  default(v) {
    ActionsDropdown = v;
  }
}, 3);
let AudioCaptionsButtonContainer;
module.link("/imports/ui/components/audio/audio-graphql/audio-captions/button/component", {
  default(v) {
    AudioCaptionsButtonContainer = v;
  }
}, 4);
let ScreenshareButtonContainer;
module.link("/imports/ui/components/actions-bar/screenshare/container", {
  default(v) {
    ScreenshareButtonContainer = v;
  }
}, 5);
let AudioControlsContainer;
module.link("../audio/audio-graphql/audio-controls/component", {
  default(v) {
    AudioControlsContainer = v;
  }
}, 6);
let JoinVideoOptionsContainer;
module.link("../video-provider/video-button/container", {
  default(v) {
    JoinVideoOptionsContainer = v;
  }
}, 7);
let PresentationOptionsContainer;
module.link("./presentation-options/component", {
  default(v) {
    PresentationOptionsContainer = v;
  }
}, 8);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 9);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 10);
let LAYOUT_TYPE;
module.link("../layout/enums", {
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  }
}, 11);
let ReactionsButtonContainer;
module.link("/imports/ui/components/actions-bar/reactions-button/container", {
  default(v) {
    ReactionsButtonContainer = v;
  }
}, 12);
class ActionsBar extends PureComponent {
  constructor(props) {
    super(props);
    this.actionsBarRef = /*#__PURE__*/React.createRef();
    this.renderPluginsActionBarItems = this.renderPluginsActionBarItems.bind(this);
  }
  renderPluginsActionBarItems(position) {
    const {
      actionBarItems
    } = this.props;
    return /*#__PURE__*/React.createElement(React.Fragment, null, actionBarItems.filter(plugin => plugin.position === position).map(plugin => {
      let actionBarItemToReturn;
      switch (plugin.type) {
        case ActionsBarItemType.BUTTON:
          actionBarItemToReturn = /*#__PURE__*/React.createElement(Button, {
            key: "".concat(plugin.type, "-").concat(plugin.id),
            onClick: plugin.onClick,
            hideLabel: true,
            color: "primary",
            icon: plugin.icon,
            size: "lg",
            circle: true,
            label: plugin.tooltip
          });
          break;
        case ActionsBarItemType.SEPARATOR:
          actionBarItemToReturn = /*#__PURE__*/React.createElement(Styled.Separator, {
            key: "".concat(plugin.type, "-").concat(plugin.id)
          });
          break;
        default:
          actionBarItemToReturn = null;
          break;
      }
      return actionBarItemToReturn;
    }));
  }
  renderReactionsButton() {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.Separator, null), /*#__PURE__*/React.createElement(ReactionsButtonContainer, {
      actionsBarRef: this.actionsBarRef
    }));
  }
  render() {
    const {
      amIPresenter,
      amIModerator,
      enableVideo,
      presentationIsOpen,
      setPresentationIsOpen,
      intl,
      isSharingVideo,
      isSharedNotesPinned,
      hasScreenshare,
      hasGenericContent,
      hasCameraAsContent,
      stopExternalVideoShare,
      isTimerActive,
      isTimerEnabled,
      isMeteorConnected,
      isPollingEnabled,
      isThereCurrentPresentation,
      allowExternalVideo,
      layoutContextDispatch,
      actionsBarStyle,
      setMeetingLayout,
      showPushLayout,
      setPushLayout,
      setPresentationFitToWidth,
      isPresentationEnabled
    } = this.props;
    const Settings = getSettingsSingletonInstance();
    const {
      selectedLayout
    } = Settings.application;
    const shouldShowPresentationButton = selectedLayout !== LAYOUT_TYPE.CAMERAS_ONLY && selectedLayout !== LAYOUT_TYPE.PARTICIPANTS_AND_CHAT_ONLY;
    const shouldShowVideoButton = selectedLayout !== LAYOUT_TYPE.PRESENTATION_ONLY && selectedLayout !== LAYOUT_TYPE.PARTICIPANTS_AND_CHAT_ONLY;
    const shouldShowOptionsButton = isPresentationEnabled && isThereCurrentPresentation || isSharingVideo || hasScreenshare || isSharedNotesPinned;
    return /*#__PURE__*/React.createElement(Styled.ActionsBar, {
      ref: this.actionsBarRef,
      style: {
        height: actionsBarStyle.innerHeight
      }
    }, /*#__PURE__*/React.createElement(Styled.Left, null, /*#__PURE__*/React.createElement(ActionsDropdown, {
      amIPresenter,
      amIModerator,
      isPollingEnabled,
      allowExternalVideo,
      intl,
      isSharingVideo,
      stopExternalVideoShare,
      isTimerActive,
      isTimerEnabled,
      isMeteorConnected,
      setMeetingLayout,
      setPushLayout,
      presentationIsOpen,
      showPushLayout,
      hasCameraAsContent,
      setPresentationFitToWidth
    }), /*#__PURE__*/React.createElement(AudioCaptionsButtonContainer, null)), /*#__PURE__*/React.createElement(Styled.Center, null, this.renderPluginsActionBarItems(ActionsBarPosition.LEFT), /*#__PURE__*/React.createElement(AudioControlsContainer, null), shouldShowVideoButton && enableVideo ? /*#__PURE__*/React.createElement(JoinVideoOptionsContainer, null) : null, shouldShowPresentationButton && /*#__PURE__*/React.createElement(ScreenshareButtonContainer, {
      amIPresenter,
      isMeteorConnected
    }), this.renderReactionsButton(), this.renderPluginsActionBarItems(ActionsBarPosition.RIGHT)), /*#__PURE__*/React.createElement(Styled.Right, null, shouldShowPresentationButton && shouldShowOptionsButton ? /*#__PURE__*/React.createElement(PresentationOptionsContainer, {
      presentationIsOpen: presentationIsOpen,
      setPresentationIsOpen: setPresentationIsOpen,
      layoutContextDispatch: layoutContextDispatch,
      hasPresentation: isThereCurrentPresentation,
      hasExternalVideo: isSharingVideo,
      hasScreenshare: hasScreenshare,
      hasPinnedSharedNotes: isSharedNotesPinned,
      hasGenericContent: hasGenericContent,
      hasCameraAsContent: hasCameraAsContent
    }) : null));
  }
}
module.exportDefault(ActionsBar);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/container.jsx                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let useIntl;
module.link("react-intl", {
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMutation, useReactiveVar;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 2);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 3);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 4);
let ActionsBar;
module.link("./component", {
  default(v) {
    ActionsBar = v;
  }
}, 5);
let layoutSelectOutput, layoutDispatch;
module.link("../layout/context", {
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 6);
let useIsExternalVideoEnabled, useIsPollingEnabled, useIsPresentationEnabled, useIsTimerFeatureEnabled;
module.link("/imports/ui/services/features", {
  useIsExternalVideoEnabled(v) {
    useIsExternalVideoEnabled = v;
  },
  useIsPollingEnabled(v) {
    useIsPollingEnabled = v;
  },
  useIsPresentationEnabled(v) {
    useIsPresentationEnabled = v;
  },
  useIsTimerFeatureEnabled(v) {
    useIsTimerFeatureEnabled = v;
  }
}, 7);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 8);
let CURRENT_PRESENTATION_PAGE_SUBSCRIPTION;
module.link("/imports/ui/components/whiteboard/queries", {
  CURRENT_PRESENTATION_PAGE_SUBSCRIPTION(v) {
    CURRENT_PRESENTATION_PAGE_SUBSCRIPTION = v;
  }
}, 9);
let MediaService;
module.link("../media/service", {
  default(v) {
    MediaService = v;
  }
}, 10);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 11);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 12);
let EXTERNAL_VIDEO_STOP;
module.link("../external-video-player/mutations", {
  EXTERNAL_VIDEO_STOP(v) {
    EXTERNAL_VIDEO_STOP = v;
  }
}, 13);
let PINNED_PAD_SUBSCRIPTION;
module.link("../notes/queries", {
  PINNED_PAD_SUBSCRIPTION(v) {
    PINNED_PAD_SUBSCRIPTION = v;
  }
}, 14);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 15);
let connectionStatus;
module.link("../../core/graphql/singletons/connectionStatus", {
  default(v) {
    connectionStatus = v;
  }
}, 16);
const isReactionsButtonEnabled = () => {
  const USER_REACTIONS_ENABLED = window.meetingClientSettings.public.userReaction.enabled;
  const REACTIONS_BUTTON_ENABLED = window.meetingClientSettings.public.app.reactionsButton.enabled;
  return USER_REACTIONS_ENABLED && REACTIONS_BUTTON_ENABLED;
};
const ActionsBarContainer = props => {
  var _currentMeeting$exter, _pinnedPadData$shared, _currentMeeting$compo, _currentMeeting$compo2, _currentMeeting$compo3;
  const NOTES_CONFIG = window.meetingClientSettings.public.notes;
  const actionsBarStyle = layoutSelectOutput(i => i.actionBar);
  const layoutContextDispatch = layoutDispatch();
  const {
    data: presentationPageData
  } = useDeduplicatedSubscription(CURRENT_PRESENTATION_PAGE_SUBSCRIPTION);
  const presentationPage = (presentationPageData === null || presentationPageData === void 0 ? void 0 : presentationPageData.pres_page_curr[0]) || {};
  const isThereCurrentPresentation = !!(presentationPage !== null && presentationPage !== void 0 && presentationPage.presentationId);
  const {
    data: currentMeeting
  } = useMeeting(m => ({
    externalVideo: m.externalVideo,
    componentsFlags: m.componentsFlags
  }));
  const isSharingVideo = !!(currentMeeting !== null && currentMeeting !== void 0 && (_currentMeeting$exter = currentMeeting.externalVideo) !== null && _currentMeeting$exter !== void 0 && _currentMeeting$exter.externalVideoUrl);
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let actionBarItems = [];
  if (pluginsExtensibleAreasAggregatedState.actionsBarItems) {
    actionBarItems = [...pluginsExtensibleAreasAggregatedState.actionsBarItems];
  }
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    presenter: user.presenter,
    isModerator: user.isModerator
  }));
  const [stopExternalVideoShare] = useMutation(EXTERNAL_VIDEO_STOP);
  const currentUser = {
    userId: Auth.userID
  };
  const amIPresenter = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.presenter;
  const amIModerator = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.isModerator;
  const {
    data: pinnedPadData
  } = useDeduplicatedSubscription(PINNED_PAD_SUBSCRIPTION);
  const isSharedNotesPinnedFromGraphql = !!pinnedPadData && ((_pinnedPadData$shared = pinnedPadData.sharedNotes[0]) === null || _pinnedPadData$shared === void 0 ? void 0 : _pinnedPadData$shared.sharedNotesExtId) === NOTES_CONFIG.id;
  const isSharedNotesPinned = isSharedNotesPinnedFromGraphql;
  const allowExternalVideo = useIsExternalVideoEnabled();
  const connected = useReactiveVar(connectionStatus.getConnectedStatusVar());
  const intl = useIntl();
  const isPresentationEnabled = useIsPresentationEnabled();
  const isTimerFeatureEnabled = useIsTimerFeatureEnabled();
  const isPollingEnabled = useIsPollingEnabled() && isPresentationEnabled;
  if (actionsBarStyle.display === false) return null;
  if (!currentMeeting) return null;
  return /*#__PURE__*/React.createElement(ActionsBar, _objectSpread(_objectSpread({}, props), {}, {
    enableVideo: getFromUserSettings('bbb_enable_video', window.meetingClientSettings.public.kurento.enableVideo),
    multiUserTools: getFromUserSettings('bbb_multi_user_tools', window.meetingClientSettings.public.whiteboard.toolbar.multiUserTools),
    isReactionsButtonEnabled: isReactionsButtonEnabled(),
    setPresentationIsOpen: MediaService.setPresentationIsOpen,
    hasScreenshare: (_currentMeeting$compo = currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$compo2 = currentMeeting.componentsFlags) === null || _currentMeeting$compo2 === void 0 ? void 0 : _currentMeeting$compo2.hasScreenshare) !== null && _currentMeeting$compo !== void 0 ? _currentMeeting$compo : false,
    isMeteorConnected: connected,
    hasCameraAsContent: currentMeeting === null || currentMeeting === void 0 ? void 0 : (_currentMeeting$compo3 = currentMeeting.componentsFlags) === null || _currentMeeting$compo3 === void 0 ? void 0 : _currentMeeting$compo3.hasCameraAsContent,
    intl,
    allowExternalVideo,
    isPollingEnabled,
    isPresentationEnabled,
    currentUser,
    amIModerator,
    layoutContextDispatch,
    actionsBarStyle,
    amIPresenter,
    actionBarItems,
    isThereCurrentPresentation,
    isSharingVideo,
    stopExternalVideoShare,
    isSharedNotesPinned,
    isTimerActive: currentMeeting.componentsFlags.hasTimer,
    isTimerEnabled: isTimerFeatureEnabled
  }));
};
module.exportDefault(ActionsBarContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/actions-bar/styles.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 1);
let smPaddingX, smPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  }
}, 2);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 3);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 4);
const ActionsBar = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n"])));
const Left = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: inherit;\n  flex: 0;\n\n  > * {\n    margin: 0 ", ";\n\n    @media ", " {\n      margin: 0 ", ";\n    }\n  }\n\n  @media ", " {\n    bottom: ", ";\n    left: ", ";\n    right: auto;\n\n    [dir=\"rtl\"] & {\n      left: auto;\n      right: ", ";\n    }\n  }\n\n"])), smPaddingX, smallOnly, smPaddingY, smallOnly, smPaddingX, smPaddingX, smPaddingX);
const Center = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  justify-content: center;\n\n  > * {\n    margin: 0 ", ";\n\n    @media ", " {\n      margin: 0 ", ";\n    }\n  }\n\n"])), smPaddingX, smallOnly, smPaddingY);
const Right = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  position: relative;\n\n  [dir=\"rtl\"] & {\n    right: auto;\n    left: ", ";\n  }\n\n  @media ", " {\n    right: 0;\n    left: 0;\n    display: contents;\n  }\n\n  > * {\n    margin: 0 ", ";\n\n    @media ", " {\n      margin: 0 ", ";\n    }\n  }\n"])), smPaddingX, smallOnly, smPaddingX, smallOnly, smPaddingY);
const RaiseHandButton = styled(Button)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n", "\n"])), _ref => {
  let {
    ghost
  } = _ref;
  return ghost && "\n  & > span {\n    box-shadow: none;\n    background-color: transparent !important;\n    border-color: ".concat(colorWhite, " !important;\n  }\n   ");
});
const ButtonContainer = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  > * {\n    margin: 8px;\n  }\n"])));
const ReactionsDropdown = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  position: relative;\n"])));
const Wrapper = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  overflow: hidden;\n  margin: 0.2em 0.2em 0.2em 0.2em;\n  text-align: center;\n  max-height: 270px;\n  width: 270px;\n  em-emoji {\n    cursor: pointer;\n  }\n"])));
const Separator = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  height: 2.5rem;\n  width: 0;\n  border: 1px solid ", ";\n  align-self: center;\n  opacity: .75;\n"])), colorWhite);
module.exportDefault({
  ActionsBar,
  Left,
  Center,
  Right,
  RaiseHandButton,
  ButtonContainer,
  ReactionsDropdown,
  Wrapper,
  Separator
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"breakout-join-confirmation":{"breakout-join-confirmation-graphql":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-join-confirmation/breakout-join-confirmation-graphql/component.tsx                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 0);
let React, useEffect, useMemo;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let ModalFullscreen;
module.link("/imports/ui/components/common/modal/fullscreen/component", {
  default(v) {
    ModalFullscreen = v;
  }
}, 4);
let getBreakoutCount, getBreakoutData, handleInviteDismissedAt;
module.link("./queries", {
  getBreakoutCount(v) {
    getBreakoutCount = v;
  },
  getBreakoutData(v) {
    getBreakoutData = v;
  },
  handleInviteDismissedAt(v) {
    handleInviteDismissedAt = v;
  }
}, 5);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 6);
let BREAKOUT_ROOM_REQUEST_JOIN_URL;
module.link("../../breakout-room/mutations", {
  BREAKOUT_ROOM_REQUEST_JOIN_URL(v) {
    BREAKOUT_ROOM_REQUEST_JOIN_URL = v;
  }
}, 7);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 8);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 9);
let AudioService;
module.link("/imports/ui/components/audio/service", {
  default(v) {
    AudioService = v;
  }
}, 10);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 11);
let useExitVideo, useStreams;
module.link("/imports/ui/components/video-provider/hooks", {
  useExitVideo(v) {
    useExitVideo = v;
  },
  useStreams(v) {
    useStreams = v;
  }
}, 12);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 13);
let rejoinAudio;
module.link("../../breakout-room/breakout-room/service", {
  rejoinAudio(v) {
    rejoinAudio = v;
  }
}, 14);
let useBreakoutExitObserver;
module.link("./hooks", {
  useBreakoutExitObserver(v) {
    useBreakoutExitObserver = v;
  }
}, 15);
const intlMessages = defineMessages({
  title: {
    id: 'app.breakoutJoinConfirmation.title',
    description: 'Join breakout room title'
  },
  message: {
    id: 'app.breakoutJoinConfirmation.message',
    description: 'Join breakout confirm message'
  },
  freeJoinMessage: {
    id: 'app.breakoutJoinConfirmation.freeJoinMessage',
    description: 'Join breakout confirm message'
  },
  confirmLabel: {
    id: 'app.createBreakoutRoom.join',
    description: 'Join confirmation button label'
  },
  confirmDesc: {
    id: 'app.breakoutJoinConfirmation.confirmDesc',
    description: 'adds context to confirm option'
  },
  dismissLabel: {
    id: 'app.breakoutJoinConfirmation.dismissLabel',
    description: 'Cancel button label'
  },
  dismissDesc: {
    id: 'app.breakoutJoinConfirmation.dismissDesc',
    description: 'adds context to dismiss option'
  },
  generatingURL: {
    id: 'app.createBreakoutRoom.generatingURLMessage',
    description: 'label for generating breakout room url'
  }
});
const BreakoutJoinConfirmation = _ref => {
  var _breakouts$find;
  let {
    freeJoin,
    breakouts,
    currentUserJoined,
    firstBreakoutId,
    isUsingAudio,
    exitAudio,
    exitVideo,
    storeVideoDevices
  } = _ref;
  const [breakoutRoomRequestJoinURL] = useMutation(BREAKOUT_ROOM_REQUEST_JOIN_URL);
  const [callHandleInviteDismissedAt] = useMutation(handleInviteDismissedAt);
  const intl = useIntl();
  const [waiting, setWaiting] = React.useState(false);
  const [isOpen, setIsOpen] = React.useState(false);
  const defaultSelectedBreakoutId = ((_breakouts$find = breakouts.find(_ref2 => {
    let {
      isLastAssignedRoom
    } = _ref2;
    return isLastAssignedRoom;
  })) === null || _breakouts$find === void 0 ? void 0 : _breakouts$find.breakoutRoomId) || firstBreakoutId;
  const [selectValue, setSelectValue] = React.useState(defaultSelectedBreakoutId);
  const requestJoinURL = breakoutRoomId => {
    breakoutRoomRequestJoinURL({
      variables: {
        breakoutRoomId
      }
    });
  };
  // request join url if free join is enabled and user is not assigned to any room
  if (defaultSelectedBreakoutId === firstBreakoutId) {
    const selectedBreakout = breakouts.find(_ref3 => {
      let {
        breakoutRoomId
      } = _ref3;
      return breakoutRoomId === defaultSelectedBreakoutId;
    });
    if (!(selectedBreakout !== null && selectedBreakout !== void 0 && selectedBreakout.joinURL) && !waiting) {
      requestJoinURL(defaultSelectedBreakoutId);
      setWaiting(true);
    }
  }
  const handleSelectChange = event => {
    setSelectValue(event.target.value);
    const selectedBreakout = breakouts.find(_ref4 => {
      let {
        breakoutRoomId
      } = _ref4;
      return breakoutRoomId === event.target.value;
    });
    if (!(selectedBreakout !== null && selectedBreakout !== void 0 && selectedBreakout.joinURL)) {
      requestJoinURL(event.target.value);
      setWaiting(true);
    }
  };
  const handleJoinBreakoutConfirmation = () => {
    if (isUsingAudio()) {
      exitAudio();
      logger.info({
        logCode: 'breakout_join_confirmation'
      }, 'Joining breakout room closed audio in the main room');
    }
    storeVideoDevices();
    exitVideo();
    if (breakouts.length === 1) {
      const breakout = breakouts[0];
      if (breakout !== null && breakout !== void 0 && breakout.joinURL) {
        window.open(breakout.joinURL, '_blank');
      }
      setIsOpen(false);
    } else {
      const selectedBreakout = breakouts.find(_ref5 => {
        let {
          breakoutRoomId
        } = _ref5;
        return breakoutRoomId === selectValue;
      });
      if (selectedBreakout !== null && selectedBreakout !== void 0 && selectedBreakout.joinURL) {
        window.open(selectedBreakout.joinURL, '_blank');
      }
    }
  };
  const select = useMemo(() => {
    return /*#__PURE__*/React.createElement(Styled.SelectParent, null, "".concat(intl.formatMessage(intlMessages.freeJoinMessage)), /*#__PURE__*/React.createElement(Styled.Select, {
      value: selectValue,
      onChange: handleSelectChange,
      disabled: waiting,
      "data-test": "selectBreakoutRoomBtn"
    }, breakouts.sort((a, b) => a.sequence - b.sequence).map(_ref6 => {
      let {
        shortName,
        breakoutRoomId
      } = _ref6;
      return /*#__PURE__*/React.createElement("option", {
        "data-test": "roomOption",
        key: breakoutRoomId,
        value: breakoutRoomId
      }, shortName);
    })), waiting ? /*#__PURE__*/React.createElement("span", {
      "data-test": "labelGeneratingURL"
    }, intl.formatMessage(intlMessages.generatingURL)) : null);
  }, [breakouts, waiting, selectValue]);
  useEffect(() => {
    if (waiting) {
      const breakout = breakouts.find(_ref7 => {
        let {
          breakoutRoomId
        } = _ref7;
        return breakoutRoomId === selectValue;
      });
      if (breakout !== null && breakout !== void 0 && breakout.joinURL) {
        setWaiting(false);
      }
    }
  }, [breakouts, waiting]);
  useEffect(() => {
    if ((breakouts === null || breakouts === void 0 ? void 0 : breakouts.length) > 0 && !currentUserJoined) {
      setIsOpen(true);
    }
  }, [breakouts, currentUserJoined]);
  return /*#__PURE__*/React.createElement(ModalFullscreen, {
    title: intl.formatMessage(intlMessages.title),
    confirm: {
      callback: handleJoinBreakoutConfirmation,
      label: intl.formatMessage(intlMessages.confirmLabel),
      description: intl.formatMessage(intlMessages.confirmDesc),
      icon: 'popout_window',
      disabled: waiting
    },
    dismiss: {
      callback: () => {
        setIsOpen(false);
        callHandleInviteDismissedAt();
      },
      label: intl.formatMessage(intlMessages.dismissLabel),
      description: intl.formatMessage(intlMessages.dismissDesc)
    },
    setIsOpen,
    isOpen,
    priority: 'medium'
  }, freeJoin ? select : "".concat(intl.formatMessage(intlMessages.message), " ").concat(breakouts[0].shortName, "?"));
};
const BreakoutJoinConfirmationContainer = () => {
  var _currentUser$breakout, _currentUser$breakout2;
  const {
    data: currentUser
  } = useCurrentUser(u => {
    return {
      isModerator: u.isModerator,
      breakoutRooms: u.breakoutRooms
    };
  });
  const {
    data: breakoutData
  } = useDeduplicatedSubscription(getBreakoutData);
  const exitVideo = useExitVideo(true);
  const {
    streams: videoStreams
  } = useStreams();
  const storeVideoDevices = () => {
    VideoService.storeDeviceIds(videoStreams);
  };
  const {
    exitAudio
  } = AudioService;
  const {
    isUsingAudio
  } = AudioManager;
  const breakoutExitObserver = useBreakoutExitObserver();
  useEffect(() => {
    breakoutExitObserver.setCallback('rejoinAudio', rejoinAudio);
    return () => {
      breakoutExitObserver.removeCallback('rejoinAudio');
    };
  }, []);
  const {
    data: breakoutCountData
  } = useDeduplicatedSubscription(getBreakoutCount);
  if (!breakoutCountData || !breakoutCountData.breakoutRoom_aggregate.aggregate.count) return null;
  if (!breakoutData || breakoutData.breakoutRoom.length === 0) return null;
  const firstBreakout = breakoutData.breakoutRoom[0];
  const {
    freeJoin,
    sendInvitationToModerators,
    breakoutRoomId
  } = firstBreakout;
  if (!sendInvitationToModerators && currentUser !== null && currentUser !== void 0 && currentUser.isModerator) return null;
  return /*#__PURE__*/React.createElement(BreakoutJoinConfirmation, {
    freeJoin: freeJoin,
    breakouts: breakoutData.breakoutRoom,
    currentUserJoined: (_currentUser$breakout = currentUser === null || currentUser === void 0 ? void 0 : (_currentUser$breakout2 = currentUser.breakoutRooms) === null || _currentUser$breakout2 === void 0 ? void 0 : _currentUser$breakout2.isUserCurrentlyInRoom) !== null && _currentUser$breakout !== void 0 ? _currentUser$breakout : false,
    firstBreakoutId: breakoutRoomId,
    isUsingAudio: isUsingAudio,
    exitVideo: exitVideo,
    exitAudio: exitAudio,
    storeVideoDevices: storeVideoDevices
  });
};
module.exportDefault(BreakoutJoinConfirmationContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"hooks.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-join-confirmation/breakout-join-confirmation-graphql/hooks.ts                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  useBreakoutExitObserver: () => useBreakoutExitObserver
});
let useEffect, useMemo, useRef, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let useSubscription;
module.link("@apollo/client", {
  useSubscription(v) {
    useSubscription = v;
  }
}, 1);
let getIfUserJoinedBreakoutRoom;
module.link("../../breakout-room/breakout-room/queries", {
  getIfUserJoinedBreakoutRoom(v) {
    getIfUserJoinedBreakoutRoom = v;
  }
}, 2);
const useBreakoutExitObserver = () => {
  var _userJoinedBreakoutDa;
  const [joinedRooms, setJoinedRooms] = useState(0);
  const [observing, setObserving] = useState(false);
  const callbacks = useRef(new Map());
  const oneTimeCallbacks = useRef([]);
  const {
    data: userJoinedBreakoutData
  } = useSubscription(getIfUserJoinedBreakoutRoom, {
    skip: !observing
  });
  const userJoinedRooms = (_userJoinedBreakoutDa = userJoinedBreakoutData === null || userJoinedBreakoutData === void 0 ? void 0 : userJoinedBreakoutData.breakoutRoom_aggregate.aggregate.count) !== null && _userJoinedBreakoutDa !== void 0 ? _userJoinedBreakoutDa : 0;
  useEffect(() => {
    if (userJoinedRooms !== joinedRooms) {
      setJoinedRooms(prev => {
        if (userJoinedRooms === 0 && prev > 0) {
          callbacks.current.forEach(value => value());
          oneTimeCallbacks.current.forEach(c => c());
          oneTimeCallbacks.current = [];
          if (callbacks.current.size === 0) {
            setObserving(false);
          }
        }
        return userJoinedRooms;
      });
    }
  }, [userJoinedRooms]);
  return useMemo(() => ({
    resetCallbacks: () => {
      callbacks.current = new Map();
      oneTimeCallbacks.current = [];
      setObserving(false);
    },
    setCallback: (key, callback) => {
      callbacks.current.set(key, callback);
      setObserving(true);
    },
    addOneTimeCallback: callback => {
      oneTimeCallbacks.current.push(callback);
      setObserving(true);
    },
    removeCallback: key => {
      callbacks.current.delete(key);
      if (callbacks.current.size === 0 && oneTimeCallbacks.current.length === 0) {
        setObserving(false);
      }
    }
  }), []);
};
module.exportDefault({
  useBreakoutExitObserver
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-join-confirmation/breakout-join-confirmation-graphql/queries.ts                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  handleInviteDismissedAt: () => handleInviteDismissedAt,
  getBreakoutCount: () => getBreakoutCount,
  getBreakoutData: () => getBreakoutData
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const handleInviteDismissedAt = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation {\n    breakoutRoomSetInviteDismissed\n  }\n"])));
const getBreakoutCount = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  subscription getBreakoutCount  {\n    breakoutRoom_aggregate (where: {showInvitation: {_eq: true}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n"])));
const getBreakoutData = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  subscription getBreakoutData {\n    breakoutRoom {\n      freeJoin\n      shortName\n      sendInvitationToModerators\n      sequence\n      showInvitation\n      isLastAssignedRoom\n      isUserCurrentlyInRoom\n      joinURL\n      breakoutRoomId\n    }\n  }\n"])));
module.exportDefault({
  getBreakoutCount,
  getBreakoutData
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/breakout-join-confirmation/breakout-join-confirmation-graphql/styles.ts                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite, colorGrayLighter;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  }
}, 1);
const SelectParent = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n"])));
const Select = styled.select(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  width: 50%;\n  margin: 1rem;\n  border-color: ", ";\n"])), colorWhite, colorGrayLighter);
module.exportDefault({
  SelectParent,
  Select
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"components-data":{"graphqlToMakeVarAdapterManager":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/components-data/graphqlToMakeVarAdapterManager/component.tsx                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback, useMemo, useRef, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let VideoStreamAdapter;
module.link("/imports/ui/components/video-provider/adapter", {
  default(v) {
    VideoStreamAdapter = v;
  }
}, 1);
const GraphqlToMakeVarAdapterManager = _ref => {
  let {
    children
  } = _ref;
  const [adapterLoaded, setAdapterLoaded] = useState(false);
  const loadedComponents = useRef({});
  const adapterComponents = useRef([VideoStreamAdapter]);
  const onReady = useCallback(key => {
    loadedComponents.current[key] = 1;
    if (Object.keys(loadedComponents.current).length >= adapterComponents.current.length) {
      setAdapterLoaded(true);
    }
  }, []);
  const nestAdapters = useMemo(() => {
    return adapterComponents.current.reduce((acc, Component) => /*#__PURE__*/React.createElement(Component, {
      onReady: onReady
    }, acc), /*#__PURE__*/React.createElement("span", null));
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, nestAdapters, adapterLoaded ? children : null);
};
module.exportDefault(GraphqlToMakeVarAdapterManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"plugin-context":{"context.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/components-data/plugin-context/context.tsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["children"];
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
module.export({
  PluginsContext: () => PluginsContext,
  PluginsContextProvider: () => PluginsContextProvider
});
let React, createContext, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  createContext(v) {
    createContext = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
const PluginsContext = /*#__PURE__*/createContext({});
const PluginsContextProvider = _ref => {
  let {
      children
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const [pluginsExtensibleAreasAggregatedState, setPluginsExtensibleAreasAggregatedState] = useState({});
  const [domElementManipulationMessageIds, setDomElementManipulationMessageIds] = useState([]);
  return /*#__PURE__*/React.createElement(PluginsContext.Provider, {
    value: _objectSpread(_objectSpread({}, props), {}, {
      setPluginsExtensibleAreasAggregatedState,
      pluginsExtensibleAreasAggregatedState,
      domElementManipulationMessageIds,
      setDomElementManipulationMessageIds
    })
  }, children);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"connection-status":{"button":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/button/component.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 2);
let ConnectionStatusModalComponent;
module.link("/imports/ui/components/connection-status/modal/container", {
  default(v) {
    ConnectionStatusModalComponent = v;
  }
}, 3);
let ConnectionStatusService;
module.link("/imports/ui/components/connection-status/service", {
  default(v) {
    ConnectionStatusService = v;
  }
}, 4);
let Icon;
module.link("/imports/ui/components/connection-status/icon/component", {
  default(v) {
    Icon = v;
  }
}, 5);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 6);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 7);
const intlMessages = defineMessages({
  label: {
    id: 'app.connection-status.label',
    description: 'Connection status button label'
  },
  description: {
    id: 'app.connection-status.description',
    description: 'Connection status button description'
  }
});
class ConnectionStatusButton extends PureComponent {
  constructor(props) {
    super(props);
    this.setModalIsOpen = isOpen => this.setState({
      isModalOpen: isOpen
    });
    this.state = {
      isModalOpen: false
    };
  }
  renderIcon() {
    let level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'normal';
    return /*#__PURE__*/React.createElement(Styled.IconWrapper, null, /*#__PURE__*/React.createElement(Icon, {
      level: level,
      grayscale: true
    }));
  }
  renderModal(isModalOpen) {
    return isModalOpen ? /*#__PURE__*/React.createElement(ConnectionStatusModalComponent, {
      isModalOpen,
      setModalIsOpen: this.setModalIsOpen
    }) : null;
  }
  render() {
    const {
      intl,
      connected
    } = this.props;
    const {
      isModalOpen
    } = this.state;
    if (!connected) {
      return /*#__PURE__*/React.createElement(Styled.ButtonWrapper, null, /*#__PURE__*/React.createElement(Button, {
        customIcon: this.renderIcon(),
        label: intl.formatMessage(intlMessages.label),
        hideLabel: true,
        "aria-label": intl.formatMessage(intlMessages.description),
        size: "sm",
        disabled: true,
        ghost: true,
        circle: true,
        onClick: () => {},
        "data-test": "connectionStatusButton"
      }), this.renderModal(isModalOpen));
    }
    const {
      myCurrentStatus
    } = this.props;
    let color;
    switch (myCurrentStatus) {
      case 'warning':
        color = 'success';
        break;
      case 'danger':
        color = 'warning';
        ConnectionStatusService.notification('warning', intl);
        break;
      case 'critical':
        color = 'danger';
        ConnectionStatusService.notification('error', intl);
        break;
      default:
        color = 'success';
    }
    return /*#__PURE__*/React.createElement(Styled.ButtonWrapper, null, /*#__PURE__*/React.createElement(Button, {
      customIcon: this.renderIcon(myCurrentStatus),
      label: intl.formatMessage(intlMessages.label),
      hideLabel: true,
      "aria-label": intl.formatMessage(intlMessages.description),
      size: "sm",
      color: color,
      circle: true,
      onClick: () => this.setState({
        isModalOpen: true
      }),
      "data-test": "connectionStatusButton"
    }), this.renderModal(isModalOpen));
  }
}
module.exportDefault(injectIntl(ConnectionStatusButton));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/button/container.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useReactiveVar;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
let ConnectionStatusButtonComponent;
module.link("./component", {
  default(v) {
    ConnectionStatusButtonComponent = v;
  }
}, 2);
let connectionStatus;
module.link("/imports/ui/core/graphql/singletons/connectionStatus", {
  default(v) {
    connectionStatus = v;
  }
}, 3);
let getWorstStatus;
module.link("../service", {
  getWorstStatus(v) {
    getWorstStatus = v;
  }
}, 4);
const ConnectionStatusButtonContainer = props => {
  const connected = useReactiveVar(connectionStatus.getConnectedStatusVar());
  const rttStatus = useReactiveVar(connectionStatus.getRttStatusVar());
  const jitterStatus = useReactiveVar(connectionStatus.getJitterStatusVar());
  const packetLossStatus = useReactiveVar(connectionStatus.getPacketLossStatusVar());
  const myCurrentStatus = getWorstStatus([rttStatus, jitterStatus, packetLossStatus]);
  return /*#__PURE__*/React.createElement(ConnectionStatusButtonComponent, _extends({
    myCurrentStatus: myCurrentStatus,
    connected: connected
  }, props));
};
module.exportDefault(ConnectionStatusButtonContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/button/styles.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const IconWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  width: 1.025rem;\n  height: 1.025rem;\n"])));
const ButtonWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin: 0 .5rem;\n"])));
module.exportDefault({
  IconWrapper,
  ButtonWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"icon":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/icon/component.jsx                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const STATS = {
  critical: {
    bars: 1
  },
  danger: {
    bars: 2
  },
  warning: {
    bars: 3
  },
  normal: {
    bars: 4
  }
};
const Icon = _ref => {
  var _STATS$level, _STATS$level2, _STATS$level3;
  let {
    level,
    grayscale
  } = _ref;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.SignalBars, {
    id: "connectionBars",
    level: level,
    grayscale: grayscale
  }, /*#__PURE__*/React.createElement(Styled.FirstBar, null), /*#__PURE__*/React.createElement(Styled.SecondBar, {
    active: ((_STATS$level = STATS[level]) === null || _STATS$level === void 0 ? void 0 : _STATS$level.bars) >= 2
  }), /*#__PURE__*/React.createElement(Styled.ThirdBar, {
    active: ((_STATS$level2 = STATS[level]) === null || _STATS$level2 === void 0 ? void 0 : _STATS$level2.bars) >= 3
  }), /*#__PURE__*/React.createElement(Styled.FourthBar, {
    active: ((_STATS$level3 = STATS[level]) === null || _STATS$level3 === void 0 ? void 0 : _STATS$level3.bars) >= 4
  })));
};
module.exportDefault(Icon);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/icon/styles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite, colorDanger, colorWarning, colorSuccess;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorWarning(v) {
    colorWarning = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  }
}, 1);
const SignalBars = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  align-items: flex-end;\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  height: 100%;\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), _ref => {
  let {
    grayscale
  } = _ref;
  return grayscale && "\n    & > div {\n      background-color: ".concat(colorWhite, ";\n    }\n  ");
}, _ref2 => {
  let {
    grayscale,
    level
  } = _ref2;
  return !grayscale && level === 'critical' && "\n    & > div {\n      background-color: ".concat(colorDanger, ";\n    }\n  ");
}, _ref3 => {
  let {
    grayscale,
    level
  } = _ref3;
  return !grayscale && level === 'danger' && "\n    & > div {\n      background-color: ".concat(colorWarning, ";\n   }\n  ");
}, _ref4 => {
  let {
    grayscale,
    level
  } = _ref4;
  return !grayscale && level === 'warning' && "\n    & > div {\n      background-color: ".concat(colorSuccess, ";\n    }\n  ");
}, _ref5 => {
  let {
    grayscale,
    level
  } = _ref5;
  return !grayscale && level === 'normal' && "\n    & > div {\n      background-color: ".concat(colorWhite, ";\n    }\n  ");
});
const Bar = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  width: 20%;\n  border-radius: .46875em;\n"])));
const FirstBar = styled(Bar)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  height: 25%;\n"])));
const SecondBar = styled(Bar)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  height: 50%;\n\n  ", "\n"])), _ref6 => {
  let {
    active
  } = _ref6;
  return !active && "\n    opacity: .5;\n  ";
});
const ThirdBar = styled(Bar)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  height: 75%;\n\n  ", "\n"])), _ref7 => {
  let {
    active
  } = _ref7;
  return !active && "\n    opacity: .5;\n  ";
});
const FourthBar = styled(Bar)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  height: 100%;\n\n  ", "\n"])), _ref8 => {
  let {
    active
  } = _ref8;
  return !active && "\n    opacity: .5;\n  ";
});
module.exportDefault({
  SignalBars,
  FirstBar,
  SecondBar,
  ThirdBar,
  FourthBar
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modal":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/modal/component.jsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let FormattedTime, defineMessages, injectIntl;
module.link("react-intl", {
  FormattedTime(v) {
    FormattedTime = v;
  },
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let UserAvatar;
module.link("/imports/ui/components/user-avatar/component", {
  default(v) {
    UserAvatar = v;
  }
}, 3);
let Icon;
module.link("/imports/ui/components/connection-status/icon/component", {
  default(v) {
    Icon = v;
  }
}, 4);
let Service;
module.link("../service", {
  default(v) {
    Service = v;
  }
}, 5);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 6);
let ConnectionStatusHelper;
module.link("../status-helper/component", {
  default(v) {
    ConnectionStatusHelper = v;
  }
}, 7);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 8);
const MIN_TIMEOUT = 3000;
const intlMessages = defineMessages({
  ariaTitle: {
    id: 'app.connection-status.ariaTitle',
    description: 'Connection status aria title'
  },
  title: {
    id: 'app.connection-status.title',
    description: 'Connection status title'
  },
  description: {
    id: 'app.connection-status.description',
    description: 'Connection status description'
  },
  empty: {
    id: 'app.connection-status.empty',
    description: 'Connection status empty'
  },
  more: {
    id: 'app.connection-status.more',
    description: 'More about connectivity issues'
  },
  audioLabel: {
    id: 'app.settings.audioTab.label',
    description: 'Audio label'
  },
  videoLabel: {
    id: 'app.settings.videoTab.label',
    description: 'Video label'
  },
  copy: {
    id: 'app.connection-status.copy',
    description: 'Copy network data'
  },
  copied: {
    id: 'app.connection-status.copied',
    description: 'Copied network data'
  },
  offline: {
    id: 'app.connection-status.offline',
    description: 'Offline user'
  },
  dataSaving: {
    id: 'app.settings.dataSavingTab.description',
    description: 'Description of data saving'
  },
  webcam: {
    id: 'app.settings.dataSavingTab.webcam',
    description: 'Webcam data saving switch'
  },
  screenshare: {
    id: 'app.settings.dataSavingTab.screenShare',
    description: 'Screenshare data saving switch'
  },
  on: {
    id: 'app.switch.onLabel',
    description: 'label for toggle switch on state'
  },
  off: {
    id: 'app.switch.offLabel',
    description: 'label for toggle switch off state'
  },
  no: {
    id: 'app.connection-status.no',
    description: 'No to is using turn'
  },
  yes: {
    id: 'app.connection-status.yes',
    description: 'Yes to is using turn'
  },
  usingTurn: {
    id: 'app.connection-status.usingTurn',
    description: 'User is using turn server'
  },
  jitter: {
    id: 'app.connection-status.jitter',
    description: 'Jitter buffer in ms'
  },
  lostPackets: {
    id: 'app.connection-status.lostPackets',
    description: 'Number of lost packets'
  },
  audioUploadRate: {
    id: 'app.connection-status.audioUploadRate',
    description: 'Label for audio current upload rate'
  },
  audioDownloadRate: {
    id: 'app.connection-status.audioDownloadRate',
    description: 'Label for audio current download rate'
  },
  videoUploadRate: {
    id: 'app.connection-status.videoUploadRate',
    description: 'Label for video current upload rate'
  },
  videoDownloadRate: {
    id: 'app.connection-status.videoDownloadRate',
    description: 'Label for video current download rate'
  },
  connectionStats: {
    id: 'app.connection-status.connectionStats',
    description: 'Label for Connection Stats tab'
  },
  myLogs: {
    id: 'app.connection-status.myLogs',
    description: 'Label for My Logs tab'
  },
  sessionLogs: {
    id: 'app.connection-status.sessionLogs',
    description: 'Label for Session Logs tab'
  },
  next: {
    id: 'app.connection-status.next',
    description: 'Label for the next page of the connection stats tab'
  },
  prev: {
    id: 'app.connection-status.prev',
    description: 'Label for the previous page of the connection stats tab'
  },
  clientNotResponding: {
    id: 'app.connection-status.clientNotRespondingWarning',
    description: 'Text for Client not responding warning'
  }
});
const propTypes = {
  setModalIsOpen: PropTypes.func.isRequired,
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired
};
const isConnectionStatusEmpty = connectionStatus => {
  // Check if it's defined
  if (!connectionStatus) return true;

  // Check if it's an array
  if (!Array.isArray(connectionStatus)) return true;

  // Check if is empty
  if (connectionStatus.length === 0) return true;
  return false;
};
class ConnectionStatusComponent extends PureComponent {
  constructor(props) {
    super(props);
    const {
      intl
    } = this.props;
    this.help = Service.getHelp();
    this.state = {
      selectedTab: 0,
      hasNetworkData: true,
      copyButtonText: intl.formatMessage(intlMessages.copy),
      networkData: {
        user: {},
        audio: {
          audioCurrentUploadRate: 0,
          audioCurrentDownloadRate: 0,
          jitter: 0,
          packetsLost: 0,
          transportStats: {}
        },
        video: {
          videoCurrentUploadRate: 0,
          videoCurrentDownloadRate: 0
        }
      }
    };
    this.setButtonMessage = this.setButtonMessage.bind(this);
    this.rateInterval = null;
    this.audioUploadLabel = intl.formatMessage(intlMessages.audioUploadRate);
    this.audioDownloadLabel = intl.formatMessage(intlMessages.audioDownloadRate);
    this.videoUploadLabel = intl.formatMessage(intlMessages.videoUploadRate);
    this.videoDownloadLabel = intl.formatMessage(intlMessages.videoDownloadRate);
    this.handleSelectTab = this.handleSelectTab.bind(this);
  }

  // async componentDidMount() {
  //   this.startMonitoringNetwork();
  // }

  componentWillUnmount() {
    clearInterval(this.rateInterval);
  }
  handleSelectTab(tab) {
    this.setState({
      selectedTab: tab
    });
  }
  setButtonMessage(msg) {
    this.setState({
      copyButtonText: msg
    });
  }

  /**
   * Copy network data to clipboard
   * @return {Promise}   A Promise that is resolved after data is copied.
   *
   *
   */
  async copyNetworkData() {
    const {
      intl,
      networkData
    } = this.props;
    const {
      hasNetworkData
    } = this.state;
    if (!hasNetworkData) return;
    this.setButtonMessage(intl.formatMessage(intlMessages.copied));
    const data = JSON.stringify(networkData, null, 2);
    await navigator.clipboard.writeText(data);
    this.copyNetworkDataTimeout = setTimeout(() => {
      this.setButtonMessage(intl.formatMessage(intlMessages.copy));
    }, MIN_TIMEOUT);
  }
  renderEmpty() {
    const {
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.Item, {
      last: true,
      "data-test": "connectionStatusItemEmpty"
    }, /*#__PURE__*/React.createElement(Styled.Left, null, /*#__PURE__*/React.createElement(Styled.FullName, null, /*#__PURE__*/React.createElement(Styled.Text, null, intl.formatMessage(intlMessages.empty)))));
  }
  renderConnections() {
    const {
      connectionData,
      intl
    } = this.props;
    const {
      selectedTab
    } = this.state;
    if (isConnectionStatusEmpty(connectionData)) return this.renderEmpty();
    let connections = connectionData;
    if (selectedTab === 1) {
      connections = connections.filter(curr => curr.user.userId === Auth.userID);
      if (isConnectionStatusEmpty(connections)) return this.renderEmpty();
    }
    return connections.map((conn, index) => {
      const dateTime = new Date(conn.lastUnstableStatusAt);
      return /*#__PURE__*/React.createElement(Styled.Item, {
        key: "".concat(conn.user.name, "-").concat(conn.user.userId),
        last: index + 1 === connections.length,
        "data-test": "connectionStatusItemUser"
      }, /*#__PURE__*/React.createElement(Styled.Left, null, /*#__PURE__*/React.createElement(Styled.Avatar, null, /*#__PURE__*/React.createElement(UserAvatar, {
        you: conn.user.userId === Auth.userID,
        avatar: conn.user.avatar,
        moderator: conn.user.isModerator,
        color: conn.user.color
      }, conn.user.name.toLowerCase().slice(0, 2))), /*#__PURE__*/React.createElement(Styled.Name, null, /*#__PURE__*/React.createElement(Styled.Text, {
        offline: !conn.user.isOnline,
        "data-test": !conn.user.isOnline ? "offlineUser" : null
      }, conn.user.name, !conn.user.isOnline ? " (".concat(intl.formatMessage(intlMessages.offline), ")") : null)), /*#__PURE__*/React.createElement(Styled.Status, {
        "aria-label": "".concat(intl.formatMessage(intlMessages.title), " ").concat(conn.lastUnstableStatus)
      }, /*#__PURE__*/React.createElement(Styled.Icon, null, /*#__PURE__*/React.createElement(Icon, {
        level: conn.lastUnstableStatus
      }))), conn.clientNotResponding && conn.user.isOnline ? /*#__PURE__*/React.createElement(Styled.ClientNotRespondingText, null, intl.formatMessage(intlMessages.clientNotResponding)) : null), /*#__PURE__*/React.createElement(Styled.Right, null, /*#__PURE__*/React.createElement(Styled.Time, null, conn.lastUnstableStatusAt ? /*#__PURE__*/React.createElement("time", {
        dateTime: dateTime
      }, /*#__PURE__*/React.createElement(FormattedTime, {
        value: dateTime
      })) : null)));
    });
  }

  /**
   * Render network data , containing information about current upload and
   * download rates
   * @return {Object} The component to be renderized.
   */
  renderNetworkData() {
    const {
      enableNetworkStats
    } = window.meetingClientSettings.public.app;
    if (!enableNetworkStats) {
      return null;
    }
    const {
      audioUploadLabel,
      audioDownloadLabel,
      videoUploadLabel,
      videoDownloadLabel
    } = this;
    const {
      intl,
      setModalIsOpen,
      connectionData
    } = this.props;
    const {
      networkData
    } = this.props;
    const {
      audioCurrentUploadRate,
      audioCurrentDownloadRate,
      jitter,
      packetsLost,
      transportStats
    } = networkData.audio;
    const {
      videoCurrentUploadRate,
      videoCurrentDownloadRate
    } = networkData.video;
    let isUsingTurn = '--';
    if (transportStats) {
      switch (transportStats.isUsingTurn) {
        case true:
          isUsingTurn = intl.formatMessage(intlMessages.yes);
          break;
        case false:
          isUsingTurn = intl.formatMessage(intlMessages.no);
          break;
        default:
          break;
      }
    }
    return /*#__PURE__*/React.createElement(Styled.NetworkDataContainer, {
      "data-test": "networkDataContainer",
      tabIndex: 0
    }, /*#__PURE__*/React.createElement(Styled.HelperWrapper, null, /*#__PURE__*/React.createElement(Styled.Helper, null, /*#__PURE__*/React.createElement(ConnectionStatusHelper, {
      connectionData: connectionData,
      closeModal: () => setModalIsOpen(false)
    }))), /*#__PURE__*/React.createElement(Styled.NetworkDataContent, null, /*#__PURE__*/React.createElement(Styled.DataColumn, null, /*#__PURE__*/React.createElement(Styled.NetworkData, null, /*#__PURE__*/React.createElement("div", null, "".concat(audioUploadLabel)), /*#__PURE__*/React.createElement("div", null, "".concat(audioCurrentUploadRate, "k \u2191"))), /*#__PURE__*/React.createElement(Styled.NetworkData, null, /*#__PURE__*/React.createElement("div", null, "".concat(videoUploadLabel)), /*#__PURE__*/React.createElement("div", {
      "data-test": "videoUploadRateData"
    }, "".concat(videoCurrentUploadRate, "k \u2191"))), /*#__PURE__*/React.createElement(Styled.NetworkData, null, /*#__PURE__*/React.createElement("div", null, "".concat(intl.formatMessage(intlMessages.jitter))), /*#__PURE__*/React.createElement("div", null, "".concat(jitter, " ms"))), /*#__PURE__*/React.createElement(Styled.NetworkData, null, /*#__PURE__*/React.createElement("div", null, "".concat(intl.formatMessage(intlMessages.usingTurn))), /*#__PURE__*/React.createElement("div", null, "".concat(isUsingTurn)))), /*#__PURE__*/React.createElement(Styled.DataColumn, null, /*#__PURE__*/React.createElement(Styled.NetworkData, null, /*#__PURE__*/React.createElement("div", null, "".concat(audioDownloadLabel)), /*#__PURE__*/React.createElement("div", null, "".concat(audioCurrentDownloadRate, "k \u2193"))), /*#__PURE__*/React.createElement(Styled.NetworkData, null, /*#__PURE__*/React.createElement("div", null, "".concat(videoDownloadLabel)), /*#__PURE__*/React.createElement("div", null, "".concat(videoCurrentDownloadRate, "k \u2193"))), /*#__PURE__*/React.createElement(Styled.NetworkData, null, /*#__PURE__*/React.createElement("div", null, "".concat(intl.formatMessage(intlMessages.lostPackets))), /*#__PURE__*/React.createElement("div", null, "".concat(packetsLost))), /*#__PURE__*/React.createElement(Styled.NetworkData, {
      invisible: true
    }, /*#__PURE__*/React.createElement("div", null, "Content Hidden"), /*#__PURE__*/React.createElement("div", null, "0")))));
  }

  /**
   * Renders the clipboard's copy button, for network stats.
   * @return {Object} - The component to be renderized
   */
  renderCopyDataButton() {
    const {
      enableCopyNetworkStatsButton
    } = window.meetingClientSettings.public.app;
    if (!enableCopyNetworkStatsButton) {
      return null;
    }
    const {
      hasNetworkData,
      copyButtonText
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.CopyContainer, {
      "aria-live": "polite"
    }, /*#__PURE__*/React.createElement(Styled.Copy, {
      disabled: !hasNetworkData,
      role: "button",
      "data-test": "copyStats",
      onClick: this.copyNetworkData.bind(this),
      onKeyPress: this.copyNetworkData.bind(this),
      tabIndex: 0
    }, copyButtonText));
  }
  render() {
    const {
      setModalIsOpen,
      intl,
      isModalOpen,
      amIModerator
    } = this.props;
    const {
      selectedTab
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.ConnectionStatusModal, {
      priority: "low",
      onRequestClose: () => setModalIsOpen(false),
      setIsOpen: setModalIsOpen,
      hideBorder: true,
      isOpen: isModalOpen,
      contentLabel: intl.formatMessage(intlMessages.ariaTitle),
      "data-test": "connectionStatusModal"
    }, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.Header, null, /*#__PURE__*/React.createElement(Styled.Title, null, intl.formatMessage(intlMessages.title))), /*#__PURE__*/React.createElement(Styled.ConnectionTabs, {
      onSelect: this.handleSelectTab,
      selectedIndex: selectedTab
    }, /*#__PURE__*/React.createElement(Styled.ConnectionTabList, null, /*#__PURE__*/React.createElement(Styled.ConnectionTabSelector, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement("span", {
      id: "connection-status-tab"
    }, intl.formatMessage(intlMessages.title))), /*#__PURE__*/React.createElement(Styled.ConnectionTabSelector, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement("span", {
      id: "my-logs-tab"
    }, intl.formatMessage(intlMessages.myLogs))), amIModerator && /*#__PURE__*/React.createElement(Styled.ConnectionTabSelector, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement("span", {
      id: "session-logs-tab"
    }, intl.formatMessage(intlMessages.sessionLogs)))), /*#__PURE__*/React.createElement(Styled.ConnectionTabPanel, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement("div", null, this.renderNetworkData(), this.renderCopyDataButton())), /*#__PURE__*/React.createElement(Styled.ConnectionTabPanel, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement("ul", null, this.renderConnections())), amIModerator && /*#__PURE__*/React.createElement(Styled.ConnectionTabPanel, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement("ul", null, this.renderConnections())))));
  }
}
ConnectionStatusComponent.propTypes = propTypes;
module.exportDefault(injectIntl(ConnectionStatusComponent));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/modal/container.jsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let CONNECTION_STATUS_REPORT_SUBSCRIPTION;
module.link("../queries", {
  CONNECTION_STATUS_REPORT_SUBSCRIPTION(v) {
    CONNECTION_STATUS_REPORT_SUBSCRIPTION = v;
  }
}, 1);
let Service;
module.link("../service", {
  default(v) {
    Service = v;
  }
}, 2);
let Component;
module.link("./component", {
  default(v) {
    Component = v;
  }
}, 3);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 4);
let useGetStats;
module.link("../../video-provider/hooks", {
  useGetStats(v) {
    useGetStats = v;
  }
}, 5);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 6);
let useReactiveVar;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 7);
let connectionStatus;
module.link("/imports/ui/core/graphql/singletons/connectionStatus", {
  default(v) {
    connectionStatus = v;
  }
}, 8);
const ConnectionStatusContainer = props => {
  const {
    data
  } = useDeduplicatedSubscription(CONNECTION_STATUS_REPORT_SUBSCRIPTION);
  const connectionData = data ? Service.sortConnectionData(data.user_connectionStatusReport) : [];
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    isModerator: u.isModerator
  }));
  const amIModerator = !!(currentUser !== null && currentUser !== void 0 && currentUser.isModerator);
  const newtworkData = useReactiveVar(connectionStatus.getNetworkDataVar());
  const getVideoStreamsStats = useGetStats();
  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {
    connectionData: connectionData,
    amIModerator: amIModerator,
    getVideoStreamsStats: getVideoStreamsStats,
    networkData: newtworkData
  }));
};
module.exportDefault(ConnectionStatusContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/modal/styles.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 1);
let colorOffWhite, colorGrayDark, colorGrayLightest, colorPrimary, colorWhite, btnPrimaryActiveBg, colorDanger;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  btnPrimaryActiveBg(v) {
    btnPrimaryActiveBg = v;
  },
  colorDanger(v) {
    colorDanger = v;
  }
}, 2);
let smPaddingX, smPaddingY, mdPaddingY, lgPaddingY, titlePositionLeft, mdPaddingX, borderSizeLarge, jumboPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  titlePositionLeft(v) {
    titlePositionLeft = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  },
  jumboPaddingY(v) {
    jumboPaddingY = v;
  }
}, 3);
let fontSizeSmall, fontSizeXL;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  },
  fontSizeXL(v) {
    fontSizeXL = v;
  }
}, 4);
let hasPhoneDimentions, mediumDown, hasPhoneWidth, smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  hasPhoneDimentions(v) {
    hasPhoneDimentions = v;
  },
  mediumDown(v) {
    mediumDown = v;
  },
  hasPhoneWidth(v) {
    hasPhoneWidth = v;
  },
  smallOnly(v) {
    smallOnly = v;
  }
}, 5);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 6);
let Tab, Tabs, TabList, TabPanel;
module.link("react-tabs", {
  Tab(v) {
    Tab = v;
  },
  Tabs(v) {
    Tabs = v;
  },
  TabList(v) {
    TabList = v;
  },
  TabPanel(v) {
    TabPanel = v;
  }
}, 7);
const Item = styled.li(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  width: 100%;\n  height: 4rem;\n  border-bottom: 1px solid ", ";\n\n  ", "\n"])), colorGrayLightest, _ref => {
  let {
    last
  } = _ref;
  return last && "\n    border: none;\n  ";
});
const Left = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  width: 100%;\n  height: 100%;\n"])));
const Name = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  width: 27.5%;\n  height: 100%;\n  align-items: center;\n  justify-content: flex-start;\n\n  @media ", " {\n    width: 100%;\n  }\n"])), hasPhoneDimentions);
const FullName = styled(Name)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  width: 100%;\n"])));
const ClientNotRespondingText = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  width: 27.5%;\n  height: 100%;\n  align-items: center;\n  justify-content: flex-start;\n  color: ", ";\n\n  @media ", " {\n    width: 100%;\n  }\n"])), colorDanger, hasPhoneDimentions);
const Text = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  padding-left: .5rem;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ", "\n\n  [dir=\"rtl\"] & {\n    padding: 0;\n    padding-right: .5rem;\n  }\n"])), _ref2 => {
  let {
    offline
  } = _ref2;
  return offline && "\n    font-style: italic;\n  ";
});
const Avatar = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n"])));
const Icon = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  width: 2.05rem;\n  height: 2.05rem;\n"])));
const Right = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: flex;\n  width: 5rem;\n  height: 100%;\n"])));
const Time = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  justify-content: flex-end;\n"])));
const NetworkDataContainer = styled(ScrollboxVertical)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-wrap: nowrap;\n  overflow: auto;\n  scroll-snap-type: x mandatory;\n  padding-bottom: 1.25rem;\n\n  &:focus {\n    outline: none;\n\n    &::-webkit-scrollbar-thumb {\n      background: rgba(0,0,0,.5);\n    }\n  }\n\n  @media ", " {\n    justify-content: space-between;\n  }\n"])), mediumDown);
const NetworkData = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  font-size: ", ";\n\n  ", "\n\n  & :first-child {\n    font-weight: 600;\n  }\n"])), fontSizeSmall, _ref3 => {
  let {
    invisible
  } = _ref3;
  return invisible && "\n    visibility: hidden;\n  ";
});
const CopyContainer = styled.div(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  border: none;\n  border-top: 1px solid ", ";\n  padding: ", " 0 0;\n"])), colorOffWhite, jumboPaddingY);
const ConnectionStatusModal = styled(ModalSimple)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  padding: 1rem;\n  height: 28rem;\n\n"])));
const Container = styled.div(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  padding: 0 calc(", " / 2 + ", ");\n"])), mdPaddingX, borderSizeLarge);
const Header = styled.div(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  margin: 0;\n  padding: 0;\n  border: none;\n  line-height: ", ";\n  margin-bottom: ", ";\n"])), titlePositionLeft, lgPaddingY);
const Title = styled.h2(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-weight: 500;\n  font-size: ", ";\n  text-align: left;\n  margin: 0;\n\n  [dir=\"rtl\"] & {\n    text-align: right;\n  }\n"])), colorGrayDark, fontSizeXL);
const Content = styled.div(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0;\n"])));
const Wrapper = styled.div(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n  display: block;\n  width: 100%;\n  max-height: 16rem;\n"])));
const Status = styled.div(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["\n  display: flex;\n  width: 6rem;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n"])));
const Copy = styled.span(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\n  cursor: pointer;\n  color: ", ";\n\n  &:hover {\n    text-decoration: underline;\n  }\n\n  ", "\n"])), colorPrimary, _ref4 => {
  let {
    disabled
  } = _ref4;
  return disabled && "\n    cursor: not-allowed !important;\n  ";
});
const HelperWrapper = styled.div(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\n  min-width: 12.5rem;\n  height: 100%;\n\n  @media ", " {\n    flex: none;\n    width: 100%;\n    scroll-snap-align: start;\n    display: flex;\n    justify-content: center;\n  }\n"])), mediumDown);
const Helper = styled.div(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\n  width: 12.5rem;\n  height: 100%;\n  border-radius: .5rem;\n  background-color: ", ";\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: .5rem;\n"])), colorOffWhite);
const NetworkDataContent = styled.div(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["\n  margin: 0;\n  display: flex;\n  justify-content: space-around;\n  flex-grow: 1;\n\n  @media ", " {\n    flex: none;\n    width: 100%;\n    scroll-snap-align: start;\n  }\n"])), mediumDown);
const DataColumn = styled.div(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n\n  @media ", " {\n    flex-grow: 1;\n  }\n"])), hasPhoneWidth);
const ConnectionTabs = styled(Tabs)(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  justify-content: flex-start;\n\n  @media ", " {\n    width: 100%;\n    flex-flow: column;\n  }\n"])), smallOnly);
const ConnectionTabList = styled(TabList)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  margin: 0;\n  margin-bottom: .5rem;\n  border: none;\n  padding: 0;\n  width: calc(100% / 3);\n\n  @media ", " {\n    width: 100%;\n    flex-flow: row;\n    flex-wrap: wrap;\n    justify-content: center;\n  }\n"])), smallOnly);
const ConnectionTabPanel = styled(TabPanel)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["\n  display: none;\n  margin: 0 0 0 1rem;\n  height: 13rem;\n\n  [dir=\"rtl\"] & {\n    margin: 0 1rem 0 0;\n  }\n\n  &.is-selected {\n    display: flex;\n    flex-flow: column;\n  }\n\n  & ul {\n    padding: 0;\n  }\n\n  @media ", " {\n    width: 100%;\n    margin: 0;\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n"])), smallOnly);
const ConnectionTabSelector = styled(Tab)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  font-size: 0.9rem;\n  flex: 0 0 auto;\n  justify-content: flex-start;\n  border: none !important;\n  padding: ", " ", ";\n\n  border-radius: .2rem;\n  cursor: pointer;\n  margin-bottom: ", ";\n  align-items: center;\n  flex-grow: 0;\n  min-width: 0;\n\n  & > span {\n    min-width: 0;\n    display: inline-block;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  @media ", " {\n    max-width: 100%;\n    margin: 0 ", " 0 0;\n    & > i {\n      display: none;\n    }\n\n    [dir=\"rtl\"] & {\n       margin: 0 0 0 ", ";\n    }\n  }\n\n  span {\n    border-bottom: 2px solid ", ";\n  }\n\n  &.is-selected {\n    border: none;\n    color: ", ";\n\n    span {\n      border-bottom: 2px solid ", ";\n    }\n  }\n"])), mdPaddingY, mdPaddingX, smPaddingY, smallOnly, smPaddingX, smPaddingX, colorWhite, colorPrimary, btnPrimaryActiveBg);
module.exportDefault({
  Item,
  Left,
  Name,
  Text,
  Avatar,
  Icon,
  Right,
  Time,
  NetworkDataContainer,
  NetworkData,
  CopyContainer,
  ConnectionStatusModal,
  ClientNotRespondingText,
  Container,
  Header,
  Title,
  Content,
  Wrapper,
  Status,
  Copy,
  Helper,
  NetworkDataContent,
  FullName,
  DataColumn,
  HelperWrapper,
  ConnectionTabs,
  ConnectionTabList,
  ConnectionTabSelector,
  ConnectionTabPanel
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"status-helper":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/status-helper/component.jsx                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, Fragment, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  Fragment(v) {
    Fragment = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let useReactiveVar;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let Icon;
module.link("/imports/ui/components/connection-status/icon/component", {
  default(v) {
    Icon = v;
  }
}, 4);
let SettingsMenuContainer;
module.link("/imports/ui/components/settings/container", {
  default(v) {
    SettingsMenuContainer = v;
  }
}, 5);
let connectionStatus;
module.link("/imports/ui/core/graphql/singletons/connectionStatus", {
  default(v) {
    connectionStatus = v;
  }
}, 6);
let getWorstStatus;
module.link("../service", {
  getWorstStatus(v) {
    getWorstStatus = v;
  }
}, 7);
const intlMessages = defineMessages({
  label: {
    id: 'app.connection-status.label',
    description: 'Connection status label'
  },
  settings: {
    id: 'app.connection-status.settings',
    description: 'Connection settings label'
  }
});
class ConnectionStatusIcon extends PureComponent {
  constructor(props) {
    super(props);
    this.state = {
      isSettingsMenuModalOpen: false
    };
    this.setSettingsMenuModalIsOpen = this.setSettingsMenuModalIsOpen.bind(this);
  }
  // eslint-disable-next-line
  renderIcon() {
    let level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'normal';
    return /*#__PURE__*/React.createElement(Styled.IconWrapper, null, /*#__PURE__*/React.createElement(Icon, {
      level: level,
      grayscale: true
    }));
  }
  openAdjustSettings() {
    this.setSettingsMenuModalIsOpen(true);
  }
  setSettingsMenuModalIsOpen(value) {
    const {
      closeModal
    } = this.props;
    this.setState({
      isSettingsMenuModalOpen: value
    });
    if (!value) {
      closeModal();
    }
  }
  render() {
    const {
      intl,
      currentStatus
    } = this.props;
    let color;
    switch (currentStatus) {
      case 'warning':
        color = 'success';
        break;
      case 'danger':
        color = 'warning';
        break;
      case 'critical':
        color = 'danger';
        break;
      default:
        color = 'success';
    }
    const {
      isSettingsMenuModalOpen
    } = this.state;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.StatusIconWrapper, {
      color: color
    }, this.renderIcon(currentStatus)), /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.label)), currentStatus === 'critical' || currentStatus === 'danger' || isSettingsMenuModalOpen ? /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.Settings, {
      // eslint-disable-next-line
      onClick: this.openAdjustSettings.bind(this),
      role: "button"
    }, intl.formatMessage(intlMessages.settings)), isSettingsMenuModalOpen ? /*#__PURE__*/React.createElement(SettingsMenuContainer, {
      selectedTab: 2,
      onRequestClose: () => this.setSettingsMenuModalIsOpen(false),
      priority: 'medium',
      setIsOpen: this.setSettingsMenuModalIsOpen,
      isOpen: isSettingsMenuModalOpen
    }) : null) : /*#__PURE__*/React.createElement("div", null, "\xA0"));
  }
}
const WrapConnectionStatus = props => {
  const rttStatus = useReactiveVar(connectionStatus.getRttStatusVar());
  const jitterStatus = useReactiveVar(connectionStatus.getJitterStatusVar());
  const packetLossStatus = useReactiveVar(connectionStatus.getPacketLossStatusVar());
  const status = getWorstStatus([rttStatus, jitterStatus, packetLossStatus]);
  return /*#__PURE__*/React.createElement(ConnectionStatusIcon, _extends({}, props, {
    currentStatus: status
  }));
};
module.exportDefault(injectIntl(WrapConnectionStatus));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/status-helper/styles.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorPrimary, colorSuccess, colorWarning, colorDanger;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorWarning(v) {
    colorWarning = v;
  },
  colorDanger(v) {
    colorDanger = v;
  }
}, 1);
const StatusIconWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  border-radius: 50%;\n  padding: 1.5rem;\n\n  ", "\n"])), _ref => {
  let {
    color
  } = _ref;
  let bgColor = colorSuccess;
  bgColor = color === 'warning' ? colorWarning : bgColor;
  bgColor = color === 'danger' ? colorDanger : bgColor;
  return "background-color: ".concat(bgColor, ";");
});
const IconWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  width: 2.25rem;\n  height: 2.25rem;\n"])));
const Label = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  font-weight: 600;\n  margin: .25rem 0 .5rem;\n"])));
const Settings = styled.span(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  color: ", ";\n  cursor: pointer;\n\n  &:hover {\n    text-decoration: underline;\n  }\n"])), colorPrimary);
module.exportDefault({
  StatusIconWrapper,
  IconWrapper,
  Label,
  Settings
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/component.jsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let UPDATE_CONNECTION_ALIVE_AT;
module.link("./mutations", {
  UPDATE_CONNECTION_ALIVE_AT(v) {
    UPDATE_CONNECTION_ALIVE_AT = v;
  }
}, 2);
let getStatus, handleAudioStatsEvent, startMonitoringNetwork;
module.link("/imports/ui/components/connection-status/service", {
  getStatus(v) {
    getStatus = v;
  },
  handleAudioStatsEvent(v) {
    handleAudioStatsEvent = v;
  },
  startMonitoringNetwork(v) {
    startMonitoringNetwork = v;
  }
}, 3);
let connectionStatus;
module.link("../../core/graphql/singletons/connectionStatus", {
  default(v) {
    connectionStatus = v;
  }
}, 4);
let useGetStats;
module.link("../video-provider/hooks", {
  useGetStats(v) {
    useGetStats = v;
  }
}, 5);
let getBaseUrl;
module.link("/imports/ui/core/utils/getBaseUrl", {
  default(v) {
    getBaseUrl = v;
  }
}, 6);
const ConnectionStatus = () => {
  const STATS_INTERVAL = window.meetingClientSettings.public.stats.interval;
  const networkRttInMs = useRef(0); // Ref to store the last rtt
  const timeoutRef = useRef(null);
  const [updateConnectionAliveAtM] = useMutation(UPDATE_CONNECTION_ALIVE_AT);
  const getVideoStreamsStats = useGetStats();
  const handleUpdateConnectionAliveAt = () => {
    const startTime = performance.now();
    fetch("".concat(getBaseUrl(), "/ping"), {
      signal: AbortSignal.timeout(STATS_INTERVAL)
    }).then(res => {
      if (res.ok && res.status === 200) {
        const rttLevels = window.meetingClientSettings.public.stats.rtt;
        const endTime = performance.now();
        const networkRtt = endTime - startTime;
        networkRttInMs.current = networkRtt;
        updateConnectionAliveAtM({
          variables: {
            networkRttInMs: networkRtt
          }
        });
        const rttStatus = getStatus(rttLevels, networkRtt);
        connectionStatus.setRttValue(networkRtt);
        connectionStatus.setRttStatus(rttStatus);
        connectionStatus.setLastRttRequestSuccess(true);
      }
    }).catch(() => {
      connectionStatus.setLastRttRequestSuccess(false);
      // gets the worst status
      connectionStatus.setRttStatus('critical');
    }).finally(() => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
      timeoutRef.current = setTimeout(() => {
        handleUpdateConnectionAliveAt();
      }, STATS_INTERVAL);
    });
  };
  useEffect(() => {
    // Delay first connectionAlive to avoid high RTT misestimation
    // due to initial subscription and mutation traffic at client render
    timeoutRef.current = setTimeout(() => {
      handleUpdateConnectionAliveAt();
    }, STATS_INTERVAL / 2);
    const STATS_ENABLED = window.meetingClientSettings.public.stats.enabled;
    if (STATS_ENABLED) {
      window.addEventListener('audiostats', handleAudioStatsEvent);
      startMonitoringNetwork(getVideoStreamsStats);
    }
    return () => {
      if (STATS_ENABLED) {
        window.removeEventListener('audiostats', handleAudioStatsEvent);
      }
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);
  return null;
};
module.exportDefault(ConnectionStatus);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/mutations.jsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  UPDATE_CONNECTION_ALIVE_AT: () => UPDATE_CONNECTION_ALIVE_AT
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const UPDATE_CONNECTION_ALIVE_AT = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation UpdateConnectionAliveAt($networkRttInMs: Float!) {\n    userSetConnectionAlive(\n      networkRttInMs: $networkRttInMs\n    )\n  }"])));
module.exportDefault({
  UPDATE_CONNECTION_ALIVE_AT
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/queries.jsx                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  CONNECTION_STATUS_REPORT_SUBSCRIPTION: () => CONNECTION_STATUS_REPORT_SUBSCRIPTION,
  USER_CURRENT_STATUS_SUBSCRIPTION: () => USER_CURRENT_STATUS_SUBSCRIPTION,
  CONNECTION_STATUS_SUBSCRIPTION: () => CONNECTION_STATUS_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CONNECTION_STATUS_REPORT_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["subscription ConnStatusReport {\n  user_connectionStatusReport(\n  where: {\n    _or: [\n            { clientNotResponding: { _eq: true } }, \n            { lastUnstableStatus: { _is_null: false } }\n          ]\n  }) {\n    user {\n      userId\n      name\n      avatar\n      color\n      isModerator\n      isOnline\n    }\n    clientNotResponding\n    lastUnstableStatus\n    lastUnstableStatusAt\n    currentStatus\n  }\n}"])));
const USER_CURRENT_STATUS_SUBSCRIPTION = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  subscription CurrentUserConnStatus($userId: String!) {\n    user_connectionStatusReport(\n      where: {\n        user: {\n          userId: { _eq: $userId }\n        }\n      }\n    ) {\n      currentStatus\n    }\n  }\n"])));
const CONNECTION_STATUS_SUBSCRIPTION = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["subscription ConnStatus {\n  user_connectionStatus {\n    connectionAliveAt\n    userClientResponseAt\n    status\n    statusUpdatedAt\n  }\n}"])));
module.exportDefault(CONNECTION_STATUS_REPORT_SUBSCRIPTION);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-status/service.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  getStatus: () => getStatus,
  startMonitoringNetwork: () => startMonitoringNetwork,
  getWorstStatus: () => getWorstStatus
});
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 0);
let makeVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  }
}, 1);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 2);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 3);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 4);
let AudioService;
module.link("/imports/ui/components/audio/service", {
  default(v) {
    AudioService = v;
  }
}, 5);
let ScreenshareService;
module.link("/imports/ui/components/screenshare/service", {
  default(v) {
    ScreenshareService = v;
  }
}, 6);
let connectionStatus;
module.link("../../core/graphql/singletons/connectionStatus", {
  default(v) {
    connectionStatus = v;
  }
}, 7);
const intlMessages = defineMessages({
  saved: {
    id: 'app.settings.save-notification.label',
    description: 'Label shown in toast when data savings are saved'
  },
  notification: {
    id: 'app.connection-status.notification',
    description: 'Label shown in toast when connection loss is detected'
  }
});
const NETWORK_MONITORING_INTERVAL_MS = 2000;
const lastLevel = makeVar();
let statsTimeout = null;
const URL_REGEX = new RegExp(/^(http|https):\/\/[^ "]+$/);
const getHelp = () => {
  const STATS = window.meetingClientSettings.public.stats;
  if (URL_REGEX.test(STATS.help)) return STATS.help;
  return null;
};
const getStats = () => {
  const STATS = window.meetingClientSettings.public.stats;
  return STATS.level[lastLevel()];
};
const setStats = function () {
  let level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'recovery';
  let value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (lastLevel() !== level) {
    lastLevel(level);
  }
};
const handleAudioStatsEvent = event => {
  const STATS = window.meetingClientSettings.public.stats;
  const {
    detail
  } = event;
  if (detail) {
    const {
      loss,
      jitter
    } = detail;
    let active = false;
    // From higher to lower
    for (let i = STATS.level.length - 1; i >= 0; i--) {
      if (loss >= STATS.loss[i] || jitter >= STATS.jitter[i]) {
        active = true;
        setStats(i, 'audio', {
          loss,
          jitter
        });
        break;
      }
    }
    if (active) startStatsTimeout();
  }
};
const startStatsTimeout = () => {
  const STATS = window.meetingClientSettings.public.stats;
  if (statsTimeout !== null) clearTimeout(statsTimeout);
  statsTimeout = setTimeout(() => {
    setStats(-1, 'recovery', {});
  }, STATS.timeout);
};
const sortLevel = (a, b) => {
  const RTT = window.meetingClientSettings.public.stats.rtt;
  if (!a.lastUnstableStatus && !b.lastUnstableStatus) return 0;
  if (!a.lastUnstableStatus) return 1;
  if (!b.lastUnstableStatus) return -1;
  const rttOfA = RTT[a.lastUnstableStatus];
  const rttOfB = RTT[b.lastUnstableStatus];
  return rttOfB - rttOfA;
};
const sortOnline = (a, b) => {
  if (!a.user.isOnline && b.user.isOnline) return 1;
  if (a.user.isOnline === b.user.isOnline) return 0;
  if (a.user.isOnline && !b.user.isOnline) return -1;
};
const isEnabled = () => window.meetingClientSettings.public.stats.enabled;
const getNotified = () => {
  const notified = Session.getItem('connectionStatusNotified');

  // Since notified can be undefined we need a boolean verification
  return notified === true;
};
const notification = (level, intl) => {
  const NOTIFICATION = window.meetingClientSettings.public.stats.notification;
  if (!NOTIFICATION[level]) return null;

  // Avoid toast spamming
  const notified = getNotified();
  if (notified) {
    return null;
  }
  Session.setItem('connectionStatusNotified', true);
  if (intl) notify(intl.formatMessage(intlMessages.notification), level, 'warning');
};

/**
 * Calculates the jitter buffer average.
 * For more information see:
 * https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats-jitterbufferdelay
 * @param {Object} inboundRtpData The RTCInboundRtpStreamStats object retrieved
 *                                in getStats() call.
 * @returns The jitter buffer average in ms
 */
const calculateJitterBufferAverage = inboundRtpData => {
  if (!inboundRtpData) return 0;
  const {
    jitterBufferDelay,
    jitterBufferEmittedCount
  } = inboundRtpData;
  if (!jitterBufferDelay || !jitterBufferEmittedCount) return '--';
  return Math.round(jitterBufferDelay / jitterBufferEmittedCount * 1000);
};

/**
 * Given the data returned from getStats(), returns an array containing all the
 * the stats of the given type.
 * For more information see:
 * https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport
 * and
 * https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsType
 * @param {Object} data - RTCStatsReport object returned from getStats() API
 * @param {String} type - The string type corresponding to RTCStatsType object
 * @returns {Array[Object]} An array containing all occurrences of the given
 *                          type in the data Object.
 */
const getDataType = (data, type) => {
  if (!data || typeof data !== 'object' || !type) return [];
  return Object.values(data).filter(stat => stat.type === type);
};

/**
 * Returns a new Object containing extra parameters calculated from inbound
 * data. The input data is also appended in the returned Object.
 * @param {Object} currentData - The object returned from getStats / service's
 *                               getNetworkData()
 * @returns {Object} the currentData object with the extra inbound network
 *                    added to it.
 */
const addExtraInboundNetworkParameters = data => {
  if (!data) return data;
  const inboundRtpData = getDataType(data, 'inbound-rtp')[0];
  if (!inboundRtpData) return data;
  const extraParameters = {
    jitterBufferAverage: calculateJitterBufferAverage(inboundRtpData),
    packetsLost: inboundRtpData.packetsLost
  };
  return Object.assign(inboundRtpData, extraParameters);
};

/**
 * Retrieves the inbound and outbound data using WebRTC getStats API, for audio.
 * @returns An Object with format (property:type) :
 *   {
 *     transportStats: Object,
 *     inbound-rtp: RTCInboundRtpStreamStats,
 *     outbound-rtp: RTCOutboundRtpStreamStats,
 *   }
 * For more information see:
 * https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats
 * and
 * https://www.w3.org/TR/webrtc-stats/#dom-rtcoutboundrtpstreamstats
 */
const getAudioData = async () => {
  const data = await AudioService.getStats();
  if (!data) return {};
  addExtraInboundNetworkParameters(data);
  return data;
};

/**
 * Retrieves the inbound and outbound data using WebRTC getStats API, for video.
 * The video stats contains the stats about all video peers (cameras) and
 * for screenshare peer appended into one single object, containing the id
 * of the peers with it's stats information.
 * @returns An Object containing video data for all video peers and screenshare
 *          peer
 */
const getVideoData = async getVideoStreamsStats => {
  const camerasData = (await getVideoStreamsStats()) || {};
  const screenshareData = (await ScreenshareService.getStats()) || {};
  return _objectSpread(_objectSpread({}, camerasData), screenshareData);
};

/**
 * Get the user, audio and video data from current active streams.
 * For audio, this will get information about the mic/listen-only stream.
 * @returns An Object containing all this data.
 */
const getNetworkData = async getVideoStreamsStats => {
  const audio = await getAudioData();
  const video = await getVideoData(getVideoStreamsStats);
  const user = {
    time: new Date(),
    username: Auth.username,
    meeting_name: Auth.confname,
    meeting_id: Auth.meetingID,
    connection_id: Auth.connectionID,
    user_id: Auth.userID,
    extern_user_id: Auth.externUserID
  };
  const fullData = {
    user,
    audio,
    video
  };
  return fullData;
};

/**
 * Calculates both upload and download rates using data retrieved from getStats
 * API. For upload (outbound-rtp) we use both bytesSent and timestamp fields.
 * byteSent field contains the number of octets sent at the given timestamp,
 * more information can be found in:
 * https://www.w3.org/TR/webrtc-stats/#dom-rtcsentrtpstreamstats-bytessent
 *
 * timestamp is given in millisseconds, more information can be found in:
 * https://www.w3.org/TR/webrtc-stats/#webidl-1049090475
 * @param {Object} currentData - The object returned from getStats / service's
 *                               getNetworkData()
 * @param {Object} previousData - The same object as above, but representing
 *                               a data collected in past (previous call of
 *                               service's getNetworkData())
 * @returns An object of numbers, containing both outbound (upload) and inbound
 *          (download) rates (kbps).
 */
const calculateBitsPerSecond = (currentData, previousData) => {
  const result = {
    outbound: 0,
    inbound: 0
  };
  if (!currentData || !previousData) return result;
  const currentOutboundData = getDataType(currentData, 'outbound-rtp')[0];
  const currentInboundData = getDataType(currentData, 'inbound-rtp')[0];
  const previousOutboundData = getDataType(previousData, 'outbound-rtp')[0];
  const previousInboundData = getDataType(previousData, 'inbound-rtp')[0];
  if (currentOutboundData && previousOutboundData) {
    const {
      bytesSent: outboundBytesSent,
      timestamp: outboundTimestamp
    } = currentOutboundData;
    let {
      headerBytesSent: outboundHeaderBytesSent
    } = currentOutboundData;
    if (!outboundHeaderBytesSent) outboundHeaderBytesSent = 0;
    const {
      bytesSent: previousOutboundBytesSent,
      timestamp: previousOutboundTimestamp
    } = previousOutboundData;
    let {
      headerBytesSent: previousOutboundHeaderBytesSent
    } = previousOutboundData;
    if (!previousOutboundHeaderBytesSent) previousOutboundHeaderBytesSent = 0;
    const outboundBytesPerSecond = (outboundBytesSent + outboundHeaderBytesSent - previousOutboundBytesSent - previousOutboundHeaderBytesSent) / (outboundTimestamp - previousOutboundTimestamp);
    result.outbound = Math.round(outboundBytesPerSecond * 8 * 1000 / 1024);
  }
  if (currentInboundData && previousInboundData) {
    const {
      bytesReceived: inboundBytesReceived,
      timestamp: inboundTimestamp
    } = currentInboundData;
    let {
      headerBytesReceived: inboundHeaderBytesReceived
    } = currentInboundData;
    if (!inboundHeaderBytesReceived) inboundHeaderBytesReceived = 0;
    const {
      bytesReceived: previousInboundBytesReceived,
      timestamp: previousInboundTimestamp
    } = previousInboundData;
    let {
      headerBytesReceived: previousInboundHeaderBytesReceived
    } = previousInboundData;
    if (!previousInboundHeaderBytesReceived) {
      previousInboundHeaderBytesReceived = 0;
    }
    const inboundBytesPerSecond = (inboundBytesReceived + inboundHeaderBytesReceived - previousInboundBytesReceived - previousInboundHeaderBytesReceived) / (inboundTimestamp - previousInboundTimestamp);
    result.inbound = Math.round(inboundBytesPerSecond * 8 * 1000 / 1024);
  }
  return result;
};

/**
 * Similar to calculateBitsPerSecond, but it receives stats from multiple
 * peers. The total inbound/outbound is the sum of all peers.
 * @param {Object} currentData - The Object returned from
 *                               getStats / service's getNetworkData()
 * @param {Object} previousData - The same object as above, but
 *                                representing a data collected in past
 *                                (previous call of service's getNetworkData())
 */
const calculateBitsPerSecondFromMultipleData = (currentData, previousData) => {
  const result = {
    outbound: 0,
    inbound: 0
  };
  if (!currentData || !previousData) return result;
  Object.keys(currentData).forEach(peerId => {
    if (previousData[peerId]) {
      const {
        outbound: peerOutbound,
        inbound: peerInbound
      } = calculateBitsPerSecond(currentData[peerId], previousData[peerId]);
      result.outbound += peerOutbound;
      result.inbound += peerInbound;
    }
  });
  return result;
};
const sortConnectionData = connectionData => connectionData.sort(sortLevel).sort(sortOnline);
function getStatus(levels, value) {
  const sortedLevels = Object.entries(levels).map(entry => [entry[0], Number(entry[1])]).sort((a, b) => a[1] - b[1]);
  for (let i = 0; i < sortedLevels.length; i += 1) {
    if (value < sortedLevels[i][1]) {
      return i === 0 ? 'normal' : sortedLevels[i - 1][0];
    }
    if (i === sortedLevels.length - 1) {
      return sortedLevels[i][0];
    }
  }
  return sortedLevels[sortedLevels.length - 1][0];
}
async function startMonitoringNetwork(getVideoStreamsStats) {
  let previousData = await getNetworkData(getVideoStreamsStats);
  setInterval(async () => {
    const data = await getNetworkData(getVideoStreamsStats);
    const {
      outbound: audioCurrentUploadRate,
      inbound: audioCurrentDownloadRate
    } = calculateBitsPerSecond(data.audio, previousData.audio);
    const inboundRtp = getDataType(data.audio, 'inbound-rtp')[0];
    const jitter = inboundRtp ? inboundRtp.jitterBufferAverage : 0;
    const packetsLost = inboundRtp ? inboundRtp.packetsLost : 0;
    const audio = {
      audioCurrentUploadRate,
      audioCurrentDownloadRate,
      jitter,
      packetsLost,
      transportStats: data.audio.transportStats
    };
    const {
      outbound: videoCurrentUploadRate,
      inbound: videoCurrentDownloadRate
    } = calculateBitsPerSecondFromMultipleData(data.video, previousData.video);
    const video = {
      videoCurrentUploadRate,
      videoCurrentDownloadRate
    };
    const {
      user
    } = data;
    const networkData = {
      user,
      audio,
      video
    };
    previousData = data;
    connectionStatus.setNetworkData(networkData);
    connectionStatus.setJitterStatus(getStatus(window.meetingClientSettings.public.stats.jitter, jitter));
    connectionStatus.setPacketLossStatus(getStatus(window.meetingClientSettings.public.stats.loss, packetsLost));
  }, NETWORK_MONITORING_INTERVAL_MS);
}
function getWorstStatus(statuses) {
  const statusOrder = {
    normal: 0,
    warning: 1,
    danger: 2,
    critical: 3
  };
  let worstStatus = 'normal';
  // eslint-disable-next-line
  for (let status of statuses) {
    if (statusOrder[status] > statusOrder[worstStatus]) {
      worstStatus = status;
    }
  }
  return worstStatus;
}
module.exportDefault({
  getStats,
  getHelp,
  isEnabled,
  notification,
  getNetworkData,
  calculateBitsPerSecond,
  calculateBitsPerSecondFromMultipleData,
  getDataType,
  sortConnectionData,
  handleAudioStatsEvent,
  startMonitoringNetwork,
  getStatus,
  getWorstStatus
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"generic-content":{"generic-content-item":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/generic-content/generic-content-item/component.tsx                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
const GenericContentItem = props => {
  const {
    renderFunction
  } = props;
  const elementRef = useRef(null);
  useEffect(() => {
    if (elementRef.current && renderFunction) {
      renderFunction(elementRef.current);
    }
  }, [elementRef]);
  return /*#__PURE__*/React.createElement("div", {
    style: {
      height: '100%',
      overflow: 'hidden'
    },
    ref: elementRef
  });
};
module.exportDefault(GenericContentItem);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"generic-main-content":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/generic-content/generic-main-content/component.tsx                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("../styles", {
  "*"(v) {
    Styled = v;
  }
}, 1);
let GenericContentItem;
module.link("../generic-content-item/component", {
  default(v) {
    GenericContentItem = v;
  }
}, 2);
const GenericMainContent = _ref => {
  var _componentToRender$, _componentToRender$2;
  let {
    isResizing,
    genericContentLayoutInformation,
    renderFunctionComponents,
    genericContentId
  } = _ref;
  const {
    height,
    width,
    top,
    left,
    right
  } = genericContentLayoutInformation;
  const isMinimized = width === 0 && height === 0;
  const componentToRender = renderFunctionComponents.filter(g => genericContentId === g.id);
  return /*#__PURE__*/React.createElement(Styled.Container, {
    style: {
      height,
      width,
      top,
      left,
      right
    },
    isResizing: isResizing,
    isMinimized: isMinimized
  }, /*#__PURE__*/React.createElement(GenericContentItem, {
    key: (_componentToRender$ = componentToRender[0]) === null || _componentToRender$ === void 0 ? void 0 : _componentToRender$.id,
    renderFunction: (_componentToRender$2 = componentToRender[0]) === null || _componentToRender$2 === void 0 ? void 0 : _componentToRender$2.contentFunction
  }));
};
module.exportDefault(GenericMainContent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/generic-content/generic-main-content/container.tsx                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useContext, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let layoutDispatch, layoutSelectInput, layoutSelectOutput;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  }
}, 1);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 2);
let GenericContentType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/generic-content-item/enums", {
  GenericContentType(v) {
    GenericContentType = v;
  }
}, 3);
let GenericMainContent;
module.link("./component", {
  default(v) {
    GenericMainContent = v;
  }
}, 4);
let ACTIONS, PRESENTATION_AREA;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PRESENTATION_AREA(v) {
    PRESENTATION_AREA = v;
  }
}, 5);
let getDifferenceBetweenLists;
module.link("../utils", {
  default(v) {
    getDifferenceBetweenLists = v;
  }
}, 6);
const GenericContentMainAreaContainer = props => {
  const {
    genericMainContentId
  } = props;
  const previousPluginGenericContainerContents = useRef([]);
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  const layoutContextDispatch = layoutDispatch();
  let genericContainerContentExtensibleArea = [];
  if (pluginsExtensibleAreasAggregatedState.genericContentItems) {
    const genericContainerContent = pluginsExtensibleAreasAggregatedState.genericContentItems.filter(g => g.type === GenericContentType.MAIN_AREA);
    genericContainerContentExtensibleArea = [...genericContainerContent];
    const [genericContentItemsAdded, genericContentItemsRemoved] = getDifferenceBetweenLists(previousPluginGenericContainerContents.current, genericContainerContentExtensibleArea);
    if (genericContentItemsAdded.length > 0 || genericContentItemsRemoved.length > 0) {
      previousPluginGenericContainerContents.current = [...genericContainerContentExtensibleArea];
      genericContentItemsAdded.forEach(g => {
        layoutContextDispatch({
          type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
          value: {
            content: PRESENTATION_AREA.GENERIC_CONTENT,
            open: true,
            genericContentId: g.id
          }
        });
      });
      genericContentItemsRemoved.forEach(g => {
        layoutContextDispatch({
          type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
          value: {
            content: PRESENTATION_AREA.GENERIC_CONTENT,
            open: false,
            genericContentId: g.id
          }
        });
      });
    }
  }
  const genericContentLayoutInformation = layoutSelectOutput(i => i.genericMainContent);
  const cameraDock = layoutSelectInput(i => i.cameraDock);
  const {
    isResizing
  } = cameraDock;
  if (!genericContainerContentExtensibleArea || genericContainerContentExtensibleArea.length === 0 || !genericMainContentId) return null;
  return /*#__PURE__*/React.createElement(GenericMainContent, {
    genericContentId: genericMainContentId,
    renderFunctionComponents: genericContainerContentExtensibleArea,
    isResizing: isResizing,
    genericContentLayoutInformation: genericContentLayoutInformation
  });
};
module.exportDefault(GenericContentMainAreaContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"generic-sidekick-content":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/generic-content/generic-sidekick-content/component.tsx                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 1);
let GenericContentItem;
module.link("../generic-content-item/component", {
  default(v) {
    GenericContentItem = v;
  }
}, 2);
let PANELS, ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 3);
const GenericSidekickContent = _ref => {
  let {
    renderFunction,
    layoutContextDispatch,
    genericContentId,
    genericContentLabel
  } = _ref;
  return /*#__PURE__*/React.createElement(Styled.Container, {
    "data-test": genericContentId
  }, /*#__PURE__*/React.createElement(Styled.Header, {
    leftButtonProps: {
      onClick: () => {
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: false
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.NONE
        });
      },
      'data-test': "hide_".concat(genericContentId),
      'aria-label': genericContentLabel,
      label: genericContentLabel
    },
    customRightButton: null
  }), /*#__PURE__*/React.createElement(GenericContentItem, {
    key: genericContentId,
    renderFunction: renderFunction
  }));
};
module.exportDefault(GenericSidekickContent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/generic-content/generic-sidekick-content/container.tsx                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useContext;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  }
}, 0);
let GenericContentType;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/extensible-areas/generic-content-item/enums", {
  GenericContentType(v) {
    GenericContentType = v;
  }
}, 1);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 2);
let PANELS, ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 3);
let GenericSidekickContent;
module.link("./component", {
  default(v) {
    GenericSidekickContent = v;
  }
}, 4);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 5);
let layoutDispatch;
module.link("../../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 6);
const GenericContentSidekickContainer = props => {
  const {
    genericSidekickContentId
  } = props;
  const genericSidekickContentIdIsolated = genericSidekickContentId.replace(PANELS.GENERIC_CONTENT_SIDEKICK, '');
  const layoutContextDispatch = layoutDispatch();
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let genericContentSidekickAreaExtensibleArea = [];
  if (pluginsExtensibleAreasAggregatedState.genericContentItems) {
    const genericContentSidekickArea = pluginsExtensibleAreasAggregatedState.genericContentItems.filter(g => g.type === GenericContentType.SIDEKICK_AREA);
    genericContentSidekickAreaExtensibleArea = [...genericContentSidekickArea];
  }
  const pickedGenericSidekickContent = genericContentSidekickAreaExtensibleArea.filter(gsc => gsc.id === genericSidekickContentIdIsolated)[0];
  if (genericContentSidekickAreaExtensibleArea.length === 0 || !pickedGenericSidekickContent) {
    logger.error({
      logCode: 'generic_sidekick_content_not_found',
      extraInfo: {
        genericSidekickContentId,
        genericSidekickContentIdIsolated
      }
    }, "Generic sidekick content with id ".concat(genericSidekickContentIdIsolated, " not found"));
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.NONE
    });
    return null;
  }
  return /*#__PURE__*/React.createElement(GenericSidekickContent, {
    layoutContextDispatch: layoutContextDispatch,
    genericContentId: pickedGenericSidekickContent.id,
    renderFunction: pickedGenericSidekickContent.contentFunction,
    genericContentLabel: pickedGenericSidekickContent.name
  });
};
module.exportDefault(GenericContentSidekickContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/generic-content/generic-sidekick-content/styles.ts                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 1);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 2);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 3);
let CommonHeader;
module.link("/imports/ui/components/common/control-header/component", {
  default(v) {
    CommonHeader = v;
  }
}, 4);
const Container = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: ", ";\n  padding: ", ";\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  overflow: hidden;\n  height: 100%;\n\n  @media ", " {\n    transform: none !important;\n    &.no-padding {\n      padding: 0;\n    }\n  }\n"])), colorWhite, mdPaddingX, smallOnly);
const Header = styled(CommonHeader)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding-bottom: .2rem;\n"])));
module.exportDefault({
  Container,
  Header
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/generic-content/styles.ts                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  Container: () => Container
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const Container = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  pointer-events: inherit;\n  background: var(--color-black);\n  z-index: 5;\n  display: grid;\n  ", "\n  ", "\n"])), _ref => {
  let {
    isResizing
  } = _ref;
  return isResizing && "\n    pointer-events: none;\n  ";
}, _ref2 => {
  let {
    isMinimized
  } = _ref2;
  return isMinimized && "\n    display: none;\n  ";
});
module.exportDefault({
  Container
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/generic-content/utils.ts                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let difference;
module.link("ramda", {
  difference(v) {
    difference = v;
  }
}, 0);
const getDifferenceBetweenLists = (previousState, currentState) => {
  const added = difference(currentState, previousState);
  const removed = difference(previousState, currentState);
  return [added, removed];
};
module.exportDefault(getDifferenceBetweenLists);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"join-handler":{"custom-users-settings":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/join-handler/custom-users-settings/component.tsx                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useQuery;
module.link("@apollo/client", {
  useQuery(v) {
    useQuery = v;
  }
}, 0);
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 1);
let getUserMetadata;
module.link("./queries", {
  getUserMetadata(v) {
    getUserMetadata = v;
  }
}, 2);
let setUserSettings;
module.link("/imports/ui/core/local-states/useUserSettings", {
  setUserSettings(v) {
    setUserSettings = v;
  }
}, 3);
const CustomUsersSettings = _ref => {
  let {
    children
  } = _ref;
  const {
    data: userMetadataData,
    loading: userMetadataLoading,
    error: userMetadataError
  } = useQuery(getUserMetadata);
  const [allowToRender, setAllowToRender] = React.useState(false);
  useEffect(() => {
    if (userMetadataData && !userMetadataLoading) {
      const filteredData = userMetadataData.user_metadata.map(uc => {
        const {
          parameter,
          value
        } = uc;
        let parsedValue = '';
        try {
          parsedValue = JSON.parse(uc.value);
        } catch (_unused) {
          parsedValue = value;
        }
        return {
          [parameter]: parsedValue
        };
      });
      setUserSettings(filteredData.reduce((acc, item) => _objectSpread(_objectSpread({}, acc), item), {}));
      setAllowToRender(true);
    }
  }, [userMetadataData, userMetadataLoading]);
  useEffect(() => {
    if (userMetadataError) {
      throw new Error("Error on requesting custom parameter data: ".concat(userMetadataError));
    }
  }, [userMetadataError]);
  return allowToRender ? /*#__PURE__*/React.createElement(React.Fragment, null, children) : null;
};
module.exportDefault(CustomUsersSettings);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/join-handler/custom-users-settings/queries.ts                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  getUserMetadata: () => getUserMetadata
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const getUserMetadata = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  query getUserMetadata {\n    user_metadata {\n      parameter\n      value\n    }\n  }\n"])));
module.exportDefault({
  getUserMetadata
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"guest-wait":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/join-handler/guest-wait/component.tsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  GUEST_STATUSES: () => GUEST_STATUSES
});
let React, useCallback, useContext, useEffect, useRef, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let LoadingContext;
module.link("../../common/loading-screen/loading-screen-HOC/component", {
  LoadingContext(v) {
    LoadingContext = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const REDIRECT_TIMEOUT = 15000;
const GUEST_STATUSES = {
  ALLOW: 'ALLOW',
  DENY: 'DENY',
  WAIT: 'WAIT'
};
const intlMessages = defineMessages({
  windowTitle: {
    id: 'app.guest.windowTitle',
    description: 'tab title'
  },
  guestWait: {
    id: 'app.guest.guestWait',
    description: ''
  },
  noSessionToken: {
    id: 'app.guest.noSessionToken',
    description: ''
  },
  guestInvalid: {
    id: 'app.guest.guestInvalid',
    description: ''
  },
  allow: {
    id: 'app.guest.allow',
    description: ''
  },
  deny: {
    id: 'app.guest.guestDeny',
    description: ''
  },
  firstPosition: {
    id: 'app.guest.firstPositionInWaitingQueue',
    description: ''
  },
  position: {
    id: 'app.guest.positionInWaitingQueue',
    description: ''
  },
  calculating: {
    id: 'app.guest.calculating',
    description: ''
  }
});
function getSearchParam(name) {
  const params = new URLSearchParams(window.location.search);
  if (params && params.has(name)) {
    const param = params.get(name);
    return param;
  }
  return null;
}
const GuestWait = props => {
  const {
    guestLobbyMessage,
    guestStatus,
    logoutUrl,
    positionInWaitingQueue
  } = props;
  const intl = useIntl();
  const [animate, setAnimate] = useState(true);
  const [message, setMessage] = useState(intl.formatMessage(intlMessages.guestWait));
  const [positionMessage, setPositionMessage] = useState(intl.formatMessage(intlMessages.calculating));
  const lobbyMessageRef = useRef('');
  const positionInWaitingQueueRef = useRef('');
  const loadingContextInfo = useContext(LoadingContext);
  const updateLobbyMessage = useCallback(message => {
    if (!message) {
      setMessage(intl.formatMessage(intlMessages.guestWait));
      return;
    }
    if (message !== lobbyMessageRef.current) {
      lobbyMessageRef.current = message;
      if (lobbyMessageRef.current.length !== 0) {
        setMessage(lobbyMessageRef.current);
      } else {
        setMessage(intl.formatMessage(intlMessages.guestWait));
      }
    }
  }, [intl]);
  const updatePositionInWaitingQueue = useCallback(newPositionInWaitingQueue => {
    if (positionInWaitingQueueRef.current !== newPositionInWaitingQueue.toString()) {
      positionInWaitingQueueRef.current = newPositionInWaitingQueue.toString();
      if (positionInWaitingQueueRef.current === '1') {
        setPositionMessage(intl.formatMessage(intlMessages.firstPosition));
      } else {
        setPositionMessage(intl.formatMessage(intlMessages.position) + positionInWaitingQueueRef.current);
      }
    }
  }, [intl]);
  useEffect(() => {
    document.title = intl.formatMessage(intlMessages.windowTitle);
  }, []);
  useEffect(() => {
    const sessionToken = getSearchParam('sessionToken');
    if (loadingContextInfo.isLoading) {
      loadingContextInfo.setLoading(false, '');
    }
    if (!sessionToken) {
      setAnimate(false);
      setMessage(intl.formatMessage(intlMessages.noSessionToken));
      return;
    }
    if (!guestStatus) {
      setAnimate(false);
      setPositionMessage('');
      setMessage(intl.formatMessage(intlMessages.guestInvalid));
      return;
    }
    if (guestStatus === GUEST_STATUSES.ALLOW) {
      setPositionMessage('');
      updateLobbyMessage(intl.formatMessage(intlMessages.allow));
      setAnimate(false);
      return;
    }
    if (guestStatus === GUEST_STATUSES.DENY) {
      setAnimate(false);
      setPositionMessage('');
      setMessage(intl.formatMessage(intlMessages.deny));
      setTimeout(() => {
        window.location.assign(logoutUrl);
      }, REDIRECT_TIMEOUT);
      return;
    }
    // WAIT
    updateLobbyMessage(guestLobbyMessage || '');
    if (positionInWaitingQueue) {
      updatePositionInWaitingQueue(positionInWaitingQueue);
    }
  }, [guestLobbyMessage, guestStatus, logoutUrl, positionInWaitingQueue, intl, updateLobbyMessage, updatePositionInWaitingQueue]);
  return /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.Content, {
    id: "content"
  }, /*#__PURE__*/React.createElement(Styled.Heading, {
    as: "h2"
  }, "3/5"), /*#__PURE__*/React.createElement(Styled.Heading, {
    id: "heading"
  }, intl.formatMessage(intlMessages.windowTitle)), animate && /*#__PURE__*/React.createElement(Styled.Spinner, null, /*#__PURE__*/React.createElement(Styled.Bounce1, null), /*#__PURE__*/React.createElement(Styled.Bounce2, null), /*#__PURE__*/React.createElement(Styled.Bounce, null)), /*#__PURE__*/React.createElement("p", {
    "aria-live": "polite",
    "data-test": "guestMessage"
  }, message), /*#__PURE__*/React.createElement(Styled.Position, {
    id: "positionInWaitingQueue"
  }, /*#__PURE__*/React.createElement("p", {
    "aria-live": "polite"
  }, positionMessage))));
};
module.exportDefault(GuestWait);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/join-handler/guest-wait/styles.ts                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
const Container = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  margin: 0;\n"])));
const Content = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  text-align: center;\n  color: white;\n  font-weight: bold;\n  font-size: 24px;\n"])));
const Heading = styled.h1(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  font-size: 2rem;\n"])));
const Position = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  align-items: center;\n  text-align: center;\n"])));
const sk_bouncedelay = keyframes(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  0%,\n  80%,\n  100% {\n    transform: scale(0);\n  }\n\n  40% {\n    transform: scale(1.0);\n  }\n"])));
const Spinner = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  margin: 20px auto;\n  font-size: 0px;\n"])));
const Bounce = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  width: 18px;\n  height: 18px;\n  margin: 0 5px;\n  background-color: rgb(255, 255, 255);\n  display: inline-block;\n  border-radius: 100%;\n  animation: ", " calc(1.4s) infinite ease-in-out both;\n"])), sk_bouncedelay);
const Bounce1 = styled(Bounce)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  animation-delay: -0.32s;\n"])));
const Bounce2 = styled(Bounce)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  animation-delay: -0.16s;\n"])));
module.exportDefault({
  Container,
  Content,
  Heading,
  Position,
  Bounce,
  Bounce1,
  Bounce2,
  Spinner
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presenceManager":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/join-handler/presenceManager/component.tsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useMutation, useQuery;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useQuery(v) {
    useQuery = v;
  }
}, 0);
let React, useContext, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 1);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 2);
let getUserCurrent, getUserInfo, userJoinMutation;
module.link("./queries", {
  getUserCurrent(v) {
    getUserCurrent = v;
  },
  getUserInfo(v) {
    getUserInfo = v;
  },
  userJoinMutation(v) {
    userJoinMutation = v;
  }
}, 3);
let setAuthData;
module.link("/imports/ui/core/local-states/useAuthData", {
  setAuthData(v) {
    setAuthData = v;
  }
}, 4);
let MeetingEndedContainer;
module.link("../../meeting-ended/component", {
  default(v) {
    MeetingEndedContainer = v;
  }
}, 5);
let setUserDataToSessionStorage;
module.link("./service", {
  setUserDataToSessionStorage(v) {
    setUserDataToSessionStorage = v;
  }
}, 6);
let LoadingContext;
module.link("../../common/loading-screen/loading-screen-HOC/component", {
  LoadingContext(v) {
    LoadingContext = v;
  }
}, 7);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 8);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 9);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 10);
let GuestWaitContainer, GUEST_STATUSES;
module.link("../guest-wait/component", {
  default(v) {
    GuestWaitContainer = v;
  },
  GUEST_STATUSES(v) {
    GUEST_STATUSES = v;
  }
}, 11);
const connectionTimeout = 60000;
const MESSAGE_TIMEOUT = 3000;
const PresenceManager = _ref => {
  let {
    authToken,
    children,
    logoutUrl,
    meetingId,
    meetingName,
    userName,
    extId,
    userId,
    joinErrorCode,
    joinErrorMessage,
    joined,
    meetingEnded,
    endedReasonCode,
    endedBy,
    ejectReasonCode,
    bannerColor,
    bannerText,
    customLogoUrl,
    loggedOut,
    guestLobbyMessage,
    guestStatus,
    positionInWaitingQueue
  } = _ref;
  const [allowToRender, setAllowToRender] = React.useState(false);
  const [dispatchUserJoin] = useMutation(userJoinMutation);
  const timeoutRef = React.useRef();
  const loadingContextInfo = useContext(LoadingContext);
  const [isGuestAllowed, setIsGuestAllowed] = useState(guestStatus === GUEST_STATUSES.ALLOW);
  useEffect(() => {
    const allowed = guestStatus === GUEST_STATUSES.ALLOW;
    if (allowed) {
      setTimeout(() => {
        setIsGuestAllowed(true);
      }, MESSAGE_TIMEOUT);
    } else {
      setIsGuestAllowed(false);
    }
  }, [guestStatus]);
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const sessionToken = urlParams.get('sessionToken');
    setAuthData({
      meetingId,
      userId,
      authToken,
      logoutUrl,
      sessionToken,
      userName,
      extId,
      meetingName
    });
    setUserDataToSessionStorage({
      meetingId,
      userId,
      authToken,
      logoutUrl,
      sessionToken,
      userName,
      extId,
      meetingName,
      customLogoUrl
    });
  }, []);
  useEffect(() => {
    if (isGuestAllowed) {
      timeoutRef.current = setTimeout(() => {
        loadingContextInfo.setLoading(false, '');
        throw new Error('Authentication timeout');
      }, connectionTimeout);
    }
  }, [isGuestAllowed]);
  useEffect(() => {
    if (bannerColor || bannerText) {
      Session.setItem('bannerText', bannerText);
      Session.setItem('bannerColor', bannerColor);
    }
  }, [bannerColor, bannerText]);
  useEffect(() => {
    if (authToken && !joined && isGuestAllowed) {
      dispatchUserJoin({
        variables: {
          authToken,
          clientType: 'HTML5',
          clientIsMobile: deviceInfo.isMobile
        }
      });
    }
  }, [joined, authToken, isGuestAllowed]);
  useEffect(() => {
    if (joined) {
      clearTimeout(timeoutRef.current);
      setAllowToRender(true);
    }
  }, [joined]);
  useEffect(() => {
    if (joinErrorCode) {
      loadingContextInfo.setLoading(false, '');
    }
  }, [joinErrorCode, joinErrorMessage]);
  const errorCode = loggedOut ? 'user_logged_out_reason' : joinErrorCode || ejectReasonCode;
  return /*#__PURE__*/React.createElement(React.Fragment, null, allowToRender && !(meetingEnded || joinErrorCode || ejectReasonCode || loggedOut) ? children : null, meetingEnded || joinErrorCode || ejectReasonCode || loggedOut ? /*#__PURE__*/React.createElement(MeetingEndedContainer, {
    meetingEndedCode: endedReasonCode,
    endedBy: endedBy,
    joinErrorCode: errorCode
  }) : null, !isGuestAllowed && !(meetingEnded || joinErrorCode || ejectReasonCode || loggedOut) ? /*#__PURE__*/React.createElement(GuestWaitContainer, {
    guestLobbyMessage: guestLobbyMessage,
    guestStatus: guestStatus,
    logoutUrl: logoutUrl,
    positionInWaitingQueue: positionInWaitingQueue
  }) : null);
};
const PresenceManagerContainer = _ref2 => {
  var _guestStatusDetails$g, _guestStatusDetails$p;
  let {
    children
  } = _ref2;
  const {
    loading,
    error,
    data
  } = useDeduplicatedSubscription(getUserCurrent);
  const {
    loading: userInfoLoading,
    error: userInfoError,
    data: userInfoData
  } = useQuery(getUserInfo);
  const loadingContextInfo = useContext(LoadingContext);
  if (loading || userInfoLoading) return null;
  if (error || userInfoError) {
    loadingContextInfo.setLoading(false, '');
    logger.debug("Error on user authentication: ".concat(error));
  }
  if (!data || data.user_current.length === 0) return null;
  if (!userInfoData || userInfoData.meeting.length === 0 || userInfoData.user_current.length === 0) return null;
  const {
    authToken,
    joinErrorCode,
    joinErrorMessage,
    joined,
    ejectReasonCode,
    meeting,
    loggedOut,
    guestStatusDetails,
    guestStatus
  } = data.user_current[0];
  const {
    logoutUrl,
    meetingId,
    name: meetingName,
    bannerColor,
    bannerText,
    customLogoUrl
  } = userInfoData.meeting[0];
  const {
    extId,
    name: userName,
    userId
  } = userInfoData.user_current[0];
  return /*#__PURE__*/React.createElement(PresenceManager, {
    authToken: authToken,
    logoutUrl: logoutUrl,
    meetingId: meetingId,
    meetingName: meetingName,
    userName: userName,
    extId: extId,
    userId: userId,
    joined: joined,
    joinErrorCode: joinErrorCode,
    joinErrorMessage: joinErrorMessage,
    meetingEnded: meeting.ended,
    endedReasonCode: meeting.endedReasonCode,
    endedBy: meeting.endedByUserName,
    ejectReasonCode: ejectReasonCode,
    bannerColor: bannerColor,
    bannerText: bannerText,
    loggedOut: loggedOut,
    customLogoUrl: customLogoUrl,
    guestLobbyMessage: (_guestStatusDetails$g = guestStatusDetails === null || guestStatusDetails === void 0 ? void 0 : guestStatusDetails.guestLobbyMessage) !== null && _guestStatusDetails$g !== void 0 ? _guestStatusDetails$g : null,
    positionInWaitingQueue: (_guestStatusDetails$p = guestStatusDetails === null || guestStatusDetails === void 0 ? void 0 : guestStatusDetails.positionInWaitingQueue) !== null && _guestStatusDetails$p !== void 0 ? _guestStatusDetails$p : null,
    guestStatus: guestStatus
  }, children);
};
module.exportDefault(PresenceManagerContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/join-handler/presenceManager/queries.ts                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  getUserInfo: () => getUserInfo,
  getUserCurrent: () => getUserCurrent,
  userJoinMutation: () => userJoinMutation
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const getUserInfo = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\nquery getUserInfo {\n  meeting {\n    meetingId\n    name\n    logoutUrl\n    bannerColor\n    bannerText\n    customLogoUrl\n  }\n  user_current {\n    extId\n    name\n    userId\n  }\n}\n"])));
const getUserCurrent = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\nsubscription getUserCurrent {\n    user_current {\n      userId\n      authToken\n      joinErrorCode\n      joinErrorMessage\n      joined\n      ejectReasonCode\n      loggedOut\n      guestStatus\n      meeting {\n        ended\n        endedReasonCode\n        endedByUserName\n        logoutUrl\n      }\n      guestStatusDetails {\n        guestLobbyMessage\n        positionInWaitingQueue\n        isAllowed\n      }\n    }\n  }\n"])));
const userJoinMutation = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\nmutation UserJoin($authToken: String!, $clientType: String!, $clientIsMobile: Boolean!) {\n  userJoinMeeting(\n    authToken: $authToken,\n    clientType: $clientType,\n    clientIsMobile: $clientIsMobile,\n  )\n}\n"])));
module.exportDefault({
  getUserCurrent,
  userJoinMutation,
  getUserInfo
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/join-handler/presenceManager/service.ts                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  JoinErrorCodeTable: () => JoinErrorCodeTable,
  setUserDataToSessionStorage: () => setUserDataToSessionStorage
});
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 0);
const JoinErrorCodeTable = {
  NOT_EJECT: 'not_eject_reason',
  DUPLICATE_USER: 'duplicate_user_in_meeting_eject_reason',
  PERMISSION_FAILED: 'not_enough_permission_eject_reason',
  EJECT_USER: 'user_requested_eject_reason',
  SYSTEM_EJECT_USER: 'system_requested_eject_reason',
  VALIDATE_TOKEN: 'validate_token_failed_eject_reason',
  USER_INACTIVITY: 'user_inactivity_eject_reason',
  BANNED_USER_REJOINING: 'banned_user_rejoining_reason',
  USER_LOGGED_OUT: 'user_logged_out_reason',
  MAX_PARTICIPANTS: 'max_participants_reason'
};
const setUserDataToSessionStorage = userData => {
  sessionStorage.setItem('meetingId', userData.meetingId);
  sessionStorage.setItem('userId', userData.userId);
  sessionStorage.setItem('logoutUrl', userData.logoutUrl);
  sessionStorage.setItem('sessionToken', userData.sessionToken);
  sessionStorage.setItem('userName', userData.userName);
  sessionStorage.setItem('extId', userData.extId);
  sessionStorage.setItem('meetingName', userData.meetingName);
  Storage.setItem('CustomLogoUrl', userData.customLogoUrl);
};
module.exportDefault({
  JoinErrorCodeTable,
  setUserDataToSessionStorage
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"layout":{"layout-manager":{"camerasOnly.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/layout-manager/camerasOnly.jsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 1);
let layoutDispatch, layoutSelect, layoutSelectInput;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  }
}, 2);
let DEFAULT_VALUES;
module.link("/imports/ui/components/layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 3);
let INITIAL_INPUT_STATE;
module.link("/imports/ui/components/layout/initState", {
  INITIAL_INPUT_STATE(v) {
    INITIAL_INPUT_STATE = v;
  }
}, 4);
let ACTIONS, PANELS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 5);
let defaultsDeep;
module.link("/imports/utils/array-utils", {
  defaultsDeep(v) {
    defaultsDeep = v;
  }
}, 6);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 7);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 8);
const CamerasOnlyLayout = props => {
  const {
    bannerAreaHeight,
    isMobile,
    calculatesNavbarHeight
  } = props;
  function usePrevious(value) {
    const ref = useRef();
    useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  }
  const input = layoutSelect(i => i.input);
  const deviceType = layoutSelect(i => i.deviceType);
  const Settings = getSettingsSingletonInstance();
  const {
    isRTL
  } = Settings.application;
  const fullscreen = layoutSelect(i => i.fullscreen);
  const fontSize = layoutSelect(i => i.fontSize);
  const currentPanelType = layoutSelect(i => i.currentPanelType);
  const cameraDockInput = layoutSelectInput(i => i.cameraDock);
  const navbarInput = layoutSelectInput(i => i.navBar);
  const actionbarInput = layoutSelectInput(i => i.actionBar);
  const layoutContextDispatch = layoutDispatch();
  const prevDeviceType = usePrevious(deviceType);
  const calculatesCameraDockBounds = (mediaAreaBounds, sidebarSize) => {
    const {
      baseCameraDockBounds
    } = props;
    const baseBounds = baseCameraDockBounds(mediaAreaBounds, sidebarSize);

    // do not proceed if using values from LayoutEngine
    if (Object.keys(baseBounds).length > 0) {
      return baseBounds;
    }
    const navBarHeight = calculatesNavbarHeight();
    const cameraDockBounds = {};
    const mobileCameraHeight = mediaAreaBounds.height * 0.7 - bannerAreaHeight();
    const cameraHeight = mediaAreaBounds.height - bannerAreaHeight();
    if (isMobile) {
      cameraDockBounds.minHeight = mobileCameraHeight;
      cameraDockBounds.height = mobileCameraHeight;
      cameraDockBounds.maxHeight = mobileCameraHeight;
    } else {
      cameraDockBounds.minHeight = cameraHeight;
      cameraDockBounds.height = cameraHeight;
      cameraDockBounds.maxHeight = cameraHeight;
    }
    cameraDockBounds.top = navBarHeight + bannerAreaHeight();
    cameraDockBounds.left = !isRTL ? mediaAreaBounds.left : null;
    cameraDockBounds.right = isRTL ? sidebarSize : null;
    cameraDockBounds.minWidth = mediaAreaBounds.width;
    cameraDockBounds.width = mediaAreaBounds.width;
    cameraDockBounds.maxWidth = mediaAreaBounds.width;
    cameraDockBounds.zIndex = 1;
    return cameraDockBounds;
  };
  const calculatesMediaBounds = () => {
    const mediaBounds = {};
    mediaBounds.width = 0;
    mediaBounds.height = 0;
    mediaBounds.top = 0;
    mediaBounds.left = 0;
    return mediaBounds;
  };
  const calculatesSidebarContentHeight = () => ({
    minHeight: 0,
    height: 0,
    maxHeight: 0
  });
  const calculatesLayout = () => {
    const {
      calculatesNavbarBounds,
      calculatesActionbarBounds,
      calculatesSidebarNavWidth,
      calculatesSidebarNavHeight,
      calculatesSidebarNavBounds,
      calculatesSidebarContentWidth,
      calculatesSidebarContentBounds,
      calculatesMediaAreaBounds,
      isTablet
    } = props;
    const {
      captionsMargin
    } = DEFAULT_VALUES;
    const sidebarNavWidth = calculatesSidebarNavWidth();
    const sidebarNavHeight = calculatesSidebarNavHeight();
    const sidebarContentWidth = calculatesSidebarContentWidth();
    const sidebarNavBounds = calculatesSidebarNavBounds();
    const sidebarContentBounds = calculatesSidebarContentBounds(sidebarNavWidth.width);
    const mediaAreaBounds = calculatesMediaAreaBounds(sidebarNavWidth.width, sidebarContentWidth.width);
    const navbarBounds = calculatesNavbarBounds(mediaAreaBounds);
    const actionbarBounds = calculatesActionbarBounds(mediaAreaBounds);
    const sidebarSize = sidebarContentWidth.width + sidebarNavWidth.width;
    const cameraDockBounds = calculatesCameraDockBounds(mediaAreaBounds, sidebarSize);
    const sidebarContentHeight = calculatesSidebarContentHeight();
    const mediaBounds = calculatesMediaBounds();
    layoutContextDispatch({
      type: ACTIONS.SET_NAVBAR_OUTPUT,
      value: {
        display: navbarInput.hasNavBar,
        width: navbarBounds.width,
        height: navbarBounds.height,
        top: navbarBounds.top,
        left: navbarBounds.left,
        tabOrder: DEFAULT_VALUES.navBarTabOrder,
        zIndex: navbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_ACTIONBAR_OUTPUT,
      value: {
        display: actionbarInput.hasActionBar,
        width: actionbarBounds.width,
        height: actionbarBounds.height,
        innerHeight: actionbarBounds.innerHeight,
        top: actionbarBounds.top,
        left: actionbarBounds.left,
        padding: actionbarBounds.padding,
        tabOrder: DEFAULT_VALUES.actionBarTabOrder,
        zIndex: actionbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAPTIONS_OUTPUT,
      value: {
        left: !isRTL ? sidebarSize + captionsMargin : null,
        right: isRTL ? sidebarSize + captionsMargin : null,
        maxWidth: mediaAreaBounds.width - captionsMargin * 2
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_OUTPUT,
      value: {
        display: false,
        minWidth: 0,
        width: 0,
        maxWidth: sidebarNavWidth.maxWidth,
        height: sidebarNavHeight,
        top: sidebarNavBounds.top,
        left: sidebarNavBounds.left,
        right: sidebarNavBounds.right,
        tabOrder: DEFAULT_VALUES.sidebarNavTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarNavBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: false,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_OUTPUT,
      value: {
        display: false,
        minWidth: 0,
        width: 0,
        maxWidth: sidebarContentWidth.maxWidth,
        minHeight: sidebarContentHeight.minHeight,
        height: sidebarContentHeight.height,
        maxHeight: sidebarContentHeight.maxHeight,
        top: sidebarContentBounds.top,
        left: sidebarContentBounds.left,
        right: sidebarContentBounds.right,
        currentPanelType,
        tabOrder: DEFAULT_VALUES.sidebarContentTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarContentBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: true,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_MEDIA_AREA_SIZE,
      value: {
        width: mediaAreaBounds.width,
        height: mediaAreaBounds.height
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAMERA_DOCK_OUTPUT,
      value: {
        display: true,
        minWidth: cameraDockBounds.minWidth,
        width: cameraDockBounds.width,
        maxWidth: cameraDockBounds.maxWidth,
        minHeight: cameraDockBounds.minHeight,
        height: cameraDockBounds.height,
        maxHeight: cameraDockBounds.maxHeight,
        top: cameraDockBounds.top,
        left: cameraDockBounds.left,
        right: cameraDockBounds.right,
        tabOrder: 4,
        isDraggable: false,
        resizableEdge: {
          top: false,
          right: false,
          bottom: false,
          left: false
        },
        zIndex: cameraDockBounds.zIndex,
        focusedId: input.cameraDock.focusedId
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_OUTPUT,
      value: {
        display: false,
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null,
        tabOrder: DEFAULT_VALUES.presentationTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_RESIZABLE_EDGE,
      value: {
        top: true,
        right: false,
        bottom: false,
        left: false
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SCREEN_SHARE_OUTPUT,
      value: {
        display: false,
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_EXTERNAL_VIDEO_OUTPUT,
      value: {
        display: false,
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_GENERIC_CONTENT_OUTPUT,
      value: {
        display: false,
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SHARED_NOTES_OUTPUT,
      value: {
        display: false,
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.NONE
    });
  };
  const throttledCalculatesLayout = throttle(() => calculatesLayout(), 50, {
    trailing: true,
    leading: true
  });
  useEffect(() => {
    window.addEventListener('resize', () => {
      layoutContextDispatch({
        type: ACTIONS.SET_BROWSER_SIZE,
        value: {
          width: window.document.documentElement.clientWidth,
          height: window.document.documentElement.clientHeight
        }
      });
    });
  }, []);
  const init = () => {
    layoutContextDispatch({
      type: ACTIONS.SET_LAYOUT_INPUT,
      value: defaultsDeep({
        sidebarNavigation: {
          isOpen: false,
          width: 0,
          height: 0
        },
        sidebarContent: {
          isOpen: false,
          width: 0,
          height: 0
        },
        SidebarContentHorizontalResizer: {
          isOpen: false
        },
        presentation: {
          isOpen: false
        },
        cameraDock: {
          numCameras: cameraDockInput.numCameras
        },
        externalVideo: {
          hasExternalVideo: false
        },
        genericMainContent: {
          genericContentId: undefined
        },
        screenShare: {
          hasScreenShare: false
        }
      }, INITIAL_INPUT_STATE)
    });
    Session.setItem('layoutReady', true);
    throttledCalculatesLayout();
  };

  // eslint-disable-next-line consistent-return
  useEffect(() => {
    if (deviceType === null) return () => null;
    if (deviceType !== prevDeviceType) {
      // reset layout if deviceType changed
      // not all options is supported in all devices
      init();
    } else {
      throttledCalculatesLayout();
    }
  }, [input, deviceType, isRTL, fontSize, fullscreen]);
  return null;
};
module.exportDefault(CamerasOnlyLayout);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"customLayout.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/layout-manager/customLayout.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 1);
let layoutSelect, layoutSelectInput, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let DEFAULT_VALUES;
module.link("/imports/ui/components/layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 3);
let INITIAL_INPUT_STATE;
module.link("/imports/ui/components/layout/initState", {
  INITIAL_INPUT_STATE(v) {
    INITIAL_INPUT_STATE = v;
  }
}, 4);
let ACTIONS, CAMERADOCK_POSITION, PANELS;
module.link("../enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  CAMERADOCK_POSITION(v) {
    CAMERADOCK_POSITION = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 5);
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 6);
let defaultsDeep;
module.link("/imports/utils/array-utils", {
  defaultsDeep(v) {
    defaultsDeep = v;
  }
}, 7);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 8);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 9);
const windowWidth = () => window.document.documentElement.clientWidth;
const windowHeight = () => window.document.documentElement.clientHeight;
const min = (value1, value2) => value1 <= value2 ? value1 : value2;
const max = (value1, value2) => value1 >= value2 ? value1 : value2;
const CustomLayout = props => {
  const {
    bannerAreaHeight,
    calculatesActionbarHeight,
    calculatesNavbarHeight,
    isMobile
  } = props;
  function usePrevious(value) {
    const ref = useRef();
    useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  }
  const input = layoutSelect(i => i.input);
  const deviceType = layoutSelect(i => i.deviceType);
  const Settings = getSettingsSingletonInstance();
  const {
    isRTL
  } = Settings.application;
  const fullscreen = layoutSelect(i => i.fullscreen);
  const fontSize = layoutSelect(i => i.fontSize);
  const currentPanelType = layoutSelect(i => i.currentPanelType);
  const presentationInput = layoutSelectInput(i => i.presentation);
  const externalVideoInput = layoutSelectInput(i => i.externalVideo);
  const genericMainContentInput = layoutSelectInput(i => i.genericMainContent);
  const screenShareInput = layoutSelectInput(i => i.screenShare);
  const sharedNotesInput = layoutSelectInput(i => i.sharedNotes);
  const sidebarNavigationInput = layoutSelectInput(i => i.sidebarNavigation);
  const sidebarContentInput = layoutSelectInput(i => i.sidebarContent);
  const cameraDockInput = layoutSelectInput(i => i.cameraDock);
  const actionbarInput = layoutSelectInput(i => i.actionBar);
  const navbarInput = layoutSelectInput(i => i.navBar);
  const layoutContextDispatch = layoutDispatch();
  const {
    isResizing
  } = cameraDockInput;
  const prevDeviceType = usePrevious(deviceType);
  const prevIsResizing = usePrevious(isResizing);
  const {
    isPresentationEnabled
  } = props;
  const throttledCalculatesLayout = throttle(() => calculatesLayout(), 50, {
    trailing: true,
    leading: true
  });
  useEffect(() => {
    window.addEventListener('resize', () => {
      layoutContextDispatch({
        type: ACTIONS.SET_BROWSER_SIZE,
        value: {
          width: window.document.documentElement.clientWidth,
          height: window.document.documentElement.clientHeight
        }
      });
    });
  }, []);
  useEffect(() => {
    if (deviceType === null) return () => null;
    if (deviceType !== prevDeviceType) {
      // reset layout if deviceType changed
      // not all options is supported in all devices
      init();
    } else {
      throttledCalculatesLayout();
    }
  }, [input, deviceType, isRTL, fontSize, fullscreen, isPresentationEnabled]);
  const calculatesDropAreas = (sidebarNavWidth, sidebarContentWidth, cameraDockBounds) => {
    const {
      height: actionBarHeight
    } = calculatesActionbarHeight();
    const mediaAreaHeight = windowHeight() - (DEFAULT_VALUES.navBarHeight + actionBarHeight);
    const mediaAreaWidth = windowWidth() - (sidebarNavWidth + sidebarContentWidth);
    const DROP_ZONE_DEFAUL_SIZE = 100;
    const dropZones = {};
    const sidebarSize = sidebarNavWidth + sidebarContentWidth;
    dropZones[CAMERADOCK_POSITION.CONTENT_TOP] = {
      top: DEFAULT_VALUES.navBarHeight,
      left: !isRTL ? sidebarSize : null,
      right: isRTL ? sidebarSize : null,
      width: mediaAreaWidth,
      height: DROP_ZONE_DEFAUL_SIZE,
      zIndex: cameraDockBounds.zIndex
    };
    dropZones[CAMERADOCK_POSITION.CONTENT_RIGHT] = {
      top: DEFAULT_VALUES.navBarHeight + DROP_ZONE_DEFAUL_SIZE,
      left: !isRTL ? windowWidth() - DROP_ZONE_DEFAUL_SIZE : 0,
      height: mediaAreaHeight - 2 * DROP_ZONE_DEFAUL_SIZE,
      width: DROP_ZONE_DEFAUL_SIZE,
      zIndex: cameraDockBounds.zIndex
    };
    dropZones[CAMERADOCK_POSITION.CONTENT_BOTTOM] = {
      top: DEFAULT_VALUES.navBarHeight + mediaAreaHeight - DROP_ZONE_DEFAUL_SIZE,
      left: !isRTL ? sidebarSize : null,
      right: isRTL ? sidebarSize : null,
      width: mediaAreaWidth,
      height: DROP_ZONE_DEFAUL_SIZE,
      zIndex: cameraDockBounds.zIndex
    };
    dropZones[CAMERADOCK_POSITION.CONTENT_LEFT] = {
      top: DEFAULT_VALUES.navBarHeight + DROP_ZONE_DEFAUL_SIZE,
      left: !isRTL ? sidebarSize : null,
      right: isRTL ? sidebarSize : null,
      height: mediaAreaHeight - 2 * DROP_ZONE_DEFAUL_SIZE,
      width: DROP_ZONE_DEFAUL_SIZE,
      zIndex: cameraDockBounds.zIndex
    };
    dropZones[CAMERADOCK_POSITION.SIDEBAR_CONTENT_BOTTOM] = {
      top: windowHeight() - DROP_ZONE_DEFAUL_SIZE,
      left: !isRTL ? sidebarNavWidth : null,
      right: isRTL ? sidebarNavWidth : null,
      width: sidebarContentWidth,
      height: DROP_ZONE_DEFAUL_SIZE,
      zIndex: cameraDockBounds.zIndex
    };
    return dropZones;
  };
  const init = () => {
    const {
      sidebarContentPanel
    } = sidebarContentInput;
    if (isMobile) {
      layoutContextDispatch({
        type: ACTIONS.SET_LAYOUT_INPUT,
        value: defaultsDeep({
          sidebarNavigation: {
            isOpen: input.sidebarNavigation.isOpen || sidebarContentPanel !== PANELS.NONE || false,
            sidebarNavPanel: sidebarNavigationInput.sidebarNavPanel
          },
          sidebarContent: {
            isOpen: sidebarContentPanel !== PANELS.NONE,
            sidebarContentPanel: sidebarContentInput.sidebarContentPanel
          },
          sidebarContentHorizontalResizer: {
            isOpen: false
          },
          presentation: {
            isOpen: presentationInput.isOpen,
            slidesLength: presentationInput.slidesLength,
            currentSlide: _objectSpread({}, presentationInput.currentSlide)
          },
          cameraDock: {
            numCameras: cameraDockInput.numCameras
          },
          externalVideo: {
            hasExternalVideo: input.externalVideo.hasExternalVideo
          },
          genericMainContent: {
            genericContentId: input.genericMainContent.genericContentId
          },
          screenShare: {
            hasScreenShare: input.screenShare.hasScreenShare,
            width: input.screenShare.width,
            height: input.screenShare.height
          },
          sharedNotes: {
            isPinned: sharedNotesInput.isPinned
          }
        }, INITIAL_INPUT_STATE)
      });
    } else {
      layoutContextDispatch({
        type: ACTIONS.SET_LAYOUT_INPUT,
        value: defaultsDeep({
          sidebarNavigation: {
            isOpen: input.sidebarNavigation.isOpen || sidebarContentPanel !== PANELS.NONE || false
          },
          sidebarContent: {
            isOpen: sidebarContentPanel !== PANELS.NONE,
            sidebarContentPanel
          },
          sidebarContentHorizontalResizer: {
            isOpen: false
          },
          presentation: {
            isOpen: presentationInput.isOpen,
            slidesLength: presentationInput.slidesLength,
            currentSlide: _objectSpread({}, presentationInput.currentSlide)
          },
          cameraDock: {
            numCameras: cameraDockInput.numCameras
          },
          externalVideo: {
            hasExternalVideo: input.externalVideo.hasExternalVideo
          },
          genericMainContent: {
            genericContentId: input.genericMainContent.genericContentId
          },
          screenShare: {
            hasScreenShare: input.screenShare.hasScreenShare,
            width: input.screenShare.width,
            height: input.screenShare.height
          },
          sharedNotes: {
            isPinned: sharedNotesInput.isPinned
          }
        }, INITIAL_INPUT_STATE)
      });
    }
    Session.setItem('layoutReady', true);
    throttledCalculatesLayout();
  };
  const calculatesSidebarContentHeight = cameraDockHeight => {
    const {
      isOpen,
      slidesLength
    } = presentationInput;
    const {
      hasExternalVideo
    } = externalVideoInput;
    const {
      genericContentId
    } = genericMainContentInput;
    const {
      hasScreenShare
    } = screenShareInput;
    const {
      isPinned: isSharedNotesPinned
    } = sharedNotesInput;
    const hasPresentation = isPresentationEnabled && slidesLength !== 0;
    const isGeneralMediaOff = !hasPresentation && !hasExternalVideo && !hasScreenShare && !isSharedNotesPinned && !genericContentId;
    let sidebarContentHeight = 0;
    if (sidebarContentInput.isOpen) {
      if (isMobile) {
        sidebarContentHeight = windowHeight() - DEFAULT_VALUES.navBarHeight;
      } else if (cameraDockInput.numCameras > 0 && cameraDockInput.position === CAMERADOCK_POSITION.SIDEBAR_CONTENT_BOTTOM && isOpen && !isGeneralMediaOff) {
        sidebarContentHeight = windowHeight() - cameraDockHeight;
      } else {
        sidebarContentHeight = windowHeight();
      }
      sidebarContentHeight -= bannerAreaHeight();
    }
    return sidebarContentHeight;
  };
  const calculatesCameraDockBounds = (sidebarNavWidth, sidebarContentWidth, mediaAreaBounds) => {
    const {
      baseCameraDockBounds
    } = props;
    const sidebarSize = sidebarNavWidth + sidebarContentWidth;
    const baseBounds = baseCameraDockBounds(mediaAreaBounds, sidebarSize);

    // do not proceed if using values from LayoutEngine
    if (Object.keys(baseBounds).length > 0) {
      return baseBounds;
    }
    const {
      camerasMargin,
      cameraDockMinHeight,
      cameraDockMinWidth,
      navBarHeight,
      presentationToolbarMinWidth
    } = DEFAULT_VALUES;
    const cameraDockBounds = {};
    let cameraDockHeight = 0;
    let cameraDockWidth = 0;
    const lastSize = Storage.getItem('webcamSize') || {
      width: 0,
      height: 0
    };
    let {
      width: lastWidth,
      height: lastHeight
    } = lastSize;
    if (cameraDockInput.isDragging) cameraDockBounds.zIndex = 99;else cameraDockBounds.zIndex = 1;
    const isCameraTop = cameraDockInput.position === CAMERADOCK_POSITION.CONTENT_TOP;
    const isCameraBottom = cameraDockInput.position === CAMERADOCK_POSITION.CONTENT_BOTTOM;
    const isCameraLeft = cameraDockInput.position === CAMERADOCK_POSITION.CONTENT_LEFT;
    const isCameraRight = cameraDockInput.position === CAMERADOCK_POSITION.CONTENT_RIGHT;
    const isCameraSidebar = cameraDockInput.position === CAMERADOCK_POSITION.SIDEBAR_CONTENT_BOTTOM;
    const stoppedResizing = prevIsResizing && !isResizing;
    if (stoppedResizing) {
      const isCameraTopOrBottom = cameraDockInput.position === CAMERADOCK_POSITION.CONTENT_TOP || cameraDockInput.position === CAMERADOCK_POSITION.CONTENT_BOTTOM;
      Storage.setItem('webcamSize', {
        width: isCameraTopOrBottom || isCameraSidebar ? lastWidth : cameraDockInput.width,
        height: isCameraTopOrBottom || isCameraSidebar ? cameraDockInput.height : lastHeight
      });
      const updatedLastSize = Storage.getItem('webcamSize');
      lastWidth = updatedLastSize.width;
      lastHeight = updatedLastSize.height;
    }
    if (isCameraTop || isCameraBottom) {
      if (lastHeight === 0 && !isResizing || isCameraTop && isMobile) {
        cameraDockHeight = min(max(mediaAreaBounds.height * 0.2, cameraDockMinHeight), mediaAreaBounds.height - cameraDockMinHeight);
      } else {
        const height = isResizing ? cameraDockInput.height : lastHeight;
        cameraDockHeight = min(max(height, cameraDockMinHeight), mediaAreaBounds.height - cameraDockMinHeight);
      }
      cameraDockBounds.top = navBarHeight;
      cameraDockBounds.left = mediaAreaBounds.left;
      cameraDockBounds.right = isRTL ? sidebarSize : null;
      cameraDockBounds.minWidth = mediaAreaBounds.width;
      cameraDockBounds.width = mediaAreaBounds.width;
      cameraDockBounds.maxWidth = mediaAreaBounds.width;
      cameraDockBounds.minHeight = cameraDockMinHeight;
      cameraDockBounds.height = cameraDockHeight;
      cameraDockBounds.maxHeight = mediaAreaBounds.height * 0.8;
      if (isCameraBottom) {
        cameraDockBounds.top += mediaAreaBounds.height - cameraDockHeight;
      }
      return cameraDockBounds;
    }
    if (isCameraLeft || isCameraRight) {
      if (lastWidth === 0 && !isResizing) {
        cameraDockWidth = min(max(mediaAreaBounds.width * 0.2, cameraDockMinWidth), mediaAreaBounds.width - cameraDockMinWidth);
      } else {
        const width = isResizing ? cameraDockInput.width : lastWidth;
        cameraDockWidth = min(max(width, cameraDockMinWidth), mediaAreaBounds.width - cameraDockMinWidth);
      }
      cameraDockBounds.top = navBarHeight + bannerAreaHeight();
      cameraDockBounds.minWidth = cameraDockMinWidth;
      cameraDockBounds.width = cameraDockWidth;
      cameraDockBounds.maxWidth = mediaAreaBounds.width * 0.8;
      cameraDockBounds.presenterMaxWidth = mediaAreaBounds.width - presentationToolbarMinWidth - camerasMargin;
      cameraDockBounds.minHeight = cameraDockMinHeight;
      cameraDockBounds.height = mediaAreaBounds.height;
      cameraDockBounds.maxHeight = mediaAreaBounds.height;
      // button size in vertical position
      cameraDockBounds.height -= 20;
      if (isCameraRight) {
        const sizeValue = mediaAreaBounds.left + mediaAreaBounds.width - cameraDockWidth;
        cameraDockBounds.left = !isRTL ? sizeValue - camerasMargin : 0;
        cameraDockBounds.right = isRTL ? sizeValue + sidebarSize - camerasMargin : null;
      } else if (isCameraLeft) {
        cameraDockBounds.left = mediaAreaBounds.left + camerasMargin;
        cameraDockBounds.right = isRTL ? sidebarSize + camerasMargin * 2 : null;
      }
      return cameraDockBounds;
    }
    if (isCameraSidebar) {
      if (lastHeight === 0 && !isResizing) {
        cameraDockHeight = min(max(windowHeight() * 0.2, cameraDockMinHeight), windowHeight() - cameraDockMinHeight);
      } else {
        const height = isResizing ? cameraDockInput.height : lastHeight;
        cameraDockHeight = min(max(height, cameraDockMinHeight), windowHeight() - cameraDockMinHeight);
      }
      cameraDockBounds.top = windowHeight() - cameraDockHeight - bannerAreaHeight();
      cameraDockBounds.left = !isRTL ? sidebarNavWidth : 0;
      cameraDockBounds.right = isRTL ? sidebarNavWidth : 0;
      cameraDockBounds.minWidth = sidebarContentWidth;
      cameraDockBounds.width = sidebarContentWidth;
      cameraDockBounds.maxWidth = sidebarContentWidth;
      cameraDockBounds.minHeight = cameraDockMinHeight;
      cameraDockBounds.height = cameraDockHeight;
      cameraDockBounds.maxHeight = windowHeight() * 0.8;
    }
    return cameraDockBounds;
  };
  const calculatesMediaBounds = (sidebarNavWidth, sidebarContentWidth, cameraDockBounds) => {
    const {
      isOpen,
      slidesLength
    } = presentationInput;
    const {
      hasExternalVideo
    } = externalVideoInput;
    const {
      genericContentId
    } = genericMainContentInput;
    const {
      hasScreenShare
    } = screenShareInput;
    const {
      isPinned: isSharedNotesPinned
    } = sharedNotesInput;
    const {
      height: actionBarHeight
    } = calculatesActionbarHeight();
    const navBarHeight = calculatesNavbarHeight();
    const mediaAreaHeight = windowHeight() - (DEFAULT_VALUES.navBarHeight + actionBarHeight + bannerAreaHeight());
    const mediaAreaWidth = windowWidth() - (sidebarNavWidth + sidebarContentWidth);
    const mediaBounds = {};
    const {
      element: fullscreenElement
    } = fullscreen;
    const {
      camerasMargin
    } = DEFAULT_VALUES;
    const hasPresentation = isPresentationEnabled && slidesLength !== 0;
    const isGeneralMediaOff = !hasPresentation && !hasExternalVideo && !hasScreenShare && !isSharedNotesPinned && !genericContentId;
    if (!isOpen || isGeneralMediaOff) {
      mediaBounds.width = 0;
      mediaBounds.height = 0;
      mediaBounds.top = 0;
      mediaBounds.left = !isRTL ? 0 : null;
      mediaBounds.right = isRTL ? 0 : null;
      mediaBounds.zIndex = 0;
      return mediaBounds;
    }
    if (fullscreenElement === 'Presentation' || fullscreenElement === 'Screenshare' || fullscreenElement === 'ExternalVideo' || fullscreenElement === 'GenericContent') {
      mediaBounds.width = windowWidth();
      mediaBounds.height = windowHeight();
      mediaBounds.top = 0;
      mediaBounds.left = !isRTL ? 0 : null;
      mediaBounds.right = isRTL ? 0 : null;
      mediaBounds.zIndex = 99;
      return mediaBounds;
    }
    const sidebarSize = sidebarNavWidth + sidebarContentWidth;
    if (cameraDockInput.numCameras > 0 && !cameraDockInput.isDragging) {
      switch (cameraDockInput.position) {
        case CAMERADOCK_POSITION.CONTENT_TOP:
          {
            mediaBounds.width = mediaAreaWidth;
            mediaBounds.height = mediaAreaHeight - cameraDockBounds.height - camerasMargin;
            mediaBounds.top = navBarHeight + cameraDockBounds.height + camerasMargin + bannerAreaHeight();
            mediaBounds.left = !isRTL ? sidebarSize : null;
            mediaBounds.right = isRTL ? sidebarSize : null;
            break;
          }
        case CAMERADOCK_POSITION.CONTENT_RIGHT:
          {
            mediaBounds.width = mediaAreaWidth - cameraDockBounds.width - camerasMargin * 2;
            mediaBounds.height = mediaAreaHeight;
            mediaBounds.top = navBarHeight + bannerAreaHeight();
            mediaBounds.left = !isRTL ? sidebarSize : null;
            mediaBounds.right = isRTL ? sidebarSize - camerasMargin * 2 : null;
            break;
          }
        case CAMERADOCK_POSITION.CONTENT_BOTTOM:
          {
            mediaBounds.width = mediaAreaWidth;
            mediaBounds.height = mediaAreaHeight - cameraDockBounds.height - camerasMargin;
            mediaBounds.top = navBarHeight - camerasMargin + bannerAreaHeight();
            mediaBounds.left = !isRTL ? sidebarSize : null;
            mediaBounds.right = isRTL ? sidebarSize : null;
            break;
          }
        case CAMERADOCK_POSITION.CONTENT_LEFT:
          {
            mediaBounds.width = mediaAreaWidth - cameraDockBounds.width - camerasMargin * 2;
            mediaBounds.height = mediaAreaHeight;
            mediaBounds.top = navBarHeight + bannerAreaHeight();
            const sizeValue = sidebarNavWidth + sidebarContentWidth + mediaAreaWidth - mediaBounds.width;
            mediaBounds.left = !isRTL ? sizeValue : null;
            mediaBounds.right = isRTL ? sidebarSize : null;
            break;
          }
        case CAMERADOCK_POSITION.SIDEBAR_CONTENT_BOTTOM:
          {
            mediaBounds.width = mediaAreaWidth;
            mediaBounds.height = mediaAreaHeight;
            mediaBounds.top = navBarHeight + bannerAreaHeight();
            mediaBounds.left = !isRTL ? sidebarSize : null;
            mediaBounds.right = isRTL ? sidebarSize : null;
            break;
          }
        default:
          {
            console.log('presentation - camera default');
          }
      }
      mediaBounds.zIndex = 1;
    } else {
      mediaBounds.width = mediaAreaWidth;
      mediaBounds.height = mediaAreaHeight;
      mediaBounds.top = navBarHeight + bannerAreaHeight();
      mediaBounds.left = !isRTL ? sidebarSize : null;
      mediaBounds.right = isRTL ? sidebarSize : null;
    }
    return mediaBounds;
  };
  const calculatesLayout = () => {
    const {
      calculatesNavbarBounds,
      calculatesActionbarBounds,
      calculatesSidebarNavWidth,
      calculatesSidebarNavHeight,
      calculatesSidebarNavBounds,
      calculatesSidebarContentWidth,
      calculatesSidebarContentBounds,
      calculatesMediaAreaBounds,
      isTablet
    } = props;
    const {
      position: cameraPosition
    } = cameraDockInput;
    const {
      camerasMargin,
      captionsMargin
    } = DEFAULT_VALUES;
    const sidebarNavWidth = calculatesSidebarNavWidth();
    const sidebarNavHeight = calculatesSidebarNavHeight();
    const sidebarContentWidth = calculatesSidebarContentWidth();
    const sidebarNavBounds = calculatesSidebarNavBounds();
    const sidebarContentBounds = calculatesSidebarContentBounds(sidebarNavWidth.width);
    const mediaAreaBounds = calculatesMediaAreaBounds(sidebarNavWidth.width, sidebarContentWidth.width);
    const navbarBounds = calculatesNavbarBounds(mediaAreaBounds);
    const actionbarBounds = calculatesActionbarBounds(mediaAreaBounds);
    const cameraDockBounds = calculatesCameraDockBounds(sidebarNavWidth.width, sidebarContentWidth.width, mediaAreaBounds);
    const dropZoneAreas = calculatesDropAreas(sidebarNavWidth.width, sidebarContentWidth.width, cameraDockBounds);
    const sidebarContentHeight = calculatesSidebarContentHeight(cameraDockBounds.height);
    const mediaBounds = calculatesMediaBounds(sidebarNavWidth.width, sidebarContentWidth.width, cameraDockBounds);
    const sidebarSize = sidebarContentWidth.width + sidebarNavWidth.width;
    const {
      height: actionBarHeight
    } = calculatesActionbarHeight();
    let horizontalCameraDiff = 0;
    if (cameraPosition === CAMERADOCK_POSITION.CONTENT_LEFT) {
      horizontalCameraDiff = cameraDockBounds.width + camerasMargin * 2;
    }
    if (cameraPosition === CAMERADOCK_POSITION.CONTENT_RIGHT) {
      horizontalCameraDiff = camerasMargin * 2;
    }
    layoutContextDispatch({
      type: ACTIONS.SET_NAVBAR_OUTPUT,
      value: {
        display: navbarInput.hasNavBar,
        width: navbarBounds.width,
        height: navbarBounds.height,
        top: navbarBounds.top,
        left: navbarBounds.left,
        tabOrder: DEFAULT_VALUES.navBarTabOrder,
        zIndex: navbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_ACTIONBAR_OUTPUT,
      value: {
        display: actionbarInput.hasActionBar,
        width: actionbarBounds.width,
        height: actionbarBounds.height,
        innerHeight: actionbarBounds.innerHeight,
        top: actionbarBounds.top,
        left: actionbarBounds.left,
        padding: actionbarBounds.padding,
        tabOrder: DEFAULT_VALUES.actionBarTabOrder,
        zIndex: actionbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAPTIONS_OUTPUT,
      value: {
        left: !isRTL ? sidebarSize + captionsMargin : null,
        right: isRTL ? sidebarSize + captionsMargin : null,
        maxWidth: mediaAreaBounds.width - captionsMargin * 2
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_OUTPUT,
      value: {
        display: sidebarNavigationInput.isOpen,
        minWidth: sidebarNavWidth.minWidth,
        width: sidebarNavWidth.width,
        maxWidth: sidebarNavWidth.maxWidth,
        height: sidebarNavHeight,
        top: sidebarNavBounds.top,
        left: sidebarNavBounds.left,
        right: sidebarNavBounds.right,
        tabOrder: DEFAULT_VALUES.sidebarNavTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarNavBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: false,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_OUTPUT,
      value: {
        display: sidebarContentInput.isOpen,
        minWidth: sidebarContentWidth.minWidth,
        width: sidebarContentWidth.width,
        maxWidth: sidebarContentWidth.maxWidth,
        height: sidebarContentHeight,
        top: sidebarContentBounds.top,
        left: sidebarContentBounds.left,
        right: sidebarContentBounds.right,
        currentPanelType,
        tabOrder: DEFAULT_VALUES.sidebarContentTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarContentBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: false,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_MEDIA_AREA_SIZE,
      value: {
        width: windowWidth() - sidebarNavWidth.width - sidebarContentWidth.width,
        height: windowHeight() - DEFAULT_VALUES.navBarHeight - actionBarHeight
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAMERA_DOCK_OUTPUT,
      value: {
        display: cameraDockInput.numCameras > 0,
        position: cameraDockInput.position,
        minWidth: cameraDockBounds.minWidth,
        width: cameraDockBounds.width,
        maxWidth: cameraDockBounds.maxWidth,
        presenterMaxWidth: cameraDockBounds.presenterMaxWidth,
        minHeight: cameraDockBounds.minHeight,
        height: cameraDockBounds.height,
        maxHeight: cameraDockBounds.maxHeight,
        top: cameraDockBounds.top,
        left: cameraDockBounds.left,
        right: cameraDockBounds.right,
        tabOrder: 4,
        isDraggable: !isMobile && !isTablet && presentationInput.isOpen,
        resizableEdge: {
          top: input.cameraDock.position === CAMERADOCK_POSITION.CONTENT_BOTTOM || input.cameraDock.position === CAMERADOCK_POSITION.SIDEBAR_CONTENT_BOTTOM && input.sidebarContent.isOpen,
          right: !isRTL && input.cameraDock.position === CAMERADOCK_POSITION.CONTENT_LEFT || isRTL && input.cameraDock.position === CAMERADOCK_POSITION.CONTENT_RIGHT,
          bottom: input.cameraDock.position === CAMERADOCK_POSITION.CONTENT_TOP,
          left: !isRTL && input.cameraDock.position === CAMERADOCK_POSITION.CONTENT_RIGHT || isRTL && input.cameraDock.position === CAMERADOCK_POSITION.CONTENT_LEFT
        },
        zIndex: cameraDockBounds.zIndex,
        focusedId: input.cameraDock.focusedId
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_DROP_AREAS,
      value: dropZoneAreas
    });
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_OUTPUT,
      value: {
        display: presentationInput.isOpen,
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right + horizontalCameraDiff : null,
        tabOrder: DEFAULT_VALUES.presentationTabOrder,
        isResizable: false,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SCREEN_SHARE_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right + horizontalCameraDiff : null,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_EXTERNAL_VIDEO_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right + horizontalCameraDiff : null
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_GENERIC_CONTENT_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right + horizontalCameraDiff : null
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SHARED_NOTES_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right + horizontalCameraDiff : null
      }
    });
  };
  return null;
};
module.exportDefault(CustomLayout);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"layoutEngine.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/layout-manager/layoutEngine.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let layoutSelect, layoutSelectInput;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  }
}, 2);
let DEFAULT_VALUES;
module.link("/imports/ui/components/layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 3);
let LAYOUT_TYPE, DEVICE_TYPE;
module.link("/imports/ui/components/layout/enums", {
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  },
  DEVICE_TYPE(v) {
    DEVICE_TYPE = v;
  }
}, 4);
let CustomLayout;
module.link("/imports/ui/components/layout/layout-manager/customLayout", {
  default(v) {
    CustomLayout = v;
  }
}, 5);
let SmartLayout;
module.link("/imports/ui/components/layout/layout-manager/smartLayout", {
  default(v) {
    SmartLayout = v;
  }
}, 6);
let PresentationFocusLayout;
module.link("/imports/ui/components/layout/layout-manager/presentationFocusLayout", {
  default(v) {
    PresentationFocusLayout = v;
  }
}, 7);
let VideoFocusLayout;
module.link("/imports/ui/components/layout/layout-manager/videoFocusLayout", {
  default(v) {
    VideoFocusLayout = v;
  }
}, 8);
let CamerasOnlyLayout;
module.link("/imports/ui/components/layout/layout-manager/camerasOnly", {
  default(v) {
    CamerasOnlyLayout = v;
  }
}, 9);
let PresentationOnlyLayout;
module.link("/imports/ui/components/layout/layout-manager/presentationOnlyLayout", {
  default(v) {
    PresentationOnlyLayout = v;
  }
}, 10);
let ParticipantsAndChatOnlyLayout;
module.link("/imports/ui/components/layout/layout-manager/participantsAndChatOnlyLayout", {
  default(v) {
    ParticipantsAndChatOnlyLayout = v;
  }
}, 11);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 12);
const propTypes = {
  layoutType: PropTypes.string.isRequired,
  isPresentationEnabled: PropTypes.bool.isRequired
};
const LayoutEngine = _ref => {
  let {
    layoutType,
    isPresentationEnabled
  } = _ref;
  const bannerBarInput = layoutSelectInput(i => i.bannerBar);
  const notificationsBarInput = layoutSelectInput(i => i.notificationsBar);
  const cameraDockInput = layoutSelectInput(i => i.cameraDock);
  const presentationInput = layoutSelectInput(i => i.presentation);
  const actionbarInput = layoutSelectInput(i => i.actionBar);
  const navBarInput = layoutSelectInput(i => i.navBar);
  const sidebarNavigationInput = layoutSelectInput(i => i.sidebarNavigation);
  const sidebarContentInput = layoutSelectInput(i => i.sidebarContent);
  const externalVideoInput = layoutSelectInput(i => i.externalVideo);
  const genericMainContentInput = layoutSelectInput(i => i.genericMainContent);
  const screenShareInput = layoutSelectInput(i => i.screenShare);
  const sharedNotesInput = layoutSelectInput(i => i.sharedNotes);
  const fullscreen = layoutSelect(i => i.fullscreen);
  const Settings = getSettingsSingletonInstance();
  const {
    isRTL
  } = Settings.application;
  const fontSize = layoutSelect(i => i.fontSize);
  const deviceType = layoutSelect(i => i.deviceType);
  const isMobile = deviceType === DEVICE_TYPE.MOBILE;
  const isTablet = deviceType === DEVICE_TYPE.TABLET;
  const windowWidth = () => window.document.documentElement.clientWidth;
  const windowHeight = () => window.document.documentElement.clientHeight;
  const min = (value1, value2) => value1 <= value2 ? value1 : value2;
  const max = (value1, value2) => value1 >= value2 ? value1 : value2;
  const bannerAreaHeight = () => {
    const {
      hasNotification
    } = notificationsBarInput;
    const {
      hasBanner
    } = bannerBarInput;
    const bannerHeight = hasBanner ? DEFAULT_VALUES.bannerHeight : 0;
    const notificationHeight = hasNotification ? DEFAULT_VALUES.bannerHeight : 0;
    return bannerHeight + notificationHeight;
  };
  const baseCameraDockBounds = (mediaAreaBounds, sidebarSize) => {
    const {
      isOpen,
      slidesLength
    } = presentationInput;
    const {
      hasExternalVideo
    } = externalVideoInput;
    const {
      genericContentId
    } = genericMainContentInput;
    const {
      hasScreenShare
    } = screenShareInput;
    const {
      isPinned: isSharedNotesPinned
    } = sharedNotesInput;
    const cameraDockBounds = {};
    if (cameraDockInput.numCameras === 0 && layoutType !== LAYOUT_TYPE.VIDEO_FOCUS) {
      cameraDockBounds.width = 0;
      cameraDockBounds.height = 0;
      return cameraDockBounds;
    }
    const navBarHeight = calculatesNavbarHeight();
    const hasPresentation = isPresentationEnabled && slidesLength !== 0;
    const isGeneralMediaOff = !hasPresentation && !hasExternalVideo && !hasScreenShare && !isSharedNotesPinned && !genericContentId;
    if (!isOpen || isGeneralMediaOff) {
      cameraDockBounds.width = mediaAreaBounds.width;
      cameraDockBounds.maxWidth = mediaAreaBounds.width;
      cameraDockBounds.height = mediaAreaBounds.height - bannerAreaHeight();
      cameraDockBounds.maxHeight = mediaAreaBounds.height;
      cameraDockBounds.top = navBarHeight + bannerAreaHeight();
      cameraDockBounds.left = !isRTL ? mediaAreaBounds.left : 0;
      cameraDockBounds.right = isRTL ? sidebarSize : null;
    }
    if (fullscreen.group === 'webcams') {
      cameraDockBounds.width = windowWidth();
      cameraDockBounds.minWidth = windowWidth();
      cameraDockBounds.maxWidth = windowWidth();
      cameraDockBounds.height = windowHeight();
      cameraDockBounds.minHeight = windowHeight();
      cameraDockBounds.maxHeight = windowHeight();
      cameraDockBounds.top = 0;
      cameraDockBounds.left = 0;
      cameraDockBounds.right = 0;
      cameraDockBounds.zIndex = 99;
      return cameraDockBounds;
    }
    return cameraDockBounds;
  };
  const calculatesNavbarHeight = () => {
    const {
      navBarHeight
    } = DEFAULT_VALUES;
    return navBarInput.hasNavBar ? navBarHeight : 0;
  };
  const calculatesNavbarBounds = mediaAreaBounds => {
    const {
      navBarTop
    } = DEFAULT_VALUES;
    const navBarHeight = calculatesNavbarHeight();
    if (!navBarInput.hasNavBar) {
      return {
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        zIndex: 0
      };
    }
    return {
      width: mediaAreaBounds.width,
      height: navBarHeight,
      top: navBarTop + bannerAreaHeight(),
      left: !isRTL ? mediaAreaBounds.left : 0,
      zIndex: 1
    };
  };
  const calculatesActionbarHeight = () => {
    if (!actionbarInput.hasActionBar) {
      return {
        height: 0,
        innerHeight: 0,
        padding: 0
      };
    }
    const {
      actionBarHeight,
      actionBarPadding
    } = DEFAULT_VALUES;
    const BASE_FONT_SIZE = 14; // 90% font size
    const height = actionBarHeight / BASE_FONT_SIZE * fontSize;
    return {
      height: height + actionBarPadding * 2,
      innerHeight: height,
      padding: actionBarPadding
    };
  };
  const calculatesActionbarBounds = mediaAreaBounds => {
    const actionBarHeight = calculatesActionbarHeight();
    return {
      display: actionbarInput.hasActionBar,
      width: mediaAreaBounds.width,
      height: actionBarHeight.height,
      innerHeight: actionBarHeight.innerHeight,
      padding: actionBarHeight.padding,
      top: windowHeight() - actionBarHeight.height,
      left: !isRTL ? mediaAreaBounds.left : 0,
      zIndex: 1
    };
  };
  const calculatesSidebarNavWidth = () => {
    const {
      sidebarNavMinWidth,
      sidebarNavMaxWidth
    } = DEFAULT_VALUES;
    const {
      isOpen,
      width: sidebarNavWidth
    } = sidebarNavigationInput;
    let minWidth = 0;
    let width = 0;
    let maxWidth = 0;
    if (isOpen) {
      if (isMobile) {
        minWidth = windowWidth();
        width = windowWidth();
        maxWidth = windowWidth();
      } else {
        if (sidebarNavWidth === 0) {
          width = min(max(windowWidth() * 0.2, sidebarNavMinWidth), sidebarNavMaxWidth);
        } else {
          width = min(max(sidebarNavWidth, sidebarNavMinWidth), sidebarNavMaxWidth);
        }
        minWidth = sidebarNavMinWidth;
        maxWidth = sidebarNavMaxWidth;
      }
    }
    return {
      minWidth,
      width,
      maxWidth
    };
  };
  const calculatesSidebarNavHeight = () => {
    const {
      navBarHeight
    } = DEFAULT_VALUES;
    const {
      isOpen
    } = sidebarNavigationInput;
    let sidebarNavHeight = 0;
    if (isOpen) {
      if (isMobile) {
        sidebarNavHeight = windowHeight() - navBarHeight - bannerAreaHeight();
      } else {
        sidebarNavHeight = windowHeight() - bannerAreaHeight();
      }
    }
    return sidebarNavHeight;
  };
  const calculatesSidebarNavBounds = () => {
    const {
      sidebarNavTop,
      navBarHeight,
      sidebarNavLeft
    } = DEFAULT_VALUES;
    let top = sidebarNavTop + bannerAreaHeight();
    if (isMobile) {
      top = navBarHeight + bannerAreaHeight();
    }
    return {
      top,
      left: !isRTL ? sidebarNavLeft : null,
      right: isRTL ? sidebarNavLeft : null,
      zIndex: isMobile ? 11 : 2
    };
  };
  const calculatesSidebarContentWidth = () => {
    const {
      sidebarContentMinWidth,
      sidebarContentMaxWidth
    } = DEFAULT_VALUES;
    const {
      isOpen,
      width: sidebarContentWidth
    } = sidebarContentInput;
    let minWidth = 0;
    let width = 0;
    let maxWidth = 0;
    if (isOpen) {
      if (isMobile) {
        minWidth = windowWidth();
        width = windowWidth();
        maxWidth = windowWidth();
      } else {
        if (sidebarContentWidth === 0) {
          width = min(max(windowWidth() * 0.2, sidebarContentMinWidth), sidebarContentMaxWidth);
        } else {
          width = min(max(sidebarContentWidth, sidebarContentMinWidth), sidebarContentMaxWidth);
        }
        minWidth = sidebarContentMinWidth;
        maxWidth = sidebarContentMaxWidth;
      }
    }
    return {
      minWidth,
      width,
      maxWidth
    };
  };
  const calculatesSidebarContentBounds = sidebarNavWidth => {
    const {
      navBarHeight,
      sidebarNavTop
    } = DEFAULT_VALUES;
    let top = sidebarNavTop + bannerAreaHeight();
    if (isMobile) top = navBarHeight + bannerAreaHeight();
    let left = isMobile ? 0 : sidebarNavWidth;
    let right = isMobile ? 0 : sidebarNavWidth;
    left = !isRTL ? left : null;
    right = isRTL ? right : null;
    const zIndex = isMobile ? 11 : 1;
    return {
      top,
      left,
      right,
      zIndex
    };
  };
  const calculatesMediaAreaBounds = (sidebarNavWidth, sidebarContentWidth) => {
    const {
      height: actionBarHeight
    } = calculatesActionbarHeight();
    const navBarHeight = calculatesNavbarHeight();
    let left = 0;
    let width = 0;
    if (isMobile) {
      width = windowWidth();
    } else {
      left = !isRTL ? sidebarNavWidth + sidebarContentWidth : 0;
      width = windowWidth() - sidebarNavWidth - sidebarContentWidth;
    }
    return {
      width,
      height: windowHeight() - (navBarHeight + actionBarHeight + bannerAreaHeight()),
      top: navBarHeight + bannerAreaHeight(),
      left
    };
  };
  const common = {
    bannerAreaHeight,
    baseCameraDockBounds,
    calculatesNavbarHeight,
    calculatesNavbarBounds,
    calculatesActionbarHeight,
    calculatesActionbarBounds,
    calculatesSidebarNavWidth,
    calculatesSidebarNavHeight,
    calculatesSidebarNavBounds,
    calculatesSidebarContentWidth,
    calculatesSidebarContentBounds,
    calculatesMediaAreaBounds,
    isMobile,
    isTablet
  };
  const layout = document.getElementById('layout');
  switch (layoutType) {
    case LAYOUT_TYPE.CUSTOM_LAYOUT:
      layout === null || layout === void 0 ? void 0 : layout.setAttribute('data-layout', LAYOUT_TYPE.CUSTOM_LAYOUT);
      return /*#__PURE__*/React.createElement(CustomLayout, _extends({}, common, {
        isPresentationEnabled: isPresentationEnabled
      }));
    case LAYOUT_TYPE.SMART_LAYOUT:
      layout === null || layout === void 0 ? void 0 : layout.setAttribute('data-layout', LAYOUT_TYPE.SMART_LAYOUT);
      return /*#__PURE__*/React.createElement(SmartLayout, _extends({}, common, {
        isPresentationEnabled: isPresentationEnabled
      }));
    case LAYOUT_TYPE.PRESENTATION_FOCUS:
      layout === null || layout === void 0 ? void 0 : layout.setAttribute('data-layout', LAYOUT_TYPE.PRESENTATION_FOCUS);
      return /*#__PURE__*/React.createElement(PresentationFocusLayout, _extends({}, common, {
        isPresentationEnabled: isPresentationEnabled
      }));
    case LAYOUT_TYPE.VIDEO_FOCUS:
      layout === null || layout === void 0 ? void 0 : layout.setAttribute('data-layout', LAYOUT_TYPE.VIDEO_FOCUS);
      return /*#__PURE__*/React.createElement(VideoFocusLayout, _extends({}, common, {
        isPresentationEnabled: isPresentationEnabled
      }));
    case LAYOUT_TYPE.CAMERAS_ONLY:
      layout === null || layout === void 0 ? void 0 : layout.setAttribute('data-layout', LAYOUT_TYPE.CAMERAS_ONLY);
      return /*#__PURE__*/React.createElement(CamerasOnlyLayout, common);
    case LAYOUT_TYPE.PRESENTATION_ONLY:
      layout === null || layout === void 0 ? void 0 : layout.setAttribute('data-layout', LAYOUT_TYPE.PRESENTATION_ONLY);
      return /*#__PURE__*/React.createElement(PresentationOnlyLayout, common);
    case LAYOUT_TYPE.PARTICIPANTS_AND_CHAT_ONLY:
      layout === null || layout === void 0 ? void 0 : layout.setAttribute('data-layout', LAYOUT_TYPE.PARTICIPANTS_AND_CHAT_ONLY);
      return /*#__PURE__*/React.createElement(ParticipantsAndChatOnlyLayout, common);
    default:
      layout === null || layout === void 0 ? void 0 : layout.setAttribute('data-layout', LAYOUT_TYPE.CUSTOM_LAYOUT);
      return /*#__PURE__*/React.createElement(CustomLayout, _extends({}, common, {
        isPresentationEnabled: isPresentationEnabled
      }));
  }
};
LayoutEngine.propTypes = propTypes;
module.exportDefault(LayoutEngine);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"participantsAndChatOnlyLayout.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/layout-manager/participantsAndChatOnlyLayout.jsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 1);
let layoutDispatch, layoutSelect, layoutSelectInput;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  }
}, 2);
let DEFAULT_VALUES;
module.link("/imports/ui/components/layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 3);
let INITIAL_INPUT_STATE;
module.link("/imports/ui/components/layout/initState", {
  INITIAL_INPUT_STATE(v) {
    INITIAL_INPUT_STATE = v;
  }
}, 4);
let ACTIONS, PANELS, CAMERADOCK_POSITION;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  },
  CAMERADOCK_POSITION(v) {
    CAMERADOCK_POSITION = v;
  }
}, 5);
let defaultsDeep;
module.link("/imports/utils/array-utils", {
  defaultsDeep(v) {
    defaultsDeep = v;
  }
}, 6);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 7);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 8);
const windowWidth = () => window.document.documentElement.clientWidth;
const windowHeight = () => window.document.documentElement.clientHeight;
const ParticipantsAndChatOnlyLayout = props => {
  const {
    bannerAreaHeight,
    isMobile
  } = props;
  function usePrevious(value) {
    const ref = useRef();
    useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  }
  const input = layoutSelect(i => i.input);
  const deviceType = layoutSelect(i => i.deviceType);
  const Settings = getSettingsSingletonInstance();
  const {
    isRTL
  } = Settings.application;
  const fullscreen = layoutSelect(i => i.fullscreen);
  const fontSize = layoutSelect(i => i.fontSize);
  const currentPanelType = layoutSelect(i => i.currentPanelType);
  const presentationInput = layoutSelectInput(i => i.presentation);
  const sidebarNavigationInput = layoutSelectInput(i => i.sidebarNavigation);
  const sidebarContentInput = layoutSelectInput(i => i.sidebarContent);
  const cameraDockInput = layoutSelectInput(i => i.cameraDock);
  const actionbarInput = layoutSelectInput(i => i.actionBar);
  const navbarInput = layoutSelectInput(i => i.navBar);
  const layoutContextDispatch = layoutDispatch();
  const prevDeviceType = usePrevious(deviceType);
  const calculatesSidebarNavHeight = (navbarHeight, actionbarHeight) => {
    let sidebarNavHeight = 0;
    if (isMobile) {
      sidebarNavHeight = windowHeight() - navbarHeight - bannerAreaHeight() - actionbarHeight;
    } else {
      sidebarNavHeight = windowHeight() - bannerAreaHeight() - navbarHeight - actionbarHeight;
    }
    return sidebarNavHeight;
  };
  const calculatesSidebarContentHeight = (navbarHeight, actionbarHeight) => {
    let height = 0;
    let minHeight = 0;
    let maxHeight = 0;
    height = windowHeight() - bannerAreaHeight() - navbarHeight - actionbarHeight;
    minHeight = height;
    maxHeight = height;
    return {
      height,
      minHeight,
      maxHeight
    };
  };
  const calculatesSidebarContentWidth = sidebarNavWidth => {
    let minWidth = 0;
    let width = 0;
    let maxWidth = 0;
    if (isMobile) {
      minWidth = windowWidth();
      width = windowWidth();
      maxWidth = windowWidth();
    } else {
      minWidth = windowWidth() - sidebarNavWidth;
      width = windowWidth() - sidebarNavWidth;
      maxWidth = windowWidth() - sidebarNavWidth;
    }
    return {
      minWidth,
      width,
      maxWidth
    };
  };
  const calculatesCameraDockBounds = () => {
    const cameraDockBounds = {};
    cameraDockBounds.top = 0;
    cameraDockBounds.left = 0;
    cameraDockBounds.right = 0;
    cameraDockBounds.minWidth = 0;
    cameraDockBounds.width = 0;
    cameraDockBounds.maxWidth = 0;
    cameraDockBounds.minHeight = 0;
    cameraDockBounds.height = 0;
    cameraDockBounds.maxHeight = 0;
    return cameraDockBounds;
  };
  const calculatesMediaBounds = (mediaAreaBounds, sidebarSize) => {
    const mediaBounds = {};
    const {
      element: fullscreenElement
    } = fullscreen;
    if (fullscreenElement === 'Presentation' || fullscreenElement === 'Screenshare' || fullscreenElement === 'ExternalVideo' || fullscreenElement === 'GenericContent') {
      mediaBounds.width = windowWidth();
      mediaBounds.height = windowHeight();
      mediaBounds.top = 0;
      mediaBounds.left = !isRTL ? 0 : null;
      mediaBounds.right = isRTL ? 0 : null;
      mediaBounds.zIndex = 99;
      return mediaBounds;
    }
    if (isMobile && cameraDockInput.numCameras > 0) {
      mediaBounds.height = mediaAreaBounds.height * 0.7;
    } else {
      mediaBounds.height = mediaAreaBounds.height;
    }
    mediaBounds.width = mediaAreaBounds.width;
    mediaBounds.top = DEFAULT_VALUES.navBarHeight + bannerAreaHeight();
    mediaBounds.left = !isRTL ? mediaAreaBounds.left : null;
    mediaBounds.right = isRTL ? sidebarSize : null;
    mediaBounds.zIndex = 1;
    return mediaBounds;
  };
  const calculatesLayout = () => {
    const {
      calculatesNavbarBounds,
      calculatesActionbarBounds,
      calculatesSidebarNavWidth,
      calculatesSidebarNavBounds,
      calculatesSidebarContentBounds,
      isTablet
    } = props;
    const {
      captionsMargin
    } = DEFAULT_VALUES;
    const sidebarNavWidth = calculatesSidebarNavWidth();
    const sidebarContentWidth = calculatesSidebarContentWidth(sidebarNavWidth.width);
    const sidebarNavBounds = calculatesSidebarNavBounds();
    const sidebarContentBounds = calculatesSidebarContentBounds(sidebarNavWidth.width);
    const mediaAreaBounds = {
      width: sidebarNavWidth.width + sidebarContentWidth.width,
      left: 0
    };
    const navbarBounds = calculatesNavbarBounds(mediaAreaBounds);
    const actionbarBounds = calculatesActionbarBounds(mediaAreaBounds);
    const sidebarNavHeight = calculatesSidebarNavHeight(navbarBounds.height, actionbarBounds.height);
    const sidebarSize = sidebarContentWidth.width + sidebarNavWidth.width;
    const mediaBounds = calculatesMediaBounds(mediaAreaBounds, sidebarSize);
    const sidebarContentHeight = calculatesSidebarContentHeight(navbarBounds.height, actionbarBounds.height);
    const cameraDockBounds = calculatesCameraDockBounds();
    const {
      isOpen
    } = presentationInput;
    layoutContextDispatch({
      type: ACTIONS.SET_NAVBAR_OUTPUT,
      value: {
        display: navbarInput.hasNavBar,
        width: navbarBounds.width,
        height: navbarBounds.height,
        top: navbarBounds.top,
        left: navbarBounds.left,
        tabOrder: DEFAULT_VALUES.navBarTabOrder,
        zIndex: navbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_ACTIONBAR_OUTPUT,
      value: {
        display: actionbarInput.hasActionBar,
        width: actionbarBounds.width,
        height: actionbarBounds.height,
        innerHeight: actionbarBounds.innerHeight,
        top: actionbarBounds.top,
        left: actionbarBounds.left,
        padding: actionbarBounds.padding,
        tabOrder: DEFAULT_VALUES.actionBarTabOrder,
        zIndex: actionbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAPTIONS_OUTPUT,
      value: {
        left: !isRTL ? sidebarSize + captionsMargin : null,
        right: isRTL ? sidebarSize + captionsMargin : null,
        maxWidth: mediaAreaBounds.width - captionsMargin * 2
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_OUTPUT,
      value: {
        display: sidebarNavigationInput.isOpen,
        minWidth: sidebarNavWidth.minWidth,
        width: sidebarNavWidth.width,
        maxWidth: sidebarNavWidth.maxWidth,
        height: sidebarNavHeight,
        top: navbarBounds.height,
        left: sidebarNavBounds.left,
        right: sidebarNavBounds.right,
        tabOrder: DEFAULT_VALUES.sidebarNavTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarNavBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: false,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_OUTPUT,
      value: {
        display: sidebarContentInput.isOpen,
        minWidth: sidebarContentWidth.minWidth,
        width: sidebarContentWidth.width,
        maxWidth: sidebarContentWidth.maxWidth,
        minHeight: sidebarContentHeight.minHeight,
        height: sidebarContentHeight.height,
        maxHeight: sidebarContentHeight.maxHeight,
        top: navbarBounds.height,
        left: sidebarContentBounds.left,
        right: sidebarContentBounds.right,
        currentPanelType,
        tabOrder: DEFAULT_VALUES.sidebarContentTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarContentBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: cameraDockInput.numCameras > 0,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_MEDIA_AREA_SIZE,
      value: {
        width: mediaAreaBounds.width,
        height: mediaAreaBounds.height
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAMERA_DOCK_OUTPUT,
      value: {
        display: false,
        position: CAMERADOCK_POSITION.SIDEBAR_CONTENT_BOTTOM,
        minWidth: cameraDockBounds.minWidth,
        width: cameraDockBounds.width,
        maxWidth: cameraDockBounds.maxWidth,
        minHeight: cameraDockBounds.minHeight,
        height: cameraDockBounds.height,
        maxHeight: cameraDockBounds.maxHeight,
        top: cameraDockBounds.top,
        left: cameraDockBounds.left,
        right: cameraDockBounds.right,
        tabOrder: 4,
        isDraggable: false,
        resizableEdge: {
          top: false,
          right: false,
          bottom: false,
          left: false
        },
        focusedId: input.cameraDock.focusedId,
        zIndex: cameraDockBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_OUTPUT,
      value: {
        display: false,
        width: 0,
        height: 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null,
        tabOrder: DEFAULT_VALUES.presentationTabOrder,
        isResizable: false,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SCREEN_SHARE_OUTPUT,
      value: {
        display: false,
        width: 0,
        height: 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_EXTERNAL_VIDEO_OUTPUT,
      value: {
        display: false,
        width: 0,
        height: 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_GENERIC_CONTENT_OUTPUT,
      value: {
        display: false,
        width: 0,
        height: 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SHARED_NOTES_OUTPUT,
      value: {
        display: false,
        width: isOpen ? mediaBounds.width : 0,
        height: isOpen ? mediaBounds.height : 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right
      }
    });
  };
  const throttledCalculatesLayout = throttle(() => calculatesLayout(), 50, {
    trailing: true,
    leading: true
  });
  useEffect(() => {
    window.addEventListener('resize', () => {
      layoutContextDispatch({
        type: ACTIONS.SET_BROWSER_SIZE,
        value: {
          width: window.document.documentElement.clientWidth,
          height: window.document.documentElement.clientHeight
        }
      });
    });
  }, []);
  const init = () => {
    const {
      sidebarContentPanel
    } = sidebarContentInput;
    layoutContextDispatch({
      type: ACTIONS.SET_LAYOUT_INPUT,
      value: defaultsDeep({
        sidebarNavigation: {
          isOpen: input.sidebarNavigation.isOpen || sidebarContentPanel !== PANELS.NONE || false
        },
        sidebarContent: {
          isOpen: sidebarContentPanel !== PANELS.NONE,
          sidebarContentPanel
        },
        SidebarContentHorizontalResizer: {
          isOpen: false
        },
        presentation: {
          isOpen: false,
          slidesLength: presentationInput.slidesLength,
          currentSlide: _objectSpread({}, presentationInput.currentSlide),
          width: 0,
          height: 0
        },
        cameraDock: {
          numCameras: 0
        },
        externalVideo: {
          hasExternalVideo: false,
          width: 0,
          height: 0
        },
        genericMainContent: {
          genericContentId: undefined,
          width: 0,
          height: 0
        },
        screenShare: {
          hasScreenShare: false,
          width: 0,
          height: 0
        }
      }, INITIAL_INPUT_STATE)
    });
    Session.setItem('layoutReady', true);
    throttledCalculatesLayout();
  };

  // eslint-disable-next-line consistent-return
  useEffect(() => {
    if (deviceType === null) return () => null;
    if (deviceType !== prevDeviceType) {
      // reset layout if deviceType changed
      // not all options is supported in all devices
      init();
    } else {
      throttledCalculatesLayout();
    }
  }, [input, deviceType, isRTL, fontSize, fullscreen]);
  return null;
};
module.exportDefault(ParticipantsAndChatOnlyLayout);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"presentationFocusLayout.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/layout-manager/presentationFocusLayout.jsx                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 1);
let layoutDispatch, layoutSelect, layoutSelectInput;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  }
}, 2);
let DEFAULT_VALUES;
module.link("/imports/ui/components/layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 3);
let INITIAL_INPUT_STATE;
module.link("/imports/ui/components/layout/initState", {
  INITIAL_INPUT_STATE(v) {
    INITIAL_INPUT_STATE = v;
  }
}, 4);
let ACTIONS, PANELS, CAMERADOCK_POSITION;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  },
  CAMERADOCK_POSITION(v) {
    CAMERADOCK_POSITION = v;
  }
}, 5);
let defaultsDeep;
module.link("/imports/utils/array-utils", {
  defaultsDeep(v) {
    defaultsDeep = v;
  }
}, 6);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 7);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 8);
const windowWidth = () => window.document.documentElement.clientWidth;
const windowHeight = () => window.document.documentElement.clientHeight;
const min = (value1, value2) => value1 <= value2 ? value1 : value2;
const max = (value1, value2) => value1 >= value2 ? value1 : value2;
const PresentationFocusLayout = props => {
  const {
    bannerAreaHeight,
    isMobile
  } = props;
  function usePrevious(value) {
    const ref = useRef();
    useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  }
  const input = layoutSelect(i => i.input);
  const deviceType = layoutSelect(i => i.deviceType);
  const Settings = getSettingsSingletonInstance();
  const {
    isRTL
  } = Settings.application;
  const fullscreen = layoutSelect(i => i.fullscreen);
  const fontSize = layoutSelect(i => i.fontSize);
  const currentPanelType = layoutSelect(i => i.currentPanelType);
  const presentationInput = layoutSelectInput(i => i.presentation);
  const externalVideoInput = layoutSelectInput(i => i.externalVideo);
  const genericMainContentInput = layoutSelectInput(i => i.genericMainContent);
  const screenShareInput = layoutSelectInput(i => i.screenShare);
  const sharedNotesInput = layoutSelectInput(i => i.sharedNotes);
  const sidebarNavigationInput = layoutSelectInput(i => i.sidebarNavigation);
  const sidebarContentInput = layoutSelectInput(i => i.sidebarContent);
  const cameraDockInput = layoutSelectInput(i => i.cameraDock);
  const actionbarInput = layoutSelectInput(i => i.actionBar);
  const navbarInput = layoutSelectInput(i => i.navBar);
  const layoutContextDispatch = layoutDispatch();
  const prevDeviceType = usePrevious(deviceType);
  const {
    isPresentationEnabled
  } = props;
  const throttledCalculatesLayout = throttle(() => calculatesLayout(), 50, {
    trailing: true,
    leading: true
  });
  useEffect(() => {
    window.addEventListener('resize', () => {
      layoutContextDispatch({
        type: ACTIONS.SET_BROWSER_SIZE,
        value: {
          width: window.document.documentElement.clientWidth,
          height: window.document.documentElement.clientHeight
        }
      });
    });
  }, []);
  useEffect(() => {
    if (deviceType === null) return () => null;
    if (deviceType !== prevDeviceType) {
      // reset layout if deviceType changed
      // not all options is supported in all devices
      init();
    } else {
      throttledCalculatesLayout();
    }
  }, [input, deviceType, isRTL, fontSize, fullscreen, isPresentationEnabled]);
  const init = () => {
    const {
      sidebarContentPanel
    } = sidebarContentInput;
    layoutContextDispatch({
      type: ACTIONS.SET_LAYOUT_INPUT,
      value: defaultsDeep({
        sidebarNavigation: {
          isOpen: input.sidebarNavigation.isOpen || sidebarContentPanel !== PANELS.NONE || false
        },
        sidebarContent: {
          isOpen: sidebarContentPanel !== PANELS.NONE,
          sidebarContentPanel
        },
        SidebarContentHorizontalResizer: {
          isOpen: false
        },
        presentation: {
          isOpen: presentationInput.isOpen,
          slidesLength: presentationInput.slidesLength,
          currentSlide: _objectSpread({}, presentationInput.currentSlide)
        },
        cameraDock: {
          numCameras: cameraDockInput.numCameras
        },
        externalVideo: {
          hasExternalVideo: input.externalVideo.hasExternalVideo
        },
        genericMainContent: {
          genericContentId: input.genericMainContent.genericContentId
        },
        screenShare: {
          hasScreenShare: input.screenShare.hasScreenShare,
          width: input.screenShare.width,
          height: input.screenShare.height
        }
      }, INITIAL_INPUT_STATE)
    });
    Session.setItem('layoutReady', true);
    throttledCalculatesLayout();
  };
  const calculatesSidebarContentHeight = () => {
    const {
      isOpen,
      slidesLength
    } = presentationInput;
    const {
      hasExternalVideo
    } = externalVideoInput;
    const {
      genericContentId
    } = genericMainContentInput;
    const {
      hasScreenShare
    } = screenShareInput;
    const {
      isPinned: isSharedNotesPinned
    } = sharedNotesInput;
    const hasPresentation = isPresentationEnabled && slidesLength !== 0;
    const isGeneralMediaOff = !hasPresentation && !hasExternalVideo && !hasScreenShare && !isSharedNotesPinned && !genericContentId;
    const {
      navBarHeight,
      sidebarContentMinHeight
    } = DEFAULT_VALUES;
    let height = 0;
    let minHeight = 0;
    let maxHeight = 0;
    if (sidebarContentInput.isOpen) {
      if (isMobile) {
        height = windowHeight() - navBarHeight - bannerAreaHeight();
        minHeight = height;
        maxHeight = height;
      } else if (cameraDockInput.numCameras > 0 && isOpen && !isGeneralMediaOff) {
        if (sidebarContentInput.height === 0) {
          height = windowHeight() * 0.75 - bannerAreaHeight();
        } else {
          height = min(max(sidebarContentInput.height, sidebarContentMinHeight), windowHeight());
        }
        minHeight = windowHeight() * 0.25 - bannerAreaHeight();
        maxHeight = windowHeight() * 0.75 - bannerAreaHeight();
      } else {
        height = windowHeight() - bannerAreaHeight();
        minHeight = height;
        maxHeight = height;
      }
    }
    return {
      height,
      minHeight,
      maxHeight
    };
  };
  const calculatesCameraDockBounds = (mediaBounds, mediaAreaBounds, sidebarNavWidth, sidebarContentWidth, sidebarContentHeight) => {
    const {
      baseCameraDockBounds
    } = props;
    const sidebarSize = sidebarNavWidth + sidebarContentWidth;
    const baseBounds = baseCameraDockBounds(mediaAreaBounds, sidebarSize);

    // do not proceed if using values from LayoutEngine
    if (Object.keys(baseBounds).length > 0) {
      return baseBounds;
    }
    const {
      cameraDockMinHeight
    } = DEFAULT_VALUES;
    const cameraDockBounds = {};
    let cameraDockHeight = 0;
    if (isMobile) {
      cameraDockBounds.top = mediaAreaBounds.top + mediaBounds.height;
      cameraDockBounds.left = 0;
      cameraDockBounds.right = 0;
      cameraDockBounds.minWidth = mediaAreaBounds.width;
      cameraDockBounds.width = mediaAreaBounds.width;
      cameraDockBounds.maxWidth = mediaAreaBounds.width;
      cameraDockBounds.minHeight = cameraDockMinHeight;
      cameraDockBounds.height = mediaAreaBounds.height - mediaBounds.height;
      cameraDockBounds.maxHeight = mediaAreaBounds.height - mediaBounds.height;
    } else {
      if (cameraDockInput.height === 0) {
        cameraDockHeight = min(max(windowHeight() - sidebarContentHeight, cameraDockMinHeight), windowHeight() - cameraDockMinHeight);
        const bannerAreaDiff = windowHeight() - sidebarContentHeight - cameraDockHeight - bannerAreaHeight();
        cameraDockHeight += bannerAreaDiff;
      } else {
        cameraDockHeight = min(max(cameraDockInput.height, cameraDockMinHeight), windowHeight() - cameraDockMinHeight);
      }
      cameraDockBounds.top = windowHeight() - cameraDockHeight - bannerAreaHeight();
      cameraDockBounds.left = !isRTL ? sidebarNavWidth : 0;
      cameraDockBounds.right = isRTL ? sidebarNavWidth : 0;
      cameraDockBounds.minWidth = sidebarContentWidth;
      cameraDockBounds.width = sidebarContentWidth;
      cameraDockBounds.maxWidth = sidebarContentWidth;
      cameraDockBounds.minHeight = cameraDockMinHeight;
      cameraDockBounds.height = cameraDockHeight;
      cameraDockBounds.maxHeight = windowHeight() - sidebarContentHeight;
      cameraDockBounds.zIndex = 1;
    }
    return cameraDockBounds;
  };
  const calculatesMediaBounds = (mediaAreaBounds, sidebarSize) => {
    const mediaBounds = {};
    const {
      element: fullscreenElement
    } = fullscreen;
    if (fullscreenElement === 'Presentation' || fullscreenElement === 'Screenshare' || fullscreenElement === 'ExternalVideo' || fullscreenElement === 'GenericContent') {
      mediaBounds.width = windowWidth();
      mediaBounds.height = windowHeight();
      mediaBounds.top = 0;
      mediaBounds.left = !isRTL ? 0 : null;
      mediaBounds.right = isRTL ? 0 : null;
      mediaBounds.zIndex = 99;
      return mediaBounds;
    }
    if (isMobile && cameraDockInput.numCameras > 0) {
      mediaBounds.height = mediaAreaBounds.height * 0.7;
    } else {
      mediaBounds.height = mediaAreaBounds.height;
    }
    mediaBounds.width = mediaAreaBounds.width;
    mediaBounds.top = DEFAULT_VALUES.navBarHeight + bannerAreaHeight();
    mediaBounds.left = !isRTL ? mediaAreaBounds.left : null;
    mediaBounds.right = isRTL ? sidebarSize : null;
    mediaBounds.zIndex = 1;
    return mediaBounds;
  };
  const calculatesLayout = () => {
    const {
      calculatesNavbarBounds,
      calculatesActionbarBounds,
      calculatesSidebarNavWidth,
      calculatesSidebarNavHeight,
      calculatesSidebarNavBounds,
      calculatesSidebarContentWidth,
      calculatesSidebarContentBounds,
      calculatesMediaAreaBounds,
      isTablet
    } = props;
    const {
      captionsMargin
    } = DEFAULT_VALUES;
    const sidebarNavWidth = calculatesSidebarNavWidth();
    const sidebarNavHeight = calculatesSidebarNavHeight();
    const sidebarContentWidth = calculatesSidebarContentWidth();
    const sidebarNavBounds = calculatesSidebarNavBounds();
    const sidebarContentBounds = calculatesSidebarContentBounds(sidebarNavWidth.width);
    const mediaAreaBounds = calculatesMediaAreaBounds(sidebarNavWidth.width, sidebarContentWidth.width);
    const navbarBounds = calculatesNavbarBounds(mediaAreaBounds);
    const actionbarBounds = calculatesActionbarBounds(mediaAreaBounds);
    const sidebarSize = sidebarContentWidth.width + sidebarNavWidth.width;
    const mediaBounds = calculatesMediaBounds(mediaAreaBounds, sidebarSize);
    const sidebarContentHeight = calculatesSidebarContentHeight();
    const cameraDockBounds = calculatesCameraDockBounds(mediaBounds, mediaAreaBounds, sidebarNavWidth.width, sidebarContentWidth.width, sidebarContentHeight.height);
    const {
      isOpen
    } = presentationInput;
    layoutContextDispatch({
      type: ACTIONS.SET_NAVBAR_OUTPUT,
      value: {
        display: navbarInput.hasNavBar,
        width: navbarBounds.width,
        height: navbarBounds.height,
        top: navbarBounds.top,
        left: navbarBounds.left,
        tabOrder: DEFAULT_VALUES.navBarTabOrder,
        zIndex: navbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_ACTIONBAR_OUTPUT,
      value: {
        display: actionbarInput.hasActionBar,
        width: actionbarBounds.width,
        height: actionbarBounds.height,
        innerHeight: actionbarBounds.innerHeight,
        top: actionbarBounds.top,
        left: actionbarBounds.left,
        padding: actionbarBounds.padding,
        tabOrder: DEFAULT_VALUES.actionBarTabOrder,
        zIndex: actionbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAPTIONS_OUTPUT,
      value: {
        left: !isRTL ? sidebarSize + captionsMargin : null,
        right: isRTL ? sidebarSize + captionsMargin : null,
        maxWidth: mediaAreaBounds.width - captionsMargin * 2
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_OUTPUT,
      value: {
        display: sidebarNavigationInput.isOpen,
        minWidth: sidebarNavWidth.minWidth,
        width: sidebarNavWidth.width,
        maxWidth: sidebarNavWidth.maxWidth,
        height: sidebarNavHeight,
        top: sidebarNavBounds.top,
        left: sidebarNavBounds.left,
        right: sidebarNavBounds.right,
        tabOrder: DEFAULT_VALUES.sidebarNavTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarNavBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: false,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_OUTPUT,
      value: {
        display: sidebarContentInput.isOpen,
        minWidth: sidebarContentWidth.minWidth,
        width: sidebarContentWidth.width,
        maxWidth: sidebarContentWidth.maxWidth,
        minHeight: sidebarContentHeight.minHeight,
        height: sidebarContentHeight.height,
        maxHeight: sidebarContentHeight.maxHeight,
        top: sidebarContentBounds.top,
        left: sidebarContentBounds.left,
        right: sidebarContentBounds.right,
        currentPanelType,
        tabOrder: DEFAULT_VALUES.sidebarContentTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarContentBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: cameraDockInput.numCameras > 0,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_MEDIA_AREA_SIZE,
      value: {
        width: mediaAreaBounds.width,
        height: mediaAreaBounds.height
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAMERA_DOCK_OUTPUT,
      value: {
        display: cameraDockInput.numCameras > 0,
        position: CAMERADOCK_POSITION.SIDEBAR_CONTENT_BOTTOM,
        minWidth: cameraDockBounds.minWidth,
        width: cameraDockBounds.width,
        maxWidth: cameraDockBounds.maxWidth,
        minHeight: cameraDockBounds.minHeight,
        height: cameraDockBounds.height,
        maxHeight: cameraDockBounds.maxHeight,
        top: cameraDockBounds.top,
        left: cameraDockBounds.left,
        right: cameraDockBounds.right,
        tabOrder: 4,
        isDraggable: false,
        resizableEdge: {
          top: false,
          right: false,
          bottom: false,
          left: false
        },
        focusedId: input.cameraDock.focusedId,
        zIndex: cameraDockBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_OUTPUT,
      value: {
        display: presentationInput.isOpen,
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null,
        tabOrder: DEFAULT_VALUES.presentationTabOrder,
        isResizable: false,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SCREEN_SHARE_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: isOpen ? mediaBounds.height : 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_EXTERNAL_VIDEO_OUTPUT,
      value: {
        width: isOpen ? mediaBounds.width : 0,
        height: isOpen ? mediaBounds.height : 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_GENERIC_CONTENT_OUTPUT,
      value: {
        width: isOpen ? mediaBounds.width : 0,
        height: isOpen ? mediaBounds.height : 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SHARED_NOTES_OUTPUT,
      value: {
        width: isOpen ? mediaBounds.width : 0,
        height: isOpen ? mediaBounds.height : 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right
      }
    });
  };
  return null;
};
module.exportDefault(PresentationFocusLayout);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"presentationOnlyLayout.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/layout-manager/presentationOnlyLayout.jsx                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 1);
let layoutDispatch, layoutSelect, layoutSelectInput;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  }
}, 2);
let DEFAULT_VALUES;
module.link("/imports/ui/components/layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 3);
let INITIAL_INPUT_STATE;
module.link("/imports/ui/components/layout/initState", {
  INITIAL_INPUT_STATE(v) {
    INITIAL_INPUT_STATE = v;
  }
}, 4);
let ACTIONS, PANELS, CAMERADOCK_POSITION;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  },
  CAMERADOCK_POSITION(v) {
    CAMERADOCK_POSITION = v;
  }
}, 5);
let defaultsDeep;
module.link("/imports/utils/array-utils", {
  defaultsDeep(v) {
    defaultsDeep = v;
  }
}, 6);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 7);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 8);
const windowWidth = () => window.document.documentElement.clientWidth;
const windowHeight = () => window.document.documentElement.clientHeight;
const PresentationOnlyLayout = props => {
  const {
    bannerAreaHeight,
    calculatesNavbarHeight,
    isMobile
  } = props;
  function usePrevious(value) {
    const ref = useRef();
    useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  }
  const input = layoutSelect(i => i.input);
  const deviceType = layoutSelect(i => i.deviceType);
  const Settings = getSettingsSingletonInstance();
  const {
    isRTL
  } = Settings.application;
  const fullscreen = layoutSelect(i => i.fullscreen);
  const fontSize = layoutSelect(i => i.fontSize);
  const currentPanelType = layoutSelect(i => i.currentPanelType);
  const presentationInput = layoutSelectInput(i => i.presentation);
  const actionbarInput = layoutSelectInput(i => i.actionBar);
  const navbarInput = layoutSelectInput(i => i.navBar);
  const layoutContextDispatch = layoutDispatch();
  const prevDeviceType = usePrevious(deviceType);
  const calculatesMediaBounds = (mediaAreaBounds, sidebarSize) => {
    const mediaBounds = {};
    const {
      element: fullscreenElement
    } = fullscreen;
    const navBarHeight = calculatesNavbarHeight();
    if (fullscreenElement === 'Presentation' || fullscreenElement === 'Screenshare' || fullscreenElement === 'ExternalVideo' || fullscreenElement === 'GenericContent') {
      mediaBounds.width = windowWidth();
      mediaBounds.height = windowHeight();
      mediaBounds.top = 0;
      mediaBounds.left = !isRTL ? 0 : null;
      mediaBounds.right = isRTL ? 0 : null;
      mediaBounds.zIndex = 99;
      return mediaBounds;
    }
    mediaBounds.height = mediaAreaBounds.height;
    mediaBounds.width = mediaAreaBounds.width;
    mediaBounds.top = navBarHeight + bannerAreaHeight();
    mediaBounds.left = !isRTL ? mediaAreaBounds.left : null;
    mediaBounds.right = isRTL ? sidebarSize : null;
    mediaBounds.zIndex = 1;
    return mediaBounds;
  };
  const calculatesSidebarContentHeight = () => ({
    height: 0,
    minHeight: 0,
    maxHeight: 0
  });
  const calculatesCameraDockBounds = () => {
    const cameraDockBounds = {};
    cameraDockBounds.top = 0;
    cameraDockBounds.left = 0;
    cameraDockBounds.right = 0;
    cameraDockBounds.minWidth = 0;
    cameraDockBounds.width = 0;
    cameraDockBounds.maxWidth = 0;
    cameraDockBounds.minHeight = 0;
    cameraDockBounds.height = 0;
    cameraDockBounds.maxHeight = 0;
    return cameraDockBounds;
  };
  const calculatesLayout = () => {
    const {
      calculatesNavbarBounds,
      calculatesActionbarBounds,
      calculatesSidebarNavWidth,
      calculatesSidebarNavHeight,
      calculatesSidebarNavBounds,
      calculatesSidebarContentWidth,
      calculatesSidebarContentBounds,
      calculatesMediaAreaBounds,
      isTablet
    } = props;
    const {
      captionsMargin
    } = DEFAULT_VALUES;
    const sidebarNavWidth = calculatesSidebarNavWidth();
    const sidebarNavHeight = calculatesSidebarNavHeight();
    const sidebarContentWidth = calculatesSidebarContentWidth();
    const sidebarNavBounds = calculatesSidebarNavBounds();
    const sidebarContentBounds = calculatesSidebarContentBounds(sidebarNavWidth.width);
    const mediaAreaBounds = calculatesMediaAreaBounds(sidebarNavWidth.width, sidebarContentWidth.width);
    const navbarBounds = calculatesNavbarBounds(mediaAreaBounds);
    const actionbarBounds = calculatesActionbarBounds(mediaAreaBounds);
    const sidebarSize = sidebarContentWidth.width + sidebarNavWidth.width;
    const mediaBounds = calculatesMediaBounds(mediaAreaBounds, sidebarSize);
    const sidebarContentHeight = calculatesSidebarContentHeight();
    const cameraDockBounds = calculatesCameraDockBounds();
    const {
      isOpen
    } = presentationInput;
    layoutContextDispatch({
      type: ACTIONS.SET_NAVBAR_OUTPUT,
      value: {
        display: navbarInput.hasNavBar,
        width: navbarBounds.width,
        height: navbarBounds.height,
        top: navbarBounds.top,
        left: navbarBounds.left,
        tabOrder: DEFAULT_VALUES.navBarTabOrder,
        zIndex: navbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_ACTIONBAR_OUTPUT,
      value: {
        display: actionbarInput.hasActionBar,
        width: actionbarBounds.width,
        height: actionbarBounds.height,
        innerHeight: actionbarBounds.innerHeight,
        top: actionbarBounds.top,
        left: actionbarBounds.left,
        padding: actionbarBounds.padding,
        tabOrder: DEFAULT_VALUES.actionBarTabOrder,
        zIndex: actionbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAPTIONS_OUTPUT,
      value: {
        left: !isRTL ? sidebarSize + captionsMargin : null,
        right: isRTL ? sidebarSize + captionsMargin : null,
        maxWidth: mediaAreaBounds.width - captionsMargin * 2
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_OUTPUT,
      value: {
        display: false,
        minWidth: 0,
        width: 0,
        maxWidth: sidebarNavWidth.maxWidth,
        height: sidebarNavHeight,
        top: sidebarNavBounds.top,
        left: sidebarNavBounds.left,
        right: sidebarNavBounds.right,
        tabOrder: DEFAULT_VALUES.sidebarNavTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarNavBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: false,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_OUTPUT,
      value: {
        display: false,
        minWidth: 0,
        width: 0,
        maxWidth: sidebarContentWidth.maxWidth,
        minHeight: sidebarContentHeight.minHeight,
        height: sidebarContentHeight.height,
        maxHeight: sidebarContentHeight.maxHeight,
        top: sidebarContentBounds.top,
        left: sidebarContentBounds.left,
        right: sidebarContentBounds.right,
        currentPanelType,
        tabOrder: DEFAULT_VALUES.sidebarContentTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarContentBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: false,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_MEDIA_AREA_SIZE,
      value: {
        width: mediaAreaBounds.width,
        height: mediaAreaBounds.height
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAMERA_DOCK_OUTPUT,
      value: {
        display: false,
        position: CAMERADOCK_POSITION.SIDEBAR_CONTENT_BOTTOM,
        minWidth: cameraDockBounds.minWidth,
        width: cameraDockBounds.width,
        maxWidth: cameraDockBounds.maxWidth,
        minHeight: cameraDockBounds.minHeight,
        height: cameraDockBounds.height,
        maxHeight: cameraDockBounds.maxHeight,
        top: cameraDockBounds.top,
        left: cameraDockBounds.left,
        right: cameraDockBounds.right,
        tabOrder: 4,
        isDraggable: false,
        resizableEdge: {
          top: false,
          right: false,
          bottom: false,
          left: false
        },
        focusedId: input.cameraDock.focusedId,
        zIndex: cameraDockBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_OUTPUT,
      value: {
        display: true,
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null,
        tabOrder: DEFAULT_VALUES.presentationTabOrder,
        isResizable: false,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SCREEN_SHARE_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: isOpen ? mediaBounds.height : 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_EXTERNAL_VIDEO_OUTPUT,
      value: {
        width: isOpen ? mediaBounds.width : 0,
        height: isOpen ? mediaBounds.height : 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_GENERIC_CONTENT_OUTPUT,
      value: {
        width: isOpen ? mediaBounds.width : 0,
        height: isOpen ? mediaBounds.height : 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SHARED_NOTES_OUTPUT,
      value: {
        width: isOpen ? mediaBounds.width : 0,
        height: isOpen ? mediaBounds.height : 0,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: mediaBounds.right
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.NONE
    });
  };
  const throttledCalculatesLayout = throttle(() => calculatesLayout(), 50, {
    trailing: true,
    leading: true
  });
  useEffect(() => {
    window.addEventListener('resize', () => {
      layoutContextDispatch({
        type: ACTIONS.SET_BROWSER_SIZE,
        value: {
          width: window.document.documentElement.clientWidth,
          height: window.document.documentElement.clientHeight
        }
      });
    });
  }, []);
  const init = () => {
    layoutContextDispatch({
      type: ACTIONS.SET_LAYOUT_INPUT,
      value: defaultsDeep({
        sidebarNavigation: {
          isOpen: false,
          width: 0,
          height: 0
        },
        sidebarContent: {
          isOpen: false,
          width: 0,
          height: 0
        },
        SidebarContentHorizontalResizer: {
          isOpen: false
        },
        presentation: {
          isOpen: true,
          slidesLength: presentationInput.slidesLength,
          currentSlide: _objectSpread({}, presentationInput.currentSlide)
        },
        cameraDock: {
          numCameras: 0
        },
        externalVideo: {
          hasExternalVideo: input.externalVideo.hasExternalVideo
        },
        genericMainContent: {
          genericContentId: input.genericMainContent.genericContentId
        },
        screenShare: {
          hasScreenShare: input.screenShare.hasScreenShare,
          width: input.screenShare.width,
          height: input.screenShare.height
        }
      }, INITIAL_INPUT_STATE)
    });
    Session.setItem('layoutReady', true);
    throttledCalculatesLayout();
  };

  // eslint-disable-next-line consistent-return
  useEffect(() => {
    if (deviceType === null) return () => null;
    if (deviceType !== prevDeviceType) {
      // reset layout if deviceType changed
      // not all options is supported in all devices
      init();
    } else {
      throttledCalculatesLayout();
    }
  }, [input, deviceType, isRTL, fontSize, fullscreen]);
  return null;
};
module.exportDefault(PresentationOnlyLayout);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"smartLayout.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/layout-manager/smartLayout.jsx                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 1);
let layoutDispatch, layoutSelect, layoutSelectInput;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  }
}, 2);
let DEFAULT_VALUES;
module.link("/imports/ui/components/layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 3);
let INITIAL_INPUT_STATE;
module.link("/imports/ui/components/layout/initState", {
  INITIAL_INPUT_STATE(v) {
    INITIAL_INPUT_STATE = v;
  }
}, 4);
let ACTIONS, PANELS, CAMERADOCK_POSITION;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  },
  CAMERADOCK_POSITION(v) {
    CAMERADOCK_POSITION = v;
  }
}, 5);
let defaultsDeep;
module.link("/imports/utils/array-utils", {
  defaultsDeep(v) {
    defaultsDeep = v;
  }
}, 6);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 7);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 8);
const windowWidth = () => window.document.documentElement.clientWidth;
const windowHeight = () => window.document.documentElement.clientHeight;
const SmartLayout = props => {
  const {
    bannerAreaHeight,
    isMobile,
    calculatesNavbarHeight
  } = props;
  function usePrevious(value) {
    const ref = useRef();
    useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  }
  const input = layoutSelect(i => i.input);
  const deviceType = layoutSelect(i => i.deviceType);
  const Settings = getSettingsSingletonInstance();
  const {
    isRTL
  } = Settings.application;
  const fullscreen = layoutSelect(i => i.fullscreen);
  const fontSize = layoutSelect(i => i.fontSize);
  const currentPanelType = layoutSelect(i => i.currentPanelType);
  const presentationInput = layoutSelectInput(i => i.presentation);
  const sidebarNavigationInput = layoutSelectInput(i => i.sidebarNavigation);
  const sidebarContentInput = layoutSelectInput(i => i.sidebarContent);
  const cameraDockInput = layoutSelectInput(i => i.cameraDock);
  const actionbarInput = layoutSelectInput(i => i.actionBar);
  const navbarInput = layoutSelectInput(i => i.navBar);
  const externalVideoInput = layoutSelectInput(i => i.externalVideo);
  const genericMainContentInput = layoutSelectInput(i => i.genericMainContent);
  const screenShareInput = layoutSelectInput(i => i.screenShare);
  const sharedNotesInput = layoutSelectInput(i => i.sharedNotes);
  const layoutContextDispatch = layoutDispatch();
  const prevDeviceType = usePrevious(deviceType);
  const {
    isPresentationEnabled
  } = props;
  const throttledCalculatesLayout = throttle(() => calculatesLayout(), 50, {
    trailing: true,
    leading: true
  });
  useEffect(() => {
    window.addEventListener('resize', () => {
      layoutContextDispatch({
        type: ACTIONS.SET_BROWSER_SIZE,
        value: {
          width: window.document.documentElement.clientWidth,
          height: window.document.documentElement.clientHeight
        }
      });
    });
  }, []);
  useEffect(() => {
    if (deviceType === null) return () => null;
    if (deviceType !== prevDeviceType) {
      // reset layout if deviceType changed
      // not all options is supported in all devices
      init();
    } else {
      throttledCalculatesLayout();
    }
  }, [input, deviceType, isRTL, fontSize, fullscreen, isPresentationEnabled]);
  const init = () => {
    const {
      sidebarContentPanel
    } = sidebarContentInput;
    layoutContextDispatch({
      type: ACTIONS.SET_LAYOUT_INPUT,
      value: defaultsDeep({
        sidebarNavigation: {
          isOpen: input.sidebarNavigation.isOpen || sidebarContentPanel !== PANELS.NONE || false
        },
        sidebarContent: {
          isOpen: sidebarContentPanel !== PANELS.NONE,
          sidebarContentPanel
        },
        SidebarContentHorizontalResizer: {
          isOpen: false
        },
        presentation: {
          isOpen: presentationInput.isOpen,
          slidesLength: presentationInput.slidesLength,
          currentSlide: _objectSpread({}, presentationInput.currentSlide)
        },
        cameraDock: {
          numCameras: cameraDockInput.numCameras
        },
        externalVideo: {
          hasExternalVideo: externalVideoInput.hasExternalVideo
        },
        genericMainContent: {
          genericContentId: genericMainContentInput.genericContentId
        },
        screenShare: {
          hasScreenShare: screenShareInput.hasScreenShare,
          width: screenShareInput.width,
          height: screenShareInput.height
        },
        sharedNotes: {
          isPinned: sharedNotesInput.isPinned
        }
      }, INITIAL_INPUT_STATE)
    });
    Session.setItem('layoutReady', true);
    throttledCalculatesLayout();
  };
  const calculatesSidebarContentHeight = () => {
    let sidebarContentHeight = 0;
    if (sidebarContentInput.isOpen) {
      if (isMobile) {
        sidebarContentHeight = windowHeight() - DEFAULT_VALUES.navBarHeight;
      } else {
        sidebarContentHeight = windowHeight();
      }
      sidebarContentHeight -= bannerAreaHeight();
    }
    return sidebarContentHeight;
  };
  const calculatesCameraDockBounds = (mediaAreaBounds, mediaBounds, sidebarSize) => {
    const {
      baseCameraDockBounds
    } = props;
    const baseBounds = baseCameraDockBounds(mediaAreaBounds, sidebarSize);

    // do not proceed if using values from LayoutEngine
    if (Object.keys(baseBounds).length > 0) {
      baseBounds.isCameraHorizontal = false;
      return baseBounds;
    }
    const {
      camerasMargin,
      presentationToolbarMinWidth
    } = DEFAULT_VALUES;
    const navBarHeight = calculatesNavbarHeight();
    const cameraDockBounds = {};
    cameraDockBounds.isCameraHorizontal = false;
    const mediaBoundsWidth = mediaBounds.width > presentationToolbarMinWidth && !isMobile ? mediaBounds.width : presentationToolbarMinWidth;
    cameraDockBounds.top = navBarHeight;
    cameraDockBounds.left = mediaAreaBounds.left;
    cameraDockBounds.right = isRTL ? sidebarSize : null;
    cameraDockBounds.zIndex = 1;
    if (mediaBounds.width < mediaAreaBounds.width) {
      cameraDockBounds.top = navBarHeight + bannerAreaHeight();
      cameraDockBounds.width = mediaAreaBounds.width - mediaBoundsWidth;
      cameraDockBounds.maxWidth = mediaAreaBounds.width * 0.8;
      cameraDockBounds.height = mediaAreaBounds.height;
      cameraDockBounds.maxHeight = mediaAreaBounds.height;
      cameraDockBounds.left += camerasMargin;
      cameraDockBounds.width -= camerasMargin * 2;
      cameraDockBounds.isCameraHorizontal = true;
      cameraDockBounds.position = CAMERADOCK_POSITION.CONTENT_LEFT;
      // button size in vertical position
      cameraDockBounds.height -= 20;
    } else {
      cameraDockBounds.width = mediaAreaBounds.width;
      cameraDockBounds.maxWidth = mediaAreaBounds.width;
      cameraDockBounds.height = mediaAreaBounds.height - mediaBounds.height;
      cameraDockBounds.maxHeight = mediaAreaBounds.height * 0.8;
      cameraDockBounds.top += camerasMargin;
      cameraDockBounds.height -= camerasMargin * 2;
      cameraDockBounds.position = CAMERADOCK_POSITION.CONTENT_TOP;
    }
    cameraDockBounds.minWidth = cameraDockBounds.width;
    cameraDockBounds.minHeight = cameraDockBounds.height;
    return cameraDockBounds;
  };
  const calculatesSlideSize = mediaAreaBounds => {
    const {
      currentSlide
    } = presentationInput;
    if (currentSlide.size.width === 0 && currentSlide.size.height === 0) {
      return {
        width: 0,
        height: 0
      };
    }
    let slideWidth;
    let slideHeight;
    slideWidth = currentSlide.size.width * mediaAreaBounds.height / currentSlide.size.height;
    slideHeight = mediaAreaBounds.height;
    if (slideWidth > mediaAreaBounds.width) {
      slideWidth = mediaAreaBounds.width;
      slideHeight = currentSlide.size.height * mediaAreaBounds.width / currentSlide.size.width;
    }
    return {
      width: slideWidth,
      height: slideHeight
    };
  };
  const calculatesScreenShareSize = mediaAreaBounds => {
    const {
      width = 0,
      height = 0
    } = screenShareInput;
    if (width === 0 && height === 0) return {
      width,
      height
    };
    let screeShareWidth;
    let screeShareHeight;
    screeShareWidth = width * mediaAreaBounds.height / height;
    screeShareHeight = mediaAreaBounds.height;
    if (screeShareWidth > mediaAreaBounds.width) {
      screeShareWidth = mediaAreaBounds.width;
      screeShareHeight = height * mediaAreaBounds.width / width;
    }
    return {
      width: screeShareWidth,
      height: screeShareHeight
    };
  };
  const calculatesMediaBounds = (mediaAreaBounds, slideSize, sidebarSize, screenShareSize) => {
    const {
      isOpen,
      slidesLength
    } = presentationInput;
    const {
      hasExternalVideo
    } = externalVideoInput;
    const {
      genericContentId
    } = genericMainContentInput;
    const {
      hasScreenShare
    } = screenShareInput;
    const {
      isPinned: isSharedNotesPinned
    } = sharedNotesInput;
    const hasPresentation = isPresentationEnabled && slidesLength !== 0;
    const isGeneralMediaOff = !hasPresentation && !hasExternalVideo && !hasScreenShare && !isSharedNotesPinned && !genericContentId;
    const mediaBounds = {};
    const {
      element: fullscreenElement
    } = fullscreen;
    if (!isOpen || isGeneralMediaOff) {
      mediaBounds.width = 0;
      mediaBounds.height = 0;
      mediaBounds.top = 0;
      mediaBounds.left = !isRTL ? 0 : null;
      mediaBounds.right = isRTL ? 0 : null;
      mediaBounds.zIndex = 0;
      return mediaBounds;
    }
    if (fullscreenElement === 'Presentation' || fullscreenElement === 'Screenshare' || fullscreenElement === 'ExternalVideo' || fullscreenElement === 'GenericContent') {
      mediaBounds.width = windowWidth();
      mediaBounds.height = windowHeight();
      mediaBounds.top = 0;
      mediaBounds.left = !isRTL ? 0 : null;
      mediaBounds.right = isRTL ? 0 : null;
      mediaBounds.zIndex = 99;
      return mediaBounds;
    }
    const mediaContentSize = hasScreenShare ? screenShareSize : slideSize;
    if (cameraDockInput.numCameras > 0 && !cameraDockInput.isDragging) {
      if (mediaContentSize.width !== 0 && mediaContentSize.height !== 0 && !hasExternalVideo && !genericContentId) {
        if (mediaContentSize.width < mediaAreaBounds.width && !isMobile) {
          if (mediaContentSize.width < mediaAreaBounds.width * 0.8) {
            mediaBounds.width = mediaContentSize.width;
          } else {
            mediaBounds.width = mediaAreaBounds.width * 0.8;
          }
          mediaBounds.height = mediaAreaBounds.height;
          mediaBounds.top = mediaAreaBounds.top;
          const sizeValue = mediaAreaBounds.left + (mediaAreaBounds.width - mediaBounds.width);
          mediaBounds.left = !isRTL ? sizeValue : null;
          mediaBounds.right = isRTL ? sidebarSize : null;
        } else {
          if (mediaContentSize.height < mediaAreaBounds.height * 0.8) {
            mediaBounds.height = mediaContentSize.height;
          } else {
            mediaBounds.height = mediaAreaBounds.height * 0.8;
          }
          mediaBounds.width = mediaAreaBounds.width;
          mediaBounds.top = mediaAreaBounds.top + (mediaAreaBounds.height - mediaBounds.height);
          const sizeValue = mediaAreaBounds.left;
          mediaBounds.left = !isRTL ? sizeValue : null;
          mediaBounds.right = isRTL ? sidebarSize : null;
        }
      } else {
        mediaBounds.width = mediaAreaBounds.width;
        mediaBounds.height = mediaAreaBounds.height * 0.8;
        mediaBounds.top = mediaAreaBounds.top + (mediaAreaBounds.height - mediaBounds.height);
        const sizeValue = mediaAreaBounds.left;
        mediaBounds.left = !isRTL ? sizeValue : null;
        mediaBounds.right = isRTL ? sidebarSize : null;
      }
    } else {
      mediaBounds.width = mediaAreaBounds.width;
      mediaBounds.height = mediaAreaBounds.height;
      mediaBounds.top = mediaAreaBounds.top;
      const sizeValue = mediaAreaBounds.left;
      mediaBounds.left = !isRTL ? sizeValue : null;
      mediaBounds.right = isRTL ? sidebarSize : null;
    }
    mediaBounds.zIndex = 1;
    return mediaBounds;
  };
  const calculatesLayout = () => {
    const {
      calculatesNavbarBounds,
      calculatesActionbarBounds,
      calculatesSidebarNavWidth,
      calculatesSidebarNavHeight,
      calculatesSidebarNavBounds,
      calculatesSidebarContentWidth,
      calculatesSidebarContentBounds,
      calculatesMediaAreaBounds,
      isTablet
    } = props;
    const {
      camerasMargin,
      captionsMargin
    } = DEFAULT_VALUES;
    const sidebarNavWidth = calculatesSidebarNavWidth();
    const sidebarNavHeight = calculatesSidebarNavHeight();
    const sidebarContentWidth = calculatesSidebarContentWidth();
    const sidebarContentHeight = calculatesSidebarContentHeight();
    const sidebarNavBounds = calculatesSidebarNavBounds();
    const sidebarContentBounds = calculatesSidebarContentBounds(sidebarNavWidth.width);
    const mediaAreaBounds = calculatesMediaAreaBounds(sidebarNavWidth.width, sidebarContentWidth.width);
    const navbarBounds = calculatesNavbarBounds(mediaAreaBounds);
    const actionbarBounds = calculatesActionbarBounds(mediaAreaBounds);
    const slideSize = calculatesSlideSize(mediaAreaBounds);
    const screenShareSize = calculatesScreenShareSize(mediaAreaBounds);
    const sidebarSize = sidebarContentWidth.width + sidebarNavWidth.width;
    const mediaBounds = calculatesMediaBounds(mediaAreaBounds, slideSize, sidebarSize, screenShareSize);
    const cameraDockBounds = calculatesCameraDockBounds(mediaAreaBounds, mediaBounds, sidebarSize);
    const horizontalCameraDiff = cameraDockBounds.isCameraHorizontal ? cameraDockBounds.width + camerasMargin * 2 : 0;
    layoutContextDispatch({
      type: ACTIONS.SET_NAVBAR_OUTPUT,
      value: {
        display: navbarInput.hasNavBar,
        width: navbarBounds.width,
        height: navbarBounds.height,
        top: navbarBounds.top,
        left: navbarBounds.left,
        tabOrder: DEFAULT_VALUES.navBarTabOrder,
        zIndex: navbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_ACTIONBAR_OUTPUT,
      value: {
        display: actionbarInput.hasActionBar,
        width: actionbarBounds.width,
        height: actionbarBounds.height,
        innerHeight: actionbarBounds.innerHeight,
        top: actionbarBounds.top,
        left: actionbarBounds.left,
        padding: actionbarBounds.padding,
        tabOrder: DEFAULT_VALUES.actionBarTabOrder,
        zIndex: actionbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAPTIONS_OUTPUT,
      value: {
        left: !isRTL ? sidebarSize + captionsMargin : null,
        right: isRTL ? sidebarSize + captionsMargin : null,
        maxWidth: mediaAreaBounds.width - captionsMargin * 2
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_OUTPUT,
      value: {
        display: sidebarNavigationInput.isOpen,
        minWidth: sidebarNavWidth.minWidth,
        width: sidebarNavWidth.width,
        maxWidth: sidebarNavWidth.maxWidth,
        height: sidebarNavHeight,
        top: sidebarNavBounds.top,
        left: sidebarNavBounds.left,
        right: sidebarNavBounds.right,
        tabOrder: DEFAULT_VALUES.sidebarNavTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarNavBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: false,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_OUTPUT,
      value: {
        display: sidebarContentInput.isOpen,
        minWidth: sidebarContentWidth.minWidth,
        width: sidebarContentWidth.width,
        maxWidth: sidebarContentWidth.maxWidth,
        height: sidebarContentHeight,
        top: sidebarContentBounds.top,
        left: sidebarContentBounds.left,
        right: sidebarContentBounds.right,
        currentPanelType,
        tabOrder: DEFAULT_VALUES.sidebarContentTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarContentBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: false,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_MEDIA_AREA_SIZE,
      value: {
        width: mediaAreaBounds.width,
        height: mediaAreaBounds.height
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAMERA_DOCK_OUTPUT,
      value: {
        display: cameraDockInput.numCameras > 0,
        position: cameraDockBounds.position,
        minWidth: cameraDockBounds.minWidth,
        width: cameraDockBounds.width,
        maxWidth: cameraDockBounds.maxWidth,
        minHeight: cameraDockBounds.minHeight,
        height: cameraDockBounds.height,
        maxHeight: cameraDockBounds.maxHeight,
        top: cameraDockBounds.top,
        left: cameraDockBounds.left,
        right: cameraDockBounds.right,
        tabOrder: 4,
        isDraggable: false,
        resizableEdge: {
          top: false,
          right: false,
          bottom: false,
          left: false
        },
        zIndex: cameraDockBounds.zIndex,
        focusedId: input.cameraDock.focusedId
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_OUTPUT,
      value: {
        display: presentationInput.isOpen,
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right + horizontalCameraDiff : null,
        tabOrder: DEFAULT_VALUES.presentationTabOrder,
        isResizable: false,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SCREEN_SHARE_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right + horizontalCameraDiff : null,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_EXTERNAL_VIDEO_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right + horizontalCameraDiff : null
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_GENERIC_CONTENT_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right + horizontalCameraDiff : null
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SHARED_NOTES_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right + horizontalCameraDiff : null
      }
    });
  };
  return null;
};
module.exportDefault(SmartLayout);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"videoFocusLayout.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/layout-manager/videoFocusLayout.jsx                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 1);
let layoutDispatch, layoutSelect, layoutSelectInput, layoutSelectOutput;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  }
}, 2);
let DEFAULT_VALUES;
module.link("/imports/ui/components/layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 3);
let INITIAL_INPUT_STATE;
module.link("/imports/ui/components/layout/initState", {
  INITIAL_INPUT_STATE(v) {
    INITIAL_INPUT_STATE = v;
  }
}, 4);
let ACTIONS, PANELS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 5);
let defaultsDeep;
module.link("/imports/utils/array-utils", {
  defaultsDeep(v) {
    defaultsDeep = v;
  }
}, 6);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 7);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 8);
const windowWidth = () => window.document.documentElement.clientWidth;
const windowHeight = () => window.document.documentElement.clientHeight;
const VideoFocusLayout = props => {
  const {
    bannerAreaHeight,
    isMobile,
    calculatesNavbarHeight
  } = props;
  function usePrevious(value) {
    const ref = useRef();
    useEffect(() => {
      ref.current = value;
    });
    return ref.current;
  }
  const input = layoutSelect(i => i.input);
  const deviceType = layoutSelect(i => i.deviceType);
  const Settings = getSettingsSingletonInstance();
  const {
    isRTL
  } = Settings.application;
  const fullscreen = layoutSelect(i => i.fullscreen);
  const fontSize = layoutSelect(i => i.fontSize);
  const currentPanelType = layoutSelect(i => i.currentPanelType);
  const presentationInput = layoutSelectInput(i => i.presentation);
  const externalVideoInput = layoutSelectInput(i => i.externalVideo);
  const genericMainContentInput = layoutSelectInput(i => i.genericMainContent);
  const screenShareInput = layoutSelectInput(i => i.screenShare);
  const sharedNotesInput = layoutSelectInput(i => i.sharedNotes);
  const sidebarNavigationInput = layoutSelectInput(i => i.sidebarNavigation);
  const sidebarContentInput = layoutSelectInput(i => i.sidebarContent);
  const cameraDockInput = layoutSelectInput(i => i.cameraDock);
  const actionbarInput = layoutSelectInput(i => i.actionBar);
  const navbarInput = layoutSelectInput(i => i.navBar);
  const layoutContextDispatch = layoutDispatch();
  const sidebarContentOutput = layoutSelectOutput(i => i.sidebarContent);
  const prevDeviceType = usePrevious(deviceType);
  const {
    isPresentationEnabled
  } = props;
  const throttledCalculatesLayout = throttle(() => calculatesLayout(), 50, {
    trailing: true,
    leading: true
  });
  useEffect(() => {
    window.addEventListener('resize', () => {
      layoutContextDispatch({
        type: ACTIONS.SET_BROWSER_SIZE,
        value: {
          width: window.document.documentElement.clientWidth,
          height: window.document.documentElement.clientHeight
        }
      });
    });
  }, []);
  useEffect(() => {
    if (deviceType === null) return () => null;
    if (deviceType !== prevDeviceType) {
      // reset layout if deviceType changed
      // not all options is supported in all devices
      init();
    } else {
      throttledCalculatesLayout();
    }
  }, [input, deviceType, isRTL, fontSize, fullscreen, isPresentationEnabled]);
  const init = () => {
    const {
      sidebarContentPanel
    } = sidebarContentInput;
    layoutContextDispatch({
      type: ACTIONS.SET_LAYOUT_INPUT,
      value: defaultsDeep({
        sidebarNavigation: {
          isOpen: input.sidebarNavigation.isOpen || sidebarContentPanel !== PANELS.NONE || false
        },
        sidebarContent: {
          isOpen: sidebarContentPanel !== PANELS.NONE,
          sidebarContentPanel
        },
        SidebarContentHorizontalResizer: {
          isOpen: false
        },
        presentation: {
          isOpen: presentationInput.isOpen,
          slidesLength: presentationInput.slidesLength,
          currentSlide: _objectSpread({}, presentationInput.currentSlide)
        },
        cameraDock: {
          numCameras: cameraDockInput.numCameras
        },
        externalVideo: {
          hasExternalVideo: input.externalVideo.hasExternalVideo
        },
        genericMainContent: {
          genericContentId: input.genericMainContent.genericContentId
        },
        screenShare: {
          hasScreenShare: input.screenShare.hasScreenShare,
          width: input.screenShare.width,
          height: input.screenShare.height
        }
      }, INITIAL_INPUT_STATE)
    });
    Session.setItem('layoutReady', true);
    throttledCalculatesLayout();
  };
  const calculatesSidebarContentHeight = () => {
    const {
      isOpen,
      slidesLength
    } = presentationInput;
    const {
      hasExternalVideo
    } = externalVideoInput;
    const {
      genericContentId
    } = genericMainContentInput;
    const {
      hasScreenShare
    } = screenShareInput;
    const {
      isPinned: isSharedNotesPinned
    } = sharedNotesInput;
    const navBarHeight = calculatesNavbarHeight();
    const hasPresentation = isPresentationEnabled && slidesLength !== 0;
    const isGeneralMediaOff = !hasPresentation && !hasExternalVideo && !hasScreenShare && !isSharedNotesPinned && !genericContentId;
    let minHeight = 0;
    let height = 0;
    let maxHeight = 0;
    if (sidebarContentInput.isOpen) {
      if (isMobile) {
        height = windowHeight() - navBarHeight - bannerAreaHeight();
        minHeight = height;
        maxHeight = height;
      } else if (isOpen && !isGeneralMediaOff) {
        if (sidebarContentInput.height > 0 && sidebarContentInput.height < windowHeight()) {
          height = sidebarContentInput.height - bannerAreaHeight();
        } else {
          const {
            size: slideSize
          } = presentationInput.currentSlide;
          let calculatedHeight = (windowHeight() - bannerAreaHeight()) * 0.3;
          if (slideSize.height > 0 && slideSize.width > 0) {
            calculatedHeight = slideSize.height * sidebarContentOutput.width / slideSize.width;
          }
          height = windowHeight() - calculatedHeight - bannerAreaHeight();
        }
        maxHeight = windowHeight() * 0.75 - bannerAreaHeight();
        minHeight = windowHeight() * 0.25 - bannerAreaHeight();
        if (height > maxHeight) {
          height = maxHeight;
        }
      } else {
        height = windowHeight() - bannerAreaHeight();
        maxHeight = height;
        minHeight = height;
      }
    }
    return {
      minHeight,
      height,
      maxHeight
    };
  };
  const calculatesCameraDockBounds = (mediaAreaBounds, sidebarSize) => {
    const {
      baseCameraDockBounds
    } = props;
    const baseBounds = baseCameraDockBounds(mediaAreaBounds, sidebarSize);

    // do not proceed if using values from LayoutEngine
    if (Object.keys(baseBounds).length > 0) {
      return baseBounds;
    }
    const navBarHeight = calculatesNavbarHeight();
    const cameraDockBounds = {};
    const mobileCameraHeight = mediaAreaBounds.height * 0.7 - bannerAreaHeight();
    const cameraHeight = mediaAreaBounds.height - bannerAreaHeight();
    if (isMobile) {
      cameraDockBounds.minHeight = mobileCameraHeight;
      cameraDockBounds.height = mobileCameraHeight;
      cameraDockBounds.maxHeight = mobileCameraHeight;
    } else {
      cameraDockBounds.minHeight = cameraHeight;
      cameraDockBounds.height = cameraHeight;
      cameraDockBounds.maxHeight = cameraHeight;
    }
    cameraDockBounds.top = navBarHeight + bannerAreaHeight();
    cameraDockBounds.left = !isRTL ? mediaAreaBounds.left : null;
    cameraDockBounds.right = isRTL ? sidebarSize : null;
    cameraDockBounds.minWidth = mediaAreaBounds.width;
    cameraDockBounds.width = mediaAreaBounds.width;
    cameraDockBounds.maxWidth = mediaAreaBounds.width;
    cameraDockBounds.zIndex = 1;
    return cameraDockBounds;
  };
  const calculatesMediaBounds = (mediaAreaBounds, cameraDockBounds, sidebarNavWidth, sidebarContentWidth, sidebarContentHeight) => {
    const mediaBounds = {};
    const {
      element: fullscreenElement
    } = fullscreen;
    if (fullscreenElement === 'Presentation' || fullscreenElement === 'Screenshare' || fullscreenElement === 'ExternalVideo' || fullscreenElement === 'GenericContent') {
      mediaBounds.width = windowWidth();
      mediaBounds.height = windowHeight();
      mediaBounds.top = 0;
      mediaBounds.left = 0;
      mediaBounds.right = 0;
      mediaBounds.zIndex = 99;
      return mediaBounds;
    }
    if (isMobile) {
      mediaBounds.height = mediaAreaBounds.height - cameraDockBounds.height;
      mediaBounds.left = mediaAreaBounds.left;
      mediaBounds.top = mediaAreaBounds.top + cameraDockBounds.height;
      mediaBounds.width = mediaAreaBounds.width;
    } else if (presentationInput.isOpen) {
      mediaBounds.height = windowHeight() - sidebarContentHeight - bannerAreaHeight();
      mediaBounds.left = !isRTL ? sidebarNavWidth : 0;
      mediaBounds.right = isRTL ? sidebarNavWidth : 0;
      mediaBounds.top = sidebarContentHeight + bannerAreaHeight();
      mediaBounds.width = sidebarContentWidth;
      mediaBounds.zIndex = 1;
    } else if (!presentationInput.isOpen) {
      mediaBounds.width = 0;
      mediaBounds.height = 0;
      mediaBounds.top = 0;
      mediaBounds.left = 0;
    }
    return mediaBounds;
  };
  const calculatesLayout = () => {
    const {
      calculatesNavbarBounds,
      calculatesActionbarBounds,
      calculatesSidebarNavWidth,
      calculatesSidebarNavHeight,
      calculatesSidebarNavBounds,
      calculatesSidebarContentWidth,
      calculatesSidebarContentBounds,
      calculatesMediaAreaBounds,
      isTablet
    } = props;
    const {
      captionsMargin
    } = DEFAULT_VALUES;
    const sidebarNavWidth = calculatesSidebarNavWidth();
    const sidebarNavHeight = calculatesSidebarNavHeight();
    const sidebarContentWidth = calculatesSidebarContentWidth();
    const sidebarNavBounds = calculatesSidebarNavBounds();
    const sidebarContentBounds = calculatesSidebarContentBounds(sidebarNavWidth.width);
    const mediaAreaBounds = calculatesMediaAreaBounds(sidebarNavWidth.width, sidebarContentWidth.width);
    const navbarBounds = calculatesNavbarBounds(mediaAreaBounds);
    const actionbarBounds = calculatesActionbarBounds(mediaAreaBounds);
    const sidebarSize = sidebarContentWidth.width + sidebarNavWidth.width;
    const cameraDockBounds = calculatesCameraDockBounds(mediaAreaBounds, sidebarSize);
    const sidebarContentHeight = calculatesSidebarContentHeight();
    const mediaBounds = calculatesMediaBounds(mediaAreaBounds, cameraDockBounds, sidebarNavWidth.width, sidebarContentWidth.width, sidebarContentHeight.height);
    layoutContextDispatch({
      type: ACTIONS.SET_NAVBAR_OUTPUT,
      value: {
        display: navbarInput.hasNavBar,
        width: navbarBounds.width,
        height: navbarBounds.height,
        top: navbarBounds.top,
        left: navbarBounds.left,
        tabOrder: DEFAULT_VALUES.navBarTabOrder,
        zIndex: navbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_ACTIONBAR_OUTPUT,
      value: {
        display: actionbarInput.hasActionBar,
        width: actionbarBounds.width,
        height: actionbarBounds.height,
        innerHeight: actionbarBounds.innerHeight,
        top: actionbarBounds.top,
        left: actionbarBounds.left,
        padding: actionbarBounds.padding,
        tabOrder: DEFAULT_VALUES.actionBarTabOrder,
        zIndex: actionbarBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAPTIONS_OUTPUT,
      value: {
        left: !isRTL ? sidebarSize + captionsMargin : null,
        right: isRTL ? sidebarSize + captionsMargin : null,
        maxWidth: mediaAreaBounds.width - captionsMargin * 2
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_OUTPUT,
      value: {
        display: sidebarNavigationInput.isOpen,
        minWidth: sidebarNavWidth.minWidth,
        width: sidebarNavWidth.width,
        maxWidth: sidebarNavWidth.maxWidth,
        height: sidebarNavHeight,
        top: sidebarNavBounds.top,
        left: sidebarNavBounds.left,
        right: sidebarNavBounds.right,
        tabOrder: DEFAULT_VALUES.sidebarNavTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarNavBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: false,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_OUTPUT,
      value: {
        display: sidebarContentInput.isOpen,
        minWidth: sidebarContentWidth.minWidth,
        width: sidebarContentWidth.width,
        maxWidth: sidebarContentWidth.maxWidth,
        minHeight: sidebarContentHeight.minHeight,
        height: sidebarContentHeight.height,
        maxHeight: sidebarContentHeight.maxHeight,
        top: sidebarContentBounds.top,
        left: sidebarContentBounds.left,
        right: sidebarContentBounds.right,
        currentPanelType,
        tabOrder: DEFAULT_VALUES.sidebarContentTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: sidebarContentBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_RESIZABLE_EDGE,
      value: {
        top: false,
        right: !isRTL,
        bottom: true,
        left: isRTL
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_MEDIA_AREA_SIZE,
      value: {
        width: mediaAreaBounds.width,
        height: mediaAreaBounds.height
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_CAMERA_DOCK_OUTPUT,
      value: {
        display: true,
        minWidth: cameraDockBounds.minWidth,
        width: cameraDockBounds.width,
        maxWidth: cameraDockBounds.maxWidth,
        minHeight: cameraDockBounds.minHeight,
        height: cameraDockBounds.height,
        maxHeight: cameraDockBounds.maxHeight,
        top: cameraDockBounds.top,
        left: cameraDockBounds.left,
        right: cameraDockBounds.right,
        tabOrder: 4,
        isDraggable: false,
        resizableEdge: {
          top: false,
          right: false,
          bottom: false,
          left: false
        },
        zIndex: cameraDockBounds.zIndex,
        focusedId: input.cameraDock.focusedId
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_OUTPUT,
      value: {
        display: presentationInput.isOpen,
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null,
        tabOrder: DEFAULT_VALUES.presentationTabOrder,
        isResizable: !isMobile && !isTablet,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_RESIZABLE_EDGE,
      value: {
        top: true,
        right: false,
        bottom: false,
        left: false
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SCREEN_SHARE_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null,
        zIndex: mediaBounds.zIndex
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_EXTERNAL_VIDEO_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_GENERIC_CONTENT_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null
      }
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SHARED_NOTES_OUTPUT,
      value: {
        width: mediaBounds.width,
        height: mediaBounds.height,
        top: mediaBounds.top,
        left: mediaBounds.left,
        right: isRTL ? mediaBounds.right : null
      }
    });
  };
  return null;
};
module.exportDefault(VideoFocusLayout);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"modal":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/modal/component.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let LAYOUT_TYPE, CAMERADOCK_POSITION, HIDDEN_LAYOUTS;
module.link("/imports/ui/components/layout/enums", {
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  },
  CAMERADOCK_POSITION(v) {
    CAMERADOCK_POSITION = v;
  },
  HIDDEN_LAYOUTS(v) {
    HIDDEN_LAYOUTS = v;
  }
}, 3);
let SettingsService;
module.link("/imports/ui/components/settings/service", {
  default(v) {
    SettingsService = v;
  }
}, 4);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 5);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 6);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 7);
const LayoutModalComponent = _ref => {
  let {
    intl,
    setIsOpen,
    isModerator = false,
    isPresenter,
    application,
    updateSettings,
    onRequestClose,
    isOpen,
    setLocalSettings
  } = _ref;
  const [selectedLayout, setSelectedLayout] = useState(application.selectedLayout);
  const [updateAllUsed, setUpdateAllUsed] = useState(false);
  const BASE_NAME = window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename;
  const LAYOUTS_PATH = "".concat(BASE_NAME, "/resources/images/layouts/");
  const isKeepPushingLayoutEnabled = SettingsService.isKeepPushingLayoutEnabled();
  const intlMessages = defineMessages({
    title: {
      id: 'app.layout.modal.title',
      description: 'Modal title'
    },
    update: {
      id: 'app.layout.modal.update',
      description: 'Modal confirm button'
    },
    updateAll: {
      id: 'app.layout.modal.updateAll',
      description: 'Modal updateAll button'
    },
    layoutLabel: {
      id: 'app.layout.modal.layoutLabel',
      description: 'Layout label'
    },
    layoutToastLabelAuto: {
      id: 'app.layout.modal.layoutToastLabelAuto',
      description: 'Layout toast label'
    },
    layoutToastLabelAutoOff: {
      id: 'app.layout.modal.layoutToastLabelAutoOff',
      description: 'Layout toast label'
    },
    layoutToastLabel: {
      id: 'app.layout.modal.layoutToastLabel',
      description: 'Layout toast label'
    },
    customLayout: {
      id: 'app.layout.style.custom',
      description: 'label for custom layout style'
    },
    smartLayout: {
      id: 'app.layout.style.smart',
      description: 'label for smart layout style'
    },
    presentationFocusLayout: {
      id: 'app.layout.style.presentationFocus',
      description: 'label for presentationFocus layout style'
    },
    videoFocusLayout: {
      id: 'app.layout.style.videoFocus',
      description: 'label for videoFocus layout style'
    },
    layoutSingular: {
      id: 'app.layout.modal.layoutSingular',
      description: 'label for singular layout'
    },
    layoutBtnDesc: {
      id: 'app.layout.modal.layoutBtnDesc',
      description: 'label for singular layout'
    }
  });
  const handleSwitchLayout = e => {
    setSelectedLayout(e);
  };
  const handleUpdateLayout = updateAll => {
    const obj = {
      application: _objectSpread(_objectSpread({}, application), {}, {
        selectedLayout,
        pushLayout: updateAll
      })
    };
    if ((isModerator || isPresenter) && updateAll) {
      updateSettings(obj, intlMessages.layoutToastLabelAuto);
      setUpdateAllUsed(true);
    } else if ((isModerator || isPresenter) && !updateAll && !updateAllUsed) {
      updateSettings(obj, intlMessages.layoutToastLabelAutoOff);
      setUpdateAllUsed(false);
    } else {
      updateSettings(obj, intlMessages.layoutToastLabel);
    }
    updateSettings(obj, intlMessages.layoutToastLabel, setLocalSettings);
    setIsOpen(false);
  };
  const renderPushLayoutsOptions = () => {
    if (!isModerator && !isPresenter) {
      return null;
    }
    if (isKeepPushingLayoutEnabled) {
      return /*#__PURE__*/React.createElement(Styled.BottomButton, {
        label: intl.formatMessage(intlMessages.updateAll),
        onClick: () => handleUpdateLayout(true),
        color: "secondary",
        "data-test": "updateEveryoneLayoutBtn"
      });
    }
    return null;
  };
  const renderLayoutButtons = () => /*#__PURE__*/React.createElement(Styled.ButtonsContainer, null, Object.values(LAYOUT_TYPE).filter(layout => !HIDDEN_LAYOUTS.includes(layout)).map(layout => /*#__PURE__*/React.createElement(Styled.ButtonLayoutContainer, {
    key: layout
  }, /*#__PURE__*/React.createElement(Styled.LayoutBtn, {
    label: "",
    customIcon: /*#__PURE__*/React.createElement(Styled.IconSvg, {
      src: "".concat(LAYOUTS_PATH).concat(layout, ".svg"),
      alt: "".concat(layout, " ").concat(intl.formatMessage(intlMessages.layoutSingular))
    }),
    onClick: () => {
      handleSwitchLayout(layout);
      if (layout === LAYOUT_TYPE.CUSTOM_LAYOUT && application.selectedLayout !== layout) {
        var _document$getElementB;
        (_document$getElementB = document.getElementById('layout')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.setAttribute('data-cam-position', CAMERADOCK_POSITION.CONTENT_TOP);
      }
    },
    active: (layout === selectedLayout).toString(),
    "aria-describedby": "layout-btn-desc",
    "data-test": "".concat(layout, "Layout")
  }), /*#__PURE__*/React.createElement(Styled.LabelLayoutNames, {
    "aria-hidden": true
  }, intl.formatMessage(intlMessages["".concat(layout, "Layout")])))));
  return /*#__PURE__*/React.createElement(Styled.LayoutModal, {
    contentLabel: intl.formatMessage(intlMessages.title),
    shouldShowCloseButton: true,
    shouldCloseOnOverlayClick: true,
    isPhone: deviceInfo.isPhone,
    "data-test": "layoutChangeModal",
    onRequestClose: () => setIsOpen(false),
    title: intl.formatMessage(intlMessages.title),
    isOpen,
    onRequestClose
  }, /*#__PURE__*/React.createElement(Styled.Content, null, /*#__PURE__*/React.createElement(Styled.BodyContainer, null, renderLayoutButtons())), /*#__PURE__*/React.createElement(Styled.ButtonBottomContainer, null, renderPushLayoutsOptions(), /*#__PURE__*/React.createElement(Button, {
    color: "primary",
    label: intl.formatMessage(intlMessages.update),
    onClick: () => handleUpdateLayout(false),
    "data-test": "updateLayoutBtn"
  })), /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'none'
    },
    id: "layout-btn-desc"
  }, intl.formatMessage(intlMessages.layoutBtnDesc)));
};
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  isModerator: PropTypes.bool,
  isPresenter: PropTypes.bool.isRequired,
  application: PropTypes.shape({
    selectedLayout: PropTypes.string.isRequired
  }).isRequired,
  updateSettings: PropTypes.func.isRequired,
  setLocalSettings: PropTypes.func.isRequired
};
LayoutModalComponent.propTypes = propTypes;
module.exportDefault(injectIntl(LayoutModalComponent));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/modal/container.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let LayoutModalComponent;
module.link("./component", {
  default(v) {
    LayoutModalComponent = v;
  }
}, 1);
let updateSettings;
module.link("/imports/ui/components/settings/service", {
  updateSettings(v) {
    updateSettings = v;
  }
}, 2);
let useUserChangedLocalSettings;
module.link("/imports/ui/services/settings/hooks/useUserChangedLocalSettings", {
  default(v) {
    useUserChangedLocalSettings = v;
  }
}, 3);
let useSettings;
module.link("/imports/ui/services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 4);
let SETTINGS;
module.link("/imports/ui/services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 5);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 6);
const LayoutModalContainer = props => {
  var _currentUser$presente;
  const {
    intl,
    setIsOpen,
    onRequestClose,
    isOpen,
    amIModerator
  } = props;
  const setLocalSettings = useUserChangedLocalSettings();
  const application = useSettings(SETTINGS.APPLICATION);
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    presenter: u.presenter
  }));
  return /*#__PURE__*/React.createElement(LayoutModalComponent, {
    intl,
    setIsOpen,
    isModerator: amIModerator,
    isPresenter: (_currentUser$presente = currentUser === null || currentUser === void 0 ? void 0 : currentUser.presenter) !== null && _currentUser$presente !== void 0 ? _currentUser$presente : false,
    application,
    updateSettings,
    onRequestClose,
    isOpen,
    setLocalSettings
  });
};
module.exportDefault(LayoutModalContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/modal/styles.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorPrimary, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 1);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 4);
let ModalStyles;
module.link("/imports/ui/components/common/modal/simple/styles", {
  default(v) {
    ModalStyles = v;
  }
}, 5);
const Content = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  padding: .5rem 0 .5rem 0;\n  overflow: hidden;\n"])));
const LayoutModal = styled(ModalSimple)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding: 1rem;\n\n  @media ", " {\n    height: unset;\n  }\n\n   ", "\n\n  ", " {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n"])), smallOnly, _ref => {
  let {
    isPhone
  } = _ref;
  return isPhone && "\n    min-height: 100%;\n    min-width: 100%;\n    border-radius: 0;\n  ";
}, ModalStyles.Content);
const BodyContainer = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n"])));
const IconSvg = styled.img(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  height: 8rem;\n  border-radius: 5px;\n  margin: 5px;\n\n  @media ", " {\n    height: 3rem;\n    margin: 1px;\n  }\n"])), smallOnly);
const LayoutBtn = styled(Button)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  box-shadow: unset !important;\n  background-color: ", ";\n  border: ", " solid 6px;\n  align-items: center;\n  flex-direction: column;\n  padding: 0 !important;\n  margin: 1rem 1rem 0.5rem 1rem;\n  width: fit-content;\n\n  @media ", " {\n    margin: 0.5rem;\n    border: ", " solid 4px;\n    border-radius: 10px;\n    width: fit-content;\n  }\n\n  &:focus,\n  &:hover {\n    border: ", " solid 6px;\n    border-radius: 5px;\n  }\n  \n  ", ";\n"])), colorWhite, colorWhite, smallOnly, colorWhite, colorPrimary, _ref2 => {
  let {
    active
  } = _ref2;
  return active === 'true' && "\n    border: ".concat(colorPrimary, " solid 6px;\n    border-radius: 5px;\n\n    @media ").concat(smallOnly, " {\n      border: ").concat(colorPrimary, " solid 4px;\n      border-radius: 5px;\n    }\n\n    &:before {\n      font-family: 'bbb-icons';\n      color: ").concat(colorWhite, ";\n      position: fixed;\n      content: \"\\e946\";\n      background-color: ").concat(colorPrimary, ";\n      margin-left: 13.1rem;\n      padding: 0.3rem 0.2rem 0 0.6rem;\n      border-radius: 0 0 0 .3rem;\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        margin-right: 13.1rem;\n        margin-left: unset;\n        padding: 0.3rem 0.6rem 0 0.2rem;\n        border-radius: 0 0 .3rem 0;\n      }\n      width: 1.8rem;\n      height: 1.8rem;\n\n      @media ").concat(smallOnly, " {\n        width: 1rem;\n        height: 1rem;\n        font-size: 0.6rem;\n        margin-left: 4.5rem;\n        padding: 0.2rem 0.2rem 0 0.3rem;\n\n        [dir=\"rtl\"] & {\n          margin-right: 4.5rem;\n          margin-left: unset;\n          padding: 0.2rem 0.3rem 0 0.2rem;\n        }\n      }\n    }\n  ");
});
const ButtonLayoutContainer = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  @media ", " {\n    align-items: center;\n  }\n"])), smallOnly);
const ButtonsContainer = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n\n  @media ", " {\n    flex-wrap: unset;\n    flex-direction: column;\n    align-items: center;\n  }\n"])), smallOnly);
const ButtonBottomContainer = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  align-self: end;\n  padding-right: 3rem;\n  padding-top: 1rem;\n\n  @media ", " {\n    align-self: center;\n    padding-right: unset;\n  }\n"])), smallOnly);
const LabelLayoutNames = styled.label(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  text-align: center;\n  margin: 0 0 0.1rem 0;\n"])));
const BottomButton = styled(Button)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  margin: 0 0.5rem;\n"])));
const PushContainer = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 1rem 0 1rem 0;\n"])));
const LabelPushLayout = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  padding-right: 0.5rem;\n"])));
module.exportDefault({
  Content,
  LayoutModal,
  BodyContainer,
  IconSvg,
  LayoutBtn,
  ButtonLayoutContainer,
  ButtonsContainer,
  ButtonBottomContainer,
  LabelLayoutNames,
  BottomButton,
  PushContainer,
  LabelPushLayout
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"push-layout":{"pushLayoutEngine.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/push-layout/pushLayoutEngine.jsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 2);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 3);
let MediaService;
module.link("/imports/ui/components/media/service", {
  default(v) {
    MediaService = v;
  }
}, 4);
let LAYOUT_TYPE, ACTIONS;
module.link("../enums", {
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 5);
let isMobile;
module.link("../utils", {
  isMobile(v) {
    isMobile = v;
  }
}, 6);
let updateSettings;
module.link("/imports/ui/components/settings/service", {
  updateSettings(v) {
    updateSettings = v;
  }
}, 7);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 8);
const equalDouble = (n1, n2) => {
  const precision = 0.01;
  return Math.abs(n1 - n2) <= precision;
};
const propTypes = {
  cameraWidth: PropTypes.number,
  cameraHeight: PropTypes.number,
  cameraIsResizing: PropTypes.bool,
  cameraPosition: PropTypes.string,
  focusedCamera: PropTypes.string,
  horizontalPosition: PropTypes.bool,
  isMeetingLayoutResizing: PropTypes.bool,
  isPresenter: PropTypes.bool,
  isModerator: PropTypes.bool,
  layoutContextDispatch: PropTypes.func,
  meetingLayout: PropTypes.string,
  meetingLayoutCameraPosition: PropTypes.string,
  meetingLayoutFocusedCamera: PropTypes.string,
  meetingLayoutVideoRate: PropTypes.number,
  meetingPresentationIsOpen: PropTypes.bool,
  meetingLayoutUpdatedAt: PropTypes.number,
  presentationIsOpen: PropTypes.bool,
  presentationVideoRate: PropTypes.number,
  pushLayout: PropTypes.bool,
  pushLayoutMeeting: PropTypes.bool,
  selectedLayout: PropTypes.string,
  setMeetingLayout: PropTypes.func,
  setPushLayout: PropTypes.func,
  shouldShowScreenshare: PropTypes.bool,
  shouldShowExternalVideo: PropTypes.bool,
  enforceLayout: PropTypes.string,
  setLocalSettings: PropTypes.func.isRequired
};
class PushLayoutEngine extends React.Component {
  constructor(props) {
    super(props);
  }
  componentDidMount() {
    const {
      cameraWidth,
      cameraHeight,
      horizontalPosition,
      layoutContextDispatch,
      meetingLayout,
      meetingLayoutCameraPosition,
      meetingLayoutFocusedCamera,
      meetingLayoutVideoRate,
      meetingPresentationIsOpen,
      shouldShowScreenshare,
      shouldShowExternalVideo,
      enforceLayout,
      setLocalSettings,
      pushLayoutMeeting
    } = this.props;
    const Settings = getSettingsSingletonInstance();
    const changeLayout = LAYOUT_TYPE[getFromUserSettings('bbb_change_layout', null)];
    const defaultLayout = LAYOUT_TYPE[getFromUserSettings('bbb_default_layout', null)];
    const enforcedLayout = LAYOUT_TYPE[enforceLayout] || null;
    Settings.application.selectedLayout = enforcedLayout || changeLayout || defaultLayout || meetingLayout;
    let {
      selectedLayout
    } = Settings.application;
    if (isMobile()) {
      selectedLayout = selectedLayout === 'custom' ? 'smart' : selectedLayout;
      Settings.application.selectedLayout = selectedLayout;
    }
    Session.setItem('isGridEnabled', selectedLayout === LAYOUT_TYPE.VIDEO_FOCUS);
    Settings.save(setLocalSettings);
    const HIDE_PRESENTATION = window.meetingClientSettings.public.layout.hidePresentationOnJoin;
    const shouldOpenPresentation = shouldShowScreenshare || shouldShowExternalVideo;
    let presentationIsOpen = !getFromUserSettings('bbb_hide_presentation_on_join', HIDE_PRESENTATION);
    presentationIsOpen = pushLayoutMeeting ? meetingPresentationIsOpen : presentationIsOpen;
    presentationIsOpen = shouldOpenPresentation || presentationIsOpen;
    MediaService.setPresentationIsOpen(layoutContextDispatch, presentationIsOpen);
    Session.setItem('presentationLastState', presentationIsOpen);
    if (selectedLayout === 'custom') {
      setTimeout(() => {
        layoutContextDispatch({
          type: ACTIONS.SET_FOCUSED_CAMERA_ID,
          value: meetingLayoutFocusedCamera
        });
        layoutContextDispatch({
          type: ACTIONS.SET_CAMERA_DOCK_POSITION,
          value: meetingLayoutCameraPosition || 'contentTop'
        });
        if (!equalDouble(meetingLayoutVideoRate, 0)) {
          let w, h;
          if (horizontalPosition) {
            w = window.innerWidth * meetingLayoutVideoRate;
            h = cameraHeight;
          } else {
            w = cameraWidth;
            h = window.innerHeight * meetingLayoutVideoRate;
          }
          layoutContextDispatch({
            type: ACTIONS.SET_CAMERA_DOCK_SIZE,
            value: {
              width: w,
              height: h,
              browserWidth: window.innerWidth,
              browserHeight: window.innerHeight
            }
          });
        }
      }, 0);
    }
  }
  componentDidUpdate(prevProps) {
    const {
      cameraWidth,
      cameraHeight,
      cameraIsResizing,
      cameraPosition,
      focusedCamera,
      horizontalPosition,
      isMeetingLayoutResizing,
      isModerator,
      isPresenter,
      layoutContextDispatch,
      meetingLayout,
      meetingLayoutUpdatedAt,
      meetingPresentationIsOpen,
      meetingLayoutCameraPosition,
      meetingLayoutFocusedCamera,
      meetingLayoutVideoRate,
      presentationIsOpen,
      presentationVideoRate,
      pushLayout,
      pushLayoutMeeting,
      selectedLayout,
      setMeetingLayout,
      setPushLayout,
      enforceLayout,
      setLocalSettings
    } = this.props;
    const meetingLayoutDidChange = meetingLayout !== prevProps.meetingLayout;
    const pushLayoutMeetingDidChange = pushLayoutMeeting !== prevProps.pushLayoutMeeting;
    const enforceLayoutDidChange = enforceLayout !== prevProps.enforceLayout;
    const shouldSwitchLayout = isPresenter ? meetingLayoutDidChange || enforceLayoutDidChange : (meetingLayoutDidChange || pushLayoutMeetingDidChange) && pushLayoutMeeting || enforceLayoutDidChange;
    const Settings = getSettingsSingletonInstance();
    if (shouldSwitchLayout) {
      let contextLayout = enforceLayout || meetingLayout;
      if (isMobile()) {
        if (contextLayout === 'custom') {
          contextLayout = 'smart';
        }
      }
      layoutContextDispatch({
        type: ACTIONS.SET_LAYOUT_TYPE,
        value: contextLayout
      });
      updateSettings({
        application: _objectSpread(_objectSpread({}, Settings.application), {}, {
          selectedLayout: contextLayout
        })
      }, null, setLocalSettings);
    }
    if (!enforceLayout && pushLayoutMeetingDidChange) {
      updateSettings({
        application: _objectSpread(_objectSpread({}, Settings.application), {}, {
          pushLayout: pushLayoutMeeting
        })
      }, null, setLocalSettings);
    }
    if (meetingLayout === "custom" && selectedLayout === "custom" && !isPresenter) {
      if (meetingLayoutFocusedCamera !== prevProps.meetingLayoutFocusedCamera || meetingLayoutUpdatedAt !== prevProps.meetingLayoutUpdatedAt) {
        layoutContextDispatch({
          type: ACTIONS.SET_FOCUSED_CAMERA_ID,
          value: meetingLayoutFocusedCamera
        });
      }
      if (meetingLayoutCameraPosition !== prevProps.meetingLayoutCameraPosition || meetingLayoutUpdatedAt !== prevProps.meetingLayoutUpdatedAt) {
        layoutContextDispatch({
          type: ACTIONS.SET_CAMERA_DOCK_POSITION,
          value: meetingLayoutCameraPosition
        });
      }
      if (!equalDouble(meetingLayoutVideoRate, prevProps.meetingLayoutVideoRate) || meetingLayoutUpdatedAt !== prevProps.meetingLayoutUpdatedAt) {
        let w, h;
        if (horizontalPosition) {
          w = window.innerWidth * meetingLayoutVideoRate;
          h = cameraHeight;
        } else {
          w = cameraWidth;
          h = window.innerHeight * meetingLayoutVideoRate;
        }
        if (isMeetingLayoutResizing !== prevProps.isMeetingLayoutResizing) {
          layoutContextDispatch({
            type: ACTIONS.SET_CAMERA_DOCK_IS_RESIZING,
            value: isMeetingLayoutResizing
          });
        }
        layoutContextDispatch({
          type: ACTIONS.SET_CAMERA_DOCK_SIZE,
          value: {
            width: w,
            height: h,
            browserWidth: window.innerWidth,
            browserHeight: window.innerHeight
          }
        });
      }
      if (meetingPresentationIsOpen !== prevProps.meetingPresentationIsOpen || meetingLayoutUpdatedAt !== prevProps.meetingLayoutUpdatedAt) {
        layoutContextDispatch({
          type: ACTIONS.SET_PRESENTATION_IS_OPEN,
          value: meetingPresentationIsOpen
        });
      }
    }
    const layoutChanged = presentationIsOpen !== prevProps.presentationIsOpen || selectedLayout !== prevProps.selectedLayout || cameraIsResizing !== prevProps.cameraIsResizing || cameraPosition !== prevProps.cameraPosition || focusedCamera !== prevProps.focusedCamera || enforceLayout !== prevProps.enforceLayout || !equalDouble(presentationVideoRate, prevProps.presentationVideoRate);
    if (pushLayout !== prevProps.pushLayout) {
      // push layout once after presenter toggles / special case where we set pushLayout to false in all viewers
      if (isModerator) {
        setPushLayout(pushLayout);
      }
    }
    if (pushLayout && layoutChanged || pushLayout !== prevProps.pushLayout) {
      // change layout sizes / states
      if (isPresenter) {
        setMeetingLayout();
      }
    }
    if (selectedLayout !== prevProps.selectedLayout) {
      Session.setItem('isGridEnabled', selectedLayout === LAYOUT_TYPE.VIDEO_FOCUS);
    }
  }
  render() {
    return null;
  }
}
;
PushLayoutEngine.propTypes = propTypes;
module.exportDefault(PushLayoutEngine);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"context.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/context.jsx                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  LayoutContextProvider: () => LayoutContextProvider,
  layoutSelect: () => layoutSelect,
  layoutSelectInput: () => layoutSelectInput,
  layoutSelectOutput: () => layoutSelectOutput,
  layoutDispatch: () => layoutDispatch
});
let React, useEffect, useReducer, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useReducer(v) {
    useReducer = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let createContext, useContextSelector;
module.link("use-context-selector", {
  createContext(v) {
    createContext = v;
  },
  useContextSelector(v) {
    useContextSelector = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let equals;
module.link("ramda", {
  equals(v) {
    equals = v;
  }
}, 3);
let PINNED_PAD_SUBSCRIPTION;
module.link("/imports/ui/components/notes/queries", {
  PINNED_PAD_SUBSCRIPTION(v) {
    PINNED_PAD_SUBSCRIPTION = v;
  }
}, 4);
let ACTIONS, PRESENTATION_AREA, PANELS, LAYOUT_TYPE;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PRESENTATION_AREA(v) {
    PRESENTATION_AREA = v;
  },
  PANELS(v) {
    PANELS = v;
  },
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  }
}, 5);
let DEFAULT_VALUES;
module.link("/imports/ui/components/layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 6);
let INITIAL_INPUT_STATE, INITIAL_OUTPUT_STATE;
module.link("./initState", {
  INITIAL_INPUT_STATE(v) {
    INITIAL_INPUT_STATE = v;
  },
  INITIAL_OUTPUT_STATE(v) {
    INITIAL_OUTPUT_STATE = v;
  }
}, 7);
let useUpdatePresentationAreaContentForPlugin;
module.link("/imports/ui/components/plugins-engine/ui-data-hooks/layout/presentation-area/utils", {
  default(v) {
    useUpdatePresentationAreaContentForPlugin = v;
  }
}, 8);
let useIsPresentationEnabled;
module.link("/imports/ui/services/features", {
  useIsPresentationEnabled(v) {
    useIsPresentationEnabled = v;
  }
}, 9);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 10);
let usePrevious;
module.link("../whiteboard/utils", {
  usePrevious(v) {
    usePrevious = v;
  }
}, 11);
// variable to debug in console log
const debug = false;
const debugActions = (action, value) => {
  const baseStyles = ['color: #fff', 'background-color: #d64541', 'padding: 2px 4px', 'border-radius: 2px'].join(';');
  return debug && console.log("%c".concat(action), baseStyles, value);
};
const providerPropTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};
const LayoutContextSelector = createContext();
const initPresentationAreaContentActions = [{
  type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
  value: {
    content: PRESENTATION_AREA.WHITEBOARD_OPEN,
    open: true
  }
}];
const initState = {
  presentationAreaContentActions: initPresentationAreaContentActions,
  deviceType: null,
  isRTL: DEFAULT_VALUES.isRTL,
  layoutType: DEFAULT_VALUES.layoutType,
  fontSize: DEFAULT_VALUES.fontSize,
  idChatOpen: '',
  fullscreen: {
    element: '',
    group: ''
  },
  input: INITIAL_INPUT_STATE,
  output: INITIAL_OUTPUT_STATE
};
const reducer = (state, action) => {
  debugActions(action.type, action.value);
  switch (action.type) {
    case ACTIONS.SET_FOCUSED_CAMERA_ID:
      {
        const {
          cameraDock
        } = state.input;
        const {
          focusedId
        } = cameraDock;
        if (focusedId === action.value) return state;
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            cameraDock: _objectSpread(_objectSpread({}, cameraDock), {}, {
              focusedId: action.value
            })
          })
        });
      }
    case ACTIONS.SET_LAYOUT_INPUT:
      {
        if (state.input === action.value) return state;
        return _objectSpread(_objectSpread({}, state), {}, {
          input: action.value
        });
      }
    case ACTIONS.SET_AUTO_ARRANGE_LAYOUT:
      {
        const {
          autoarrAngeLayout
        } = state.input;
        if (autoarrAngeLayout === action.value) return state;
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            autoarrAngeLayout: action.value
          })
        });
      }
    case ACTIONS.SET_IS_RTL:
      {
        const {
          isRTL
        } = state;
        if (isRTL === action.value) return state;
        return _objectSpread(_objectSpread({}, state), {}, {
          isRTL: action.value
        });
      }

    // LAYOUT TYPE
    // using to load a different layout manager
    case ACTIONS.SET_LAYOUT_TYPE:
      {
        const {
          layoutType
        } = state.input;
        if (layoutType === action.value) return state;
        return _objectSpread(_objectSpread({}, state), {}, {
          layoutType: action.value
        });
      }

    // FONT SIZE
    case ACTIONS.SET_FONT_SIZE:
      {
        const {
          fontSize
        } = state;
        if (fontSize === action.value) return state;
        return _objectSpread(_objectSpread({}, state), {}, {
          fontSize: action.value
        });
      }

    // ID CHAT open in sidebar content panel
    case ACTIONS.SET_ID_CHAT_OPEN:
      {
        if (state.idChatOpen === action.value) return state;
        return _objectSpread(_objectSpread({}, state), {}, {
          idChatOpen: action.value
        });
      }

    // DEVICE
    case ACTIONS.SET_DEVICE_TYPE:
      {
        const {
          deviceType
        } = state;
        if (deviceType === action.value) return state;
        return _objectSpread(_objectSpread({}, state), {}, {
          deviceType: action.value
        });
      }

    // BROWSER
    case ACTIONS.SET_BROWSER_SIZE:
      {
        const {
          width,
          height
        } = action.value;
        const {
          browser
        } = state.input;
        if (browser.width === width && browser.height === height) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            browser: {
              width,
              height
            }
          })
        });
      }

    // BANNER BAR
    case ACTIONS.SET_HAS_BANNER_BAR:
      {
        const {
          bannerBar
        } = state.input;
        if (bannerBar.hasBanner === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            bannerBar: _objectSpread(_objectSpread({}, bannerBar), {}, {
              hasBanner: action.value
            })
          })
        });
      }

    // NOTIFICATIONS BAR
    case ACTIONS.SET_HAS_NOTIFICATIONS_BAR:
      {
        const {
          notificationsBar
        } = state.input;
        if (notificationsBar.hasNotification === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            notificationsBar: _objectSpread(_objectSpread({}, notificationsBar), {}, {
              hasNotification: action.value
            })
          })
        });
      }

    // NAV BAR

    case ACTIONS.SET_HAS_NAVBAR:
      {
        const {
          navBar
        } = state.input;
        if (navBar.hasNavBar === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            navBar: _objectSpread(_objectSpread({}, navBar), {}, {
              hasNavBar: action.value
            })
          })
        });
      }
    case ACTIONS.SET_NAVBAR_OUTPUT:
      {
        const {
          display,
          width,
          height,
          top,
          left,
          tabOrder,
          zIndex
        } = action.value;
        const {
          navBar
        } = state.output;
        if (navBar.display === display && navBar.width === width && navBar.height === height && navBar.top === top && navBar.left === left && navBar.zIndex === zIndex && navBar.tabOrder === tabOrder) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            navBar: _objectSpread(_objectSpread({}, navBar), {}, {
              display,
              width,
              height,
              top,
              left,
              tabOrder,
              zIndex
            })
          })
        });
      }

    // ACTION BAR
    case ACTIONS.SET_HAS_ACTIONBAR:
      {
        const {
          actionBar
        } = state.input;
        if (actionBar.hasActionBar === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            actionBar: _objectSpread(_objectSpread({}, actionBar), {}, {
              hasActionBar: action.value
            })
          })
        });
      }
    case ACTIONS.SET_ACTIONBAR_OUTPUT:
      {
        const {
          display,
          width,
          height,
          innerHeight,
          top,
          left,
          padding,
          tabOrder,
          zIndex
        } = action.value;
        const {
          actionBar
        } = state.output;
        if (actionBar.display === display && actionBar.width === width && actionBar.height === height && actionBar.innerHeight === innerHeight && actionBar.top === top && actionBar.left === left && actionBar.padding === padding && actionBar.zIndex === zIndex && actionBar.tabOrder === tabOrder) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            actionBar: _objectSpread(_objectSpread({}, actionBar), {}, {
              display,
              width,
              height,
              innerHeight,
              top,
              left,
              padding,
              tabOrder,
              zIndex
            })
          })
        });
      }

    // CAPTIONS
    case ACTIONS.SET_CAPTIONS_OUTPUT:
      {
        const {
          left,
          right,
          maxWidth
        } = action.value;
        const {
          captions
        } = state.output;
        if (captions.left === left && captions.right === right && captions.maxWidth === maxWidth) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            captions: _objectSpread(_objectSpread({}, captions), {}, {
              left,
              right,
              maxWidth
            })
          })
        });
      }

    // SIDEBAR NAVIGATION
    case ACTIONS.SET_SIDEBAR_NAVIGATION_IS_OPEN:
      {
        const {
          sidebarNavigation
        } = state.input;
        if (sidebarNavigation.isOpen === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            sidebarNavigation: _objectSpread(_objectSpread({}, sidebarNavigation), {}, {
              isOpen: action.value
            })
          })
        });
      }
    case ACTIONS.SET_SIDEBAR_NAVIGATION_PANEL:
      {
        const {
          sidebarNavigation
        } = state.input;
        if (sidebarNavigation.sidebarNavPanel === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            sidebarNavigation: _objectSpread(_objectSpread({}, sidebarNavigation), {}, {
              sidebarNavPanel: action.value
            })
          })
        });
      }
    case ACTIONS.SET_SIDEBAR_NAVIGATION_SIZE:
      {
        const {
          width,
          browserWidth
        } = action.value;
        const {
          sidebarNavigation
        } = state.input;
        if (sidebarNavigation.width === width && sidebarNavigation.browserWidth === browserWidth) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            sidebarNavigation: _objectSpread(_objectSpread({}, sidebarNavigation), {}, {
              width,
              browserWidth
            })
          })
        });
      }
    case ACTIONS.SET_SIDEBAR_NAVIGATION_OUTPUT:
      {
        const {
          display,
          minWidth,
          width,
          maxWidth,
          minHeight,
          height,
          maxHeight,
          top,
          left,
          right,
          tabOrder,
          isResizable,
          zIndex
        } = action.value;
        const {
          sidebarNavigation
        } = state.output;
        if (sidebarNavigation.display === display && sidebarNavigation.minWidth === minWidth && sidebarNavigation.maxWidth === maxWidth && sidebarNavigation.width === width && sidebarNavigation.minHeight === minHeight && sidebarNavigation.height === height && sidebarNavigation.maxHeight === maxHeight && sidebarNavigation.top === top && sidebarNavigation.left === left && sidebarNavigation.right === right && sidebarNavigation.tabOrder === tabOrder && sidebarNavigation.zIndex === zIndex && sidebarNavigation.isResizable === isResizable) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            sidebarNavigation: _objectSpread(_objectSpread({}, sidebarNavigation), {}, {
              display,
              minWidth,
              width,
              maxWidth,
              minHeight,
              height,
              maxHeight,
              top,
              left,
              right,
              tabOrder,
              isResizable,
              zIndex
            })
          })
        });
      }
    case ACTIONS.SET_SIDEBAR_NAVIGATION_RESIZABLE_EDGE:
      {
        const {
          top,
          right,
          bottom,
          left
        } = action.value;
        const {
          sidebarNavigation
        } = state.output;
        if (sidebarNavigation.resizableEdge.top === top && sidebarNavigation.resizableEdge.right === right && sidebarNavigation.resizableEdge.bottom === bottom && sidebarNavigation.resizableEdge.left === left) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            sidebarNavigation: _objectSpread(_objectSpread({}, sidebarNavigation), {}, {
              resizableEdge: {
                top,
                right,
                bottom,
                left
              }
            })
          })
        });
      }

    // SIDEBAR CONTENT
    case ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN:
      {
        const {
          sidebarContent,
          sidebarNavigation
        } = state.input;
        if (sidebarContent.isOpen === action.value) {
          return state;
        }
        // When opening content sidebar, the navigation sidebar should be opened as well
        if (action.value === true) sidebarNavigation.isOpen = true;
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            sidebarNavigation,
            sidebarContent: _objectSpread(_objectSpread({}, sidebarContent), {}, {
              isOpen: action.value
            })
          })
        });
      }
    case ACTIONS.SET_SIDEBAR_CONTENT_PANEL:
      {
        const {
          sidebarContent
        } = state.input;
        if (sidebarContent.sidebarContentPanel === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            sidebarContent: _objectSpread(_objectSpread({}, sidebarContent), {}, {
              sidebarContentPanel: action.value
            })
          })
        });
      }
    case ACTIONS.SET_SIDEBAR_CONTENT_SIZE:
      {
        const {
          width,
          browserWidth,
          height,
          browserHeight
        } = action.value;
        const {
          sidebarContent
        } = state.input;
        if (sidebarContent.width === width && sidebarContent.browserWidth === browserWidth && sidebarContent.height === height && sidebarContent.browserHeight === browserHeight) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            sidebarContent: _objectSpread(_objectSpread({}, sidebarContent), {}, {
              width,
              browserWidth,
              height,
              browserHeight
            })
          })
        });
      }
    case ACTIONS.SET_SIDEBAR_CONTENT_OUTPUT:
      {
        const {
          display,
          minWidth,
          width,
          maxWidth,
          minHeight,
          height,
          maxHeight,
          top,
          left,
          right,
          currentPanelType,
          tabOrder,
          isResizable,
          zIndex
        } = action.value;
        const {
          sidebarContent
        } = state.output;
        if (sidebarContent.display === display && sidebarContent.minWidth === minWidth && sidebarContent.width === width && sidebarContent.maxWidth === maxWidth && sidebarContent.minHeight === minHeight && sidebarContent.height === height && sidebarContent.maxHeight === maxHeight && sidebarContent.top === top && sidebarContent.left === left && sidebarContent.right === right && sidebarContent.tabOrder === tabOrder && sidebarContent.zIndex === zIndex && sidebarContent.isResizable === isResizable) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            sidebarContent: _objectSpread(_objectSpread({}, sidebarContent), {}, {
              display,
              minWidth,
              width,
              maxWidth,
              minHeight,
              height,
              maxHeight,
              top,
              left,
              right,
              currentPanelType,
              tabOrder,
              isResizable,
              zIndex
            })
          })
        });
      }
    case ACTIONS.SET_SIDEBAR_CONTENT_RESIZABLE_EDGE:
      {
        const {
          top,
          right,
          bottom,
          left
        } = action.value;
        const {
          sidebarContent
        } = state.output;
        if (sidebarContent.resizableEdge.top === top && sidebarContent.resizableEdge.right === right && sidebarContent.resizableEdge.bottom === bottom && sidebarContent.resizableEdge.left === left) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            sidebarContent: _objectSpread(_objectSpread({}, sidebarContent), {}, {
              resizableEdge: {
                top,
                right,
                bottom,
                left
              }
            })
          })
        });
      }

    // MEDIA
    case ACTIONS.SET_MEDIA_AREA_SIZE:
      {
        const {
          width,
          height
        } = action.value;
        const {
          mediaArea
        } = state.output;
        if (mediaArea.width === width && mediaArea.height === height) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            mediaArea: _objectSpread(_objectSpread({}, mediaArea), {}, {
              width,
              height
            })
          })
        });
      }

    // WEBCAMS
    case ACTIONS.SET_NUM_CAMERAS:
      {
        const {
          cameraDock
        } = state.input;
        if (cameraDock.numCameras === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            cameraDock: _objectSpread(_objectSpread({}, cameraDock), {}, {
              numCameras: action.value
            })
          })
        });
      }
    case ACTIONS.SET_CAMERA_DOCK_IS_DRAGGING:
      {
        const {
          cameraDock
        } = state.input;
        if (cameraDock.isDragging === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            cameraDock: _objectSpread(_objectSpread({}, cameraDock), {}, {
              isDragging: action.value
            })
          })
        });
      }
    case ACTIONS.SET_CAMERA_DOCK_IS_RESIZING:
      {
        const {
          cameraDock
        } = state.input;
        if (cameraDock.isResizing === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            cameraDock: _objectSpread(_objectSpread({}, cameraDock), {}, {
              isResizing: action.value
            })
          })
        });
      }
    case ACTIONS.SET_CAMERA_DOCK_POSITION:
      {
        const {
          cameraDock
        } = state.input;
        if (cameraDock.position === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            cameraDock: _objectSpread(_objectSpread({}, cameraDock), {}, {
              position: action.value
            })
          })
        });
      }
    case ACTIONS.SET_CAMERA_DOCK_SIZE:
      {
        const {
          width,
          height,
          browserWidth,
          browserHeight
        } = action.value;
        const {
          cameraDock
        } = state.input;
        if (cameraDock.width === width && cameraDock.height === height && cameraDock.browserWidth === browserWidth && cameraDock.browserHeight === browserHeight) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            cameraDock: _objectSpread(_objectSpread({}, cameraDock), {}, {
              width,
              height,
              browserWidth,
              browserHeight
            })
          })
        });
      }
    case ACTIONS.SET_CAMERA_DOCK_OPTIMAL_GRID_SIZE:
      {
        const {
          width,
          height
        } = action.value;
        const {
          cameraDock
        } = state.input;
        const {
          cameraOptimalGridSize
        } = cameraDock;
        if (cameraOptimalGridSize.width === width && cameraOptimalGridSize.height === height) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            cameraDock: _objectSpread(_objectSpread({}, cameraDock), {}, {
              cameraOptimalGridSize: {
                width,
                height
              }
            })
          })
        });
      }
    case ACTIONS.SET_CAMERA_DOCK_OUTPUT:
      {
        const {
          display,
          position,
          minWidth,
          width,
          maxWidth,
          presenterMaxWidth,
          minHeight,
          height,
          maxHeight,
          top,
          left,
          right,
          tabOrder,
          isDraggable,
          resizableEdge,
          zIndex,
          focusedId
        } = action.value;
        const {
          cameraDock
        } = state.output;
        if (cameraDock.display === display && cameraDock.position === position && cameraDock.width === width && cameraDock.maxWidth === maxWidth && cameraDock.presenterMaxWidth === presenterMaxWidth && cameraDock.height === height && cameraDock.maxHeight === maxHeight && cameraDock.top === top && cameraDock.left === left && cameraDock.right === right && cameraDock.tabOrder === tabOrder && cameraDock.isDraggable === isDraggable && cameraDock.zIndex === zIndex && cameraDock.resizableEdge === resizableEdge && cameraDock.focusedId === focusedId) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            cameraDock: _objectSpread(_objectSpread({}, cameraDock), {}, {
              display,
              position,
              minWidth,
              width,
              maxWidth,
              presenterMaxWidth,
              minHeight,
              height,
              maxHeight,
              top,
              left,
              right,
              tabOrder,
              isDraggable,
              resizableEdge,
              zIndex,
              focusedId
            })
          })
        });
      }
    case ACTIONS.SET_CAMERA_DOCK_IS_DRAGGABLE:
      {
        const {
          cameraDock
        } = state.output;
        if (cameraDock.isDraggable === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            cameraDock: _objectSpread(_objectSpread({}, cameraDock), {}, {
              isDraggable: action.value
            })
          })
        });
      }

    // WEBCAMS DROP AREAS
    case ACTIONS.SET_DROP_AREAS:
      {
        const {
          dropZoneAreas
        } = state.output;
        if (dropZoneAreas === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            dropZoneAreas: action.value
          })
        });
      }

    // PRESENTATION
    case ACTIONS.SET_PRESENTATION_IS_OPEN:
      {
        const {
          presentation
        } = state.input;
        if (presentation.isOpen === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            presentation: _objectSpread(_objectSpread({}, presentation), {}, {
              isOpen: action.value
            })
          })
        });
      }
    case ACTIONS.SET_PRESENTATION_SLIDES_LENGTH:
      {
        const {
          presentation
        } = state.input;
        if (presentation.slidesLength === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            presentation: _objectSpread(_objectSpread({}, presentation), {}, {
              slidesLength: action.value
            })
          })
        });
      }
    case ACTIONS.SET_PRESENTATION_NUM_CURRENT_SLIDE:
      {
        const {
          presentation
        } = state.input;
        if (presentation.currentSlide.num === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            presentation: _objectSpread(_objectSpread({}, presentation), {}, {
              currentSlide: _objectSpread(_objectSpread({}, presentation.currentSlide), {}, {
                num: action.value
              })
            })
          })
        });
      }
    case ACTIONS.SET_PRESENTATION_CURRENT_SLIDE_SIZE:
      {
        const {
          width,
          height
        } = action.value;
        const {
          presentation
        } = state.input;
        const {
          currentSlide
        } = presentation;
        if (currentSlide.size.width === width && currentSlide.size.height === height) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            presentation: _objectSpread(_objectSpread({}, presentation), {}, {
              currentSlide: _objectSpread(_objectSpread({}, currentSlide), {}, {
                size: {
                  width,
                  height
                }
              })
            })
          })
        });
      }
    case ACTIONS.SET_PRESENTATION_RESIZABLE_EDGE:
      {
        const {
          top,
          right,
          bottom,
          left
        } = action.value;
        const {
          presentation
        } = state.output;
        const {
          resizableEdge
        } = presentation;
        if (resizableEdge.top === top && resizableEdge.right === right && resizableEdge.bottom === bottom && resizableEdge.left === left) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            presentation: _objectSpread(_objectSpread({}, presentation), {}, {
              resizableEdge: {
                top,
                right,
                bottom,
                left
              }
            })
          })
        });
      }
    case ACTIONS.SET_PRESENTATION_SIZE:
      {
        const {
          width,
          height,
          browserWidth,
          browserHeight
        } = action.value;
        const {
          presentation
        } = state.input;
        if (presentation.width === width && presentation.height === height && presentation.browserWidth === browserWidth && presentation.browserHeight === browserHeight) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            presentation: _objectSpread(_objectSpread({}, presentation), {}, {
              width,
              height,
              browserWidth,
              browserHeight
            })
          })
        });
      }
    case ACTIONS.SET_PRESENTATION_OUTPUT:
      {
        const {
          display,
          minWidth,
          width,
          maxWidth,
          minHeight,
          height,
          maxHeight,
          top,
          left,
          right,
          tabOrder,
          isResizable,
          zIndex
        } = action.value;
        const {
          presentation
        } = state.output;
        if (presentation.display === display && presentation.minWidth === minWidth && presentation.width === width && presentation.maxWidth === maxWidth && presentation.minHeight === minHeight && presentation.height === height && presentation.maxHeight === maxHeight && presentation.top === top && presentation.left === left && presentation.right === right && presentation.tabOrder === tabOrder && presentation.zIndex === zIndex && presentation.isResizable === isResizable) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            presentation: _objectSpread(_objectSpread({}, presentation), {}, {
              display,
              minWidth,
              width,
              maxWidth,
              minHeight,
              height,
              maxHeight,
              top,
              left,
              right,
              tabOrder,
              isResizable,
              zIndex
            })
          })
        });
      }

    // FULLSCREEN
    case ACTIONS.SET_FULLSCREEN_ELEMENT:
      {
        const {
          fullscreen
        } = state;
        if (fullscreen.element === action.value.element && fullscreen.group === action.value.group) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          fullscreen: {
            element: action.value.element,
            group: action.value.group
          }
        });
      }

    // SCREEN SHARE
    case ACTIONS.SET_HAS_SCREEN_SHARE:
      {
        const {
          screenShare
        } = state.input;
        if (screenShare.hasScreenShare === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            screenShare: _objectSpread(_objectSpread({}, screenShare), {}, {
              hasScreenShare: action.value
            })
          })
        });
      }
    case ACTIONS.SET_SCREEN_SHARE_SIZE:
      {
        const {
          width,
          height,
          browserWidth,
          browserHeight
        } = action.value;
        const {
          screenShare
        } = state.input;
        if (screenShare.width === width && screenShare.height === height && screenShare.browserWidth === browserWidth && screenShare.browserHeight === browserHeight) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            screenShare: _objectSpread(_objectSpread({}, screenShare), {}, {
              width,
              height,
              browserWidth,
              browserHeight
            })
          })
        });
      }
    case ACTIONS.SET_SCREEN_SHARE_OUTPUT:
      {
        const {
          width,
          height,
          top,
          left,
          right,
          zIndex
        } = action.value;
        const {
          screenShare
        } = state.output;
        if (screenShare.width === width && screenShare.height === height && screenShare.top === top && screenShare.left === left && screenShare.right === right && screenShare.zIndex === zIndex) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            screenShare: _objectSpread(_objectSpread({}, screenShare), {}, {
              width,
              height,
              top,
              left,
              right,
              zIndex
            })
          })
        });
      }

    // EXTERNAL VIDEO
    case ACTIONS.SET_HAS_EXTERNAL_VIDEO:
      {
        const {
          externalVideo
        } = state.input;
        if (externalVideo.hasExternalVideo === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            externalVideo: _objectSpread(_objectSpread({}, externalVideo), {}, {
              hasExternalVideo: action.value
            })
          })
        });
      }
    case ACTIONS.SET_EXTERNAL_VIDEO_SIZE:
      {
        const {
          width,
          height,
          browserWidth,
          browserHeight
        } = action.value;
        const {
          externalVideo
        } = state.input;
        if (externalVideo.width === width && externalVideo.height === height && externalVideo.browserWidth === browserWidth && externalVideo.browserHeight === browserHeight) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            externalVideo: _objectSpread(_objectSpread({}, externalVideo), {}, {
              width,
              height,
              browserWidth,
              browserHeight
            })
          })
        });
      }
    case ACTIONS.SET_EXTERNAL_VIDEO_OUTPUT:
      {
        const {
          width,
          height,
          top,
          left,
          right
        } = action.value;
        const {
          externalVideo
        } = state.output;
        if (externalVideo.width === width && externalVideo.height === height && externalVideo.top === top && externalVideo.left === left && externalVideo.right === right) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            externalVideo: _objectSpread(_objectSpread({}, externalVideo), {}, {
              width,
              height,
              top,
              left,
              right
            })
          })
        });
      }

    // GENERIC COMPONENT
    case ACTIONS.SET_HAS_GENERIC_CONTENT:
      {
        const {
          genericMainContent
        } = state.input;
        if (genericMainContent.genericContentId === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            genericMainContent: _objectSpread(_objectSpread({}, genericMainContent), {}, {
              genericContentId: action.value
            })
          })
        });
      }
    case ACTIONS.SET_GENERIC_CONTENT_OUTPUT:
      {
        const {
          width,
          height,
          top,
          left,
          right
        } = action.value;
        const {
          genericMainContent
        } = state.output;
        if (genericMainContent.width === width && genericMainContent.height === height && genericMainContent.top === top && genericMainContent.left === left && genericMainContent.right === right) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            genericMainContent: _objectSpread(_objectSpread({}, genericMainContent), {}, {
              width,
              height,
              top,
              left,
              right
            })
          })
        });
      }

    // NOTES
    case ACTIONS.SET_SHARED_NOTES_OUTPUT:
      {
        const {
          width,
          height,
          top,
          left,
          right
        } = action.value;
        const {
          sharedNotes
        } = state.output;
        if (sharedNotes.width === width && sharedNotes.height === height && sharedNotes.top === top && sharedNotes.left === left && sharedNotes.right === right) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          output: _objectSpread(_objectSpread({}, state.output), {}, {
            sharedNotes: _objectSpread(_objectSpread({}, sharedNotes), {}, {
              width,
              height,
              top,
              left,
              right
            })
          })
        });
      }
    case ACTIONS.SET_NOTES_IS_PINNED:
      {
        const {
          sharedNotes
        } = state.input;
        if (sharedNotes.isPinned === action.value) {
          return state;
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          input: _objectSpread(_objectSpread({}, state.input), {}, {
            sharedNotes: _objectSpread(_objectSpread({}, sharedNotes), {}, {
              isPinned: action.value
            })
          })
        });
      }
    case ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA:
      {
        const {
          presentationAreaContentActions
        } = state;
        if (action.value.open) {
          presentationAreaContentActions.push(action);
        } else {
          let indexesOfOpenedContent = presentationAreaContentActions.reduce((indexes, p, index) => {
            if (action.value.content === PRESENTATION_AREA.GENERIC_CONTENT) {
              if (p.value.content === action.value.content && p.value.open && p.value.genericContentId === action.value.genericContentId) {
                indexes.push(index);
              }
            } else if (p.value.content === action.value.content && p.value.open) {
              indexes.push(index);
            }
            return indexes;
          }, []);
          indexesOfOpenedContent = indexesOfOpenedContent.length > 0 ? indexesOfOpenedContent : -1;
          if (indexesOfOpenedContent !== -1) {
            indexesOfOpenedContent.reverse().forEach(index => {
              presentationAreaContentActions.splice(index, 1);
            });
          }
        }
        return _objectSpread(_objectSpread({}, state), {}, {
          presentationAreaContentActions
        });
      }
    default:
      {
        throw new Error('Unexpected action');
      }
  }
};
const updatePresentationAreaContent = (layoutContextState, previousLayoutType, previousPresentationAreaContentActions, layoutContextDispatch, isPresentationEnabled) => {
  const {
    layoutType
  } = layoutContextState;
  const {
    sidebarContent
  } = layoutContextState.input;
  const {
    presentationAreaContentActions: currentPresentationAreaContentActions
  } = layoutContextState;
  if (!equals(currentPresentationAreaContentActions, previousPresentationAreaContentActions.current) || layoutType !== previousLayoutType) {
    const CHAT_CONFIG = window.meetingClientSettings.public.chat;
    const PUBLIC_CHAT_ID = CHAT_CONFIG.public_id;

    // eslint-disable-next-line no-param-reassign
    previousPresentationAreaContentActions.current = currentPresentationAreaContentActions.slice(0);
    const lastIndex = currentPresentationAreaContentActions.length - 1;
    const lastPresentationContentInPile = currentPresentationAreaContentActions[lastIndex];
    switch (lastPresentationContentInPile.value.content) {
      case PRESENTATION_AREA.GENERIC_CONTENT:
        {
          layoutContextDispatch({
            type: ACTIONS.SET_NOTES_IS_PINNED,
            value: !lastPresentationContentInPile.value.open
          });
          layoutContextDispatch({
            type: ACTIONS.SET_HAS_GENERIC_CONTENT,
            value: lastPresentationContentInPile.value.genericContentId
          });
          break;
        }
      case PRESENTATION_AREA.PINNED_NOTES:
        {
          if ((sidebarContent.isOpen || !isPresentationEnabled) && (sidebarContent.sidebarContentPanel === PANELS.SHARED_NOTES || !isPresentationEnabled)) {
            if (layoutType === LAYOUT_TYPE.VIDEO_FOCUS) {
              layoutContextDispatch({
                type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
                value: PANELS.CHAT
              });
              layoutContextDispatch({
                type: ACTIONS.SET_ID_CHAT_OPEN,
                value: PUBLIC_CHAT_ID
              });
            } else {
              layoutContextDispatch({
                type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
                value: false
              });
              layoutContextDispatch({
                type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
                value: PANELS.NONE
              });
            }
          }
          layoutContextDispatch({
            type: ACTIONS.SET_HAS_GENERIC_CONTENT,
            value: undefined
          });
          layoutContextDispatch({
            type: ACTIONS.SET_NOTES_IS_PINNED,
            value: lastPresentationContentInPile.value.open
          });
          break;
        }
      case PRESENTATION_AREA.EXTERNAL_VIDEO:
        {
          layoutContextDispatch({
            type: ACTIONS.SET_HAS_GENERIC_CONTENT,
            value: undefined
          });
          layoutContextDispatch({
            type: ACTIONS.SET_NOTES_IS_PINNED,
            value: !lastPresentationContentInPile.value.open
          });
          layoutContextDispatch({
            type: ACTIONS.SET_HAS_EXTERNAL_VIDEO,
            value: lastPresentationContentInPile.value.open
          });
          break;
        }
      case PRESENTATION_AREA.SCREEN_SHARE:
        {
          layoutContextDispatch({
            type: ACTIONS.SET_HAS_GENERIC_CONTENT,
            value: undefined
          });
          layoutContextDispatch({
            type: ACTIONS.SET_NOTES_IS_PINNED,
            value: !lastPresentationContentInPile.value.open
          });
          layoutContextDispatch({
            type: ACTIONS.SET_HAS_SCREEN_SHARE,
            value: lastPresentationContentInPile.value.open
          });
          break;
        }
      case PRESENTATION_AREA.WHITEBOARD_OPEN:
        {
          layoutContextDispatch({
            type: ACTIONS.SET_HAS_SCREEN_SHARE,
            value: !lastPresentationContentInPile.value.open
          });
          layoutContextDispatch({
            type: ACTIONS.SET_HAS_EXTERNAL_VIDEO,
            value: !lastPresentationContentInPile.value.open
          });
          layoutContextDispatch({
            type: ACTIONS.SET_HAS_GENERIC_CONTENT,
            value: undefined
          });
          layoutContextDispatch({
            type: ACTIONS.PINNED_NOTES,
            value: !lastPresentationContentInPile.value.open
          });
          break;
        }
      default:
        break;
    }
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_IS_OPEN,
      value: true
    });
  }
};
const LayoutContextProvider = props => {
  const previousPresentationAreaContentActions = useRef([{
    type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
    value: {
      content: PRESENTATION_AREA.WHITEBOARD_OPEN,
      open: true
    }
  }]);
  const {
    data: pinnedPadData
  } = useDeduplicatedSubscription(PINNED_PAD_SUBSCRIPTION);
  const [layoutContextState, layoutContextDispatch] = useReducer(reducer, initState);
  const isPresentationEnabled = useIsPresentationEnabled();
  const {
    children
  } = props;
  const {
    layoutType
  } = layoutContextState;
  const previousLayoutType = usePrevious(layoutType);
  useEffect(() => {
    updatePresentationAreaContent(layoutContextState, previousLayoutType, previousPresentationAreaContentActions, layoutContextDispatch, isPresentationEnabled);
  }, [layoutContextState, isPresentationEnabled]);
  useEffect(() => {
    var _pinnedPadData$shared;
    const isSharedNotesPinned = !!pinnedPadData && ((_pinnedPadData$shared = pinnedPadData.sharedNotes[0]) === null || _pinnedPadData$shared === void 0 ? void 0 : _pinnedPadData$shared.pinned);
    if (isSharedNotesPinned) {
      layoutContextDispatch({
        type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
        value: {
          content: PRESENTATION_AREA.PINNED_NOTES,
          open: true
        }
      });
    } else {
      layoutContextDispatch({
        type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
        value: {
          content: PRESENTATION_AREA.PINNED_NOTES,
          open: false
        }
      });
    }
  }, [pinnedPadData]);
  useUpdatePresentationAreaContentForPlugin(layoutContextState);
  return /*#__PURE__*/React.createElement(LayoutContextSelector.Provider, {
    value: [layoutContextState, layoutContextDispatch]
  }, children);
};
LayoutContextProvider.propTypes = providerPropTypes;
const layoutSelect = selector => useContextSelector(LayoutContextSelector, layout => selector(layout[0]));
const layoutSelectInput = selector => useContextSelector(LayoutContextSelector, layout => selector(layout[0].input));
const layoutSelectOutput = selector => useContextSelector(LayoutContextSelector, layout => selector(layout[0].output));
const layoutDispatch = () => useContextSelector(LayoutContextSelector, layout => layout[1]);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"defaultValues.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/defaultValues.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  LAYOUT_TYPE: () => LAYOUT_TYPE,
  CAMERADOCK_POSITION: () => CAMERADOCK_POSITION
});
let LAYOUT_TYPE, CAMERADOCK_POSITION, PANELS;
module.link("./enums", {
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  },
  CAMERADOCK_POSITION(v) {
    CAMERADOCK_POSITION = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 0);
const DEFAULT_VALUES = {
  layoutType: LAYOUT_TYPE.CUSTOM_LAYOUT,
  panelType: 'chat',
  fontSize: 16,
  cameraPosition: CAMERADOCK_POSITION.CONTENT_TOP,
  cameraDockTabOrder: 4,
  cameraDockMinHeight: 120,
  cameraDockMinWidth: 120,
  camerasMargin: 10,
  captionsMargin: 10,
  presentationTabOrder: 5,
  presentationMinHeight: 220,
  presentationToolbarMinWidth: 430,
  bannerHeight: 34,
  navBarHeight: 85,
  navBarTop: 0,
  navBarTabOrder: 3,
  actionBarHeight: 42,
  actionBarPadding: 11.2,
  actionBarTabOrder: 6,
  sidebarNavMaxWidth: 240,
  sidebarNavMinWidth: 70,
  sidebarNavHeight: '100%',
  sidebarNavTop: 0,
  sidebarNavLeft: 0,
  sidebarNavTabOrder: 1,
  sidebarNavPanel: PANELS.USERLIST,
  sidebarContentMaxWidth: 800,
  sidebarContentMinWidth: 70,
  sidebarContentMinHeight: 200,
  sidebarContentHeight: '100%',
  sidebarContentTop: 0,
  sidebarContentTabOrder: 2,
  sidebarContentPanel: PANELS.NONE
};
module.exportDefault(DEFAULT_VALUES);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"enums.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/enums.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  LAYOUT_TYPE: () => LAYOUT_TYPE,
  DEVICE_TYPE: () => DEVICE_TYPE,
  SMALL_VIEWPORT_BREAKPOINT: () => SMALL_VIEWPORT_BREAKPOINT,
  CAMERADOCK_POSITION: () => CAMERADOCK_POSITION,
  HIDDEN_LAYOUTS: () => HIDDEN_LAYOUTS,
  ACTIONS: () => ACTIONS,
  PRESENTATION_AREA: () => PRESENTATION_AREA,
  PANELS: () => PANELS
});
const LAYOUT_TYPE = {
  CUSTOM_LAYOUT: 'custom',
  SMART_LAYOUT: 'smart',
  PRESENTATION_FOCUS: 'presentationFocus',
  VIDEO_FOCUS: 'videoFocus',
  CAMERAS_ONLY: 'camerasOnly',
  PRESENTATION_ONLY: 'presentationOnly',
  PARTICIPANTS_AND_CHAT_ONLY: 'participantsAndChatOnly'
};
const DEVICE_TYPE = {
  MOBILE: 'mobile',
  TABLET_PORTRAIT: 'tablet_portrait',
  TABLET_LANDSCAPE: 'tablet_landscape',
  TABLET: 'tablet',
  DESKTOP: 'desktop'
};
const SMALL_VIEWPORT_BREAKPOINT = 640;
const CAMERADOCK_POSITION = {
  CONTENT_TOP: 'contentTop',
  CONTENT_RIGHT: 'contentRight',
  CONTENT_BOTTOM: 'contentBottom',
  CONTENT_LEFT: 'contentLeft',
  SIDEBAR_CONTENT_BOTTOM: 'sidebarContentBottom'
};
const HIDDEN_LAYOUTS = [LAYOUT_TYPE.CAMERAS_ONLY, LAYOUT_TYPE.PRESENTATION_ONLY, LAYOUT_TYPE.PARTICIPANTS_AND_CHAT_ONLY];
const ACTIONS = {
  SET_AUTO_ARRANGE_LAYOUT: 'setAutoArrangeLayout',
  SET_IS_RTL: 'setIsRTL',
  SET_LAYOUT_TYPE: 'setLayoutType',
  SET_DEVICE_TYPE: 'setDeviceType',
  SET_FONT_SIZE: 'setFontSize',
  SET_FOCUSED_CAMERA_ID: 'focusedId',
  SET_LAYOUT_INPUT: 'setLayoutInput',
  SET_SIDEBAR_NAVIGATION_PANEL: 'setSidebarNavigationPanel',
  SET_SIDEBAR_CONTENT_PANEL: 'setSidebarcontentPanel',
  SET_ID_CHAT_OPEN: 'setIdChatOpen',
  SET_BROWSER_SIZE: 'setBrowserSize',
  SET_HAS_BANNER_BAR: 'setHasBannerBar',
  SET_HAS_NOTIFICATIONS_BAR: 'setHasNotificationsBar',
  SET_HAS_NAVBAR: 'setHasNavBar',
  SET_NAVBAR_OUTPUT: 'setNavBarOutput',
  SET_HAS_ACTIONBAR: 'setHasActionBar',
  SET_ACTIONBAR_OUTPUT: 'setActionBarOutput',
  SET_SIDEBAR_NAVIGATION_IS_OPEN: 'setSidebarNavigationIsOpen',
  SET_SIDEBAR_NAVIGATION_SIZE: 'setSidebarNavigationSize',
  SET_SIDEBAR_NAVIGATION_OUTPUT: 'setSidebarNavigationOutput',
  SET_SIDEBAR_NAVIGATION_IS_RESIZABLE: 'setSidebarNavigationIsResizable',
  SET_SIDEBAR_NAVIGATION_RESIZABLE_EDGE: 'setSidebarNavigationResizableEdge',
  SET_SIDEBAR_CONTENT_IS_OPEN: 'setSidebarContentIsOpen',
  SET_SIDEBAR_CONTENT_SIZE: 'setSidebarContentSize',
  SET_SIDEBAR_CONTENT_PANEL_TYPE: 'setSidebarContentPanelType',
  SET_SIDEBAR_CONTENT_OUTPUT: 'setSidebarContentOutput',
  SET_SIDEBAR_CONTENT_IS_RESIZABLE: 'setSidebarContentIsResizable',
  SET_SIDEBAR_CONTENT_RESIZABLE_EDGE: 'setSidebarContentResizableEdge',
  SET_MEDIA_AREA_SIZE: 'setMediaAreaSize',
  SET_NUM_CAMERAS: 'setNumCameras',
  SET_CAMERA_DOCK_IS_DRAGGING: 'setCameraDockIsDragging',
  SET_CAMERA_DOCK_IS_RESIZING: 'setCameraDockIsResizing',
  SET_CAMERA_DOCK_POSITION: 'setCameraDockPosition',
  SET_CAMERA_DOCK_SIZE: 'setCameraDockSize',
  SET_CAMERA_DOCK_OPTIMAL_GRID_SIZE: 'setCameraDockOptimalGridSize',
  SET_CAMERA_DOCK_OUTPUT: 'setCameraDockOutput',
  SET_CAMERA_DOCK_IS_DRAGGABLE: 'setCameraDockIsDraggable',
  SET_CAMERA_DOCK_IS_RESIZABLE: 'setCameraDockIsResizable',
  SET_CAMERA_DOCK_RESIZABLE_EDGE: 'setCameraDockResizableEdge',
  SET_DROP_AREAS: 'setDropAreas',
  SET_PRESENTATION_IS_OPEN: 'setPresentationIsOpen',
  SET_PRESENTATION_CURRENT_SLIDE_SIZE: 'setPresentationCurrentSlideSize',
  SET_PRESENTATION_NUM_CURRENT_SLIDE: 'setPresentationNumCurrentSlide',
  SET_PRESENTATION_SLIDES_LENGTH: 'setPresentationSlidesLength',
  SET_PRESENTATION_SIZE: 'setPresentationSize',
  SET_PRESENTATION_OUTPUT: 'setPresentationOutput',
  SET_PRESENTATION_IS_RESIZABLE: 'setPresentationIsResizable',
  SET_PRESENTATION_RESIZABLE_EDGE: 'setPresentationResizableEdge',
  SET_FULLSCREEN_ELEMENT: 'setFullscreenElement',
  SET_HAS_SCREEN_SHARE: 'setHasScreenShare',
  SET_SCREEN_SHARE_SIZE: 'setScreenShareSize',
  SET_SCREEN_SHARE_OUTPUT: 'setScreenShareOutput',
  SET_HAS_EXTERNAL_VIDEO: 'setHasExternalVideo',
  SET_EXTERNAL_VIDEO_SIZE: 'setExternalVideoSize',
  SET_EXTERNAL_VIDEO_OUTPUT: 'setExternalVideoOutput',
  SET_HAS_GENERIC_CONTENT: 'setHasGenericContent',
  SET_GENERIC_CONTENT_OUTPUT: 'setGenericContentOutput',
  SET_SHARED_NOTES_OUTPUT: 'setSharedNotesOutput',
  SET_NOTES_IS_PINNED: 'setNotesIsPinned',
  SET_PILE_CONTENT_FOR_PRESENTATION_AREA: 'setPileContentForPresentationArea'
};
const PRESENTATION_AREA = {
  GENERIC_CONTENT: 'genericContent',
  PINNED_NOTES: 'pinnedNotes',
  EXTERNAL_VIDEO: 'externalVideo',
  SCREEN_SHARE: 'screenShare',
  WHITEBOARD_OPEN: 'whiteboardOpen'
};
const PANELS = {
  USERLIST: 'userlist',
  CHAT: 'chat',
  POLL: 'poll',
  CAPTIONS: 'captions',
  BREAKOUT: 'breakoutroom',
  SHARED_NOTES: 'shared-notes',
  TIMER: 'timer',
  WAITING_USERS: 'waiting-users',
  GENERIC_CONTENT_SIDEKICK: 'generic-content-sidekick',
  NONE: 'none'
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"initState.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/initState.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  INITIAL_INPUT_STATE: () => INITIAL_INPUT_STATE,
  INITIAL_OUTPUT_STATE: () => INITIAL_OUTPUT_STATE
});
let DEFAULT_VALUES;
module.link("/imports/ui/components/layout/defaultValues", {
  default(v) {
    DEFAULT_VALUES = v;
  }
}, 0);
const INITIAL_INPUT_STATE = {
  autoarrAngeLayout: true,
  userMetadata: {},
  browser: {
    width: window.document.documentElement.clientWidth,
    height: window.document.documentElement.clientHeight
  },
  bannerBar: {
    hasBanner: false
  },
  notificationsBar: {
    hasNotification: false
  },
  navBar: {
    hasNavBar: true,
    height: DEFAULT_VALUES.navBarHeight
  },
  actionBar: {
    hasActionBar: true,
    height: DEFAULT_VALUES.actionBarHeight
  },
  sidebarNavigation: {
    isOpen: true,
    width: 0,
    height: 0,
    browserWidth: 0,
    sidebarNavPanel: DEFAULT_VALUES.sidebarNavPanel
  },
  sidebarContent: {
    isOpen: true,
    currentPanelType: DEFAULT_VALUES.panelType,
    width: 0,
    height: 0,
    browserWidth: 0,
    sidebarContentPanel: DEFAULT_VALUES.sidebarContentPanel,
    resizableEdge: {
      top: false,
      right: false,
      bottom: false,
      left: false
    }
  },
  sidebarContentHorizontalResizer: {
    isOpen: true,
    currentPanelType: DEFAULT_VALUES.panelType,
    width: 0,
    height: 0,
    browserWidth: 0
  },
  cameraDock: {
    numCameras: 0,
    position: DEFAULT_VALUES.cameraPosition,
    width: 0,
    height: 0,
    browserWidth: 0,
    browserHeight: 0,
    isDragging: false,
    isResizing: false,
    cameraOptimalGridSize: {
      width: 0,
      height: 0
    },
    focusedId: 'none'
  },
  presentation: {
    isOpen: true,
    slidesLength: 0,
    currentSlide: {
      num: 0,
      size: {
        width: 0,
        height: 0
      }
    },
    width: 0,
    height: 0,
    browserWidth: 0,
    browserHeight: 0
  },
  screenShare: {
    hasScreenShare: false,
    width: 0,
    height: 0,
    browserWidth: 0,
    browserHeight: 0
  },
  externalVideo: {
    hasExternalVideo: false,
    width: 0,
    height: 0,
    browserWidth: 0,
    browserHeight: 0
  },
  genericMainContent: {
    genericContentId: undefined,
    width: 0,
    height: 0,
    browserWidth: 0,
    browserHeight: 0
  },
  sharedNotes: {
    isPinned: false,
    width: 0,
    height: 0,
    browserWidth: 0,
    browserHeight: 0
  }
};
const INITIAL_OUTPUT_STATE = {
  navBar: {
    display: false,
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    tabOrder: 0,
    zIndex: 1
  },
  actionBar: {
    display: false,
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    tabOrder: 0,
    zIndex: 1
  },
  captions: {
    left: 0,
    right: 0
  },
  sidebarNavigation: {
    display: true,
    minWidth: 0,
    width: 0,
    maxWidth: 0,
    minHeight: 0,
    height: 0,
    maxHeight: 0,
    top: 0,
    left: 0,
    tabOrder: 0,
    isResizable: false,
    resizableEdge: {
      top: false,
      right: false,
      bottom: false,
      left: false
    },
    zIndex: 1
  },
  sidebarContent: {
    display: true,
    minWidth: 0,
    width: 0,
    maxWidth: 0,
    minHeight: 0,
    height: 0,
    maxHeight: 0,
    top: 0,
    left: 0,
    currentPanelType: '',
    tabOrder: 0,
    isResizable: false,
    resizableEdge: {
      top: false,
      right: false,
      bottom: false,
      left: false
    },
    zIndex: 1
  },
  mediaArea: {
    width: 0,
    height: 0
  },
  cameraDock: {
    display: false,
    position: null,
    minWidth: 0,
    width: 0,
    maxWidth: 0,
    minHeight: 0,
    height: 0,
    maxHeight: 0,
    top: 0,
    left: 0,
    tabOrder: 0,
    isDraggable: false,
    isResizable: false,
    resizableEdge: {
      top: false,
      right: false,
      bottom: false,
      left: false
    },
    zIndex: 1,
    focusedId: 'none'
  },
  dropZoneAreas: {},
  presentation: {
    display: true,
    minWidth: 0,
    width: 0,
    maxWidth: 0,
    minHeight: 0,
    height: 0,
    maxHeight: 0,
    top: 0,
    left: 0,
    tabOrder: 0,
    isResizable: false,
    resizableEdge: {
      top: false,
      right: false,
      bottom: false,
      left: false
    },
    presentationOrientation: 'horizontal',
    zIndex: 1
  },
  screenShare: {
    display: false,
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    zIndex: 1
  },
  externalVideo: {
    display: false,
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    tabOrder: 0,
    zIndex: 1
  },
  genericMainContent: {
    display: false,
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    tabOrder: 0,
    zIndex: 1
  },
  sharedNotes: {
    display: false,
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    tabOrder: 0,
    zIndex: 1
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/layout/utils.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  isMobile: () => isMobile,
  isTablet: () => isTablet,
  isTabletPortrait: () => isTabletPortrait,
  isTabletLandscape: () => isTabletLandscape,
  isDesktop: () => isDesktop,
  suportedLayouts: () => suportedLayouts
});
let DEVICE_TYPE, LAYOUT_TYPE;
module.link("./enums", {
  DEVICE_TYPE(v) {
    DEVICE_TYPE = v;
  },
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  }
}, 0);
const phoneUpperBoundary = 600;
const tabletPortraitUpperBoundary = 900;
const tabletLandscapeUpperBoundary = 1200;
const windowSize = () => window.document.documentElement.clientWidth;
const isMobile = () => windowSize() <= phoneUpperBoundary - 1;
const isTabletPortrait = () => windowSize() >= phoneUpperBoundary && windowSize() <= tabletPortraitUpperBoundary - 1;
const isTabletLandscape = () => windowSize() >= tabletPortraitUpperBoundary && windowSize() <= tabletLandscapeUpperBoundary - 1;
const isTablet = () => windowSize() >= phoneUpperBoundary && windowSize() <= tabletLandscapeUpperBoundary - 1;
const isDesktop = () => windowSize() >= tabletLandscapeUpperBoundary;
const device = {
  isMobile,
  isTablet,
  isTabletPortrait,
  isTabletLandscape,
  isDesktop
};
module.exportDefault(device);
// Array for select component to select different layout
const suportedLayouts = [{
  layoutKey: LAYOUT_TYPE.SMART_LAYOUT,
  layoutName: 'Smart Layout',
  suportedDevices: [DEVICE_TYPE.MOBILE, DEVICE_TYPE.TABLET, DEVICE_TYPE.TABLET_PORTRAIT, DEVICE_TYPE.TABLET_LANDSCAPE, DEVICE_TYPE.DESKTOP]
}, {
  layoutKey: LAYOUT_TYPE.VIDEO_FOCUS,
  layoutName: 'Video Focus',
  suportedDevices: [DEVICE_TYPE.MOBILE, DEVICE_TYPE.TABLET, DEVICE_TYPE.TABLET_PORTRAIT, DEVICE_TYPE.TABLET_LANDSCAPE, DEVICE_TYPE.DESKTOP]
}, {
  layoutKey: LAYOUT_TYPE.PRESENTATION_FOCUS,
  layoutName: 'Presentation Focus',
  suportedDevices: [DEVICE_TYPE.MOBILE, DEVICE_TYPE.TABLET, DEVICE_TYPE.TABLET_PORTRAIT, DEVICE_TYPE.TABLET_LANDSCAPE, DEVICE_TYPE.DESKTOP]
}, {
  layoutKey: LAYOUT_TYPE.CUSTOM_LAYOUT,
  layoutName: 'Custom Layout',
  suportedDevices: [DEVICE_TYPE.DESKTOP]
}];
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"lock-viewers":{"context":{"consumer.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/lock-viewers/context/consumer.jsx                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let lockContext;
module.link("./context", {
  default(v) {
    lockContext = v;
  }
}, 1);
const contextConsumer = Component => props => /*#__PURE__*/React.createElement(lockContext.Consumer, null, contexts => /*#__PURE__*/React.createElement(Component, _extends({}, props, contexts)));
module.exportDefault(contextConsumer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/lock-viewers/context/container.jsx                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, useMemo;
module.link("react", {
  default(v) {
    React = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let LockStruct;
module.link("./context", {
  LockStruct(v) {
    LockStruct = v;
  }
}, 1);
let withLockContext;
module.link("./withContext", {
  withLockContext(v) {
    withLockContext = v;
  }
}, 2);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 3);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 4);
const lockContextContainer = component => props => {
  const lockSetting = new LockStruct();
  const {
    data: meeting
  } = useMeeting(m => ({
    lockSettings: m.lockSettings
  }));
  const {
    data: user
  } = useCurrentUser(u => ({
    role: u.role,
    locked: u.locked
  }));
  const ROLE_MODERATOR = window.meetingClientSettings.public.user.role_moderator;
  const userIsLocked = user ? user.locked && user.role !== ROLE_MODERATOR : true;
  const {
    lockSettings
  } = meeting || {};
  lockSetting.isLocked = userIsLocked;
  lockSetting.lockSettings = lockSettings;
  lockSetting.userLocks.userWebcam = userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.disableCam) || false;
  lockSetting.userLocks.userMic = userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.disableMic) || false;
  lockSetting.userLocks.userNotes = userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.disableNotes) || false;
  lockSetting.userLocks.userPrivateChat = userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.disablePrivateChat) || false;
  lockSetting.userLocks.userPublicChat = userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.disablePublicChat) || false;
  lockSetting.userLocks.hideViewersCursor = userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.hideViewersCursor) || false;
  lockSetting.userLocks.hideViewersAnnotation = userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.hideViewersAnnotation) || false;
  const ComponentWithContext = useMemo(() => withLockContext(component), []);
  // eslint-disable-next-line react/prop-types
  const {
    children
  } = props;
  return /*#__PURE__*/React.createElement(ComponentWithContext, _extends({}, props, lockSetting), children);
};
module.exportDefault(lockContextContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"context.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/lock-viewers/context/context.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  LockStruct: () => LockStruct
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
function LockStruct() {
  return {
    isLocked: false,
    lockSettings: {
      disableCam: false,
      disableMic: false,
      disableNotes: false,
      disablePrivateChat: false,
      disablePublicChat: false,
      lockOnJoin: true,
      lockOnJoinConfigurable: false,
      hideViewersCursor: false,
      hideViewersAnnotation: false
    },
    userLocks: {
      userWebcam: false,
      userMic: false,
      userNotes: false,
      userPrivateChat: false,
      userPublicChat: false,
      hideViewersCursor: false,
      hideViewersAnnotation: false
    }
  };
}
const lockContext = /*#__PURE__*/React.createContext(new LockStruct());
module.exportDefault(lockContext);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"provider.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/lock-viewers/context/provider.jsx                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let lockContext;
module.link("./context", {
  default(v) {
    lockContext = v;
  }
}, 1);
const contextProvider = props => /*#__PURE__*/React.createElement(lockContext.Provider, {
  value: props
}, props.children);
module.exportDefault(contextProvider);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"withContext.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/lock-viewers/context/withContext.jsx                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  withProvider: () => withProvider,
  withConsumer: () => withConsumer,
  withLockContext: () => withLockContext
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let LockProvider;
module.link("./provider", {
  default(v) {
    LockProvider = v;
  }
}, 1);
let LockConsumer;
module.link("./consumer", {
  default(v) {
    LockConsumer = v;
  }
}, 2);
const withProvider = Component => props => /*#__PURE__*/React.createElement(LockProvider, props, /*#__PURE__*/React.createElement(Component, null));
const withConsumer = Component => LockConsumer(Component);
const withLockContext = Component => withProvider(withConsumer(Component));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"hooks":{"useLockContext.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/lock-viewers/hooks/useLockContext.ts                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 0);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 1);
let LockStruct;
module.link("../context/context", {
  LockStruct(v) {
    LockStruct = v;
  }
}, 2);
const useLockContext = () => {
  const lockSetting = LockStruct();
  const {
    data: meeting
  } = useMeeting(m => ({
    lockSettings: m.lockSettings
  }));
  const {
    data: user
  } = useCurrentUser(u => ({
    role: u.role,
    locked: u.locked
  }));
  const ROLE_MODERATOR = window.meetingClientSettings.public.user.role_moderator;
  const userIsLocked = Boolean(user ? user.locked && user.role !== ROLE_MODERATOR : true);
  const {
    lockSettings
  } = meeting || {};
  lockSetting.isLocked = userIsLocked;
  lockSetting.lockSettings = lockSettings || lockSetting.lockSettings;
  lockSetting.userLocks.userWebcam = Boolean(userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.disableCam));
  lockSetting.userLocks.userMic = Boolean(userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.disableMic));
  lockSetting.userLocks.userNotes = Boolean(userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.disableNotes));
  lockSetting.userLocks.userPrivateChat = Boolean(userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.disablePrivateChat));
  lockSetting.userLocks.userPublicChat = Boolean(userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.disablePublicChat));
  lockSetting.userLocks.hideViewersCursor = Boolean(userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.hideViewersCursor));
  lockSetting.userLocks.hideViewersAnnotation = Boolean(userIsLocked && (lockSettings === null || lockSettings === void 0 ? void 0 : lockSettings.hideViewersAnnotation));
  return lockSetting;
};
module.exportDefault(useLockContext);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/lock-viewers/component.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Fragment, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Fragment(v) {
    Fragment = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let Toggle;
module.link("/imports/ui/components/common/switch/component", {
  default(v) {
    Toggle = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const intlMessages = defineMessages({
  lockViewersTitle: {
    id: 'app.lock-viewers.title',
    description: 'lock-viewers title'
  },
  closeLabel: {
    id: 'app.shortcut-help.closeLabel',
    description: 'label for close button'
  },
  closeDesc: {
    id: 'app.shortcut-help.closeDesc',
    description: 'description for close button'
  },
  lockViewersDescription: {
    id: 'app.lock-viewers.description',
    description: 'description for lock viewers feature'
  },
  featuresLable: {
    id: 'app.lock-viewers.featuresLable',
    description: 'features label'
  },
  lockStatusLabel: {
    id: 'app.lock-viewers.lockStatusLabel',
    description: 'description for close button'
  },
  webcamLabel: {
    id: 'app.lock-viewers.webcamLabel',
    description: 'label for webcam toggle'
  },
  otherViewersWebcamLabel: {
    id: 'app.lock-viewers.otherViewersWebcamLabel',
    description: 'label for other viewers webcam toggle'
  },
  microphoneLable: {
    id: 'app.lock-viewers.microphoneLable',
    description: 'label for microphone toggle'
  },
  publicChatLabel: {
    id: 'app.lock-viewers.PublicChatLabel',
    description: 'label for public chat toggle'
  },
  privateChatLable: {
    id: 'app.lock-viewers.PrivateChatLable',
    description: 'label for private chat toggle'
  },
  notesLabel: {
    id: 'app.lock-viewers.notesLabel',
    description: 'label for shared notes toggle'
  },
  userListLabel: {
    id: 'app.lock-viewers.userListLabel',
    description: 'label for user list toggle'
  },
  ariaModalTitle: {
    id: 'app.lock-viewers.ariaTitle',
    description: 'aria label for modal title'
  },
  buttonApply: {
    id: 'app.lock-viewers.button.apply',
    description: 'label for apply button'
  },
  buttonCancel: {
    id: 'app.lock-viewers.button.cancel',
    description: 'label for cancel button'
  },
  lockedLabel: {
    id: 'app.lock-viewers.locked',
    description: 'locked element label'
  },
  hideCursorsLabel: {
    id: "app.lock-viewers.hideViewersCursor",
    description: 'label for other viewers cursor'
  },
  hideAnnotationsLabel: {
    id: "app.lock-viewers.hideAnnotationsLabel",
    description: 'label for other viewers annotation'
  }
});
const propTypes = {
  closeModal: PropTypes.func.isRequired,
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  meeting: PropTypes.object.isRequired,
  showToggleLabel: PropTypes.bool.isRequired,
  updateLockSettings: PropTypes.func.isRequired,
  updateWebcamsOnlyForModerator: PropTypes.func.isRequired
};
class LockViewersComponent extends Component {
  constructor(props) {
    super(props);
    const {
      meeting: {
        lockSettings,
        usersPolicies
      }
    } = this.props;
    this.state = {
      lockSettingsProps: lockSettings,
      usersProp: usersPolicies
    };
  }
  toggleLockSettings(property) {
    const {
      lockSettingsProps
    } = this.state;
    lockSettingsProps[property] = !lockSettingsProps[property];
    this.setState({
      lockSettingsProps
    });
  }
  toggleUserProps(property) {
    const {
      usersProp
    } = this.state;
    usersProp[property] = !usersProp[property];
    this.setState({
      usersProp
    });
  }
  displayLockStatus(status) {
    const {
      intl
    } = this.props;
    return status && /*#__PURE__*/React.createElement(Styled.ToggleLabel, null, intl.formatMessage(intlMessages.lockedLabel));
  }
  componentWillUnmount() {
    const {
      closeModal
    } = this.props;
    closeModal();
  }
  render() {
    const {
      closeModal,
      intl,
      showToggleLabel,
      updateLockSettings,
      updateWebcamsOnlyForModerator,
      isOpen,
      onRequestClose,
      priority,
      isChatEnabled,
      isSharedNotesEnabled
    } = this.props;
    const {
      lockSettingsProps,
      usersProp
    } = this.state;
    const invertColors = true;
    return /*#__PURE__*/React.createElement(Styled.LockViewersModal, {
      onRequestClose: closeModal,
      contentLabel: intl.formatMessage(intlMessages.ariaModalTitle),
      title: intl.formatMessage(intlMessages.lockViewersTitle),
      isOpen,
      onRequestClose,
      priority
    }, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.Description, null, "".concat(intl.formatMessage(intlMessages.lockViewersDescription))), /*#__PURE__*/React.createElement(Styled.Form, null, /*#__PURE__*/React.createElement(Styled.SubHeader, null, /*#__PURE__*/React.createElement(Styled.Bold, null, intl.formatMessage(intlMessages.featuresLable)), /*#__PURE__*/React.createElement(Styled.Bold, null, intl.formatMessage(intlMessages.lockStatusLabel))), /*#__PURE__*/React.createElement(Styled.Row, {
      "data-test": "lockShareWebcamItem"
    }, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.webcamLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, this.displayLockStatus(lockSettingsProps.disableCam), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: lockSettingsProps.disableCam,
      onChange: () => {
        this.toggleLockSettings('disableCam');
      },
      ariaLabel: intl.formatMessage(intlMessages.webcamLabel),
      showToggleLabel: showToggleLabel,
      invertColors: invertColors,
      "data-test": "lockShareWebcam"
    })))), /*#__PURE__*/React.createElement(Styled.Row, {
      "data-test": "lockSeeOtherViewersWebcamItem"
    }, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.otherViewersWebcamLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, this.displayLockStatus(usersProp.webcamsOnlyForModerator), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: usersProp.webcamsOnlyForModerator,
      onChange: () => {
        this.toggleUserProps('webcamsOnlyForModerator');
      },
      ariaLabel: intl.formatMessage(intlMessages.otherViewersWebcamLabel),
      showToggleLabel: showToggleLabel,
      invertColors: invertColors,
      "data-test": "lockSeeOtherViewersWebcam"
    })))), /*#__PURE__*/React.createElement(Styled.Row, {
      "data-test": "lockShareMicrophoneItem"
    }, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.microphoneLable)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, this.displayLockStatus(lockSettingsProps.disableMic), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: lockSettingsProps.disableMic,
      onChange: () => {
        this.toggleLockSettings('disableMic');
      },
      ariaLabel: intl.formatMessage(intlMessages.microphoneLable),
      showToggleLabel: showToggleLabel,
      invertColors: invertColors,
      "data-test": "lockShareMicrophone"
    })))), isChatEnabled ? /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(Styled.Row, {
      "data-test": "lockPublicChatItem"
    }, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.publicChatLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, this.displayLockStatus(lockSettingsProps.disablePublicChat), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: lockSettingsProps.disablePublicChat,
      onChange: () => {
        this.toggleLockSettings('disablePublicChat');
      },
      ariaLabel: intl.formatMessage(intlMessages.publicChatLabel),
      showToggleLabel: showToggleLabel,
      invertColors: invertColors,
      "data-test": "lockPublicChat"
    })))), /*#__PURE__*/React.createElement(Styled.Row, {
      "data-test": "lockPrivateChatItem"
    }, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.privateChatLable)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, this.displayLockStatus(lockSettingsProps.disablePrivateChat), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: lockSettingsProps.disablePrivateChat,
      onChange: () => {
        this.toggleLockSettings('disablePrivateChat');
      },
      ariaLabel: intl.formatMessage(intlMessages.privateChatLable),
      showToggleLabel: showToggleLabel,
      invertColors: invertColors,
      "data-test": "lockPrivateChat"
    }))))) : null, isSharedNotesEnabled ? /*#__PURE__*/React.createElement(Styled.Row, {
      "data-test": "lockEditSharedNotesItem"
    }, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.notesLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, this.displayLockStatus(lockSettingsProps.disableNotes), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: lockSettingsProps.disableNotes,
      onChange: () => {
        this.toggleLockSettings('disableNotes');
      },
      ariaLabel: intl.formatMessage(intlMessages.notesLabel),
      showToggleLabel: showToggleLabel,
      invertColors: invertColors,
      "data-test": "lockEditSharedNotes"
    })))) : null, /*#__PURE__*/React.createElement(Styled.Row, {
      "data-test": "lockUserListItem"
    }, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.userListLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, this.displayLockStatus(lockSettingsProps.hideUserList), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: lockSettingsProps.hideUserList,
      onChange: () => {
        this.toggleLockSettings('hideUserList');
      },
      ariaLabel: intl.formatMessage(intlMessages.userListLabel),
      showToggleLabel: showToggleLabel,
      invertColors: invertColors,
      "data-test": "lockUserList"
    })))), /*#__PURE__*/React.createElement(Styled.Row, {
      "data-test": "hideViewersCursorItem"
    }, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.hideCursorsLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, this.displayLockStatus(lockSettingsProps.hideViewersCursor), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: lockSettingsProps.hideViewersCursor,
      onChange: () => {
        this.toggleLockSettings('hideViewersCursor');
      },
      ariaLabel: intl.formatMessage(intlMessages.hideCursorsLabel),
      showToggleLabel: showToggleLabel,
      invertColors: invertColors,
      "data-test": "hideViewersCursor"
    })))), /*#__PURE__*/React.createElement(Styled.Row, {
      "data-test": "hideViewersAnnotation"
    }, /*#__PURE__*/React.createElement(Styled.Col, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.FormElement, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.hideAnnotationsLabel)))), /*#__PURE__*/React.createElement(Styled.Col, null, /*#__PURE__*/React.createElement(Styled.FormElementRight, null, this.displayLockStatus(lockSettingsProps.hideViewersAnnotation), /*#__PURE__*/React.createElement(Toggle, {
      icons: false,
      defaultChecked: lockSettingsProps.hideViewersAnnotation,
      onChange: () => {
        this.toggleLockSettings('hideViewersAnnotation');
      },
      ariaLabel: intl.formatMessage(intlMessages.hideAnnotationsLabel),
      showToggleLabel: showToggleLabel,
      invertColors: invertColors,
      "data-test": "hideViewersAnnotation"
    })))))), /*#__PURE__*/React.createElement(Styled.Footer, null, /*#__PURE__*/React.createElement(Styled.Actions, null, /*#__PURE__*/React.createElement(Styled.ButtonCancel, {
      label: intl.formatMessage(intlMessages.buttonCancel),
      onClick: closeModal,
      color: "secondary"
    }), /*#__PURE__*/React.createElement(Styled.ButtonApply, {
      color: "primary",
      label: intl.formatMessage(intlMessages.buttonApply),
      onClick: () => {
        updateLockSettings(lockSettingsProps);
        updateWebcamsOnlyForModerator(usersProp.webcamsOnlyForModerator);
        closeModal();
      },
      "data-test": "applyLockSettings"
    }))));
  }
}
LockViewersComponent.propTypes = propTypes;
module.exportDefault(injectIntl(LockViewersComponent));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/lock-viewers/container.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let LockViewersComponent;
module.link("./component", {
  default(v) {
    LockViewersComponent = v;
  }
}, 2);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 3);
let SET_LOCK_SETTINGS_PROPS, SET_WEBCAM_ONLY_FOR_MODERATOR;
module.link("./mutations", {
  SET_LOCK_SETTINGS_PROPS(v) {
    SET_LOCK_SETTINGS_PROPS = v;
  },
  SET_WEBCAM_ONLY_FOR_MODERATOR(v) {
    SET_WEBCAM_ONLY_FOR_MODERATOR = v;
  }
}, 4);
let useMeeting;
module.link("../../core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 5);
let useIsChatEnabled, useIsSharedNotesEnabled;
module.link("../../services/features", {
  useIsChatEnabled(v) {
    useIsChatEnabled = v;
  },
  useIsSharedNotesEnabled(v) {
    useIsSharedNotesEnabled = v;
  }
}, 6);
const LockViewersContainer = props => {
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    isModerator: user.isModerator
  }));
  const amIModerator = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.isModerator;
  const [setLockSettingsProps] = useMutation(SET_LOCK_SETTINGS_PROPS);
  const [setWebcamOnlyForModerator] = useMutation(SET_WEBCAM_ONLY_FOR_MODERATOR);
  const updateLockSettings = lockSettings => {
    setLockSettingsProps({
      variables: {
        disableCam: lockSettings.disableCam,
        disableMic: lockSettings.disableMic,
        disablePrivChat: lockSettings.disablePrivateChat,
        disablePubChat: lockSettings.disablePublicChat,
        disableNotes: lockSettings.disableNotes,
        hideUserList: lockSettings.hideUserList,
        lockOnJoin: lockSettings.lockOnJoin,
        lockOnJoinConfigurable: lockSettings.lockOnJoinConfigurable,
        hideViewersCursor: lockSettings.hideViewersCursor,
        hideViewersAnnotation: lockSettings.hideViewersAnnotation
      }
    });
  };
  const updateWebcamsOnlyForModerator = webcamsOnlyForModerator => {
    setWebcamOnlyForModerator({
      variables: {
        webcamsOnlyForModerator
      }
    });
  };
  const {
    setIsOpen
  } = props;
  const closeModal = () => setIsOpen(false);
  const {
    data: meeting
  } = useMeeting(m => ({
    lockSettings: m.lockSettings,
    usersPolicies: m.usersPolicies
  }));
  const isChatEnabled = useIsChatEnabled();
  const isSharedNotesEnabled = useIsSharedNotesEnabled();
  return amIModerator && meeting && /*#__PURE__*/React.createElement(LockViewersComponent, _extends({
    updateWebcamsOnlyForModerator: updateWebcamsOnlyForModerator,
    updateLockSettings: updateLockSettings,
    closeModal: closeModal,
    showToggleLabel: false,
    meeting: meeting,
    isChatEnabled: isChatEnabled,
    isSharedNotesEnabled: isSharedNotesEnabled
  }, props));
};
module.exportDefault(LockViewersContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/lock-viewers/mutations.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  SET_LOCK_SETTINGS_PROPS: () => SET_LOCK_SETTINGS_PROPS,
  SET_WEBCAM_ONLY_FOR_MODERATOR: () => SET_WEBCAM_ONLY_FOR_MODERATOR
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const SET_LOCK_SETTINGS_PROPS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation SetLockSettings(\n    $disableCam: Boolean!,\n    $disableMic: Boolean!,\n    $disablePrivChat: Boolean!,\n    $disablePubChat: Boolean!,\n    $disableNotes: Boolean!,\n    $hideUserList: Boolean!,\n    $lockOnJoin: Boolean!,\n    $lockOnJoinConfigurable: Boolean!,\n    $hideViewersCursor: Boolean!,\n    $hideViewersAnnotation: Boolean!) {\n      meetingLockSettingsSetProps(\n        disableCam: $disableCam,\n        disableMic: $disableMic,\n        disablePrivChat: $disablePrivChat,\n        disablePubChat: $disablePubChat,\n        disableNotes: $disableNotes,\n        hideUserList: $hideUserList,\n        lockOnJoin: $lockOnJoin,\n        lockOnJoinConfigurable: $lockOnJoinConfigurable,\n        hideViewersCursor: $hideViewersCursor,\n        hideViewersAnnotation: $hideViewersAnnotation,\n      )\n  }\n"])));
const SET_WEBCAM_ONLY_FOR_MODERATOR = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation SetWebcamOnlyForModerator($webcamsOnlyForModerator: Boolean!) {\n    meetingSetWebcamOnlyForModerator(\n      webcamsOnlyForModerator: $webcamsOnlyForModerator,\n    )\n  }\n"])));
module.exportDefault({
  SET_LOCK_SETTINGS_PROPS,
  SET_WEBCAM_ONLY_FOR_MODERATOR
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/lock-viewers/styles.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let jumboPaddingY, lgPaddingX, smPaddingX, modalMargin, lgPaddingY, titlePositionLeft, mdPaddingX;
module.link("../../stylesheets/styled-components/general", {
  jumboPaddingY(v) {
    jumboPaddingY = v;
  },
  lgPaddingX(v) {
    lgPaddingX = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  modalMargin(v) {
    modalMargin = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  titlePositionLeft(v) {
    titlePositionLeft = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 1);
let fontSizeBase, fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 2);
let colorGray, colorGrayLabel, colorGrayLighter;
module.link("../../stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  },
  colorGrayLabel(v) {
    colorGrayLabel = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  }
}, 3);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
const ToggleLabel = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-right: ", ";\n\n  [dir=\"rtl\"] & {\n    margin: 0 0 0 ", ";\n  }\n"])), smPaddingX, smPaddingX);
const LockViewersModal = styled(ModalSimple)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([""])));
const Container = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin: 0 ", " ", ";\n"])), modalMargin, lgPaddingX);
const Description = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  text-align: center;\n  color: ", ";\n  margin-bottom: ", ";\n"])), colorGray, jumboPaddingY);
const Form = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n  border-bottom: 1px solid ", ";\n"])), colorGrayLighter);
const SubHeader = styled.header(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  flex-grow: 1;\n  justify-content: space-between;\n  color: ", ";\n  font-size: ", ";\n  margin-bottom: ", ";\n"])), colorGrayLabel, fontSizeBase, titlePositionLeft);
const Bold = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  font-weight: bold;\n"])));
const Row = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  flex-grow: 1;\n  justify-content: space-between;\n  margin-bottom: ", ";\n\n  & > :first-child {\n    margin:  0 ", " 0 0;\n\n    [dir=\"rtl\"] & {\n      margin: 0 0 0 ", ";\n    }\n  }\n"])), mdPaddingX, mdPaddingX, mdPaddingX);
const Col = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin: 0;\n\n  [dir=\"rtl\"] & {\n    margin: 0;\n  }\n"])));
const FormElement = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  position: relative;\n  display: flex;\n  flex-flow: column;\n  flex-grow: 1;\n"])));
const FormElementRight = styled(FormElement)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: flex-end;\n  flex-flow: row;\n  align-items: center;\n"])));
const Label = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: ", ";\n  margin-bottom: ", ";\n"])), colorGrayLabel, fontSizeSmall, lgPaddingY);
const Footer = styled.div(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  display: flex;\n  margin: ", " ", " 0;\n"])), smPaddingX, modalMargin);
const Actions = styled.div(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  margin-left: auto;\n  margin-right: 0;\n\n  [dir=\"rtl\"] & {\n    margin-right: auto;\n    margin-left: 3px;\n  }\n"])));
const ButtonCancel = styled(Button)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  margin: 0 0.25rem;\n"])));
const ButtonApply = styled(Button)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  margin: 0 0.25rem;\n"])));
module.exportDefault({
  ToggleLabel,
  LockViewersModal,
  Container,
  Description,
  Form,
  SubHeader,
  Bold,
  Row,
  Col,
  FormElement,
  FormElementRight,
  Label,
  Footer,
  Actions,
  ButtonCancel,
  ButtonApply
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"media":{"autoplay-overlay":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/media/autoplay-overlay/component.jsx                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const propTypes = {
  autoplayBlockedDesc: PropTypes.string.isRequired,
  autoplayAllowLabel: PropTypes.string.isRequired,
  handleAllowAutoplay: PropTypes.func.isRequired,
  intl: PropTypes.objectOf(Object).isRequired
};
const intlMessages = defineMessages({
  autoplayAlertDesc: {
    id: 'app.media.autoplayAlertDesc',
    description: 'Description for the autoplay alert title'
  }
});
class AutoplayOverlay extends PureComponent {
  render() {
    const {
      intl,
      handleAllowAutoplay,
      autoplayBlockedDesc,
      autoplayAllowLabel
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.AutoplayOverlay, null, /*#__PURE__*/React.createElement(Styled.Title, null, intl.formatMessage(intlMessages.autoplayAlertDesc)), /*#__PURE__*/React.createElement(Styled.AutoplayOverlayContent, null, /*#__PURE__*/React.createElement(Styled.Label, null, autoplayBlockedDesc), /*#__PURE__*/React.createElement(Button, {
      color: "primary",
      label: autoplayAllowLabel,
      onClick: handleAllowAutoplay,
      role: "button",
      size: "lg"
    })));
  }
}
AutoplayOverlay.propTypes = propTypes;
module.exportDefault(injectIntl(AutoplayOverlay));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/media/autoplay-overlay/styles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 1);
let fontSizeLarge, fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarge(v) {
    fontSizeLarge = v;
  },
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 2);
const AutoplayOverlay = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  background: rgba(0, 0, 0, 1);\n  height: 100%;\n  width: 100%;\n  color: ", ";\n  font-size: ", ";\n  border-radius: 5px;\n  position: absolute;\n  z-index: 999;\n  text-align: center;\n"])), colorWhite, fontSizeLarge);
const Title = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: block;\n  font-size: ", ";\n  text-align: center;\n"])), fontSizeLarge);
const AutoplayOverlayContent = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  text-align: center;\n  margin-top: 8px;\n"])));
const Label = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: block;\n  font-size: ", ";\n  text-align: center;\n  margin-bottom: 12px;\n"])), fontSizeBase);
module.exportDefault({
  AutoplayOverlay,
  Title,
  AutoplayOverlayContent,
  Label
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/media/service.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 0);
let ACTIONS;
module.link("../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 1);
function shouldShowWhiteboard() {
  return true;
}
function shouldShowOverlay() {
  const KURENTO_CONFIG = window.meetingClientSettings.public.kurento;
  return getFromUserSettings('bbb_enable_video', KURENTO_CONFIG.enableVideo);
}
const setPresentationIsOpen = (layoutContextDispatch, value) => {
  layoutContextDispatch({
    type: ACTIONS.SET_PRESENTATION_IS_OPEN,
    value
  });
};
const buildLayoutWhenPresentationAreaIsDisabled = (layoutContextDispatch, isSharingVideo, isSharedNotesPinned, isThereWebcam, isScreenSharingEnabled, isPresentationEnabled) => {
  const hasScreenshare = isScreenSharingEnabled;
  const isGeneralMediaOff = !hasScreenshare && !isSharedNotesPinned && !isSharingVideo;
  const webcamIsOnlyContent = isThereWebcam && isGeneralMediaOff;
  const isThereNoMedia = !isThereWebcam && isGeneralMediaOff;
  const isPresentationDisabled = !isPresentationEnabled;
  if (isPresentationDisabled && (webcamIsOnlyContent || isThereNoMedia)) {
    setPresentationIsOpen(layoutContextDispatch, false);
  }
};
module.exportDefault({
  buildLayoutWhenPresentationAreaIsDisabled,
  shouldShowWhiteboard,
  shouldShowOverlay,
  setPresentationIsOpen
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"meeting-ended":{"rating":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/meeting-ended/rating/component.jsx                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let range;
module.link("/imports/utils/array-utils", {
  range(v) {
    range = v;
  }
}, 2);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 5);
const intlMessages = defineMessages({
  legendTitle: {
    id: 'app.meeting-ended.rating.legendLabel',
    description: 'label for star feedback legend'
  },
  starLabel: {
    id: 'app.meeting-ended.rating.starLabel',
    description: 'label for feedback stars'
  }
});
const propTypes = {
  intl: PropTypes.object.isRequired,
  onRate: PropTypes.func.isRequired,
  total: PropTypes.string.isRequired
};
class Rating extends Component {
  constructor(props) {
    super(props);
    this.clickStar = this.clickStar.bind(this);
  }
  shouldComponentUpdate() {
    // when component re render lost checked item
    return false;
  }
  clickStar(e) {
    const {
      onRate
    } = this.props;
    onRate(e);
  }
  renderStars(num) {
    const {
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.StarRating, null, /*#__PURE__*/React.createElement("fieldset", null, /*#__PURE__*/React.createElement(Styled.Legend, null, intl.formatMessage(intlMessages.legendTitle)), range(0, num).map(i => [/*#__PURE__*/React.createElement("input", {
      type: "radio",
      id: "".concat(i + 1, "star"),
      name: "rating",
      value: i + 1,
      key: uniqueId('star-'),
      onChange: () => this.clickStar(i + 1)
    }), /*#__PURE__*/React.createElement("label", {
      htmlFor: "".concat(i + 1, "star"),
      key: uniqueId('star-'),
      "aria-label": "".concat(i + 1, " ").concat(intl.formatMessage(intlMessages.starLabel))
    })]).reverse()));
  }
  render() {
    const {
      total
    } = this.props;
    return /*#__PURE__*/React.createElement("div", null, this.renderStars(total));
  }
}
module.exportDefault(injectIntl(Rating));
Rating.propTypes = propTypes;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/meeting-ended/rating/styles.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 1);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 2);
const StarRating = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  font-family: 'bbb-icons' !important;\n  & > fieldset {\n    border: none;\n    display: inline-block;\n\n    &:not(:checked) {\n      & > input {\n        position: absolute;\n        top: -9999px;\n        clip: rect(0,0,0,0);\n      }\n\n      & > label {\n        float: right;\n        width: 1em;\n        padding: 0 .05em 0 .1rem;\n        overflow: hidden;\n        white-space: nowrap;\n        cursor: pointer;\n        font-size: 2.5rem;\n        color: black;\n        font-weight: 100;\n\n        [dir=\"rtl\"] & {\n          padding: 0 .1rem 0 .05em;\n        }\n\n        @media ", " {\n          font-size: 2rem;\n        }\n\n        &:before {\n          content: '\\e951';\n        }\n\n        &:hover,\n        &:hover ~ label {\n          color: ", ";\n          text-shadow: 0 0 3px ", ";\n          &:before {\n            content: '\\e951';\n          }\n        }\n      }\n    }\n\n    & > input:checked {\n      & ~ label {\n        &:before {\n          content: '\\e952';\n          color: ", ";\n        }\n      }\n    }\n\n    & > label:active {\n      position: relative;\n      top: 2px;\n    }\n  }\n"], ["\n  font-family: 'bbb-icons' !important;\n  & > fieldset {\n    border: none;\n    display: inline-block;\n\n    &:not(:checked) {\n      & > input {\n        position: absolute;\n        top: -9999px;\n        clip: rect(0,0,0,0);\n      }\n\n      & > label {\n        float: right;\n        width: 1em;\n        padding: 0 .05em 0 .1rem;\n        overflow: hidden;\n        white-space: nowrap;\n        cursor: pointer;\n        font-size: 2.5rem;\n        color: black;\n        font-weight: 100;\n\n        [dir=\"rtl\"] & {\n          padding: 0 .1rem 0 .05em;\n        }\n\n        @media ", " {\n          font-size: 2rem;\n        }\n\n        &:before {\n          content: '\\\\e951';\n        }\n\n        &:hover,\n        &:hover ~ label {\n          color: ", ";\n          text-shadow: 0 0 3px ", ";\n          &:before {\n            content: '\\\\e951';\n          }\n        }\n      }\n    }\n\n    & > input:checked {\n      & ~ label {\n        &:before {\n          content: '\\\\e952';\n          color: ", ";\n        }\n      }\n    }\n\n    & > label:active {\n      position: relative;\n      top: 2px;\n    }\n  }\n"])), smallOnly, colorPrimary, colorPrimary, colorPrimary);
const Legend = styled.legend(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  font-family: Arial, sans-serif;\n  font-weight: normal;\n"])));
module.exportDefault({
  StarRating,
  Legend
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/meeting-ended/component.tsx                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback, useContext, useEffect, useMemo, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let isEmpty;
module.link("radash", {
  isEmpty(v) {
    isEmpty = v;
  }
}, 2);
let ApolloLink, useQuery;
module.link("@apollo/client", {
  ApolloLink(v) {
    ApolloLink = v;
  },
  useQuery(v) {
    useQuery = v;
  }
}, 3);
let JoinErrorCodeTable, MeetingEndedTable, openLearningDashboardUrl, setLearningDashboardCookie;
module.link("./service", {
  JoinErrorCodeTable(v) {
    JoinErrorCodeTable = v;
  },
  MeetingEndedTable(v) {
    MeetingEndedTable = v;
  },
  openLearningDashboardUrl(v) {
    openLearningDashboardUrl = v;
  },
  setLearningDashboardCookie(v) {
    setLearningDashboardCookie = v;
  }
}, 4);
let getMeetingEndData;
module.link("./queries", {
  getMeetingEndData(v) {
    getMeetingEndData = v;
  }
}, 5);
let useAuthData;
module.link("/imports/ui/core/local-states/useAuthData", {
  default(v) {
    useAuthData = v;
  }
}, 6);
let Icon;
module.link("/imports/ui/components/common/icon/icon-ts/component", {
  default(v) {
    Icon = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
let Rating;
module.link("./rating/component", {
  default(v) {
    Rating = v;
  }
}, 9);
let LoadingContext;
module.link("../common/loading-screen/loading-screen-HOC/component", {
  LoadingContext(v) {
    LoadingContext = v;
  }
}, 10);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 11);
let apolloContextHolder;
module.link("/imports/ui/core/graphql/apolloContextHolder/apolloContextHolder", {
  default(v) {
    apolloContextHolder = v;
  }
}, 12);
const intlMessage = defineMessages({
  410: {
    id: 'app.meeting.ended',
    description: 'message when meeting is ended'
  },
  403: {
    id: 'app.error.removed',
    description: 'Message to display when user is removed from the conference'
  },
  430: {
    id: 'app.error.meeting.ended',
    description: 'user logged conference'
  },
  'acl-not-allowed': {
    id: 'app.error.removed',
    description: 'Message to display when user is removed from the conference'
  },
  messageEnded: {
    id: 'app.meeting.endedMessage',
    description: 'message saying to go back to home screen'
  },
  messageEndedByUser: {
    id: 'app.meeting.endedByUserMessage',
    description: 'message informing who ended the meeting'
  },
  messageEndedByNoModeratorSingular: {
    id: 'app.meeting.endedByNoModeratorMessageSingular',
    description: 'message informing that the meeting was ended due to no moderator present (singular)'
  },
  messageEndedByNoModeratorPlural: {
    id: 'app.meeting.endedByNoModeratorMessagePlural',
    description: 'message informing that the meeting was ended due to no moderator present (plural)'
  },
  buttonOkay: {
    id: 'app.meeting.endNotification.ok.label',
    description: 'label okay for button'
  },
  title: {
    id: 'app.feedback.title',
    description: 'title for feedback screen'
  },
  subtitle: {
    id: 'app.feedback.subtitle',
    description: 'subtitle for feedback screen'
  },
  textarea: {
    id: 'app.feedback.textarea',
    description: 'placeholder for textarea'
  },
  confirmDesc: {
    id: 'app.leaveConfirmation.confirmDesc',
    description: 'adds context to confim option'
  },
  sendLabel: {
    id: 'app.feedback.sendFeedback',
    description: 'send feedback button label'
  },
  sendDesc: {
    id: 'app.feedback.sendFeedbackDesc',
    description: 'adds context to send feedback option'
  },
  [JoinErrorCodeTable.DUPLICATE_USER]: {
    id: 'app.meeting.logout.duplicateUserEjectReason',
    description: 'message for duplicate users'
  },
  [JoinErrorCodeTable.PERMISSION_FAILED]: {
    id: 'app.meeting.logout.permissionEjectReason',
    description: 'message for whom was kicked by doing something without permission'
  },
  [JoinErrorCodeTable.EJECT_USER]: {
    id: 'app.meeting.logout.ejectedFromMeeting',
    description: 'message when the user is removed by someone'
  },
  [JoinErrorCodeTable.SYSTEM_EJECT_USER]: {
    id: 'app.meeting.logout.ejectedFromMeeting',
    description: 'message when the user is removed by the system'
  },
  [JoinErrorCodeTable.MAX_PARTICIPANTS]: {
    id: 'app.meeting.logout.maxParticipantsReached',
    description: 'message when the user is rejected due to max participants limit'
  },
  [JoinErrorCodeTable.VALIDATE_TOKEN]: {
    id: 'app.meeting.logout.validateTokenFailedEjectReason',
    description: 'invalid auth token'
  },
  [JoinErrorCodeTable.USER_INACTIVITY]: {
    id: 'app.meeting.logout.userInactivityEjectReason',
    description: 'message to whom was kicked by inactivity'
  },
  [JoinErrorCodeTable.USER_LOGGED_OUT]: {
    id: 'app.feedback.title',
    description: 'message to whom was kicked by logging out'
  },
  [JoinErrorCodeTable.BANNED_USER_REJOINING]: {
    id: 'app.error.userBanned',
    description: 'message to whom was banned'
  },
  open_activity_report_btn: {
    id: 'app.learning-dashboard.clickHereToOpen',
    description: 'description of link to open activity report'
  },
  [MeetingEndedTable.ENDED_FROM_API]: {
    id: 'app.meeting.endedFromAPI',
    description: ''
  },
  [MeetingEndedTable.ENDED_WHEN_NOT_JOINED]: {
    id: 'app.meeting.endedWhenNoUserJoined',
    description: ''
  },
  [MeetingEndedTable.ENDED_WHEN_LAST_USER_LEFT]: {
    id: 'app.meeting.endedWhenLastUserLeft',
    description: ''
  },
  [MeetingEndedTable.ENDED_AFTER_USER_LOGGED_OUT]: {
    id: 'app.meeting.endedWhenLastUserLeft',
    description: ''
  },
  [MeetingEndedTable.ENDED_AFTER_EXCEEDING_DURATION]: {
    id: 'app.meeting.endedAfterExceedingDuration',
    description: ''
  },
  [MeetingEndedTable.BREAKOUT_ENDED_EXCEEDING_DURATION]: {
    id: 'app.meeting.breakoutEndedAfterExceedingDuration',
    description: ''
  },
  [MeetingEndedTable.BREAKOUT_ENDED_BY_MOD]: {
    id: 'app.meeting.breakoutEndedByModerator',
    description: ''
  },
  [MeetingEndedTable.ENDED_DUE_TO_NO_AUTHED_USER]: {
    id: 'app.meeting.endedDueNoAuthed',
    description: ''
  },
  [MeetingEndedTable.ENDED_DUE_TO_NO_MODERATOR]: {
    id: 'app.meeting.endedDueNoModerators',
    description: ''
  },
  [MeetingEndedTable.ENDED_DUE_TO_SERVICE_INTERRUPTION]: {
    id: 'app.meeting.endedDueServiceInterruption',
    description: ''
  }
});
const MeetingEnded = _ref => {
  let {
    endedBy,
    joinErrorCode,
    meetingEndedCode,
    allowDefaultLogoutUrl,
    askForFeedbackOnLogout,
    learningDashboardAccessToken,
    isModerator,
    learningDashboardBase,
    isBreakout
  } = _ref;
  const loadingContextInfo = useContext(LoadingContext);
  const intl = useIntl();
  const [{
    authToken,
    meetingId,
    logoutUrl,
    userName,
    userId
  }] = useAuthData();
  const [selectedStars, setSelectedStars] = useState(0);
  const [dispatched, setDispatched] = useState(false);
  const generateEndMessage = useCallback((joinErrorCode, meetingEndedCode, endedBy) => {
    if (!isEmpty(endedBy)) {
      return intl.formatMessage(intlMessage.messageEndedByUser, {
        0: endedBy
      });
    }
    // OR opetaror always returns the first truthy value
    const code = meetingEndedCode || joinErrorCode || '410';
    return intl.formatMessage(intlMessage[code]);
  }, []);
  const sendFeedback = useCallback(() => {
    const textarea = document.getElementById('feedbackComment');
    const comment = ((textarea === null || textarea === void 0 ? void 0 : textarea.value) || '').trim();
    const message = {
      rating: selectedStars,
      userId,
      userName,
      authToken,
      meetingId,
      comment,
      isModerator
    };
    const pathMatch = window.location.pathname.match('^(.*)/html5client/join$');
    if (pathMatch == null) {
      throw new Error('Failed to match BBB client URI');
    }
    const serverPathPrefix = pathMatch[1];
    const sessionToken = sessionStorage.getItem('sessionToken');
    const url = "https://".concat(window.location.hostname).concat(serverPathPrefix, "/bigbluebutton/api/feedback?sessionToken=").concat(sessionToken);
    const options = {
      method: 'POST',
      body: JSON.stringify(message),
      headers: {
        'Content-Type': 'application/json'
      }
    };
    setDispatched(true);
    fetch(url, options).then(() => {
      if (!isModerator) {
        const REDIRECT_WAIT_TIME = 5000;
        setTimeout(() => {
          window.location.href = logoutUrl;
        }, REDIRECT_WAIT_TIME);
      }
    }).catch(e => {
      logger.warn({
        logCode: 'user_feedback_not_sent_error',
        extraInfo: {
          errorName: e.name,
          errorMessage: e.message
        }
      }, "Unable to send feedback: ".concat(e.message));
    });
  }, [selectedStars]);
  const confirmRedirect = (isBreakout, allowRedirect) => {
    if (isBreakout) window.close();
    if (allowRedirect) {
      window.location.href = logoutUrl;
    }
  };
  const logoutButton = useMemo(() => {
    const {
      locale
    } = intl;
    return /*#__PURE__*/React.createElement(Styled.Wrapper, null, learningDashboardAccessToken && isModerator
    // Always set cookie in case Dashboard is already opened
    && setLearningDashboardCookie(learningDashboardAccessToken, meetingId) === true ? /*#__PURE__*/React.createElement(Styled.Text, null, /*#__PURE__*/React.createElement(Styled.MeetingEndedButton, {
      color: "default",
      onClick: () => openLearningDashboardUrl(learningDashboardAccessToken, meetingId, authToken, learningDashboardBase, locale),
      "aria-description": intl.formatMessage(intlMessage.open_activity_report_btn)
    }, /*#__PURE__*/React.createElement(Icon, {
      iconName: "multi_whiteboard"
    }))) : null, /*#__PURE__*/React.createElement(Styled.Text, null, intl.formatMessage(intlMessage.messageEnded)), /*#__PURE__*/React.createElement(Styled.MeetingEndedButton, {
      color: "primary",
      onClick: () => confirmRedirect(isBreakout, allowDefaultLogoutUrl),
      "aria-description": intl.formatMessage(intlMessage.confirmDesc)
    }, intl.formatMessage(intlMessage.buttonOkay)));
  }, [learningDashboardAccessToken, isModerator, meetingId, authToken, learningDashboardBase]);
  const feedbackScreen = useMemo(() => {
    const shouldShowFeedback = askForFeedbackOnLogout && !dispatched;
    const noRating = selectedStars === 0;
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.Text, null, shouldShowFeedback ? intl.formatMessage(intlMessage.subtitle) : intl.formatMessage(intlMessage.messageEnded)), shouldShowFeedback ? /*#__PURE__*/React.createElement("div", {
      "data-test": "rating"
    }, /*#__PURE__*/React.createElement(Rating, {
      total: "5",
      onRate: setSelectedStars
    }), !noRating ? /*#__PURE__*/React.createElement(Styled.TextArea, {
      rows: 5,
      id: "feedbackComment",
      placeholder: intl.formatMessage(intlMessage.textarea),
      "aria-describedby": "textareaDesc"
    }) : null) : null, noRating ? /*#__PURE__*/React.createElement(Styled.MeetingEndedButton, {
      color: "primary",
      onClick: () => setDispatched(true),
      "aria-description": intl.formatMessage(intlMessage.confirmDesc)
    }, intl.formatMessage(intlMessage.buttonOkay)) : null, !noRating ? /*#__PURE__*/React.createElement(Styled.MeetingEndedButton, {
      onClick: sendFeedback,
      "aria-description": intl.formatMessage(intlMessage.sendDesc)
    }, intl.formatMessage(intlMessage.sendLabel)) : null);
  }, [askForFeedbackOnLogout, dispatched, selectedStars]);
  useEffect(() => {
    // Sets Loading to falsed and removes loading splash screen
    loadingContextInfo.setLoading(false, '');
    // Stops all media tracks
    window.dispatchEvent(new Event('StopAudioTracks'));
    // get the media tag from the session storage
    const data = window.meetingClientSettings.public.media;
    // get media element and stops it and removes the audio source
    const mediaElement = document.querySelector(data.mediaTag);
    if (mediaElement) {
      mediaElement.pause();
      mediaElement.srcObject = null;
    }
    // stops apollo client and removes it connection
    const apolloClient = apolloContextHolder.getClient();
    // stops client queries
    if (apolloClient) {
      apolloClient.stop();
    }
    apolloContextHolder.setShouldRetry(false);
    const ws = apolloContextHolder.getLink();
    // stops client connection after 5 seconds, if made immediately some data is lost
    if (ws) {
      setTimeout(() => {
        // overwrites the link with an empty link
        // if not new connection is made
        apolloClient.setLink(ApolloLink.empty());
        // closes the connection
        ws.terminate();
      }, 5000);
    }
  }, []);
  return /*#__PURE__*/React.createElement(Styled.Parent, null, /*#__PURE__*/React.createElement(Styled.Modal, {
    "data-test": "meetingEndedModal"
  }, /*#__PURE__*/React.createElement(Styled.Content, null, /*#__PURE__*/React.createElement(Styled.Title, null, generateEndMessage(joinErrorCode, meetingEndedCode, endedBy)), allowDefaultLogoutUrl && !askForFeedbackOnLogout ? logoutButton : null, askForFeedbackOnLogout ? feedbackScreen : null)));
};
const MeetingEndedContainer = _ref2 => {
  let {
    endedBy,
    meetingEndedCode,
    joinErrorCode
  } = _ref2;
  const {
    loading: meetingEndLoading,
    error: meetingEndError,
    data: meetingEndData
  } = useQuery(getMeetingEndData);
  if (meetingEndLoading || !meetingEndData) {
    return /*#__PURE__*/React.createElement(MeetingEnded, {
      endedBy: "",
      joinErrorCode: "",
      meetingEndedCode: "",
      allowDefaultLogoutUrl: false,
      askForFeedbackOnLogout: false,
      learningDashboardAccessToken: "",
      isModerator: false,
      learningDashboardBase: "",
      isBreakout: false
    });
  }
  if (meetingEndError) {
    logger.error('Error on fetching meeting end data: ', meetingEndError);
    return /*#__PURE__*/React.createElement(MeetingEnded, {
      endedBy: "",
      joinErrorCode: "",
      meetingEndedCode: "",
      allowDefaultLogoutUrl: false,
      askForFeedbackOnLogout: false,
      learningDashboardAccessToken: "",
      isModerator: false,
      learningDashboardBase: "",
      isBreakout: false
    });
  }
  const {
    user_current
  } = meetingEndData;
  const {
    isModerator,
    meeting
  } = user_current[0];
  const {
    learningDashboard,
    isBreakout,
    clientSettings
  } = meeting;
  const {
    askForFeedbackOnLogout,
    allowDefaultLogoutUrl,
    learningDashboardBase
  } = clientSettings;
  return /*#__PURE__*/React.createElement(MeetingEnded, {
    endedBy: endedBy,
    joinErrorCode: joinErrorCode,
    meetingEndedCode: meetingEndedCode,
    allowDefaultLogoutUrl: allowDefaultLogoutUrl,
    askForFeedbackOnLogout: askForFeedbackOnLogout,
    learningDashboardAccessToken: learningDashboard === null || learningDashboard === void 0 ? void 0 : learningDashboard.learningDashboardAccessToken,
    isModerator: isModerator,
    learningDashboardBase: learningDashboardBase,
    isBreakout: isBreakout
  });
};
module.exportDefault(MeetingEndedContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/meeting-ended/queries.ts                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  getMeetingEndData: () => getMeetingEndData
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const getMeetingEndData = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\nquery getMeetingEndData {\n  user_current {\n    isModerator\n    meeting {\n      learningDashboard {\n        learningDashboardAccessToken\n      }\n      isBreakout\n      logoutUrl\n      clientSettings {\n        askForFeedbackOnLogout: clientSettingsJson(path: \"$.public.app.askForFeedbackOnLogout\")\n        allowDefaultLogoutUrl: clientSettingsJson(path: \"$.public.app.allowDefaultLogoutUrl\")\n        learningDashboardBase: clientSettingsJson(path: \"$.public.app.learningDashboardBase\")\n      }\n    }\n  }\n}\n"])));
module.exportDefault({
  getMeetingEndData
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/meeting-ended/service.ts                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  JoinErrorCodeTable: () => JoinErrorCodeTable,
  MeetingEndedTable: () => MeetingEndedTable,
  openLearningDashboardUrl: () => openLearningDashboardUrl,
  setLearningDashboardCookie: () => setLearningDashboardCookie
});
const JoinErrorCodeTable = {
  NOT_EJECT: 'not_eject_reason',
  DUPLICATE_USER: 'duplicate_user_in_meeting_eject_reason',
  PERMISSION_FAILED: 'not_enough_permission_eject_reason',
  EJECT_USER: 'user_requested_eject_reason',
  SYSTEM_EJECT_USER: 'system_requested_eject_reason',
  VALIDATE_TOKEN: 'validate_token_failed_eject_reason',
  USER_INACTIVITY: 'user_inactivity_eject_reason',
  BANNED_USER_REJOINING: 'banned_user_rejoining_reason',
  USER_LOGGED_OUT: 'user_logged_out_reason',
  MAX_PARTICIPANTS: 'max_participants_reason'
};
const MeetingEndedTable = {
  ENDED_FROM_API: 'ENDED_FROM_API',
  ENDED_WHEN_NOT_JOINED: 'ENDED_WHEN_NOT_JOINED',
  ENDED_WHEN_LAST_USER_LEFT: 'ENDED_WHEN_LAST_USER_LEFT',
  ENDED_AFTER_USER_LOGGED_OUT: 'ENDED_AFTER_USER_LOGGED_OUT',
  ENDED_AFTER_EXCEEDING_DURATION: 'ENDED_AFTER_EXCEEDING_DURATION',
  BREAKOUT_ENDED_EXCEEDING_DURATION: 'BREAKOUT_ENDED_EXCEEDING_DURATION',
  BREAKOUT_ENDED_BY_MOD: 'BREAKOUT_ENDED_BY_MOD',
  ENDED_DUE_TO_NO_AUTHED_USER: 'ENDED_DUE_TO_NO_AUTHED_USER',
  ENDED_DUE_TO_NO_MODERATOR: 'ENDED_DUE_TO_NO_MODERATOR',
  ENDED_DUE_TO_SERVICE_INTERRUPTION: 'ENDED_DUE_TO_SERVICE_INTERRUPTION'
};
const openLearningDashboardUrl = (accessToken, mId, sToken, learningDashboardBase, lang) => {
  if (accessToken && setLearningDashboardCookie(accessToken, mId)) {
    window.open("".concat(learningDashboardBase, "/?meeting=").concat(mId, "&lang=").concat(lang), '_blank');
  } else {
    window.open("".concat(learningDashboardBase, "/?meeting=").concat(mId, "&sessionToken=").concat(sToken, "&lang=").concat(lang), '_blank');
  }
};
const setLearningDashboardCookie = (accessToken, mId) => {
  if (accessToken !== null) {
    const lifetime = new Date();
    lifetime.setTime(lifetime.getTime() + 3600000); // 1h (extends 7d when open Dashboard)
    document.cookie = "ld-".concat(mId, "=").concat(accessToken, "; expires=").concat(lifetime.toUTCString(), "; path=/");
    return true;
  }
  return false;
};
module.exportDefault({
  JoinErrorCodeTable,
  MeetingEndedTable,
  setLearningDashboardCookie,
  openLearningDashboardUrl
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/meeting-ended/styles.ts                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 1);
let borderRadius, lgPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderRadius(v) {
    borderRadius = v;
  },
  lgPaddingX(v) {
    lgPaddingX = v;
  }
}, 2);
let fontSizeSmall, fontSizeBase, fontSizeLarge, headingsFontWeight, lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  },
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  fontSizeLarge(v) {
    fontSizeLarge = v;
  },
  headingsFontWeight(v) {
    headingsFontWeight = v;
  },
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 3);
let colorWhite, colorText, colorBackground;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorText(v) {
    colorText = v;
  },
  colorBackground(v) {
    colorBackground = v;
  }
}, 4);
const Parent = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  height: 100%;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: ", ";\n"])), colorBackground);
const Modal = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  padding: ", ";\n  background-color: ", ";\n  flex-direction: column;\n  border-radius: ", ";\n  max-width: 95vw;\n  width: 600px;\n"])), lgPaddingX, colorWhite, borderRadius);
const Content = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  text-align: center;\n"])));
const Title = styled.h1(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  margin: 0;\n  font-size: ", ";\n  font-weight: ", ";\n"])), fontSizeLarge, headingsFontWeight);
const Text = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-weight: normal;\n  padding: ", " 0;\n\n  @media ", " {\n    font-size: ", ";\n  }\n"])), colorText, lineHeightComputed, smallOnly, fontSizeSmall);
const Wrapper = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n"])));
const MeetingEndedButton = styled.button(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  border: none;\n  overflow: visible;\n  border-radius: 2px;\n  font-weight: 600;\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  cursor: pointer;\n  user-select: none;\n  height: 3rem;\n  width: 3rem;\n  display: flex !important;\n  align-items: center;\n  box-align: center;\n  flex-align: center;\n  box-pack: center;\n  justify-content: center;\n  flex-pack: center;\n  color: var(--btn-primary-color, var(--color-white, #FFF));\n  background-color: var(--btn-primary-bg, var(--color-primary, #0F70D7));\n  border: 3px solid transparent;\n  padding: calc(1.25rem / 2);\n  @media ", " {\n    font-size: ", ";\n  }\n"])), smallOnly, fontSizeBase);
const TextArea = styled.textarea(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  resize: none;\n  margin: 1rem auto;\n  width: 100%;\n\n  &::placeholder {\n    text-align: center;\n  }\n"])));
module.exportDefault({
  Parent,
  Modal,
  Content,
  Title,
  Text,
  MeetingEndedButton,
  TextArea,
  Wrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"mobile-app-modal":{"mobile-app-modal-graphql":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/mobile-app-modal/mobile-app-modal-graphql/component.tsx                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let useReactiveVar;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 3);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 4);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 5);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 6);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 7);
const intlMessages = defineMessages({
  title: {
    id: 'app.mobileAppModal.title',
    description: 'App modal title'
  },
  description: {
    id: 'app.mobileAppModal.description',
    description: 'App modal description'
  },
  openStore: {
    id: 'app.mobileAppModal.openStore',
    defaultMessage: new Date().getFullYear().toString(),
    description: 'Open Store button label'
  },
  openApp: {
    id: 'app.mobileAppModal.openApp',
    description: 'Open App button label'
  },
  obtainUrlMsg: {
    id: 'app.mobileAppModal.obtainUrlMsg',
    description: 'Obtain URL message'
  },
  obtainUrlErrorMsg: {
    id: 'app.mobileAppModal.obtainUrlErrorMsg',
    description: 'Obtain URL error message'
  },
  dismissLabel: {
    id: 'app.mobileAppModal.dismissLabel',
    description: 'Dismiss button label'
  },
  dismissDesc: {
    id: 'app.mobileAppModal.dismissDesc',
    description: 'adds descriptive context to dissmissLabel'
  }
});
const MobileAppModalGraphql = props => {
  const {
    meetingName,
    sessionToken,
    isOpen,
    onRequestClose,
    priority
  } = props;
  const [url, setUrl] = useState('');
  const [urlMessage, setUrlMessage] = useState('');
  const intl = useIntl();
  const BBB_TABLET_APP_CONFIG = window.meetingClientSettings.public.app.bbbTabletApp;
  useEffect(() => {
    const url = "/bigbluebutton/api/getJoinUrl?sessionToken=".concat(sessionToken);
    const options = {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    };
    setUrlMessage(intl.formatMessage(intlMessages.obtainUrlMsg));
    fetch(url, options).then(response => {
      if (!response.ok) {
        return Promise.reject();
      }
      return response.json();
    }).then(messages => {
      setUrl(messages.response.url);
      setUrlMessage('');
    }).catch(() => {
      setUrlMessage(intl.formatMessage(intlMessages.obtainUrlErrorMsg));
    });
  }, []);
  return /*#__PURE__*/React.createElement(ModalSimple, {
    title: intl.formatMessage(intlMessages.title),
    dismiss: {
      label: intl.formatMessage(intlMessages.dismissLabel),
      description: intl.formatMessage(intlMessages.dismissDesc)
    },
    isOpen,
    onRequestClose,
    priority
  }, /*#__PURE__*/React.createElement(Styled.Center, null, "".concat(intl.formatMessage(intlMessages.description)), /*#__PURE__*/React.createElement(Styled.ButtonContainer, null, /*#__PURE__*/React.createElement(Button, {
    color: "primary",
    disabled: url === '',
    label: intl.formatMessage(intlMessages.openApp),
    onClick: () => {
      window.open("".concat(BBB_TABLET_APP_CONFIG.iosAppUrlScheme, "://").concat(encodeURIComponent(meetingName), "/").concat(encodeURIComponent(url)), '_blank');
    },
    role: "button",
    size: "lg"
  }), urlMessage !== '' ? /*#__PURE__*/React.createElement(Styled.UrlMessage, null, urlMessage) : null), BBB_TABLET_APP_CONFIG.iosAppStoreUrl === '' ? null : /*#__PURE__*/React.createElement(Styled.ButtonContainer, null, /*#__PURE__*/React.createElement(Button, {
    color: "default",
    label: intl.formatMessage(intlMessages.openStore),
    onClick: () => window.open("".concat(BBB_TABLET_APP_CONFIG.iosAppStoreUrl), '_blank'),
    role: "button",
    size: "lg"
  }))));
};
const MobileAppModalGraphqlContainer = _ref => {
  var _currentMeeting$name;
  let {
    isOpen,
    onRequestClose,
    priority
  } = _ref;
  /* eslint no-underscore-dangle: "off" */
  // @ts-ignore Due to Meteor legacy reasons
  const sessionToken = useReactiveVar(Auth._sessionToken);
  const {
    loading,
    data: currentMeeting
  } = useMeeting(m => {
    return {
      name: m.name
    };
  });
  if (loading || !currentMeeting) {
    return null;
  }
  return /*#__PURE__*/React.createElement(MobileAppModalGraphql, {
    meetingName: (_currentMeeting$name = currentMeeting.name) !== null && _currentMeeting$name !== void 0 ? _currentMeeting$name : '',
    sessionToken: sessionToken,
    isOpen: isOpen,
    onRequestClose: onRequestClose,
    priority: priority
  });
};
module.exportDefault(MobileAppModalGraphqlContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/mobile-app-modal/mobile-app-modal-graphql/styles.ts                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const Center = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  text-align: center;\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n"])));
const ButtonContainer = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin-top: 1rem;\n"])));
const UrlMessage = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  font-style: italic;\n  font-size: 1.0rem;\n"])));
module.exportDefault({
  Center,
  ButtonContainer,
  UrlMessage
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"notes":{"hooks":{"useHasPermission.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/hooks/useHasPermission.ts                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 0);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 1);
const useHasPermission = () => {
  const {
    data: currentUserData
  } = useCurrentUser(u => ({
    locked: u.locked,
    role: u.role
  }));
  const {
    data: meetingData
  } = useMeeting(m => ({
    lockSettings: m.lockSettings
  }));
  const ROLE_MODERATOR = window.meetingClientSettings.public.user.role_moderator;
  if ((currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.role) === ROLE_MODERATOR) return true;
  if (currentUserData !== null && currentUserData !== void 0 && currentUserData.locked) {
    var _meetingData$lockSett;
    return !(meetingData !== null && meetingData !== void 0 && (_meetingData$lockSett = meetingData.lockSettings) !== null && _meetingData$lockSett !== void 0 && _meetingData$lockSett.disableNotes);
  }
  return true;
};
module.exportDefault(useHasPermission);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useHasUnreadNotes.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/hooks/useHasUnreadNotes.ts                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useRev;
module.link("/imports/ui/components/pads/pads-graphql/hooks/useRev", {
  default(v) {
    useRev = v;
  }
}, 0);
let useNotesLastRev;
module.link("./useNotesLastRev", {
  default(v) {
    useNotesLastRev = v;
  }
}, 1);
const useHasUnreadNotes = () => {
  const NOTES_CONFIG = window.meetingClientSettings.public.notes;
  const {
    lastRev
  } = useNotesLastRev();
  const rev = useRev(NOTES_CONFIG.id);
  return rev > lastRev;
};
module.exportDefault(useHasUnreadNotes);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useNotesLastRev.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/hooks/useNotesLastRev.ts                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useCallback;
module.link("react", {
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
const notesLastRev = makeVar(0);
const useNotesLastRev = () => {
  const lastRev = useReactiveVar(notesLastRev);
  const setNotesLastRev = useCallback(rev => notesLastRev(rev), []);
  return {
    lastRev,
    setNotesLastRev
  };
};
module.exportDefault(useNotesLastRev);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"notes-dropdown":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/notes-dropdown/component.tsx                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useQuery;
module.link("@apollo/client", {
  useQuery(v) {
    useQuery = v;
  }
}, 2);
let BBBMenu;
module.link("/imports/ui/components/common/menu/component", {
  default(v) {
    BBBMenu = v;
  }
}, 3);
let Trigger;
module.link("/imports/ui/components/common/control-header/right/component", {
  default(v) {
    Trigger = v;
  }
}, 4);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 5);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 6);
let layoutSelect;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  }
}, 7);
let PROCESSED_PRESENTATIONS_SUBSCRIPTION;
module.link("/imports/ui/components/whiteboard/queries", {
  PROCESSED_PRESENTATIONS_SUBSCRIPTION(v) {
    PROCESSED_PRESENTATIONS_SUBSCRIPTION = v;
  }
}, 8);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 9);
let GET_PAD_ID;
module.link("./queries", {
  GET_PAD_ID(v) {
    GET_PAD_ID = v;
  }
}, 10);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 11);
const DEBOUNCE_TIMEOUT = 15000;
const intlMessages = defineMessages({
  convertAndUploadLabel: {
    id: 'app.notes.notesDropdown.covertAndUpload',
    description: 'Export shared notes as a PDF and upload to the main room'
  },
  pinNotes: {
    id: 'app.notes.notesDropdown.pinNotes',
    description: 'Label for pin shared notes button'
  },
  options: {
    id: 'app.notes.notesDropdown.notesOptions',
    description: 'Label for shared notes options'
  }
});
const NotesDropdownGraphql = props => {
  const {
    amIPresenter,
    presentations,
    handlePinSharedNotes,
    isRTL,
    padId,
    presentationEnabled
  } = props;
  const [converterButtonDisabled, setConverterButtonDisabled] = useState(false);
  const intl = useIntl();
  const NOTES_IS_PINNABLE = window.meetingClientSettings.public.notes.pinnable;
  const getAvailableActions = () => {
    const uploadIcon = 'upload';
    const pinIcon = 'presentation';
    const menuItems = [];
    if (amIPresenter) {
      menuItems.push({
        key: uniqueId('notes-option-'),
        icon: uploadIcon,
        dataTest: 'moveNotesToWhiteboard',
        label: intl.formatMessage(intlMessages.convertAndUploadLabel),
        disabled: converterButtonDisabled,
        onClick: () => {
          setConverterButtonDisabled(true);
          setTimeout(() => setConverterButtonDisabled(false), DEBOUNCE_TIMEOUT);
          return Service.convertAndUpload(presentations, padId, presentationEnabled);
        }
      });
    }
    if (amIPresenter && NOTES_IS_PINNABLE) {
      menuItems.push({
        key: uniqueId('notes-option-'),
        icon: pinIcon,
        dataTest: 'pinNotes',
        label: intl.formatMessage(intlMessages.pinNotes),
        onClick: () => {
          handlePinSharedNotes(true);
        }
      });
    }
    return menuItems;
  };
  const actions = getAvailableActions();
  if (actions.length === 0) return null;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(BBBMenu, {
    trigger: /*#__PURE__*/React.createElement(Trigger, {
      "data-test": "notesOptionsMenu",
      icon: "more",
      label: intl.formatMessage(intlMessages.options),
      "aria-label": intl.formatMessage(intlMessages.options),
      onClick: () => null
    }),
    opts: {
      id: 'notes-options-dropdown',
      keepMounted: true,
      transitionDuration: 0,
      elevation: 3,
      getcontentanchorel: null,
      fullwidth: 'true',
      anchorOrigin: {
        vertical: 'bottom',
        horizontal: isRTL ? 'right' : 'left'
      },
      transformOrigin: {
        vertical: 'top',
        horizontal: isRTL ? 'right' : 'left'
      }
    },
    actions: actions
  }));
};
const NotesDropdownContainerGraphql = props => {
  var _padIdData$sharedNote, _padIdData$sharedNote2;
  const {
    handlePinSharedNotes,
    presentationEnabled
  } = props;
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    presenter: user.presenter
  }));
  const amIPresenter = !!(currentUserData !== null && currentUserData !== void 0 && currentUserData.presenter);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const isRTL = layoutSelect(i => i.isRTL);
  const {
    data: presentationData
  } = useDeduplicatedSubscription(PROCESSED_PRESENTATIONS_SUBSCRIPTION);
  const presentations = (presentationData === null || presentationData === void 0 ? void 0 : presentationData.pres_presentation) || [];
  const NOTES_CONFIG = window.meetingClientSettings.public.notes;
  const {
    data: padIdData
  } = useQuery(GET_PAD_ID, {
    variables: {
      externalId: NOTES_CONFIG.id
    }
  });
  const padId = padIdData === null || padIdData === void 0 ? void 0 : (_padIdData$sharedNote = padIdData.sharedNotes) === null || _padIdData$sharedNote === void 0 ? void 0 : (_padIdData$sharedNote2 = _padIdData$sharedNote[0]) === null || _padIdData$sharedNote2 === void 0 ? void 0 : _padIdData$sharedNote2.padId;
  if (!padId) return null;
  return /*#__PURE__*/React.createElement(NotesDropdownGraphql, {
    amIPresenter: amIPresenter,
    isRTL: isRTL,
    presentations: presentations,
    handlePinSharedNotes: handlePinSharedNotes,
    presentationEnabled: presentationEnabled,
    padId: padId
  });
};
module.exportDefault(NotesDropdownContainerGraphql);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/notes-dropdown/queries.ts                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  GET_PAD_ID: () => GET_PAD_ID
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const GET_PAD_ID = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  query getPadId($externalId: String!) {\n    sharedNotes(where: { sharedNotesExtId: { _eq: $externalId } }) {\n      padId\n      sharedNotesExtId\n    }\n  }\n"])));
module.exportDefault({
  GET_PAD_ID
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/notes-dropdown/service.ts                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 0);
let PresentationUploaderService;
module.link("/imports/ui/components/presentation/presentation-uploader/service", {
  default(v) {
    PresentationUploaderService = v;
  }
}, 1);
let PadsService;
module.link("/imports/ui/components/pads/pads-graphql/service", {
  default(v) {
    PadsService = v;
  }
}, 2);
// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function convertAndUpload(presentations, padId) {
  let presentationEnabled = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  let filename = 'Shared_Notes';
  const duplicates = presentations.filter(
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  pres => {
    var _pres$filename, _pres$name;
    return ((_pres$filename = pres.filename) === null || _pres$filename === void 0 ? void 0 : _pres$filename.startsWith(filename)) || ((_pres$name = pres.name) === null || _pres$name === void 0 ? void 0 : _pres$name.startsWith(filename));
  }).length;
  if (duplicates !== 0) {
    filename = "".concat(filename, "(").concat(duplicates, ")");
  }
  const params = PadsService.getParams();
  const extension = 'pdf';
  filename = "".concat(filename, ".").concat(extension);
  const PADS_CONFIG = window.meetingClientSettings.public.pads;
  const exportUrl = Auth.authenticateURL("".concat(PADS_CONFIG.url, "/p/").concat(padId, "/export/").concat(extension, "?").concat(params));
  const sharedNotesAsFile = await fetch(exportUrl, {
    credentials: 'include'
  });
  const data = await sharedNotesAsFile.blob();
  const sharedNotesData = new File([data], filename, {
    type: data.type
  });
  PresentationUploaderService.handleSavePresentation([], false, {
    file: sharedNotesData,
    isDownloadable: false,
    isRemovable: true,
    filename: sharedNotesData.name,
    isCurrent: true,
    conversion: {
      done: false,
      error: false
    },
    upload: {
      done: false,
      error: false,
      progress: 0
    },
    exportation: {
      isRunning: false,
      error: false
    },
    onConversion: () => {},
    onUpload: () => {},
    onProgress: () => {},
    onDone: () => {}
  }, undefined, undefined, undefined, presentationEnabled);
}
module.exportDefault({
  convertAndUpload
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/component.tsx                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useEffect, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let injectWbResizeEvent;
module.link("/imports/ui/components/presentation/resize-wrapper/component", {
  default(v) {
    injectWbResizeEvent = v;
  }
}, 3);
let PadContainer;
module.link("/imports/ui/components/pads/pads-graphql/component", {
  default(v) {
    PadContainer = v;
  }
}, 4);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 5);
let Header;
module.link("/imports/ui/components/common/control-header/component", {
  default(v) {
    Header = v;
  }
}, 6);
let NotesDropdown;
module.link("./notes-dropdown/component", {
  default(v) {
    NotesDropdown = v;
  }
}, 7);
let PANELS, ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 8);
let layoutSelectInput, layoutDispatch, layoutSelectOutput;
module.link("/imports/ui/components/layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  }
}, 9);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 10);
let useHasPermission;
module.link("./hooks/useHasPermission", {
  default(v) {
    useHasPermission = v;
  }
}, 11);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 12);
let PINNED_PAD_SUBSCRIPTION;
module.link("./queries", {
  PINNED_PAD_SUBSCRIPTION(v) {
    PINNED_PAD_SUBSCRIPTION = v;
  }
}, 13);
let PIN_NOTES;
module.link("./mutations", {
  PIN_NOTES(v) {
    PIN_NOTES = v;
  }
}, 14);
let EXTERNAL_VIDEO_STOP;
module.link("/imports/ui/components/external-video-player/mutations", {
  EXTERNAL_VIDEO_STOP(v) {
    EXTERNAL_VIDEO_STOP = v;
  }
}, 15);
let screenshareHasEnded, useIsScreenBroadcasting;
module.link("/imports/ui/components/screenshare/service", {
  screenshareHasEnded(v) {
    screenshareHasEnded = v;
  },
  useIsScreenBroadcasting(v) {
    useIsScreenBroadcasting = v;
  }
}, 16);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 17);
let useIsPresentationEnabled;
module.link("../../services/features", {
  useIsPresentationEnabled(v) {
    useIsPresentationEnabled = v;
  }
}, 18);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 19);
const intlMessages = defineMessages({
  hide: {
    id: 'app.notes.hide',
    description: 'Label for hiding shared notes button'
  },
  title: {
    id: 'app.notes.title',
    description: 'Title for the shared notes'
  },
  unpinNotes: {
    id: 'app.notes.notesDropdown.unpinNotes',
    description: 'Label for unpin shared notes button'
  }
});
let timoutRef;
const sidebarContentToIgnoreDelay = ['captions'];
const NotesGraphql = props => {
  const {
    hasPermission,
    isRTL,
    layoutContextDispatch,
    isResizing,
    area,
    sidebarContent,
    sharedNotesOutput,
    amIPresenter,
    isToSharedNotesBeShow,
    shouldShowSharedNotesOnPresentationArea,
    handlePinSharedNotes,
    isPresentationEnabled
  } = props;
  const [shouldRenderNotes, setShouldRenderNotes] = useState(false);
  const intl = useIntl();
  const {
    isChrome
  } = browserInfo;
  const isOnMediaArea = area === 'media';
  const style = isOnMediaArea ? _objectSpread({
    position: 'absolute'
  }, sharedNotesOutput) : {};
  const isHidden = isOnMediaArea && (style.width === 0 || style.height === 0) || !isToSharedNotesBeShow && !sidebarContentToIgnoreDelay.includes(sidebarContent.sidebarContentPanel) || shouldShowSharedNotesOnPresentationArea;
  if (isHidden && !isOnMediaArea) {
    style.padding = 0;
    style.display = 'none';
  }
  const DELAY_UNMOUNT_SHARED_NOTES = window.meetingClientSettings.public.app.delayForUnmountOfSharedNote;
  useEffect(() => {
    if (isToSharedNotesBeShow) {
      setShouldRenderNotes(true);
      clearTimeout(timoutRef);
    } else {
      timoutRef = setTimeout(() => {
        setShouldRenderNotes(false);
      }, sidebarContentToIgnoreDelay.includes(sidebarContent.sidebarContentPanel) || shouldShowSharedNotesOnPresentationArea ? 0 : DELAY_UNMOUNT_SHARED_NOTES);
    }
    return () => clearTimeout(timoutRef);
  }, [isToSharedNotesBeShow, sidebarContent.sidebarContentPanel]);
  const renderHeaderOnMedia = () => {
    return amIPresenter ? /*#__PURE__*/React.createElement(Styled.Header, {
      rightButtonProps: {
        'aria-label': intl.formatMessage(intlMessages.unpinNotes),
        'data-test': 'unpinNotes',
        icon: 'close',
        label: intl.formatMessage(intlMessages.unpinNotes),
        onClick: () => {
          handlePinSharedNotes(false);
        }
      }
    }) : null;
  };
  const NOTES_CONFIG = window.meetingClientSettings.public.notes;
  return (shouldRenderNotes || shouldShowSharedNotesOnPresentationArea) && /*#__PURE__*/React.createElement(Styled.Notes, {
    "data-test": "notes",
    isChrome: isChrome,
    style: style
  }, !isOnMediaArea ?
  /*#__PURE__*/
  // @ts-ignore Until everything in Typescript
  React.createElement(Header, {
    leftButtonProps: {
      onClick: () => {
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: false
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.NONE
        });
      },
      'data-test': 'hideNotesLabel',
      'aria-label': intl.formatMessage(intlMessages.hide),
      label: intl.formatMessage(intlMessages.title)
    },
    customRightButton: /*#__PURE__*/React.createElement(NotesDropdown, {
      handlePinSharedNotes: handlePinSharedNotes,
      presentationEnabled: isPresentationEnabled
    })
  }) : renderHeaderOnMedia(), /*#__PURE__*/React.createElement(PadContainer, {
    externalId: NOTES_CONFIG.id,
    hasPermission: hasPermission,
    isResizing: isResizing,
    isRTL: isRTL
  }));
};
const NotesContainerGraphql = props => {
  var _pinnedPadData$shared, _pinnedPadData$shared2;
  const {
    area,
    isToSharedNotesBeShow
  } = props;
  const hasPermission = useHasPermission();
  const {
    data: pinnedPadData
  } = useDeduplicatedSubscription(PINNED_PAD_SUBSCRIPTION);
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    presenter: user.presenter
  }));
  const [pinSharedNotes] = useMutation(PIN_NOTES);
  // @ts-ignore Until everything in Typescript
  const cameraDock = layoutSelectInput(i => i.cameraDock);
  // @ts-ignore Until everything in Typescript
  const sharedNotesOutput = layoutSelectOutput(i => i.sharedNotes);
  // @ts-ignore Until everything in Typescript
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    isResizing
  } = cameraDock;
  const layoutContextDispatch = layoutDispatch();
  const amIPresenter = !!(currentUserData !== null && currentUserData !== void 0 && currentUserData.presenter);
  const NOTES_CONFIG = window.meetingClientSettings.public.notes;
  const isRTL = document.documentElement.getAttribute('dir') === 'rtl';
  const {
    isOpen: isSidebarContentOpen
  } = sidebarContent;
  const isGridLayout = useStorageKey('isGridEnabled');
  const shouldShowSharedNotesOnPresentationArea = isGridLayout ? !!pinnedPadData && ((_pinnedPadData$shared = pinnedPadData.sharedNotes[0]) === null || _pinnedPadData$shared === void 0 ? void 0 : _pinnedPadData$shared.sharedNotesExtId) === NOTES_CONFIG.id && isSidebarContentOpen : !!pinnedPadData && ((_pinnedPadData$shared2 = pinnedPadData.sharedNotes[0]) === null || _pinnedPadData$shared2 === void 0 ? void 0 : _pinnedPadData$shared2.sharedNotesExtId) === NOTES_CONFIG.id;
  const [stopExternalVideoShare] = useMutation(EXTERNAL_VIDEO_STOP);
  const isScreenBroadcasting = useIsScreenBroadcasting();
  const isPresentationEnabled = useIsPresentationEnabled();
  const handlePinSharedNotes = pinned => {
    if (pinned) {
      stopExternalVideoShare();
      if (isScreenBroadcasting) screenshareHasEnded();
    }
    pinSharedNotes({
      variables: {
        pinned
      }
    });
  };
  return /*#__PURE__*/React.createElement(NotesGraphql, {
    area: area,
    hasPermission: hasPermission,
    layoutContextDispatch: layoutContextDispatch,
    isResizing: isResizing,
    sidebarContent: sidebarContent,
    sharedNotesOutput: sharedNotesOutput,
    amIPresenter: amIPresenter,
    shouldShowSharedNotesOnPresentationArea: shouldShowSharedNotesOnPresentationArea,
    isRTL: isRTL,
    isToSharedNotesBeShow: isToSharedNotesBeShow,
    handlePinSharedNotes: handlePinSharedNotes,
    isPresentationEnabled: isPresentationEnabled
  });
};
module.exportDefault(injectWbResizeEvent(NotesContainerGraphql));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/mutations.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  PIN_NOTES: () => PIN_NOTES
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const PIN_NOTES = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation pinNotes($pinned: Boolean!) {\n    sharedNotesSetPinned(\n      sharedNotesExtId: notes,\n      pinned: $pinned\n    )\n  }\n"])));
module.exportDefault({
  PIN_NOTES
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/queries.ts                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  PINNED_PAD_SUBSCRIPTION: () => PINNED_PAD_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const PINNED_PAD_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription isSharedNotesPinned {\n    sharedNotes(where: { pinned: { _eq: true } }) {\n      pinned\n      sharedNotesExtId\n      model\n    }\n  }\n"])));
module.exportDefault({
  PINNED_PAD_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/service.ts                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let ACTIONS, PANELS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 0);
let useIsSharedNotesEnabled;
module.link("/imports/ui/services/features", {
  useIsSharedNotesEnabled(v) {
    useIsSharedNotesEnabled = v;
  }
}, 1);
const useIsEnabled = () => useIsSharedNotesEnabled();
// @ts-ignore Until everything in Typescript
const toggleNotesPanel = (sidebarContentPanel, layoutContextDispatch) => {
  layoutContextDispatch({
    type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
    value: sidebarContentPanel !== PANELS.SHARED_NOTES
  });
  layoutContextDispatch({
    type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
    value: sidebarContentPanel === PANELS.SHARED_NOTES ? PANELS.NONE : PANELS.SHARED_NOTES
  });
};
module.exportDefault({
  toggleNotesPanel,
  useIsEnabled
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notes/styles.ts                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let mdPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  mdPaddingX(v) {
    mdPaddingX = v;
  }
}, 1);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 2);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 3);
let CommonHeader;
module.link("/imports/ui/components/common/control-header/component", {
  default(v) {
    CommonHeader = v;
  }
}, 4);
const Notes = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: ", ";\n  padding: ", ";\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  overflow: hidden;\n  height: 100%;\n\n  ", "\n\n  @media ", " {\n    transform: none !important;\n    &.no-padding {\n      padding: 0;\n    }\n  }\n"])), colorWhite, mdPaddingX, _ref => {
  let {
    isChrome
  } = _ref;
  return isChrome && "\n    transform: translateZ(0);\n  ";
}, smallOnly);
const Header = styled(CommonHeader)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding-bottom: .2rem;\n"])));
module.exportDefault({
  Notes,
  Header
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"poll":{"components":{"DragAndDrop.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/components/DragAndDrop.tsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 1);
let React, useEffect, useRef, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 1);
const DragAndDrop = props => {
  const {
    MAX_INPUT_CHARS,
    handlePollValuesText
  } = props;
  const [drag, setDrag] = useState(false);
  const [pollValueText, setPollText] = useState('');
  const dropRef = useRef(null);
  const dragCounter = useRef(0);
  useEffect(() => {
    const handleDrag = e => {
      e.preventDefault();
      e.stopPropagation();
    };
    const handleDragIn = e => {
      var _e$dataTransfer;
      handleDrag(e);
      dragCounter.current += 1;
      if ((_e$dataTransfer = e.dataTransfer) !== null && _e$dataTransfer !== void 0 && _e$dataTransfer.items && e.dataTransfer.items.length > 0) {
        setDrag(true);
      }
    };
    const handleDragOut = e => {
      handleDrag(e);
      dragCounter.current -= 1;
      if (dragCounter.current > 0) return;
      setDrag(false);
    };
    const handleDrop = e => {
      var _e$dataTransfer2;
      handleDrag(e);
      setDrag(false);
      if ((_e$dataTransfer2 = e.dataTransfer) !== null && _e$dataTransfer2 !== void 0 && _e$dataTransfer2.files && e.dataTransfer.files.length > 0) {
        setPollValuesFromFile(e.dataTransfer.files[0]);
        dragCounter.current = 0;
      }
    };
    const div = dropRef.current;
    if (!div) return undefined;
    div.addEventListener('dragenter', handleDragIn);
    div.addEventListener('dragleave', handleDragOut);
    div.addEventListener('dragover', handleDrag);
    div.addEventListener('drop', handleDrop);
    return () => {
      div.removeEventListener('dragenter', handleDragIn);
      div.removeEventListener('dragleave', handleDragOut);
      div.removeEventListener('dragover', handleDrag);
      div.removeEventListener('drop', handleDrop);
    };
  }, []);
  const setPollValues = () => {
    if (pollValueText) {
      handlePollValuesText(pollValueText);
    }
  };
  const setPollValuesFromFile = file => {
    const reader = new FileReader();
    reader.onload = async e => {
      var _e$target;
      const result = (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result;
      if (!result) return;
      const text = typeof result === 'string' ? result : String(result);
      setPollValueText(text);
      setPollValues();
    };
    reader.readAsText(file);
  };
  const setPollValueText = pollText => {
    const arr = pollText.split('\n');
    const text = arr.map(line => line.length > MAX_INPUT_CHARS ? line.substring(0, MAX_INPUT_CHARS) : line).join('\n');
    setPollText(text);
  };
  const getCleanProps = () => {
    const cleanProps = _objectSpread({}, props);
    const propsToDelete = ['MAX_INPUT_CHARS', 'handlePollValuesText'];
    propsToDelete.forEach(prop => {
      delete cleanProps[prop];
    });
    return props;
  };
  return /*#__PURE__*/React.createElement(Styled.DndTextArea, _extends({
    ref: dropRef,
    active: drag
    // eslint-disable-next-line react/jsx-props-no-spreading
  }, getCleanProps()));
};
module.exportDefault(DragAndDrop);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"EmptySlideArea.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/components/EmptySlideArea.tsx                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 2);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const intlMessages = defineMessages({
  noPresentationSelected: {
    id: 'app.poll.noPresentationSelected',
    description: 'no presentation label'
  },
  clickHereToSelect: {
    id: 'app.poll.clickHereToSelect',
    description: 'open uploader modal button label'
  }
});
const EmptySlideArea = () => {
  const intl = useIntl();
  return /*#__PURE__*/React.createElement(Styled.NoSlidePanelContainer, null, /*#__PURE__*/React.createElement(Styled.SectionHeading, {
    "data-test": "noPresentation"
  }, intl.formatMessage(intlMessages.noPresentationSelected)), /*#__PURE__*/React.createElement(Styled.PollButton, {
    label: intl.formatMessage(intlMessages.clickHereToSelect),
    color: "primary",
    onClick: () => Session.setItem('showUploadPresentationView', true)
  }));
};
module.exportDefault(EmptySlideArea);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"LiveResult.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/components/LiveResult.tsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 0);
let React, useCallback;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 3);
let Bar, BarChart, ResponsiveContainer, XAxis, YAxis;
module.link("recharts", {
  Bar(v) {
    Bar = v;
  },
  BarChart(v) {
    BarChart = v;
  },
  ResponsiveContainer(v) {
    ResponsiveContainer = v;
  },
  XAxis(v) {
    XAxis = v;
  },
  YAxis(v) {
    YAxis = v;
  }
}, 4);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 5);
let getCurrentPollData;
module.link("../queries", {
  getCurrentPollData(v) {
    getCurrentPollData = v;
  }
}, 6);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 7);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 8);
let POLL_CANCEL, POLL_PUBLISH_RESULT;
module.link("../mutations", {
  POLL_CANCEL(v) {
    POLL_CANCEL = v;
  },
  POLL_PUBLISH_RESULT(v) {
    POLL_PUBLISH_RESULT = v;
  }
}, 9);
let layoutDispatch;
module.link("../../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 10);
let ACTIONS, PANELS;
module.link("../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 11);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 12);
const intlMessages = defineMessages({
  usersTitle: {
    id: 'app.poll.liveResult.usersTitle',
    description: 'heading label for poll users'
  },
  responsesTitle: {
    id: 'app.poll.liveResult.responsesTitle',
    description: 'heading label for poll responses'
  },
  publishLabel: {
    id: 'app.poll.publishLabel',
    description: 'label for the publish button'
  },
  cancelPollLabel: {
    id: 'app.poll.cancelPollLabel',
    description: 'label for cancel poll button'
  },
  backLabel: {
    id: 'app.poll.backLabel',
    description: 'label for the return to poll options button'
  },
  doneLabel: {
    id: 'app.createBreakoutRoom.doneLabel',
    description: 'label shown when all users have responded'
  },
  waitingLabel: {
    id: 'app.poll.waitingLabel',
    description: 'label shown while waiting for responses'
  },
  secretPollLabel: {
    id: 'app.poll.liveResult.secretLabel',
    description: 'label shown instead of users in poll responses if poll is secret'
  },
  activePollInstruction: {
    id: 'app.poll.activePollInstruction',
    description: 'instructions displayed when a poll is active'
  }
});
const LiveResult = _ref => {
  let {
    questionText,
    responses,
    usersCount,
    numberOfAnswerCount,
    animations,
    pollId,
    users,
    isSecret
  } = _ref;
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  const PUBLIC_CHAT_KEY = CHAT_CONFIG.public_group_id;
  const intl = useIntl();
  const [pollPublishResult] = useMutation(POLL_PUBLISH_RESULT);
  const [stopPoll] = useMutation(POLL_CANCEL);
  const layoutContextDispatch = layoutDispatch();
  const publishPoll = useCallback(pId => {
    pollPublishResult({
      variables: {
        pollId: pId
      }
    });
  }, []);
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.Instructions, null, intl.formatMessage(intlMessages.activePollInstruction)), /*#__PURE__*/React.createElement(Styled.Stats, null, questionText ? /*#__PURE__*/React.createElement(Styled.Title, {
    "data-test": "currentPollQuestion"
  }, questionText) : null, /*#__PURE__*/React.createElement(Styled.Status, null, usersCount !== numberOfAnswerCount ? /*#__PURE__*/React.createElement("span", null, "".concat(intl.formatMessage(intlMessages.waitingLabel, {
    0: numberOfAnswerCount,
    1: usersCount
  }), " ")) : /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.doneLabel)), usersCount !== numberOfAnswerCount ? /*#__PURE__*/React.createElement(Styled.ConnectingAnimation, {
    animations: animations
  }) : null), /*#__PURE__*/React.createElement(ResponsiveContainer, {
    width: "90%",
    height: 250
  }, /*#__PURE__*/React.createElement(BarChart, {
    data: responses,
    layout: "vertical"
  }, /*#__PURE__*/React.createElement(XAxis, {
    type: "number"
  }), /*#__PURE__*/React.createElement(YAxis, {
    width: 70,
    type: "category",
    dataKey: "optionDesc"
  }), /*#__PURE__*/React.createElement(Bar, {
    dataKey: "optionResponsesCount",
    fill: "#0C57A7"
  })))), numberOfAnswerCount >= 0 ? /*#__PURE__*/React.createElement(Styled.ButtonsActions, null, /*#__PURE__*/React.createElement(Styled.PublishButton, {
    onClick: () => {
      Session.setItem('pollInitiated', false);
      publishPoll(pollId);
      stopPoll();
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
        value: true
      });
      layoutContextDispatch({
        type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
        value: PANELS.CHAT
      });
      layoutContextDispatch({
        type: ACTIONS.SET_ID_CHAT_OPEN,
        value: PUBLIC_CHAT_KEY
      });
    },
    disabled: numberOfAnswerCount <= 0,
    label: intl.formatMessage(intlMessages.publishLabel),
    "data-test": "publishPollingLabel",
    color: "primary"
  }), /*#__PURE__*/React.createElement(Styled.CancelButton, {
    onClick: () => {
      Session.setItem('pollInitiated', false);
      Session.setItem('resetPollPanel', true);
      stopPoll();
    },
    label: intl.formatMessage(intlMessages.cancelPollLabel),
    "data-test": "cancelPollLabel"
  })) : /*#__PURE__*/React.createElement(Styled.LiveResultButton, {
    onClick: () => {
      stopPoll();
    },
    label: intl.formatMessage(intlMessages.backLabel),
    color: "primary",
    "data-test": "restartPoll"
  }), /*#__PURE__*/React.createElement(Styled.Separator, null), !isSecret ? /*#__PURE__*/React.createElement("table", null, /*#__PURE__*/React.createElement("tbody", null, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement(Styled.THeading, null, intl.formatMessage(intlMessages.usersTitle)), /*#__PURE__*/React.createElement(Styled.THeading, null, intl.formatMessage(intlMessages.responsesTitle))), users.map(user => /*#__PURE__*/React.createElement("tr", {
    key: user.user.userId
  }, /*#__PURE__*/React.createElement(Styled.ResultLeft, null, user.user.name), /*#__PURE__*/React.createElement(Styled.ResultRight, {
    "data-test": "userVoteLiveResult"
  }, user.optionDescIds.join()))))) : /*#__PURE__*/React.createElement("div", null, intl.formatMessage(intlMessages.secretPollLabel)));
};
const LiveResultContainer = () => {
  const {
    data: currentPollData,
    loading: currentPollLoading,
    error: currentPollDataError
  } = useDeduplicatedSubscription(getCurrentPollData);
  if (currentPollLoading || !currentPollData) {
    return null;
  }
  if (currentPollDataError) {
    logger.error(currentPollDataError);
    return /*#__PURE__*/React.createElement("div", null, JSON.stringify(currentPollDataError));
  }
  if (!currentPollData.poll.length) return null;
  const Settings = getSettingsSingletonInstance();
  // @ts-ignore - JS code
  const {
    animations
  } = Settings.application;
  const currentPoll = currentPollData.poll[0];
  const isSecret = currentPoll.secret;
  const {
    questionText,
    responses,
    pollId,
    users
  } = currentPoll;
  const numberOfAnswerCount = currentPoll.responses_aggregate.aggregate.sum.optionResponsesCount;
  const numberOfUsersCount = currentPoll.users_aggregate.aggregate.count;
  return /*#__PURE__*/React.createElement(LiveResult, {
    questionText: questionText,
    responses: responses,
    isSecret: isSecret,
    usersCount: numberOfUsersCount,
    numberOfAnswerCount: numberOfAnswerCount !== null && numberOfAnswerCount !== void 0 ? numberOfAnswerCount : 0,
    animations: animations,
    pollId: pollId,
    users: users
  });
};
module.exportDefault(LiveResultContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"PollInputs.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/components/PollInputs.tsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let pollTypes;
module.link("../service", {
  pollTypes(v) {
    pollTypes = v;
  }
}, 2);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const intlMessages = defineMessages({
  customPlaceholder: {
    id: 'app.poll.customPlaceholder',
    description: 'custom poll input field placeholder text'
  },
  delete: {
    id: 'app.poll.optionDelete.label',
    description: ''
  },
  deleteRespDesc: {
    id: 'app.poll.deleteRespDesc',
    description: ''
  },
  emptyPollOpt: {
    id: 'app.poll.emptyPollOpt',
    description: 'screen reader for blank poll option'
  }
});
const PollInputs = _ref => {
  let {
    optList,
    handleInputChange,
    handleRemoveOption,
    type,
    error
  } = _ref;
  const POLL_SETTINGS = window.meetingClientSettings.public.poll;
  const MAX_CUSTOM_FIELDS = POLL_SETTINGS.maxCustom;
  const MAX_INPUT_CHARS = POLL_SETTINGS.maxTypedAnswerLength;
  const MIN_OPTIONS_LENGTH = 2;
  const intl = useIntl();
  let hasVal = false;
  return optList.slice(0, MAX_CUSTOM_FIELDS).map((o, i) => {
    const pollOptionKey = "poll-option-".concat(i);
    if (o.val && o.val.length > 0) hasVal = true;
    return /*#__PURE__*/React.createElement("span", {
      key: pollOptionKey
    }, /*#__PURE__*/React.createElement(Styled.OptionWrapper, null, /*#__PURE__*/React.createElement(Styled.PollOptionInput, {
      type: "text",
      value: o.val,
      placeholder: intl.formatMessage(intlMessages.customPlaceholder),
      "data-test": "pollOptionItem",
      onChange: e => handleInputChange(e, i),
      maxLength: MAX_INPUT_CHARS,
      onPaste: e => {
        e.stopPropagation();
      },
      onCut: e => {
        e.stopPropagation();
      },
      onCopy: e => {
        e.stopPropagation();
      }
    }), optList.length > MIN_OPTIONS_LENGTH && /*#__PURE__*/React.createElement(Styled.DeletePollOptionButton, {
      label: intl.formatMessage(intlMessages.delete),
      "aria-describedby": "option-".concat(i),
      icon: "delete",
      "data-test": "deletePollOption",
      hideLabel: true,
      circle: true,
      color: "default",
      onClick: () => {
        handleRemoveOption(i);
      }
    }), /*#__PURE__*/React.createElement("span", {
      className: "sr-only",
      id: "option-".concat(i)
    }, intl.formatMessage(intlMessages.deleteRespDesc, {
      0: o.val || intl.formatMessage(intlMessages.emptyPollOpt)
    }))), !hasVal && type !== pollTypes.Response && error ? /*#__PURE__*/React.createElement(Styled.InputError, {
      "data-test": "errorNoValueInput"
    }, error) : /*#__PURE__*/React.createElement(Styled.ErrorSpacer, null, "\xA0"));
  });
};
module.exportDefault(PollInputs);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"PollQuestionArea.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/components/PollQuestionArea.tsx                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let DraggableTextArea;
module.link("./DragAndDrop", {
  default(v) {
    DraggableTextArea = v;
  }
}, 2);
let pollTypes;
module.link("../service", {
  pollTypes(v) {
    pollTypes = v;
  }
}, 3);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const QUESTION_MAX_INPUT_CHARS = 1200;
const intlMessages = defineMessages({
  questionAndOptionsPlaceholder: {
    id: 'app.poll.questionAndoptions.label',
    description: 'poll input questions and options label'
  },
  questionLabel: {
    id: 'app.poll.question.label',
    description: ''
  },
  optionalQuestionLabel: {
    id: 'app.poll.optionalQuestion.label',
    description: ''
  }
});
const PollQuestionArea = _ref => {
  let {
    customInput,
    optList,
    warning,
    error,
    type,
    questionAndOptions,
    handleTextareaChange,
    setIsPasting,
    handlePollLetterOptions,
    textareaRef,
    question
  } = _ref;
  const POLL_SETTINGS = window.meetingClientSettings.public.poll;
  const MAX_INPUT_CHARS = POLL_SETTINGS.maxTypedAnswerLength;
  const intl = useIntl();
  const hasOptionError = customInput && optList.length === 0 && error;
  const hasWarning = customInput && warning;
  const hasQuestionError = type === pollTypes.Response && questionAndOptions.length === 0 && error;
  const questionsAndOptionsPlaceholder = intlMessages.questionAndOptionsPlaceholder;
  const questionPlaceholder = type === pollTypes.Response ? intlMessages.questionLabel : intlMessages.optionalQuestionLabel;
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.PollQuestionArea, {
    hasError: hasQuestionError || hasOptionError,
    "data-test": "pollQuestionArea",
    value: customInput ? questionAndOptions : question,
    onChange: e => handleTextareaChange(e),
    onPaste: e => {
      e.stopPropagation();
      setIsPasting(true);
    },
    onCut: e => {
      e.stopPropagation();
    },
    onCopy: e => {
      e.stopPropagation();
    },
    onKeyPress: event => {
      if (event.key === 'Enter' && customInput) {
        handlePollLetterOptions();
      }
    },
    rows: "5",
    cols: "35",
    maxLength: QUESTION_MAX_INPUT_CHARS,
    "aria-label": intl.formatMessage(customInput ? questionsAndOptionsPlaceholder : questionPlaceholder),
    placeholder: intl.formatMessage(customInput ? questionsAndOptionsPlaceholder : questionPlaceholder),
    MAX_INPUT_CHARS,
    as: customInput ? DraggableTextArea : 'textarea',
    ref: textareaRef
  }), hasQuestionError || hasOptionError ? /*#__PURE__*/React.createElement(Styled.InputError, null, error) : /*#__PURE__*/React.createElement(Styled.ErrorSpacer, null, "\xA0"), hasWarning ? /*#__PURE__*/React.createElement(Styled.Warning, null, warning) : /*#__PURE__*/React.createElement(Styled.ErrorSpacer, null, "\xA0"));
};
module.exportDefault(PollQuestionArea);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ResponseArea.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/components/ResponseArea.tsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Checkbox;
module.link("/imports/ui/components/common/checkbox/component", {
  default(v) {
    Checkbox = v;
  }
}, 2);
let Toggle;
module.link("/imports/ui/components/common/switch/component", {
  default(v) {
    Toggle = v;
  }
}, 3);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let pollTypes, isDefaultPoll;
module.link("../service", {
  pollTypes(v) {
    pollTypes = v;
  },
  isDefaultPoll(v) {
    isDefaultPoll = v;
  }
}, 5);
let StartPollButton;
module.link("./StartPollButton", {
  default(v) {
    StartPollButton = v;
  }
}, 6);
let PollInputs;
module.link("./PollInputs", {
  default(v) {
    PollInputs = v;
  }
}, 7);
const intlMessages = defineMessages({
  enableMultipleResponseLabel: {
    id: 'app.poll.enableMultipleResponseLabel',
    description: 'label for checkbox to enable multiple choice'
  },
  addOptionLabel: {
    id: 'app.poll.addItem.label',
    description: ''
  },
  secretPollLabel: {
    id: 'app.poll.secretPoll.label',
    description: ''
  },
  isSecretPollLabel: {
    id: 'app.poll.secretPoll.isSecretLabel',
    description: ''
  },
  on: {
    id: 'app.switch.onLabel',
    description: 'label for toggle switch on state'
  },
  off: {
    id: 'app.switch.offLabel',
    description: 'label for toggle switch off state'
  }
});
const ResponseArea = _ref => {
  let {
    type,
    toggleIsMultipleResponse,
    isMultipleResponse,
    optList,
    handleAddOption,
    secretPoll,
    question,
    setError,
    setIsPolling,
    hasCurrentPresentation,
    handleToggle,
    error,
    handleInputChange,
    handleRemoveOption
  } = _ref;
  const POLL_SETTINGS = window.meetingClientSettings.public.poll;
  const MAX_CUSTOM_FIELDS = POLL_SETTINGS.maxCustom;
  const intl = useIntl();
  const defaultPoll = isDefaultPoll(type);
  if (defaultPoll || type === pollTypes.Response) {
    return /*#__PURE__*/React.createElement(Styled.ResponseArea, null, defaultPoll && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.PollCheckbox, {
      "data-test": "allowMultiple"
    }, /*#__PURE__*/React.createElement(Checkbox, {
      onChange: toggleIsMultipleResponse,
      checked: isMultipleResponse,
      ariaLabelledBy: "multipleResponseCheckboxLabel",
      label: intl.formatMessage(intlMessages.enableMultipleResponseLabel)
    })), /*#__PURE__*/React.createElement("div", {
      id: "multipleResponseCheckboxLabel",
      hidden: true
    }, intl.formatMessage(intlMessages.enableMultipleResponseLabel))), defaultPoll && /*#__PURE__*/React.createElement(PollInputs, {
      error: error,
      optList: optList,
      handleInputChange: handleInputChange,
      handleRemoveOption: handleRemoveOption,
      type: type
    }), defaultPoll && /*#__PURE__*/React.createElement(Styled.AddItemButton, {
      "data-test": "addPollItem",
      label: intl.formatMessage(intlMessages.addOptionLabel),
      "aria-describedby": "add-item-button",
      color: "default",
      icon: "add",
      disabled: optList.length >= MAX_CUSTOM_FIELDS,
      onClick: () => handleAddOption()
    }), /*#__PURE__*/React.createElement(Styled.AnonymousRow, null, /*#__PURE__*/React.createElement(Styled.AnonymousHeadingCol, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.AnonymousHeading, null, intl.formatMessage(intlMessages.secretPollLabel))), /*#__PURE__*/React.createElement(Styled.AnonymousToggleCol, null, /*#__PURE__*/React.createElement(Styled.Toggle, null, /*#__PURE__*/React.createElement(Styled.ToggleLabel, null, secretPoll ? intl.formatMessage(intlMessages.on) : intl.formatMessage(intlMessages.off)), /*#__PURE__*/React.createElement(Toggle
    // @ts-ignore - component Wrapped by intl, not reflecting the correct props
    , {
      icons: false,
      defaultChecked: secretPoll,
      onChange: () => handleToggle(),
      ariaLabel: intl.formatMessage(intlMessages.secretPollLabel),
      showToggleLabel: false,
      "data-test": "anonymousPollBtn"
    })))), secretPoll && /*#__PURE__*/React.createElement(Styled.PollParagraph, null, intl.formatMessage(intlMessages.isSecretPollLabel)), /*#__PURE__*/React.createElement(StartPollButton, {
      hasCurrentPresentation: hasCurrentPresentation,
      question: question,
      isMultipleResponse: isMultipleResponse,
      optList: optList,
      type: type,
      secretPoll: secretPoll,
      setError: setError,
      setIsPolling: setIsPolling,
      key: "startPollButton"
    }));
  }
  return null;
};
module.exportDefault(ResponseArea);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ResponseChoices.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/components/ResponseChoices.tsx                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let pollTypes;
module.link("../service", {
  pollTypes(v) {
    pollTypes = v;
  }
}, 3);
let ResponseArea;
module.link("./ResponseArea", {
  default(v) {
    ResponseArea = v;
  }
}, 4);
const intlMessages = defineMessages({
  typedResponseDesc: {
    id: 'app.poll.typedResponse.desc',
    description: ''
  },
  responseChoices: {
    id: 'app.poll.responseChoices.label',
    description: ''
  },
  pollingQuestion: {
    id: 'app.polling.pollQuestionTitle',
    description: 'polling question header'
  }
});
const ResponseChoices = _ref => {
  let {
    type,
    toggleIsMultipleResponse,
    isMultipleResponse,
    optList,
    handleAddOption,
    secretPoll,
    question,
    setError,
    setIsPolling,
    hasCurrentPresentation,
    handleToggle,
    error,
    handleInputChange,
    handleRemoveOption,
    customInput,
    questionAndOptions
  } = _ref;
  const intl = useIntl();
  if (!customInput && type || questionAndOptions && customInput) {
    return /*#__PURE__*/React.createElement("div", {
      "data-test": "responseChoices"
    }, customInput && questionAndOptions && /*#__PURE__*/React.createElement(Styled.Question, null, /*#__PURE__*/React.createElement(Styled.SectionHeading, null, intl.formatMessage(intlMessages.pollingQuestion)), /*#__PURE__*/React.createElement(Styled.PollParagraph, null, /*#__PURE__*/React.createElement("span", null, question))), /*#__PURE__*/React.createElement(Styled.SectionHeading, null, intl.formatMessage(intlMessages.responseChoices)), type === pollTypes.Response && /*#__PURE__*/React.createElement(Styled.PollParagraph, null, /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.typedResponseDesc))), /*#__PURE__*/React.createElement(ResponseArea, {
      error: error,
      type: type,
      toggleIsMultipleResponse: toggleIsMultipleResponse,
      isMultipleResponse: isMultipleResponse,
      optList: optList,
      handleAddOption: handleAddOption,
      secretPoll: secretPoll,
      question: question,
      setError: setError,
      setIsPolling: setIsPolling,
      hasCurrentPresentation: hasCurrentPresentation,
      handleToggle: handleToggle,
      handleInputChange: handleInputChange,
      handleRemoveOption: handleRemoveOption
    }));
  }
  return null;
};
module.exportDefault(ResponseChoices);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ResponseTypes.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/components/ResponseTypes.tsx                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let pollTypes;
module.link("../service", {
  pollTypes(v) {
    pollTypes = v;
  }
}, 2);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const intlMessages = defineMessages({
  responseTypesLabel: {
    id: 'app.poll.responseTypes.label',
    description: ''
  },
  tf: {
    id: 'app.poll.tf',
    description: 'label for true / false poll'
  },
  true: {
    id: 'app.poll.answer.true',
    description: ''
  },
  false: {
    id: 'app.poll.answer.false',
    description: ''
  },
  a4: {
    id: 'app.poll.a4',
    description: 'label for A / B / C / D poll'
  },
  a: {
    id: 'app.poll.answer.a',
    description: ''
  },
  b: {
    id: 'app.poll.answer.b',
    description: ''
  },
  c: {
    id: 'app.poll.answer.c',
    description: ''
  },
  d: {
    id: 'app.poll.answer.d',
    description: ''
  },
  e: {
    id: 'app.poll.answer.e',
    description: ''
  },
  yna: {
    id: 'app.poll.yna',
    description: ''
  },
  yes: {
    id: 'app.poll.y',
    description: ''
  },
  no: {
    id: 'app.poll.n',
    description: ''
  },
  abstention: {
    id: 'app.poll.abstention',
    description: ''
  },
  userResponse: {
    id: 'app.poll.userResponse.label',
    description: ''
  }
});
const ResponseTypes = _ref => {
  let {
    customInput,
    setType,
    type,
    setOptList
  } = _ref;
  const intl = useIntl();
  if (!customInput) {
    return /*#__PURE__*/React.createElement("div", {
      "data-test": "responseTypes"
    }, /*#__PURE__*/React.createElement(Styled.SectionHeading, null, intl.formatMessage(intlMessages.responseTypesLabel)), /*#__PURE__*/React.createElement(Styled.ResponseType, null, /*#__PURE__*/React.createElement(Styled.PollConfigButton, {
      selected: type === pollTypes.TrueFalse,
      small: false,
      label: intl.formatMessage(intlMessages.tf),
      "aria-describedby": "poll-config-button",
      "data-test": "pollTrueFalse",
      color: "default",
      onClick: () => {
        setType(pollTypes.TrueFalse);
        setOptList([{
          val: intl.formatMessage(intlMessages.true)
        }, {
          val: intl.formatMessage(intlMessages.false)
        }]);
      }
    }), /*#__PURE__*/React.createElement(Styled.PollConfigButton, {
      selected: type === pollTypes.Letter,
      small: false,
      label: intl.formatMessage(intlMessages.a4),
      "aria-describedby": "poll-config-button",
      "data-test": "pollLetterAlternatives",
      color: "default",
      onClick: () => {
        if (!customInput) {
          setType(pollTypes.Letter);
          setOptList([{
            val: intl.formatMessage(intlMessages.a)
          }, {
            val: intl.formatMessage(intlMessages.b)
          }, {
            val: intl.formatMessage(intlMessages.c)
          }, {
            val: intl.formatMessage(intlMessages.d)
          }]);
        }
      }
    }), /*#__PURE__*/React.createElement(Styled.PollConfigButton, {
      selected: type === pollTypes.YesNoAbstention,
      small: false,
      full: true,
      label: intl.formatMessage(intlMessages.yna),
      "aria-describedby": "poll-config-button",
      "data-test": "pollYesNoAbstentionBtn",
      color: "default",
      onClick: () => {
        setType(pollTypes.YesNoAbstention);
        setOptList([{
          val: intl.formatMessage(intlMessages.yes)
        }, {
          val: intl.formatMessage(intlMessages.no)
        }, {
          val: intl.formatMessage(intlMessages.abstention)
        }]);
      }
    }), /*#__PURE__*/React.createElement(Styled.PollConfigButton, {
      selected: type === pollTypes.Response,
      small: false,
      full: true,
      label: intl.formatMessage(intlMessages.userResponse),
      "aria-describedby": "poll-config-button",
      "data-test": "userResponseBtn",
      color: "default",
      onClick: () => {
        setType(pollTypes.Response);
      }
    })));
  }
  return null;
};
module.exportDefault(ResponseTypes);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"StartPollButton.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/components/StartPollButton.tsx                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let Styled;
module.link("../styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let pollTypes, checkPollType;
module.link("../service", {
  pollTypes(v) {
    pollTypes = v;
  },
  checkPollType(v) {
    checkPollType = v;
  }
}, 4);
let POLL_CREATE;
module.link("../mutations", {
  POLL_CREATE(v) {
    POLL_CREATE = v;
  }
}, 5);
const intlMessages = defineMessages({
  startPollLabel: {
    id: 'app.poll.start.label',
    description: ''
  },
  questionErr: {
    id: 'app.poll.questionErr',
    description: 'question text area error label'
  },
  optionErr: {
    id: 'app.poll.optionErr',
    description: 'poll input error label'
  },
  yes: {
    id: 'app.poll.y',
    description: ''
  },
  no: {
    id: 'app.poll.n',
    description: ''
  },
  abstention: {
    id: 'app.poll.abstention',
    description: ''
  },
  true: {
    id: 'app.poll.answer.true',
    description: ''
  },
  false: {
    id: 'app.poll.answer.false',
    description: ''
  }
});
const StartPollButton = _ref => {
  let {
    optList,
    question,
    type,
    setError,
    setIsPolling,
    secretPoll,
    isMultipleResponse,
    hasCurrentPresentation
  } = _ref;
  const CHAT_CONFIG = window.meetingClientSettings.public.chat;
  const PUBLIC_CHAT_KEY = CHAT_CONFIG.public_id;
  const POLL_SETTINGS = window.meetingClientSettings.public.poll;
  const MAX_CUSTOM_FIELDS = POLL_SETTINGS.maxCustom;
  const intl = useIntl();
  const [createPoll] = useMutation(POLL_CREATE);
  const startPoll = function (pollType, secretPoll, question, isMultipleResponse) {
    let answers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
    const pollId = hasCurrentPresentation || PUBLIC_CHAT_KEY;
    createPoll({
      variables: {
        pollType,
        pollId: "".concat(pollId, "/").concat(new Date().getTime()),
        secretPoll,
        question,
        isMultipleResponse,
        answers
      }
    });
  };
  return /*#__PURE__*/React.createElement(Styled.StartPollBtn, {
    "data-test": "startPoll",
    label: intl.formatMessage(intlMessages.startPollLabel),
    color: "primary",
    onClick: () => {
      const optionsList = optList.slice(0, MAX_CUSTOM_FIELDS);
      let hasVal = false;
      optionsList.forEach(o => {
        if (o.val.trim().length > 0) hasVal = true;
      });
      let err = null;
      if (type === pollTypes.Response && question.length === 0) {
        err = intl.formatMessage(intlMessages.questionErr);
      }
      if (!hasVal && type !== pollTypes.Response) {
        err = intl.formatMessage(intlMessages.optionErr);
      }
      if (err) {
        setError(err);
      } else {
        setIsPolling(true);
        const verifiedPollType = checkPollType(type, optionsList, intl.formatMessage(intlMessages.yes), intl.formatMessage(intlMessages.no), intl.formatMessage(intlMessages.abstention), intl.formatMessage(intlMessages.true), intl.formatMessage(intlMessages.false));
        const verifiedOptions = optionsList.map(o => {
          if (o.val.trim().length > 0) return o.val;
          return null;
        });
        if (verifiedPollType === pollTypes.Custom) {
          startPoll(verifiedPollType, secretPoll, question, isMultipleResponse, verifiedOptions === null || verifiedOptions === void 0 ? void 0 : verifiedOptions.filter(Boolean));
        } else {
          startPoll(verifiedPollType, secretPoll, question, isMultipleResponse);
        }
      }
    }
  });
};
module.exportDefault(StartPollButton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/component.tsx                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect, useRef, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 2);
let Header;
module.link("/imports/ui/components/common/control-header/component", {
  default(v) {
    Header = v;
  }
}, 3);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 4);
let layoutDispatch, layoutSelectInput;
module.link("../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  }
}, 5);
let addAlert;
module.link("../screenreader-alert/service", {
  addAlert(v) {
    addAlert = v;
  }
}, 6);
let PANELS, ACTIONS;
module.link("../layout/enums", {
  PANELS(v) {
    PANELS = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 7);
let useMeeting;
module.link("/imports/ui/core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 8);
let POLL_CANCEL;
module.link("./mutations", {
  POLL_CANCEL(v) {
    POLL_CANCEL = v;
  }
}, 9);
let getHasCurrentPresentation;
module.link("./queries", {
  getHasCurrentPresentation(v) {
    getHasCurrentPresentation = v;
  }
}, 10);
let EmptySlideArea;
module.link("./components/EmptySlideArea", {
  default(v) {
    EmptySlideArea = v;
  }
}, 11);
let getSplittedQuestionAndOptions, pollTypes, validateInput;
module.link("./service", {
  getSplittedQuestionAndOptions(v) {
    getSplittedQuestionAndOptions = v;
  },
  pollTypes(v) {
    pollTypes = v;
  },
  validateInput(v) {
    validateInput = v;
  }
}, 12);
let Toggle;
module.link("/imports/ui/components/common/switch/component", {
  default(v) {
    Toggle = v;
  }
}, 13);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 14);
let ResponseChoices;
module.link("./components/ResponseChoices", {
  default(v) {
    ResponseChoices = v;
  }
}, 15);
let ResponseTypes;
module.link("./components/ResponseTypes", {
  default(v) {
    ResponseTypes = v;
  }
}, 16);
let PollQuestionArea;
module.link("./components/PollQuestionArea", {
  default(v) {
    PollQuestionArea = v;
  }
}, 17);
let LiveResultContainer;
module.link("./components/LiveResult", {
  default(v) {
    LiveResultContainer = v;
  }
}, 18);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 19);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 20);
const intlMessages = defineMessages({
  pollPaneTitle: {
    id: 'app.poll.pollPaneTitle',
    description: 'heading label for the poll menu'
  },
  closeLabel: {
    id: 'app.poll.closeLabel',
    description: 'label for poll pane close button'
  },
  hidePollDesc: {
    id: 'app.poll.hidePollDesc',
    description: 'aria label description for hide poll button'
  },
  quickPollInstruction: {
    id: 'app.poll.quickPollInstruction',
    description: 'instructions for using pre configured polls'
  },
  activePollInstruction: {
    id: 'app.poll.activePollInstruction',
    description: 'instructions displayed when a poll is active'
  },
  dragDropPollInstruction: {
    id: 'app.poll.dragDropPollInstruction',
    description: 'instructions for upload poll options via drag and drop'
  },
  ariaInputCount: {
    id: 'app.poll.ariaInputCount',
    description: 'aria label for custom poll input field'
  },
  customPlaceholder: {
    id: 'app.poll.customPlaceholder',
    description: 'custom poll input field placeholder text'
  },
  noPresentationSelected: {
    id: 'app.poll.noPresentationSelected',
    description: 'no presentation label'
  },
  clickHereToSelect: {
    id: 'app.poll.clickHereToSelect',
    description: 'open uploader modal button label'
  },
  questionErr: {
    id: 'app.poll.questionErr',
    description: 'question text area error label'
  },
  questionAndOptionsPlaceholder: {
    id: 'app.poll.questionAndoptions.label',
    description: 'poll input questions and options label'
  },
  customInputToggleLabel: {
    id: 'app.poll.customInput.label',
    description: 'poll custom input toogle button label'
  },
  customInputInstructionsLabel: {
    id: 'app.poll.customInputInstructions.label',
    description: 'poll custom input instructions label'
  },
  maxOptionsWarning: {
    id: 'app.poll.maxOptionsWarning.label',
    description: 'poll max options error'
  },
  optionErr: {
    id: 'app.poll.optionErr',
    description: 'poll input error label'
  },
  tf: {
    id: 'app.poll.tf',
    description: 'label for true / false poll'
  },
  a4: {
    id: 'app.poll.a4',
    description: 'label for A / B / C / D poll'
  },
  delete: {
    id: 'app.poll.optionDelete.label',
    description: ''
  },
  questionLabel: {
    id: 'app.poll.question.label',
    description: ''
  },
  optionalQuestionLabel: {
    id: 'app.poll.optionalQuestion.label',
    description: ''
  },
  userResponse: {
    id: 'app.poll.userResponse.label',
    description: ''
  },
  responseChoices: {
    id: 'app.poll.responseChoices.label',
    description: ''
  },
  typedResponseDesc: {
    id: 'app.poll.typedResponse.desc',
    description: ''
  },
  responseTypesLabel: {
    id: 'app.poll.responseTypes.label',
    description: ''
  },
  addOptionLabel: {
    id: 'app.poll.addItem.label',
    description: ''
  },
  startPollLabel: {
    id: 'app.poll.start.label',
    description: ''
  },
  secretPollLabel: {
    id: 'app.poll.secretPoll.label',
    description: ''
  },
  isSecretPollLabel: {
    id: 'app.poll.secretPoll.isSecretLabel',
    description: ''
  },
  true: {
    id: 'app.poll.answer.true',
    description: ''
  },
  false: {
    id: 'app.poll.answer.false',
    description: ''
  },
  a: {
    id: 'app.poll.answer.a',
    description: ''
  },
  b: {
    id: 'app.poll.answer.b',
    description: ''
  },
  c: {
    id: 'app.poll.answer.c',
    description: ''
  },
  d: {
    id: 'app.poll.answer.d',
    description: ''
  },
  e: {
    id: 'app.poll.answer.e',
    description: ''
  },
  yna: {
    id: 'app.poll.yna',
    description: ''
  },
  yes: {
    id: 'app.poll.y',
    description: ''
  },
  no: {
    id: 'app.poll.n',
    description: ''
  },
  abstention: {
    id: 'app.poll.abstention',
    description: ''
  },
  enableMultipleResponseLabel: {
    id: 'app.poll.enableMultipleResponseLabel',
    description: 'label for checkbox to enable multiple choice'
  },
  startPollDesc: {
    id: 'app.poll.startPollDesc',
    description: ''
  },
  showRespDesc: {
    id: 'app.poll.showRespDesc',
    description: ''
  },
  addRespDesc: {
    id: 'app.poll.addRespDesc',
    description: ''
  },
  deleteRespDesc: {
    id: 'app.poll.deleteRespDesc',
    description: ''
  },
  on: {
    id: 'app.switch.onLabel',
    description: 'label for toggle switch on state'
  },
  off: {
    id: 'app.switch.offLabel',
    description: 'label for toggle switch off state'
  },
  removePollOpt: {
    id: 'app.poll.removePollOpt',
    description: 'screen reader alert for removed poll option'
  },
  emptyPollOpt: {
    id: 'app.poll.emptyPollOpt',
    description: 'screen reader for blank poll option'
  },
  pollingQuestion: {
    id: 'app.polling.pollQuestionTitle',
    description: 'polling question header'
  }
});
const PollCreationPanel = _ref => {
  let {
    layoutContextDispatch,
    hasPoll,
    hasCurrentPresentation
  } = _ref;
  const POLL_SETTINGS = window.meetingClientSettings.public.poll;
  const ALLOW_CUSTOM_INPUT = POLL_SETTINGS.allowCustomResponseInput;
  const MAX_CUSTOM_FIELDS = POLL_SETTINGS.maxCustom;
  const [stopPoll] = useMutation(POLL_CANCEL);
  const intl = useIntl();
  const textareaRef = useRef(null);
  const [customInput, setCustomInput] = React.useState(false);
  const [question, setQuestion] = useState('');
  const [questionAndOptions, setQuestionAndOptions] = useState('');
  const [optList, setOptList] = useState([]);
  const [error, setError] = useState(null);
  const [isMultipleResponse, setIsMultipleResponse] = useState(false);
  const [secretPoll, setSecretPoll] = useState(false);
  const [warning, setWarning] = useState('');
  const [isPasting, setIsPasting] = useState(false);
  const [type, setType] = useState('');
  const handleInputChange = (e, index) => {
    var _e$target$selectionSt, _e$target$selectionEn;
    const list = [...optList];
    const validatedVal = validateInput(e.target.value).replace(/\s{2,}/g, ' ');
    const charsRemovedCount = e.target.value.length - validatedVal.length;
    const clearError = validatedVal.length > 0 && type !== pollTypes.Response;
    const input = e.target;
    const caretStart = (_e$target$selectionSt = e.target.selectionStart) !== null && _e$target$selectionSt !== void 0 ? _e$target$selectionSt : 0;
    const caretEnd = (_e$target$selectionEn = e.target.selectionEnd) !== null && _e$target$selectionEn !== void 0 ? _e$target$selectionEn : 0;
    let questionAndOptionsList = [];
    list[index] = {
      val: validatedVal
    };
    if (questionAndOptions.length > 0) {
      const QnO = questionAndOptions;
      questionAndOptionsList = QnO.split('\n');
      questionAndOptionsList[index + 1] = validatedVal;
    }
    setOptList(list);
    setQuestionAndOptions(questionAndOptionsList.length > 0 ? questionAndOptionsList.join('\n') : '');
    setError(clearError ? null : error);
    input.focus();
    input.selectionStart = caretStart - charsRemovedCount;
    input.selectionEnd = caretEnd - charsRemovedCount;
  };
  const setQuestionAndOptionsFn = input => {
    const {
      splittedQuestion,
      optionsList
    } = getSplittedQuestionAndOptions(input);
    const optionsListLength = optionsList.length;
    let maxOptionsWarning = warning;
    const clearWarning = maxOptionsWarning && optionsListLength <= MAX_CUSTOM_FIELDS;
    const clearError = input.length > 0 && type === pollTypes.Response;
    if (optionsListLength > MAX_CUSTOM_FIELDS && optList[MAX_CUSTOM_FIELDS] === undefined) {
      setWarning(intl.formatMessage(intlMessages.maxOptionsWarning));
      if (isPasting) {
        maxOptionsWarning = intl.formatMessage(intlMessages.maxOptionsWarning);
        setIsPasting(false);
      }
    }
    setQuestionAndOptions(input);
    setOptList(optionsList);
    setQuestion(splittedQuestion);
    setError(clearError ? null : error);
    setWarning(clearWarning ? null : maxOptionsWarning);
  };
  const handleTextareaChange = e => {
    const validatedInput = validateInput(e.target.value);
    const clearError = validatedInput.length > 0 && type === pollTypes.Response;
    if (!customInput) {
      setQuestion(validatedInput);
      setError(clearError ? null : error);
    } else {
      setQuestionAndOptionsFn(validatedInput);
    }
  };
  const handleRemoveOption = index => {
    const list = [...optList];
    const removed = list[index];
    let questionAndOptionsList = [];
    let clearWarning = false;
    list.splice(index, 1);
    // If customInput then removing text from input field.
    if (customInput) {
      const QnO = questionAndOptions;
      questionAndOptionsList = QnO.split('\n');
      delete questionAndOptionsList[index + 1];
      questionAndOptionsList = questionAndOptionsList.filter(val => val !== undefined);
      clearWarning = !!warning && list.length <= MAX_CUSTOM_FIELDS;
    }
    setOptList(list);
    setQuestionAndOptions(questionAndOptionsList.length > 0 ? questionAndOptionsList.join('\n') : '');
    setWarning(clearWarning ? null : warning);
    addAlert("".concat(intl.formatMessage(intlMessages.removePollOpt, {
      0: removed.val || intl.formatMessage(intlMessages.emptyPollOpt)
    })));
  };
  const handleAddOption = () => {
    setOptList([...optList, {
      val: ''
    }]);
  };
  const handleToggle = () => {
    const toggledValue = !secretPoll;
    Session.setItem('secretPoll', toggledValue);
    setSecretPoll(toggledValue);
  };
  const handlePollLetterOptions = () => {
    if (optList.length === 0) {
      setType(pollTypes.Letter);
      setOptList([{
        val: ''
      }, {
        val: ''
      }, {
        val: ''
      }, {
        val: ''
      }]);
    }
  };
  const toggleIsMultipleResponse = () => {
    setIsMultipleResponse(prev => !prev);
    return !isMultipleResponse;
  };
  useEffect(() => {
    return () => {
      Session.setItem('secretPoll', false);
    };
  }, []);
  useEffect(() => {
    if (textareaRef.current) {
      var _textareaRef$current;
      (_textareaRef$current = textareaRef.current) === null || _textareaRef$current === void 0 ? void 0 : _textareaRef$current.focus();
    }
  }, [textareaRef]);
  const pollOptions = () => {
    if (!hasCurrentPresentation) return /*#__PURE__*/React.createElement(EmptySlideArea, null);
    if (hasPoll) return /*#__PURE__*/React.createElement(LiveResultContainer, null);
    return /*#__PURE__*/React.createElement(React.Fragment, null, ALLOW_CUSTOM_INPUT && /*#__PURE__*/React.createElement(Styled.CustomInputRow, null, /*#__PURE__*/React.createElement(Styled.CustomInputHeadingCol, {
      "aria-hidden": "true"
    }, /*#__PURE__*/React.createElement(Styled.CustomInputHeading, null, intl.formatMessage(intlMessages.customInputToggleLabel))), /*#__PURE__*/React.createElement(Styled.CustomInputToggleCol, null, /*#__PURE__*/React.createElement(Styled.Toggle, null, /*#__PURE__*/React.createElement(Styled.ToggleLabel, null, customInput ? intl.formatMessage(intlMessages.on) : intl.formatMessage(intlMessages.off)), /*#__PURE__*/React.createElement(Toggle
    // @ts-ignore - JS component wrapped by intl
    , {
      icons: false,
      defaultChecked: customInput,
      onChange: () => {
        setCustomInput(!customInput);
        setType(pollTypes.Custom);
      },
      ariaLabel: intl.formatMessage(intlMessages.customInputToggleLabel),
      showToggleLabel: false,
      "data-test": "autoOptioningPollBtn"
    })))), customInput && /*#__PURE__*/React.createElement(Styled.PollParagraph, null, intl.formatMessage(intlMessages.customInputInstructionsLabel)), /*#__PURE__*/React.createElement(PollQuestionArea, {
      customInput: customInput,
      question: question,
      questionAndOptions: questionAndOptions,
      handleTextareaChange: handleTextareaChange,
      error: error,
      type: type,
      textareaRef: textareaRef,
      handlePollLetterOptions: handlePollLetterOptions,
      optList: optList,
      setIsPasting: setIsPasting,
      warning: warning
    }), /*#__PURE__*/React.createElement(ResponseTypes, {
      customInput: customInput,
      type: type,
      setOptList: setOptList,
      setType: setType
    }), /*#__PURE__*/React.createElement(ResponseChoices, {
      type: type,
      toggleIsMultipleResponse: toggleIsMultipleResponse,
      isMultipleResponse: isMultipleResponse,
      optList: optList,
      handleAddOption: handleAddOption,
      secretPoll: secretPoll,
      question: question,
      setError: setError,
      setIsPolling: () => {
        setType(null);
        setOptList([]);
        setQuestion('');
        setQuestionAndOptions('');
      },
      hasCurrentPresentation: hasCurrentPresentation,
      handleToggle: handleToggle,
      error: error,
      handleInputChange: handleInputChange,
      handleRemoveOption: handleRemoveOption,
      customInput: customInput,
      questionAndOptions: questionAndOptions
    }));
  };
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Header, {
    "data-test": "pollPaneTitle",
    leftButtonProps: {
      'aria-label': intl.formatMessage(intlMessages.hidePollDesc),
      'data-test': 'hidePollDesc',
      label: intl.formatMessage(intlMessages.pollPaneTitle),
      onClick: () => {
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: false
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.NONE
        });
      }
    },
    rightButtonProps: {
      'aria-label': "".concat(intl.formatMessage(intlMessages.closeLabel), " ").concat(intl.formatMessage(intlMessages.pollPaneTitle)),
      'data-test': 'closePolling',
      icon: 'close',
      label: intl.formatMessage(intlMessages.closeLabel),
      onClick: () => {
        if (hasPoll) stopPoll();
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
          value: false
        });
        layoutContextDispatch({
          type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
          value: PANELS.NONE
        });
        Session.setItem('forcePollOpen', false);
        Session.setItem('pollInitiated', false);
      }
    },
    customRightButton: null
  }), pollOptions(), /*#__PURE__*/React.createElement("span", {
    className: "sr-only",
    id: "poll-config-button"
  }, intl.formatMessage(intlMessages.showRespDesc)), /*#__PURE__*/React.createElement("span", {
    className: "sr-only",
    id: "add-item-button"
  }, intl.formatMessage(intlMessages.addRespDesc)), /*#__PURE__*/React.createElement("span", {
    className: "sr-only",
    id: "start-poll-button"
  }, intl.formatMessage(intlMessages.startPollDesc)));
};
const PollCreationPanelContainer = () => {
  var _currentMeeting$compo, _currentMeeting$compo2;
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const layoutContextDispatch = layoutDispatch();
  const {
    sidebarContentPanel
  } = sidebarContent;
  const {
    data: currentUser,
    loading: currentUserLoading
  } = useCurrentUser(u => {
    return {
      presenter: u === null || u === void 0 ? void 0 : u.presenter
    };
  });
  const {
    data: currentMeeting,
    loading: currentMeetingLoading
  } = useMeeting(m => {
    return {
      componentsFlags: m === null || m === void 0 ? void 0 : m.componentsFlags
    };
  });
  const {
    data: getHasCurrentPresentationData,
    loading: getHasCurrentPresentationLoading
  } = useDeduplicatedSubscription(getHasCurrentPresentation);
  if (currentUserLoading || !currentUser) return null;
  if (currentMeetingLoading || !currentMeeting) return null;
  if (getHasCurrentPresentationLoading || !getHasCurrentPresentationData) return null;
  if (!currentUser.presenter && sidebarContentPanel === PANELS.POLL) {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.NONE
    });
  }
  return /*#__PURE__*/React.createElement(PollCreationPanel, {
    layoutContextDispatch: layoutContextDispatch,
    hasPoll: (_currentMeeting$compo = (_currentMeeting$compo2 = currentMeeting.componentsFlags) === null || _currentMeeting$compo2 === void 0 ? void 0 : _currentMeeting$compo2.hasPoll) !== null && _currentMeeting$compo !== void 0 ? _currentMeeting$compo : false,
    hasCurrentPresentation: getHasCurrentPresentationData.pres_page_aggregate.aggregate.count > 0
  });
};
module.exportDefault(PollCreationPanelContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/container.jsx                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let PollCreationPanelContainer;
module.link("./component", {
  default(v) {
    PollCreationPanelContainer = v;
  }
}, 0);
module.exportDefault(PollCreationPanelContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/mutations.ts                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  POLL_PUBLISH_RESULT: () => POLL_PUBLISH_RESULT,
  POLL_SUBMIT_TYPED_VOTE: () => POLL_SUBMIT_TYPED_VOTE,
  POLL_SUBMIT_VOTE: () => POLL_SUBMIT_VOTE,
  POLL_CANCEL: () => POLL_CANCEL,
  POLL_CREATE: () => POLL_CREATE
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const POLL_PUBLISH_RESULT = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation PollPublishResult($pollId: String!) {\n    pollPublishResult(\n      pollId: $pollId,\n    )\n  }\n"])));
const POLL_SUBMIT_TYPED_VOTE = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation PollSubmitTypedVote($pollId: String!, $answer: String!) {\n    pollSubmitUserTypedVote(\n      pollId: $pollId,\n      answer: $answer,\n    )\n  }\n"])));
const POLL_SUBMIT_VOTE = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  mutation PollSubmitVote($pollId: String!, $answerIds: [Int]!) {\n    pollSubmitUserVote(\n      pollId: $pollId,\n      answerIds: $answerIds,\n    )\n  }\n"])));
const POLL_CANCEL = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  mutation PollCancel {\n    pollCancel\n  }\n"])));
const POLL_CREATE = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  mutation PollCreate(\n    $pollType: String!,\n    $pollId: String!,\n    $secretPoll: Boolean!,\n    $question: String!,\n    $isMultipleResponse: Boolean!,\n    $answers: [String]!\n  ) {\n    pollCreate(\n      pollType: $pollType,\n      pollId: $pollId,\n      secretPoll: $secretPoll,\n      question: $question,\n      isMultipleResponse: $isMultipleResponse,\n      answers: $answers,\n    )\n  }\n"])));
module.exportDefault({
  POLL_PUBLISH_RESULT,
  POLL_SUBMIT_TYPED_VOTE,
  POLL_SUBMIT_VOTE,
  POLL_CANCEL,
  POLL_CREATE
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/queries.ts                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  getHasCurrentPresentation: () => getHasCurrentPresentation,
  getCurrentPollData: () => getCurrentPollData
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const getHasCurrentPresentation = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription getHasCurrentPresentation {\n    pres_page_aggregate(where: {isCurrentPage: {_eq: true}}) {\n      aggregate {\n        count\n      }\n    }\n  }\n"])));
const getCurrentPollData = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\nsubscription getCurrentPollData {\n    poll(order_by: {createdAt: desc}, limit: 1,) {\n      pollId\n      published\n      secret\n      questionText\n      ended\n      multipleResponses\n      users(where: {responded: {_eq: true}}) {\n        user {\n          name\n          userId\n        }\n        optionDescIds\n      }\n      responses {\n        optionResponsesCount\n        optionDesc\n        pollResponsesCount\n      }\n      users_aggregate {\n        aggregate {\n          count\n        }\n      }\n      responses_aggregate {\n        aggregate {\n          count\n          sum {\n            optionResponsesCount\n          }\n        }\n      }\n    }\n  }\n"])));
module.exportDefault({
  getHasCurrentPresentation
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/service.ts                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  pollTypes: () => pollTypes,
  validateInput: () => validateInput,
  getSplittedQuestionAndOptions: () => getSplittedQuestionAndOptions,
  removeEmptyLineSpaces: () => removeEmptyLineSpaces,
  isDefaultPoll: () => isDefaultPoll,
  checkPollType: () => checkPollType
});
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 0);
let escapeHtml;
module.link("/imports/utils/string-utils", {
  escapeHtml(v) {
    escapeHtml = v;
  }
}, 1);
const POLL_AVATAR_COLOR = '#3B48A9';
const MAX_POLL_RESULT_BARS = 10;
const MAX_POLL_RESULT_KEY_LENGTH = 30;
const POLL_BAR_CHAR = "\u220E";
const pollTypes = {
  YesNo: 'YN',
  YesNoAbstention: 'YNA',
  TrueFalse: 'TF',
  Letter: 'A-',
  A2: 'A-2',
  A3: 'A-3',
  A4: 'A-4',
  A5: 'A-5',
  Custom: 'CUSTOM',
  Response: 'R-'
};
const pollAnswerIds = {
  true: {
    id: 'app.poll.answer.true',
    description: 'label for poll answer True'
  },
  false: {
    id: 'app.poll.answer.false',
    description: 'label for poll answer False'
  },
  yes: {
    id: 'app.poll.answer.yes',
    description: 'label for poll answer Yes'
  },
  no: {
    id: 'app.poll.answer.no',
    description: 'label for poll answer No'
  },
  abstention: {
    id: 'app.poll.answer.abstention',
    description: 'label for poll answer Abstention'
  },
  a: {
    id: 'app.poll.answer.a',
    description: 'label for poll answer A'
  },
  b: {
    id: 'app.poll.answer.b',
    description: 'label for poll answer B'
  },
  c: {
    id: 'app.poll.answer.c',
    description: 'label for poll answer C'
  },
  d: {
    id: 'app.poll.answer.d',
    description: 'label for poll answer D'
  },
  e: {
    id: 'app.poll.answer.e',
    description: 'label for poll answer E'
  }
};
const intlMessages = defineMessages({
  legendTitle: {
    id: 'app.polling.pollingTitle',
    description: 'heading for chat poll legend'
  },
  pollQuestionTitle: {
    id: 'app.polling.pollQuestionTitle',
    description: 'title displayed before poll question'
  }
});
const getUsedLabels = (listOfAnswers, possibleLabels) => listOfAnswers.map(answer => {
  if (answer.key.length >= 2) {
    const formattedLabel = answer.key.slice(0, 2).toUpperCase();
    if (possibleLabels.includes(formattedLabel)) {
      return formattedLabel;
    }
  }
  return undefined;
});
const getFormattedAnswerValue = answerText => {
  // In generatePossibleLabels there is a check to see if the
  // answer's length is greater than 2
  const newText = answerText.slice(2).trim();
  return newText;
};
const generateAlphabetList = () => Array.from(Array(26)).map((_, i) => i + 65).map(x => String.fromCharCode(x));
const generatePossibleLabels = alphabetCharacters => {
  // Remove the Letter from the beginning and the following sign, if any, like so:
  // "A- the answer is" -> Remove "A-" -> "the answer is"
  const listOfForbiddenSignsToStart = ['.', ':', '-'];
  const possibleLabels = [];
  for (let i = 0; i < alphabetCharacters.length; i += 1) {
    for (let j = 0; j < listOfForbiddenSignsToStart.length; j += 1) {
      possibleLabels.push(alphabetCharacters[i] + listOfForbiddenSignsToStart[j]);
    }
  }
  return possibleLabels;
};
const truncate = (text, length) => {
  let resultText = text;
  if (resultText.length < length) {
    const diff = length - resultText.length;
    const padding = ' '.repeat(diff);
    resultText += padding;
  } else if (resultText.length > length) {
    resultText = "".concat(resultText.substring(0, MAX_POLL_RESULT_KEY_LENGTH - 3), "...");
  }
  return resultText;
};
const getPollResultsText = (isDefaultPoll, answers, numRespondents, intl) => {
  let responded = 0;
  let resultString = '';
  let optionsString = '';
  const alphabetCharacters = generateAlphabetList();
  const possibleLabels = generatePossibleLabels(alphabetCharacters);
  // We need to guarantee that the labels are in the correct order, and that all options have label
  const pollAnswerMatchLabeledFormat = getUsedLabels(answers, possibleLabels);
  const isPollAnswerMatchFormat = !isDefaultPoll ? pollAnswerMatchLabeledFormat.reduce((acc, label, index) => acc && !!label && label[0] === alphabetCharacters[index][0], true) : false;
  let longestKeyLength = answers.reduce((acc, item) => item.key.length > acc ? item.key.length : acc, 0);
  longestKeyLength = Math.min(longestKeyLength, MAX_POLL_RESULT_KEY_LENGTH);
  answers.map(item => {
    responded += item.numVotes;
    return item;
  }).forEach((item, index) => {
    const numResponded = responded === numRespondents ? numRespondents : responded;
    const pct = Math.round(item.numVotes / (numResponded || 1) * 100);
    const pctBars = POLL_BAR_CHAR.repeat(pct * MAX_POLL_RESULT_BARS / 100);
    const pctFotmatted = "".concat(Number.isNaN(pct) ? 0 : pct, "%");
    if (isDefaultPoll) {
      let translatedKey = pollAnswerIds[item.key.toLowerCase()] ? intl.formatMessage(pollAnswerIds[item.key.toLowerCase()]) : item.key;
      translatedKey = truncate(translatedKey, longestKeyLength);
      resultString += "".concat(translatedKey, ": ").concat(item.numVotes || 0, " ").concat(pctBars).concat(POLL_BAR_CHAR, " ").concat(pctFotmatted, "\n");
    } else {
      if (isPollAnswerMatchFormat) {
        var _pollAnswerMatchLabel, _pollAnswerMatchLabel2;
        resultString += "".concat((_pollAnswerMatchLabel = pollAnswerMatchLabeledFormat[index]) === null || _pollAnswerMatchLabel === void 0 ? void 0 : _pollAnswerMatchLabel[0]);
        const formattedAnswerValue = getFormattedAnswerValue(item.key);
        optionsString += "".concat((_pollAnswerMatchLabel2 = pollAnswerMatchLabeledFormat[index]) === null || _pollAnswerMatchLabel2 === void 0 ? void 0 : _pollAnswerMatchLabel2[0], ": ").concat(formattedAnswerValue, "\n");
      } else {
        let {
          key
        } = item;
        key = truncate(key, longestKeyLength);
        resultString += key;
      }
      resultString += ": ".concat(item.numVotes || 0, " ").concat(pctBars).concat(POLL_BAR_CHAR, " ").concat(pctFotmatted, "\n");
    }
  });
  return {
    resultString,
    optionsString
  };
};
const getPollResultString = (pollResultData, intl) => {
  const formatBoldBlack = s => s.bold().fontcolor('black');
  const sanitize = value => escapeHtml(value);
  const {
    answers,
    numRespondents,
    questionType
  } = pollResultData;
  const isDefault = isDefaultPoll(questionType);
  let {
    resultString,
    optionsString
  } = getPollResultsText(isDefault, answers, numRespondents, intl);
  resultString = sanitize(resultString);
  optionsString = sanitize(optionsString);
  let pollText = formatBoldBlack(resultString);
  if (optionsString !== '') {
    pollText += formatBoldBlack("<br/><br/>".concat(intl.formatMessage(intlMessages.legendTitle), "<br/>"));
    pollText += optionsString;
  }
  const pollQuestion = pollResultData.questionText;
  if (pollQuestion.trim() !== '') {
    const sanitizedPollQuestion = sanitize(pollQuestion.split('<br#>').join(' '));
    pollText = "".concat(formatBoldBlack(intl.formatMessage(intlMessages.pollQuestionTitle)), "<br/>").concat(sanitizedPollQuestion, "<br/><br/>").concat(pollText);
  }
  return pollText;
};
const validateInput = input => {
  let i = input;
  while (/^\s/.test(i)) i = i.substring(1);
  return i;
};
const getSplittedQuestionAndOptions = questionAndOptions => {
  const inputList = Array.isArray(questionAndOptions) ? questionAndOptions : questionAndOptions.split('\n').filter(val => val !== '');
  const splittedQuestion = inputList.length > 0 ? inputList[0] : questionAndOptions;
  const optList = inputList.slice(1);
  const optionsList = optList.map(val => {
    const option = validateInput(val);
    return {
      val: option
    };
  });
  return {
    splittedQuestion,
    optionsList
  };
};
const removeEmptyLineSpaces = input => {
  const filteredInput = input.split('\n').filter(val => val.trim() !== '');
  return filteredInput;
};
const isDefaultPoll = pollType => pollType !== pollTypes.Response;
const matchYesNoPoll = (yesValue, noValue, contentString) => {
  const ynPollString = "(".concat(yesValue, "\\s*\\/\\s*").concat(noValue, ")|(").concat(noValue, "\\s*\\/\\s*").concat(yesValue, ")");
  const ynOptionsRegex = new RegExp(ynPollString, 'gi');
  const ynPoll = contentString.replace(/\n/g, '').match(ynOptionsRegex) || [];
  return ynPoll;
};
const matchYesNoAbstentionPoll = (yesValue, noValue, abstentionValue, contentString) => {
  /* eslint max-len: [off] */
  const ynaPollString = "(".concat(yesValue, "\\s*\\/\\s*").concat(noValue, "\\s*\\/\\s*").concat(abstentionValue, ")|(").concat(yesValue, "\\s*\\/\\s*").concat(abstentionValue, "\\s*\\/\\s*").concat(noValue, ")|(").concat(abstentionValue, "\\s*\\/\\s*").concat(yesValue, "\\s*\\/\\s*").concat(noValue, ")|(").concat(abstentionValue, "\\s*\\/\\s*").concat(noValue, "\\s*\\/\\s*").concat(yesValue, ")|(").concat(noValue, "\\s*\\/\\s*").concat(yesValue, "\\s*\\/\\s*").concat(abstentionValue, ")|(").concat(noValue, "\\s*\\/\\s*").concat(abstentionValue, "\\s*\\/\\s*").concat(yesValue, ")");
  const ynaOptionsRegex = new RegExp(ynaPollString, 'gi');
  const ynaPoll = contentString.replace(/\n/g, '').match(ynaOptionsRegex) || [];
  return ynaPoll;
};
const matchTrueFalsePoll = (trueValue, falseValue, contentString) => {
  const tfPollString = "(".concat(trueValue, "\\s*\\/\\s*").concat(falseValue, ")|(").concat(falseValue, "\\s*\\/\\s*").concat(trueValue, ")");
  const tgOptionsRegex = new RegExp(tfPollString, 'gi');
  const tfPoll = contentString.match(tgOptionsRegex) || [];
  return tfPoll;
};
const checkPollType = (type, optList, yesValue, noValue, abstentionValue, trueValue, falseValue) => {
  var _defaultMatch$, _defaultMatch$2;
  /* eslint no-underscore-dangle: "off" */
  let _type = type;
  let pollString = '';
  let defaultMatch = null;
  let isDefault = null;
  switch (_type) {
    case pollTypes.Letter:
      pollString = optList.map(x => x.val.toUpperCase()).sort().join('');
      defaultMatch = pollString.match(/^(ABCDEF)|(ABCDE)|(ABCD)|(ABC)|(AB)$/gi);
      isDefault = defaultMatch && pollString.length === defaultMatch[0].length;
      _type = isDefault && Array.isArray(defaultMatch) ? "".concat(_type).concat(defaultMatch[0].length) : pollTypes.Custom;
      break;
    case pollTypes.TrueFalse:
      pollString = optList.map(x => x.val).join('/');
      defaultMatch = matchTrueFalsePoll(trueValue, falseValue, pollString);
      isDefault = defaultMatch.length > 0 && pollString.length === ((_defaultMatch$ = defaultMatch[0]) === null || _defaultMatch$ === void 0 ? void 0 : _defaultMatch$.length);
      if (!isDefault) _type = pollTypes.Custom;
      break;
    case pollTypes.YesNoAbstention:
      pollString = optList.map(x => x.val).join('/');
      defaultMatch = matchYesNoAbstentionPoll(yesValue, noValue, abstentionValue, pollString);
      isDefault = Array.isArray(defaultMatch) && defaultMatch.length > 0 && pollString.length === ((_defaultMatch$2 = defaultMatch[0]) === null || _defaultMatch$2 === void 0 ? void 0 : _defaultMatch$2.length);
      if (!isDefault) {
        var _defaultMatch$3;
        // also try to match only yes/no
        defaultMatch = matchYesNoPoll(yesValue, noValue, pollString);
        isDefault = defaultMatch.length > 0 && pollString.length === ((_defaultMatch$3 = defaultMatch[0]) === null || _defaultMatch$3 === void 0 ? void 0 : _defaultMatch$3.length);
        _type = isDefault ? pollTypes.YesNo : _type = pollTypes.Custom;
      }
      break;
    default:
      break;
  }
  return _type;
};
module.exportDefault({
  pollTypes,
  validateInput,
  getSplittedQuestionAndOptions,
  removeEmptyLineSpaces,
  isDefaultPoll,
  pollAnswerIds,
  POLL_AVATAR_COLOR,
  getPollResultString,
  matchYesNoPoll,
  matchYesNoAbstentionPoll,
  matchTrueFalsePoll,
  checkPollType,
  POLL_BAR_CHAR
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/poll/styles.ts                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38, _templateObject39, _templateObject40, _templateObject41, _templateObject42, _templateObject43, _templateObject44, _templateObject45, _templateObject46, _templateObject47, _templateObject48, _templateObject49, _templateObject50, _templateObject51, _templateObject52, _templateObject53;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
let jumboPaddingY, smPaddingX, smPaddingY, lgPaddingX, borderRadius, borderSize, pollInputHeight, pollSmMargin, pollMdMargin, mdPaddingX, pollStatsElementWidth, pollResultWidth, borderSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/general", {
  jumboPaddingY(v) {
    jumboPaddingY = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  lgPaddingX(v) {
    lgPaddingX = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  pollInputHeight(v) {
    pollInputHeight = v;
  },
  pollSmMargin(v) {
    pollSmMargin = v;
  },
  pollMdMargin(v) {
    pollMdMargin = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  },
  pollStatsElementWidth(v) {
    pollStatsElementWidth = v;
  },
  pollResultWidth(v) {
    pollResultWidth = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  }
}, 2);
let colorText, colorBlueLight, colorGray, colorGrayLight, colorGrayLighter, colorGrayLightest, colorDanger, colorWarning, colorHeading, colorPrimary, colorGrayDark, colorWhite, pollBlue, pollStatsBorderColor;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorText(v) {
    colorText = v;
  },
  colorBlueLight(v) {
    colorBlueLight = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorGrayLight(v) {
    colorGrayLight = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorWarning(v) {
    colorWarning = v;
  },
  colorHeading(v) {
    colorHeading = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  pollBlue(v) {
    pollBlue = v;
  },
  pollStatsBorderColor(v) {
    pollStatsBorderColor = v;
  }
}, 3);
let fontSizeBase, fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 4);
const ToggleLabel = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-right: ", ";\n\n  [dir=\"rtl\"] & {\n    margin: 0 0 0 ", ";\n  }\n"])), smPaddingX, smPaddingX);
const PollOptionInput = styled.input(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin-right: 1rem;\n\n  [dir=\"rtl\"] & {\n      margin-right: 0;\n      margin-left: 1rem;\n  }\n\n  &:focus {\n    outline: none;\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n  }\n\n  width: 100%;\n  color: ", ";\n  -webkit-appearance: none;\n  padding: calc(", " * 2) ", ";\n  border-radius: ", ";\n  font-size: ", ";\n  border: 1px solid ", ";\n  box-shadow: 0 0 0 1px ", ";\n"])), borderSize, borderSize, colorBlueLight, colorPrimary, colorText, smPaddingY, smPaddingX, borderRadius, fontSizeBase, colorGrayLighter, colorGrayLighter);
// @ts-ignore - Button is a JS Component
const DeletePollOptionButton = styled(Button)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  font-size: ", ";\n  flex: none;\n  width: 40px;\n  position: relative;\n  & > i {\n    font-size: 150%;\n  }\n"])), fontSizeBase);
const ErrorSpacer = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: relative;\n  height: 1.25rem;\n"])));
const InputError = styled(ErrorSpacer)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: ", ";\n"])), colorDanger, fontSizeSmall);
const Instructions = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  margin-bottom: ", ";\n  color: ", ";\n"])), lgPaddingX, colorText);
const PollQuestionArea = styled.textarea(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  resize: none;\n\n  &:focus {\n    outline: none;\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n  }\n\n  width: 100%;\n  color: ", ";\n  -webkit-appearance: none;\n  padding: calc(", " * 2) ", ";\n  border-radius: ", ";\n  font-size: ", ";\n  border: 1px solid ", ";\n  box-shadow: 0 0 0 1px ", ";\n\n  ", "\n"])), borderSize, borderSize, colorBlueLight, colorPrimary, colorText, smPaddingY, smPaddingX, borderRadius, fontSizeBase, colorGrayLighter, colorGrayLighter, _ref => {
  let {
    hasError
  } = _ref;
  return hasError && "\n    border-color: ".concat(colorDanger, ";\n    box-shadow: 0 0 0 1px ").concat(colorDanger, ";\n  ");
});
const SectionHeading = styled.h4(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  margin-top: 0;\n  font-weight: 600;\n  color: ", ";\n"])), colorHeading);
const ResponseType = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between;\n  flex-flow: wrap;\n  overflow-wrap: break-word;\n  position: relative;\n  width: 100%;\n  margin-bottom: ", ";\n\n  & > button {\n    position: relative;\n    width: 100%;\n  }\n"])), lgPaddingX);
// @ts-ignore - Button is a JS Component
const PollConfigButton = styled(Button)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  border: solid ", " 1px;\n  min-height: ", ";\n  font-size: ", ";\n  white-space: pre-wrap;\n  width: 100%;\n  margin-bottom: 1rem;\n\n  & > span {\n    &:hover {\n      opacity: 1;\n    }\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n"])), colorGrayLight, pollInputHeight, fontSizeBase, _ref2 => {
  let {
    selected
  } = _ref2;
  return selected && "\n    background-color: ".concat(colorGrayLightest, ";\n    font-size: ").concat(fontSizeBase, ";\n\n    &:hover,\n    &:focus,\n    &:active {\n      background-color: ").concat(colorGrayLightest, " !important;\n      box-shadow: none !important;\n    }\n  ");
}, _ref3 => {
  let {
    small
  } = _ref3;
  return small && "\n    width: 49% !important;\n  ";
}, _ref4 => {
  let {
    full
  } = _ref4;
  return full && "\n    width: 100%;\n  ";
});
const PollParagraph = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  color: ", ";\n  margin-bottom: 0.9rem;\n"])), colorText);
const PollCheckbox = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  display: inline-block;\n  margin-right: ", ";\n  margin-bottom: ", ";\n"])), pollSmMargin, pollMdMargin);
// @ts-ignore - Button is a JS Component
const AddItemButton = styled(Button)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  top: 1px;\n  position: relative;\n  display: block;\n  width: 100%;\n  text-align: left;\n  color: ", ";\n  padding-left: 0;\n  padding-right: 0;\n  font-size: ", ";\n  white-space: pre-wrap;\n\n  &:hover {\n    & > span {\n      opacity: 1;\n    }\n  }\n"])), colorPrimary, fontSizeBase);
const Row = styled.div(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: wrap;\n  flex-grow: 1;\n  justify-content: space-between;\n  margin-top: 0.7rem;\n  margin-bottom: 0.7rem;\n"])));
const Warning = styled.div(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: ", ";\n"])), colorWarning, fontSizeSmall);
const CustomInputRow = styled.div(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: nowrap;\n  flex-grow: 1;\n  justify-content: space-between;\n"])));
const Col = styled.div(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n  display: flex;\n  position: relative;\n  flex-flow: column;\n  flex-grow: 1;\n  \n  &:last-child {\n    padding-right: 0;\n    padding-left: 1rem;\n\n    [dir=\"rtl\"] & {\n      padding-right: 0.1rem;\n      padding-left: 0;\n    }\n  }\n"])));
const Toggle = styled.label(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n  margin-left: auto;\n  display: flex;\n  align-items: center;\n"])));
// @ts-ignore - Button is a JS Component
const StartPollBtn = styled(Button)(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n  position: relative;\n  width: 100%;\n  min-height: ", ";\n  margin-top: 1rem;\n  font-size: ", ";\n  overflow-wrap: break-word;\n  white-space: pre-wrap;\n\n  &:hover {\n    & > span {\n      opacity: 1;\n    }\n  }\n"])), pollInputHeight, fontSizeBase);
const NoSlidePanelContainer = styled.div(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["\n  color: ", ";\n  text-align: center;\n"])), colorGrayDark);
// @ts-ignore - Button is a JS Component
const PollButton = styled(Button)(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\n  margin-top: ", ";\n  margin-bottom: ", ";\n  // background-color: ", ";\n  box-shadow: 0 0 0 1px ", ";\n  color: ", ";\n  background-color: ", "\n\n  & > span {\n    color: ", ";\n  }\n\n  & > span:hover {\n    color: ", ";\n    opacity: 1;\n  }\n\n  &:active {\n    background-color: ", ";\n    box-shadow: 0 0 0 1px ", ";\n\n    & > span {\n      color: ", ";\n    }\n  }\n\n  &:focus {\n    background-color: ", ";\n    box-shadow: 0 0 0 1px ", ";\n\n    & > span {\n      color: ", ";\n    }\n  }\n\n  &:nth-child(even) {\n    margin-right: inherit;\n    margin-left: ", ";\n\n    [dir=\"rtl\"] & {\n      margin-right: ", ";\n      margin-left: inherit;\n    }\n  }\n\n  &:nth-child(odd) {\n    margin-right: 1rem;\n    margin-left: inherit;\n\n    [dir=\"rtl\"] & {\n      margin-right: inherit;\n      margin-left: ", ";\n    }\n  }\n\n  &:hover {\n    box-shadow: 0 0 0 1px ", ";\n    background-color: ", ";\n    color: ", ";\n\n    & > span {\n      color: ", ";\n      opacity: 1;\n    }\n  }\n"])), smPaddingY, smPaddingY, colorWhite, colorPrimary, colorWhite, colorPrimary, colorGray, colorWhite, colorWhite, pollBlue, pollBlue, colorWhite, pollBlue, pollBlue, smPaddingY, smPaddingY, smPaddingY, colorWhite, colorWhite, pollBlue, pollBlue);
const DragAndDropPollContainer = styled.div(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\n  width: 200px !important;\n  height: 200px !important;\n"])));
const Question = styled.div(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\n  margin-bottom: ", ";\n"])), lgPaddingX);
const OptionWrapper = styled.div(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between;\n"])));
const ResponseArea = styled.div(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column wrap;\n"])));
const CustomInputHeading = styled(SectionHeading)(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  padding-bottom: ", ";\n"])), jumboPaddingY);
const CustomInputHeadingCol = styled(Col)(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["\n  overflow: hidden;\n"])));
const CustomInputToggleCol = styled(Col)(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["\n  flex-shrink: 0;\n"])));
const AnonymousHeading = styled(CustomInputHeading)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral([""])));
const AnonymousHeadingCol = styled(CustomInputHeadingCol)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral([""])));
const AnonymousToggleCol = styled(CustomInputToggleCol)(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral([""])));
const AnonymousRow = styled(Row)(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["\n  flex-flow: nowrap;\n  width: 100%;\n"])));
const ResultLeft = styled.td(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["\n  padding: 0 .5rem 0 0;\n  border-bottom: 1px solid ", ";\n\n  [dir=\"rtl\"] & {\n    padding: 0 0 0 .5rem;\n  }\n  padding-bottom: .25rem;\n  word-break: break-all;\n"])), colorGrayLightest);
const ResultRight = styled.td(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["\n  padding-bottom: .25rem;\n  word-break: break-all;\n"])));
const Main = styled.div(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n"])));
const Left = styled.div(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["\n  font-weight: bold;\n  max-width: ", ";\n  min-width: ", ";\n  word-wrap: break-word;\n  flex: 6;\n\n  padding: ", ";\n  margin-top: ", ";\n  margin-bottom: ", ";\n  color: ", ";\n\n  position: relative;\n"])), pollResultWidth, pollStatsElementWidth, smPaddingY, pollSmMargin, pollSmMargin, colorText);
const Center = styled.div(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["\n  position: relative;\n  flex: 3;\n  border-left: 1px solid ", ";\n  border-right : none;\n  width: 100%;\n  height: 100%;\n\n  [dir=\"rtl\"] & {\n    border-left: none;\n    border-right: 1px solid ", ";\n  }\n\n  padding: ", ";\n  margin-top: ", ";\n  margin-bottom: ", ";\n  color: ", ";\n"])), colorGrayLighter, colorGrayLighter, smPaddingY, pollSmMargin, pollSmMargin, colorText);
const Right = styled.div(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["\n  text-align: right;\n  max-width: ", ";\n  min-width: ", ";\n  flex: 1;\n\n  [dir=\"rtl\"] & {\n    text-align: left;\n  }\n\n  padding: ", ";\n  margin-top: ", ";\n  margin-bottom: ", ";\n  color: ", ";\n\n  position: relative;\n"])), pollStatsElementWidth, pollStatsElementWidth, smPaddingY, pollSmMargin, pollSmMargin, colorText);
const BarShade = styled.div(_templateObject39 || (_templateObject39 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  height: 100%;\n  min-height: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n"])), colorGrayLighter);
const BarVal = styled.div(_templateObject40 || (_templateObject40 = _taggedTemplateLiteral(["\n  position: inherit;\n"])));
const Stats = styled.div(_templateObject41 || (_templateObject41 = _taggedTemplateLiteral(["\n  margin-bottom: ", ";\n  display: flex;\n  flex-direction: column;\n  border: 1px solid ", ";\n  border-radius: ", ";\n  padding: ", ";\n\n  & > div {\n    display: flex;\n    flex-direction: row;\n\n    & > div:nth-child(even) {\n      position: relative;\n      height: 75%;\n      width: 50%;\n      text-align: center;\n    }\n  }\n"])), smPaddingX, pollStatsBorderColor, borderSizeLarge, mdPaddingX);
const Title = styled.span(_templateObject42 || (_templateObject42 = _taggedTemplateLiteral(["\n  font-weight: bold;\n  word-break: break-all;\n  white-space: pre-wrap;\n"])));
const Status = styled.div(_templateObject43 || (_templateObject43 = _taggedTemplateLiteral(["\n  margin-bottom: .5rem;\n"])));
const ellipsis = keyframes(_templateObject44 || (_templateObject44 = _taggedTemplateLiteral(["\n  to {\n    width: 1.25em;\n    margin-right: 0;\n    margin-left: 0;\n  }\n"])));
const ConnectingAnimation = styled.span(_templateObject45 || (_templateObject45 = _taggedTemplateLiteral(["\n  &:after {\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    content: \"\\2026\"; /* ascii code for the ellipsis character */\n    width: 0;\n    margin: 0 1.25em 0 0;\n\n    [dir=\"rtl\"] & {\n      margin: 0 0 0 1.25em;\n    }\n\n    ", "\n  }\n"], ["\n  &:after {\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    content: \"\\\\2026\"; /* ascii code for the ellipsis character */\n    width: 0;\n    margin: 0 1.25em 0 0;\n\n    [dir=\"rtl\"] & {\n      margin: 0 0 0 1.25em;\n    }\n\n    ", "\n  }\n"])), _ref5 => {
  let {
    animations
  } = _ref5;
  return animations && css(_templateObject46 || (_templateObject46 = _taggedTemplateLiteral(["\n      animation: ", " steps(4, end) 900ms infinite;\n    "])), ellipsis);
});
const ButtonsActions = styled.div(_templateObject47 || (_templateObject47 = _taggedTemplateLiteral(["\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n"])));
// @ts-ignore - Button is a JS Component
const PublishButton = styled(Button)(_templateObject48 || (_templateObject48 = _taggedTemplateLiteral(["\n  width: 48%;\n  overflow-wrap: break-word;\n  white-space: pre-wrap;\n"])));
const CancelButton = styled(PublishButton)(_templateObject49 || (_templateObject49 = _taggedTemplateLiteral([""])));
// @ts-ignore - Button is a JS Component
const LiveResultButton = styled(Button)(_templateObject50 || (_templateObject50 = _taggedTemplateLiteral(["\n  width: 100%;\n  margin-top: ", ";\n  margin-bottom: ", ";\n  font-size: ", ";\n  overflow-wrap: break-word;\n  white-space: pre-wrap;\n"])), smPaddingY, smPaddingY, fontSizeBase);
const Separator = styled.div(_templateObject51 || (_templateObject51 = _taggedTemplateLiteral(["\n  display: flex;\n  flex: 1 1 100%;\n  height: 1px;\n  min-height: 1px;\n  background-color: ", ";\n  padding: 0;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n"])), colorGrayLightest);
const THeading = styled.th(_templateObject52 || (_templateObject52 = _taggedTemplateLiteral(["\n  text-align: left;\n\n  [dir=\"rtl\"] & {\n    text-align: right;\n  }\n"])));
const DndTextArea = styled.textarea(_templateObject53 || (_templateObject53 = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n"])), _ref6 => {
  let {
    active
  } = _ref6;
  return active && "\n    background: ".concat(colorGrayLighter, ";\n  ");
}, _ref7 => {
  let {
    active
  } = _ref7;
  return !active && "\n    background: ".concat(colorWhite, ";\n  ");
});
module.exportDefault({
  ToggleLabel,
  PollOptionInput,
  DeletePollOptionButton,
  ErrorSpacer,
  InputError,
  Instructions,
  PollQuestionArea,
  SectionHeading,
  ResponseType,
  PollConfigButton,
  PollParagraph,
  PollCheckbox,
  AddItemButton,
  Row,
  Col,
  Toggle,
  StartPollBtn,
  NoSlidePanelContainer,
  PollButton,
  DragAndDropPollContainer,
  Warning,
  CustomInputRow,
  Question,
  OptionWrapper,
  ResponseArea,
  CustomInputHeading,
  CustomInputHeadingCol,
  CustomInputToggleCol,
  AnonymousHeading,
  AnonymousHeadingCol,
  AnonymousToggleCol,
  AnonymousRow,
  ResultLeft,
  ResultRight,
  Main,
  Left,
  Center,
  Right,
  BarShade,
  BarVal,
  Stats,
  Title,
  Status,
  ConnectingAnimation,
  ButtonsActions,
  PublishButton,
  CancelButton,
  LiveResultButton,
  Separator,
  THeading,
  DndTextArea
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"screenshare":{"switch-button":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenshare/switch-button/component.jsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const intlMessages = defineMessages({
  switchButtonShrink: {
    id: 'app.switchButton.shrinkLabel',
    description: 'shrink label'
  },
  switchButtonExpand: {
    id: 'app.switchButton.expandLabel',
    description: 'expand label'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  dark: PropTypes.bool,
  bottom: PropTypes.bool,
  handleSwitch: PropTypes.func,
  switched: PropTypes.bool
};
const SwitchButtonComponent = _ref => {
  let {
    intl,
    dark = false,
    bottom = false,
    handleSwitch = () => {},
    switched = false
  } = _ref;
  const formattedLabel = intl.formatMessage(switched ? intlMessages.switchButtonShrink : intlMessages.switchButtonExpand);
  return /*#__PURE__*/React.createElement(Styled.SwitchButtonWrapper, {
    dark: dark,
    bottom: bottom
  }, /*#__PURE__*/React.createElement(Styled.SwitchButton, {
    color: "default",
    icon: switched ? 'screenshare-close-fullscreen' : 'screenshare-fullscreen',
    size: "sm",
    onClick: handleSwitch,
    label: formattedLabel,
    hideLabel: true,
    "data-test": "switchButton"
  }));
};
SwitchButtonComponent.propTypes = propTypes;
module.exportDefault(injectIntl(SwitchButtonComponent));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenshare/switch-button/container.jsx                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let SwitchButtonComponent;
module.link("./component", {
  default(v) {
    SwitchButtonComponent = v;
  }
}, 1);
const SwitchButtonContainer = props => /*#__PURE__*/React.createElement(SwitchButtonComponent, props);
module.exportDefault(props => /*#__PURE__*/React.createElement(SwitchButtonContainer, props));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenshare/switch-button/styles.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite, colorTransparent, colorBlack;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorTransparent(v) {
    colorTransparent = v;
  },
  colorBlack(v) {
    colorBlack = v;
  }
}, 1);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 2);
const SwitchButtonWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  right: 0;\n  left: auto;\n  background-color: ", ";\n  cursor: pointer;\n  border: 0;\n  z-index: 2;\n  margin: 2px;\n\n  [dir=\"rtl\"] & {\n    right: auto;\n    left: 1.75rem;\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), colorTransparent, _ref => {
  let {
    dark
  } = _ref;
  return dark && "\n    background-color: rgba(0,0,0,.3);\n\n    & button i {\n      color: ".concat(colorWhite, ";\n    }\n  ");
}, _ref2 => {
  let {
    dark
  } = _ref2;
  return !dark && "\n    background-color: ".concat(colorTransparent, ";\n\n    & button i {\n      color: ").concat(colorBlack, ";\n    }\n  ");
}, _ref3 => {
  let {
    bottom
  } = _ref3;
  return bottom && "\n    bottom: 0;\n  ";
}, _ref4 => {
  let {
    bottom
  } = _ref4;
  return !bottom && "\n    top: 0;\n  ";
});
const SwitchButton = styled(Button)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding: 5px;\n\n  &,\n  &:active,\n  &:hover,\n  &:focus {\n    background-color: ", " !important;\n    border: none !important;\n\n    i {\n      border: none !important;\n      background-color: ", " !important;\n      font-size: 1rem;\n    }\n  }\n"])), colorTransparent, colorTransparent);
module.exportDefault({
  SwitchButtonWrapper,
  SwitchButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenshare/component.jsx                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let injectIntl;
module.link("react-intl", {
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let debounce;
module.link("/imports/utils/debounce", {
  debounce(v) {
    debounce = v;
  }
}, 3);
let FullscreenButtonContainer;
module.link("/imports/ui/components/common/fullscreen-button/container", {
  default(v) {
    FullscreenButtonContainer = v;
  }
}, 4);
let SwitchButtonContainer;
module.link("./switch-button/container", {
  default(v) {
    SwitchButtonContainer = v;
  }
}, 5);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 6);
let VolumeSlider;
module.link("../external-video-player/volume-slider/component", {
  default(v) {
    VolumeSlider = v;
  }
}, 7);
let AutoplayOverlay;
module.link("../media/autoplay-overlay/component", {
  default(v) {
    AutoplayOverlay = v;
  }
}, 8);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 9);
let playAndRetry;
module.link("/imports/utils/mediaElementPlayRetry", {
  default(v) {
    playAndRetry = v;
  }
}, 10);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 11);
let SCREENSHARE_MEDIA_ELEMENT_NAME, isMediaFlowing, screenshareHasEnded, screenshareHasStarted, setOutputDeviceId, getMediaElement, getMediaElementDimensions, attachLocalPreviewStream, setVolume, getVolume, getStats;
module.link("/imports/ui/components/screenshare/service", {
  SCREENSHARE_MEDIA_ELEMENT_NAME(v) {
    SCREENSHARE_MEDIA_ELEMENT_NAME = v;
  },
  isMediaFlowing(v) {
    isMediaFlowing = v;
  },
  screenshareHasEnded(v) {
    screenshareHasEnded = v;
  },
  screenshareHasStarted(v) {
    screenshareHasStarted = v;
  },
  setOutputDeviceId(v) {
    setOutputDeviceId = v;
  },
  getMediaElement(v) {
    getMediaElement = v;
  },
  getMediaElementDimensions(v) {
    getMediaElementDimensions = v;
  },
  attachLocalPreviewStream(v) {
    attachLocalPreviewStream = v;
  },
  setVolume(v) {
    setVolume = v;
  },
  getVolume(v) {
    getVolume = v;
  },
  getStats(v) {
    getStats = v;
  }
}, 12);
let isStreamStateHealthy, subscribeToStreamStateChange, unsubscribeFromStreamStateChange;
module.link("/imports/ui/services/bbb-webrtc-sfu/stream-state-service", {
  isStreamStateHealthy(v) {
    isStreamStateHealthy = v;
  },
  subscribeToStreamStateChange(v) {
    subscribeToStreamStateChange = v;
  },
  unsubscribeFromStreamStateChange(v) {
    unsubscribeFromStreamStateChange = v;
  }
}, 13);
let ACTIONS, PRESENTATION_AREA;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PRESENTATION_AREA(v) {
    PRESENTATION_AREA = v;
  }
}, 14);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 15);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 16);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 17);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 18);
const MOBILE_HOVER_TIMEOUT = 5000;
const MEDIA_FLOW_PROBE_INTERVAL = 500;
const SCREEN_SIZE_DISPATCH_INTERVAL = 500;
class ScreenshareComponent extends React.Component {
  static renderScreenshareContainerInside(mainText) {
    return /*#__PURE__*/React.createElement(Styled.ScreenshareContainerInside, null, /*#__PURE__*/React.createElement(Styled.MainText, null, mainText));
  }
  constructor(props) {
    super();
    this.state = {
      loaded: false,
      autoplayBlocked: false,
      mediaFlowing: true,
      switched: false,
      // Volume control hover toolbar
      showHoverToolBar: false
    };
    this.onLoadedData = this.onLoadedData.bind(this);
    this.onLoadedMetadata = this.onLoadedMetadata.bind(this);
    this.onVideoResize = this.onVideoResize.bind(this);
    this.handleAllowAutoplay = this.handleAllowAutoplay.bind(this);
    this.handlePlayElementFailed = this.handlePlayElementFailed.bind(this);
    this.failedMediaElements = [];
    this.onStreamStateChange = this.onStreamStateChange.bind(this);
    this.onSwitched = this.onSwitched.bind(this);
    this.handleOnVolumeChanged = this.handleOnVolumeChanged.bind(this);
    this.dispatchScreenShareSize = this.dispatchScreenShareSize.bind(this);
    this.handleOnMuted = this.handleOnMuted.bind(this);
    this.dispatchScreenShareSize = this.dispatchScreenShareSize.bind(this);
    this.debouncedDispatchScreenShareSize = debounce(this.dispatchScreenShareSize, SCREEN_SIZE_DISPATCH_INTERVAL, {
      leading: false,
      trailing: true
    });
    const {
      locales,
      icon
    } = props;
    this.locales = locales;
    this.icon = icon;
    this.volume = getVolume();
    this.mobileHoverSetTimeout = null;
    this.mediaFlowMonitor = null;
  }
  componentDidMount() {
    const {
      isLayoutSwapped,
      layoutContextDispatch,
      intl,
      isPresenter,
      startPreviewSizeBig,
      outputDeviceId,
      isSharedNotesPinned,
      hasAudio
    } = this.props;
    screenshareHasStarted(hasAudio, isPresenter, {
      outputDeviceId
    });
    // Autoplay failure handling
    window.addEventListener('screensharePlayFailed', this.handlePlayElementFailed);
    // Stream health state tracker to propagate UI changes on reconnections
    subscribeToStreamStateChange('screenshare', this.onStreamStateChange);
    // Attaches the local stream if it exists to serve as the local presenter preview
    attachLocalPreviewStream(getMediaElement());
    this.setState({
      switched: startPreviewSizeBig
    });
    notify(intl.formatMessage(this.locales.started), 'info', this.icon);
    layoutContextDispatch({
      type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
      value: {
        content: PRESENTATION_AREA.SCREEN_SHARE,
        open: true
      }
    });
    if (isLayoutSwapped) {
      layoutContextDispatch({
        type: ACTIONS.SET_PRESENTATION_IS_OPEN,
        value: true
      });
    }
    Session.setItem('pinnedNotesLastState', isSharedNotesPinned);
  }
  componentDidUpdate(prevProps) {
    const {
      isPresenter,
      outputDeviceId
    } = this.props;
    if (prevProps.isPresenter && !isPresenter) {
      screenshareHasEnded();
    }
    if (prevProps.outputDeviceId !== outputDeviceId && !isPresenter) {
      setOutputDeviceId(outputDeviceId);
    }
  }
  componentWillUnmount() {
    const {
      intl,
      fullscreenContext,
      layoutContextDispatch
    } = this.props;
    screenshareHasEnded();
    window.removeEventListener('screensharePlayFailed', this.handlePlayElementFailed);
    unsubscribeFromStreamStateChange('screenshare', this.onStreamStateChange);
    const Settings = getSettingsSingletonInstance();
    if (Settings.dataSaving.viewScreenshare) {
      notify(intl.formatMessage(this.locales.ended), 'info', this.icon);
    } else {
      notify(intl.formatMessage(this.locales.endedDueToDataSaving), 'info', this.icon);
    }
    layoutContextDispatch({
      type: ACTIONS.SET_PILE_CONTENT_FOR_PRESENTATION_AREA,
      value: {
        content: PRESENTATION_AREA.SCREEN_SHARE,
        open: false
      }
    });
    if (fullscreenContext) {
      layoutContextDispatch({
        type: ACTIONS.SET_FULLSCREEN_ELEMENT,
        value: {
          element: '',
          group: ''
        }
      });
    }
    this.clearMediaFlowingMonitor();
    layoutContextDispatch({
      type: ACTIONS.SET_PRESENTATION_IS_OPEN,
      value: Session.getItem('presentationLastState')
    });
  }
  clearMediaFlowingMonitor() {
    if (this.mediaFlowMonitor) {
      clearInterval(this.mediaFlowMonitor);
      this.mediaFlowMonitor = null;
    }
  }
  handleAllowAutoplay() {
    const {
      autoplayBlocked
    } = this.state;
    logger.info({
      logCode: 'screenshare_autoplay_allowed'
    }, 'Screenshare media autoplay allowed by the user');
    window.removeEventListener('screensharePlayFailed', this.handlePlayElementFailed);
    while (this.failedMediaElements.length) {
      const mediaElement = this.failedMediaElements.shift();
      if (mediaElement) {
        const played = playAndRetry(mediaElement);
        if (!played) {
          logger.error({
            logCode: 'screenshare_autoplay_handling_failed'
          }, 'Screenshare autoplay handling failed to play media');
        } else {
          logger.info({
            logCode: 'screenshare_viewer_media_play_success'
          }, 'Screenshare viewer media played successfully');
        }
      }
    }
    if (autoplayBlocked) {
      this.setState({
        autoplayBlocked: false
      });
    }
  }
  handlePlayElementFailed(e) {
    const {
      mediaElement
    } = e.detail;
    const {
      autoplayBlocked
    } = this.state;
    e.stopPropagation();
    this.failedMediaElements.push(mediaElement);
    if (!autoplayBlocked) {
      logger.info({
        logCode: 'screenshare_autoplay_prompt'
      }, 'Prompting user for action to play screenshare media');
      this.setState({
        autoplayBlocked: true
      });
    }
  }
  async monitorMediaFlow() {
    let previousStats = await getStats();
    this.mediaFlowMonitor = setInterval(async () => {
      const {
        mediaFlowing: prevMediaFlowing
      } = this.state;
      let mediaFlowing;
      const currentStats = await getStats();
      try {
        mediaFlowing = isMediaFlowing(previousStats, currentStats);
      } catch (error) {
        // Stats processing failed for whatever reason - maintain previous state
        mediaFlowing = prevMediaFlowing;
        logger.warn({
          logCode: 'screenshare_media_monitor_stats_failed',
          extraInfo: {
            errorName: error.name,
            errorMessage: error.message
          }
        }, 'Failed to collect screenshare stats, flow monitor');
      }
      previousStats = currentStats;
      if (prevMediaFlowing !== mediaFlowing) this.setState({
        mediaFlowing
      });
    }, MEDIA_FLOW_PROBE_INTERVAL);
  }
  dispatchScreenShareSize() {
    const {
      layoutContextDispatch
    } = this.props;
    const {
      width,
      height
    } = getMediaElementDimensions();
    const value = {
      width,
      height,
      browserWidth: window.innerWidth,
      browserHeight: window.innerHeight
    };
    layoutContextDispatch({
      type: ACTIONS.SET_SCREEN_SHARE_SIZE,
      value
    });
  }
  onLoadedMetadata() {
    const element = getMediaElement();

    // Track HTMLVideo's resize event to propagate stream size changes to the
    // layout engine. See this.onVideoResize;
    if (element && typeof element.onresize !== 'function') {
      element.onresize = this.onVideoResize;
    }

    // Dispatch the initial stream size to the layout engine
    this.dispatchScreenShareSize();
  }
  onLoadedData() {
    this.setState({
      loaded: true
    });
  }
  onSwitched() {
    this.setState(prevState => ({
      switched: !prevState.switched
    }));
  }
  handleOnVolumeChanged(volume) {
    this.volume = volume;
    setVolume(volume);
  }
  handleOnMuted(muted) {
    if (muted) {
      setVolume(0);
    } else {
      setVolume(this.volume);
    }
  }
  onVideoResize() {
    // Debounced version of the dispatcher to pace things out - we don't want
    // to hog the CPU just for resize recalculations...
    this.debouncedDispatchScreenShareSize();
  }
  onStreamStateChange(event) {
    const {
      streamState
    } = event.detail;
    const {
      mediaFlowing
    } = this.state;
    const isStreamHealthy = isStreamStateHealthy(streamState);
    event.stopPropagation();
    if (isStreamHealthy) {
      this.clearMediaFlowingMonitor();
      // Current state is media not flowing - stream is now healthy so flip it
      if (!mediaFlowing) this.setState({
        mediaFlowing: isStreamHealthy
      });
    } else if (this.mediaFlowMonitor == null) this.monitorMediaFlow();
  }
  renderFullscreenButton() {
    const {
      intl,
      fullscreenElementId,
      fullscreenContext
    } = this.props;
    const ALLOW_FULLSCREEN = window.meetingClientSettings.public.app.allowFullscreen;
    if (!ALLOW_FULLSCREEN) return null;
    return /*#__PURE__*/React.createElement(FullscreenButtonContainer, {
      key: uniqueId('fullscreenButton-'),
      elementName: intl.formatMessage(this.locales.label),
      fullscreenRef: this.screenshareContainer,
      elementId: fullscreenElementId,
      isFullscreen: fullscreenContext,
      dark: true
    });
  }
  renderAutoplayOverlay() {
    const {
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement(AutoplayOverlay, {
      key: uniqueId('screenshareAutoplayOverlay'),
      autoplayBlockedDesc: intl.formatMessage(this.locales.autoplayBlockedDesc),
      autoplayAllowLabel: intl.formatMessage(this.locales.autoplayAllowLabel),
      handleAllowAutoplay: this.handleAllowAutoplay
    });
  }
  renderSwitchButton() {
    const {
      showSwitchPreviewSizeButton
    } = this.props;
    const {
      switched
    } = this.state;
    if (!showSwitchPreviewSizeButton) return null;
    return /*#__PURE__*/React.createElement(SwitchButtonContainer, {
      handleSwitch: this.onSwitched,
      switched: switched,
      dark: true
    });
  }
  renderMobileVolumeControlOverlay() {
    return /*#__PURE__*/React.createElement(Styled.MobileControlsOverlay, {
      key: "mobile-overlay-screenshare",
      ref: ref => {
        this.overlay = ref;
      },
      onTouchStart: () => {
        clearTimeout(this.mobileHoverSetTimeout);
        this.setState({
          showHoverToolBar: true
        });
      },
      onTouchEnd: () => {
        this.mobileHoverSetTimeout = setTimeout(() => this.setState({
          showHoverToolBar: false
        }), MOBILE_HOVER_TIMEOUT);
      }
    });
  }
  renderVolumeSlider() {
    const {
      showHoverToolBar
    } = this.state;
    let toolbarStyle = 'hoverToolbar';
    if (deviceInfo.isMobile && !showHoverToolBar) {
      toolbarStyle = 'dontShowMobileHoverToolbar';
    }
    if (deviceInfo.isMobile && showHoverToolBar) {
      toolbarStyle = 'showMobileHoverToolbar';
    }
    return [/*#__PURE__*/React.createElement(Styled.HoverToolbar, {
      toolbarStyle: toolbarStyle,
      key: "hover-toolbar-screenshare"
    }, /*#__PURE__*/React.createElement(VolumeSlider, {
      volume: getVolume(),
      muted: getVolume() === 0,
      onVolumeChanged: this.handleOnVolumeChanged,
      onMuted: this.handleOnMuted
    })), deviceInfo.isMobile && this.renderMobileVolumeControlOverlay()];
  }
  renderVideo(switched) {
    const {
      isGloballyBroadcasting
    } = this.props;
    const {
      mediaFlowing
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.ScreenshareVideo, {
      id: SCREENSHARE_MEDIA_ELEMENT_NAME,
      key: SCREENSHARE_MEDIA_ELEMENT_NAME,
      unhealthyStream: !isGloballyBroadcasting || !mediaFlowing,
      style: switched ? {
        maxHeight: '100%',
        width: '100%',
        height: '100%'
      } : {
        maxHeight: '25%',
        width: '25%',
        height: '25%'
      },
      playsInline: true,
      onLoadedData: this.onLoadedData,
      onLoadedMetadata: this.onLoadedMetadata,
      ref: ref => {
        this.videoTag = ref;
      },
      muted: true
    });
  }
  renderScreensharePresenter() {
    const {
      switched
    } = this.state;
    const {
      isGloballyBroadcasting,
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.ScreenshareContainer, {
      switched: switched,
      key: "screenshareContainer",
      ref: ref => {
        this.screenshareContainer = ref;
      }
    }, isGloballyBroadcasting && this.renderSwitchButton(), this.renderVideo(switched), isGloballyBroadcasting ? /*#__PURE__*/React.createElement("div", {
      "data-test": "isSharingScreen"
    }, !switched && ScreenshareComponent.renderScreenshareContainerInside(intl.formatMessage(this.locales.presenterSharingLabel))) : ScreenshareComponent.renderScreenshareContainerInside(intl.formatMessage(this.locales.presenterLoadingLabel)));
  }
  renderScreenshareDefault() {
    const {
      intl,
      enableVolumeControl
    } = this.props;
    const {
      loaded
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.ScreenshareContainer, {
      switched: true,
      key: "screenshareContainer",
      ref: ref => {
        this.screenshareContainer = ref;
      },
      id: "screenshareContainer"
    }, loaded && this.renderFullscreenButton(), this.renderVideo(true), loaded && enableVolumeControl && this.renderVolumeSlider(), /*#__PURE__*/React.createElement(Styled.ScreenshareContainerDefault, null, !loaded ? ScreenshareComponent.renderScreenshareContainerInside(intl.formatMessage(this.locales.viewerLoadingLabel)) : null));
  }
  render() {
    const {
      loaded,
      autoplayBlocked,
      mediaFlowing
    } = this.state;
    const {
      isPresenter,
      isGloballyBroadcasting,
      top,
      left,
      right,
      width,
      height,
      zIndex,
      fullscreenContext
    } = this.props;

    // Conditions to render the (re)connecting dots and the unhealthy stream
    // grayscale:
    // 1 - The local media tag has not received any stream data yet
    // 2 - The user is a presenter and the stream wasn't globally broadcasted yet
    // 3 - The media was loaded, the stream was globally broadcasted BUT the stream
    // state transitioned to an unhealthy stream. tl;dr: screen sharing reconnection
    const shouldRenderConnectingState = !loaded || isPresenter && !isGloballyBroadcasting || !mediaFlowing && loaded && isGloballyBroadcasting;
    const display = width > 0 && height > 0 ? 'inherit' : 'none';
    const Settings = getSettingsSingletonInstance();
    const {
      animations
    } = Settings.application;
    return /*#__PURE__*/React.createElement("div", {
      style: {
        position: 'absolute',
        display,
        top,
        left,
        right,
        height,
        width,
        zIndex: fullscreenContext ? zIndex : undefined,
        backgroundColor: '#06172A'
      }
    }, shouldRenderConnectingState && /*#__PURE__*/React.createElement(Styled.SpinnerWrapper, {
      key: uniqueId('screenshareArea-'),
      "data-test": "screenshareConnecting"
    }, /*#__PURE__*/React.createElement(Styled.Spinner, {
      animations: animations
    }, /*#__PURE__*/React.createElement(Styled.Bounce1, {
      animations: animations
    }), /*#__PURE__*/React.createElement(Styled.Bounce2, {
      animations: animations
    }), /*#__PURE__*/React.createElement("div", null))), autoplayBlocked ? this.renderAutoplayOverlay() : null, isPresenter ? this.renderScreensharePresenter() : this.renderScreenshareDefault());
  }
}
module.exportDefault(injectIntl(ScreenshareComponent));
ScreenshareComponent.propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  isPresenter: PropTypes.bool.isRequired,
  layoutContextDispatch: PropTypes.func.isRequired,
  enableVolumeControl: PropTypes.bool.isRequired,
  outputDeviceId: PropTypes.string
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenshare/container.jsx                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation, useReactiveVar;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 2);
let getSharingContentType, useIsScreenGloballyBroadcasting, useIsCameraAsContentGloballyBroadcasting, useShouldEnableVolumeControl, useIsScreenBroadcasting, useIsCameraAsContentBroadcasting, useScreenshareHasAudio, useBroadcastContentType;
module.link("./service", {
  getSharingContentType(v) {
    getSharingContentType = v;
  },
  useIsScreenGloballyBroadcasting(v) {
    useIsScreenGloballyBroadcasting = v;
  },
  useIsCameraAsContentGloballyBroadcasting(v) {
    useIsCameraAsContentGloballyBroadcasting = v;
  },
  useShouldEnableVolumeControl(v) {
    useShouldEnableVolumeControl = v;
  },
  useIsScreenBroadcasting(v) {
    useIsScreenBroadcasting = v;
  },
  useIsCameraAsContentBroadcasting(v) {
    useIsCameraAsContentBroadcasting = v;
  },
  useScreenshareHasAudio(v) {
    useScreenshareHasAudio = v;
  },
  useBroadcastContentType(v) {
    useBroadcastContentType = v;
  }
}, 3);
let ScreenshareComponent;
module.link("./component", {
  default(v) {
    ScreenshareComponent = v;
  }
}, 4);
let layoutSelect, layoutSelectOutput, layoutDispatch;
module.link("../layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 5);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 6);
let EXTERNAL_VIDEO_STOP;
module.link("../external-video-player/mutations", {
  EXTERNAL_VIDEO_STOP(v) {
    EXTERNAL_VIDEO_STOP = v;
  }
}, 7);
let PINNED_PAD_SUBSCRIPTION;
module.link("../notes/queries", {
  PINNED_PAD_SUBSCRIPTION(v) {
    PINNED_PAD_SUBSCRIPTION = v;
  }
}, 8);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 9);
let AudioManager;
module.link("/imports/ui/services/audio-manager", {
  default(v) {
    AudioManager = v;
  }
}, 10);
const screenshareIntlMessages = defineMessages({
  // SCREENSHARE
  label: {
    id: 'app.screenshare.screenShareLabel',
    description: 'screen share area element label'
  },
  presenterLoadingLabel: {
    id: 'app.screenshare.presenterLoadingLabel'
  },
  viewerLoadingLabel: {
    id: 'app.screenshare.viewerLoadingLabel'
  },
  presenterSharingLabel: {
    id: 'app.screenshare.presenterSharingLabel'
  },
  autoplayBlockedDesc: {
    id: 'app.media.screenshare.autoplayBlockedDesc'
  },
  autoplayAllowLabel: {
    id: 'app.media.screenshare.autoplayAllowLabel'
  },
  started: {
    id: 'app.media.screenshare.start',
    description: 'toast to show when a screenshare has started'
  },
  ended: {
    id: 'app.media.screenshare.end',
    description: 'toast to show when a screenshare has ended'
  },
  endedDueToDataSaving: {
    id: 'app.media.screenshare.endDueToDataSaving',
    description: 'toast to show when a screenshare has ended by changing data savings option'
  }
});
const cameraAsContentIntlMessages = defineMessages({
  // CAMERA AS CONTENT
  label: {
    id: 'app.cameraAsContent.cameraAsContentLabel',
    description: 'screen share area element label'
  },
  presenterLoadingLabel: {
    id: 'app.cameraAsContent.presenterLoadingLabel'
  },
  viewerLoadingLabel: {
    id: 'app.cameraAsContent.viewerLoadingLabel'
  },
  presenterSharingLabel: {
    id: 'app.cameraAsContent.presenterSharingLabel'
  },
  autoplayBlockedDesc: {
    id: 'app.media.cameraAsContent.autoplayBlockedDesc'
  },
  autoplayAllowLabel: {
    id: 'app.media.cameraAsContent.autoplayAllowLabel'
  },
  started: {
    id: 'app.media.cameraAsContent.start',
    description: 'toast to show when camera as content has started'
  },
  ended: {
    id: 'app.media.cameraAsContent.end',
    description: 'toast to show when camera as content has ended'
  },
  endedDueToDataSaving: {
    id: 'app.media.cameraAsContent.endDueToDataSaving',
    description: 'toast to show when camera as content has ended by changing data savings option'
  }
});
const ScreenshareContainer = props => {
  var _pinnedPadData$shared;
  const screenShare = layoutSelectOutput(i => i.screenShare);
  const fullscreen = layoutSelect(i => i.fullscreen);
  const layoutContextDispatch = layoutDispatch();
  const {
    element
  } = fullscreen;
  const fullscreenElementId = 'Screenshare';
  const fullscreenContext = element === fullscreenElementId;
  const [stopExternalVideoShare] = useMutation(EXTERNAL_VIDEO_STOP);
  const {
    data: pinnedPadData
  } = useDeduplicatedSubscription(PINNED_PAD_SUBSCRIPTION);
  const NOTES_CONFIG = window.meetingClientSettings.public.notes;
  const LAYOUT_CONFIG = window.meetingClientSettings.public.layout;
  const isSharedNotesPinned = !!pinnedPadData && ((_pinnedPadData$shared = pinnedPadData.sharedNotes[0]) === null || _pinnedPadData$shared === void 0 ? void 0 : _pinnedPadData$shared.sharedNotesExtId) === NOTES_CONFIG.id;
  const {
    isPresenter
  } = props;
  const info = {
    screenshare: {
      icon: 'desktop',
      locales: screenshareIntlMessages,
      startPreviewSizeBig: false,
      showSwitchPreviewSizeButton: true
    },
    camera: {
      icon: 'video',
      locales: cameraAsContentIntlMessages,
      startPreviewSizeBig: true,
      showSwitchPreviewSizeButton: false
    }
  };
  const broadcastContentType = useBroadcastContentType();
  const getContentType = () => isPresenter ? getSharingContentType() : broadcastContentType;
  const contentTypeInfo = info[getContentType()];
  const defaultInfo = info.camera;
  const selectedInfo = contentTypeInfo || defaultInfo;
  const outputDeviceId = useReactiveVar(AudioManager._outputDeviceId.value);
  const screenIsGloballyBroadcasting = useIsScreenGloballyBroadcasting();
  const cameraAsContentIsGloballyBroadcasting = useIsCameraAsContentGloballyBroadcasting();
  const enableVolumeControl = useShouldEnableVolumeControl();
  const isScreenBroadcasting = useIsScreenBroadcasting();
  const isCameraAsContentBroadcasting = useIsCameraAsContentBroadcasting();
  const hasAudio = useScreenshareHasAudio();
  if (isScreenBroadcasting || isCameraAsContentBroadcasting) {
    return /*#__PURE__*/React.createElement(ScreenshareComponent, _objectSpread(_objectSpread(_objectSpread({
      layoutContextDispatch
    }, props), screenShare), {}, {
      fullscreenContext,
      fullscreenElementId,
      isSharedNotesPinned,
      stopExternalVideoShare,
      outputDeviceId,
      enableVolumeControl,
      hasAudio,
      isGloballyBroadcasting: screenIsGloballyBroadcasting || cameraAsContentIsGloballyBroadcasting,
      hidePresentationOnJoin: getFromUserSettings('bbb_hide_presentation_on_join', LAYOUT_CONFIG.hidePresentationOnJoin)
    }, selectedInfo));
  }
  return null;
};
module.exportDefault(ScreenshareContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenshare/queries.ts                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  SCREENSHARE_SUBSCRIPTION: () => SCREENSHARE_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const SCREENSHARE_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription Screenshare {\n    screenshare {\n      contentType\n      hasAudio\n      screenshareConf\n      screenshareId\n      startedAt\n      stoppedAt\n      stream\n      vidHeight\n      vidWidth\n      voiceConf\n    }\n  }\n"])));
module.exportDefault({
  SCREENSHARE_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenshare/service.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  SCREENSHARE_MEDIA_ELEMENT_NAME: () => SCREENSHARE_MEDIA_ELEMENT_NAME,
  isMediaFlowing: () => isMediaFlowing,
  screenshareHasEnded: () => screenshareHasEnded,
  screenshareHasStarted: () => screenshareHasStarted,
  shareScreen: () => shareScreen,
  screenShareEndAlert: () => screenShareEndAlert,
  isSharing: () => isSharing,
  setIsSharing: () => setIsSharing,
  setSharingContentType: () => setSharingContentType,
  getSharingContentType: () => getSharingContentType,
  getMediaElement: () => getMediaElement,
  getMediaElementDimensions: () => getMediaElementDimensions,
  attachLocalPreviewStream: () => attachLocalPreviewStream,
  getStats: () => getStats,
  setVolume: () => setVolume,
  getVolume: () => getVolume,
  setCameraAsContentDeviceId: () => setCameraAsContentDeviceId,
  getCameraAsContentDeviceId: () => getCameraAsContentDeviceId,
  setOutputDeviceId: () => setOutputDeviceId,
  useCameraAsContentDeviceIdType: () => useCameraAsContentDeviceIdType,
  useIsSharing: () => useIsSharing,
  useSharingContentType: () => useSharingContentType,
  useIsScreenGloballyBroadcasting: () => useIsScreenGloballyBroadcasting,
  useIsCameraAsContentGloballyBroadcasting: () => useIsCameraAsContentGloballyBroadcasting,
  useShouldEnableVolumeControl: () => useShouldEnableVolumeControl,
  useIsScreenBroadcasting: () => useIsScreenBroadcasting,
  useIsCameraAsContentBroadcasting: () => useIsCameraAsContentBroadcasting,
  useScreenshareHasAudio: () => useScreenshareHasAudio,
  useBroadcastContentType: () => useBroadcastContentType
});
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 0);
let KurentoBridge;
module.link("/imports/api/screenshare/client/bridge", {
  default(v) {
    KurentoBridge = v;
  }
}, 1);
let BridgeService;
module.link("/imports/api/screenshare/client/bridge/service", {
  default(v) {
    BridgeService = v;
  }
}, 2);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 3);
let AudioService;
module.link("/imports/ui/components/audio/service", {
  default(v) {
    AudioService = v;
  }
}, 4);
let MediaStreamUtils;
module.link("/imports/utils/media-stream-utils", {
  default(v) {
    MediaStreamUtils = v;
  }
}, 5);
let ConnectionStatusService;
module.link("/imports/ui/components/connection-status/service", {
  default(v) {
    ConnectionStatusService = v;
  }
}, 6);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 7);
let createUseSubscription;
module.link("/imports/ui/core/hooks/createUseSubscription", {
  default(v) {
    createUseSubscription = v;
  }
}, 8);
let SCREENSHARE_SUBSCRIPTION;
module.link("./queries", {
  SCREENSHARE_SUBSCRIPTION(v) {
    SCREENSHARE_SUBSCRIPTION = v;
  }
}, 9);
const SCREENSHARE_MEDIA_ELEMENT_NAME = 'screenshareVideo';
const DEFAULT_SCREENSHARE_STATS_TYPES = ['outbound-rtp', 'inbound-rtp'];
const CONTENT_TYPE_CAMERA = 'camera';
const CONTENT_TYPE_SCREENSHARE = 'screenshare';
const isSharingVar = makeVar(false);
const sharingContentTypeVar = makeVar(false);
const cameraAsContentDeviceIdTypeVar = makeVar('');
const useScreenshare = createUseSubscription(SCREENSHARE_SUBSCRIPTION, {}, true);
const useIsSharing = () => useReactiveVar(isSharingVar);
const useSharingContentType = () => useReactiveVar(sharingContentTypeVar);
const useCameraAsContentDeviceIdType = () => useReactiveVar(cameraAsContentDeviceIdTypeVar);
const isSharing = () => isSharingVar();
const setIsSharing = sharing => {
  if (isSharing() !== sharing) {
    isSharingVar(sharing);
  }
};
const getSharingContentType = () => sharingContentTypeVar();
const setSharingContentType = contentType => {
  if (getSharingContentType() !== contentType) {
    sharingContentTypeVar(contentType);
  }
};
const getCameraAsContentDeviceId = () => cameraAsContentDeviceIdTypeVar();
const setCameraAsContentDeviceId = deviceId => {
  if (getCameraAsContentDeviceId() !== deviceId) {
    cameraAsContentDeviceIdTypeVar(deviceId);
  }
};
const _trackStreamTermination = (stream, handler) => {
  if (typeof stream !== 'object' || typeof handler !== 'function') {
    throw new TypeError('Invalid trackStreamTermination arguments');
  }
  let _handler = handler;

  // Dirty, but effective way of checking whether the browser supports the 'inactive'
  // event. If the oninactive interface is null, it can be overridden === supported.
  // If undefined, it's not; so we fallback to the track 'ended' event.
  // The track ended listener should probably be reviewed once we create
  // thin wrapper classes for MediaStreamTracks as well, because we'll want a single
  // media stream holding multiple tracks in the future
  if (stream.oninactive !== undefined) {
    if (typeof stream.oninactive === 'function') {
      const oldHandler = stream.oninactive;
      _handler = () => {
        oldHandler();
        handler();
      };
    }
    stream.addEventListener('inactive', handler, {
      once: true
    });
  } else {
    const track = MediaStreamUtils.getVideoTracks(stream)[0];
    if (track) {
      track.addEventListener('ended', handler, {
        once: true
      });
      if (typeof track.onended === 'function') {
        const oldHandler = track.onended;
        _handler = () => {
          oldHandler();
          handler();
        };
      }
      track.onended = _handler;
    }
  }
};
const _isStreamActive = stream => {
  const tracksAreActive = !stream.getTracks().some(track => track.readyState === 'ended');
  return tracksAreActive && stream.active;
};
const _handleStreamTermination = () => {
  screenshareHasEnded();
};
const useIsScreenGloballyBroadcasting = () => {
  const {
    data
  } = useScreenshare();
  return Boolean(data && data[0] && data[0].contentType === CONTENT_TYPE_SCREENSHARE && data[0].stream);
};
const useIsCameraAsContentGloballyBroadcasting = () => {
  const {
    data
  } = useScreenshare();
  return Boolean(data && data[0] && data[0].contentType === CONTENT_TYPE_CAMERA && data[0].stream);
};
const useIsScreenBroadcasting = () => {
  const active = useIsSharing();
  const sharingContentType = useSharingContentType();
  const screenIsShared = useIsScreenGloballyBroadcasting();
  const sharing = active && sharingContentType === CONTENT_TYPE_SCREENSHARE;
  return sharing || screenIsShared;
};
const useIsCameraAsContentBroadcasting = () => {
  const active = useIsSharing();
  const sharingContentType = useSharingContentType();
  const sharing = active && sharingContentType === CONTENT_TYPE_CAMERA;
  const cameraAsContentIsShared = useIsCameraAsContentGloballyBroadcasting();
  return sharing || cameraAsContentIsShared;
};
const useScreenshareHasAudio = () => {
  const {
    data
  } = useScreenshare();
  return Boolean(data && data[0] && data[0].hasAudio);
};
const useBroadcastContentType = () => {
  const {
    data
  } = useScreenshare();
  if (!data || !data[0]) {
    // defaults to contentType: "camera"
    return CONTENT_TYPE_CAMERA;
  }
  return data[0].contentType;
};
const screenshareHasEnded = () => {
  if (isSharingVar()) {
    setIsSharing(false);
  }
  if (getSharingContentType() === CONTENT_TYPE_CAMERA) {
    setCameraAsContentDeviceId('');
  }
  KurentoBridge.stop();
};
const getMediaElement = () => document.getElementById(SCREENSHARE_MEDIA_ELEMENT_NAME);
const getMediaElementDimensions = () => {
  var _element$videoWidth, _element$videoHeight;
  const element = getMediaElement();
  return {
    width: (_element$videoWidth = element === null || element === void 0 ? void 0 : element.videoWidth) !== null && _element$videoWidth !== void 0 ? _element$videoWidth : 0,
    height: (_element$videoHeight = element === null || element === void 0 ? void 0 : element.videoHeight) !== null && _element$videoHeight !== void 0 ? _element$videoHeight : 0
  };
};
const setVolume = volume => {
  KurentoBridge.setVolume(volume);
};
const getVolume = () => KurentoBridge.getVolume();
const useShouldEnableVolumeControl = () => {
  const SCREENSHARE_CONFIG = window.meetingClientSettings.public.kurento.screenshare;
  const VOLUME_CONTROL_ENABLED = SCREENSHARE_CONFIG.enableVolumeControl;
  const hasAudio = useScreenshareHasAudio();
  return VOLUME_CONTROL_ENABLED && hasAudio;
};
const attachLocalPreviewStream = mediaElement => {
  const {
    isTabletApp
  } = browserInfo;
  if (isTabletApp) {
    // We don't show preview for mobile app, as the stream is only available in native code
    return;
  }
  const stream = KurentoBridge.gdmStream;
  if (stream && mediaElement) {
    // Always muted, presenter preview.
    BridgeService.screenshareLoadAndPlayMediaStream(stream, mediaElement, true);
  }
};
const setOutputDeviceId = outputDeviceId => {
  const screenShareElement = document.getElementById(SCREENSHARE_MEDIA_ELEMENT_NAME);
  const sinkIdSupported = screenShareElement && typeof screenShareElement.setSinkId === 'function';
  const srcStream = screenShareElement === null || screenShareElement === void 0 ? void 0 : screenShareElement.srcObject;
  if (typeof outputDeviceId === 'string' && sinkIdSupported && screenShareElement.sinkId !== outputDeviceId && srcStream && srcStream.getAudioTracks().length > 0) {
    try {
      screenShareElement.setSinkId(outputDeviceId);
      logger.debug({
        logCode: 'screenshare_output_device_change',
        extraInfo: {
          newDeviceId: outputDeviceId
        }
      }, "Screenshare output device changed: to ".concat(outputDeviceId || 'default'));
    } catch (error) {
      logger.error({
        logCode: 'screenshare_output_device_change_failure',
        extraInfo: {
          errorName: error.name,
          errorMessage: error.message,
          newDeviceId: outputDeviceId
        }
      }, "Error changing screenshare output device - {".concat(error.name, ": ").concat(error.message, "}"));
    }
  }
};
const screenshareHasStarted = function (hasAudio, isPresenter) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  // Presenter's screen preview is local, so skip
  if (!isPresenter) {
    viewScreenshare({
      outputDeviceId: options.outputDeviceId
    }, hasAudio);
  }
};
const shareScreen = async function (isCameraAsContentBroadcasting, stopWatching, isPresenter, onFail) {
  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  if (isCameraAsContentBroadcasting) {
    screenshareHasEnded();
  }
  try {
    let stream;
    let contentType = CONTENT_TYPE_SCREENSHARE;
    if (options.stream == null) {
      stream = await BridgeService.getScreenStream();
    } else {
      contentType = CONTENT_TYPE_CAMERA;
      stream = options.stream;
    }
    _trackStreamTermination(stream, _handleStreamTermination);
    if (!isPresenter) {
      MediaStreamUtils.stopMediaStreamTracks(stream);
      return;
    }
    await KurentoBridge.share(stream, onFail, contentType);

    // Stream might have been disabled in the meantime. I love badly designed
    // async components like this screen sharing bridge :) - prlanzarin 09 May 22
    if (!_isStreamActive(stream)) {
      _handleStreamTermination();
      return;
    }

    // stop external video share if running
    stopWatching();
    setSharingContentType(contentType);
    setIsSharing(true);
  } catch (error) {
    onFail(error);
  }
};
const viewScreenshare = function () {
  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let hasAudio = arguments.length > 1 ? arguments[1] : undefined;
  KurentoBridge.view({
    hasAudio,
    outputDeviceId: options.outputDeviceId
  }).catch(error => {
    logger.error({
      logCode: 'screenshare_view_failed',
      extraInfo: {
        errorName: error.name,
        errorMessage: error.message
      }
    }, 'Screenshare viewer failure');
  });
};
const screenShareEndAlert = () => AudioService.playAlertSound("".concat(window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId) + '/resources/sounds/ScreenshareOff.mp3');

/**
   * Get stats about all active screenshare peers.
   *
   * For more information see:
   *  - https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getStats
   *  - https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport

   * @param {Array[String]} statsType - An array containing valid RTCStatsType
   *                                    values to include in the return object
   *
   * @returns {Object} The information about each active screen sharing peer.
   *          The returned format follows the format returned by video's service
   *          getStats, which considers more than one peer connection to be returned.
   *          The format is given by:
   *          {
   *            peerIdString: RTCStatsReport
   *          }
   */
const getStats = async function () {
  let statsTypes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_SCREENSHARE_STATS_TYPES;
  const screenshareStats = {};
  const peer = KurentoBridge.getPeerConnection();
  if (!peer) return null;
  const peerStats = await peer.getStats();
  peerStats.forEach(stat => {
    if (statsTypes.includes(stat.type)) {
      screenshareStats[stat.type] = stat;
    }
  });
  return {
    screenshareStats
  };
};

// This method may throw errors
const isMediaFlowing = (previousStats, currentStats) => {
  const bpsData = ConnectionStatusService.calculateBitsPerSecond(currentStats === null || currentStats === void 0 ? void 0 : currentStats.screenshareStats, previousStats === null || previousStats === void 0 ? void 0 : previousStats.screenshareStats);
  const bpsDataAggr = Object.values(bpsData).reduce(function (sum) {
    let partialBpsData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return sum + parseFloat(partialBpsData);
  }, 0);
  return bpsDataAggr > 0;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenshare/styles.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite, colorContentBackground;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorContentBackground(v) {
    colorContentBackground = v;
  }
}, 1);
let SpinnerStyles;
module.link("/imports/ui/components/common/loading-screen/styles", {
  default(v) {
    SpinnerStyles = v;
  }
}, 2);
const ScreenshareContainerInside = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  text-align: center;\n"])));
const MainText = styled.h1(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  color: ", ";\n  font-size: 1.3rem;\n  font-weight: 600;\n"])), colorWhite);
const ScreenshareVideo = styled.video(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  ", "\n"])), _ref => {
  let {
    unhealthyStream
  } = _ref;
  return unhealthyStream && "\n    filter: grayscale(50%) opacity(50%);\n  ";
});
const ScreenshareContainer = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: relative;\n  background-color: ", ";\n  width: 100%;\n  height: 100%;\n\n  ", "\n"])), colorContentBackground, _ref2 => {
  let {
    switched
  } = _ref2;
  return !switched && "\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n  ";
});
const ScreenshareContainerDefault = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  position: absolute;\n  align-items: center;\n  justify-content: center;\n  padding-top: 4rem;\n"])));
const SpinnerWrapper = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 1;\n  width: 100%;\n  height: 100%;\n"])));
const Spinner = styled(SpinnerStyles.Spinner)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([""])));
const Bounce1 = styled(SpinnerStyles.Bounce1)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([""])));
const Bounce2 = styled(SpinnerStyles.Bounce2)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([""])));
const MobileControlsOverlay = styled.span(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  position: absolute;\n  top:0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n"])));
const HoverToolbar = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n\n  ", "\n"])), _ref3 => {
  let {
    toolbarStyle
  } = _ref3;
  return toolbarStyle === 'hoverToolbar' && "\n    display: none;\n\n    #screenshareContainer:hover > & {\n      display: flex;\n    }\n  ";
}, _ref4 => {
  let {
    toolbarStyle
  } = _ref4;
  return toolbarStyle === 'dontShowMobileHoverToolbar' && "\n    display: none;\n  ";
}, _ref5 => {
  let {
    toolbarStyle
  } = _ref5;
  return toolbarStyle === 'showMobileHoverToolbar' && "\n    display: flex;\n    z-index: 2;\n  ";
});
module.exportDefault({
  ScreenshareContainerInside,
  MainText,
  ScreenshareVideo,
  ScreenshareContainer,
  ScreenshareContainerDefault,
  SpinnerWrapper,
  Spinner,
  Bounce1,
  Bounce2,
  MobileControlsOverlay,
  HoverToolbar
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"timer":{"indicator":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/timer/indicator/component.tsx                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 0);
let React, useEffect, useRef, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
let Icon;
module.link("/imports/ui/components/common/icon/icon-ts/component", {
  default(v) {
    Icon = v;
  }
}, 3);
let humanizeSeconds;
module.link("/imports/utils/humanizeSeconds", {
  default(v) {
    humanizeSeconds = v;
  }
}, 4);
let useTimeSync;
module.link("/imports/ui/core/local-states/useTimeSync", {
  default(v) {
    useTimeSync = v;
  }
}, 5);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 6);
let layoutSelectInput;
module.link("../../layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  }
}, 7);
let TIMER_START, TIMER_STOP;
module.link("../mutations", {
  TIMER_START(v) {
    TIMER_START = v;
  },
  TIMER_STOP(v) {
    TIMER_STOP = v;
  }
}, 8);
let useTimer;
module.link("/imports/ui/core/hooks/useTImer", {
  default(v) {
    useTimer = v;
  }
}, 9);
const TimerIndicator = _ref => {
  let {
    passedTime,
    stopwatch,
    songTrack,
    running,
    isModerator,
    sidebarNavigationIsOpen,
    sidebarContentIsOpen,
    startedOn
  } = _ref;
  const [time, setTime] = useState(0);
  const timeRef = useRef(null);
  const intervalRef = useRef();
  const alarm = useRef();
  const music = useRef();
  const triggered = useRef(true);
  const alreadyNotified = useRef(false);
  const [startTimerMutation] = useMutation(TIMER_START);
  const [stopTimerMutation] = useMutation(TIMER_STOP);
  const [songTrackState, setSongTrackState] = useState(songTrack);
  const CDN = window.meetingClientSettings.public.app.cdn;
  const BASENAME = window.meetingClientSettings.public.app.basename;
  const HOST = CDN + BASENAME;
  const trackName = window.meetingClientSettings.public.timer.music;
  const startTimer = () => {
    startTimerMutation();
  };
  const stopTimer = () => {
    stopTimerMutation();
  };
  useEffect(() => {
    if (songTrackState !== songTrack) {
      if (music.current) music.current.pause();
    }
    if (songTrack in trackName) {
      music.current = new Audio("".concat(HOST, "/resources/sounds/").concat(trackName[songTrack], ".mp3"));
      setSongTrackState(songTrack);
      music.current.addEventListener('timeupdate', () => {
        const buffer = 0.19;
        // Start playing the music before it ends to make the loop gapless
        if (!music.current) return null;
        if (music.current.currentTime > music.current.duration - buffer) {
          music.current.currentTime = 0;
          music.current.play();
        }
        return null;
      });
    }
    return () => {
      if (music.current) music.current.pause();
    };
  }, [songTrack]);
  useEffect(() => {
    setTime(passedTime);
  }, []);
  useEffect(() => {
    alarm.current = new Audio("".concat(HOST, "/resources/sounds/alarm.mp3"));
  }, []);
  useEffect(() => {
    if (running) {
      setTime(passedTime);
      intervalRef.current = setInterval(() => {
        setTime(prev => {
          if (stopwatch) return Math.round(prev / 1000) * 1000 + 1000;
          const t = Math.floor(prev / 1000) * 1000 - 1000;
          if (t <= 0) {
            if (!alreadyNotified.current) {
              triggered.current = false;
              alreadyNotified.current = true;
              if (alarm.current) alarm.current.play();
            }
          }
          return t < 0 ? 0 : t;
        });
      }, 1000);
    } else if (!running) {
      clearInterval(intervalRef.current);
    }
    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, [running]);
  useEffect(() => {
    if (!running) return;
    const timePassed = passedTime >= 0 ? passedTime : 0;
    setTime(prev => {
      if (timePassed < prev) return timePassed;
      if (timePassed > prev) return timePassed;
      return prev;
    });
  }, [passedTime, stopwatch, startedOn]);
  useEffect(() => {
    if (!timeRef.current) {
      if (intervalRef.current) clearInterval(intervalRef.current);
      if (music.current) music.current.pause();
      if (alarm.current) alarm.current.pause();
    }
  }, [time]);
  useEffect(() => {
    if (running && songTrack !== 'noTrack') {
      if (music.current) music.current.play();
    } else if (!running || songTrack === 'noTrack') {
      if (music.current) music.current.pause();
    }
    if (running && alreadyNotified.current) {
      alreadyNotified.current = false;
    }
  }, [running, songTrackState]);
  useEffect(() => {
    if (startedOn === 0) {
      setTime(passedTime);
    }
  }, [startedOn]);
  const onClick = running ? stopTimer : startTimer;
  return /*#__PURE__*/React.createElement(Styled.TimerWrapper, null, /*#__PURE__*/React.createElement(Styled.Timer, null, /*#__PURE__*/React.createElement(Styled.TimerButton, {
    running: running,
    disabled: !isModerator,
    hide: sidebarNavigationIsOpen && sidebarContentIsOpen,
    role: "button",
    tabIndex: 0,
    onClick: isModerator ? onClick : () => {},
    "data-test": "timeIndicator"
  }, /*#__PURE__*/React.createElement(Styled.TimerContent, null, /*#__PURE__*/React.createElement(Styled.TimerIcon, null, /*#__PURE__*/React.createElement(Icon, {
    iconName: "time"
  })), /*#__PURE__*/React.createElement(Styled.TimerTime, {
    "aria-hidden": true,
    ref: timeRef
  }, humanizeSeconds(Math.floor(time / 1000)))))));
};
const TimerIndicatorContainer = () => {
  var _currentUser$isModera;
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    isModerator: u.isModerator
  }));
  const {
    data: timerData
  } = useTimer();
  const [timeSync] = useTimeSync();
  const sidebarNavigation = layoutSelectInput(i => i.sidebarNavigation);
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const sidebarNavigationIsOpen = sidebarNavigation.isOpen;
  const sidebarContentIsOpen = sidebarContent.isOpen;
  const currentTimer = timerData;
  if (!(currentTimer !== null && currentTimer !== void 0 && currentTimer.active)) return null;
  const {
    accumulated,
    running,
    startedOn,
    stopwatch,
    songTrack,
    time
  } = currentTimer;
  const currentDate = new Date();
  const startedAtDate = new Date(startedOn || Date.now());
  const adjustedCurrent = new Date(currentDate.getTime() + timeSync);
  const timeDifferenceMs = adjustedCurrent.getTime() - startedAtDate.getTime();
  const timePassed = stopwatch ? Math.floor((running ? timeDifferenceMs : 0) + (accumulated !== null && accumulated !== void 0 ? accumulated : 0)) : Math.floor((time !== null && time !== void 0 ? time : 0) - ((accumulated !== null && accumulated !== void 0 ? accumulated : 0) + (running ? timeDifferenceMs : 0)));
  return /*#__PURE__*/React.createElement(TimerIndicator, {
    passedTime: timePassed,
    stopwatch: stopwatch !== null && stopwatch !== void 0 ? stopwatch : false,
    songTrack: songTrack !== null && songTrack !== void 0 ? songTrack : 'noTrack',
    running: running !== null && running !== void 0 ? running : false,
    isModerator: (_currentUser$isModera = currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator) !== null && _currentUser$isModera !== void 0 ? _currentUser$isModera : false,
    sidebarNavigationIsOpen: sidebarNavigationIsOpen,
    sidebarContentIsOpen: sidebarContentIsOpen,
    startedOn: startedOn !== null && startedOn !== void 0 ? startedOn : 0
  });
};
module.exportDefault(TimerIndicatorContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/timer/indicator/styles.ts                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let phoneLandscape, smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  phoneLandscape(v) {
    phoneLandscape = v;
  },
  smallOnly(v) {
    smallOnly = v;
  }
}, 1);
let borderRadius;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderRadius(v) {
    borderRadius = v;
  }
}, 2);
let colorSuccess, colorDanger;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorDanger(v) {
    colorDanger = v;
  }
}, 3);
let fontSizeBase, fontSizeXS;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  fontSizeXS(v) {
    fontSizeXS = v;
  }
}, 4);
const colorTimerRunning = "".concat(colorSuccess);
const colorTimerStopped = "".concat(colorDanger);
const timerMarginSM = '.5rem';
const timerPaddingSM = '.25rem';
const timerPaddingXL = '1.62rem';
const timerMaxWidth = '10rem';
const timerFontWeight = '400';
const timerBorderRadius = '2rem';
const TimerWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  overflow: hidden;\n  margin-left: auto;\n"])));
const Timer = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin-top: 0.5rem;\n  display: flex;\n  max-height: ", ");\n"])), timerPaddingXL);
const timerRunning = "\n  background-color: ".concat(colorTimerRunning, ";\n  border: solid 2px ").concat(colorTimerRunning, ";\n");
const timerStopped = "\n  background-color: ".concat(colorTimerStopped, ";\n  border: solid 2px ").concat(colorTimerStopped, ";\n");
const disabledStyle = "\n  cursor: default;\n";
const hiddenStyle = "\n  @media ".concat(smallOnly, " {\n    visibility: hidden;\n  }\n");
const TimerButton = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  @include highContrastOutline();\n  cursor: pointer;\n  color: white;\n  font-weight: ", ";\n  border-radius: ", " ", ";\n  font-size: ", ";\n  margin-left: ", ";\n  margin-right: ", ";\n\n  @media ", " {\n    height: 1rem;\n  }\n\n  span {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    max-width: ", ";\n\n    @media ", " {\n      font-size: ", ";\n    }\n  }\n\n  i {\n    font-size: var(--font-size-small);\n    width: 1rem;\n    height: 1rem;\n    border-radius: 50%;\n\n    @media ", " {\n      height: ", ";\n      width: ", ";\n      font-size: ", ";\n    }\n  }\n\n  ", ";\n  ", ";\n  ", ";\n"])), timerFontWeight, timerBorderRadius, timerBorderRadius, fontSizeBase, borderRadius, borderRadius, phoneLandscape, timerMaxWidth, phoneLandscape, fontSizeXS, phoneLandscape, timerMarginSM, timerMarginSM, fontSizeXS, _ref => {
  let {
    running
  } = _ref;
  return running ? timerRunning : timerStopped;
}, _ref2 => {
  let {
    disabled
  } = _ref2;
  return disabled && disabledStyle;
}, _ref3 => {
  let {
    hide
  } = _ref3;
  return hide && hiddenStyle;
});
const time = "\n  box-sizing: border-box;\n  display: flex;\n  align-self: center;\n  padding: 0 ".concat(timerPaddingSM, " 0 0;\n");
const TimerContent = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  ", "\n  display: flex;\n\n  [dir=\"ltr\"] & {\n    span:first-child {\n      padding: 0 ", ";\n    }\n  }\n\n  [dir=\"rtl\"] & {\n    span:last-child {\n      padding: 0 ", ";\n    }\n  }\n"])), time, timerPaddingSM, timerPaddingSM);
const TimerIcon = styled.span(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  ", "\n"])), time);
const TimerTime = styled.span(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  ", "\n"])), time);
module.exportDefault({
  TimerWrapper,
  Timer,
  TimerButton,
  TimerContent,
  TimerIcon,
  TimerTime
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"panel":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/timer/panel/component.tsx                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback, useEffect, useMemo, useRef, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let Header;
module.link("/imports/ui/components/common/control-header/component", {
  default(v) {
    Header = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let GET_TIMER;
module.link("../../../core/graphql/queries/timer", {
  default(v) {
    GET_TIMER = v;
  }
}, 5);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 6);
let layoutDispatch;
module.link("../../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 7);
let ACTIONS, PANELS;
module.link("../../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 8);
let TIMER_RESET, TIMER_SET_SONG_TRACK, TIMER_SET_TIME, TIMER_START, TIMER_STOP, TIMER_SWITCH_MODE;
module.link("../mutations", {
  TIMER_RESET(v) {
    TIMER_RESET = v;
  },
  TIMER_SET_SONG_TRACK(v) {
    TIMER_SET_SONG_TRACK = v;
  },
  TIMER_SET_TIME(v) {
    TIMER_SET_TIME = v;
  },
  TIMER_START(v) {
    TIMER_START = v;
  },
  TIMER_STOP(v) {
    TIMER_STOP = v;
  },
  TIMER_SWITCH_MODE(v) {
    TIMER_SWITCH_MODE = v;
  }
}, 9);
let useTimeSync;
module.link("/imports/ui/core/local-states/useTimeSync", {
  default(v) {
    useTimeSync = v;
  }
}, 10);
let humanizeSeconds;
module.link("/imports/utils/humanizeSeconds", {
  default(v) {
    humanizeSeconds = v;
  }
}, 11);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 12);
const MAX_HOURS = 23;
const MILLI_IN_HOUR = 3600000;
const MILLI_IN_MINUTE = 60000;
const MILLI_IN_SECOND = 1000;
const TRACKS = ['noTrack', 'track1', 'track2', 'track3'];
const intlMessages = defineMessages({
  hideTimerLabel: {
    id: 'app.timer.hideTimerLabel',
    description: 'Label for hiding timer button'
  },
  title: {
    id: 'app.timer.title',
    description: 'Title for timer'
  },
  stopwatch: {
    id: 'app.timer.button.stopwatch',
    description: 'Stopwatch switch button'
  },
  timer: {
    id: 'app.timer.button.timer',
    description: 'Timer switch button'
  },
  start: {
    id: 'app.timer.button.start',
    description: 'Timer start button'
  },
  stop: {
    id: 'app.timer.button.stop',
    description: 'Timer stop button'
  },
  reset: {
    id: 'app.timer.button.reset',
    description: 'Timer reset button'
  },
  hours: {
    id: 'app.timer.hours',
    description: 'Timer hours label'
  },
  minutes: {
    id: 'app.timer.minutes',
    description: 'Timer minutes label'
  },
  seconds: {
    id: 'app.timer.seconds',
    description: 'Timer seconds label'
  },
  songs: {
    id: 'app.timer.songs',
    description: 'Musics title label'
  },
  noTrack: {
    id: 'app.timer.noTrack',
    description: 'No music radio label'
  },
  track1: {
    id: 'app.timer.track1',
    description: 'Track 1 radio label'
  },
  track2: {
    id: 'app.timer.track2',
    description: 'Track 2 radio label'
  },
  track3: {
    id: 'app.timer.track3',
    description: 'Track 3 radio label'
  }
});
const TimerPanel = _ref => {
  let {
    stopwatch,
    songTrack,
    time,
    running,
    timePassed,
    startedOn,
    active
  } = _ref;
  const [timerReset] = useMutation(TIMER_RESET);
  const [timerStart] = useMutation(TIMER_START);
  const [timerStop] = useMutation(TIMER_STOP);
  const [timerSwitchMode] = useMutation(TIMER_SWITCH_MODE);
  const [timerSetSongTrack] = useMutation(TIMER_SET_SONG_TRACK);
  const [timerSetTime] = useMutation(TIMER_SET_TIME);
  const intl = useIntl();
  const layoutContextDispatch = layoutDispatch();
  const [runningTime, setRunningTime] = useState(0);
  const intervalRef = useRef();
  const headerMessage = useMemo(() => {
    return stopwatch ? intlMessages.stopwatch : intlMessages.timer;
  }, [stopwatch]);
  const switchTimer = stopwatch => {
    timerSwitchMode({
      variables: {
        stopwatch
      }
    });
  };
  const setTrack = track => {
    timerSetSongTrack({
      variables: {
        track
      }
    });
  };
  const setTime = time => {
    timerSetTime({
      variables: {
        time
      }
    });
    timerStop();
    timerReset();
  };
  const setHours = useCallback((hours, time) => {
    if (!Number.isNaN(hours) && hours >= 0 && hours <= MAX_HOURS) {
      const currentHours = Math.floor(time / MILLI_IN_HOUR);
      const diff = (hours - currentHours) * MILLI_IN_HOUR;
      setTime(time + diff);
    } else {
      logger.warn('Invalid time');
    }
  }, []);
  const setMinutes = useCallback((minutes, time) => {
    if (!Number.isNaN(minutes) && minutes >= 0 && minutes <= 59) {
      const currentHours = Math.floor(time / MILLI_IN_HOUR);
      const mHours = currentHours * MILLI_IN_HOUR;
      const currentMinutes = Math.floor((time - mHours) / MILLI_IN_MINUTE);
      const diff = (minutes - currentMinutes) * MILLI_IN_MINUTE;
      setTime(time + diff);
    } else {
      logger.warn('Invalid time');
    }
  }, []);
  const setSeconds = useCallback((seconds, time) => {
    if (!Number.isNaN(seconds) && seconds >= 0 && seconds <= 59) {
      const currentHours = Math.floor(time / MILLI_IN_HOUR);
      const mHours = currentHours * MILLI_IN_HOUR;
      const currentMinutes = Math.floor((time - mHours) / MILLI_IN_MINUTE);
      const mMinutes = currentMinutes * MILLI_IN_MINUTE;
      const currentSeconds = Math.floor((time - mHours - mMinutes) / MILLI_IN_SECOND);
      const diff = (seconds - currentSeconds) * MILLI_IN_SECOND;
      setTime(time + diff);
    } else {
      logger.warn('Invalid time');
    }
  }, []);
  const closePanel = useCallback(() => {
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
      value: false
    });
    layoutContextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
      value: PANELS.NONE
    });
  }, []);
  useEffect(() => {
    setRunningTime(timePassed);
  }, []);
  // if startedOn is 0, means the time was reset
  useEffect(() => {
    if (startedOn === 0) {
      setRunningTime(timePassed);
    }
  }, [startedOn]);
  // updates the timer every second locally
  useEffect(() => {
    if (running) {
      setRunningTime(timePassed < 0 ? 0 : timePassed);
      intervalRef.current = setInterval(() => {
        setRunningTime(prev => {
          const calcTime = Math.round(prev / 1000) * 1000;
          if (stopwatch) {
            return (calcTime < 0 ? 0 : calcTime) + 1000;
          }
          const t = calcTime - 1000;
          return t < 0 ? 0 : t;
        });
      }, 1000);
    } else if (!running) {
      clearInterval(intervalRef.current);
    }
  }, [running]);
  // sync local time with server time
  useEffect(() => {
    if (!running) return;
    const time = timePassed >= 0 ? timePassed : 0;
    setRunningTime(prev => {
      if (time) return timePassed;
      return prev;
    });
  }, [timePassed, stopwatch, startedOn]);
  useEffect(() => {
    if (!active) {
      closePanel();
    }
  }, [active]);
  const timerControls = useMemo(() => {
    const timeFormatedString = humanizeSeconds(Math.floor(time / 1000));
    const timeSplit = timeFormatedString.split(':');
    const hours = timeSplit.length > 2 ? parseInt(timeSplit[0], 10) : 0;
    const minutes = timeSplit.length > 2 ? parseInt(timeSplit[1], 10) : parseInt(timeSplit[0], 10);
    const seconds = timeSplit.length > 2 ? parseInt(timeSplit[2], 10) : parseInt(timeSplit[1], 10);
    const label = running ? intlMessages.stop : intlMessages.start;
    const color = running ? 'danger' : 'primary';
    const TIMER_CONFIG = window.meetingClientSettings.public.timer;
    return /*#__PURE__*/React.createElement("div", null, !stopwatch ? /*#__PURE__*/React.createElement(Styled.StopwatchTime, null, /*#__PURE__*/React.createElement(Styled.StopwatchTimeInput, null, /*#__PURE__*/React.createElement(Styled.TimerInput, {
      type: "number",
      disabled: stopwatch,
      defaultValue: hours,
      maxLength: 2,
      max: MAX_HOURS,
      min: "0",
      onChange: event => {
        setHours(parseInt(event.target.value || '00', 10), time);
      },
      "data-test": "hoursInput"
    }), /*#__PURE__*/React.createElement(Styled.StopwatchTimeInputLabel, null, intl.formatMessage(intlMessages.hours))), /*#__PURE__*/React.createElement(Styled.StopwatchTimeColon, null, ":"), /*#__PURE__*/React.createElement(Styled.StopwatchTimeInput, null, /*#__PURE__*/React.createElement(Styled.TimerInput, {
      type: "number",
      disabled: stopwatch,
      defaultValue: minutes,
      maxLength: 2,
      max: "59",
      min: "0",
      onChange: event => {
        setMinutes(parseInt(event.target.value || '00', 10), time);
      },
      "data-test": "minutesInput"
    }), /*#__PURE__*/React.createElement(Styled.StopwatchTimeInputLabel, null, intl.formatMessage(intlMessages.minutes))), /*#__PURE__*/React.createElement(Styled.StopwatchTimeColon, null, ":"), /*#__PURE__*/React.createElement(Styled.StopwatchTimeInput, null, /*#__PURE__*/React.createElement(Styled.TimerInput, {
      type: "number",
      disabled: stopwatch,
      defaultValue: seconds,
      maxLength: 2,
      max: "59",
      min: "0",
      onChange: event => {
        setSeconds(parseInt(event.target.value || '00', 10), time);
      },
      "data-test": "secondsInput"
    }), /*#__PURE__*/React.createElement(Styled.StopwatchTimeInputLabel, null, intl.formatMessage(intlMessages.seconds)))) : null, TIMER_CONFIG.music.enabled && !stopwatch ? /*#__PURE__*/React.createElement(Styled.TimerSongsWrapper, null, /*#__PURE__*/React.createElement(Styled.TimerSongsTitle, {
      stopwatch: stopwatch
    }, intl.formatMessage(intlMessages.songs)), /*#__PURE__*/React.createElement(Styled.TimerTracks, null, TRACKS.map(track => /*#__PURE__*/React.createElement(Styled.TimerTrackItem, {
      key: track
    }, /*#__PURE__*/React.createElement("label", {
      htmlFor: track
    }, /*#__PURE__*/React.createElement("input", {
      type: "radio",
      name: "track",
      id: track,
      value: track,
      checked: songTrack === track,
      onChange: event => {
        setTrack(event.target.value);
      },
      disabled: stopwatch
    }), intl.formatMessage(intlMessages[track])))))) : null, /*#__PURE__*/React.createElement(Styled.TimerControls, null, /*#__PURE__*/React.createElement(Styled.TimerControlButton, {
      color: color,
      label: intl.formatMessage(label),
      onClick: () => {
        if (running) {
          timerStop();
        } else {
          timerStart();
        }
      },
      "data-test": "startStopTimer"
    }), /*#__PURE__*/React.createElement(Styled.TimerControlButton, {
      color: "secondary",
      label: intl.formatMessage(intlMessages.reset),
      onClick: () => {
        timerStop();
        timerReset();
      },
      "data-test": "resetTimerStopWatch"
    })));
  }, [songTrack, stopwatch, time, running]);
  return /*#__PURE__*/React.createElement(Styled.TimerSidebarContent, {
    "data-test": "".concat(stopwatch ? 'stopwatch' : 'timer', "Container")
  }, /*#__PURE__*/React.createElement(Header, {
    leftButtonProps: {
      onClick: closePanel,
      'aria-label': intl.formatMessage(intlMessages.hideTimerLabel),
      label: intl.formatMessage(headerMessage)
    },
    "data-test": "timerHeader"
  }), /*#__PURE__*/React.createElement(Styled.TimerContent, null, /*#__PURE__*/React.createElement(Styled.TimerCurrent, {
    "aria-hidden": true,
    "data-test": "timerCurrent"
  }, humanizeSeconds(Math.floor(runningTime / 1000))), /*#__PURE__*/React.createElement(Styled.TimerType, null, /*#__PURE__*/React.createElement(Styled.TimerSwitchButton, {
    label: intl.formatMessage(intlMessages.stopwatch),
    onClick: () => {
      timerStop();
      switchTimer(true);
    },
    disabled: stopwatch,
    color: stopwatch ? 'primary' : 'secondary',
    "data-test": "stopwatchButton"
  }), /*#__PURE__*/React.createElement(Styled.TimerSwitchButton, {
    label: intl.formatMessage(intlMessages.timer),
    onClick: () => {
      timerStop();
      switchTimer(false);
    },
    disabled: !stopwatch,
    color: !stopwatch ? 'primary' : 'secondary',
    "data-test": "timerButton"
  })), timerControls));
};
const TimerPanelContaier = () => {
  var _timer$stopwatch, _timer$songTrack, _timer$running, _timer$active;
  const [timeSync] = useTimeSync();
  const {
    loading: timerLoading,
    error: timerError,
    data: timerData
  } = useDeduplicatedSubscription(GET_TIMER);
  if (timerLoading || !timerData) return null;
  if (timerError) {
    logger.error('TimerIndicatorContainer', timerError);
    return /*#__PURE__*/React.createElement("div", null, JSON.stringify(timerError));
  }
  const timer = timerData.timer[0];
  const currentDate = new Date();
  const startedAtDate = new Date(timer.startedAt);
  const adjustedCurrent = new Date(currentDate.getTime() + timeSync);
  const timeDifferenceMs = adjustedCurrent.getTime() - startedAtDate.getTime();
  const timePassed = timer.stopwatch ? Math.floor((timer.running ? timeDifferenceMs : 0) + timer.accumulated) : Math.floor(timer.time - (timer.accumulated + (timer.running ? timeDifferenceMs : 0)));
  return /*#__PURE__*/React.createElement(TimerPanel, {
    stopwatch: (_timer$stopwatch = timer.stopwatch) !== null && _timer$stopwatch !== void 0 ? _timer$stopwatch : false,
    songTrack: (_timer$songTrack = timer.songTrack) !== null && _timer$songTrack !== void 0 ? _timer$songTrack : 'noTrack',
    running: (_timer$running = timer.running) !== null && _timer$running !== void 0 ? _timer$running : false,
    timePassed: timePassed,
    accumulated: timer.accumulated,
    active: (_timer$active = timer.active) !== null && _timer$active !== void 0 ? _timer$active : false,
    time: timer.time,
    startedOn: timer.startedOn,
    startedAt: timer.startedAt
  });
};
module.exportDefault(TimerPanelContaier);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/timer/panel/styles.ts                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let borderSize, borderSizeLarge, smPaddingX, toastContentWidth, borderRadius;
module.link("../../../stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  toastContentWidth(v) {
    toastContentWidth = v;
  },
  borderRadius(v) {
    borderRadius = v;
  }
}, 1);
let colorGrayDark, colorGrayLighter, colorGrayLightest, colorGray, colorBlueLight, colorWhite, colorPrimary;
module.link("../../../stylesheets/styled-components/palette", {
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  colorGray(v) {
    colorGray = v;
  },
  colorBlueLight(v) {
    colorBlueLight = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 2);
let TextElipsis;
module.link("../../../stylesheets/styled-components/placeholders", {
  TextElipsis(v) {
    TextElipsis = v;
  }
}, 3);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 4);
const TimerSidebarContent = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  background-color: ", ";\n  padding: ", ";\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  justify-content: space-around;\n  overflow: hidden;\n  height: 100%;\n  transform: translateZ(0);\n"])), colorWhite, smPaddingX);
const TimerHeader = styled.header(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n"])));
const TimerTitle = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  ", ";\n  flex: 1;\n\n  & > button, button:hover {\n    max-width: ", ";\n  }\n"])), TextElipsis, toastContentWidth);
// @ts-ignore - JS code
const TimerMinimizeButton = styled(Button)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: relative;\n  background-color: ", ";\n  display: block;\n  margin: ", ";\n  margin-bottom: ", ";\n  padding-left: 0;\n  padding-right: inherit;\n\n  [dir=\"rtl\"] & {\n    padding-left: inherit;\n    padding-right: 0;\n  }\n\n  > i {\n      color: ", ";\n      font-size: smaller;\n\n      [dir=\"rtl\"] & {\n        -webkit-transform: scale(-1, 1);\n        -moz-transform: scale(-1, 1);\n        -ms-transform: scale(-1, 1);\n        -o-transform: scale(-1, 1);\n        transform: scale(-1, 1);\n      }\n  }\n\n  &:hover {\n      background-color: ", ";\n  }\n"])), colorWhite, borderSizeLarge, borderSize, colorGrayDark, colorWhite);
const TimerContent = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n"])));
const TimerCurrent = styled.span(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  border-bottom: 1px solid ", ";\n  border-top: 1px solid ", ";\n  display: flex;\n  font-size: xxx-large;\n  justify-content: center;\n"])), colorGrayLightest, colorGrayLightest);
const TimerType = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  padding-top: 2rem;\n"])));
// @ts-ignore - JS code
const TimerSwitchButton = styled(Button)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  width: 100%;\n  height: 2rem;\n  margin: 0 .5rem;\n"])));
const StopwatchTime = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: flex;\n  margin-top: 4rem;\n  width: 100%;\n  height: 3rem;\n  font-size: x-large;\n  justify-content: center;\n\n  input {\n    width: 5rem;\n  }\n"])));
const StopwatchTimeInput = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n\n  .label {\n    display: flex;\n    font-size: small;\n    justify-content: center;\n  }\n"])));
const StopwatchTimeInputLabel = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  display: flex;\n  font-size: small;\n  justify-content: center;\n"])));
const StopwatchTimeColon = styled.span(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  align-self: center;\n  padding: 0 .25rem;\n"])));
const TimerSongsWrapper = styled.div(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-flow: column;\n  margin-top: 4rem;\n  margin-bottom: -2rem;\n"])));
const TimerRow = "\n  display: flex;\n  flex-flow: row;\n  flex-grow: 1;\n";
const TimerCol = "\n  display: flex;\n  flex-flow: column;\n  flex-grow: 1;\n  flex-basis: 0;\n";
const TimerSongsTitle = styled.div(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  ", "\n  display: flex;\n  font-weight: bold;\n  font-size: 1.1rem;\n  opacity: ", "\n"])), TimerRow, _ref => {
  let {
    stopwatch
  } = _ref;
  return stopwatch ? '50%' : '100%';
});
const TimerTracks = styled.div(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  ", "\n  display: flex;\n  margin-top: 0.8rem;\n  margin-bottom: 2rem;\n  \n  .row {\n    margin: 0.5rem auto;\n  }\n\n  label {\n    display: flex;\n  }\n  \n  input {\n    margin: auto 0.5rem;\n  }\n"])), TimerCol);
const TimerTrackItem = styled.div(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  ", "\n"])), TimerRow);
const TimerControls = styled.div(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  margin-top: 4rem;\n"])));
// @ts-ignore - JS code
const TimerControlButton = styled(Button)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n  width: 6rem;\n  margin: 0 1rem;\n"])));
const TimerInput = styled.input(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n  flex: 1;\n  border: 1px solid ", ";\n  width: 50%;\n  text-align: center;\n  padding: .25rem;\n  border-radius: ", ";\n  background-clip: padding-box;\n  outline: none;\n\n  &::placeholder {\n    color: ", ";\n    opacity: 1;\n  }\n\n  &:focus {\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n  }\n\n  &:disabled,\n  &[disabled] {\n    cursor: not-allowed;\n    opacity: .75;\n    background-color: rgba(167,179,189,0.25);\n  }\n"])), colorGrayLighter, borderRadius, colorGray, borderSize, borderSize, colorBlueLight, colorPrimary);
module.exportDefault({
  TimerSidebarContent,
  TimerHeader,
  TimerTitle,
  TimerMinimizeButton,
  TimerContent,
  TimerCurrent,
  TimerType,
  TimerSwitchButton,
  StopwatchTime,
  StopwatchTimeInput,
  StopwatchTimeInputLabel,
  StopwatchTimeColon,
  TimerSongsWrapper,
  TimerSongsTitle,
  TimerTracks,
  TimerTrackItem,
  TimerControls,
  TimerControlButton,
  TimerInput
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/timer/mutations.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  TIMER_ACTIVATE: () => TIMER_ACTIVATE,
  TIMER_DEACTIVATE: () => TIMER_DEACTIVATE,
  TIMER_RESET: () => TIMER_RESET,
  TIMER_START: () => TIMER_START,
  TIMER_STOP: () => TIMER_STOP,
  TIMER_SWITCH_MODE: () => TIMER_SWITCH_MODE,
  TIMER_SET_SONG_TRACK: () => TIMER_SET_SONG_TRACK,
  TIMER_SET_TIME: () => TIMER_SET_TIME
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const TIMER_ACTIVATE = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation timerActivate($stopwatch: Boolean!, $running: Boolean!, $time: Int!) {\n    timerActivate(\n      stopwatch: $stopwatch,\n      running: $running,\n      time: $time\n    )\n  }\n"])));
const TIMER_DEACTIVATE = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation timerDeactivate {\n    timerDeactivate\n  }\n"])));
const TIMER_RESET = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  mutation timerReset {\n    timerReset\n  }\n"])));
const TIMER_START = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  mutation timerStart {\n    timerStart\n  }\n"])));
const TIMER_STOP = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  mutation timerStop {\n    timerStop\n  }\n"])));
const TIMER_SWITCH_MODE = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  mutation timerSwitchMode($stopwatch: Boolean!) {\n    timerSwitchMode(stopwatch: $stopwatch)\n  }\n"])));
const TIMER_SET_SONG_TRACK = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  mutation timerSetSongTrack($track: String!) {\n    timerSetSongTrack(track: $track)\n  }\n"])));
const TIMER_SET_TIME = gql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  mutation timerSetTime($time: Int!) {\n    timerSetTime(time: $time)\n  }\n"])));
module.exportDefault({
  TIMER_ACTIVATE,
  TIMER_DEACTIVATE,
  TIMER_RESET,
  TIMER_START,
  TIMER_STOP,
  TIMER_SWITCH_MODE,
  TIMER_SET_SONG_TRACK,
  TIMER_SET_TIME
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"video-preview":{"virtual-background":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-preview/virtual-background/component.jsx                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useState, useRef, useContext, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  },
  useRef(v) {
    useRef = v;
  },
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let findDOMNode;
module.link("react-dom", {
  findDOMNode(v) {
    findDOMNode = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let EFFECT_TYPES, BLUR_FILENAME, getImageNames, getVirtualBackgroundThumbnail, isVirtualBackgroundSupported;
module.link("/imports/ui/services/virtual-background/service", {
  EFFECT_TYPES(v) {
    EFFECT_TYPES = v;
  },
  BLUR_FILENAME(v) {
    BLUR_FILENAME = v;
  },
  getImageNames(v) {
    getImageNames = v;
  },
  getVirtualBackgroundThumbnail(v) {
    getVirtualBackgroundThumbnail = v;
  },
  isVirtualBackgroundSupported(v) {
    isVirtualBackgroundSupported = v;
  }
}, 5);
let CustomVirtualBackgroundsContext;
module.link("./context", {
  CustomVirtualBackgroundsContext(v) {
    CustomVirtualBackgroundsContext = v;
  }
}, 6);
let VirtualBgService;
module.link("/imports/ui/components/video-preview/virtual-background/service", {
  default(v) {
    VirtualBgService = v;
  }
}, 7);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 8);
let withFileReader;
module.link("/imports/ui/components/common/file-reader/component", {
  default(v) {
    withFileReader = v;
  }
}, 9);
let Skeleton, SkeletonTheme;
module.link("react-loading-skeleton", {
  default(v) {
    Skeleton = v;
  },
  SkeletonTheme(v) {
    SkeletonTheme = v;
  }
}, 10);
module.link("react-loading-skeleton/dist/skeleton.css");
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 11);
let getStorageSingletonInstance;
module.link("/imports/ui/services/storage", {
  getStorageSingletonInstance(v) {
    getStorageSingletonInstance = v;
  }
}, 12);
const {
  MIME_TYPES_ALLOWED,
  MAX_FILE_SIZE
} = VirtualBgService;
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  handleVirtualBgSelected: PropTypes.func.isRequired,
  locked: PropTypes.bool.isRequired,
  showThumbnails: PropTypes.bool,
  initialVirtualBgState: PropTypes.shape({
    type: PropTypes.string.isRequired,
    name: PropTypes.string
  })
};
const SKELETON_COUNT = 5;
const shouldEnableBackgroundUpload = isCustomVirtualBackgroundsEnabled => {
  const VIRTUAL_BACKGROUNDS_CONFIG = window.meetingClientSettings.public.virtualBackgrounds;
  const ENABLE_UPLOAD = VIRTUAL_BACKGROUNDS_CONFIG.enableVirtualBackgroundUpload;
  return ENABLE_UPLOAD && isCustomVirtualBackgroundsEnabled;
};
const defaultInitialVirtualBgState = {
  type: EFFECT_TYPES.NONE_TYPE
};
const VirtualBgSelector = _ref => {
  let {
    intl,
    handleVirtualBgSelected,
    locked,
    showThumbnails = false,
    initialVirtualBgState = defaultInitialVirtualBgState,
    readFile,
    isCustomVirtualBackgroundsEnabled
  } = _ref;
  const IMAGE_NAMES = getImageNames();
  const intlMessages = defineMessages(_objectSpread({
    virtualBackgroundSettingsLabel: {
      id: 'app.videoPreview.webcamVirtualBackgroundLabel',
      description: 'Label for the virtual background'
    },
    virtualBackgroundSettingsDisabledLabel: {
      id: 'app.videoPreview.webcamVirtualBackgroundDisabledLabel',
      description: 'Label for the unsupported virtual background'
    },
    noneLabel: {
      id: 'app.video.virtualBackground.none',
      description: 'Label for no virtual background selected'
    },
    customLabel: {
      id: 'app.video.virtualBackground.custom',
      description: 'Label for custom virtual background selected'
    },
    removeLabel: {
      id: 'app.video.virtualBackground.remove',
      description: 'Label for remove custom virtual background'
    },
    blurLabel: {
      id: 'app.video.virtualBackground.blur',
      description: 'Label for the blurred camera option'
    },
    camBgAriaDesc: {
      id: 'app.video.virtualBackground.camBgAriaDesc',
      description: 'Label for virtual background button aria'
    },
    customDesc: {
      id: 'app.video.virtualBackground.button.customDesc',
      description: 'Aria description for upload virtual background button'
    },
    background: {
      id: 'app.video.virtualBackground.background',
      description: 'Label for the background word'
    },
    backgroundWithIndex: {
      id: 'app.video.virtualBackground.backgroundWithIndex',
      description: 'Label for the background word indexed'
    }
  }, IMAGE_NAMES.reduce((prev, imageName) => {
    const id = imageName.split('.').shift();
    return _objectSpread(_objectSpread({}, prev), {}, {
      [id]: {
        id: "app.video.virtualBackground.".concat(id),
        description: "Label for the ".concat(id, " camera option"),
        defaultMessage: '{background} {index}'
      }
    });
  }, {})));
  const [currentVirtualBg, setCurrentVirtualBg] = useState(_objectSpread({}, initialVirtualBgState));
  const inputElementsRef = useRef([]);
  const customBgSelectorRef = useRef(null);
  const {
    dispatch,
    loaded,
    defaultSetUp,
    backgrounds,
    loadFromDB
  } = useContext(CustomVirtualBackgroundsContext);
  const {
    MIME_TYPES_ALLOWED
  } = VirtualBgService;
  useEffect(() => {
    if (shouldEnableBackgroundUpload(isCustomVirtualBackgroundsEnabled)) {
      if (!defaultSetUp) {
        const defaultBackgrounds = ['Blur', ...IMAGE_NAMES].map(imageName => ({
          uniqueId: imageName,
          custom: false,
          lastActivityDate: Date.now()
        }));
        dispatch({
          type: 'setDefault',
          backgrounds: defaultBackgrounds
        });
      }
      if (!loaded) loadFromDB();
    }
  }, [isCustomVirtualBackgroundsEnabled]);
  const _virtualBgSelected = (type, name, index, customParams) => handleVirtualBgSelected(type, name, customParams).then(switched => {
    // Reset to the base NONE_TYPE effect if it failed because the expected
    // behaviour from upstream's method is to actually stop/reset the effect
    // service if it fails
    if (!switched) {
      return setCurrentVirtualBg({
        type: EFFECT_TYPES.NONE_TYPE
      });
    }
    setCurrentVirtualBg({
      type,
      name,
      uniqueId: customParams === null || customParams === void 0 ? void 0 : customParams.uniqueId
    });
    if (!index || index < 0) return;
    if (!shouldEnableBackgroundUpload(isCustomVirtualBackgroundsEnabled)) {
      findDOMNode(inputElementsRef.current[index]).focus();
    } else {
      if (customParams) {
        dispatch({
          type: 'update',
          background: {
            filename: name,
            uniqueId: customParams.uniqueId,
            data: customParams.file,
            custom: true,
            lastActivityDate: Date.now()
          }
        });
      } else {
        dispatch({
          type: 'update',
          background: {
            uniqueId: name,
            custom: false,
            lastActivityDate: Date.now()
          }
        });
      }
      findDOMNode(inputElementsRef.current[0]).focus();
    }
  });
  const renderDropdownSelector = () => {
    const disabled = locked || !isVirtualBackgroundSupported();
    const IMAGE_NAMES = getImageNames();
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.Select, {
      value: JSON.stringify(currentVirtualBg),
      disabled: disabled,
      onChange: event => {
        const {
          type,
          name
        } = JSON.parse(event.target.value);
        _virtualBgSelected(type, name);
      }
    }, /*#__PURE__*/React.createElement("option", {
      value: JSON.stringify({
        type: EFFECT_TYPES.NONE_TYPE
      })
    }, intl.formatMessage(intlMessages.noneLabel)), /*#__PURE__*/React.createElement("option", {
      value: JSON.stringify({
        type: EFFECT_TYPES.BLUR_TYPE
      })
    }, intl.formatMessage(intlMessages.blurLabel)), IMAGE_NAMES.map((imageName, i) => {
      const k = "".concat(imageName, "-").concat(i);
      return /*#__PURE__*/React.createElement("option", {
        key: k,
        value: JSON.stringify({
          type: EFFECT_TYPES.IMAGE_TYPE,
          name: imageName
        })
      }, imageName.split('.')[0]);
    })));
  };
  const handleCustomBgChange = event => {
    const file = event.target.files[0];
    const onSuccess = background => {
      dispatch({
        type: 'new',
        background: _objectSpread(_objectSpread({}, background), {}, {
          custom: true,
          lastActivityDate: Date.now()
        })
      });
      const {
        filename,
        data,
        uniqueId
      } = background;
      _virtualBgSelected(EFFECT_TYPES.IMAGE_TYPE, filename, 0, {
        file: data,
        uniqueId
      });
    };
    const onError = error => {
      logger.warn({
        logCode: 'read_file_error',
        extraInfo: {
          errorName: error.name,
          errorMessage: error.message
        }
      }, error.message);
    };
    readFile(file, onSuccess, onError);
  };
  const renderThumbnailSelector = () => {
    const disabled = locked || !isVirtualBackgroundSupported();
    const Settings = getSettingsSingletonInstance();
    const {
      isRTL
    } = Settings.application;
    const IMAGE_NAMES = getImageNames();
    const renderBlurButton = index => {
      var _currentVirtualBg$nam, _currentVirtualBg$nam2;
      return /*#__PURE__*/React.createElement(Styled.ThumbnailButtonWrapper, {
        key: "blur-".concat(index)
      }, /*#__PURE__*/React.createElement(Styled.ThumbnailButton, {
        background: getVirtualBackgroundThumbnail(BLUR_FILENAME),
        "aria-label": intl.formatMessage(intlMessages.blurLabel),
        label: intl.formatMessage(intlMessages.blurLabel),
        "aria-describedby": "vr-cam-btn-blur",
        tabIndex: disabled ? -1 : 0,
        hideLabel: true,
        "aria-pressed": (currentVirtualBg === null || currentVirtualBg === void 0 ? void 0 : (_currentVirtualBg$nam = currentVirtualBg.name) === null || _currentVirtualBg$nam === void 0 ? void 0 : _currentVirtualBg$nam.includes('blur')) || (currentVirtualBg === null || currentVirtualBg === void 0 ? void 0 : (_currentVirtualBg$nam2 = currentVirtualBg.name) === null || _currentVirtualBg$nam2 === void 0 ? void 0 : _currentVirtualBg$nam2.includes('Blur')),
        disabled: disabled,
        ref: ref => {
          inputElementsRef.current[index] = ref;
        },
        onClick: () => _virtualBgSelected(EFFECT_TYPES.BLUR_TYPE, 'Blur', index)
      }), /*#__PURE__*/React.createElement("div", {
        "aria-hidden": true,
        className: "sr-only",
        id: "vr-cam-btn-blur"
      }, intl.formatMessage(intlMessages.camBgAriaDesc, {
        0: EFFECT_TYPES.BLUR_TYPE
      })));
    };
    const renderDefaultButton = (imageName, index) => {
      var _currentVirtualBg$nam3;
      const label = intl.formatMessage(intlMessages[imageName.split('.').shift()], {
        index: index + 1,
        background: intl.formatMessage(intlMessages.background)
      });
      return /*#__PURE__*/React.createElement(Styled.ThumbnailButtonWrapper, {
        key: "".concat(imageName, "-").concat(index + 1)
      }, /*#__PURE__*/React.createElement(Styled.ThumbnailButton, {
        id: "".concat(imageName, "-").concat(index + 1),
        label: label,
        tabIndex: disabled ? -1 : 0,
        role: "button",
        "aria-label": label,
        "aria-describedby": "vr-cam-btn-".concat(index + 1),
        "aria-pressed": currentVirtualBg === null || currentVirtualBg === void 0 ? void 0 : (_currentVirtualBg$nam3 = currentVirtualBg.name) === null || _currentVirtualBg$nam3 === void 0 ? void 0 : _currentVirtualBg$nam3.includes(imageName.split('.').shift()),
        hideLabel: true,
        ref: ref => inputElementsRef.current[index] = ref,
        onClick: () => _virtualBgSelected(EFFECT_TYPES.IMAGE_TYPE, imageName, index),
        disabled: disabled,
        background: getVirtualBackgroundThumbnail(imageName),
        "data-test": "selectDefaultBackground"
      }), /*#__PURE__*/React.createElement("div", {
        "aria-hidden": true,
        className: "sr-only",
        id: "vr-cam-btn-".concat(index + 1)
      }, intl.formatMessage(intlMessages.camBgAriaDesc, {
        0: label
      })));
    };
    const renderCustomButton = (background, index) => {
      var _currentVirtualBg$nam4;
      const {
        filename,
        data,
        uniqueId
      } = background;
      const label = intl.formatMessage(intlMessages.backgroundWithIndex, {
        0: index + 1
      });
      return /*#__PURE__*/React.createElement(Styled.ThumbnailButtonWrapper, {
        key: "".concat(filename, "-").concat(index + 1)
      }, /*#__PURE__*/React.createElement(Styled.ThumbnailButton, {
        id: "".concat(filename, "-").concat(index + 1),
        label: label,
        tabIndex: disabled ? -1 : 0,
        role: "button",
        "aria-label": label,
        "aria-describedby": "vr-cam-btn-".concat(index + 1),
        "aria-pressed": currentVirtualBg === null || currentVirtualBg === void 0 ? void 0 : (_currentVirtualBg$nam4 = currentVirtualBg.name) === null || _currentVirtualBg$nam4 === void 0 ? void 0 : _currentVirtualBg$nam4.includes(filename),
        hideLabel: true,
        ref: ref => inputElementsRef.current[index] = ref,
        onClick: () => _virtualBgSelected(EFFECT_TYPES.IMAGE_TYPE, filename, index, {
          file: data,
          uniqueId
        }),
        disabled: disabled,
        background: data,
        "data-test": "selectCustomBackground"
      }), /*#__PURE__*/React.createElement(Styled.ButtonWrapper, null, /*#__PURE__*/React.createElement(Styled.ButtonRemove, {
        disabled: disabled,
        label: intl.formatMessage(intlMessages.removeLabel),
        "aria-label": intl.formatMessage(intlMessages.removeLabel),
        "aria-describedby": "vr-cam-btn-".concat(index + 1),
        "data-test": "removeCustomBackground",
        icon: "close",
        size: "sm",
        color: "dark",
        circle: true,
        hideLabel: true,
        onClick: () => {
          dispatch({
            type: 'delete',
            uniqueId
          });
          _virtualBgSelected(EFFECT_TYPES.NONE_TYPE);
        }
      })), /*#__PURE__*/React.createElement("div", {
        "aria-hidden": true,
        className: "sr-only",
        id: "vr-cam-btn-".concat(index + 1)
      }, label));
    };
    const renderInputButton = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.BgCustomButton, {
      icon: "plus",
      label: intl.formatMessage(intlMessages.customLabel),
      "aria-describedby": "vr-cam-btn-custom",
      hideLabel: true,
      tabIndex: disabled ? -1 : 0,
      disabled: disabled,
      onClick: () => {
        if (customBgSelectorRef.current) {
          customBgSelectorRef.current.click();
        }
      },
      "data-test": "inputBackgroundButton"
    }), /*#__PURE__*/React.createElement("input", {
      ref: customBgSelectorRef,
      type: "file",
      id: "customBgSelector",
      onChange: handleCustomBgChange,
      style: {
        display: 'none'
      },
      accept: MIME_TYPES_ALLOWED.join(', ')
    }), /*#__PURE__*/React.createElement("div", {
      "aria-hidden": true,
      className: "sr-only",
      id: "vr-cam-btn-custom"
    }, intl.formatMessage(intlMessages.customDesc)));
    const renderNoneButton = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.BgNoneButton, {
      icon: "close",
      label: intl.formatMessage(intlMessages.noneLabel),
      "aria-pressed": (currentVirtualBg === null || currentVirtualBg === void 0 ? void 0 : currentVirtualBg.name) === undefined,
      "aria-describedby": "vr-cam-btn-none",
      hideLabel: true,
      tabIndex: disabled ? -1 : 0,
      disabled: disabled,
      onClick: () => _virtualBgSelected(EFFECT_TYPES.NONE_TYPE),
      "data-test": "noneBackgroundButton"
    }), /*#__PURE__*/React.createElement("div", {
      "aria-hidden": true,
      className: "sr-only",
      id: "vr-cam-btn-none"
    }, intl.formatMessage(intlMessages.camBgAriaDesc, {
      0: EFFECT_TYPES.NONE_TYPE
    })));
    const renderSkeleton = () => /*#__PURE__*/React.createElement(SkeletonTheme, {
      baseColor: "#DCE4EC",
      direction: isRTL ? 'rtl' : 'ltr'
    }, new Array(SKELETON_COUNT).fill(null).map((_, index) => /*#__PURE__*/React.createElement(Styled.SkeletonWrapper, {
      key: "skeleton-".concat(index)
    }, /*#__PURE__*/React.createElement(Skeleton, null))));
    const ready = loaded && defaultSetUp;
    const ENABLE_CAMERA_BRIGHTNESS = window.meetingClientSettings.public.app.enableCameraBrightness;
    return /*#__PURE__*/React.createElement(Styled.VirtualBackgroundRowThumbnail, null, /*#__PURE__*/React.createElement(Styled.BgWrapper, {
      role: "group",
      "aria-label": intl.formatMessage(intlMessages.virtualBackgroundSettingsLabel),
      brightnessEnabled: ENABLE_CAMERA_BRIGHTNESS,
      "data-test": "virtualBackground"
    }, shouldEnableBackgroundUpload(isCustomVirtualBackgroundsEnabled) && /*#__PURE__*/React.createElement(React.Fragment, null, !ready && renderSkeleton(), ready && /*#__PURE__*/React.createElement(React.Fragment, null, renderNoneButton(), Object.values(backgrounds).sort((a, b) => b.lastActivityDate - a.lastActivityDate).map((background, index) => {
      if (background.custom !== false) {
        return renderCustomButton(background, index);
      }
      const isBlur = background.uniqueId.includes('Blur');
      return isBlur ? renderBlurButton(index) : renderDefaultButton(background.uniqueId, index);
    }), renderInputButton())), !shouldEnableBackgroundUpload(isCustomVirtualBackgroundsEnabled) && /*#__PURE__*/React.createElement(React.Fragment, null, renderNoneButton(), renderBlurButton(0), IMAGE_NAMES.map((imageName, index) => {
      const actualIndex = index + 1;
      return renderDefaultButton(imageName, actualIndex);
    }))));
  };
  const renderSelector = () => {
    if (showThumbnails) return renderThumbnailSelector();
    return renderDropdownSelector();
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(isVirtualBackgroundSupported() ? intlMessages.virtualBackgroundSettingsLabel : intlMessages.virtualBackgroundSettingsDisabledLabel)), renderSelector());
};
VirtualBgSelector.propTypes = propTypes;
module.exportDefault(injectIntl(withFileReader(VirtualBgSelector, MIME_TYPES_ALLOWED, MAX_FILE_SIZE)));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"context.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-preview/virtual-background/context.jsx                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  CustomVirtualBackgroundsContext: () => CustomVirtualBackgroundsContext,
  CustomBackgroundsProvider: () => CustomBackgroundsProvider
});
let React, useReducer;
module.link("react", {
  default(v) {
    React = v;
  },
  useReducer(v) {
    useReducer = v;
  }
}, 0);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 1);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 2);
const CustomVirtualBackgroundsContext = /*#__PURE__*/React.createContext();
const reducer = (state, action) => {
  const {
    save,
    del,
    update
  } = Service;
  switch (action.type) {
    case 'load':
      {
        const backgrounds = _objectSpread({}, state.backgrounds);
        action.backgrounds.forEach(background => {
          backgrounds[background.uniqueId] = background;
        });
        return _objectSpread(_objectSpread({}, state), {}, {
          loaded: true,
          backgrounds
        });
      }
    case 'new':
      {
        save(action.background);
        return _objectSpread(_objectSpread({}, state), {}, {
          backgrounds: _objectSpread(_objectSpread({}, state.backgrounds), {}, {
            [action.background.uniqueId]: action.background
          })
        });
      }
    case 'delete':
      {
        const {
          backgrounds
        } = state;
        delete backgrounds[action.uniqueId];
        del(action.uniqueId);
        return _objectSpread(_objectSpread({}, state), {}, {
          backgrounds
        });
      }
    case 'update':
      {
        if (action.background.custom) update(action.background);
        return _objectSpread(_objectSpread({}, state), {}, {
          backgrounds: _objectSpread(_objectSpread({}, state.backgrounds), {}, {
            [action.background.uniqueId]: action.background
          })
        });
      }
    case 'setDefault':
      {
        const backgrounds = _objectSpread({}, state.backgrounds);
        action.backgrounds.forEach(background => {
          backgrounds[background.uniqueId] = background;
        });
        return _objectSpread(_objectSpread({}, state), {}, {
          defaultSetUp: true,
          backgrounds
        });
      }
    default:
      {
        throw new Error('Unknown custom background action.');
      }
  }
};
const CustomBackgroundsProvider = _ref => {
  let {
    children
  } = _ref;
  const [state, dispatch] = useReducer(reducer, {
    loaded: false,
    defaultSetUp: false,
    backgrounds: {}
  });
  const {
    load
  } = Service;
  const loadFromDB = () => {
    const onError = () => dispatch({
      type: 'load',
      backgrounds: []
    });
    const onSuccess = backgrounds => dispatch({
      type: 'load',
      backgrounds
    });
    load(onError, onSuccess);
  };
  return /*#__PURE__*/React.createElement(CustomVirtualBackgroundsContext.Provider, {
    value: {
      dispatch,
      loaded: state.loaded,
      defaultSetUp: state.defaultSetUp,
      backgrounds: state.backgrounds,
      loadFromDB: throttle(loadFromDB, 500, {
        leading: true,
        trailing: false
      })
    }
  }, children);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-preview/virtual-background/service.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 0);
const MIME_TYPES_ALLOWED = ['image/png', 'image/jpeg', 'image/webp'];
const MAX_FILE_SIZE = 5000; // KBytes

const withObjectStore = _ref => {
  let {
    onError,
    onSuccess
  } = _ref;
  const request = window.indexedDB.open('BBB', 1);
  request.onerror = onError;
  request.onupgradeneeded = e => {
    const db = e.target.result;
    db.createObjectStore('CustomBackgrounds', {
      keyPath: 'uniqueId'
    });
  };
  request.onsuccess = e => {
    const db = e.target.result;
    const transaction = db.transaction(['CustomBackgrounds'], 'readwrite');
    const objectStore = transaction.objectStore('CustomBackgrounds');
    onSuccess(objectStore);
  };
};
const genericErrorHandlerBuilder = (code, message, callback) => e => {
  logger.warn({
    logCode: code,
    extraInfo: {
      errorName: e.name,
      errorMessage: e.message
    }
  }, "".concat(message, ": ").concat(e.message));
  if (callback) callback(e);
};
const load = (onError, onSuccess) => {
  withObjectStore({
    onError: genericErrorHandlerBuilder('IndexedDB_access', 'Error on load custom backgrounds from IndexedDB', onError),
    onSuccess: objectStore => {
      const backgrounds = [];
      objectStore.openCursor().onsuccess = e => {
        const cursor = e.target.result;
        if (cursor) {
          backgrounds.push(cursor.value);
          cursor.continue();
        } else {
          onSuccess(backgrounds);
        }
      };
    }
  });
};
const save = (background, onError) => {
  withObjectStore({
    onError: genericErrorHandlerBuilder('IndexedDB_access', 'Error on save custom background to IndexedDB', onError),
    onSuccess: objectStore => {
      objectStore.add(background);
    }
  });
};
const del = (key, onError) => {
  withObjectStore({
    onError: genericErrorHandlerBuilder('IndexedDB_access', 'Error on delete custom background from IndexedDB', onError),
    onSuccess: objectStore => {
      objectStore.delete(key);
    }
  });
};
const update = background => {
  withObjectStore({
    onError: genericErrorHandlerBuilder('IndexedDB_access', 'Error on update custom background in IndexedDB', 'Something wrong while updating custom background'),
    onSuccess: objectStore => {
      objectStore.put(background);
    }
  });
};
module.exportDefault({
  load,
  save,
  del,
  update,
  MIME_TYPES_ALLOWED,
  MAX_FILE_SIZE
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-preview/virtual-background/styles.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let borderSize, borderSizeLarge, borderSizeSmall, smPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  },
  borderSizeSmall(v) {
    borderSizeSmall = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  }
}, 1);
let userThumbnailBorder, btnPrimaryBorder, btnDefaultColor, colorGrayLabel, colorGrayLighter, colorPrimary, colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  userThumbnailBorder(v) {
    userThumbnailBorder = v;
  },
  btnPrimaryBorder(v) {
    btnPrimaryBorder = v;
  },
  btnDefaultColor(v) {
    btnDefaultColor = v;
  },
  colorGrayLabel(v) {
    colorGrayLabel = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  }
}, 2);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 3);
let fontSizeSmallest;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmallest(v) {
    fontSizeSmallest = v;
  }
}, 4);
let smallOnly, mediumOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  },
  mediumOnly(v) {
    mediumOnly = v;
  }
}, 5);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 6);
const VirtualBackgroundRowThumbnail = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin: 0.4rem;\n"])));
const BgWrapper = styled(ScrollboxVertical)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: flex-start;\n  max-width: 272px;\n  max-height: 216px;\n  flex-wrap: wrap;\n  overflow-y: auto;\n  margin: ", ";\n  padding: ", ";\n\n  @media ", ", ", " {\n    justify-content: center;\n    max-height: 22vh;\n  }\n"])), borderSizeLarge, borderSizeLarge, smallOnly, mediumOnly);
const BgNoneButton = styled(Button)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  border-radius: ", ";\n  height: 48px;\n  width: 48px;\n  border: ", " solid ", ";\n  margin: 0.5rem 0.5rem;\n  flex-shrink: 0;\n"])), borderSizeLarge, borderSizeSmall, userThumbnailBorder);
const ThumbnailButton = styled(Button)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  outline: none;\n  display: flex;\n  position: relative;\n  justify-content: center;\n  align-items: center;\n  border-radius: ", ";\n  cursor: pointer;\n  height: 48px;\n  width: 48px;\n  z-index: 1;\n  background-color: transparent;\n  border: ", " solid ", ";\n  flex-shrink: 0;\n\n  & + img {\n    border-radius: ", ";\n  }\n\n  &:focus {\n    color: ", ";\n    background-color: transparent;\n    background-clip: padding-box;\n    box-shadow: 0 0 0 ", " ", ";\n  }\n\n  ", "\n\n  ", "\n"])), borderSizeLarge, borderSizeSmall, userThumbnailBorder, borderSizeLarge, btnDefaultColor, borderSize, btnPrimaryBorder, _ref => {
  let {
    disabled
  } = _ref;
  return disabled && "\n    filter: grayscale(1);\n\n    & + img {\n      filter: grayscale(1);\n    }\n  ";
}, _ref2 => {
  let {
    background
  } = _ref2;
  return background && "\n    background-image: url(".concat(background, ");\n    background-size: 46px 46px;\n    background-origin: padding-box;\n\n    &:active {\n      background-image: url(").concat(background, ");\n    }\n  ");
});
const Select = styled.select(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  border: ", " solid ", ";\n  border-radius: ", ";\n  border-bottom: 0.1rem solid ", ";\n  color: ", ";\n  width: 100%;\n  height: 1.75rem;\n  padding: 1px;\n\n  &:focus {\n    outline: none;\n    box-shadow: inset 0 0 0 ", " ", ";\n    border-radius: ", ";\n  }\n\n  &:hover,\n  &:focus {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n"])), colorWhite, borderSize, colorWhite, borderSize, colorGrayLighter, colorGrayLabel, borderSizeLarge, colorPrimary, borderSize, borderSize);
const Label = styled.label(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  margin-top: 8px;\n  font-size: 0.85rem;\n  font-weight: bold;\n  color: ", ";\n"])), colorGrayLabel);
const ThumbnailButtonWrapper = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  position: relative;\n  margin: 0.5rem 0.5rem;\n"])));
const ButtonWrapper = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  position: absolute;\n  z-index: 2;\n  right: 0;\n  top: 0;\n"])));
const ButtonRemove = styled(Button)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  span {\n    font-size: ", ";\n    padding: ", ";\n  }\n"])), fontSizeSmallest, smPaddingY);
const BgCustomButton = styled(BgNoneButton)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([""])));
const SkeletonWrapper = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  flex-basis: 0 0 48px;\n  margin: 0 0.15rem;\n  height: 48px;\n\n  & .react-loading-skeleton {    \n    height: 48px;\n    width: 48px;\n  }\n"])));
module.exportDefault({
  VirtualBackgroundRowThumbnail,
  BgWrapper,
  BgNoneButton,
  ThumbnailButton,
  Select,
  Label,
  ThumbnailButtonWrapper,
  ButtonWrapper,
  ButtonRemove,
  BgCustomButton,
  SkeletonWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-preview/component.jsx                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 0);
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 1);
let defineMessages, injectIntl, FormattedMessage;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  },
  FormattedMessage(v) {
    FormattedMessage = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
let VirtualBgSelector;
module.link("/imports/ui/components/video-preview/virtual-background/component", {
  default(v) {
    VirtualBgSelector = v;
  }
}, 4);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 5);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 6);
let PreviewService;
module.link("./service", {
  default(v) {
    PreviewService = v;
  }
}, 7);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 8);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 9);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 10);
let MediaStreamUtils;
module.link("/imports/utils/media-stream-utils", {
  default(v) {
    MediaStreamUtils = v;
  }
}, 11);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 12);
let EFFECT_TYPES, setSessionVirtualBackgroundInfo, getSessionVirtualBackgroundInfo, removeSessionVirtualBackgroundInfo, isVirtualBackgroundSupported;
module.link("/imports/ui/services/virtual-background/service", {
  EFFECT_TYPES(v) {
    EFFECT_TYPES = v;
  },
  setSessionVirtualBackgroundInfo(v) {
    setSessionVirtualBackgroundInfo = v;
  },
  getSessionVirtualBackgroundInfo(v) {
    getSessionVirtualBackgroundInfo = v;
  },
  removeSessionVirtualBackgroundInfo(v) {
    removeSessionVirtualBackgroundInfo = v;
  },
  isVirtualBackgroundSupported(v) {
    isVirtualBackgroundSupported = v;
  }
}, 13);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 14);
let Checkbox;
module.link("/imports/ui/components/common/checkbox/component", {
  default(v) {
    Checkbox = v;
  }
}, 15);
let AppService;
module.link("/imports/ui/components/app/service", {
  default(v) {
    AppService = v;
  }
}, 16);
let CustomVirtualBackgroundsContext;
module.link("/imports/ui/components/video-preview/virtual-background/context", {
  CustomVirtualBackgroundsContext(v) {
    CustomVirtualBackgroundsContext = v;
  }
}, 17);
let VBGSelectorService;
module.link("/imports/ui/components/video-preview/virtual-background/service", {
  default(v) {
    VBGSelectorService = v;
  }
}, 18);
const VIEW_STATES = {
  finding: 'finding',
  found: 'found',
  error: 'error'
};
const propTypes = {
  intl: PropTypes.object.isRequired,
  closeModal: PropTypes.func.isRequired,
  startSharing: PropTypes.func.isRequired,
  stopSharing: PropTypes.func.isRequired,
  resolve: PropTypes.func,
  camCapReached: PropTypes.bool,
  hasVideoStream: PropTypes.bool.isRequired,
  webcamDeviceId: PropTypes.string,
  sharedDevices: PropTypes.arrayOf(PropTypes.string)
};
const defaultProps = {
  resolve: null,
  camCapReached: true,
  webcamDeviceId: null,
  sharedDevices: []
};
const intlMessages = defineMessages({
  webcamVirtualBackgroundTitle: {
    id: 'app.videoPreview.webcamVirtualBackgroundLabel',
    description: 'Title for the virtual background modal'
  },
  webcamSettingsTitle: {
    id: 'app.videoPreview.webcamSettingsTitle',
    description: 'Title for the video preview modal'
  },
  closeLabel: {
    id: 'app.videoPreview.closeLabel',
    description: 'Close button label'
  },
  cancelLabel: {
    id: 'app.mobileAppModal.dismissLabel',
    description: 'Close button label'
  },
  webcamPreviewLabel: {
    id: 'app.videoPreview.webcamPreviewLabel',
    description: 'Webcam preview label'
  },
  cameraLabel: {
    id: 'app.videoPreview.cameraLabel',
    description: 'Camera dropdown label'
  },
  qualityLabel: {
    id: 'app.videoPreview.profileLabel',
    description: 'Quality dropdown label'
  },
  low: {
    id: 'app.videoPreview.quality.low',
    description: 'Low quality option label'
  },
  medium: {
    id: 'app.videoPreview.quality.medium',
    description: 'Medium quality option label'
  },
  high: {
    id: 'app.videoPreview.quality.high',
    description: 'High quality option label'
  },
  hd: {
    id: 'app.videoPreview.quality.hd',
    description: 'High definition option label'
  },
  startSharingLabel: {
    id: 'app.videoPreview.startSharingLabel',
    description: 'Start sharing button label'
  },
  stopSharingLabel: {
    id: 'app.videoPreview.stopSharingLabel',
    description: 'Stop sharing button label'
  },
  stopSharingAllLabel: {
    id: 'app.videoPreview.stopSharingAllLabel',
    description: 'Stop sharing all button label'
  },
  sharedCameraLabel: {
    id: 'app.videoPreview.sharedCameraLabel',
    description: 'Already Shared camera label'
  },
  findingWebcamsLabel: {
    id: 'app.videoPreview.findingWebcamsLabel',
    description: 'Finding webcams label'
  },
  webcamOptionLabel: {
    id: 'app.videoPreview.webcamOptionLabel',
    description: 'Default webcam option label'
  },
  webcamNotFoundLabel: {
    id: 'app.videoPreview.webcamNotFoundLabel',
    description: 'Webcam not found label'
  },
  profileNotFoundLabel: {
    id: 'app.videoPreview.profileNotFoundLabel',
    description: 'Profile not found label'
  },
  permissionError: {
    id: 'app.video.permissionError',
    description: 'Error message for webcam permission'
  },
  AbortError: {
    id: 'app.video.abortError',
    description: 'Some problem occurred which prevented the device from being used'
  },
  OverconstrainedError: {
    id: 'app.video.overconstrainedError',
    description: 'No candidate devices which met the criteria requested'
  },
  SecurityError: {
    id: 'app.video.securityError',
    description: 'Media support is disabled on the Document'
  },
  TypeError: {
    id: 'app.video.typeError',
    description: 'List of constraints specified is empty, or has all constraints set to false'
  },
  NotFoundError: {
    id: 'app.video.notFoundError',
    description: 'error message when can not get webcam video'
  },
  NotAllowedError: {
    id: 'app.video.notAllowed',
    description: 'error message when webcam had permission denied'
  },
  NotSupportedError: {
    id: 'app.video.notSupportedError',
    description: 'error message when origin do not have ssl valid'
  },
  NotReadableError: {
    id: 'app.video.notReadableError',
    description: 'error message When the webcam is being used by other software'
  },
  TimeoutError: {
    id: 'app.video.timeoutError',
    description: 'error message when promise did not return'
  },
  iOSError: {
    id: 'app.audioModal.iOSBrowser',
    description: 'Audio/Video Not supported warning'
  },
  iOSErrorDescription: {
    id: 'app.audioModal.iOSErrorDescription',
    description: 'Audio/Video not supported description'
  },
  iOSErrorRecommendation: {
    id: 'app.audioModal.iOSErrorRecommendation',
    description: 'Audio/Video recommended action'
  },
  genericError: {
    id: 'app.video.genericError',
    description: 'error message for when the webcam sharing fails with unknown error'
  },
  camCapReached: {
    id: 'app.video.camCapReached',
    description: 'message for when the camera cap has been reached'
  },
  virtualBgGenericError: {
    id: 'app.video.virtualBackground.genericError',
    description: 'Failed to apply camera effect'
  },
  inactiveError: {
    id: 'app.video.inactiveError',
    description: 'Camera stopped unexpectedly'
  },
  brightness: {
    id: 'app.videoPreview.brightness',
    description: 'Brightness label'
  },
  wholeImageBrightnessLabel: {
    id: 'app.videoPreview.wholeImageBrightnessLabel',
    description: 'Whole image brightness label'
  },
  wholeImageBrightnessDesc: {
    id: 'app.videoPreview.wholeImageBrightnessDesc',
    description: 'Whole image brightness aria description'
  },
  cameraAsContentSettingsTitle: {
    id: 'app.videoPreview.cameraAsContentSettingsTitle',
    description: 'Title for the video preview modal when sharing camera as content'
  },
  sliderDesc: {
    id: 'app.videoPreview.sliderDesc',
    description: 'Brightness slider aria description'
  }
});
class VideoPreview extends Component {
  constructor(props) {
    super(props);
    const {
      webcamDeviceId
    } = props;
    this.handleProceed = this.handleProceed.bind(this);
    this.handleStartSharing = this.handleStartSharing.bind(this);
    this.handleStopSharing = this.handleStopSharing.bind(this);
    this.handleStopSharingAll = this.handleStopSharingAll.bind(this);
    this.handleSelectWebcam = this.handleSelectWebcam.bind(this);
    this.handleSelectProfile = this.handleSelectProfile.bind(this);
    this.handleVirtualBgSelected = this.handleVirtualBgSelected.bind(this);
    this.handleLocalStreamInactive = this.handleLocalStreamInactive.bind(this);
    this.handleBrightnessAreaChange = this.handleBrightnessAreaChange.bind(this);
    this.handleSelectTab = this.handleSelectTab.bind(this);
    this._isMounted = false;
    this.state = {
      webcamDeviceId,
      selectedTab: 0,
      availableWebcams: null,
      selectedProfile: null,
      isStartSharingDisabled: true,
      viewState: VIEW_STATES.finding,
      deviceError: null,
      previewError: null,
      brightness: 100,
      wholeImageBrightness: false,
      skipPreviewFailed: false
    };
  }
  set currentVideoStream(bbbVideoStream) {
    // Stream is being unset - remove gUM revocation handler to avoid false negatives
    if (this._currentVideoStream) {
      this._currentVideoStream.removeListener('inactive', this.handleLocalStreamInactive);
    }
    // Set up inactivation handler for the new stream (to, eg, detect gUM revocation)
    if (bbbVideoStream) {
      bbbVideoStream.once('inactive', this.handleLocalStreamInactive);
    }
    this._currentVideoStream = bbbVideoStream;
  }
  get currentVideoStream() {
    return this._currentVideoStream;
  }
  shouldSkipVideoPreview() {
    const {
      skipPreviewFailed
    } = this.state;
    const {
      forceOpen
    } = this.props;
    return PreviewService.getSkipVideoPreview() && !forceOpen && !skipPreviewFailed;
  }
  componentDidMount() {
    const {
      webcamDeviceId,
      forceOpen
    } = this.props;
    this._isMounted = true;
    if (deviceInfo.hasMediaDevices) {
      navigator.mediaDevices.enumerateDevices().then(async devices => {
        VideoService.updateNumberOfDevices(devices);
        // Tries to skip video preview - this can happen if:
        // 1. skipVideoPreview, skipVideoPreviewOnFirstJoin, or
        //  skipVideoPreviewIfPreviousDevice flags are enabled and meet their
        //  own conditions
        // 2. forceOpen flag was not specified to this component
        //
        // This will fail if no skip conditions are met, or if an unexpected
        // failure occurs during the process. In that case, the error will be
        // handled and the component will display the default video preview UI
        if (this.shouldSkipVideoPreview()) {
          try {
            await this.skipVideoPreview();
            return;
          } catch (error) {
            logger.warn({
              logCode: 'video_preview_skip_failure',
              extraInfo: {
                errorName: error.name,
                errorMessage: error.message
              }
            }, 'Skipping video preview failed');
          }
        }
        // Late enumerateDevices resolution, stop.
        if (!this._isMounted) return;
        let {
          webcams,
          areLabelled,
          areIdentified
        } = PreviewService.digestVideoDevices(devices, webcamDeviceId);
        logger.debug({
          logCode: 'video_preview_enumerate_devices',
          extraInfo: {
            devices,
            webcams
          }
        }, "Enumerate devices came back. There are ".concat(devices.length, " devices and ").concat(webcams.length, " are video inputs"));
        if (webcams.length > 0) {
          await this.getInitialCameraStream(webcams[0].deviceId);
          // Late gUM resolve, stop.
          if (!this._isMounted) return;
          if (!areLabelled || !areIdentified) {
            // If they aren't labelled or have nullish deviceIds, run
            // enumeration again and get their full versions
            // Why: fingerprinting countermeasures obfuscate those when
            // no permission was granted via gUM
            try {
              const newDevices = await navigator.mediaDevices.enumerateDevices();
              webcams = PreviewService.digestVideoDevices(newDevices, webcamDeviceId).webcams;
            } catch (error) {
              // Not a critical error beucase it should only affect UI; log it
              // and go ahead
              logger.error({
                logCode: 'video_preview_enumerate_relabel_failure',
                extraInfo: {
                  errorName: error.name,
                  errorMessage: error.message
                }
              }, 'enumerateDevices for relabelling failed');
            }
          }
          this.setState({
            availableWebcams: webcams,
            viewState: VIEW_STATES.found
          });
          this.displayPreview();
        } else {
          // There were no webcams coming from enumerateDevices. Throw an error.
          const noWebcamsError = new Error('NotFoundError');
          this.handleDeviceError('enumerate', noWebcamsError, ': no webcams found');
        }
      }).catch(error => {
        // enumerateDevices failed
        this.handleDeviceError('enumerate', error, 'enumerating devices');
      });
    } else {
      // Top-level navigator.mediaDevices is not supported.
      // The session went through the version checking, but somehow ended here.
      // Nothing we can do.
      const error = new Error('NotSupportedError');
      this.handleDeviceError('mount', error, ': navigator.mediaDevices unavailable');
    }
  }
  componentDidUpdate() {
    if (this.brightnessMarker) {
      const markerStyle = window.getComputedStyle(this.brightnessMarker);
      const left = parseFloat(markerStyle.left);
      const right = parseFloat(markerStyle.right);
      if (left < 0) {
        this.brightnessMarker.style.left = '0px';
        this.brightnessMarker.style.right = 'auto';
      } else if (right < 0) {
        this.brightnessMarker.style.right = '0px';
        this.brightnessMarker.style.left = 'auto';
      }
    }
  }
  componentWillUnmount() {
    const {
      webcamDeviceId
    } = this.state;
    this.terminateCameraStream(this.currentVideoStream, webcamDeviceId);
    this.cleanupStreamAndVideo();
    this._isMounted = false;
  }
  async startCameraBrightness() {
    const ENABLE_CAMERA_BRIGHTNESS = window.meetingClientSettings.public.app.enableCameraBrightness;
    const CAMERA_BRIGHTNESS_AVAILABLE = ENABLE_CAMERA_BRIGHTNESS && isVirtualBackgroundSupported();
    if (CAMERA_BRIGHTNESS_AVAILABLE && this.currentVideoStream) {
      const setBrightnessInfo = () => {
        const stream = this.currentVideoStream || {};
        const service = stream.virtualBgService || {};
        const {
          brightness = 100,
          wholeImageBrightness = false
        } = service;
        this.setState({
          brightness,
          wholeImageBrightness
        });
      };
      if (!this.currentVideoStream.virtualBgService) {
        const switched = await this.startVirtualBackground(this.currentVideoStream, EFFECT_TYPES.NONE_TYPE);
        if (switched) setBrightnessInfo();
      } else {
        setBrightnessInfo();
      }
    }
  }
  async setCameraBrightness(brightness) {
    const ENABLE_CAMERA_BRIGHTNESS = window.meetingClientSettings.public.app.enableCameraBrightness;
    const CAMERA_BRIGHTNESS_AVAILABLE = ENABLE_CAMERA_BRIGHTNESS && isVirtualBackgroundSupported();
    if (CAMERA_BRIGHTNESS_AVAILABLE && this.currentVideoStream) {
      var _this$currentVideoStr;
      if (((_this$currentVideoStr = this.currentVideoStream) === null || _this$currentVideoStr === void 0 ? void 0 : _this$currentVideoStr.virtualBgService) == null) {
        await this.startCameraBrightness();
      }
      this.currentVideoStream.changeCameraBrightness(brightness);
      this.setState({
        brightness
      });
    }
  }
  handleSelectWebcam(event) {
    const webcamValue = event.target.value;
    this.getInitialCameraStream(webcamValue).then(() => {
      this.displayPreview();
    });
  }
  handleLocalStreamInactive(_ref) {
    var _this$currentVideoStr2, _this$currentVideoStr3;
    let {
      id
    } = _ref;
    // id === MediaStream.id
    if (this.currentVideoStream && typeof id === 'string' && ((_this$currentVideoStr2 = this.currentVideoStream) === null || _this$currentVideoStr2 === void 0 ? void 0 : (_this$currentVideoStr3 = _this$currentVideoStr2.mediaStream) === null || _this$currentVideoStr3 === void 0 ? void 0 : _this$currentVideoStr3.id) === id) {
      this.setState({
        isStartSharingDisabled: true
      });
      this.handlePreviewError('stream_inactive', new Error('inactiveError'), '- preview camera stream inactive');
    }
  }
  updateVirtualBackgroundInfo() {
    const {
      webcamDeviceId
    } = this.state;
    if (this.currentVideoStream) {
      setSessionVirtualBackgroundInfo(webcamDeviceId, this.currentVideoStream.virtualBgType, this.currentVideoStream.virtualBgName, this.currentVideoStream.virtualBgUniqueId);
    }
  }
  // Resolves into true if the background switch is successful, false otherwise
  handleVirtualBgSelected(type, name, customParams) {
    const {
      sharedDevices
    } = this.props;
    const {
      webcamDeviceId,
      brightness
    } = this.state;
    const shared = this.isAlreadyShared(webcamDeviceId);
    const ENABLE_CAMERA_BRIGHTNESS = window.meetingClientSettings.public.app.enableCameraBrightness;
    const CAMERA_BRIGHTNESS_AVAILABLE = ENABLE_CAMERA_BRIGHTNESS && isVirtualBackgroundSupported();
    if (type !== EFFECT_TYPES.NONE_TYPE || CAMERA_BRIGHTNESS_AVAILABLE && brightness !== 100) {
      return this.startVirtualBackground(this.currentVideoStream, type, name, customParams).then(switched => {
        // If it's not shared we don't have to update here because
        // it will be updated in the handleStartSharing method.
        if (switched && shared) this.updateVirtualBackgroundInfo();
        return switched;
      });
    } else {
      this.stopVirtualBackground(this.currentVideoStream);
      if (shared) this.updateVirtualBackgroundInfo();
      return Promise.resolve(true);
    }
  }
  stopVirtualBackground(bbbVideoStream) {
    if (bbbVideoStream) {
      bbbVideoStream.stopVirtualBackground();
      this.displayPreview();
    }
  }
  startVirtualBackground(bbbVideoStream, type, name, customParams) {
    this.setState({
      isStartSharingDisabled: true
    });
    if (bbbVideoStream == null) return Promise.resolve(false);
    return bbbVideoStream.startVirtualBackground(type, name, customParams).then(() => {
      this.displayPreview();
      return true;
    }).catch(error => {
      this.handleVirtualBgError(error, type, name);
      return false;
    }).finally(() => {
      this.setState({
        isStartSharingDisabled: false
      });
    });
  }
  handleSelectProfile(event) {
    const profileValue = event.target.value;
    const {
      webcamDeviceId
    } = this.state;
    const selectedProfile = PreviewService.getCameraProfile(profileValue);
    this.getCameraStream(webcamDeviceId, selectedProfile).then(() => {
      this.displayPreview();
    });
  }
  async handleStartSharing() {
    const {
      resolve,
      startSharing,
      cameraAsContent,
      startSharingCameraAsContent
    } = this.props;
    const {
      webcamDeviceId,
      selectedProfile,
      brightness
    } = this.state;

    // Only streams that will be shared should be stored in the service.
    // If the store call returns false, we're duplicating stuff. So clean this one
    // up because it's an impostor.
    if (!PreviewService.storeStream(webcamDeviceId, this.currentVideoStream)) {
      this.currentVideoStream.stop();
    }
    if (this.currentVideoStream.virtualBgService && brightness === 100 && this.currentVideoStream.virtualBgType === EFFECT_TYPES.NONE_TYPE) {
      this.stopVirtualBackground(this.currentVideoStream);
    }
    if (!cameraAsContent) {
      // Store selected profile, camera ID and virtual background in the storage
      // for future use
      PreviewService.changeProfile(selectedProfile);
      PreviewService.changeWebcam(webcamDeviceId);
      this.updateVirtualBackgroundInfo();
      this.cleanupStreamAndVideo();
      startSharing(webcamDeviceId);
    } else {
      this.cleanupStreamAndVideo();
      startSharingCameraAsContent(webcamDeviceId);
    }
  }
  handleStopSharing() {
    const {
      resolve,
      stopSharing,
      stopSharingCameraAsContent
    } = this.props;
    const {
      webcamDeviceId
    } = this.state;
    if (this.isCameraAsContentDevice(webcamDeviceId)) {
      stopSharingCameraAsContent();
    } else {
      PreviewService.deleteStream(webcamDeviceId);
      stopSharing(webcamDeviceId);
      this.cleanupStreamAndVideo();
    }
    if (resolve) resolve();
  }
  handleStopSharingAll() {
    const {
      resolve,
      stopSharing
    } = this.props;
    stopSharing();
    if (resolve) resolve();
  }
  handleProceed() {
    const {
      resolve,
      closeModal,
      sharedDevices
    } = this.props;
    const {
      webcamDeviceId,
      brightness
    } = this.state;
    const shared = sharedDevices.includes(webcamDeviceId);
    if (shared && this.currentVideoStream.virtualBgService && brightness === 100 && this.currentVideoStream.virtualBgType === EFFECT_TYPES.NONE_TYPE) {
      this.stopVirtualBackground(this.currentVideoStream);
    }
    this.terminateCameraStream(this.currentVideoStream, webcamDeviceId);
    closeModal();
    if (resolve) resolve();
  }
  handlePreviewError(logCode, error, description) {
    logger.warn({
      logCode: "video_preview_".concat(logCode, "_error"),
      extraInfo: {
        errorName: error.name,
        errorMessage: error.message
      }
    }, "Error ".concat(description));
    this.setState({
      previewError: this.handleGUMError(error)
    });
  }
  handleDeviceError(logCode, error, description) {
    logger.warn({
      logCode: "video_preview_".concat(logCode, "_error"),
      extraInfo: {
        errorName: error.name,
        errorMessage: error.message
      }
    }, "Error ".concat(description));
    this.setState({
      viewState: VIEW_STATES.error,
      deviceError: this.handleGUMError(error)
    });
  }
  handleGUMError(error) {
    const {
      intl
    } = this.props;
    logger.error({
      logCode: 'video_preview_gum_failure',
      extraInfo: {
        errorName: error.name,
        errorMessage: error.message
      }
    }, 'getUserMedia failed in video-preview');
    const intlError = intlMessages[error.name] || intlMessages[error.message];
    if (intlError) {
      return intl.formatMessage(intlError);
    }
    return intl.formatMessage(intlMessages.genericError, {
      0: "".concat(error.name, ": ").concat(error.message)
    });
  }
  terminateCameraStream(stream, deviceId) {
    if (stream) {
      // Stream is being destroyed - remove gUM revocation handler to avoid false negatives
      stream.removeListener('inactive', this.handleLocalStreamInactive);
      PreviewService.terminateCameraStream(stream, deviceId);
    }
  }
  cleanupStreamAndVideo() {
    this.currentVideoStream = null;
    if (this.video) this.video.srcObject = null;
  }
  handleVirtualBgError(error, type, name) {
    const {
      intl
    } = this.props;
    logger.error({
      logCode: "video_preview_virtualbg_error",
      extraInfo: {
        errorName: error.name,
        errorMessage: error.message,
        virtualBgType: type,
        virtualBgName: name
      }
    }, "Failed to toggle virtual background: ".concat(error.message));
    notify(intl.formatMessage(intlMessages.virtualBgGenericError), 'error', 'video');
  }
  updateDeviceId(deviceId) {
    let actualDeviceId = deviceId;
    if (!actualDeviceId && this.currentVideoStream) {
      actualDeviceId = MediaStreamUtils.extractDeviceIdFromStream(this.currentVideoStream.mediaStream, 'video');
    }
    this.setState({
      webcamDeviceId: actualDeviceId
    });
  }
  getInitialCameraStream(deviceId) {
    const {
      cameraAsContent
    } = this.props;
    const defaultProfile = !cameraAsContent ? PreviewService.getDefaultProfile() : PreviewService.getCameraAsContentProfile();
    return this.getCameraStream(deviceId, defaultProfile);
  }
  applyStoredVirtualBg() {
    let deviceId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    const webcamDeviceId = deviceId || this.state.webcamDeviceId;

    // Apply the virtual background stored in Local/Session Storage, if any
    // If it fails, remove the stored background.
    return new Promise((resolve, reject) => {
      let customParams;
      const virtualBackground = getSessionVirtualBackgroundInfo(webcamDeviceId);
      if (virtualBackground) {
        const {
          type,
          name,
          uniqueId
        } = virtualBackground;
        const handleFailure = error => {
          this.handleVirtualBgError(error, type, name);
          removeSessionVirtualBackgroundInfo(webcamDeviceId);
          reject(error);
        };
        const applyCustomVirtualBg = backgrounds => {
          const background = backgrounds[uniqueId] || Object.values(backgrounds).find(bg => bg.uniqueId === uniqueId);
          if (background && background.data) {
            customParams = {
              uniqueId,
              file: background === null || background === void 0 ? void 0 : background.data
            };
          } else {
            handleFailure(new Error('Missing virtual background data'));
            return;
          }
          this.handleVirtualBgSelected(type, name, customParams).then(resolve, handleFailure);
        };

        // If uniqueId is defined, this is a custom background. Fetch the custom
        // params from the context and apply them
        if (uniqueId) {
          if (!this.context.loaded) {
            // Virtual BG context might not be loaded yet (in case this is
            // skipping the video preview). Load it manually.
            VBGSelectorService.load(handleFailure, applyCustomVirtualBg);
          } else {
            applyCustomVirtualBg(this.context.backgrounds);
          }
          return;
        }

        // Built-in background, just apply it.
        this.handleVirtualBgSelected(type, name, customParams).then(resolve, handleFailure);
      } else {
        resolve();
      }
    });
  }
  async getCameraStream(deviceId, profile) {
    const {
      webcamDeviceId
    } = this.state;
    const {
      cameraAsContent,
      forceOpen
    } = this.props;
    this.setState({
      selectedProfile: profile.id,
      isStartSharingDisabled: true,
      previewError: undefined
    });
    this.terminateCameraStream(this.currentVideoStream, webcamDeviceId);
    this.cleanupStreamAndVideo();
    try {
      // The return of doGUM is an instance of BBBVideoStream (a thin wrapper over a MediaStream)
      const bbbVideoStream = await PreviewService.doGUM(deviceId, profile);
      this.currentVideoStream = bbbVideoStream;
      this.updateDeviceId(deviceId);
    } catch (error) {
      // When video preview is set to skip, we need some way to bubble errors
      // up to users; so re-throw the error
      if (!this.shouldSkipVideoPreview()) {
        this.handlePreviewError('do_gum_preview', error, 'displaying final selection');
      } else {
        throw error;
      }
    }

    // Restore virtual background if it was stored in Local/Session Storage
    try {
      if (!cameraAsContent) await this.applyStoredVirtualBg(deviceId);
    } catch (error) {
      // Only bubble up errors in this case if we're skipping the video preview
      // This is because virtual background failures are deemed critical when
      // skipping the video preview, but not otherwise
      if (this.shouldSkipVideoPreview()) {
        throw error;
      }
    } finally {
      // Late VBG resolve, clean up tracks, stop.
      if (!this._isMounted) {
        this.terminateCameraStream(bbbVideoStream, deviceId);
        this.cleanupStreamAndVideo();
        return;
      }
      this.setState({
        isStartSharingDisabled: false
      });
    }
  }
  displayPreview() {
    if (this.currentVideoStream && this.video) {
      this.video.srcObject = this.currentVideoStream.mediaStream;
    }
  }
  skipVideoPreview() {
    const {
      webcamDeviceId
    } = this.state;
    const {
      forceOpen
    } = this.props;
    return this.getInitialCameraStream(webcamDeviceId).then(() => {
      this.handleStartSharing();
    }).catch(error => {
      PreviewService.clearWebcamDeviceId();
      PreviewService.clearWebcamProfileId();
      removeSessionVirtualBackgroundInfo(webcamDeviceId);
      this.cleanupStreamAndVideo();
      // Mark the skip as failed so that the component will override any option
      // to skip the video preview and display the default UI
      if (this._isMounted) this.setState({
        skipPreviewFailed: true
      });
      throw error;
    });
  }
  supportWarning() {
    const {
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.Warning, null, "!"), /*#__PURE__*/React.createElement(Styled.Main, null, intl.formatMessage(intlMessages.iOSError)), /*#__PURE__*/React.createElement(Styled.Text, null, intl.formatMessage(intlMessages.iOSErrorDescription)), /*#__PURE__*/React.createElement(Styled.Text, null, intl.formatMessage(intlMessages.iOSErrorRecommendation)));
  }
  getFallbackLabel(webcam, index) {
    const {
      intl
    } = this.props;
    return "".concat(intl.formatMessage(intlMessages.cameraLabel), " ").concat(index);
  }
  isAlreadyShared(webcamId) {
    const {
      sharedDevices,
      cameraAsContentDeviceId
    } = this.props;
    return sharedDevices.includes(webcamId) || webcamId === cameraAsContentDeviceId;
  }
  isCameraAsContentDevice(deviceId) {
    const {
      cameraAsContentDeviceId
    } = this.props;
    return deviceId === cameraAsContentDeviceId;
  }
  renderDeviceSelectors() {
    const {
      intl,
      sharedDevices,
      cameraAsContent
    } = this.props;
    const {
      webcamDeviceId,
      availableWebcams,
      selectedProfile
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.InternCol, null, /*#__PURE__*/React.createElement(Styled.Label, {
      htmlFor: "setCam"
    }, intl.formatMessage(intlMessages.cameraLabel)), availableWebcams && availableWebcams.length > 0 ? /*#__PURE__*/React.createElement(Styled.Select, {
      id: "setCam",
      value: webcamDeviceId || '',
      onChange: this.handleSelectWebcam
    }, availableWebcams.map((webcam, index) => /*#__PURE__*/React.createElement("option", {
      key: webcam.deviceId,
      value: webcam.deviceId
    }, webcam.label || this.getFallbackLabel(webcam, index)))) : /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.webcamNotFoundLabel)), this.renderQualitySelector());
  }
  renderQualitySelector() {
    const {
      intl,
      cameraAsContent
    } = this.props;
    const {
      selectedProfile,
      availableWebcams,
      webcamDeviceId
    } = this.state;
    const shared = this.isAlreadyShared(webcamDeviceId);
    if (shared) {
      return /*#__PURE__*/React.createElement(Styled.Label, null, intl.formatMessage(intlMessages.sharedCameraLabel));
    }
    if (cameraAsContent) return;
    const CAMERA_PROFILES = window.meetingClientSettings.public.kurento.cameraProfiles || [];
    // Filtered, without hidden profiles
    const PREVIEW_CAMERA_PROFILES = CAMERA_PROFILES.filter(p => !p.hidden);
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.Label, {
      htmlFor: "setQuality"
    }, intl.formatMessage(intlMessages.qualityLabel)), PREVIEW_CAMERA_PROFILES.length > 0 ? /*#__PURE__*/React.createElement(Styled.Select, {
      id: "setQuality",
      value: selectedProfile || '',
      onChange: this.handleSelectProfile
    }, PREVIEW_CAMERA_PROFILES.map(profile => {
      const label = intlMessages["".concat(profile.id)] ? intl.formatMessage(intlMessages["".concat(profile.id)]) : profile.name;
      return /*#__PURE__*/React.createElement("option", {
        key: profile.id,
        value: profile.id
      }, "".concat(label));
    })) : /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.profileNotFoundLabel)));
  }
  async handleBrightnessAreaChange() {
    const ENABLE_CAMERA_BRIGHTNESS = window.meetingClientSettings.public.app.enableCameraBrightness;
    const CAMERA_BRIGHTNESS_AVAILABLE = ENABLE_CAMERA_BRIGHTNESS && isVirtualBackgroundSupported();
    if (CAMERA_BRIGHTNESS_AVAILABLE && this.currentVideoStream) {
      var _this$currentVideoStr4;
      if (((_this$currentVideoStr4 = this.currentVideoStream) === null || _this$currentVideoStr4 === void 0 ? void 0 : _this$currentVideoStr4.virtualBgService) == null) {
        await this.startCameraBrightness();
      }
      const {
        wholeImageBrightness
      } = this.state;
      this.currentVideoStream.toggleCameraBrightnessArea(!wholeImageBrightness);
      this.setState({
        wholeImageBrightness: !wholeImageBrightness
      });
    }
  }
  renderBrightnessInput() {
    const {
      cameraAsContent,
      cameraAsContentDeviceId
    } = this.props;
    const {
      webcamDeviceId
    } = this.state;
    const ENABLE_CAMERA_BRIGHTNESS = window.meetingClientSettings.public.app.enableCameraBrightness;
    if (!ENABLE_CAMERA_BRIGHTNESS) return null;
    const {
      intl
    } = this.props;
    const {
      brightness,
      wholeImageBrightness,
      isStartSharingDisabled
    } = this.state;
    const shared = this.isAlreadyShared(webcamDeviceId);
    const origin = brightness <= 100 ? 'left' : 'right';
    const offset = origin === 'left' ? brightness * 100 / 200 : (200 - brightness) * 100 / 200;
    if (cameraAsContent || webcamDeviceId === cameraAsContentDeviceId) {
      return null;
    }
    return /*#__PURE__*/React.createElement(Styled.InternCol, null, /*#__PURE__*/React.createElement(Styled.Label, {
      htmlFor: "brightness"
    }, intl.formatMessage(intlMessages.brightness)), /*#__PURE__*/React.createElement("div", {
      "aria-hidden": true
    }, /*#__PURE__*/React.createElement(Styled.MarkerDynamicWrapper, null, /*#__PURE__*/React.createElement(Styled.MarkerDynamic, {
      ref: ref => this.brightnessMarker = ref,
      style: {
        [origin]: "calc(".concat(offset, "% - 1rem)")
      }
    }, brightness - 100))), /*#__PURE__*/React.createElement("input", {
      id: "brightness",
      style: {
        width: '100%'
      },
      type: "range",
      min: 0,
      max: 200,
      value: brightness,
      "aria-describedby": 'brightness-slider-desc',
      onChange: e => {
        const brightness = e.target.valueAsNumber;
        this.setCameraBrightness(brightness);
      },
      disabled: !isVirtualBackgroundSupported() || isStartSharingDisabled
    }), /*#__PURE__*/React.createElement("div", {
      style: {
        display: 'none'
      },
      id: 'brightness-slider-desc'
    }, intl.formatMessage(intlMessages.sliderDesc)), /*#__PURE__*/React.createElement(Styled.MarkerWrapper, {
      "aria-hidden": true
    }, /*#__PURE__*/React.createElement(Styled.Marker, null, '-100'), /*#__PURE__*/React.createElement(Styled.Marker, null, '0'), /*#__PURE__*/React.createElement(Styled.Marker, null, '100')), /*#__PURE__*/React.createElement("div", {
      style: {
        display: 'flex',
        marginTop: '.5rem'
      }
    }, /*#__PURE__*/React.createElement(Checkbox, {
      onChange: this.handleBrightnessAreaChange,
      checked: wholeImageBrightness,
      ariaLabel: intl.formatMessage(intlMessages.wholeImageBrightnessLabel),
      ariaDescribedBy: 'whole-image-desc',
      ariaDesc: intl.formatMessage(intlMessages.wholeImageBrightnessDesc),
      disabled: !isVirtualBackgroundSupported() || isStartSharingDisabled,
      label: intl.formatMessage(intlMessages.wholeImageBrightnessLabel)
    })));
  }
  renderVirtualBgSelector() {
    const {
      isCustomVirtualBackgroundsEnabled
    } = this.props;
    const {
      isStartSharingDisabled,
      webcamDeviceId
    } = this.state;
    const initialVirtualBgState = this.currentVideoStream ? {
      type: this.currentVideoStream.virtualBgType,
      name: this.currentVideoStream.virtualBgName,
      uniqueId: this.currentVideoStream.virtualBgUniqueId
    } : getSessionVirtualBackgroundInfo(webcamDeviceId);
    const {
      showThumbnails: SHOW_THUMBNAILS = true
    } = window.meetingClientSettings.public.virtualBackgrounds;
    return /*#__PURE__*/React.createElement(VirtualBgSelector, {
      handleVirtualBgSelected: this.handleVirtualBgSelected,
      locked: isStartSharingDisabled,
      showThumbnails: SHOW_THUMBNAILS,
      initialVirtualBgState: initialVirtualBgState,
      isCustomVirtualBackgroundsEnabled: isCustomVirtualBackgroundsEnabled
    });
  }
  renderTabsContent(tabNumber) {
    const {
      cameraAsContent,
      isVirtualBackgroundsEnabled
    } = this.props;
    const shouldShowVirtualBackgrounds = isVirtualBackgroundsEnabled && !cameraAsContent;
    return /*#__PURE__*/React.createElement(Styled.ContentCol, null, tabNumber === 0 && /*#__PURE__*/React.createElement(Styled.Col, null, this.renderDeviceSelectors(), isVirtualBackgroundSupported() && this.renderBrightnessInput()), tabNumber === 1 && shouldShowVirtualBackgrounds && /*#__PURE__*/React.createElement(Styled.BgnCol, null, this.renderVirtualBgSelector()));
  }
  renderContent(selectedTab) {
    const {
      intl
    } = this.props;
    const {
      viewState,
      deviceError,
      previewError
    } = this.state;
    const Settings = getSettingsSingletonInstance();
    const {
      animations
    } = Settings.application;
    const containerStyle = {
      width: '60%',
      height: '25vh',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    };
    switch (viewState) {
      case VIEW_STATES.finding:
        return /*#__PURE__*/React.createElement(Styled.Content, null, /*#__PURE__*/React.createElement(Styled.VideoCol, null, /*#__PURE__*/React.createElement("div", {
          style: containerStyle
        }, /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.findingWebcamsLabel)), /*#__PURE__*/React.createElement(Styled.FetchingAnimation, {
          animations: animations
        }))));
      case VIEW_STATES.error:
        return /*#__PURE__*/React.createElement(Styled.Content, null, /*#__PURE__*/React.createElement(Styled.VideoCol, null, /*#__PURE__*/React.createElement("div", null, deviceError)));
      case VIEW_STATES.found:
      default:
        return /*#__PURE__*/React.createElement(Styled.Content, null, /*#__PURE__*/React.createElement(Styled.VideoCol, null, previewError ? /*#__PURE__*/React.createElement("div", null, previewError) : /*#__PURE__*/React.createElement(Styled.VideoPreview, {
          mirroredVideo: VideoService.mirrorOwnWebcam(),
          id: "preview",
          "data-test": VideoService.mirrorOwnWebcam() ? 'mirroredVideoPreview' : 'videoPreview',
          ref: ref => {
            this.video = ref;
          },
          autoPlay: true,
          playsInline: true,
          muted: true
        })), this.renderTabsContent(selectedTab));
    }
  }
  getModalTitle() {
    const {
      intl,
      cameraAsContent
    } = this.props;
    if (cameraAsContent) return intl.formatMessage(intlMessages.cameraAsContentSettingsTitle);
    return intl.formatMessage(intlMessages.webcamSettingsTitle);
  }
  renderModalContent(selectedTab) {
    const {
      intl,
      hasVideoStream,
      forceOpen,
      camCapReached,
      closeModal
    } = this.props;
    const {
      isStartSharingDisabled,
      webcamDeviceId,
      deviceError,
      previewError
    } = this.state;
    const shouldDisableButtons = this.shouldSkipVideoPreview() && !(deviceError || previewError);
    const shared = this.isAlreadyShared(webcamDeviceId);
    const showStopAllButton = hasVideoStream && VideoService.isMultipleCamerasEnabled();
    const {
      isIe
    } = browserInfo;
    return /*#__PURE__*/React.createElement(React.Fragment, null, isIe ? /*#__PURE__*/React.createElement(Styled.BrowserWarning, null, /*#__PURE__*/React.createElement(FormattedMessage, {
      id: "app.audioModal.unsupportedBrowserLabel",
      description: "Warning when someone joins with a browser that isn't supported",
      values: {
        0: /*#__PURE__*/React.createElement("a", {
          href: "https://www.google.com/chrome/"
        }, "Chrome"),
        1: /*#__PURE__*/React.createElement("a", {
          href: "https://getfirefox.com"
        }, "Firefox")
      }
    })) : null, this.renderContent(selectedTab), /*#__PURE__*/React.createElement(Styled.Footer, null, /*#__PURE__*/React.createElement(Styled.BottomSeparator, null), /*#__PURE__*/React.createElement(Styled.FooterContainer, null, showStopAllButton ? /*#__PURE__*/React.createElement(Styled.ExtraActions, null, /*#__PURE__*/React.createElement(Styled.StopAllButton, {
      color: "danger",
      label: intl.formatMessage(intlMessages.stopSharingAllLabel),
      onClick: this.handleStopSharingAll,
      disabled: shouldDisableButtons
    })) : null, !shared && camCapReached ? /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.camCapReached)) : /*#__PURE__*/React.createElement("div", {
      style: {
        display: 'flex'
      }
    }, /*#__PURE__*/React.createElement(Styled.CancelButton, {
      "data-test": "cancelSharingWebcam",
      label: intl.formatMessage(intlMessages.cancelLabel),
      onClick: closeModal
    }), /*#__PURE__*/React.createElement(Styled.SharingButton, {
      "data-test": "startSharingWebcam",
      color: shared ? 'danger' : 'primary',
      label: intl.formatMessage(shared ? intlMessages.stopSharingLabel : intlMessages.startSharingLabel),
      onClick: shared ? this.handleStopSharing : this.handleStartSharing,
      disabled: isStartSharingDisabled || isStartSharingDisabled === null || shouldDisableButtons
    })))));
  }
  handleSelectTab(tab) {
    this.setState({
      selectedTab: tab
    });
  }
  render() {
    const {
      intl,
      isCamLocked,
      forceOpen,
      isOpen,
      priority,
      cameraAsContent,
      cameraAsContentDeviceId,
      isVirtualBackgroundsEnabled
    } = this.props;
    const {
      selectedTab,
      webcamDeviceId
    } = this.state;
    const BASE_NAME = window.meetingClientSettings.public.app.basename;
    const WebcamSettingsImg = "".concat(BASE_NAME, "/resources/images/webcam_settings.svg");
    const WebcamBackgroundImg = "".concat(BASE_NAME, "/resources/images/webcam_background.svg");
    const darkThemeState = AppService.isDarkThemeEnabled();
    if (isCamLocked === true) {
      this.handleProceed();
      return null;
    }
    if (this.shouldSkipVideoPreview()) {
      return null;
    }
    const {
      deviceError,
      previewError
    } = this.state;
    const allowCloseModal = !!(deviceError || previewError) || !PreviewService.getSkipVideoPreview() || forceOpen;
    const shouldShowVirtualBackgroundsTab = isVirtualBackgroundsEnabled && !cameraAsContent && !(webcamDeviceId === cameraAsContentDeviceId) && isVirtualBackgroundSupported();
    return /*#__PURE__*/React.createElement(Styled.VideoPreviewModal, {
      onRequestClose: this.handleProceed,
      contentLabel: intl.formatMessage(intlMessages.webcamSettingsTitle),
      shouldShowCloseButton: allowCloseModal,
      shouldCloseOnOverlayClick: allowCloseModal,
      isPhone: deviceInfo.isPhone,
      "data-test": "webcamSettingsModal",
      isOpen,
      priority
    }, /*#__PURE__*/React.createElement(Styled.Container, null, /*#__PURE__*/React.createElement(Styled.Header, null, /*#__PURE__*/React.createElement(Styled.WebcamTabs, {
      onSelect: this.handleSelectTab,
      selectedIndex: selectedTab
    }, /*#__PURE__*/React.createElement(Styled.WebcamTabList, null, /*#__PURE__*/React.createElement(Styled.WebcamTabSelector, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement(Styled.IconSvg, {
      src: WebcamSettingsImg,
      darkThemeState: darkThemeState
    }), /*#__PURE__*/React.createElement("span", {
      id: "webcam-settings-title"
    }, this.getModalTitle())), shouldShowVirtualBackgroundsTab && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.HeaderSeparator, null), /*#__PURE__*/React.createElement(Styled.WebcamTabSelector, {
      selectedClassName: "is-selected"
    }, /*#__PURE__*/React.createElement(Styled.IconSvg, {
      src: WebcamBackgroundImg,
      darkThemeState: darkThemeState
    }), /*#__PURE__*/React.createElement("span", {
      id: "backgrounds-title"
    }, intl.formatMessage(intlMessages.webcamVirtualBackgroundTitle))))))), deviceInfo.hasMediaDevices ? this.renderModalContent(selectedTab) : this.supportWarning()));
  }
}
VideoPreview.contextType = CustomVirtualBackgroundsContext;
VideoPreview.propTypes = propTypes;
VideoPreview.defaultProps = defaultProps;
module.exportDefault(injectIntl(VideoPreview));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-preview/container.jsx                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 2);
let VideoPreview;
module.link("./component", {
  default(v) {
    VideoPreview = v;
  }
}, 3);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 4);
let ScreenShareService;
module.link("/imports/ui/components/screenshare/service", {
  "*"(v) {
    ScreenShareService = v;
  }
}, 5);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 6);
let SCREENSHARING_ERRORS;
module.link("/imports/api/screenshare/client/bridge/errors", {
  SCREENSHARING_ERRORS(v) {
    SCREENSHARING_ERRORS = v;
  }
}, 7);
let EXTERNAL_VIDEO_STOP;
module.link("../external-video-player/mutations", {
  EXTERNAL_VIDEO_STOP(v) {
    EXTERNAL_VIDEO_STOP = v;
  }
}, 8);
let useSharedDevices, useHasVideoStream, useHasCapReached, useIsUserLocked, useStreams, useExitVideo, useStopVideo;
module.link("/imports/ui/components/video-provider/hooks", {
  useSharedDevices(v) {
    useSharedDevices = v;
  },
  useHasVideoStream(v) {
    useHasVideoStream = v;
  },
  useHasCapReached(v) {
    useHasCapReached = v;
  },
  useIsUserLocked(v) {
    useIsUserLocked = v;
  },
  useStreams(v) {
    useStreams = v;
  },
  useExitVideo(v) {
    useExitVideo = v;
  },
  useStopVideo(v) {
    useStopVideo = v;
  }
}, 9);
let useStorageKey;
module.link("../../services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 10);
let useIsCustomVirtualBackgroundsEnabled, useIsVirtualBackgroundsEnabled;
module.link("../../services/features", {
  useIsCustomVirtualBackgroundsEnabled(v) {
    useIsCustomVirtualBackgroundsEnabled = v;
  },
  useIsVirtualBackgroundsEnabled(v) {
    useIsVirtualBackgroundsEnabled = v;
  }
}, 11);
const VideoPreviewContainer = props => {
  const {
    callbackToClose,
    setIsOpen
  } = props;
  const cameraAsContentDeviceId = ScreenShareService.useCameraAsContentDeviceIdType();
  const [stopExternalVideoShare] = useMutation(EXTERNAL_VIDEO_STOP);
  const {
    streams
  } = useStreams();
  const exitVideo = useExitVideo();
  const stopVideo = useStopVideo();
  const sharedDevices = useSharedDevices();
  const hasVideoStream = useHasVideoStream();
  const camCapReached = useHasCapReached();
  const isCamLocked = useIsUserLocked();
  const settingsStorage = window.meetingClientSettings.public.app.userSettingsStorage;
  const webcamDeviceId = useStorageKey('WebcamDeviceId', settingsStorage);
  const isVirtualBackgroundsEnabled = useIsVirtualBackgroundsEnabled();
  const isCustomVirtualBackgroundsEnabled = useIsCustomVirtualBackgroundsEnabled();
  const isCameraAsContentBroadcasting = ScreenShareService.useIsCameraAsContentBroadcasting();
  const stopSharing = deviceId => {
    callbackToClose();
    setIsOpen(false);
    if (deviceId) {
      const streamId = VideoService.getMyStreamId(deviceId, streams);
      if (streamId) stopVideo(streamId);
    } else {
      exitVideo();
    }
  };
  const startSharingCameraAsContent = deviceId => {
    callbackToClose();
    setIsOpen(false);
    const handleFailure = error => {
      const {
        errorCode = SCREENSHARING_ERRORS.UNKNOWN_ERROR.errorCode,
        errorMessage = error.message
      } = error;
      logger.error({
        logCode: 'camera_as_content_failed',
        extraInfo: {
          errorCode,
          errorMessage
        }
      }, "Sharing camera as content failed: ".concat(errorMessage, " (code=").concat(errorCode, ")"));
      ScreenShareService.screenshareHasEnded();
    };
    ScreenShareService.shareScreen(isCameraAsContentBroadcasting, stopExternalVideoShare, true, handleFailure, {
      stream: Service.getStream(deviceId)._mediaStream
    });
    ScreenShareService.setCameraAsContentDeviceId(deviceId);
  };
  const startSharing = deviceId => {
    callbackToClose();
    setIsOpen(false);
    VideoService.joinVideo(deviceId, isCamLocked);
  };
  const stopSharingCameraAsContent = () => {
    callbackToClose();
    setIsOpen(false);
    ScreenShareService.screenshareHasEnded();
  };
  const closeModal = () => {
    callbackToClose();
    setIsOpen(false);
  };
  return /*#__PURE__*/React.createElement(VideoPreview, _objectSpread({
    stopSharingCameraAsContent,
    closeModal,
    startSharing,
    cameraAsContentDeviceId,
    startSharingCameraAsContent,
    stopSharing,
    sharedDevices,
    hasVideoStream,
    camCapReached,
    isCamLocked,
    webcamDeviceId,
    isVirtualBackgroundsEnabled,
    isCustomVirtualBackgroundsEnabled
  }, props));
};
module.exportDefault(VideoPreviewContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-preview/service.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 0);
let getStorageSingletonInstance;
module.link("/imports/ui/services/storage", {
  getStorageSingletonInstance(v) {
    getStorageSingletonInstance = v;
  }
}, 1);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 2);
let MediaStreamUtils;
module.link("/imports/utils/media-stream-utils", {
  default(v) {
    MediaStreamUtils = v;
  }
}, 3);
let VideoService;
module.link("/imports/ui/components/video-provider/service", {
  default(v) {
    VideoService = v;
  }
}, 4);
let BBBVideoStream;
module.link("/imports/ui/services/webrtc-base/bbb-video-stream", {
  default(v) {
    BBBVideoStream = v;
  }
}, 5);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 6);
// GUM retry + delay params (Chrome only for now)
const GUM_MAX_RETRIES = 5;
const GUM_RETRY_DELAY = 200;
const CAMERA_AS_CONTENT_PROFILE_ID = 'fhd';
const getDefaultProfile = () => {
  const BBBStorage = getStorageSingletonInstance();
  // Unfiltered, includes hidden profiles
  const CAMERA_PROFILES = window.meetingClientSettings.public.kurento.cameraProfiles || [];
  return CAMERA_PROFILES.find(profile => profile.id === BBBStorage.getItem('WebcamProfileId')) || CAMERA_PROFILES.find(profile => profile.id === VideoService.getUserParameterProfile()) || CAMERA_PROFILES.find(profile => profile.default) || CAMERA_PROFILES[0];
};
const getCameraAsContentProfile = () => {
  // Unfiltered, includes hidden profiles
  const CAMERA_PROFILES = window.meetingClientSettings.public.kurento.cameraProfiles || [];
  return CAMERA_PROFILES.find(profile => profile.id == CAMERA_AS_CONTENT_PROFILE_ID) || CAMERA_PROFILES.find(profile => profile.default);
};
const getCameraProfile = id => {
  // Unfiltered, includes hidden profiles
  const CAMERA_PROFILES = window.meetingClientSettings.public.kurento.cameraProfiles || [];
  return CAMERA_PROFILES.find(profile => profile.id === id);
};

// VIDEO_STREAM_STORAGE: Map<deviceId, MediaStream>. Registers WEBCAM streams.
// Easier to keep track of them. Easier to centralize their referencing.
// Easier to shuffle them around.
const VIDEO_STREAM_STORAGE = new Map();
const storeStream = (deviceId, stream) => {
  if (!stream) return false;

  // Check if there's a dangling stream. If there's one and it's active, cool,
  // return false as it's already stored. Otherwised, clean the derelict stream
  // and store the new one
  if (hasStream(deviceId)) {
    const existingStream = getStream(deviceId);
    if (existingStream.active) return false;
    deleteStream(deviceId);
  }
  VIDEO_STREAM_STORAGE.set(deviceId, stream);

  // Stream insurance: clean it up if it ends (see the events being listened to below)
  stream.once('inactive', () => {
    deleteStream(deviceId);
  });
  return true;
};
const getStream = deviceId => VIDEO_STREAM_STORAGE.get(deviceId);
const hasStream = deviceId => VIDEO_STREAM_STORAGE.has(deviceId);
const deleteStream = deviceId => {
  const stream = getStream(deviceId);
  if (stream == null) return false;
  MediaStreamUtils.stopMediaStreamTracks(stream);
  return VIDEO_STREAM_STORAGE.delete(deviceId);
};
const promiseTimeout = (ms, promise) => {
  const timeout = new Promise((resolve, reject) => {
    const id = setTimeout(() => {
      clearTimeout(id);
      const error = {
        name: 'TimeoutError',
        message: 'Promise did not return'
      };
      reject(error);
    }, ms);
  });
  return Promise.race([promise, timeout]);
};
const getSkipVideoPreview = () => {
  const KURENTO_CONFIG = window.meetingClientSettings.public.kurento;
  const BBBStorage = getStorageSingletonInstance();
  const skipVideoPreviewOnFirstJoin = getFromUserSettings('bbb_skip_video_preview_on_first_join', KURENTO_CONFIG.skipVideoPreviewOnFirstJoin);
  const skipVideoPreview = getFromUserSettings('bbb_skip_video_preview', KURENTO_CONFIG.skipVideoPreview);
  const skipVideoPreviewIfPreviousDevice = getFromUserSettings('bbb_skip_video_preview_if_previous_device', KURENTO_CONFIG.skipVideoPreviewIfPreviousDevice);
  return Storage.getItem('isFirstJoin') !== false && skipVideoPreviewOnFirstJoin || BBBStorage.getItem('WebcamDeviceId') && skipVideoPreviewIfPreviousDevice || skipVideoPreview;
};

// Takes a raw list of media devices of any media type coming enumerateDevices
// and a deviceId to be prioritized
// Outputs an object containing:
//  webcams: videoinput media devices, priorityDevice being the first member of the array (if it exists)
//  areLabelled: whether all videoinput devices are labelled
//  areIdentified: whether all videoinput devices have deviceIds
const digestVideoDevices = (devices, priorityDevice) => {
  const webcams = [];
  let areLabelled = true;
  let areIdentified = true;
  devices.forEach(device => {
    if (device.kind === 'videoinput') {
      if (!webcams.some(d => d.deviceId === device.deviceId)) {
        // We found a priority device. Push it to the beginning of the array so we
        // can use it as the "initial device"
        if (priorityDevice && priorityDevice === device.deviceId) {
          webcams.unshift(device);
        } else {
          webcams.push(device);
        }
        if (!device.label) {
          areLabelled = false;
        }
        if (!device.deviceId) {
          areIdentified = false;
        }
      }
    }
  });

  // Returns the list of devices and whether they are labelled and identified with deviceId
  return {
    webcams,
    areLabelled,
    areIdentified
  };
};
const _retry = (foo, opts) => new Promise((resolve, reject) => {
  const {
    retries = 1,
    delay = 0,
    error: bubbledError,
    errorRetryList = []
  } = opts;
  if (!retries) return reject(bubbledError);
  return foo().then(resolve).catch(_error => {
    if (errorRetryList.length > 0 && !errorRetryList.some(eName => _error.name === eName)) {
      reject(_error);
      return;
    }
    const newOpts = _objectSpread(_objectSpread({}, opts), {}, {
      retries: retries - 1,
      error: _error
    });
    setTimeout(() => {
      _retry(foo, newOpts).then(resolve).catch(reject);
    }, delay);
  });
});

// Returns a promise that resolves an instance of BBBVideoStream or rejects an *Error
const doGUM = (deviceId, profile) => {
  const GUM_TIMEOUT = window.meetingClientSettings.public.kurento.gUMTimeout;

  // Check if this is an already loaded stream
  if (deviceId && hasStream(deviceId)) {
    return Promise.resolve(getStream(deviceId));
  }
  const constraints = {
    audio: false,
    video: _objectSpread({}, profile.constraints)
  };
  if (deviceId) {
    constraints.video.deviceId = {
      exact: deviceId
    };
  }
  const postProcessedgUM = cts => {
    const ppGUM = () => navigator.mediaDevices.getUserMedia(cts).then(stream => new BBBVideoStream(stream));

    // Chrome/Edge sometimes bork gUM calls when switching camera
    // profiles. This looks like a browser bug. Track release not
    // being done synchronously -> quick subsequent gUM calls for the same
    // device (profile switching) -> device becoming unavailable while previous
    // tracks aren't finished - prlanzarin
    if (browserInfo.isChrome || browserInfo.isEdge) {
      const opts = {
        retries: GUM_MAX_RETRIES,
        errorRetryList: ['NotReadableError'],
        delay: GUM_RETRY_DELAY
      };
      return _retry(ppGUM, opts);
    }
    return ppGUM();
  };
  return promiseTimeout(GUM_TIMEOUT, postProcessedgUM(constraints));
};
const terminateCameraStream = (bbbVideoStream, deviceId) => {
  // Cleanup current stream if it wasn't shared/stored
  if (bbbVideoStream && !hasStream(deviceId)) {
    bbbVideoStream.stop();
  }
};
module.exportDefault({
  promiseTimeout,
  changeWebcam: deviceId => {
    getStorageSingletonInstance().setItem('WebcamDeviceId', deviceId);
  },
  webcamDeviceId: () => getStorageSingletonInstance().getItem('WebcamDeviceId'),
  clearWebcamDeviceId: () => getStorageSingletonInstance().removeItem('WebcamDeviceId'),
  changeProfile: profileId => {
    getStorageSingletonInstance().setItem('WebcamProfileId', profileId);
  },
  webcamProfileId: () => getStorageSingletonInstance().getItem('WebcamProfileId'),
  clearWebcamProfileId: () => getStorageSingletonInstance().removeItem('WebcamProfileId'),
  getSkipVideoPreview,
  storeStream,
  getStream,
  hasStream,
  deleteStream,
  digestVideoDevices,
  getDefaultProfile,
  getCameraAsContentProfile,
  getCameraProfile,
  doGUM,
  terminateCameraStream
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/video-preview/styles.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33, _templateObject34, _templateObject35, _templateObject36, _templateObject37, _templateObject38;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let borderSizeSmall, borderSize, borderSizeLarge, mdPaddingX, titlePositionLeft, lgPaddingY;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSizeSmall(v) {
    borderSizeSmall = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  borderSizeLarge(v) {
    borderSizeLarge = v;
  },
  mdPaddingX(v) {
    mdPaddingX = v;
  },
  titlePositionLeft(v) {
    titlePositionLeft = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  }
}, 1);
let colorGrayLabel, colorWhite, colorBlack, colorGrayLighter, colorGrayLightest, colorPrimary, colorText;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGrayLabel(v) {
    colorGrayLabel = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorBlack(v) {
    colorBlack = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorGrayLightest(v) {
    colorGrayLightest = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorText(v) {
    colorText = v;
  }
}, 2);
let fontSizeLarge, lineHeightComputed, headingsFontWeight, fontSizeLarger, fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarge(v) {
    fontSizeLarge = v;
  },
  lineHeightComputed(v) {
    lineHeightComputed = v;
  },
  headingsFontWeight(v) {
    headingsFontWeight = v;
  },
  fontSizeLarger(v) {
    fontSizeLarger = v;
  },
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 3);
let smallOnly, mediumOnly, landscape;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  },
  mediumOnly(v) {
    mediumOnly = v;
  },
  landscape(v) {
    landscape = v;
  }
}, 4);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 5);
let ModalStyles;
module.link("/imports/ui/components/common/modal/simple/styles", {
  default(v) {
    ModalStyles = v;
  }
}, 6);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 7);
let Tab, Tabs, TabList;
module.link("react-tabs", {
  Tab(v) {
    Tab = v;
  },
  Tabs(v) {
    Tabs = v;
  },
  TabList(v) {
    TabList = v;
  }
}, 8);
const Warning = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  text-align: center;\n  font-weight: ", ";\n  font-size: 5rem;\n  white-space: normal;\n"])), headingsFontWeight);
const Main = styled.h4(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin: ", ";\n  text-align: center;\n  font-size: ", ";\n"])), lineHeightComputed, fontSizeLarge);
const Text = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin: ", ";\n  text-align: center;\n"])), lineHeightComputed);
const Col = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  margin: 0 0.5rem 0 0.5rem;\n\n  @media ", ", ", " {\n    justify-content: space-between;\n    align-items: center;\n    overflow: auto;\n    margin: 0;\n  }\n"])), smallOnly, mediumOnly);
const BgnCol = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  margin: 0 0.5rem 0 0.5rem;\n\n  @media ", " {\n    justify-content: space-between;\n    align-items: center;\n    margin: 0;\n  }\n"])), smallOnly);
const InternCol = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  margin: 0 0.5rem 0 0.5rem;\n\n  @media ", " {\n    width: 90%;\n  }\n"])), smallOnly);
const ContentCol = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  width: 60%;\n  height: 25vh;\n\n  @media ", " {\n    width: 90%;\n  }\n"])), smallOnly);
const BackgroundCol = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n"])));
const VideoCol = styled(Col)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  align-items: center;\n\n  @media ", " {\n     width: 50%;\n   }\n"])), landscape);
const Label = styled.label(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  margin-top: 8px;\n  font-size: 0.85rem;\n  font-weight: bold;\n  color: ", ";\n"])), colorGrayLabel);
const Select = styled.select(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  border: ", " solid ", ";\n  border-radius: ", ";\n  border-bottom: 0.1rem solid ", ";\n  color: ", ";\n  width: 100%;\n  height: 1.75rem;\n  padding: 1px;\n\n  &:focus {\n    outline: none;\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n  }\n\n  &:hover,\n  &:focus {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n"])), colorWhite, borderSize, colorWhite, borderSize, colorGrayLighter, colorGrayLabel, borderSize, borderSize, colorPrimary, colorPrimary, borderSize);
const Content = styled.div(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  \n  color: ", ";\n  font-weight: normal;\n\n  @media ", " {\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: row;\n    margin: 5px;\n  }\n"])), colorText, smallOnly);
const BrowserWarning = styled.p(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  padding: 0.5rem;\n  border-width: ", ";\n  border-style: solid;\n  border-radius: 0.25rem;\n  margin: ", ";\n  text-align: center;\n"])), borderSizeLarge, lineHeightComputed);
const Footer = styled.div(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n"])));
const FooterContainer = styled.div(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n  justify-content: ", ";\n\n  @media ", " {\n    display: flex;\n    flex-direction: column;\n  }\n"])), _ref => {
  let {
    showStopAllButton
  } = _ref;
  return showStopAllButton ? 'flex-start' : 'flex-end';
}, smallOnly);
const Actions = styled.div(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: flex-end;\n\n  [dir=\"rtl\"] & {\n    margin-right: auto;\n    background:red;\n    margin-left: ", ";\n  }\n\n  & > :first-child {\n    margin-right: ", ";\n    margin-left: inherit;\n\n    [dir=\"rtl\"] & {\n      margin-right: inherit;\n      margin-left: ", ";\n    }\n  }\n"])), borderSizeLarge, borderSizeLarge, borderSizeLarge);
const ExtraActions = styled.div(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n  margin-right: auto;\n  margin-left: ", ";\n\n  [dir=\"rtl\"] & {\n    margin-left: auto;\n    margin-right: ", ";\n  }\n\n  & > :first-child {\n    margin-left: ", ";\n    margin-right: inherit;\n\n    [dir=\"rtl\"] & {\n      margin-left: inherit;\n      margin-right: ", ";\n    }\n  }\n"])), borderSizeLarge, borderSizeLarge, borderSizeLarge, borderSizeLarge);
const VideoPreviewModal = styled(ModalSimple)(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n  padding: 1rem;\n  min-height: 25rem;\n  max-height: 100vh;\n\n  @media ", " {\n    height: unset;\n    min-height: 22.5rem;\n  }\n\n  ", "\n\n  ", " {\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n"])), smallOnly, _ref2 => {
  let {
    isPhone
  } = _ref2;
  return isPhone && "\n    min-height: 100%;\n    min-width: 100%;\n    border-radius: 0;\n  ";
}, ModalStyles.Content);
const ellipsis = keyframes(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral(["\n  to {\n    width: 1.5em;\n  }\n"])));
const FetchingAnimation = styled.span(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral(["\n  margin: auto;\n  display: inline-block;\n  width: 1.5em;\n\n  &:after {\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    content: \"\\2026\"; /* ascii code for the ellipsis character */\n    width: 0;\n    margin-left: 0.25em;\n\n    ", "\n  }\n"], ["\n  margin: auto;\n  display: inline-block;\n  width: 1.5em;\n\n  &:after {\n    overflow: hidden;\n    display: inline-block;\n    vertical-align: bottom;\n    content: \"\\\\2026\"; /* ascii code for the ellipsis character */\n    width: 0;\n    margin-left: 0.25em;\n\n    ", "\n  }\n"])), _ref3 => {
  let {
    animations
  } = _ref3;
  return animations && css(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral(["\n      animation: ", " steps(4, end) 900ms infinite;\n    "])), ellipsis);
});
const VideoPreview = styled.video(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral(["\n  height: 100%;\n  width: 100%;\n\n  @media ", " {\n    height: 10rem;\n  }\n\n  ", "\n"])), smallOnly, _ref4 => {
  let {
    mirroredVideo
  } = _ref4;
  return mirroredVideo && "\n    transform: scale(-1, 1);\n  ";
});
const Marker = styled.div(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral(["\n  width: 2rem;\n  text-align: center;\n"])));
const MarkerDynamic = styled(Marker)(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n"])));
const MarkerWrapper = styled.div(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-between;\n  user-select: none;\n"])));
const MarkerDynamicWrapper = styled.div(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral(["\n  position: relative;\n  height: 1rem;\n  user-select: none;\n"])));
const Container = styled.div(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral(["\n  padding: 0 calc(", " / 2 + ", ");\n"])), mdPaddingX, borderSize);
const Header = styled.div(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral(["\n  margin: 0;\n  padding: 0;\n  border: none;\n  line-height: ", ";\n  margin-bottom: ", ";\n"])), titlePositionLeft, lgPaddingY);
const WebcamTabs = styled(Tabs)(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n"])));
const WebcamTabList = styled(TabList)(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: space-around;\n  padding: 0;\n  list-style-type: none;\n"])));
const WebcamTabSelector = styled(Tab)(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral(["\n  display: flex;\n  justify-content: center;\n  flex-grow: 1;\n  text-align: center;\n  font-weight: bold;\n  color: ", ";\n\n  &.is-selected {\n    border: none;\n    color: ", ";\n  }\n"])), colorGrayLighter, colorBlack);
const HeaderSeparator = styled.div(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral(["\n  border-left: 1px solid ", ";\n  content: '|';\n  margin: 0 1.5rem; \n  height: 1.5rem;\n  align-self: center;\n  opacity: 0.75;\n"])), colorText);
const BottomSeparator = styled.div(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral(["\n  position: relative;\n  width: 100%;\n  height: ", ";\n  background-color: ", ";\n  margin-top: calc(", " * 1.25);\n  margin-bottom: calc(", " * 1.25);\n"])), borderSizeSmall, colorGrayLightest, lineHeightComputed, lineHeightComputed);
const IconSvg = styled.img(_templateObject34 || (_templateObject34 = _taggedTemplateLiteral(["\n  height: ", ";\n  border-radius: 5px;\n  margin: 5px;\n\n  ", "\n\n"])), fontSizeLarger, _ref5 => {
  let {
    darkThemeState
  } = _ref5;
  return darkThemeState && css(_templateObject35 || (_templateObject35 = _taggedTemplateLiteral(["\n      filter: invert(1);\n    "])));
});
const SharingButton = styled(Button)(_templateObject36 || (_templateObject36 = _taggedTemplateLiteral(["\n  margin: 0 0.5rem;\n  height: 2.5rem;\n"])));
const CancelButton = styled(Button)(_templateObject37 || (_templateObject37 = _taggedTemplateLiteral(["\n  margin: 0 0.5rem;\n  height: 2.5rem;\n"])));
const StopAllButton = styled(Button)(_templateObject38 || (_templateObject38 = _taggedTemplateLiteral(["\n  margin: 0 0.5rem;\n  height: 2.5rem;\n"])));
module.exportDefault({
  Warning,
  Main,
  Text,
  Col,
  BgnCol,
  ContentCol,
  InternCol,
  Container,
  Header,
  WebcamTabs,
  WebcamTabList,
  WebcamTabSelector,
  HeaderSeparator,
  BottomSeparator,
  VideoCol,
  BackgroundCol,
  IconSvg,
  SharingButton,
  CancelButton,
  StopAllButton,
  Label,
  Select,
  Content,
  BrowserWarning,
  Footer,
  FooterContainer,
  Actions,
  ExtraActions,
  VideoPreviewModal,
  FetchingAnimation,
  VideoPreview,
  Marker,
  MarkerDynamic,
  MarkerWrapper,
  MarkerDynamicWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"webcam":{"drop-areas":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/webcam/drop-areas/component.tsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 2);
const intlMessages = defineMessages({
  dropZoneLabel: {
    id: 'app.video.dropZoneLabel',
    description: 'message showing where the user can drop cameraDock'
  }
});
const DropArea = _ref => {
  let {
    id,
    dataTest,
    style
  } = _ref;
  const intl = useIntl();
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Styled.DropZoneArea, {
    id: id,
    "data-test": dataTest,
    style: _objectSpread(_objectSpread({}, style), {}, {
      zIndex: style.zIndex + 1
    })
  }), /*#__PURE__*/React.createElement(Styled.DropZoneBg, {
    style: _objectSpread(_objectSpread({}, style), {}, {
      zIndex: style.zIndex
    })
  }, intl.formatMessage(intlMessages.dropZoneLabel)));
};
module.exportDefault(DropArea);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/webcam/drop-areas/container.tsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let layoutSelectOutput;
module.link("/imports/ui/components/layout/context", {
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  }
}, 1);
let DropArea;
module.link("./component", {
  default(v) {
    DropArea = v;
  }
}, 2);
const DropAreaContainer = () => {
  const dropZoneAreas = layoutSelectOutput(i => i.dropZoneAreas);
  return Object.keys(dropZoneAreas).map(objectKey => /*#__PURE__*/React.createElement(DropArea, {
    dataTest: "dropArea-".concat(objectKey),
    key: objectKey,
    id: objectKey,
    style: dropZoneAreas[objectKey]
  }));
};
module.exportDefault(DropAreaContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/webcam/drop-areas/styles.ts                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 1);
const DropZoneArea = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  background: transparent;\n  -webkit-box-shadow: inset 0px 0px 0px 1px rgba(0, 0, 0, .2);\n  -moz-box-shadow: inset 0px 0px 0px 1px rgba(0, 0, 0, .2);\n  box-shadow: inset 0px 0px 0px 1px rgba(0, 0, 0, .2);\n  font-weight: bold;\n  font-family: sans-serif;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: grabbing;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, .1);\n  }\n"])));
const DropZoneBg = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute;\n  background-color: rgba(0, 0, 0, .5);\n  -webkit-box-shadow: inset 0px 0px 0px 1px #666;\n  -moz-box-shadow: inset 0px 0px 0px 1px #666;\n  box-shadow: inset 0px 0px 0px 1px #666;\n  color: ", ";\n  font-weight: bold;\n  font-family: sans-serif;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n"])), colorWhite);
module.exportDefault({
  DropZoneArea,
  DropZoneBg
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/webcam/component.tsx                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useState, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let Resizable;
module.link("re-resizable", {
  default(v) {
    Resizable = v;
  }
}, 1);
let Draggable;
module.link("react-draggable", {
  default(v) {
    Draggable = v;
  }
}, 2);
let useVideoStreams;
module.link("/imports/ui/components/video-provider/hooks", {
  useVideoStreams(v) {
    useVideoStreams = v;
  }
}, 3);
let layoutSelect, layoutSelectInput, layoutSelectOutput, layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutSelect(v) {
    layoutSelect = v;
  },
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 4);
let LAYOUT_TYPE, ACTIONS, CAMERADOCK_POSITION;
module.link("/imports/ui/components/layout/enums", {
  LAYOUT_TYPE(v) {
    LAYOUT_TYPE = v;
  },
  ACTIONS(v) {
    ACTIONS = v;
  },
  CAMERADOCK_POSITION(v) {
    CAMERADOCK_POSITION = v;
  }
}, 5);
let CURRENT_PRESENTATION_PAGE_SUBSCRIPTION;
module.link("/imports/ui/components/whiteboard/queries", {
  CURRENT_PRESENTATION_PAGE_SUBSCRIPTION(v) {
    CURRENT_PRESENTATION_PAGE_SUBSCRIPTION = v;
  }
}, 6);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 7);
let DropAreaContainer;
module.link("./drop-areas/container", {
  default(v) {
    DropAreaContainer = v;
  }
}, 8);
let VideoProviderContainer;
module.link("/imports/ui/components/video-provider/container", {
  default(v) {
    VideoProviderContainer = v;
  }
}, 9);
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 10);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 11);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 12);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 13);
const WebcamComponent = _ref => {
  var _cameraSize$width, _cameraSize$height, _cameraDock$resizable5, _cameraDock$resizable6, _cameraDock$resizable7, _cameraDock$resizable8;
  let {
    cameraDock,
    swapLayout,
    focusedId,
    layoutContextDispatch,
    fullscreen,
    isPresenter,
    displayPresentation,
    cameraOptimalGridSize: cameraSize,
    isRTL
  } = _ref;
  const [isResizing, setIsResizing] = useState(false);
  const [isDragging, setIsDragging] = useState(false);
  const [isFullscreen, setIsFullScreen] = useState(false);
  const [resizeStart, setResizeStart] = useState({
    width: 0,
    height: 0
  });
  const [cameraMaxWidth, setCameraMaxWidth] = useState(0);
  const [draggedAtLeastOneTime, setDraggedAtLeastOneTime] = useState(false);
  const lastSize = Storage.getItem('webcamSize') || {
    width: 0,
    height: 0
  };
  const {
    height: lastHeight
  } = lastSize;
  const isCameraTopOrBottom = cameraDock.position === CAMERADOCK_POSITION.CONTENT_TOP || cameraDock.position === CAMERADOCK_POSITION.CONTENT_BOTTOM;
  const isCameraLeftOrRight = cameraDock.position === CAMERADOCK_POSITION.CONTENT_LEFT || cameraDock.position === CAMERADOCK_POSITION.CONTENT_RIGHT;
  const isCameraSidebar = cameraDock.position === CAMERADOCK_POSITION.SIDEBAR_CONTENT_BOTTOM;
  useEffect(() => {
    const handleVisibility = () => {
      if (document.hidden) {
        document.dispatchEvent(new MouseEvent('mouseup', {
          bubbles: true
        }));
      }
    };
    document.addEventListener('visibilitychange', handleVisibility);
    return () => {
      document.removeEventListener('visibilitychange', handleVisibility);
    };
  }, []);
  useEffect(() => {
    setIsFullScreen(fullscreen.group === 'webcams');
  }, [fullscreen]);
  useEffect(() => {
    const newCameraMaxWidth = isPresenter && cameraDock.presenterMaxWidth ? cameraDock.presenterMaxWidth : cameraDock.maxWidth;
    setCameraMaxWidth(newCameraMaxWidth);
    if (isCameraLeftOrRight && cameraDock.width > newCameraMaxWidth) {
      layoutContextDispatch({
        type: ACTIONS.SET_CAMERA_DOCK_SIZE,
        value: {
          width: newCameraMaxWidth,
          height: cameraDock.height,
          browserWidth: window.innerWidth,
          browserHeight: window.innerHeight
        }
      });
      Storage.setItem('webcamSize', {
        width: newCameraMaxWidth,
        height: lastHeight
      });
    }
    const cams = document.getElementById('cameraDock');
    cams === null || cams === void 0 ? void 0 : cams.setAttribute('data-position', cameraDock.position);
  }, [cameraDock.position, cameraDock.maxWidth, isPresenter, displayPresentation]);
  const handleVideoFocus = id => {
    layoutContextDispatch({
      type: ACTIONS.SET_FOCUSED_CAMERA_ID,
      value: focusedId !== id ? id : false
    });
  };
  const onResizeHandle = (deltaWidth, deltaHeight) => {
    var _cameraDock$resizable, _cameraDock$resizable2, _cameraDock$resizable3, _cameraDock$resizable4;
    if ((_cameraDock$resizable = cameraDock.resizableEdge) !== null && _cameraDock$resizable !== void 0 && _cameraDock$resizable.top || (_cameraDock$resizable2 = cameraDock.resizableEdge) !== null && _cameraDock$resizable2 !== void 0 && _cameraDock$resizable2.bottom) {
      layoutContextDispatch({
        type: ACTIONS.SET_CAMERA_DOCK_SIZE,
        value: {
          width: cameraDock.width,
          height: resizeStart.height + deltaHeight,
          browserWidth: window.innerWidth,
          browserHeight: window.innerHeight
        }
      });
    }
    if ((_cameraDock$resizable3 = cameraDock.resizableEdge) !== null && _cameraDock$resizable3 !== void 0 && _cameraDock$resizable3.left || (_cameraDock$resizable4 = cameraDock.resizableEdge) !== null && _cameraDock$resizable4 !== void 0 && _cameraDock$resizable4.right) {
      layoutContextDispatch({
        type: ACTIONS.SET_CAMERA_DOCK_SIZE,
        value: {
          width: resizeStart.width + deltaWidth,
          height: cameraDock.height,
          browserWidth: window.innerWidth,
          browserHeight: window.innerHeight
        }
      });
    }
  };
  const handleWebcamDragStart = () => {
    setIsDragging(true);
    document.body.style.overflow = 'hidden';
    layoutContextDispatch({
      type: ACTIONS.SET_CAMERA_DOCK_IS_DRAGGING,
      value: true
    });
  };
  const handleWebcamDragStop = e => {
    setIsDragging(false);
    setDraggedAtLeastOneTime(false);
    document.body.style.overflow = 'auto';
    const dropAreaId = e.target.id;
    if (Object.values(CAMERADOCK_POSITION).includes(dropAreaId) && draggedAtLeastOneTime) {
      const layout = document.getElementById('layout');
      layout === null || layout === void 0 ? void 0 : layout.setAttribute('data-cam-position', dropAreaId);
      layoutContextDispatch({
        type: ACTIONS.SET_CAMERA_DOCK_POSITION,
        value: dropAreaId
      });
    }
    layoutContextDispatch({
      type: ACTIONS.SET_CAMERA_DOCK_IS_DRAGGING,
      value: false
    });
  };
  const draggableOffset = {
    left: isDragging && (isCameraTopOrBottom || isCameraSidebar) ? (cameraDock.width - ((_cameraSize$width = cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.width) !== null && _cameraSize$width !== void 0 ? _cameraSize$width : 0)) / 2 : 0,
    top: isDragging && isCameraLeftOrRight ? (cameraDock.height - ((_cameraSize$height = cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.height) !== null && _cameraSize$height !== void 0 ? _cameraSize$height : 0)) / 2 : 0
  };
  if (isRTL) {
    draggableOffset.left *= -1;
  }
  const isIphone = !!navigator.userAgent.match(/iPhone/i);
  const mobileWidth = "".concat(isDragging ? cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.width : cameraDock.width, "pt");
  const mobileHeight = "".concat(isDragging ? cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.height : cameraDock.height, "pt");
  const isDesktopWidth = isDragging ? cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.width : cameraDock.width;
  const isDesktopHeight = isDragging ? cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.height : cameraDock.height;
  const camOpacity = isDragging ? 0.5 : undefined;
  return /*#__PURE__*/React.createElement(React.Fragment, null, isDragging ? /*#__PURE__*/React.createElement(DropAreaContainer, null) : null, /*#__PURE__*/React.createElement(Styled.ResizableWrapper, {
    $horizontal: cameraDock.position === CAMERADOCK_POSITION.CONTENT_TOP || cameraDock.position === CAMERADOCK_POSITION.CONTENT_BOTTOM,
    $vertical: cameraDock.position === CAMERADOCK_POSITION.CONTENT_LEFT || cameraDock.position === CAMERADOCK_POSITION.CONTENT_RIGHT
  }, /*#__PURE__*/React.createElement(Draggable, {
    handle: "video",
    bounds: "html",
    onStart: handleWebcamDragStart,
    onDrag: () => {
      if (!draggedAtLeastOneTime) {
        setDraggedAtLeastOneTime(true);
      }
    },
    onStop: handleWebcamDragStop,
    onMouseDown: cameraDock.isDraggable ? e => e.preventDefault() : undefined,
    disabled: !cameraDock.isDraggable || isResizing || isFullscreen,
    position: {
      x: cameraDock.left - cameraDock.right + draggableOffset.left,
      y: cameraDock.top + draggableOffset.top
    }
  }, /*#__PURE__*/React.createElement(Resizable, {
    minWidth: isDragging ? cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.width : cameraDock.minWidth,
    minHeight: isDragging ? cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.height : cameraDock.minHeight,
    maxWidth: isDragging ? cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.width : cameraMaxWidth,
    maxHeight: isDragging ? cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.height : cameraDock.maxHeight,
    size: {
      width: isDragging ? cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.width : cameraDock.width,
      height: isDragging ? cameraSize === null || cameraSize === void 0 ? void 0 : cameraSize.height : cameraDock.height
    },
    onResizeStart: () => {
      setIsResizing(true);
      setResizeStart({
        width: cameraDock.width,
        height: cameraDock.height
      });
      onResizeHandle(cameraDock.width, cameraDock.height);
      layoutContextDispatch({
        type: ACTIONS.SET_CAMERA_DOCK_IS_RESIZING,
        value: true
      });
    },
    onResize: (_, __, ___, d) => {
      onResizeHandle(d.width, d.height);
    },
    onResizeStop: () => {
      setResizeStart({
        width: 0,
        height: 0
      });
      setTimeout(() => setIsResizing(false), 500);
      layoutContextDispatch({
        type: ACTIONS.SET_CAMERA_DOCK_IS_RESIZING,
        value: false
      });
    },
    enable: {
      top: !isFullscreen && !isDragging && !swapLayout && (cameraDock === null || cameraDock === void 0 ? void 0 : (_cameraDock$resizable5 = cameraDock.resizableEdge) === null || _cameraDock$resizable5 === void 0 ? void 0 : _cameraDock$resizable5.top),
      bottom: !isFullscreen && !isDragging && !swapLayout && (cameraDock === null || cameraDock === void 0 ? void 0 : (_cameraDock$resizable6 = cameraDock.resizableEdge) === null || _cameraDock$resizable6 === void 0 ? void 0 : _cameraDock$resizable6.bottom),
      left: !isFullscreen && !isDragging && !swapLayout && (cameraDock === null || cameraDock === void 0 ? void 0 : (_cameraDock$resizable7 = cameraDock.resizableEdge) === null || _cameraDock$resizable7 === void 0 ? void 0 : _cameraDock$resizable7.left),
      right: !isFullscreen && !isDragging && !swapLayout && (cameraDock === null || cameraDock === void 0 ? void 0 : (_cameraDock$resizable8 = cameraDock.resizableEdge) === null || _cameraDock$resizable8 === void 0 ? void 0 : _cameraDock$resizable8.right),
      topLeft: false,
      topRight: false,
      bottomLeft: false,
      bottomRight: false
    },
    style: {
      position: 'absolute',
      zIndex: isCameraSidebar && !isDragging ? 0 : cameraDock === null || cameraDock === void 0 ? void 0 : cameraDock.zIndex
    }
  }, /*#__PURE__*/React.createElement(Styled.Draggable, {
    $isDraggable: !!cameraDock.isDraggable && !isFullscreen && !isDragging,
    $isDragging: isDragging,
    id: "cameraDock",
    role: "region",
    draggable: cameraDock.isDraggable && !isFullscreen ? 'true' : undefined,
    style: {
      width: isIphone ? mobileWidth : isDesktopWidth,
      height: isIphone ? mobileHeight : isDesktopHeight,
      opacity: camOpacity,
      background: 'none'
    }
  }, /*#__PURE__*/React.createElement(VideoProviderContainer, {
    swapLayout,
    cameraDock,
    focusedId,
    handleVideoFocus
  }))))));
};
const WebcamContainer = _ref2 => {
  var _currentUserData$pres;
  let {
    isLayoutSwapped,
    layoutType
  } = _ref2;
  const fullscreen = layoutSelect(i => i.fullscreen);
  const isRTL = layoutSelect(i => i.isRTL);
  const cameraDockInput = layoutSelectInput(i => i.cameraDock);
  const presentation = layoutSelectOutput(i => i.presentation);
  const cameraDock = layoutSelectOutput(i => i.cameraDock);
  const layoutContextDispatch = layoutDispatch();
  const {
    data: presentationPageData
  } = useDeduplicatedSubscription(CURRENT_PRESENTATION_PAGE_SUBSCRIPTION);
  const presentationPage = (presentationPageData === null || presentationPageData === void 0 ? void 0 : presentationPageData.pres_page_curr[0]) || {};
  const hasPresentation = !!(presentationPage !== null && presentationPage !== void 0 && presentationPage.presentationId);
  const swapLayout = !hasPresentation || isLayoutSwapped;
  let floatingOverlay = false;
  let hideOverlay = false;
  if (swapLayout) {
    floatingOverlay = true;
    hideOverlay = true;
  }
  const {
    cameraOptimalGridSize
  } = cameraDockInput;
  const {
    display: displayPresentation
  } = presentation;
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    presenter: user.presenter
  }));
  const isGridEnabled = layoutType === LAYOUT_TYPE.VIDEO_FOCUS;
  const {
    streams: videoUsers,
    gridUsers
  } = useVideoStreams();
  let usersVideo;
  if (gridUsers.length > 0) {
    usersVideo = [...videoUsers, ...gridUsers];
  } else {
    usersVideo = videoUsers;
  }
  const audioModalIsOpen = useStorageKey('audioModalIsOpen');
  return !audioModalIsOpen && (usersVideo.length > 0 || isGridEnabled) ? /*#__PURE__*/React.createElement(WebcamComponent, {
    swapLayout,
    usersVideo,
    focusedId: cameraDock.focusedId,
    cameraDock,
    cameraOptimalGridSize,
    layoutContextDispatch,
    fullscreen,
    isPresenter: (_currentUserData$pres = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.presenter) !== null && _currentUserData$pres !== void 0 ? _currentUserData$pres : false,
    displayPresentation,
    isRTL,
    floatingOverlay,
    hideOverlay
  }) : null;
};
module.exportDefault(WebcamContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/webcam/styles.ts                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  }
}, 0);
const Draggable = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n"])), _ref => {
  let {
    $isDraggable
  } = _ref;
  return $isDraggable && css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n    & > video {\n      cursor: grabbing;\n    }\n  "])));
}, _ref2 => {
  let {
    $isDragging
  } = _ref2;
  return $isDragging && css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n    background-color: rgba(200, 200, 200, 0.5);\n  "])));
});
const ResizableWrapper = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  ", "\n\n  ", "\n"])), _ref3 => {
  let {
    $horizontal
  } = _ref3;
  return $horizontal && css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n    & > div span div {\n      &:hover {\n        background-color: rgba(255, 255, 255, .3);\n      }\n      width: 100% !important;\n    }\n  "])));
}, _ref4 => {
  let {
    $vertical
  } = _ref4;
  return $vertical && css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n    & > div span div {\n      &:hover {\n        background-color: rgba(255, 255, 255, .3);\n      }\n      height: 100% !important;\n    }\n  "])));
});
module.exportDefault({
  Draggable,
  ResizableWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"about":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/about/component.jsx                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, injectIntl, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 2);
const intlMessages = defineMessages({
  title: {
    id: 'app.about.title',
    description: 'About title label'
  },
  version: {
    id: 'app.about.version',
    description: 'Client version label'
  },
  copyright: {
    id: 'app.about.copyright',
    defaultMessage: new Date().getFullYear(),
    description: 'Client copyright label'
  },
  confirmLabel: {
    id: 'app.about.confirmLabel',
    description: 'Confirmation button label'
  },
  confirmDesc: {
    id: 'app.about.confirmDesc',
    description: 'adds descriptive context to confirmLabel'
  },
  dismissLabel: {
    id: 'app.about.dismissLabel',
    description: 'Dismiss button label'
  },
  dismissDesc: {
    id: 'app.about.dismissDesc',
    description: 'adds descriptive context to dissmissLabel'
  },
  version_label: {
    id: 'app.about.version_label',
    description: 'label for version bbb'
  }
});
const AboutComponent = props => {
  const {
    settings,
    isOpen,
    onRequestClose,
    priority
  } = props;
  const intl = useIntl();
  const {
    html5ClientBuild,
    copyright,
    bbbServerVersion,
    displayBbbServerVersion
  } = settings;
  const showLabelVersion = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("br", null), "".concat(intl.formatMessage(intlMessages.version_label), " ").concat(bbbServerVersion));
  return /*#__PURE__*/React.createElement(ModalSimple, {
    "data-test": "aboutModalTitleLabel",
    title: intl.formatMessage(intlMessages.title),
    dismiss: {
      label: intl.formatMessage(intlMessages.dismissLabel),
      description: intl.formatMessage(intlMessages.dismissDesc)
    },
    isOpen,
    onRequestClose,
    priority
  }, "".concat(intl.formatMessage(intlMessages.copyright), " ").concat(copyright), /*#__PURE__*/React.createElement("br", null), "".concat(intl.formatMessage(intlMessages.version), " ").concat(html5ClientBuild), displayBbbServerVersion ? showLabelVersion() : null);
};
module.exportDefault(injectIntl(AboutComponent));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/about/container.jsx                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["children"];
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 1);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let AboutComponent;
module.link("./component", {
  default(v) {
    AboutComponent = v;
  }
}, 1);
const AboutContainer = props => {
  const {
      children
    } = props,
    rest = _objectWithoutProperties(props, _excluded);
  return /*#__PURE__*/React.createElement(AboutComponent, _extends({}, rest, {
    settings: window.meetingClientSettings.public.app
  }), children);
};
module.exportDefault(AboutContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"activity-check":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/activity-check/component.jsx                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  }
}, 2);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 3);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 4);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 5);
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  responseDelay: PropTypes.number.isRequired
};
const intlMessages = defineMessages({
  activityCheckTitle: {
    id: 'app.user.activityCheck',
    description: 'Title for activity check modal'
  },
  activityCheckLabel: {
    id: 'app.user.activityCheck.label',
    description: 'Label for activity check modal'
  },
  activityCheckButton: {
    id: 'app.user.activityCheck.check',
    description: 'Check button for activity modal'
  }
});
class ActivityCheck extends Component {
  constructor(props) {
    super(props);
    const {
      responseDelay
    } = this.props;
    this.state = {
      responseDelay
    };
    this.stopRemainingTime = this.stopRemainingTime.bind(this);
    this.updateRemainingTime = this.updateRemainingTime.bind(this);
    this.playAudioAlert = this.playAudioAlert.bind(this);
  }
  componentDidMount() {
    this.playAudioAlert();
    this.interval = this.updateRemainingTime();
  }
  componentDidUpdate() {
    this.stopRemainingTime();
    this.interval = this.updateRemainingTime();
  }
  componentWillUnmount() {
    this.stopRemainingTime();
  }
  updateRemainingTime() {
    const {
      responseDelay
    } = this.state;
    return setInterval(() => {
      if (responseDelay === 0) return;
      const remainingTime = responseDelay - 1;
      this.setState({
        responseDelay: remainingTime
      });
    }, 1000);
  }
  stopRemainingTime() {
    clearInterval(this.interval);
  }
  playAudioAlert() {
    this.alert = new Audio("".concat(window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId, "/resources/sounds/notify.mp3"));
    this.alert.addEventListener('ended', () => {
      this.alert.src = null;
    });
    this.alert.play();
  }
  render() {
    const {
      intl,
      userActivitySign
    } = this.props;
    const {
      responseDelay
    } = this.state;
    return /*#__PURE__*/React.createElement(ModalSimple, {
      hideBorder: true,
      onRequestClose: () => userActivitySign(),
      shouldCloseOnOverlayClick: false,
      shouldShowCloseButton: false,
      priority: "high",
      isOpen: true
    }, /*#__PURE__*/React.createElement(Styled.ActivityModalContent, null, /*#__PURE__*/React.createElement("h1", null, intl.formatMessage(intlMessages.activityCheckTitle)), /*#__PURE__*/React.createElement("p", null, intl.formatMessage(intlMessages.activityCheckLabel, {
      0: responseDelay
    })), /*#__PURE__*/React.createElement(Button, {
      color: "primary",
      disabled: responseDelay <= 0,
      label: intl.formatMessage(intlMessages.activityCheckButton),
      onClick: () => userActivitySign(),
      role: "button",
      size: "lg"
    })));
  }
}
ActivityCheck.propTypes = propTypes;
module.exportDefault(ActivityCheck);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/activity-check/container.jsx                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let injectIntl;
module.link("react-intl", {
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 2);
let ActivityCheck;
module.link("./component", {
  default(v) {
    ActivityCheck = v;
  }
}, 3);
let USER_SEND_ACTIVITY_SIGN;
module.link("./mutations", {
  USER_SEND_ACTIVITY_SIGN(v) {
    USER_SEND_ACTIVITY_SIGN = v;
  }
}, 4);
const ActivityCheckContainer = props => {
  const [userActivitySign] = useMutation(USER_SEND_ACTIVITY_SIGN);
  return /*#__PURE__*/React.createElement(ActivityCheck, _extends({
    userActivitySign: userActivitySign
  }, props));
};
module.exportDefault(injectIntl(ActivityCheckContainer));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/activity-check/mutations.jsx                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  USER_SEND_ACTIVITY_SIGN: () => USER_SEND_ACTIVITY_SIGN
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const USER_SEND_ACTIVITY_SIGN = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation UserSendActivitySign {\n    userSendActivitySign\n  }\n"])));
module.exportDefault({
  USER_SEND_ACTIVITY_SIGN
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/activity-check/styles.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let fontSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeLarge(v) {
    fontSizeLarge = v;
  }
}, 1);
const ActivityModalContent = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  flex-direction: column;\n  flex-grow: 1;\n  display: flex;\n  justify-content: center;\n  padding: 0;\n  margin-top: auto;\n  margin-bottom: auto;\n  padding: 0.5rem;\n  text-align: center;\n\n  & > p {\n    font-size: ", ";\n    margin: 0.5em 0;\n  }\n"])), fontSizeLarge);
module.exportDefault({
  ActivityModalContent
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"banner-bar":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/banner-bar/component.jsx                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let NotificationsBar;
module.link("/imports/ui/components/notifications-bar/component", {
  default(v) {
    NotificationsBar = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let ACTIONS;
module.link("../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 4);
const BannerBar = _ref => {
  let {
    text,
    color,
    hasBanner: propsHasBanner,
    layoutContextDispatch
  } = _ref;
  useEffect(() => {
    const localHasBanner = !!text;
    if (localHasBanner !== propsHasBanner) {
      layoutContextDispatch({
        type: ACTIONS.SET_HAS_BANNER_BAR,
        value: localHasBanner
      });
    }
  }, [text, propsHasBanner]);
  if (!text) return null;
  return /*#__PURE__*/React.createElement(NotificationsBar, {
    color: color
  }, /*#__PURE__*/React.createElement(Styled.BannerTextColor, null, text));
};
BannerBar.propTypes = {
  text: PropTypes.string.isRequired,
  color: PropTypes.string.isRequired
};
module.exportDefault(BannerBar);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/banner-bar/container.jsx                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let BannerComponent;
module.link("./component", {
  default(v) {
    BannerComponent = v;
  }
}, 1);
let layoutSelectInput, layoutDispatch;
module.link("../layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let useStorageKey;
module.link("../../services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 3);
const BannerContainer = props => {
  const bannerBar = layoutSelectInput(i => i.bannerBar);
  const {
    hasBanner
  } = bannerBar;
  const layoutContextDispatch = layoutDispatch();
  const color = useStorageKey('bannerColor') || '#0F70D7';
  const text = useStorageKey('bannerText') || '';
  return /*#__PURE__*/React.createElement(BannerComponent, _objectSpread({
    hasBanner,
    layoutContextDispatch,
    color,
    text
  }, props));
};
module.exportDefault(BannerContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/banner-bar/styles.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let TextElipsis;
module.link("/imports/ui/stylesheets/styled-components/placeholders", {
  TextElipsis(v) {
    TextElipsis = v;
  }
}, 1);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 2);
const BannerTextColor = styled(TextElipsis)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  color: ", ";\n"])), colorWhite);
module.exportDefault({
  BannerTextColor
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"click-outside":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/click-outside/component.jsx                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
const propTypes = {
  onClick: PropTypes.func.isRequired
};
class ClickOutside extends PureComponent {
  constructor(props) {
    super(props);
    this.handleClick = e => {
      const {
        onClick
      } = this.props;
      const isOutside = this.childrenRefs.every(ref => !ref.current.contains(e.target));
      if (isOutside) {
        onClick();
      }
    };
    this.childrenRefs = React.Children.map(this.props.children, () => /*#__PURE__*/React.createRef());
  }
  componentDidMount() {
    document.addEventListener("click", this.handleClick);
  }
  componentWillUnmount() {
    document.removeEventListener("click", this.handleClick);
  }
  render() {
    return React.Children.map(this.props.children, (element, idx) => {
      return /*#__PURE__*/React.cloneElement(element, {
        ref: this.childrenRefs[idx]
      });
    });
  }
}
ClickOutside.propTypes = propTypes;
module.exportDefault(ClickOutside);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"connection-manager":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/connection-manager/component.tsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let ApolloClient, ApolloProvider, InMemoryCache, ApolloLink;
module.link("@apollo/client", {
  ApolloClient(v) {
    ApolloClient = v;
  },
  ApolloProvider(v) {
    ApolloProvider = v;
  },
  InMemoryCache(v) {
    InMemoryCache = v;
  },
  ApolloLink(v) {
    ApolloLink = v;
  }
}, 0);
let GraphQLWsLink;
module.link("@apollo/client/link/subscriptions", {
  GraphQLWsLink(v) {
    GraphQLWsLink = v;
  }
}, 1);
let createClient;
module.link("graphql-ws", {
  createClient(v) {
    createClient = v;
  }
}, 2);
let onError;
module.link("@apollo/client/link/error", {
  onError(v) {
    onError = v;
  }
}, 3);
let React, useContext, useEffect, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 4);
let LoadingContext;
module.link("/imports/ui/components/common/loading-screen/loading-screen-HOC/component", {
  LoadingContext(v) {
    LoadingContext = v;
  }
}, 5);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 6);
let apolloContextHolder;
module.link("../../core/graphql/apolloContextHolder/apolloContextHolder", {
  default(v) {
    apolloContextHolder = v;
  }
}, 7);
let connectionStatus;
module.link("../../core/graphql/singletons/connectionStatus", {
  default(v) {
    connectionStatus = v;
  }
}, 8);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 9);
let BBBWeb;
module.link("/imports/api/bbb-web-api", {
  default(v) {
    BBBWeb = v;
  }
}, 10);
const DEFAULT_MAX_MUTATION_PAYLOAD_SIZE = 10485760; // 10MB
const getMaxMutationPayloadSize = () => {
  var _window$meetingClient, _window$meetingClient2, _window$meetingClient3, _window$meetingClient4;
  return (_window$meetingClient = (_window$meetingClient2 = window.meetingClientSettings) === null || _window$meetingClient2 === void 0 ? void 0 : (_window$meetingClient3 = _window$meetingClient2.public) === null || _window$meetingClient3 === void 0 ? void 0 : (_window$meetingClient4 = _window$meetingClient3.app) === null || _window$meetingClient4 === void 0 ? void 0 : _window$meetingClient4.maxMutationPayloadSize) !== null && _window$meetingClient !== void 0 ? _window$meetingClient : DEFAULT_MAX_MUTATION_PAYLOAD_SIZE;
};
const estimatePayloadSize = variables => {
  const variablesAsString = JSON.stringify(variables);
  const variablesAsBlob = new Blob([variablesAsString]);
  return variablesAsBlob.size;
};
const payloadSizeCheckLink = new ApolloLink((operation, forward) => {
  if (operation.query.definitions.some(def => 'operation' in def && def.operation === 'mutation')) {
    const size = estimatePayloadSize(operation.variables);
    const maxPayloadSize = getMaxMutationPayloadSize();
    if (size > maxPayloadSize) {
      const errorMsg = "Mutation payload is too large: ".concat(size, " bytes. ").concat(maxPayloadSize, " maximum allowed.");
      logger.warn(errorMsg);
      return null;
    }
  }
  // logger.debug(`Valid ${operation.operationName} payload. Following with the query.`);
  return forward(operation);
});
const errorLink = onError(_ref => {
  let {
    graphQLErrors,
    networkError
  } = _ref;
  if (graphQLErrors) {
    graphQLErrors.forEach(_ref2 => {
      let {
        message
      } = _ref2;
      logger.error("[GraphQL error]: Message: ".concat(message));
    });
  }
  if (networkError) {
    logger.error("[Network error]: ".concat(networkError));
  }
});
const ConnectionManager = _ref3 => {
  let {
    children
  } = _ref3;
  const [graphqlUrlApolloClient, setApolloClient] = React.useState(null);
  const [graphqlUrl, setGraphqlUrl] = React.useState('');
  const loadingContextInfo = useContext(LoadingContext);
  const numberOfAttempts = useRef(20);
  const [errorCounts, setErrorCounts] = React.useState(0);
  const activeSocket = useRef();
  const tsLastMessageRef = useRef(0);
  const tsLastPingMessageRef = useRef(0);
  const boundary = useRef(15_000);
  const [terminalError, setTerminalError] = React.useState('');
  useEffect(() => {
    BBBWeb.index().then(_ref4 => {
      let {
        data
      } = _ref4;
      setGraphqlUrl(data.graphqlWebsocketUrl);
    }).catch(error => {
      loadingContextInfo.setLoading(false, '');
      throw new Error('Error fetching GraphQL URL: '.concat(error.message || ''));
    });
    logger.info('Fetching GraphQL URL');
    loadingContextInfo.setLoading(true, '1/2');
  }, []);
  useEffect(() => {
    const interval = setInterval(() => {
      const tsNow = Date.now();
      if (tsLastMessageRef.current !== 0 && tsLastPingMessageRef.current !== 0) {
        if (tsNow - tsLastMessageRef.current > boundary.current && connectionStatus.getServerIsResponding()) {
          connectionStatus.setServerIsResponding(false);
        } else if (tsNow - tsLastPingMessageRef.current > boundary.current && connectionStatus.getPingIsComing()) {
          connectionStatus.setPingIsComing(false);
        }
        if (tsNow - tsLastMessageRef.current < boundary.current && !connectionStatus.getServerIsResponding()) {
          connectionStatus.setServerIsResponding(true);
        } else if (tsNow - tsLastPingMessageRef.current < boundary.current && !connectionStatus.getPingIsComing()) {
          connectionStatus.setPingIsComing(true);
        }
      }
    }, 5_000);
    return () => clearInterval(interval);
  }, []);
  useEffect(() => {
    if (errorCounts === numberOfAttempts.current) {
      throw new Error('Error connecting to server, retrying attempts exceeded');
    }
  }, [errorCounts]);
  useEffect(() => {
    if (terminalError) {
      throw new Error(terminalError);
    }
  }, [terminalError]);
  useEffect(() => {
    logger.info('Connecting to GraphQL server');
    loadingContextInfo.setLoading(true, '2/2');
    if (graphqlUrl) {
      const urlParams = new URLSearchParams(window.location.search);
      const sessionToken = urlParams.get('sessionToken');
      if (!sessionToken) {
        loadingContextInfo.setLoading(false, '');
        throw new Error('Missing session token');
      }
      sessionStorage.setItem('sessionToken', sessionToken);
      const clientSessionUUID = sessionStorage.getItem('clientSessionUUID');
      const {
        isMobile
      } = deviceInfo;
      let wsLink;
      try {
        const subscription = createClient({
          url: graphqlUrl,
          retryAttempts: numberOfAttempts.current,
          keepAlive: 99999999999,
          retryWait: async () => {
            return new Promise(res => {
              setTimeout(() => {
                res();
              }, 10_000);
            });
          },
          shouldRetry: error => {
            // @ts-ignore - error is not a string
            if (error.code === 4403) {
              loadingContextInfo.setLoading(false, '');
              setTerminalError('Session token is invalid');
              return false;
            }
            if (!apolloContextHolder.getShouldRetry()) return false;
            return true;
          },
          connectionParams: {
            headers: {
              'X-Session-Token': sessionToken,
              'X-ClientSessionUUID': clientSessionUUID,
              'X-ClientType': 'HTML5',
              'X-ClientIsMobile': isMobile ? 'true' : 'false'
            }
          },
          on: {
            error: error => {
              logger.error("Error: on subscription to server: ".concat(error));
              loadingContextInfo.setLoading(false, '');
              connectionStatus.setConnectedStatus(false);
              setErrorCounts(prev => prev + 1);
            },
            closed: () => {
              connectionStatus.setConnectedStatus(false);
            },
            connected: socket => {
              activeSocket.current = socket;
              connectionStatus.setConnectedStatus(true);
            },
            connecting: () => {
              connectionStatus.setConnectedStatus(false);
            },
            message: message => {
              if (message.type === 'ping') {
                tsLastPingMessageRef.current = Date.now();
              }
              tsLastMessageRef.current = Date.now();
            }
          }
        });
        const graphWsLink = new GraphQLWsLink(subscription);
        wsLink = ApolloLink.from([payloadSizeCheckLink, errorLink, graphWsLink]);
        wsLink.setOnError(error => {
          loadingContextInfo.setLoading(false, '');
          throw new Error('Error: on apollo connection'.concat(JSON.stringify(error) || ''));
        });
        apolloContextHolder.setLink(subscription);
      } catch (error) {
        loadingContextInfo.setLoading(false, '');
        throw new Error('Error creating WebSocketLink: '.concat(JSON.stringify(error) || ''));
      }
      let client;
      try {
        client = new ApolloClient({
          link: wsLink,
          cache: new InMemoryCache(),
          connectToDevTools: true
        });
        setApolloClient(client);
        apolloContextHolder.setClient(client);
      } catch (error) {
        loadingContextInfo.setLoading(false, '');
        throw new Error('Error creating Apollo Client: '.concat(JSON.stringify(error) || ''));
      }
    }
  }, [graphqlUrl]);
  return graphqlUrlApolloClient ? /*#__PURE__*/React.createElement(ApolloProvider, {
    client: graphqlUrlApolloClient
  }, children) : null;
};
module.exportDefault(ConnectionManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"context-providers":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/context-providers/component.jsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let LayoutContextProvider;
module.link("/imports/ui/components/layout/context", {
  LayoutContextProvider(v) {
    LayoutContextProvider = v;
  }
}, 1);
let CustomBackgroundsProvider;
module.link("/imports/ui/components/video-preview/virtual-background/context", {
  CustomBackgroundsProvider(v) {
    CustomBackgroundsProvider = v;
  }
}, 2);
let PluginsContextProvider;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContextProvider(v) {
    PluginsContextProvider = v;
  }
}, 3);
let CurrentUserProvider;
module.link("../../core/providers/current-user", {
  default(v) {
    CurrentUserProvider = v;
  }
}, 4);
const providersList = [LayoutContextProvider, CustomBackgroundsProvider, PluginsContextProvider, CurrentUserProvider];
const ContextProvidersComponent = props => providersList.reduce((acc, Component) => /*#__PURE__*/React.createElement(Component, null, acc), props.children);
module.exportDefault(ContextProvidersComponent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"debug-window":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/debug-window/component.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let Draggable;
module.link("react-draggable", {
  default(v) {
    Draggable = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let ChatLogger;
module.link("/imports/ui/components/chat/chat-logger/ChatLogger", {
  default(v) {
    ChatLogger = v;
  }
}, 4);
const intlMessages = defineMessages({
  modalClose: {
    id: 'app.modal.close',
    description: 'Close'
  },
  modalCloseDescription: {
    id: 'app.modal.close.description',
    description: 'Disregards changes and closes the modal'
  },
  debugWindowTitle: {
    id: 'app.debugWindow.windowTitle',
    description: 'Debug window title'
  },
  userAgentLabel: {
    id: 'app.debugWindow.form.userAgentLabel',
    description: 'User agent form label'
  },
  copyButtonLabel: {
    id: 'app.debugWindow.form.button.copy',
    description: 'User agent form copy button'
  },
  chatLoggerLabel: {
    id: 'app.debugWindow.form.chatLoggerLabel',
    description: 'Chat logger level form label'
  },
  applyButtonLabel: {
    id: 'app.debugWindow.form.button.apply',
    description: 'Chat logger level form apply button'
  },
  on: {
    id: 'app.switch.onLabel',
    description: 'label for toggle switch on state'
  },
  off: {
    id: 'app.switch.offLabel',
    description: 'label for toggle switch off state'
  }
});
class DebugWindow extends Component {
  constructor(props) {
    super(props);
    this.state = {
      showDebugWindow: false,
      logLevel: ChatLogger.getLogLevel()
    };
  }
  componentDidMount() {
    const DEBUG_WINDOW_ENABLED = window.meetingClientSettings.public.app.enableDebugWindow;
    const SHOW_DEBUG_WINDOW_ACCESSKEY = window.meetingClientSettings.public.app.shortcuts.openDebugWindow.accesskey;
    document.addEventListener('keyup', event => {
      const {
        key,
        code
      } = event;
      const eventKey = key === null || key === void 0 ? void 0 : key.toUpperCase();
      const eventCode = code;
      if (DEBUG_WINDOW_ENABLED && event !== null && event !== void 0 && event.altKey && (eventKey === SHOW_DEBUG_WINDOW_ACCESSKEY || eventCode === "Key".concat(SHOW_DEBUG_WINDOW_ACCESSKEY))) {
        this.debugWindowToggle();
      }
    });
  }
  setShowDebugWindow(showDebugWindow) {
    this.setState({
      showDebugWindow
    });
  }
  debugWindowToggle() {
    const {
      showDebugWindow
    } = this.state;
    if (showDebugWindow) {
      this.setShowDebugWindow(false);
    } else {
      this.setShowDebugWindow(true);
    }
  }
  displaySettingsStatus(status) {
    const {
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement(Styled.ToggleLabel, null, status ? intl.formatMessage(intlMessages.on) : intl.formatMessage(intlMessages.off));
  }
  render() {
    const {
      showDebugWindow,
      logLevel
    } = this.state;
    const chatLoggerLevelsNames = Object.keys(ChatLogger.levels);
    const DEBUG_WINDOW_ENABLED = window.meetingClientSettings.public.app.enableDebugWindow;
    if (!DEBUG_WINDOW_ENABLED || !showDebugWindow) return false;
    const {
      intl
    } = this.props;
    return /*#__PURE__*/React.createElement(Draggable, {
      handle: "#debugWindowHeader",
      bounds: "body",
      enableUserSelectHack: false
    }, /*#__PURE__*/React.createElement(Styled.DebugWindowWrapper, {
      minWidth: window.innerWidth * 0.2,
      minHeight: window.innerHeight * 0.2,
      enable: {
        top: false,
        bottom: false,
        left: false,
        right: false,
        topLeft: false,
        topRight: false,
        bottomLeft: false,
        bottomRight: true
      }
    }, /*#__PURE__*/React.createElement(Styled.DebugWindow, null, /*#__PURE__*/React.createElement(Styled.Header, {
      id: "debugWindowHeader"
    }, /*#__PURE__*/React.createElement(Styled.MoveIcon, {
      iconName: "fit_to_screen"
    }), /*#__PURE__*/React.createElement(Styled.Title, null, intl.formatMessage(intlMessages.debugWindowTitle)), /*#__PURE__*/React.createElement(Styled.CloseButton, {
      label: intl.formatMessage(intlMessages.modalClose),
      "aria-label": "".concat(intl.formatMessage(intlMessages.modalClose), " ").concat(intl.formatMessage(intlMessages.debugWindowTitle)),
      icon: "close",
      circle: true,
      hideLabel: true,
      onClick: () => this.setShowDebugWindow(false)
    })), /*#__PURE__*/React.createElement(Styled.DebugWindowContent, null, /*#__PURE__*/React.createElement(Styled.Table, null, /*#__PURE__*/React.createElement(Styled.TableRow, null, /*#__PURE__*/React.createElement(Styled.TableCell, null, "".concat(intl.formatMessage(intlMessages.userAgentLabel), ":")), /*#__PURE__*/React.createElement(Styled.TableCell, null, /*#__PURE__*/React.createElement(Styled.UserAgentInput, {
      id: "debugModalUserAgent",
      type: "text",
      value: window.navigator.userAgent,
      readOnly: true
    }), /*#__PURE__*/React.createElement("button", {
      type: "button",
      onClick: () => navigator.clipboard.writeText(window.navigator.userAgent)
    }, "".concat(intl.formatMessage(intlMessages.copyButtonLabel))))), /*#__PURE__*/React.createElement(Styled.TableRow, null, /*#__PURE__*/React.createElement(Styled.TableCell, null, "".concat(intl.formatMessage(intlMessages.chatLoggerLabel), ":")), /*#__PURE__*/React.createElement(Styled.TableCell, null, /*#__PURE__*/React.createElement(Styled.CellContent, null, /*#__PURE__*/React.createElement("select", {
      style: {
        marginRight: '1rem'
      },
      onChange: ev => {
        this.setState({
          logLevel: ev.target.value
        });
      }
    }, chatLoggerLevelsNames.map((i, index) => {
      const idx = index;
      return /*#__PURE__*/React.createElement("option", {
        key: "".concat(i, "-").concat(idx)
      }, i);
    })), /*#__PURE__*/React.createElement("button", {
      type: "button",
      disabled: logLevel === ChatLogger.getLogLevel(),
      onClick: () => {
        ChatLogger.setLogLevel(logLevel);
        this.setState({
          logLevel: ChatLogger.getLogLevel()
        });
      }
    }, "".concat(intl.formatMessage(intlMessages.applyButtonLabel)))))))))));
  }
}
module.exportDefault(injectIntl(DebugWindow));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/debug-window/styles.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  }
}, 1);
let Resizable;
module.link("re-resizable", {
  default(v) {
    Resizable = v;
  }
}, 2);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 3);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 4);
const ToggleLabel = styled.span(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin-right: ", ";\n\n  [dir=\"rtl\"] & {\n    margin: 0 0 0 ", ";\n  }\n"])), smPaddingX, smPaddingX);
const DebugWindowWrapper = styled(Resizable)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  position: absolute !important;\n  z-index: 9;\n"])));
const DebugWindow = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  min-width: 20vw;\n  min-height: 20vh;\n  width: 100%;\n  height: 100%;\n  background-color: white;\n  border: 2px solid #06172A;\n\n  &::after {\n    content: \"\";\n    -webkit-transform: rotate(-45deg);\n    position: absolute;\n    right: 2px;\n    bottom: 8px;\n    pointer-events: none;\n    width: 14px;\n    height: 1px;\n    background: rgba(0,0,0,.5);\n  }\n\n  &::before {\n    content: \"\";\n    -webkit-transform: rotate(-45deg);\n    position: absolute;\n    right: 2px;\n    bottom: 5px;\n    pointer-events: none;\n    width: 8px;\n    height: 1px;\n    background: rgba(0,0,0,.5);\n  }\n"])));
const Header = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom: 1px solid lightgray;\n  cursor: move;\n\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n"])));
const MoveIcon = styled(Icon)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  margin: 5px;\n  color: rgba(0,0,0,.5);\n"])));
const Title = styled.div(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  font-size: 1.2rem;\n  font-weight: bold;\n"])));
const CloseButton = styled(Button)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  & > span > i {\n    font-size: 115%;\n  }\n"])));
const DebugWindowContent = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  padding: 10px;\n"])));
const Table = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  display: table;\n  width: 100%;\n"])));
const TableRow = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  display: table-row;\n"])));
const TableCell = styled.div(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  display: table-cell;\n  padding: 5px;\n  vertical-align: middle;\n"])));
const UserAgentInput = styled.input(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  margin-right: 5px;\n"])));
const AutoArrangeToggle = styled.input(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  margin-right: 5px;\n"])));
const CellContent = styled.div(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  display: flex;\n  align-items: center;\n"])));
module.exportDefault({
  ToggleLabel,
  DebugWindowWrapper,
  DebugWindow,
  Header,
  MoveIcon,
  Title,
  CloseButton,
  DebugWindowContent,
  Table,
  TableRow,
  TableCell,
  UserAgentInput,
  AutoArrangeToggle,
  CellContent
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"emoji-picker":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/emoji-picker/component.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let injectIntl;
module.link("react-intl", {
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let data;
module.link("@emoji-mart/data", {
  default(v) {
    data = v;
  }
}, 3);
let Picker;
module.link("@emoji-mart/react", {
  default(v) {
    Picker = v;
  }
}, 4);
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  onEmojiSelect: PropTypes.func.isRequired
};
const EmojiPicker = props => {
  const {
    intl,
    onEmojiSelect
  } = props;
  const i18n = {
    search: intl.formatMessage({
      id: 'app.emojiPicker.search'
    }),
    notfound: intl.formatMessage({
      id: 'app.emojiPicker.notFound'
    }),
    clear: intl.formatMessage({
      id: 'app.emojiPicker.clear'
    }),
    skintext: intl.formatMessage({
      id: 'app.emojiPicker.skintext'
    }),
    categories: {
      people: intl.formatMessage({
        id: 'app.emojiPicker.categories.people'
      }),
      nature: intl.formatMessage({
        id: 'app.emojiPicker.categories.nature'
      }),
      foods: intl.formatMessage({
        id: 'app.emojiPicker.categories.foods'
      }),
      places: intl.formatMessage({
        id: 'app.emojiPicker.categories.places'
      }),
      activity: intl.formatMessage({
        id: 'app.emojiPicker.categories.activity'
      }),
      objects: intl.formatMessage({
        id: 'app.emojiPicker.categories.objects'
      }),
      symbols: intl.formatMessage({
        id: 'app.emojiPicker.categories.symbols'
      }),
      flags: intl.formatMessage({
        id: 'app.emojiPicker.categories.flags'
      }),
      recent: intl.formatMessage({
        id: 'app.emojiPicker.categories.recent'
      }),
      search: intl.formatMessage({
        id: 'app.emojiPicker.categories.search'
      })
    },
    categorieslabel: intl.formatMessage({
      id: 'app.emojiPicker.categories.label'
    }),
    skintones: {
      1: intl.formatMessage({
        id: 'app.emojiPicker.skintones.1'
      }),
      2: intl.formatMessage({
        id: 'app.emojiPicker.skintones.2'
      }),
      3: intl.formatMessage({
        id: 'app.emojiPicker.skintones.3'
      }),
      4: intl.formatMessage({
        id: 'app.emojiPicker.skintones.4'
      }),
      5: intl.formatMessage({
        id: 'app.emojiPicker.skintones.5'
      }),
      6: intl.formatMessage({
        id: 'app.emojiPicker.skintones.6'
      })
    }
  };
  const DISABLE_EMOJIS = window.meetingClientSettings.public.chat.disableEmojis;
  const emojisToExclude = [...DISABLE_EMOJIS];
  return /*#__PURE__*/React.createElement(Picker, {
    data: data,
    onEmojiSelect: (emojiObject, event) => onEmojiSelect(emojiObject, event),
    emojiSize: 24,
    i18n: i18n,
    previewPosition: "none",
    skinTonePosition: "none",
    theme: "light",
    dynamicWidth: true,
    exceptEmojis: emojisToExclude
  });
};
EmojiPicker.propTypes = propTypes;
module.exportDefault(injectIntl(EmojiPicker));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"emoji-rain":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/emoji-rain/component.jsx                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useRef, useState, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 1);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 2);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 3);
const EmojiRain = _ref => {
  let {
    reactions
  } = _ref;
  const Settings = getSettingsSingletonInstance();
  const containerRef = useRef(null);
  const [isAnimating, setIsAnimating] = useState(false);
  const EMOJI_SIZE = window.meetingClientSettings.public.app.emojiRain.emojiSize;
  const NUMBER_OF_EMOJIS = window.meetingClientSettings.public.app.emojiRain.numberOfEmojis;
  const EMOJI_RAIN_ENABLED = window.meetingClientSettings.public.app.emojiRain.enabled;
  const {
    animations
  } = Settings.application;
  function createEmojiRain(emoji) {
    const coord = Service.getInteractionsButtonCoordinates();
    const flyingEmojis = [];
    if (coord == null) {
      logger.warn({
        logCode: 'interactions_emoji_rain_no_coord'
      }, 'No coordinates for interactions button, skipping emoji rain');
      return;
    }
    for (i = 0; i < NUMBER_OF_EMOJIS; i++) {
      const initialPosition = {
        x: coord.x + coord.width / 8,
        y: coord.y + coord.height / 5
      };
      const endPosition = {
        x: Math.floor(Math.random() * 100) + coord.x - 100 / 2,
        y: Math.floor(Math.random() * 300) + coord.y / 2
      };
      const scale = Math.floor(Math.random() * (8 - 4 + 1)) - 40;
      const sec = Math.floor(Math.random() * 1700) + 2000;
      const shapeElement = document.createElement('svg');
      const emojiElement = document.createElement('text');
      emojiElement.setAttribute('x', '50%');
      emojiElement.setAttribute('y', '50%');
      emojiElement.innerHTML = emoji;
      shapeElement.style.position = 'absolute';
      shapeElement.style.left = "".concat(initialPosition.x, "px");
      shapeElement.style.top = "".concat(initialPosition.y, "px");
      shapeElement.style.transform = "scaleX(0.".concat(scale, ") scaleY(0.").concat(scale, ")");
      shapeElement.style.transition = "".concat(sec, "ms");
      shapeElement.style.fontSize = "".concat(EMOJI_SIZE, "em");
      shapeElement.style.pointerEvents = 'none';
      shapeElement.appendChild(emojiElement);
      containerRef.current.appendChild(shapeElement);
      flyingEmojis.push({
        shapeElement,
        endPosition
      });
    }
    requestAnimationFrame(() => setTimeout(() => flyingEmojis.forEach(emoji => {
      const {
        shapeElement,
        endPosition
      } = emoji;
      shapeElement.style.left = "".concat(endPosition.x, "px");
      shapeElement.style.top = "".concat(endPosition.y, "px");
      shapeElement.style.transform = 'scaleX(0) scaleY(0)';
    }), 0));
    setTimeout(() => {
      flyingEmojis.forEach(emoji => emoji.shapeElement.remove());
      flyingEmojis.length = 0;
    }, 2000);
  }
  const handleVisibilityChange = () => {
    if (document.hidden) {
      setIsAnimating(false);
    } else if (EMOJI_RAIN_ENABLED && animations) {
      setIsAnimating(true);
    }
  };
  useEffect(() => {
    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, []);
  useEffect(() => {
    if (EMOJI_RAIN_ENABLED && animations && !isAnimating && !document.hidden) {
      setIsAnimating(true);
    } else if (!animations) {
      setIsAnimating(false);
    }
  }, [EMOJI_RAIN_ENABLED, animations, isAnimating]);
  useEffect(() => {
    if (isAnimating) {
      reactions.forEach(reaction => {
        const currentTime = new Date().getTime();
        const secondsSinceCreated = (currentTime - reaction.creationDate.getTime()) / 1000;
        if (secondsSinceCreated <= 1 && reaction.reaction !== 'none') {
          createEmojiRain(reaction.reaction);
        }
      });
    }
  }, [isAnimating, reactions]);
  const containerStyle = {
    width: '100vw',
    height: '100vh',
    position: 'fixed',
    top: 0,
    left: 0,
    overflow: 'hidden',
    pointerEvents: 'none',
    zIndex: 2
  };
  return /*#__PURE__*/React.createElement("div", {
    ref: containerRef,
    style: containerStyle
  });
};
module.exportDefault(EmojiRain);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/emoji-rain/container.jsx                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let EmojiRain;
module.link("./component", {
  default(v) {
    EmojiRain = v;
  }
}, 1);
let getEmojisToRain;
module.link("./queries", {
  getEmojisToRain(v) {
    getEmojisToRain = v;
  }
}, 2);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 3);
const EmojiRainContainer = () => {
  const nowDate = useRef(new Date().toUTCString());
  const {
    data: emojisToRainData
  } = useDeduplicatedSubscription(getEmojisToRain, {
    variables: {
      initialCursor: nowDate.current
    }
  });
  const emojisArray = (emojisToRainData === null || emojisToRainData === void 0 ? void 0 : emojisToRainData.user_reaction_stream) || [];
  const reactions = emojisArray.length === 0 ? [] : emojisArray.map(reaction => ({
    reaction: reaction.reactionEmoji,
    creationDate: new Date(reaction.createdAt)
  }));
  return /*#__PURE__*/React.createElement(EmojiRain, {
    reactions: reactions
  });
};
module.exportDefault(EmojiRainContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/emoji-rain/queries.ts                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  getEmojisToRain: () => getEmojisToRain
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const getEmojisToRain = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\nsubscription getEmojisToRain ($initialCursor: timestamptz) {\n  user_reaction_stream(batch_size: 10, cursor: {initial_value: {createdAt: $initialCursor}}) {\n    createdAt\n    reactionEmoji\n  }\n}\n"])));
module.exportDefault({
  getEmojisToRain
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/emoji-rain/service.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const getInteractionsButtonCoordinates = () => {
  const el = document.getElementById('interactionsButton');
  if (!el) return null;
  const coordinate = el.getBoundingClientRect();
  return coordinate;
};
module.exportDefault({
  getInteractionsButtonCoordinates
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"end-meeting-confirmation":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/end-meeting-confirmation/component.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let ConfirmationModal;
module.link("/imports/ui/components/common/modal/confirmation/component", {
  default(v) {
    ConfirmationModal = v;
  }
}, 3);
const intlMessages = defineMessages({
  endMeetingTitle: {
    id: 'app.endMeeting.title',
    description: 'end meeting title'
  },
  endMeetingDescription: {
    id: 'app.endMeeting.description',
    description: 'end meeting description with affected users information'
  },
  endMeetingNoUserDescription: {
    id: 'app.endMeeting.noUserDescription',
    description: 'end meeting description'
  },
  contentWarning: {
    id: 'app.endMeeting.contentWarning',
    description: 'end meeting content warning'
  },
  confirmButtonLabel: {
    id: 'app.endMeeting.yesLabel',
    description: 'end meeting confirm button label'
  }
});
const propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  endMeeting: PropTypes.func.isRequired,
  meetingTitle: PropTypes.string.isRequired,
  users: PropTypes.number.isRequired
};
class EndMeetingComponent extends PureComponent {
  render() {
    const {
      users,
      intl,
      endMeeting,
      meetingTitle,
      isOpen,
      onRequestClose,
      priority,
      setIsOpen
    } = this.props;
    const title = intl.formatMessage(intlMessages.endMeetingTitle, {
      0: meetingTitle
    });
    let description = users > 1 ? intl.formatMessage(intlMessages.endMeetingDescription, {
      0: users - 1
    }) : intl.formatMessage(intlMessages.endMeetingNoUserDescription);
    const {
      warnAboutUnsavedContentOnMeetingEnd
    } = window.meetingClientSettings.public.app;
    if (warnAboutUnsavedContentOnMeetingEnd) {
      // the double breakline it to put one empty line between the descriptions
      description += "\n\n".concat(intl.formatMessage(intlMessages.contentWarning));
    }
    return /*#__PURE__*/React.createElement(ConfirmationModal, {
      intl: intl,
      onConfirm: endMeeting,
      title: title,
      description: description,
      confirmButtonColor: "danger",
      confirmButtonDataTest: "confirmEndMeeting",
      confirmButtonLabel: intl.formatMessage(intlMessages.confirmButtonLabel),
      isOpen,
      onRequestClose,
      priority,
      setIsOpen
    });
  }
}
EndMeetingComponent.propTypes = propTypes;
module.exportDefault(injectIntl(EndMeetingComponent));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/end-meeting-confirmation/container.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let EndMeetingComponent;
module.link("./component", {
  default(v) {
    EndMeetingComponent = v;
  }
}, 2);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 3);
let MEETING_END;
module.link("./mutations", {
  MEETING_END(v) {
    MEETING_END = v;
  }
}, 4);
let USER_AGGREGATE_COUNT_SUBSCRIPTION;
module.link("/imports/ui/core/graphql/queries/users", {
  USER_AGGREGATE_COUNT_SUBSCRIPTION(v) {
    USER_AGGREGATE_COUNT_SUBSCRIPTION = v;
  }
}, 5);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 6);
let useMeeting;
module.link("../../core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 7);
const EndMeetingContainer = props => {
  var _countData$user_aggre, _countData$user_aggre2;
  const [meetingEnd] = useMutation(MEETING_END);
  const {
    data: countData
  } = useDeduplicatedSubscription(USER_AGGREGATE_COUNT_SUBSCRIPTION);
  const users = (countData === null || countData === void 0 ? void 0 : (_countData$user_aggre = countData.user_aggregate) === null || _countData$user_aggre === void 0 ? void 0 : (_countData$user_aggre2 = _countData$user_aggre.aggregate) === null || _countData$user_aggre2 === void 0 ? void 0 : _countData$user_aggre2.count) || 0;
  const {
    setIsOpen
  } = props;
  const endMeeting = () => {
    logger.warn({
      logCode: 'moderator_forcing_end_meeting',
      extraInfo: {
        logType: 'user_action'
      }
    }, 'this user clicked on EndMeeting and confirmed, removing everybody from the meeting');
    meetingEnd();
    setIsOpen(false);
  };
  const {
    data: meeting
  } = useMeeting(m => ({
    name: m.name
  }));
  return /*#__PURE__*/React.createElement(EndMeetingComponent, _extends({
    endMeeting: endMeeting,
    users: users,
    meetingTitle: meeting === null || meeting === void 0 ? void 0 : meeting.name
  }, props));
};
module.exportDefault(EndMeetingContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/end-meeting-confirmation/mutations.jsx                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  MEETING_END: () => MEETING_END
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const MEETING_END = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation {\n    meetingEnd\n  }\n"])));
module.exportDefault({
  MEETING_END
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"error-screen":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/error-screen/component.jsx                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  ErrorScreen: () => ErrorScreen
});
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
const intlMessages = defineMessages({
  503: {
    id: 'app.error.503'
  },
  500: {
    id: 'app.error.500',
    defaultMessage: 'Oops, something went wrong'
  },
  410: {
    id: 'app.error.410'
  },
  409: {
    id: 'app.error.409'
  },
  408: {
    id: 'app.error.408'
  },
  404: {
    id: 'app.error.404',
    defaultMessage: 'Not found'
  },
  403: {
    id: 'app.error.403'
  },
  401: {
    id: 'app.error.401'
  },
  400: {
    id: 'app.error.400'
  },
  meeting_ended: {
    id: 'app.meeting.endedMessage'
  },
  user_logged_out_reason: {
    id: 'app.error.userLoggedOut'
  },
  validate_token_failed_eject_reason: {
    id: 'app.error.ejectedUser'
  },
  banned_user_rejoining_reason: {
    id: 'app.error.userBanned'
  },
  joined_another_window_reason: {
    id: 'app.error.joinedAnotherWindow'
  },
  user_inactivity_eject_reason: {
    id: 'app.meeting.logout.userInactivityEjectReason'
  },
  user_requested_eject_reason: {
    id: 'app.meeting.logout.ejectedFromMeeting'
  },
  max_participants_reason: {
    id: 'app.meeting.logout.maxParticipantsReached'
  },
  guest_deny: {
    id: 'app.guest.guestDeny'
  },
  duplicate_user_in_meeting_eject_reason: {
    id: 'app.meeting.logout.duplicateUserEjectReason'
  },
  not_enough_permission_eject_reason: {
    id: 'app.meeting.logout.permissionEjectReason'
  },
  able_to_rejoin_user_disconnected_reason: {
    id: 'app.error.disconnected.rejoin'
  }
});
const propTypes = {
  code: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  error: PropTypes.object,
  errorInfo: PropTypes.object
};
const defaultProps = {
  code: '500',
  callback: () => {},
  endedReason: null,
  error: {},
  errorInfo: null
};
class ErrorScreen extends PureComponent {
  componentDidMount() {
    const {
      code,
      callback,
      endedReason
    } = this.props;
    // stop audio
    document.querySelector('audio').pause();
    navigator.mediaDevices.getUserMedia({
      audio: true,
      video: true
    }).then(m => m.getTracks().forEach(t => t.stop()));
    window.dispatchEvent(new Event('StopAudioTracks'));
    callback(endedReason, () => {});
    console.error({
      logCode: 'startup_client_usercouldnotlogin_error'
    }, "User could not log in HTML5, hit ".concat(code));
  }
  render() {
    const {
      intl,
      code,
      children,
      error,
      errorInfo
    } = this.props;
    let formatedMessage = 'Oops, something went wrong';
    let errorMessageDescription = Session.getItem('errorMessageDescription');
    if (intl) {
      formatedMessage = intl.formatMessage(intlMessages[defaultProps.code]);
      if (code in intlMessages) {
        formatedMessage = intl.formatMessage(intlMessages[code]);
      }
      errorMessageDescription = Session.getItem('errorMessageDescription');
      if (errorMessageDescription in intlMessages) {
        errorMessageDescription = intl.formatMessage(intlMessages[errorMessageDescription]);
      }
    }
    if (error) {
      errorMessageDescription = error.message;
    }
    return /*#__PURE__*/React.createElement(Styled.Background, null, /*#__PURE__*/React.createElement(Styled.Message, {
      "data-test": "errorScreenMessage"
    }, formatedMessage), !errorMessageDescription || formatedMessage === errorMessageDescription || /*#__PURE__*/React.createElement(Styled.SessionMessage, null, errorMessageDescription), errorInfo ? /*#__PURE__*/React.createElement("textarea", {
      rows: "5",
      cols: "33",
      disabled: true
    }, JSON.stringify(errorInfo)) : null, /*#__PURE__*/React.createElement(Styled.Separator, null), /*#__PURE__*/React.createElement(Styled.CodeError, null, code), /*#__PURE__*/React.createElement("div", null, children));
  }
}
module.exportDefault(injectIntl(ErrorScreen));
ErrorScreen.propTypes = propTypes;
ErrorScreen.defaultProps = defaultProps;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/error-screen/styles.js                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite, colorGrayDark, colorGrayLighter;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  }
}, 1);
const Background = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: fixed;\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  background-color: ", ";\n  color: ", ";\n  text-align: center;\n"])), colorGrayDark, colorWhite);
const Message = styled.h1(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  margin: 0;\n  color: ", ";\n  font-size: 1.75rem;\n  font-weight: 400;\n  margin-bottom: 1rem;\n"])), colorWhite);
const SessionMessage = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin: 0;\n  color: ", ";\n  font-weight: 400;\n  margin-bottom: 1rem;\n  font-size: 1.25rem;\n"])), colorWhite);
const Separator = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  height: 0;\n  width: 5rem;\n  border: 1px solid ", ";\n  margin: 1.5rem 0 1.5rem 0;\n  align-self: center;\n  opacity: .75;\n"])), colorGrayLighter);
const CodeError = styled.h1(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  margin: 0;\n  font-size: 1.5rem;\n  color: ", ";\n"])), colorWhite);
module.exportDefault({
  Background,
  Message,
  SessionMessage,
  Separator,
  CodeError
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"floating-window":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/floating-window/component.tsx                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  "*"(v) {
    React = v;
  }
}, 0);
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 1);
let Draggable;
module.link("react-draggable", {
  default(v) {
    Draggable = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const renderComponent = (elementRef, key, top, left, backgroundColor, boxShadow) => /*#__PURE__*/React.createElement(Styled.FloatingWindowContent, {
  ref: elementRef,
  id: key,
  style: {
    top,
    left,
    backgroundColor,
    boxShadow
  }
});
const FloatingWindow = _ref => {
  let {
    left,
    top,
    key,
    backgroundColor,
    boxShadow,
    isDraggable,
    renderFunction
  } = _ref;
  const elementRef = useRef(null);
  useEffect(() => {
    if (elementRef.current && renderFunction) {
      renderFunction(elementRef.current);
    }
  }, [elementRef]);
  const componentToRender = renderComponent(elementRef, key, top, left, backgroundColor, boxShadow);
  return isDraggable ? /*#__PURE__*/React.createElement(Draggable, null, componentToRender) : componentToRender;
};
module.exportDefault(FloatingWindow);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/floating-window/container.tsx                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  "*"(v) {
    React = v;
  }
}, 0);
let useContext;
module.link("react", {
  useContext(v) {
    useContext = v;
  }
}, 1);
let FloatingWindow;
module.link("./component", {
  default(v) {
    FloatingWindow = v;
  }
}, 2);
let PluginsContext;
module.link("/imports/ui/components/components-data/plugin-context/context", {
  PluginsContext(v) {
    PluginsContext = v;
  }
}, 3);
const FloatingWindowContainer = () => {
  const {
    pluginsExtensibleAreasAggregatedState
  } = useContext(PluginsContext);
  let floatingWindows = [];
  if (pluginsExtensibleAreasAggregatedState.floatingWindows) {
    floatingWindows = [...pluginsExtensibleAreasAggregatedState.floatingWindows];
  }
  return floatingWindows.map(item => {
    const itemToRender = item;
    return /*#__PURE__*/React.createElement(FloatingWindow, {
      key: itemToRender.id,
      top: itemToRender.top,
      left: itemToRender.left,
      backgroundColor: itemToRender.backgroundColor,
      boxShadow: itemToRender.boxShadow,
      renderFunction: itemToRender.contentFunction,
      isDraggable: itemToRender.movable
    });
  });
};
module.exportDefault(FloatingWindowContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/floating-window/styles.ts                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const FloatingWindowContent = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  z-index: 1002;\n"])));
module.exportDefault({
  FloatingWindowContent
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"learning-dashboard":{"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/learning-dashboard/service.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 0);
const setLearningDashboardCookie = token => {
  if (token !== null) {
    const lifetime = new Date();
    lifetime.setTime(lifetime.getTime() + 3600000); // 1h (extends 7d when open Dashboard)
    document.cookie = "ld-".concat(Auth.meetingID, "=").concat(token, "; expires=").concat(lifetime.toGMTString(), "; path=/");
    return true;
  }
  return false;
};
const openLearningDashboardUrl = (lang, token) => {
  const APP = window.meetingClientSettings.public.app;
  if (token && setLearningDashboardCookie(token)) {
    window.open("".concat(APP.learningDashboardBase, "/?meeting=").concat(Auth.meetingID, "&lang=").concat(lang), '_blank');
  } else {
    window.open("".concat(APP.learningDashboardBase, "/?meeting=").concat(Auth.meetingID, "&sessionToken=").concat(Auth.sessionToken, "&lang=").concat(lang), '_blank');
  }
};
module.exportDefault({
  setLearningDashboardCookie,
  openLearningDashboardUrl
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"muted-alert":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/muted-alert/component.jsx                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let hark;
module.link("hark", {
  default(v) {
    hark = v;
  }
}, 2);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 3);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 4);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 5);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 6);
let TooltipContainer;
module.link("/imports/ui/components/common/tooltip/container", {
  default(v) {
    TooltipContainer = v;
  }
}, 7);
const propTypes = {
  inputStream: PropTypes.objectOf(PropTypes.any).isRequired,
  isPresenter: PropTypes.bool.isRequired,
  isViewer: PropTypes.bool.isRequired,
  muted: PropTypes.bool.isRequired
};
const intlMessages = defineMessages({
  disableMessage: {
    id: 'app.muteWarning.disableMessage',
    description: 'Message used when mute alerts has been disabled'
  },
  tooltip: {
    id: 'app.muteWarning.tooltip',
    description: 'Tooltip message'
  },
  warningLabel: {
    id: 'app.muteWarning.label',
    description: 'Warning when someone speaks while muted'
  }
});
class MutedAlert extends Component {
  constructor(props) {
    super(props);
    this.state = {
      visible: false
    };
    this.inputStream = null;
    this.speechEvents = null;
    this.timer = null;
    this.cloneMediaStream = this.cloneMediaStream.bind(this);
    this.resetTimer = this.resetTimer.bind(this);
    this.closeAlert = this.closeAlert.bind(this);
  }
  componentDidMount() {
    const MUTE_ALERT_CONFIG = window.meetingClientSettings.public.app.mutedAlert;
    this._isMounted = true;
    if (!this.hasValidInputStream()) return;
    this.cloneMediaStream();
    if (this.inputStream) {
      const {
        interval,
        threshold,
        duration
      } = MUTE_ALERT_CONFIG;
      this.speechEvents = hark(this.inputStream, {
        interval,
        threshold
      });
      this.speechEvents.on('speaking', () => {
        this.resetTimer();
        if (this._isMounted) this.setState({
          visible: true
        });
      });
      this.speechEvents.on('stopped_speaking', () => {
        if (this._isMounted) {
          this.timer = setTimeout(() => this.setState({
            visible: false
          }), duration);
        }
      });
    }
  }
  componentDidUpdate() {
    this.cloneMediaStream();
  }
  componentWillUnmount() {
    this._isMounted = false;
    if (this.speechEvents) this.speechEvents.stop();
    if (this.inputStream) {
      this.inputStream.getTracks().forEach(t => t.stop());
    }
    this.resetTimer();
  }
  cloneMediaStream() {
    if (this.inputStream) return;
    const {
      inputStream
    } = this.props;
    if (inputStream) {
      this.inputStream = inputStream.clone();
      this.enableInputStreamAudioTracks(this.inputStream);
    }
  }

  /* eslint-disable no-param-reassign */
  enableInputStreamAudioTracks() {
    if (!this.inputStream) return;
    this.inputStream.getAudioTracks().forEach(t => {
      t.enabled = true;
    });
  }
  /* eslint-enable no-param-reassign */

  resetTimer() {
    if (this.timer) clearTimeout(this.timer);
    this.timer = null;
  }
  hasValidInputStream() {
    const {
      inputStream
    } = this.props;
    if (inputStream && typeof inputStream.getAudioTracks === 'function' && inputStream.getAudioTracks().length > 0) return true;
    return false;
  }
  closeAlert() {
    const {
      intl
    } = this.props;
    this.setState({
      visible: false
    });
    this.speechEvents.stop();
    notify(intl.formatMessage(intlMessages.disableMessage), 'info', 'mute');
  }
  render() {
    const {
      isViewer,
      isPresenter,
      muted,
      intl
    } = this.props;
    const {
      visible
    } = this.state;
    return visible && muted ? /*#__PURE__*/React.createElement(TooltipContainer, {
      title: intl.formatMessage(intlMessages.tooltip),
      position: "top"
    }, /*#__PURE__*/React.createElement(Styled.MuteWarning, {
      alignForMod: !isViewer || isPresenter,
      alignForViewer: isViewer,
      onClick: () => this.closeAlert()
    }, /*#__PURE__*/React.createElement("span", null, intl.formatMessage(intlMessages.warningLabel, {
      0: /*#__PURE__*/React.createElement(Icon, {
        iconName: "mute"
      })
    })))) : null;
  }
}
MutedAlert.propTypes = propTypes;
module.exportDefault(injectIntl(MutedAlert));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/muted-alert/styles.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let mdPaddingX, borderRadius;
module.link("/imports/ui/stylesheets/styled-components/general", {
  mdPaddingX(v) {
    mdPaddingX = v;
  },
  borderRadius(v) {
    borderRadius = v;
  }
}, 1);
let fontSizeXL, fontSizeMD, fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeXL(v) {
    fontSizeXL = v;
  },
  fontSizeMD(v) {
    fontSizeMD = v;
  },
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 2);
let colorWhite, colorTipBg;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorTipBg(v) {
    colorTipBg = v;
  }
}, 3);
let smallOnly, mediumOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  },
  mediumOnly(v) {
    mediumOnly = v;
  }
}, 4);
const MuteWarning = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute !important;\n  color: ", ";\n  background-color: ", ";\n  text-align: center;\n  line-height: 1;\n  font-size: ", ";\n  padding: ", ";\n  border-radius: ", ";\n  top: -100%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 100;\n  cursor: pointer;\n\n  > span {\n    white-space: nowrap;\n  }\n\n  @media ", " {\n    font-size: ", ";\n  }\n\n  ", "\n\n  ", "\n"])), colorWhite, colorTipBg, fontSizeXL, mdPaddingX, borderRadius, smallOnly, fontSizeMD, _ref => {
  let {
    alignForMod
  } = _ref;
  return alignForMod && "\n    left: 72.25%;\n\n    [dir=\"rtl\"] & {\n      left: 20%;\n    }\n\n    @media ".concat(mediumOnly, " {\n      font-size: ").concat(fontSizeSmall, ";\n    }\n  ");
}, _ref2 => {
  let {
    alignForViewer
  } = _ref2;
  return alignForViewer && "\n    left: 80%;\n  \n    [dir=\"rtl\"] & {\n      left: 20%;\n    }\n\n    @media ".concat(mediumOnly, " {\n      font-size: ").concat(fontSizeSmall, ";\n    }\n\n  ");
});
module.exportDefault({
  MuteWarning
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"notifications":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notifications/component.tsx                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let FormattedMessage;
module.link("react-intl", {
  FormattedMessage(v) {
    FormattedMessage = v;
  }
}, 1);
let getNotificationsStream;
module.link("./queries", {
  getNotificationsStream(v) {
    getNotificationsStream = v;
  }
}, 2);
let useCurrentUser;
module.link("../../core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 3);
let notify;
module.link("../../services/notification", {
  notify(v) {
    notify = v;
  }
}, 4);
let NotifyPublishedPoll, layoutUpdate, pendingGuestAlert, userJoinPushAlert, userLeavePushAlert;
module.link("./service", {
  NotifyPublishedPoll(v) {
    NotifyPublishedPoll = v;
  },
  layoutUpdate(v) {
    layoutUpdate = v;
  },
  pendingGuestAlert(v) {
    pendingGuestAlert = v;
  },
  userJoinPushAlert(v) {
    userJoinPushAlert = v;
  },
  userLeavePushAlert(v) {
    userLeavePushAlert = v;
  }
}, 5);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 6);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 7);
const Notifications = () => {
  const [registeredAt, setRegisteredAt] = React.useState(new Date().toISOString());
  const [greaterThanLastOne, setGreaterThanLastOne] = React.useState(0);
  const messageIndexRef = React.useRef({
    'app.whiteboard.annotations.poll': NotifyPublishedPoll,
    'app.userList.guest.pendingGuestAlert': pendingGuestAlert,
    'app.notification.userJoinPushAlert': userJoinPushAlert,
    'app.notification.userLeavePushAlert': userLeavePushAlert,
    'app.layoutUpdate.label': layoutUpdate
  });
  const {
    data: currentUser
  } = useCurrentUser(u => ({
    registeredAt: u.registeredAt,
    presenter: u.presenter,
    isModerator: u.isModerator
  }));
  const Settings = getSettingsSingletonInstance();
  const {
    userJoinPushAlerts,
    userLeavePushAlerts,
    guestWaitingPushAlerts
  } = Settings.application;
  const excludedMessageIds = [];
  if (!userJoinPushAlerts) {
    excludedMessageIds.push('app.notification.userJoinPushAlert');
  }
  if (!userLeavePushAlerts) {
    excludedMessageIds.push('app.notification.userLeavePushAlert');
  }
  if (!guestWaitingPushAlerts) {
    excludedMessageIds.push('app.userList.guest.pendingGuestAlert');
  }
  const {
    data: notificationsStream
  } = useDeduplicatedSubscription(getNotificationsStream, {
    variables: {
      initialCursor: '2024-04-18',
      excludedMessageIds
    }
  });
  const notifier = notification => {
    notify( /*#__PURE__*/React.createElement(FormattedMessage, {
      id: notification.messageId
      // @ts-ignore - JS code
      ,
      values: notification.messageValues,
      description: notification.messageDescription
    }), notification.notificationType, notification.icon);
  };
  useEffect(() => {
    if (currentUser && currentUser.registeredAt) {
      if (registeredAt !== currentUser.registeredAt) {
        setRegisteredAt(currentUser.registeredAt);
      }
    }
  }, [currentUser]);
  useEffect(() => {
    if (notificationsStream && notificationsStream.notification_stream.length > 0) {
      notificationsStream.notification_stream.forEach(notification => {
        const createdAt = new Date(notification.createdAt).getTime();
        if (createdAt > greaterThanLastOne) {
          setGreaterThanLastOne(createdAt);
          // Do something with the notification
          if (messageIndexRef.current[notification.messageId]) {
            messageIndexRef.current[notification.messageId](notification, notifier, currentUser === null || currentUser === void 0 ? void 0 : currentUser.isModerator, currentUser === null || currentUser === void 0 ? void 0 : currentUser.presenter);
          } else {
            notifier(notification);
          }
        }
      });
    }
  }, [notificationsStream]);
  return null;
};
module.exportDefault(Notifications);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notifications/queries.ts                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  getNotificationsStream: () => getNotificationsStream
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const getNotificationsStream = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription getNotificationStream(\n    $initialCursor: timestamptz!,\n    $excludedMessageIds: [String!]!\n  ){\n    notification_stream(\n      batch_size: 10,\n      cursor: {initial_value: {createdAt: $initialCursor}},\n      where: {messageId: {_nin: $excludedMessageIds}}\n    ) {\n      notificationType\n      icon\n      messageId\n      messageValues\n      isSingleUserNotification\n      createdAt\n    }\n  }\n"])));
module.exportDefault({
  getNotificationsStream
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notifications/service.ts                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  NotifyPublishedPoll: () => NotifyPublishedPoll,
  pendingGuestAlert: () => pendingGuestAlert,
  userJoinPushAlert: () => userJoinPushAlert,
  userLeavePushAlert: () => userLeavePushAlert,
  layoutUpdate: () => layoutUpdate
});
let makeVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  }
}, 0);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 1);
let throttle;
module.link("/imports/utils/throttle", {
  throttle(v) {
    throttle = v;
  }
}, 2);
const GUEST_WAITING_BELL_THROTTLE_TIME = 10000;
const lastLayoutUpdateNotification = makeVar(new Date().getTime());
const NotifyPublishedPoll = (notification, notifier, isModerator, presenter) => {
  if (presenter || isModerator) {
    notifier(notification);
  }
};
function ringGuestWaitingBell() {
  const Settings = getSettingsSingletonInstance();
  // @ts-ignore - JS code
  if (Settings.application.guestWaitingAudioAlerts) {
    const CDN = window.meetingClientSettings.public.app.cdn;
    const BASENAME = window.meetingClientSettings.public.app.basename;
    const HOST = CDN + BASENAME;
    const audio = new Audio("".concat(HOST, "/resources/sounds/doorbell.mp3"));
    audio.play();
  }
}
const ringGuestWaitingBellThrottled = throttle(ringGuestWaitingBell, GUEST_WAITING_BELL_THROTTLE_TIME, {
  leading: true,
  trailing: false
});
const pendingGuestAlert = (notification, notifier) => {
  const Settings = getSettingsSingletonInstance();
  // @ts-ignore - JS code
  if (Settings.application.guestWaitingPushAlerts) {
    notifier(notification);
  }
  ringGuestWaitingBellThrottled();
};
const userJoinPushAlert = (notification, notifier) => {
  const Settings = getSettingsSingletonInstance();
  const {
    userJoinAudioAlerts,
    userJoinPushAlerts
    // @ts-ignore - JS code
  } = Settings.application;
  if (!userJoinAudioAlerts && !userJoinPushAlerts) return;
  if (userJoinAudioAlerts) {
    new Audio("".concat(window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId) + '/resources/sounds/userJoin.mp3').play();
  }
  if (userJoinPushAlerts) {
    notifier(notification);
  }
};
const userLeavePushAlert = (notification, notifier) => {
  const Settings = getSettingsSingletonInstance();
  const {
    userLeaveAudioAlerts,
    userLeavePushAlerts
    // @ts-ignore - JS code
  } = Settings.application;
  if (!userLeaveAudioAlerts && !userLeavePushAlerts) return;
  if (userLeaveAudioAlerts) {
    new Audio("".concat(window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId) + '/resources/sounds/userJoin.mp3').play();
  }
  if (userLeavePushAlerts) {
    notifier(notification);
  }
};
const layoutUpdate = (notification, notifier) => {
  const last = new Date(lastLayoutUpdateNotification()).getTime();
  const now = new Date().getTime();
  if (now - last < 1000) {
    return;
  }
  lastLayoutUpdateNotification(now);
  notifier(notification);
};
module.exportDefault({
  NotifyPublishedPoll,
  pendingGuestAlert,
  userJoinPushAlert,
  userLeavePushAlert,
  layoutUpdate
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"notifications-bar":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notifications-bar/component.jsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let injectWbResizeEvent;
module.link("/imports/ui/components/presentation/resize-wrapper/component", {
  default(v) {
    injectWbResizeEvent = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
const COLORS = ['default', 'primary', 'danger', 'success'];
const propTypes = {
  color: PropTypes.string
};
const NotificationsBar = _ref => {
  let {
    color = 'default',
    children,
    alert
  } = _ref;
  const hasColor = COLORS.includes(color);
  return /*#__PURE__*/React.createElement(Styled.NotificationsBar, {
    "data-test": "notificationBannerBar",
    role: alert ? 'alert' : '',
    "aria-live": "off",
    style: !hasColor ? {
      backgroundColor: "".concat(color)
    } : {},
    color: color
  }, children);
};
NotificationsBar.propTypes = propTypes;
module.exportDefault(injectWbResizeEvent(NotificationsBar));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notifications-bar/container.jsx                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let isEmpty;
module.link("radash", {
  isEmpty(v) {
    isEmpty = v;
  }
}, 2);
let MeetingRemainingTime;
module.link("/imports/ui/components/common/remaining-time/meeting-duration/component", {
  default(v) {
    MeetingRemainingTime = v;
  }
}, 3);
let useReactiveVar;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 4);
let layoutSelectInput, layoutDispatch;
module.link("../layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 5);
let ACTIONS;
module.link("../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 6);
let NotificationsBar;
module.link("./component", {
  default(v) {
    NotificationsBar = v;
  }
}, 7);
let connectionStatus;
module.link("../../core/graphql/singletons/connectionStatus", {
  default(v) {
    connectionStatus = v;
  }
}, 8);
let useMeeting;
module.link("../../core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 9);
// disconnected and trying to open a new connection
const intlMessages = defineMessages({
  failedMessage: {
    id: 'app.failedMessage',
    description: 'Notification for connecting to server problems'
  },
  connectingMessage: {
    id: 'app.connectingMessage',
    description: 'Notification message for when client is connecting to server'
  },
  waitingMessage: {
    id: 'app.waitingMessage',
    description: 'Notification message for disconnection with reconnection counter'
  },
  reconnectingMessage: {
    id: 'app.reconnectingMessage',
    description: 'Notification message for disconnection'
  },
  calculatingBreakoutTimeRemaining: {
    id: 'app.calculatingBreakoutTimeRemaining',
    description: 'Message that tells that the remaining time is being calculated'
  },
  alertMeetingEndsUnderMinutes: {
    id: 'app.meeting.alertMeetingEndsUnderMinutes',
    description: 'Alert that tells that the meeting ends under x minutes'
  },
  alertBreakoutEndsUnderMinutes: {
    id: 'app.meeting.alertBreakoutEndsUnderMinutes',
    description: 'Alert that tells that the breakout ends under x minutes'
  },
  serverIsNotResponding: {
    id: 'app.serverIsNotResponding',
    description: 'Alert that tells that server is not responding'
  },
  serverIsSlow: {
    id: 'app.serverIsSlow',
    description: 'Alert that tells that server is slow'
  }
});
const NotificationsBarContainer = () => {
  const data = {};
  data.alert = true;
  data.color = 'primary';
  const intl = useIntl();
  const connected = useReactiveVar(connectionStatus.getConnectedStatusVar());
  const serverIsResponding = useReactiveVar(connectionStatus.getServerIsRespondingVar());
  const pingIsComing = useReactiveVar(connectionStatus.getPingIsComingVar());
  const lastRttRequestSuccess = useReactiveVar(connectionStatus.getLastRttRequestSuccessVar());
  // if connection failed x attempts a error will be thrown
  if (!connected || !serverIsResponding || !pingIsComing) {
    data.color = 'primary';
    data.message = /*#__PURE__*/React.createElement(React.Fragment, null, !connected && intl.formatMessage(intlMessages.reconnectingMessage), connected && !serverIsResponding && lastRttRequestSuccess && intl.formatMessage(intlMessages.serverIsNotResponding), connected && serverIsResponding && !pingIsComing && lastRttRequestSuccess && intl.formatMessage(intlMessages.serverIsSlow));
  }
  const {
    data: meeting
  } = useMeeting(m => ({
    isBreakout: m.isBreakout,
    componentsFlags: m.componentsFlags
  }));
  if (meeting !== null && meeting !== void 0 && meeting.isBreakout) {
    data.message = /*#__PURE__*/React.createElement(MeetingRemainingTime, null);
  }
  if (meeting) {
    const {
      isBreakout,
      componentsFlags
    } = meeting;
    if (componentsFlags.showRemainingTime && !isBreakout) {
      data.message = /*#__PURE__*/React.createElement(MeetingRemainingTime, null);
    }
  }
  const notificationsBar = layoutSelectInput(i => i.notificationsBar);
  const layoutContextDispatch = layoutDispatch();
  const {
    hasNotification
  } = notificationsBar;
  useEffect(() => {
    const localHasNotification = !!data.message;
    if (localHasNotification !== hasNotification) {
      layoutContextDispatch({
        type: ACTIONS.SET_HAS_NOTIFICATIONS_BAR,
        value: localHasNotification
      });
    }
  }, [data.message, hasNotification]);
  if (isEmpty(data.message)) {
    return null;
  }
  return /*#__PURE__*/React.createElement(NotificationsBar, {
    color: data.color
  }, data.message);
};
module.exportDefault(NotificationsBarContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/notifications-bar/styles.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let lineHeightComputed;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  lineHeightComputed(v) {
    lineHeightComputed = v;
  }
}, 1);
let colorGray, colorWhite, colorPrimary, colorSuccess, colorDanger;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorGray(v) {
    colorGray = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorDanger(v) {
    colorDanger = v;
  }
}, 2);
const NotificationsBar = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  padding: calc(", " / 2);\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  font-weight: 600;\n\n  ", "\n\n  ", "\n  \n  ", "\n\n  ", "\n"])), lineHeightComputed, _ref => {
  let {
    color
  } = _ref;
  return color === 'default' && "\n    color: ".concat(colorGray, ";\n    background-color: ").concat(colorWhite, ";\n    border-color: ").concat(colorWhite, ";\n  ");
}, _ref2 => {
  let {
    color
  } = _ref2;
  return color === 'primary' && "\n    color: ".concat(colorWhite, ";\n    background-color: ").concat(colorPrimary, ";\n    border-color: ").concat(colorPrimary, ";\n  ");
}, _ref3 => {
  let {
    color
  } = _ref3;
  return color === 'success' && "\n    color: ".concat(colorWhite, ";\n    background-color: ").concat(colorSuccess, ";\n    border-color: ").concat(colorSuccess, ";\n  ");
}, _ref4 => {
  let {
    color
  } = _ref4;
  return color === 'danger' && "\n    color: ".concat(colorWhite, ";\n    background-color: ").concat(colorDanger, ";\n    border-color: ").concat(colorDanger, ";\n  ");
});
const RetryButton = styled.button(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  background-color: transparent;\n   border: none;\n   cursor: pointer;\n   text-decoration: underline;\n   display: inline;\n   margin: 0;\n   padding: 0;\n   color: ", ";\n"])), colorWhite);
module.exportDefault({
  NotificationsBar,
  RetryButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"polling":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/polling/component.tsx                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, useEffect, useMemo, useRef, useState;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let Checkbox;
module.link("/imports/ui/components/common/checkbox/component", {
  default(v) {
    Checkbox = v;
  }
}, 3);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 4);
let POLL_SUBMIT_TYPED_VOTE, POLL_SUBMIT_VOTE;
module.link("/imports/ui/components/poll/mutations", {
  POLL_SUBMIT_TYPED_VOTE(v) {
    POLL_SUBMIT_TYPED_VOTE = v;
  },
  POLL_SUBMIT_VOTE(v) {
    POLL_SUBMIT_VOTE = v;
  }
}, 5);
let hasPendingPoll;
module.link("./queries", {
  hasPendingPoll(v) {
    hasPendingPoll = v;
  }
}, 6);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 7);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 8);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 9);
let useIsPollingEnabled;
module.link("../../services/features", {
  useIsPollingEnabled(v) {
    useIsPollingEnabled = v;
  }
}, 10);
const intlMessages = defineMessages({
  pollingTitleLabel: {
    id: 'app.polling.pollingTitle'
  },
  pollAnswerLabel: {
    id: 'app.polling.pollAnswerLabel'
  },
  pollAnswerDesc: {
    id: 'app.polling.pollAnswerDesc'
  },
  pollQuestionTitle: {
    id: 'app.polling.pollQuestionTitle'
  },
  responseIsSecret: {
    id: 'app.polling.responseSecret'
  },
  responseNotSecret: {
    id: 'app.polling.responseNotSecret'
  },
  submitLabel: {
    id: 'app.polling.submitLabel'
  },
  submitAriaLabel: {
    id: 'app.polling.submitAriaLabel'
  },
  responsePlaceholder: {
    id: 'app.polling.responsePlaceholder'
  }
});
const validateInput = i => {
  let input = i;
  if (/^\s/.test(input)) input = '';
  return input;
};
const PollingGraphql = props => {
  const {
    handleTypedVote,
    handleVote,
    poll,
    pollAnswerIds,
    pollTypes,
    isDefaultPoll,
    playAlert
  } = props;
  const [typedAns, setTypedAns] = useState('');
  const [checkedAnswers, setCheckedAnswers] = useState([]);
  const intl = useIntl();
  const responseInput = useRef(null);
  const pollingContainer = useRef(null);
  useEffect(() => {
    playAlert();
    if (pollingContainer.current) {
      pollingContainer.current.focus();
    }
  }, []);
  const handleUpdateResponseInput = e => {
    if (responseInput.current) {
      responseInput.current.value = validateInput(e.target.value);
      setTypedAns(responseInput.current.value);
    }
  };
  const handleSubmit = pollId => {
    handleVote(pollId, checkedAnswers);
  };
  const handleCheckboxChange = answerId => {
    if (checkedAnswers.includes(answerId)) {
      checkedAnswers.splice(checkedAnswers.indexOf(answerId), 1);
    } else {
      checkedAnswers.push(answerId);
    }
    checkedAnswers.sort();
    setCheckedAnswers([...checkedAnswers]);
  };
  const handleMessageKeyDown = e => {
    if (e.keyCode === 13 && typedAns.length > 0) {
      handleTypedVote(poll.pollId, typedAns);
    }
  };
  const renderButtonAnswers = () => {
    const {
      stackOptions,
      options,
      questionText,
      type
    } = poll;
    const defaultPoll = isDefaultPoll(type);
    const MAX_INPUT_CHARS = window.meetingClientSettings.public.poll.maxTypedAnswerLength;
    return /*#__PURE__*/React.createElement("div", null, poll.type !== pollTypes.Response && /*#__PURE__*/React.createElement("span", null, questionText.length === 0 && /*#__PURE__*/React.createElement(Styled.PollingTitle, null, intl.formatMessage(intlMessages.pollingTitleLabel)), /*#__PURE__*/React.createElement(Styled.PollingAnswers, {
      removeColumns: options.length === 1,
      stacked: stackOptions
    }, options.map(option => {
      const formattedMessageIndex = option.optionDesc.toLowerCase();
      let label = option.optionDesc;
      if ((defaultPoll || type.includes('CUSTOM')) && pollAnswerIds[formattedMessageIndex]) {
        label = intl.formatMessage(pollAnswerIds[formattedMessageIndex]);
      }
      return /*#__PURE__*/React.createElement(Styled.PollButtonWrapper, {
        key: option.optionId
      }, /*#__PURE__*/React.createElement(Styled.PollingButton, {
        color: "primary",
        size: "md",
        label: label,
        key: option.optionDesc,
        onClick: () => handleVote(poll.pollId, [option.optionId]),
        "aria-labelledby": "pollAnswerLabel".concat(option.optionDesc),
        "aria-describedby": "pollAnswerDesc".concat(option.optionDesc),
        "data-test": "pollAnswerOption"
      }), /*#__PURE__*/React.createElement(Styled.Hidden, {
        id: "pollAnswerLabel".concat(option.optionDesc)
      }, intl.formatMessage(intlMessages.pollAnswerLabel, {
        0: label
      })), /*#__PURE__*/React.createElement(Styled.Hidden, {
        id: "pollAnswerDesc".concat(option.optionDesc)
      }, intl.formatMessage(intlMessages.pollAnswerDesc, {
        0: label
      })));
    }))), poll.type === pollTypes.Response && /*#__PURE__*/React.createElement(Styled.TypedResponseWrapper, null, /*#__PURE__*/React.createElement(Styled.TypedResponseInput, {
      "data-test": "pollAnswerOption",
      onChange: e => {
        handleUpdateResponseInput(e);
      },
      onKeyDown: e => {
        handleMessageKeyDown(e);
      },
      type: "text",
      placeholder: intl.formatMessage(intlMessages.responsePlaceholder),
      maxLength: MAX_INPUT_CHARS,
      ref: responseInput,
      onPaste: e => {
        e.stopPropagation();
      },
      onCut: e => {
        e.stopPropagation();
      },
      onCopy: e => {
        e.stopPropagation();
      }
    }), /*#__PURE__*/React.createElement(Styled.SubmitVoteButton, {
      "data-test": "submitAnswer",
      disabled: typedAns.length === 0,
      color: "primary",
      size: "sm",
      label: intl.formatMessage(intlMessages.submitLabel),
      "aria-label": intl.formatMessage(intlMessages.submitAriaLabel),
      onClick: () => {
        handleTypedVote(poll.pollId, typedAns);
      }
    })), /*#__PURE__*/React.createElement(Styled.PollingSecret, null, intl.formatMessage(poll.secret ? intlMessages.responseIsSecret : intlMessages.responseNotSecret)));
  };
  const renderCheckboxAnswers = () => {
    return /*#__PURE__*/React.createElement("div", null, poll.questionText.length === 0 && /*#__PURE__*/React.createElement(Styled.PollingTitle, null, intl.formatMessage(intlMessages.pollingTitleLabel)), /*#__PURE__*/React.createElement(Styled.MultipleResponseAnswersTable, null, poll.options.map(option => {
      const formattedMessageIndex = option.optionDesc.toLowerCase();
      let label = option.optionDesc;
      if (pollAnswerIds[formattedMessageIndex]) {
        label = intl.formatMessage(pollAnswerIds[formattedMessageIndex]);
      }
      return /*#__PURE__*/React.createElement(Styled.CheckboxContainer, {
        key: option.optionId
      }, /*#__PURE__*/React.createElement("td", null, /*#__PURE__*/React.createElement(Styled.PollingCheckbox, {
        "data-test": "optionsAnswers"
      }, /*#__PURE__*/React.createElement(Checkbox, {
        id: "answerInput".concat(option.optionDesc),
        onChange: () => handleCheckboxChange(option.optionId),
        checked: checkedAnswers.includes(option.optionId),
        ariaLabelledBy: "pollAnswerLabel".concat(option.optionDesc),
        ariaDescribedBy: "pollAnswerDesc".concat(option.optionDesc)
      }))), /*#__PURE__*/React.createElement(Styled.MultipleResponseAnswersTableAnswerText, null, /*#__PURE__*/React.createElement("label", {
        id: "pollAnswerLabel".concat(option.optionDesc),
        htmlFor: "answerInput".concat(option.optionDesc)
      }, label), /*#__PURE__*/React.createElement(Styled.Hidden, {
        id: "pollAnswerDesc".concat(option.optionDesc)
      }, intl.formatMessage(intlMessages.pollAnswerDesc, {
        0: label
      }))));
    })), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.SubmitVoteButton, {
      disabled: checkedAnswers.length === 0,
      color: "primary",
      size: "sm",
      label: intl.formatMessage(intlMessages.submitLabel),
      "aria-label": intl.formatMessage(intlMessages.submitAriaLabel),
      onClick: () => handleSubmit(poll.pollId),
      "data-test": "submitAnswersMultiple"
    })));
  };
  return /*#__PURE__*/React.createElement(Styled.Overlay, null, /*#__PURE__*/React.createElement(Styled.PollingContainer, {
    autoWidth: poll.stackOptions,
    "data-test": "pollingContainer",
    role: "complementary",
    ref: pollingContainer,
    tabIndex: -1
  }, poll.questionText.length > 0 && /*#__PURE__*/React.createElement(Styled.QHeader, null, /*#__PURE__*/React.createElement(Styled.QTitle, null, intl.formatMessage(intlMessages.pollQuestionTitle)), /*#__PURE__*/React.createElement(Styled.QText, {
    "data-test": "pollQuestion"
  }, poll.questionText)), poll.multipleResponses ? renderCheckboxAnswers() : renderButtonAnswers()));
};
const PollingGraphqlContainer = () => {
  const {
    data: currentUserData
  } = useCurrentUser(u => ({
    userId: u.userId,
    presenter: u.presenter
  }));
  const {
    data: hasPendingPollData,
    error,
    loading
  } = useDeduplicatedSubscription(hasPendingPoll, {
    variables: {
      userId: currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.userId
    },
    skip: !currentUserData
  });
  const [pollSubmitUserTypedVote] = useMutation(POLL_SUBMIT_TYPED_VOTE);
  const [pollSubmitUserVote] = useMutation(POLL_SUBMIT_VOTE);
  const isPollingEnabled = useIsPollingEnabled();
  const meetingData = hasPendingPollData && hasPendingPollData.meeting[0];
  const pollData = meetingData && meetingData.polls[0];
  const userData = pollData && pollData.users[0];
  const pollExists = !!userData;
  const showPolling = pollExists && !(currentUserData !== null && currentUserData !== void 0 && currentUserData.presenter) && isPollingEnabled;
  const stackOptions = useMemo(() => !!pollData && Service.shouldStackOptions(pollData.options.map(o => o.optionDesc)), [pollData]);
  const handleTypedVote = (pollId, answer) => {
    pollSubmitUserTypedVote({
      variables: {
        pollId,
        answer
      }
    });
  };
  const handleVote = (pollId, answerIds) => {
    pollSubmitUserVote({
      variables: {
        pollId,
        answerIds
      }
    });
  };
  if (!showPolling || error || loading) return null;
  return /*#__PURE__*/React.createElement(PollingGraphql, {
    handleTypedVote: handleTypedVote,
    handleVote: handleVote,
    poll: _objectSpread(_objectSpread({}, pollData), {}, {
      stackOptions
    }),
    pollAnswerIds: Service.pollAnswerIds,
    isDefaultPoll: Service.isDefaultPoll,
    pollTypes: Service.pollTypes,
    playAlert: Service.playAlert
  });
};
module.exportDefault(PollingGraphqlContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/polling/container.jsx                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let PollingGraphqlContainer;
module.link("./component", {
  default(v) {
    PollingGraphqlContainer = v;
  }
}, 0);
module.exportDefault(PollingGraphqlContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/polling/queries.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  hasPendingPoll: () => hasPendingPoll
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const hasPendingPoll = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription hasPendingPoll($userId: String!) {\n    meeting {\n      polls(\n        where: {\n          ended: { _eq: false }\n          users: { responded: { _eq: false }, userId: { _eq: $userId } },\n          userCurrent: { responded: { _eq: false } }\n        }\n      ) {\n        users {\n          responded\n          userId\n        }\n        options {\n          optionDesc\n          optionId\n          pollId\n        }\n        multipleResponses\n        pollId\n        questionText\n        secret\n        type\n      }\n    }\n  }\n"])));
module.exportDefault({
  hasPendingPoll
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/polling/service.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  shouldStackOptions: () => shouldStackOptions
});
let PollService;
module.link("/imports/ui/components/poll/service", {
  default(v) {
    PollService = v;
  }
}, 0);
let AudioService;
module.link("/imports/ui/components/audio/service", {
  default(v) {
    AudioService = v;
  }
}, 1);
const MAX_CHAR_LENGTH = 5;
const shouldStackOptions = keys => keys.some(k => k.length > MAX_CHAR_LENGTH);
const playAlert = () => {
  const APP_CONFIG = window.meetingClientSettings.public.app;
  return AudioService.playAlertSound("".concat(APP_CONFIG.cdn + APP_CONFIG.basename + APP_CONFIG.instanceId, "/resources/sounds/Poll.mp3"));
};
module.exportDefault({
  shouldStackOptions,
  pollAnswerIds: PollService.pollAnswerIds,
  pollTypes: PollService.pollTypes,
  isDefaultPoll: PollService.isDefaultPoll,
  playAlert
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/polling/styles.ts                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let mdPaddingY, smPaddingY, jumboPaddingY, smPaddingX, borderRadius, pollWidth, pollSmMargin, overlayIndex, overlayOpacity, pollIndex, lgPaddingY, pollBottomOffset, jumboPaddingX, pollColAmount, borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  jumboPaddingY(v) {
    jumboPaddingY = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  pollWidth(v) {
    pollWidth = v;
  },
  pollSmMargin(v) {
    pollSmMargin = v;
  },
  overlayIndex(v) {
    overlayIndex = v;
  },
  overlayOpacity(v) {
    overlayOpacity = v;
  },
  pollIndex(v) {
    pollIndex = v;
  },
  lgPaddingY(v) {
    lgPaddingY = v;
  },
  pollBottomOffset(v) {
    pollBottomOffset = v;
  },
  jumboPaddingX(v) {
    jumboPaddingX = v;
  },
  pollColAmount(v) {
    pollColAmount = v;
  },
  borderSize(v) {
    borderSize = v;
  }
}, 1);
let fontSizeSmall, fontSizeBase, fontSizeLarge;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeSmall(v) {
    fontSizeSmall = v;
  },
  fontSizeBase(v) {
    fontSizeBase = v;
  },
  fontSizeLarge(v) {
    fontSizeLarge = v;
  }
}, 2);
let colorText, colorBlueLight, colorGrayLighter, colorOffWhite, colorGrayDark, colorWhite, colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorText(v) {
    colorText = v;
  },
  colorBlueLight(v) {
    colorBlueLight = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  colorGrayDark(v) {
    colorGrayDark = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 3);
let hasPhoneDimentions;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  hasPhoneDimentions(v) {
    hasPhoneDimentions = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
const PollingTitle = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  white-space: nowrap;\n  padding-bottom: ", ";\n  padding-top: ", ";\n  font-size: ", ";\n"])), mdPaddingY, mdPaddingY, fontSizeSmall);
const PollButtonWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  text-align: center;\n  padding: ", ";\n  width: 100%;\n"])), smPaddingY);
// @ts-ignore Until everything in Typescript
const PollingButton = styled(Button)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  width: 100%;\n  max-width: 9em;\n\n  @media ", " {\n    max-width: none;\n  }\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n"])), hasPhoneDimentions);
const Hidden = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: none;\n"])));
const TypedResponseWrapper = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  margin: ", " 0.5rem 0.5rem 0.5rem;\n  display: flex;\n  flex-flow: column;\n"])), jumboPaddingY);
const TypedResponseInput = styled.input(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  &:focus {\n    outline: none;\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ",\n      inset 0 0 0 1px ", ";\n  }\n\n  color: ", ";\n  -webkit-appearance: none;\n  padding: calc(", " * 2.5) calc(", " * 1.25);\n  border-radius: ", ";\n  font-size: ", ";\n  border: 1px solid ", ";\n  box-shadow: 0 0 0 1px ", ";\n  margin-bottom: 1rem;\n"])), borderSize, borderSize, colorBlueLight, colorPrimary, colorText, smPaddingY, smPaddingX, borderRadius, fontSizeBase, colorGrayLighter, colorGrayLighter);
// @ts-ignore Until everything in Typescript
const SubmitVoteButton = styled(Button)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  font-size: ", ";\n"])), fontSizeBase);
const PollingSecret = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  font-size: ", ";\n  max-width: ", ";\n"])), fontSizeSmall, pollWidth);
const MultipleResponseAnswersTable = styled.table(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  margin-left: auto;\n  margin-right: auto;\n"])));
const PollingCheckbox = styled.div(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  display: inline-block;\n  margin-right: ", ";\n"])), pollSmMargin);
const CheckboxContainer = styled.tr(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  margin-bottom: ", ";\n"])), pollSmMargin);
const MultipleResponseAnswersTableAnswerText = styled.td(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  text-align: left;\n"])));
const Overlay = styled.div(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral(["\n  position: absolute;\n  inset: 0;\n  z-index: ", ";\n  pointer-events: none;\n\n  @media ", " {\n    pointer-events: auto;\n    background-color: rgba(0, 0, 0, ", ");\n  }\n"])), overlayIndex, hasPhoneDimentions, overlayOpacity);
const QHeader = styled.span(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral(["\n  text-align: left;\n  position: relative;\n  left: ", ";\n"])), smPaddingY);
const QTitle = styled.div(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral(["\n  font-size: ", ";\n"])), fontSizeSmall);
const QText = styled.div(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral(["\n  color: ", ";\n  word-break: break-word;\n  white-space: pre-wrap;\n  font-size: ", ";\n  max-width: ", ";\n  padding-right: ", ";\n"])), colorText, fontSizeLarge, pollWidth, smPaddingX);
const PollingContainer = styled.aside(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral(["\n  pointer-events: auto;\n  min-width: ", ";\n  position: absolute;\n\n  z-index: ", ";\n  border: 1px solid ", ";\n  border-radius: ", ";\n  box-shadow: ", " 0px 0px ", ";\n  align-items: center;\n  text-align: center;\n  font-weight: 600;\n  padding: ", ";\n  background-color: ", ";\n  bottom: ", ";\n  right: ", ";\n\n  &:focus {\n    border: 1px solid ", ";\n  }\n\n  [dir=\"rtl\"] & {\n    left: ", ";\n    right: auto;\n  }\n\n  @media ", " {\n    bottom: auto;\n    right: auto;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    max-height: 95%;\n    overflow-y: auto;\n\n    [dir=\"rtl\"] & {\n      left: 50%;\n    }\n  }\n\n  ", "\n"])), pollWidth, pollIndex, colorOffWhite, borderRadius, colorGrayDark, lgPaddingY, mdPaddingY, colorWhite, pollBottomOffset, jumboPaddingX, colorPrimary, jumboPaddingX, hasPhoneDimentions, _ref => {
  let {
    autoWidth
  } = _ref;
  return autoWidth && "\n    width: auto;\n  ";
});
const PollingAnswers = styled.div(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral(["\n  display: grid;\n  grid-template-columns: repeat(", ", 1fr);\n\n  @media ", " {\n    grid-template-columns: repeat(1, 1fr);\n\n    & div button {\n      grid-column: 1;\n    }\n  }\n\n  z-index: 1;\n\n  ", "\n\n  ", "\n"])), pollColAmount, hasPhoneDimentions, _ref2 => {
  let {
    removeColumns
  } = _ref2;
  return removeColumns && "\n    grid-template-columns: auto;\n  ";
}, _ref3 => {
  let {
    stacked
  } = _ref3;
  return stacked && "\n    grid-template-columns: repeat(1, 1fr);\n\n    & div button {\n      max-width: none !important;\n    }\n  ";
});
module.exportDefault({
  PollingTitle,
  PollButtonWrapper,
  PollingButton,
  Hidden,
  TypedResponseWrapper,
  TypedResponseInput,
  SubmitVoteButton,
  PollingSecret,
  MultipleResponseAnswersTable,
  PollingCheckbox,
  CheckboxContainer,
  MultipleResponseAnswersTableAnswerText,
  Overlay,
  QHeader,
  QTitle,
  QText,
  PollingContainer,
  PollingAnswers
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"presence-adapter":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/presence-adapter/component.tsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let useAuthData;
module.link("/imports/ui/core/local-states/useAuthData", {
  default(v) {
    useAuthData = v;
  }
}, 1);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 2);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 3);
const PresenceAdapter = _ref => {
  let {
    children
  } = _ref;
  const [authData] = useAuthData();
  const [authSetted, setAuthSetted] = React.useState(false);
  useEffect(() => {
    const {
      authToken,
      logoutUrl,
      meetingId,
      sessionToken,
      userId,
      userName,
      extId,
      meetingName
    } = authData;
    Auth.clearCredentials();
    Auth.set(meetingId, userId, authToken, logoutUrl, sessionToken, userName, extId, meetingName);
    Auth.loggedIn = true;
    Session.setItem('userWillAuth', false);
    setAuthSetted(true);
  }, []);
  return authSetted ? children : null;
};
module.exportDefault(PresenceAdapter);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"raisehand-notifier":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/raisehand-notifier/component.jsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let toast;
module.link("react-toastify", {
  toast(v) {
    toast = v;
  }
}, 3);
let Icon;
module.link("/imports/ui/components/common/icon/component", {
  default(v) {
    Icon = v;
  }
}, 4);
let ENTER;
module.link("/imports/utils/keyCodes", {
  ENTER(v) {
    ENTER = v;
  }
}, 5);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 6);
let TooltipContainer;
module.link("/imports/ui/components/common/tooltip/container", {
  default(v) {
    TooltipContainer = v;
  }
}, 7);
const messages = defineMessages({
  lowerHandsLabel: {
    id: 'app.statusNotifier.lowerHands',
    description: 'text displayed to clear all raised hands'
  },
  lowerHandDescOneUser: {
    id: 'app.statusNotifier.lowerHandDescOneUser',
    description: 'text displayed to clear a single user raised hands'
  },
  raisedHandsTitle: {
    id: 'app.statusNotifier.raisedHandsTitle',
    description: 'heading for raised hands toast'
  },
  raisedHandDesc: {
    id: 'app.statusNotifier.raisedHandDesc',
    description: 'label for multiple users with raised hands'
  },
  raisedHandDescOneUser: {
    id: 'app.statusNotifier.raisedHandDescOneUser',
    description: 'label for a single user with raised hand'
  },
  and: {
    id: 'app.statusNotifier.and',
    description: 'used as conjunction word'
  }
});
const MAX_AVATAR_COUNT = 3;
class RaiseHandNotifier extends Component {
  constructor(props) {
    super(props);
    this.statusNotifierId = null;
    this.audio = new Audio("".concat(window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId, "/resources/sounds/bbb-handRaise.mp3"));
    this.renderRaisedHands = this.renderRaisedHands.bind(this);
    this.getRaisedHandNames = this.getRaisedHandNames.bind(this);
    this.raisedHandAvatars = this.raisedHandAvatars.bind(this);
  }
  componentDidUpdate(prevProps) {
    const {
      raiseHandUsers,
      raiseHandAudioAlert,
      raiseHandPushAlert,
      isViewer,
      isPresenter
    } = this.props;
    if (isViewer && !isPresenter) {
      if (this.statusNotifierId) toast.dismiss(this.statusNotifierId);
      return false;
    }
    if (raiseHandUsers.length === 0) {
      return this.statusNotifierId ? toast.dismiss(this.statusNotifierId) : null;
    }
    if (raiseHandAudioAlert && raiseHandUsers.length > prevProps.raiseHandUsers.length) {
      this.audio.play();
    }
    if (raiseHandPushAlert) {
      if (this.statusNotifierId) {
        return toast.update(this.statusNotifierId, {
          render: this.renderRaisedHands()
        });
      }
      this.statusNotifierId = toast(this.renderRaisedHands(), {
        onClose: () => {
          this.statusNotifierId = null;
        },
        autoClose: false,
        closeOnClick: false,
        closeButton: false,
        className: 'raiseHandToast'
      });
    }
    return true;
  }
  getRaisedHandNames() {
    const {
      raiseHandUsers,
      intl
    } = this.props;
    if (raiseHandUsers.length === 0) return '';
    const _names = raiseHandUsers.map(u => u.name);
    const {
      length
    } = _names;
    const and = intl.formatMessage(messages.and);
    let formattedNames = '';
    switch (length) {
      case 1:
        formattedNames = _names;
        break;
      case 2:
        formattedNames = _names.join(" ".concat(and, " "));
        break;
      case 3:
        formattedNames = _names.slice(0, length - 1).join(', ');
        formattedNames += " ".concat(and, " ").concat(_names.slice(length - 1));
        break;
      default:
        formattedNames = _names.slice(0, MAX_AVATAR_COUNT).join(', ');
        formattedNames += " ".concat(and, " ").concat(length - MAX_AVATAR_COUNT, "+ ");
        break;
    }
    const raisedHandMessageString = length === 1 ? messages.raisedHandDescOneUser : messages.raisedHandDesc;
    return intl.formatMessage(raisedHandMessageString, {
      0: formattedNames
    });
  }
  raisedHandAvatars() {
    const {
      raiseHandUsers,
      lowerUserHands,
      intl
    } = this.props;
    let users = raiseHandUsers;
    if (raiseHandUsers.length > MAX_AVATAR_COUNT) users = users.slice(0, MAX_AVATAR_COUNT);
    const avatars = users.map(u => /*#__PURE__*/React.createElement(TooltipContainer, {
      key: "statusToastAvatar-".concat(u.userId),
      title: intl.formatMessage(messages.lowerHandDescOneUser, {
        0: u.name
      })
    }, /*#__PURE__*/React.createElement(Styled.Avatar, {
      role: "button",
      tabIndex: 0,
      style: {
        backgroundColor: "".concat(u.color)
      },
      onClick: () => lowerUserHands(u.userId),
      onKeyDown: e => e.keyCode === ENTER ? lowerUserHands(u.userId) : null,
      "data-test": "avatarsWrapperAvatar",
      moderator: u.isModerator,
      avatar: u.avatar
    }, u.name.slice(0, 2))));
    if (raiseHandUsers.length > MAX_AVATAR_COUNT) {
      avatars.push( /*#__PURE__*/React.createElement(Styled.AvatarsExtra, {
        key: "statusToastAvatar-".concat(raiseHandUsers.length)
      }, raiseHandUsers.length));
    }
    return avatars;
  }
  renderRaisedHands() {
    const {
      raiseHandUsers,
      intl,
      lowerUserHands
    } = this.props;
    const formattedRaisedHands = this.getRaisedHandNames();
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Styled.ToastContent, null, /*#__PURE__*/React.createElement(Styled.IconWrapper, null, /*#__PURE__*/React.createElement(Icon, {
      iconName: "hand"
    })), /*#__PURE__*/React.createElement(Styled.AvatarWrapper, null, this.raisedHandAvatars())), /*#__PURE__*/React.createElement(Styled.ToastMessage, null, /*#__PURE__*/React.createElement("div", null, intl.formatMessage(messages.raisedHandsTitle)), formattedRaisedHands), /*#__PURE__*/React.createElement(Styled.ToastSeparator, null), /*#__PURE__*/React.createElement(Styled.ClearButton, {
      label: intl.formatMessage(messages.lowerHandsLabel),
      color: "default",
      size: "md",
      onClick: () => {
        raiseHandUsers.map(u => lowerUserHands(u.userId));
      },
      "data-test": "raiseHandRejection"
    }));
  }
  render() {
    return null;
  }
}
module.exportDefault(injectIntl(RaiseHandNotifier));
RaiseHandNotifier.propTypes = {
  intl: PropTypes.shape({
    formatMessage: PropTypes.func.isRequired
  }).isRequired,
  lowerUserHands: PropTypes.func.isRequired,
  raiseHandUsers: PropTypes.instanceOf(Array).isRequired,
  raiseHandAudioAlert: PropTypes.bool.isRequired,
  raiseHandPushAlert: PropTypes.bool.isRequired
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/raisehand-notifier/container.jsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let RaiseHandNotifier;
module.link("./component", {
  default(v) {
    RaiseHandNotifier = v;
  }
}, 2);
let SET_RAISE_HAND;
module.link("/imports/ui/core/graphql/mutations/userMutations", {
  SET_RAISE_HAND(v) {
    SET_RAISE_HAND = v;
  }
}, 3);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 4);
let RAISED_HAND_USERS;
module.link("./queries", {
  RAISED_HAND_USERS(v) {
    RAISED_HAND_USERS = v;
  }
}, 5);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 6);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 7);
let useSettings;
module.link("/imports/ui/services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 8);
let SETTINGS;
module.link("/imports/ui/services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 9);
const StatusNotifierContainer = props => {
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    presenter: user.presenter,
    isModerator: user.isModerator
  }));
  const isViewer = !(currentUserData !== null && currentUserData !== void 0 && currentUserData.isModerator);
  const isPresenter = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.presenter;
  const {
    data: usersData,
    error: usersError
  } = useDeduplicatedSubscription(RAISED_HAND_USERS);
  const raiseHandUsers = (usersData === null || usersData === void 0 ? void 0 : usersData.user) || [];
  if (usersError) {
    logger.error({
      logCode: 'raisehand_notifier_container_subscription_error',
      extraInfo: {
        usersError
      }
    }, 'Error on requesting raise hand data');
  }
  const [setRaiseHand] = useMutation(SET_RAISE_HAND);
  const lowerUserHands = userId => {
    setRaiseHand({
      variables: {
        userId,
        raiseHand: false
      }
    });
  };
  const {
    raiseHandAudioAlerts,
    raiseHandPushAlerts
  } = useSettings(SETTINGS.APPLICATION);
  return /*#__PURE__*/React.createElement(RaiseHandNotifier, _objectSpread(_objectSpread({}, props), {}, {
    raiseHandAudioAlert: raiseHandAudioAlerts,
    raiseHandPushAlert: raiseHandPushAlerts,
    isViewer,
    isPresenter,
    lowerUserHands,
    raiseHandUsers
  }));
};
module.exportDefault(StatusNotifierContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/raisehand-notifier/queries.jsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  RAISED_HAND_USERS: () => RAISED_HAND_USERS
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const RAISED_HAND_USERS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\nsubscription RaisedHandUsers {\n  user(\n    where: {\n      raiseHand: {_eq: true}\n    },\n    order_by: [\n      {raiseHandTime: asc_nulls_last},\n    ]) {\n    userId\n    name\n    color\n    presenter\n    isModerator\n    raiseHand\n    raiseHandTime\n  }\n}"])));
module.exportDefault({
  RAISED_HAND_USERS
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/raisehand-notifier/styles.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let avatarSide, borderSize, avatarInset, smPaddingX, toastIconSide, toastMargin, toastMarginMobile;
module.link("/imports/ui/stylesheets/styled-components/general", {
  avatarSide(v) {
    avatarSide = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  avatarInset(v) {
    avatarInset = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  },
  toastIconSide(v) {
    toastIconSide = v;
  },
  toastMargin(v) {
    toastMargin = v;
  },
  toastMarginMobile(v) {
    toastMarginMobile = v;
  }
}, 1);
let colorWhite, colorGrayLighter, colorGrayLight, colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorGrayLight(v) {
    colorGrayLight = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 2);
let fontSizeXL, fontSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeXL(v) {
    fontSizeXL = v;
  },
  fontSizeSmall(v) {
    fontSizeSmall = v;
  }
}, 3);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
let ToastStyled;
module.link("/imports/ui/components/common/toast/styles", {
  default(v) {
    ToastStyled = v;
  }
}, 6);
const Avatar = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  cursor: pointer;\n  outline: transparent;\n  outline-style: dotted;\n  outline-width: ", ";\n  width: ", ";\n  height: ", ";\n  color: ", ";\n  border-radius: 50%;\n  border: solid ", " ", ";\n  margin-left: ", ";\n  text-align: center;\n  padding: 5px 0;\n\n  &:hover,\n  &:focus {\n    border: solid ", " ", ";\n  }\n"])), borderSize, avatarSide, avatarSide, colorWhite, borderSize, colorWhite, avatarInset, borderSize, colorGrayLighter);
const AvatarsExtra = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  outline: transparent;\n  outline-style: dotted;\n  outline-width: ", ";\n  width: ", ";\n  height: ", ";\n  color: ", ";\n  border-radius: 50%;\n  border: solid ", " ", ";\n  margin-left: ", ";\n  text-align: center;\n  padding: 5px 0;\n"])), colorGrayLight, borderSize, avatarSide, avatarSide, colorWhite, borderSize, colorWhite, avatarInset);
const ToastContent = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin-right: ", ";\n  display: flex;\n  justify-content: space-between;\n  // justify-content: flex-end;\n  [dir=\"rtl\"] & {\n    margin-right: 0;\n    margin-left: ", ";\n  }\n"])), smPaddingX, smPaddingX);
const IconWrapper = styled.div(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  background-color: ", ";\n  width: ", ";\n  height: ", ";\n  border-radius: 50%;\n  \n  & > i {\n    position: relative;\n    color: ", ";\n    top: ", ";\n    left: ", ";\n    font-size: ", ";\n  \n    [dir=\"rtl\"] & {\n      left: 0;\n      right: 10px;\n    }\n    @media ", " {\n      {\n        top: ", ";\n        left: ", ";\n\n        [dir=\"rtl\"] & {\n          left: 0;\n          right: ", ";\n        }\n      }\n    }\n  }\n"])), colorPrimary, toastIconSide, toastIconSide, colorWhite, toastMargin, toastMargin, fontSizeXL, smallOnly, toastMarginMobile, toastMarginMobile, toastMargin);
const ToastMessage = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  font-size: ", ";\n  margin-top: ", ";\n\n  & > div {\n    font-weight: bold;\n  }\n"])), fontSizeSmall, toastMargin);
const ClearButton = styled(Button)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  position: relative;\n  width: 100%;\n  margin-top: ", ";\n  color: ", ";\n\n  &:focus,\n  &:hover,\n  &:active {\n    color: ", ";\n    box-shadow: 0;\n  }\n"])), toastMargin, colorPrimary, colorPrimary);
const AvatarWrapper = styled.div(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  display: flex;\n"])));
const ToastSeparator = styled(ToastStyled.Separator)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([""])));
module.exportDefault({
  Avatar,
  AvatarsExtra,
  ToastContent,
  IconWrapper,
  ToastMessage,
  ClearButton,
  ToastSeparator,
  AvatarWrapper
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"recording":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/recording/component.tsx                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let ConfirmationModal;
module.link("/imports/ui/components/common/modal/confirmation/component", {
  default(v) {
    ConfirmationModal = v;
  }
}, 2);
const intlMessages = defineMessages({
  startTitle: {
    id: 'app.recording.startTitle',
    description: 'start recording title'
  },
  stopTitle: {
    id: 'app.recording.stopTitle',
    description: 'stop recording title'
  },
  resumeTitle: {
    id: 'app.recording.resumeTitle',
    description: 'resume recording title'
  },
  startDescription: {
    id: 'app.recording.startDescription',
    description: 'start recording description'
  },
  stopDescription: {
    id: 'app.recording.stopDescription',
    description: 'stop recording description'
  },
  loadingTitle: {
    id: 'app.recording.loadingTitle',
    description: 'recording data is loading'
  },
  loadingDescription: {
    id: 'app.recording.loadingDescription',
    description: 'recording data is loading'
  },
  errorTitle: {
    id: 'app.recording.errorTitle',
    description: 'recording data error'
  },
  errorDescription: {
    id: 'app.recording.errorDescription',
    description: 'recording data error'
  },
  cancelLabel: {
    id: 'app.recording.cancelLabel',
    description: 'cancel button label'
  }
});
const RecordingComponent = props => {
  const {
    amIModerator,
    connected,
    isOpen,
    recordingStatus,
    recordingTime,
    priority,
    onRequestClose,
    toggleRecording,
    setIsOpen
  } = props;
  const intl = useIntl();
  let title;
  let description;
  let cancelButtonLabel;
  if (!amIModerator) return null;
  if (recordingStatus) {
    description = intl.formatMessage(intlMessages.stopDescription);
    title = intl.formatMessage(intlMessages.stopTitle);
  } else {
    description = intl.formatMessage(intlMessages.startDescription);
    title = recordingTime > 0 ? intl.formatMessage(intlMessages.resumeTitle) : intl.formatMessage(intlMessages.startTitle);
  }
  return /*#__PURE__*/React.createElement(ConfirmationModal, {
    intl: intl,
    onConfirm: toggleRecording,
    title: title,
    description: description,
    disableConfirmButton: !connected,
    cancelButtonLabel: cancelButtonLabel,
    isOpen,
    onRequestClose,
    priority,
    setIsOpen
  });
};
module.exportDefault(RecordingComponent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/recording/container.tsx                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let useMutation, useReactiveVar;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
let RecordingComponent;
module.link("./component", {
  default(v) {
    RecordingComponent = v;
  }
}, 2);
let SET_RECORDING_STATUS;
module.link("./mutations", {
  SET_RECORDING_STATUS(v) {
    SET_RECORDING_STATUS = v;
  }
}, 3);
let useDeduplicatedSubscription;
module.link("/imports/ui/core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 4);
let ConnectionStatus;
module.link("/imports/ui/core/graphql/singletons/connectionStatus", {
  default(v) {
    ConnectionStatus = v;
  }
}, 5);
let GET_MEETING_RECORDING_DATA;
module.link("/imports/ui/components/nav-bar/nav-bar-graphql/recording-indicator/queries", {
  GET_MEETING_RECORDING_DATA(v) {
    GET_MEETING_RECORDING_DATA = v;
  }
}, 6);
const RecordingContainer = props => {
  var _recordingData$meetin, _recordingData$meetin2, _recordingData$meetin3, _recordingData$meetin4;
  const {
    amIModerator,
    isOpen,
    onRequestClose,
    priority,
    setIsOpen
  } = props;
  const [setRecordingStatus] = useMutation(SET_RECORDING_STATUS);
  const connected = useReactiveVar(ConnectionStatus.getConnectedStatusVar());
  const {
    data: recordingData
  } = useDeduplicatedSubscription(GET_MEETING_RECORDING_DATA);
  const recording = (_recordingData$meetin = recordingData === null || recordingData === void 0 ? void 0 : (_recordingData$meetin2 = recordingData.meeting_recording[0]) === null || _recordingData$meetin2 === void 0 ? void 0 : _recordingData$meetin2.isRecording) !== null && _recordingData$meetin !== void 0 ? _recordingData$meetin : false;
  const time = (_recordingData$meetin3 = recordingData === null || recordingData === void 0 ? void 0 : (_recordingData$meetin4 = recordingData.meeting_recording[0]) === null || _recordingData$meetin4 === void 0 ? void 0 : _recordingData$meetin4.previousRecordedTimeInSeconds) !== null && _recordingData$meetin3 !== void 0 ? _recordingData$meetin3 : 0;
  const toggleRecording = () => {
    setRecordingStatus({
      variables: {
        recording: !recording
      }
    });
    setIsOpen(false);
  };
  return /*#__PURE__*/React.createElement(RecordingComponent, {
    amIModerator,
    connected,
    isOpen,
    onRequestClose,
    priority,
    recordingTime: time,
    recordingStatus: recording,
    setIsOpen,
    toggleRecording
  });
};
module.exportDefault(RecordingContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mutations.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/recording/mutations.jsx                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  SET_RECORDING_STATUS: () => SET_RECORDING_STATUS
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const SET_RECORDING_STATUS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation SetRecordingStatus($recording: Boolean!) {\n    meetingRecordingSetStatus(\n      recording: $recording,\n    )\n  }\n"])));
module.exportDefault({
  SET_RECORDING_STATUS
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"screenreader-alert":{"adapter.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenreader-alert/adapter.tsx                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let isEqual;
module.link("radash", {
  isEqual(v) {
    isEqual = v;
  }
}, 1);
let defineMessages, useIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  useIntl(v) {
    useIntl = v;
  }
}, 2);
let UNREAD_CHATS_SUBSCRIPTION;
module.link("./queries", {
  UNREAD_CHATS_SUBSCRIPTION(v) {
    UNREAD_CHATS_SUBSCRIPTION = v;
  }
}, 3);
let usePreviousValue;
module.link("/imports/ui/hooks/usePreviousValue", {
  default(v) {
    usePreviousValue = v;
  }
}, 4);
let addAlert;
module.link("./service", {
  addAlert(v) {
    addAlert = v;
  }
}, 5);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 6);
const intlMessages = defineMessages({
  newMsgAria: {
    id: 'app.navBar.toggleUserList.newMsgAria',
    description: 'label for new message screen reader alert'
  },
  publicChatName: {
    id: 'app.chat.titlePublic',
    description: 'label for public chat name'
  }
});
const ScreenReaderAlertAdapter = () => {
  const {
    data,
    error,
    loading
  } = useDeduplicatedSubscription(UNREAD_CHATS_SUBSCRIPTION);
  const previousData = usePreviousValue(data);
  const intl = useIntl();
  useEffect(() => {
    if (!loading && !error && data && !isEqual(data, previousData)) {
      const {
        chat: chats
      } = data;
      const {
        chat: previousChats
      } = previousData !== null && previousData !== void 0 ? previousData : {};
      chats.forEach(chat => {
        const previousChat = previousChats && previousChats.find(c => c.chatId === chat.chatId);
        if (!previousChat || chat.totalUnread > previousChat.totalUnread) {
          var _chat$participant$nam, _chat$participant;
          const name = (_chat$participant$nam = (_chat$participant = chat.participant) === null || _chat$participant === void 0 ? void 0 : _chat$participant.name) !== null && _chat$participant$nam !== void 0 ? _chat$participant$nam : intl.formatMessage(intlMessages.publicChatName);
          addAlert("".concat(intl.formatMessage(intlMessages.newMsgAria, {
            0: name
          })));
        }
      });
    }
  }, [data, previousData, error, loading]);
  return null;
};
module.exportDefault(ScreenReaderAlertAdapter);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenreader-alert/component.tsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let createPortal;
module.link("react-dom", {
  createPortal(v) {
    createPortal = v;
  }
}, 1);
let shiftAlert;
module.link("./service", {
  shiftAlert(v) {
    shiftAlert = v;
  }
}, 2);
const ARIA_ALERT_EXT_TIMEOUT = 15000;
const ScreenReaderAlert = _ref => {
  let {
    olderAlert
  } = _ref;
  useEffect(() => {
    if (olderAlert) setTimeout(() => shiftAlert(), ARIA_ALERT_EXT_TIMEOUT);
  }, [olderAlert === null || olderAlert === void 0 ? void 0 : olderAlert.id]);
  const ariaAlertsElement = document.getElementById('aria-polite-alert');
  return olderAlert && olderAlert.text && ariaAlertsElement !== null ? /*#__PURE__*/createPortal(olderAlert.text, document.getElementById('aria-polite-alert')) : null;
};
module.exportDefault(ScreenReaderAlert);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenreader-alert/container.tsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let ScreenReaderAlert;
module.link("./component", {
  default(v) {
    ScreenReaderAlert = v;
  }
}, 1);
let useOlderAlert;
module.link("./queue", {
  useOlderAlert(v) {
    useOlderAlert = v;
  }
}, 2);
const ScreenReaderAlertContainer = () => {
  const olderAlert = useOlderAlert();
  return /*#__PURE__*/React.createElement(ScreenReaderAlert, {
    olderAlert: olderAlert
  });
};
module.exportDefault(ScreenReaderAlertContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queries.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenreader-alert/queries.ts                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  UNREAD_CHATS_SUBSCRIPTION: () => UNREAD_CHATS_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const UNREAD_CHATS_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription unreadChatsSubscription {\n    chat(\n      where: {\n        totalUnread: { _gt: 0 },\n        visible: { _eq: true }\n      }\n    ) {\n      chatId\n      totalUnread\n      participant {\n        name\n      }\n    }\n  }\n"])));
module.exportDefault({
  UNREAD_CHATS_SUBSCRIPTION
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"queue.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenreader-alert/queue.ts                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  push: () => push,
  shift: () => shift,
  useOlderAlert: () => useOlderAlert
});
let createUseLocalState;
module.link("/imports/ui/core/local-states/createUseLocalState", {
  default(v) {
    createUseLocalState = v;
  }
}, 0);
const [useScreenReaderAlertState, changeScreenReaderAlertQueue, readScreenReaderAlertQueue] = createUseLocalState([]);
const push = alert => {
  const queue = readScreenReaderAlertQueue();
  queue.push(alert);
  changeScreenReaderAlertQueue([...queue]);
};
const shift = () => {
  const queue = readScreenReaderAlertQueue();
  queue.shift();
  changeScreenReaderAlertQueue([...queue]);
};
const useOlderAlert = () => {
  const state = useScreenReaderAlertState();
  const queue = state[0];
  return queue[0];
};
module.exportDefault({
  push,
  shift,
  useOlderAlert
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/screenreader-alert/service.ts                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  addAlert: () => addAlert,
  shiftAlert: () => shiftAlert
});
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 0);
let Queue;
module.link("./queue", {
  default(v) {
    Queue = v;
  }
}, 1);
const addAlert = text => {
  const alert = {
    id: uniqueId('alert-'),
    text
  };
  Queue.push(alert);
};
const shiftAlert = () => {
  Queue.shift();
};
module.exportDefault({
  addAlert,
  shiftAlert
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"settings-loader":{"component.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/settings-loader/component.tsx                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let uuid;
module.link("uuid", {
  v4(v) {
    uuid = v;
  }
}, 1);
let setMeetingSettings;
module.link("/imports/ui/core/local-states/useMeetingSettings", {
  setMeetingSettings(v) {
    setMeetingSettings = v;
  }
}, 2);
let ErrorScreen;
module.link("/imports/ui/components/error-screen/component", {
  ErrorScreen(v) {
    ErrorScreen = v;
  }
}, 3);
let LoadingScreen;
module.link("/imports/ui/components/common/loading-screen/component", {
  default(v) {
    LoadingScreen = v;
  }
}, 4);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 5);
let BBBWeb;
module.link("/imports/api/bbb-web-api", {
  default(v) {
    BBBWeb = v;
  }
}, 6);
const connectionTimeout = 60000;
const SettingsLoader = props => {
  const {
    children
  } = props;
  const [settingsFetched, setSettingsFetched] = React.useState(false);
  const [error, setError] = React.useState(null);
  const [loading, setLoading] = React.useState(false);
  const timeoutRef = React.useRef();
  useEffect(() => {
    setLoading(true);
    const controller = new AbortController();
    timeoutRef.current = setTimeout(() => {
      controller.abort();
      setError('Timeout fetching client settings');
      setLoading(false);
    }, connectionTimeout);
    const clientSessionUUID = uuid();
    sessionStorage.setItem('clientSessionUUID', clientSessionUUID);
    const urlParams = new URLSearchParams(window.location.search);
    const sessionToken = urlParams.get('sessionToken');
    if (!sessionToken) {
      setLoading(false);
      setError('Missing session token');
      return;
    }
    BBBWeb.index(controller.signal).then(_ref => {
      let {
        data
      } = _ref;
      const url = new URL("".concat(data.graphqlApiUrl, "/clientSettings"));
      fetch(url, {
        method: 'get',
        credentials: 'include',
        headers: {
          'x-session-token': sessionToken !== null && sessionToken !== void 0 ? sessionToken : ''
        },
        signal: controller.signal
      }).then(resp => resp.json()).then(data => {
        clearTimeout(timeoutRef.current);
        const settings = data === null || data === void 0 ? void 0 : data.meeting_clientSettings[0].clientSettingsJson;
        window.meetingClientSettings = JSON.parse(JSON.stringify(settings));
        setMeetingSettings(settings);
        setLoading(false);
        setSettingsFetched(true);
      }).catch(() => {
        setLoading(false);
        setError('Error fetching client settings');
        Session.setItem('errorMessageDescription', 'meeting_ended');
      });
    }).catch(error => {
      setLoading(false);
      setError('Error fetching GraphQL URL: '.concat(error.message || ''));
    });
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, settingsFetched ? children : null, error ? /*#__PURE__*/React.createElement(ErrorScreen, {
    endedReason: error,
    code: 403
  }) : null, loading ? /*#__PURE__*/React.createElement(LoadingScreen, null, /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'none'
    }
  }, "Loading...")) : null);
};
module.exportDefault(SettingsLoader);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"shortcut-help":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/shortcut-help/component.jsx                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 3);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 4);
let ModalSimple;
module.link("/imports/ui/components/common/modal/simple/component", {
  default(v) {
    ModalSimple = v;
  }
}, 5);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 6);
let StyledSettings;
module.link("../settings/styles", {
  default(v) {
    StyledSettings = v;
  }
}, 7);
let withShortcutHelper;
module.link("./service", {
  default(v) {
    withShortcutHelper = v;
  }
}, 8);
let useIsChatEnabled;
module.link("/imports/ui/services/features", {
  useIsChatEnabled(v) {
    useIsChatEnabled = v;
  }
}, 9);
let uniqueId;
module.link("/imports/utils/string-utils", {
  uniqueId(v) {
    uniqueId = v;
  }
}, 10);
const intlMessages = defineMessages({
  title: {
    id: 'app.shortcut-help.title',
    description: 'modal title label'
  },
  closeLabel: {
    id: 'app.shortcut-help.closeLabel',
    description: 'label for close button'
  },
  closeDesc: {
    id: 'app.shortcut-help.closeDesc',
    description: 'description for close button'
  },
  accessKeyNotAvailable: {
    id: 'app.shortcut-help.accessKeyNotAvailable',
    description: 'message shown in place of access key table if not supported'
  },
  comboLabel: {
    id: 'app.shortcut-help.comboLabel',
    description: 'heading for key combo column'
  },
  alternativeLabel: {
    id: 'app.shortcut-help.alternativeLabel',
    description: 'heading for key alternatives column'
  },
  functionLabel: {
    id: 'app.shortcut-help.functionLabel',
    description: 'heading for shortcut function column'
  },
  openoptions: {
    id: 'app.shortcut-help.openOptions',
    description: 'describes the open options shortcut'
  },
  toggleuserlist: {
    id: 'app.shortcut-help.toggleUserList',
    description: 'describes the toggle userlist shortcut'
  },
  togglemute: {
    id: 'app.shortcut-help.toggleMute',
    description: 'describes the toggle mute shortcut'
  },
  togglepublicchat: {
    id: 'app.shortcut-help.togglePublicChat',
    description: 'describes the toggle public chat shortcut'
  },
  hideprivatechat: {
    id: 'app.shortcut-help.hidePrivateChat',
    description: 'describes the hide public chat shortcut'
  },
  closeprivatechat: {
    id: 'app.shortcut-help.closePrivateChat',
    description: 'describes the close private chat shortcut'
  },
  openactions: {
    id: 'app.shortcut-help.openActions',
    description: 'describes the open actions shortcut'
  },
  opendebugwindow: {
    id: 'app.shortcut-help.openDebugWindow',
    description: 'describes the open debug window shortcut'
  },
  openstatus: {
    id: 'app.shortcut-help.openStatus',
    description: 'describes the open status shortcut'
  },
  joinaudio: {
    id: 'app.audio.joinAudio',
    description: 'describes the join audio shortcut'
  },
  leaveaudio: {
    id: 'app.audio.leaveAudio',
    description: 'describes the leave audio shortcut'
  },
  raisehand: {
    id: 'app.shortcut-help.raiseHand',
    description: 'describes the toggle raise hand shortcut'
  },
  togglePan: {
    id: 'app.shortcut-help.togglePan',
    description: 'describes the toggle pan shortcut'
  },
  toggleFullscreen: {
    id: 'app.shortcut-help.toggleFullscreen',
    description: 'describes the toggle full-screen shortcut'
  },
  nextSlideDesc: {
    id: 'app.shortcut-help.nextSlideDesc',
    description: 'describes the next slide shortcut'
  },
  previousSlideDesc: {
    id: 'app.shortcut-help.previousSlideDesc',
    description: 'describes the previous slide shortcut'
  },
  togglePanKey: {
    id: 'app.shortcut-help.togglePanKey',
    description: 'describes the toggle pan shortcut key'
  },
  toggleFullscreenKey: {
    id: 'app.shortcut-help.toggleFullscreenKey',
    description: 'describes the toggle full-screen shortcut key'
  },
  nextSlideKey: {
    id: 'app.shortcut-help.nextSlideKey',
    description: 'describes the next slide shortcut key'
  },
  previousSlideKey: {
    id: 'app.shortcut-help.previousSlideKey',
    description: 'describes the previous slide shortcut key'
  },
  select: {
    id: 'app.shortcut-help.select',
    description: 'describes the selection tool shortcut key'
  },
  pencil: {
    id: 'app.shortcut-help.pencil',
    description: 'describes the pencil tool shortcut key'
  },
  eraser: {
    id: 'app.shortcut-help.eraser',
    description: 'describes the eraser tool shortcut key'
  },
  rectangle: {
    id: 'app.shortcut-help.rectangle',
    description: 'describes the rectangle shape tool shortcut key'
  },
  elipse: {
    id: 'app.shortcut-help.elipse',
    description: 'describes the elipse shape tool shortcut key'
  },
  triangle: {
    id: 'app.shortcut-help.triangle',
    description: 'describes the triangle shape tool shortcut key'
  },
  line: {
    id: 'app.shortcut-help.line',
    description: 'describes the line shape tool shortcut key'
  },
  arrow: {
    id: 'app.shortcut-help.arrow',
    description: 'describes the arrow shape tool shortcut key'
  },
  text: {
    id: 'app.shortcut-help.text',
    description: 'describes the text tool shortcut key'
  },
  note: {
    id: 'app.shortcut-help.note',
    description: 'describes the sticky note shortcut key'
  },
  general: {
    id: 'app.shortcut-help.general',
    description: 'general tab heading'
  },
  presentation: {
    id: 'app.shortcut-help.presentation',
    description: 'presentation tab heading'
  },
  whiteboard: {
    id: 'app.shortcut-help.whiteboard',
    description: 'whiteboard tab heading'
  },
  zoomIn: {
    id: 'app.shortcut-help.zoomIn',
    description: 'describes the zoom in shortcut key'
  },
  zoomOut: {
    id: 'app.shortcut-help.zoomOut',
    description: 'describes the zoom out shortcut key'
  },
  zoomFit: {
    id: 'app.shortcut-help.zoomFit',
    description: 'describes the zoom to fit shortcut key'
  },
  zoomSelect: {
    id: 'app.shortcut-help.zoomSelect',
    description: 'describes the zoom to selection shortcut key'
  },
  flipH: {
    id: 'app.shortcut-help.flipH',
    description: 'describes the flip horozontally shortcut key'
  },
  flipV: {
    id: 'app.shortcut-help.flipV',
    description: 'describes the flip vertically shortcut key'
  },
  lock: {
    id: 'app.shortcut-help.lock',
    description: 'describes the lock / unlock shape shortcut key'
  },
  moveToFront: {
    id: 'app.shortcut-help.moveToFront',
    description: 'describes the move to front shortcut key'
  },
  moveToBack: {
    id: 'app.shortcut-help.moveToBack',
    description: 'describes the move to back shortcut key'
  },
  moveForward: {
    id: 'app.shortcut-help.moveForward',
    description: 'describes the move forward shortcut key'
  },
  moveBackward: {
    id: 'app.shortcut-help.moveBackward',
    description: 'describes the move backward shortcut key'
  },
  undo: {
    id: 'app.shortcut-help.undo',
    description: 'describes the undo shortcut key'
  },
  redo: {
    id: 'app.shortcut-help.redo',
    description: 'describes the redo shortcut key'
  },
  cut: {
    id: 'app.shortcut-help.cut',
    description: 'describes the cut shortcut key'
  },
  copy: {
    id: 'app.shortcut-help.copy',
    description: 'describes the cut shortcut key'
  },
  paste: {
    id: 'app.shortcut-help.paste',
    description: 'describes the paste shortcut key'
  },
  selectAll: {
    id: 'app.shortcut-help.selectAll',
    description: 'describes the select all shortcut key'
  },
  delete: {
    id: 'app.shortcut-help.delete',
    description: 'describes the delete shortcut key'
  },
  duplicate: {
    id: 'app.shortcut-help.duplicate',
    description: 'describes the duplicate shortcut key'
  }
});
const renderItem = (func, key) => {
  return /*#__PURE__*/React.createElement("tr", {
    key: uniqueId('hotkey-item-')
  }, /*#__PURE__*/React.createElement(Styled.DescCell, null, func), /*#__PURE__*/React.createElement(Styled.KeyCell, null, key));
};
const renderItemWhiteBoard = (func, key, alt) => {
  return /*#__PURE__*/React.createElement("tr", {
    key: uniqueId('hotkey-item-')
  }, /*#__PURE__*/React.createElement(Styled.DescCell, null, func), /*#__PURE__*/React.createElement(Styled.KeyCell, null, key), /*#__PURE__*/React.createElement(Styled.KeyCell, null, alt));
};
const ShortcutHelpComponent = _ref => {
  let {
    intl = {},
    shortcuts,
    isOpen,
    onRequestClose,
    priority
  } = _ref;
  const {
    browserName
  } = browserInfo;
  const {
    isIos,
    isMacos
  } = deviceInfo;
  const [selectedTab, setSelectedTab] = React.useState(0);
  const isChatEnabled = useIsChatEnabled();
  let accessMod = null;

  // different browsers use different access modifier keys
  // on different systems when using accessKey property.
  // Overview how different browsers behave: https://www.w3schools.com/jsref/prop_html_accesskey.asp
  switch (browserName) {
    case 'Chrome':
    case 'Microsoft Edge':
      accessMod = 'Alt';
      break;
    case 'Firefox':
      accessMod = 'Alt + Shift';
      break;
    default:
      break;
  }

  // all Browsers on iOS are using Control + Alt as access modifier
  if (isIos) {
    accessMod = 'Control + Alt';
  }
  // all Browsers on MacOS are using Control + Option as access modifier
  if (isMacos) {
    accessMod = 'Control + Option';
  }
  const generalShortcutItems = shortcuts.map(shortcut => {
    if (!isChatEnabled && shortcut.descId.indexOf('Chat') !== -1) return null;
    return renderItem("".concat(intl.formatMessage(intlMessages["".concat(shortcut.descId.toLowerCase())])), "".concat(accessMod, " + ").concat(shortcut.accesskey));
  });
  const shortcutItems = [];
  shortcutItems.push(renderItem(intl.formatMessage(intlMessages.togglePan), intl.formatMessage(intlMessages.togglePanKey)));
  shortcutItems.push(renderItem(intl.formatMessage(intlMessages.toggleFullscreen), intl.formatMessage(intlMessages.toggleFullscreenKey)));
  shortcutItems.push(renderItem(intl.formatMessage(intlMessages.nextSlideDesc), intl.formatMessage(intlMessages.nextSlideKey)));
  shortcutItems.push(renderItem(intl.formatMessage(intlMessages.previousSlideDesc), intl.formatMessage(intlMessages.previousSlideKey)));
  const whiteboardShortcutItems = [];
  //tools
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.select), '1', 'V'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.pencil), '2', 'D, P'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.eraser), '3', 'E'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.rectangle), '4', 'R'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.elipse), '5', 'O'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.triangle), '6', 'G'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.line), '7', 'L'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.arrow), '8', 'A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.text), '9', 'T'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.note), '0', 'S'));
  //views
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.zoomIn), 'Ctrl +', 'Ctrl M. Wheel up'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.zoomOut), 'Ctrl -', 'Ctrl M. Wheel down'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.zoomFit), 'Shift 1', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.zoomSelect), 'Shift 2', 'N/A'));
  //transform
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.flipH), 'Shift H', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.flipV), 'Shift V', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.lock), 'Ctrl Shift L', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.moveToFront), 'Shift ]', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.moveForward), ']', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.moveBackward), '[', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.moveToBack), 'Shift [', 'N/A'));
  //edit
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.undo), 'Ctrl Z', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.redo), 'Ctrl Shift Z', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.cut), 'Ctrl X', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.copy), 'Ctrl C', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.paste), 'Ctrl V', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.selectAll), 'Ctrl A', 'N/A'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.delete), 'Del', 'Backspace'));
  whiteboardShortcutItems.push(renderItemWhiteBoard(intl.formatMessage(intlMessages.duplicate), 'Ctrl D', 'N/A'));
  return /*#__PURE__*/React.createElement(ModalSimple, {
    contentLabel: intl.formatMessage(intlMessages.title),
    dismiss: {
      label: intl.formatMessage(intlMessages.closeLabel),
      description: intl.formatMessage(intlMessages.closeDesc)
    },
    title: intl.formatMessage(intlMessages.title),
    isOpen,
    onRequestClose,
    priority
  }, /*#__PURE__*/React.createElement(Styled.SettingsTabs, {
    onSelect: tab => setSelectedTab(tab),
    selectedIndex: selectedTab,
    role: "presentation"
  }, /*#__PURE__*/React.createElement(StyledSettings.SettingsTabList, null, /*#__PURE__*/React.createElement(StyledSettings.SettingsTabSelector, {
    selectedClassName: "is-selected"
  }, /*#__PURE__*/React.createElement(StyledSettings.SettingsIcon, {
    iconName: "application"
  }), /*#__PURE__*/React.createElement("span", {
    id: "appicationTab"
  }, intl.formatMessage(intlMessages.general))), /*#__PURE__*/React.createElement(StyledSettings.SettingsTabSelector, {
    selectedClassName: "is-selected"
  }, /*#__PURE__*/React.createElement(StyledSettings.SettingsIcon, {
    iconName: "presentation"
  }), /*#__PURE__*/React.createElement("span", {
    id: "presentationTab"
  }, intl.formatMessage(intlMessages.presentation))), /*#__PURE__*/React.createElement(StyledSettings.SettingsTabSelector, {
    selectedClassName: "is-selected"
  }, /*#__PURE__*/React.createElement(StyledSettings.SettingsIcon, {
    iconName: "whiteboard"
  }), /*#__PURE__*/React.createElement("span", {
    id: "whiteboardTab"
  }, intl.formatMessage(intlMessages.whiteboard)))), /*#__PURE__*/React.createElement(Styled.TabPanel, {
    selectedClassName: "is-selected"
  }, !accessMod ? /*#__PURE__*/React.createElement("p", null, intl.formatMessage(intlMessages.accessKeyNotAvailable)) : /*#__PURE__*/React.createElement(Styled.TableWrapper, null, /*#__PURE__*/React.createElement(Styled.ShortcutTable, null, /*#__PURE__*/React.createElement("tbody", null, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("th", null, intl.formatMessage(intlMessages.functionLabel)), /*#__PURE__*/React.createElement("th", null, intl.formatMessage(intlMessages.comboLabel))), generalShortcutItems)))), /*#__PURE__*/React.createElement(Styled.TabPanel, {
    selectedClassName: "is-selected"
  }, /*#__PURE__*/React.createElement(Styled.TableWrapper, null, /*#__PURE__*/React.createElement(Styled.ShortcutTable, null, /*#__PURE__*/React.createElement("tbody", null, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("th", null, intl.formatMessage(intlMessages.functionLabel)), /*#__PURE__*/React.createElement("th", null, intl.formatMessage(intlMessages.comboLabel))), shortcutItems)))), /*#__PURE__*/React.createElement(Styled.TabPanel, {
    selectedClassName: "is-selected"
  }, /*#__PURE__*/React.createElement(Styled.TableWrapper, null, /*#__PURE__*/React.createElement(Styled.ShortcutTable, null, /*#__PURE__*/React.createElement("tbody", null, /*#__PURE__*/React.createElement("tr", null, /*#__PURE__*/React.createElement("th", null, intl.formatMessage(intlMessages.functionLabel)), /*#__PURE__*/React.createElement("th", null, intl.formatMessage(intlMessages.comboLabel)), /*#__PURE__*/React.createElement("th", null, intl.formatMessage(intlMessages.alternativeLabel))), whiteboardShortcutItems))))));
};
ShortcutHelpComponent.propTypes = {
  intl: PropTypes.object.isRequired,
  shortcuts: PropTypes.arrayOf(PropTypes.shape({
    accesskey: PropTypes.string.isRequired,
    descId: PropTypes.string.isRequired
  })).isRequired
};
module.exportDefault(withShortcutHelper(injectIntl(ShortcutHelpComponent)));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/shortcut-help/service.jsx                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 1);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 1);
const withShortcutHelper = (WrappedComponent, param) => props => {
  const BASE_SHORTCUTS = window.meetingClientSettings.public.app.shortcuts;
  const ENABLED_SHORTCUTS = getFromUserSettings('bbb_shortcuts', null);
  let shortcuts = Object.values(BASE_SHORTCUTS);
  if (ENABLED_SHORTCUTS) {
    shortcuts = Object.values(BASE_SHORTCUTS).map(el => {
      const obj = _objectSpread({}, el);
      obj.descId = obj.descId.toLowerCase();
      return obj;
    }).filter(el => ENABLED_SHORTCUTS.includes(el.descId.toLowerCase()));
  }
  if (param !== undefined) {
    if (!Array.isArray(param)) {
      shortcuts = shortcuts.filter(el => el.descId.toLowerCase() === param.toLowerCase()).map(el => el.accesskey).pop();
    } else {
      shortcuts = shortcuts.filter(el => param.map(p => p.toLowerCase()).includes(el.descId.toLowerCase())).reduce((acc, current) => {
        acc[current.descId.toLowerCase()] = current.accesskey;
        return acc;
      }, {});
    }
  }
  return /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, props, {
    shortcuts: shortcuts
  }));
};
module.exportDefault(withShortcutHelper);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/shortcut-help/styles.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  }
}, 1);
let colorOffWhite, colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorOffWhite(v) {
    colorOffWhite = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 2);
let Tabs;
module.link("react-tabs", {
  Tabs(v) {
    Tabs = v;
  }
}, 3);
let ScrollboxVertical;
module.link("/imports/ui/stylesheets/styled-components/scrollable", {
  ScrollboxVertical(v) {
    ScrollboxVertical = v;
  }
}, 4);
let StyledSettings;
module.link("../settings/styles", {
  default(v) {
    StyledSettings = v;
  }
}, 5);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 6);
const KeyCell = styled.td(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  text-align: center;\n  padding: ", ";\n  margin: auto;\n  width: 6rem;\n  min-width: 6rem;\n"])), smPaddingX);
const DescCell = styled.td(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  padding: ", ";\n  margin: auto;\n"])), smPaddingX);
const ShortcutTable = styled.table(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  border-collapse: collapse;\n  margin: 0;\n  width: 100%;\n\n  > tbody > tr:nth-child(even) {\n    background-color: ", ";\n    color: ", ";\n  }\n"])), colorOffWhite, colorPrimary);
const SettingsTabs = styled(Tabs)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n  justify-content: flex-start;\n  margin-top: 1rem;\n\n  @media ", " {\n    width: 100%;\n    flex-flow: column;\n  }\n"])), smallOnly);
const TableWrapper = styled(ScrollboxVertical)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  height: 50vh;\n  width: 100%;\n"])));
const TabPanel = styled(StyledSettings.SettingsTabPanel)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  margin-top: ", ";\n\n  @media ", " {\n    padding: 0;\n  }\n"])), smPaddingX, smallOnly);
module.exportDefault({
  KeyCell,
  DescCell,
  ShortcutTable,
  SettingsTabs,
  TableWrapper,
  TabPanel
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"sidebar-content":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/sidebar-content/component.jsx                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useState, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let Resizable;
module.link("re-resizable", {
  default(v) {
    Resizable = v;
  }
}, 2);
let ACTIONS, PANELS;
module.link("../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 3);
let ChatContainer;
module.link("/imports/ui/components/chat/chat-graphql/component", {
  default(v) {
    ChatContainer = v;
  }
}, 4);
let NotesContainer;
module.link("/imports/ui/components/notes/component", {
  default(v) {
    NotesContainer = v;
  }
}, 5);
let PollContainer;
module.link("/imports/ui/components/poll/container", {
  default(v) {
    PollContainer = v;
  }
}, 6);
let BreakoutRoomContainer;
module.link("../breakout-room/breakout-room/component", {
  default(v) {
    BreakoutRoomContainer = v;
  }
}, 7);
let TimerContainer;
module.link("/imports/ui/components/timer/panel/component", {
  default(v) {
    TimerContainer = v;
  }
}, 8);
let GuestUsersManagementPanel;
module.link("/imports/ui/components/waiting-users/waiting-users-graphql/component", {
  default(v) {
    GuestUsersManagementPanel = v;
  }
}, 9);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 10);
let ErrorBoundary;
module.link("/imports/ui/components/common/error-boundary/component", {
  default(v) {
    ErrorBoundary = v;
  }
}, 11);
let FallbackView;
module.link("/imports/ui/components/common/fallback-errors/fallback-view/component", {
  default(v) {
    FallbackView = v;
  }
}, 12);
let GenericContentSidekickContainer;
module.link("/imports/ui/components/generic-content/generic-sidekick-content/container", {
  default(v) {
    GenericContentSidekickContainer = v;
  }
}, 13);
const propTypes = {
  top: PropTypes.number.isRequired,
  left: PropTypes.number,
  right: PropTypes.number,
  zIndex: PropTypes.number.isRequired,
  minWidth: PropTypes.number.isRequired,
  width: PropTypes.number.isRequired,
  maxWidth: PropTypes.number.isRequired,
  height: PropTypes.number.isRequired,
  isResizable: PropTypes.bool.isRequired,
  resizableEdge: PropTypes.objectOf(PropTypes.bool).isRequired,
  contextDispatch: PropTypes.func.isRequired
};
const SidebarContent = props => {
  const {
    top,
    left = null,
    right = null,
    zIndex,
    minWidth,
    width,
    maxWidth,
    minHeight,
    height,
    maxHeight,
    isResizable,
    resizableEdge,
    contextDispatch,
    sidebarContentPanel,
    amIPresenter,
    isSharedNotesPinned,
    currentSlideId,
    amIModerator
  } = props;
  const [resizableWidth, setResizableWidth] = useState(width);
  const [resizableHeight, setResizableHeight] = useState(height);
  const [isResizing, setIsResizing] = useState(false);
  const [resizeStartWidth, setResizeStartWidth] = useState(0);
  const [resizeStartHeight, setResizeStartHeight] = useState(0);
  useEffect(() => {
    if (!isResizing) {
      setResizableWidth(width);
      setResizableHeight(height);
    }
  }, [width, height]);
  const setSidebarContentSize = (dWidth, dHeight) => {
    const newWidth = resizeStartWidth + dWidth;
    const newHeight = resizeStartHeight + dHeight;
    setResizableWidth(newWidth);
    setResizableHeight(newHeight);
    contextDispatch({
      type: ACTIONS.SET_SIDEBAR_CONTENT_SIZE,
      value: {
        width: newWidth,
        height: newHeight,
        browserWidth: window.innerWidth,
        browserHeight: window.innerHeight
      }
    });
  };
  const smallSidebar = width < maxWidth / 2;
  const pollDisplay = sidebarContentPanel === PANELS.POLL ? 'inherit' : 'none';
  return /*#__PURE__*/React.createElement(Resizable, {
    minWidth: minWidth,
    maxWidth: maxWidth,
    minHeight: minHeight,
    maxHeight: maxHeight,
    size: {
      width,
      height
    },
    enable: {
      top: isResizable && resizableEdge.top,
      left: isResizable && resizableEdge.left,
      bottom: isResizable && resizableEdge.bottom,
      right: isResizable && resizableEdge.right
    },
    handleWrapperClass: "resizeSidebarContentWrapper",
    onResizeStart: () => {
      setIsResizing(true);
      setResizeStartWidth(resizableWidth);
      setResizeStartHeight(resizableHeight);
    },
    onResize: function () {
      for (var _len = arguments.length, _ref = new Array(_len), _key = 0; _key < _len; _key++) {
        _ref[_key] = arguments[_key];
      }
      let [,,, delta] = _ref;
      return setSidebarContentSize(delta.width, delta.height);
    },
    onResizeStop: () => {
      setIsResizing(false);
      setResizeStartWidth(0);
      setResizeStartHeight(0);
    },
    style: {
      position: 'absolute',
      top,
      left,
      right,
      zIndex,
      width,
      height
    },
    handleStyles: {
      left: {
        height: '100vh'
      },
      right: {
        height: '100vh'
      }
    }
  }, sidebarContentPanel === PANELS.CHAT && /*#__PURE__*/React.createElement(ErrorBoundary, {
    Fallback: FallbackView
  }, /*#__PURE__*/React.createElement(ChatContainer, {
    width: width
  })), !isSharedNotesPinned && /*#__PURE__*/React.createElement(NotesContainer, {
    isToSharedNotesBeShow: sidebarContentPanel === PANELS.SHARED_NOTES
  }), sidebarContentPanel === PANELS.BREAKOUT && /*#__PURE__*/React.createElement(BreakoutRoomContainer, null), sidebarContentPanel === PANELS.TIMER && /*#__PURE__*/React.createElement(TimerContainer, {
    isModerator: amIModerator
  }), sidebarContentPanel === PANELS.WAITING_USERS && /*#__PURE__*/React.createElement(GuestUsersManagementPanel, null), sidebarContentPanel === PANELS.POLL && /*#__PURE__*/React.createElement(Styled.Poll, {
    style: {
      minWidth,
      top: '0',
      display: pollDisplay
    },
    id: "pollPanel"
  }, /*#__PURE__*/React.createElement(PollContainer, {
    smallSidebar: smallSidebar,
    amIPresenter: amIPresenter,
    currentSlideId: currentSlideId
  })), sidebarContentPanel.includes(PANELS.GENERIC_CONTENT_SIDEKICK) && /*#__PURE__*/React.createElement(GenericContentSidekickContainer, {
    genericSidekickContentId: sidebarContentPanel
  }));
};
SidebarContent.propTypes = propTypes;
module.exportDefault(SidebarContent);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/sidebar-content/container.jsx                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let SidebarContent;
module.link("./component", {
  default(v) {
    SidebarContent = v;
  }
}, 1);
let layoutSelectInput, layoutSelectOutput, layoutDispatch;
module.link("../layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 2);
let CURRENT_PRESENTATION_PAGE_SUBSCRIPTION;
module.link("/imports/ui/components/whiteboard/queries", {
  CURRENT_PRESENTATION_PAGE_SUBSCRIPTION(v) {
    CURRENT_PRESENTATION_PAGE_SUBSCRIPTION = v;
  }
}, 3);
let useCurrentUser;
module.link("/imports/ui/core/hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 4);
let useDeduplicatedSubscription;
module.link("../../core/hooks/useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 5);
const SidebarContentContainer = () => {
  const sidebarContentInput = layoutSelectInput(i => i.sidebarContent);
  const sidebarContentOutput = layoutSelectOutput(i => i.sidebarContent);
  const layoutContextDispatch = layoutDispatch();
  const {
    sidebarContentPanel
  } = sidebarContentInput;
  const {
    data: currentUserData
  } = useCurrentUser(user => ({
    presenter: user.presenter,
    isModerator: user.isModerator
  }));
  const amIPresenter = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.presenter;
  const amIModerator = currentUserData === null || currentUserData === void 0 ? void 0 : currentUserData.isModerator;
  const {
    data: presentationPageData
  } = useDeduplicatedSubscription(CURRENT_PRESENTATION_PAGE_SUBSCRIPTION);
  const presentationPage = (presentationPageData === null || presentationPageData === void 0 ? void 0 : presentationPageData.pres_page_curr[0]) || {};
  const currentSlideId = presentationPage === null || presentationPage === void 0 ? void 0 : presentationPage.pageId;
  return /*#__PURE__*/React.createElement(SidebarContent, _extends({}, sidebarContentOutput, {
    contextDispatch: layoutContextDispatch,
    sidebarContentPanel: sidebarContentPanel,
    amIPresenter: amIPresenter,
    amIModerator: amIModerator,
    currentSlideId: currentSlideId
  }));
};
module.exportDefault(SidebarContentContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/sidebar-content/styles.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let colorWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorWhite(v) {
    colorWhite = v;
  }
}, 1);
let borderSize, navbarHeight, smPaddingX;
module.link("/imports/ui/stylesheets/styled-components/general", {
  borderSize(v) {
    borderSize = v;
  },
  navbarHeight(v) {
    navbarHeight = v;
  },
  smPaddingX(v) {
    smPaddingX = v;
  }
}, 2);
let smallOnly, mediumUp;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  },
  mediumUp(v) {
    mediumUp = v;
  }
}, 3);
const Poll = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: absolute;\n  display: flex;\n  flex-flow: column;\n  overflow-y: auto;\n  overflow-x: hidden;\n  outline: transparent;\n  outline-width: ", ";\n  outline-style: solid;\n  order: 2;\n  height: 100%;\n  background-color: ", ";\n  min-width: 20em;\n  padding: ", ";\n\n  @media ", " {\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: 5;\n    height: auto;\n    top: ", ";\n    overflow: auto;\n     &.no-padding {\n      padding: 0;\n    }\n  }\n\n  @media ", " {\n    position: relative;\n    order: 1;\n  }\n"])), borderSize, colorWhite, smPaddingX, smallOnly, navbarHeight, mediumUp);
module.exportDefault({
  Poll
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"sidebar-navigation":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/sidebar-navigation/component.jsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useState, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let Resizable;
module.link("re-resizable", {
  default(v) {
    Resizable = v;
  }
}, 2);
let ACTIONS;
module.link("../layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 3);
let UserListContainer;
module.link("../user-list/container", {
  default(v) {
    UserListContainer = v;
  }
}, 4);
const propTypes = {
  top: PropTypes.number.isRequired,
  left: PropTypes.number,
  right: PropTypes.number,
  zIndex: PropTypes.number.isRequired,
  minWidth: PropTypes.number.isRequired,
  width: PropTypes.number.isRequired,
  maxWidth: PropTypes.number.isRequired,
  height: PropTypes.number.isRequired,
  isResizable: PropTypes.bool.isRequired,
  resizableEdge: PropTypes.objectOf(PropTypes.bool).isRequired,
  contextDispatch: PropTypes.func.isRequired
};
const SidebarNavigation = _ref => {
  let {
    top,
    left = null,
    right = null,
    zIndex,
    minWidth,
    width,
    maxWidth,
    height,
    isResizable,
    resizableEdge,
    contextDispatch
  } = _ref;
  const [resizableWidth, setResizableWidth] = useState(width);
  const [isResizing, setIsResizing] = useState(false);
  const [resizeStartWidth, setResizeStartWidth] = useState(0);
  useEffect(() => {
    if (!isResizing) setResizableWidth(width);
  }, [width]);
  const setSidebarNavWidth = dWidth => {
    const newWidth = resizeStartWidth + dWidth;
    setResizableWidth(newWidth);
    contextDispatch({
      type: ACTIONS.SET_SIDEBAR_NAVIGATION_SIZE,
      value: {
        width: newWidth,
        browserWidth: window.innerWidth,
        browserHeight: window.innerHeight
      }
    });
  };
  return /*#__PURE__*/React.createElement(Resizable, {
    minWidth: minWidth,
    maxWidth: maxWidth,
    size: {
      width,
      height
    },
    enable: {
      top: isResizable && resizableEdge.top,
      left: isResizable && resizableEdge.left,
      bottom: isResizable && resizableEdge.bottom,
      right: isResizable && resizableEdge.right
    },
    handleStyles: {
      right: {
        right: '-8px'
      }
    },
    handleWrapperClass: "resizeSidebarNavWrapper",
    onResizeStart: () => {
      setIsResizing(true);
      setResizeStartWidth(resizableWidth);
    },
    onResize: function () {
      for (var _len = arguments.length, _ref2 = new Array(_len), _key = 0; _key < _len; _key++) {
        _ref2[_key] = arguments[_key];
      }
      let [,,, delta] = _ref2;
      return setSidebarNavWidth(delta.width);
    },
    onResizeStop: () => {
      setIsResizing(false);
      setResizeStartWidth(0);
    },
    style: {
      position: 'absolute',
      top,
      left,
      right,
      zIndex,
      width,
      height
    }
  }, /*#__PURE__*/React.createElement(UserListContainer, null));
};
SidebarNavigation.propTypes = propTypes;
module.exportDefault(SidebarNavigation);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/sidebar-navigation/container.jsx                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let layoutDispatch, layoutSelectOutput;
module.link("../layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  },
  layoutSelectOutput(v) {
    layoutSelectOutput = v;
  }
}, 1);
let SidebarNavigation;
module.link("./component", {
  default(v) {
    SidebarNavigation = v;
  }
}, 2);
const SidebarNavigationContainer = () => {
  const sidebarNavigation = layoutSelectOutput(i => i.sidebarNavigation);
  const layoutContextDispatch = layoutDispatch();
  if (sidebarNavigation.display === false) return null;
  return /*#__PURE__*/React.createElement(SidebarNavigation, _extends({}, sidebarNavigation, {
    contextDispatch: layoutContextDispatch
  }));
};
module.exportDefault(SidebarNavigationContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"text-input":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/text-input/component.jsx                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, PureComponent;
module.link("react", {
  default(v) {
    React = v;
  },
  PureComponent(v) {
    PureComponent = v;
  }
}, 0);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 1);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 2);
let isMobile;
module.link("/imports/utils/deviceInfo", {
  isMobile(v) {
    isMobile = v;
  }
}, 3);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 4);
let ClickOutside;
module.link("/imports/ui/components/click-outside/component", {
  default(v) {
    ClickOutside = v;
  }
}, 5);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 6);
const propTypes = {
  placeholder: PropTypes.string,
  send: PropTypes.func.isRequired,
  emojiPickerDown: PropTypes.bool
};
const defaultProps = {
  placeholder: '',
  send: () => logger.warn({
    logCode: 'text_input_send_function'
  }, "Missing"),
  emojiPickerDown: false,
  enableEmoji: true
};
const messages = defineMessages({
  sendLabel: {
    id: 'app.textInput.sendLabel',
    description: 'Text input send button label'
  }
});
class TextInput extends PureComponent {
  constructor(props) {
    super(props);
    this.renderEmojiButton = () => {
      if (!this.emojiEnabled()) return null;
      return /*#__PURE__*/React.createElement(Styled.EmojiButtonWrapper, {
        onClick: () => this.handleEmojiButtonClick()
      }, /*#__PURE__*/React.createElement(Icon, {
        iconName: "happy"
      }));
    };
    this.state = {
      message: '',
      showEmojiPicker: false
    };
  }
  hasClickOutsideActions() {
    return this.emojiEnabled();
  }
  handleOnChange(e) {
    const message = e.target.value;
    this.setState({
      message
    });
  }
  handleOnClick() {
    const {
      send
    } = this.props;
    const {
      message
    } = this.state;
    send(message);
    this.setState({
      message: '',
      showEmojiPicker: false
    });
  }
  handleOnKeyDown(e) {
    if (e.keyCode === 13 && e.shiftKey === false) {
      e.preventDefault();
      this.handleOnClick();
    } else if (e.keyCode === 27) {
      //Escape key
      const {
        showEmojiPicker
      } = this.state;

      //if the emoji picker is opened, close it
      if (showEmojiPicker) {
        this.setState({
          showEmojiPicker: false
        });
      }
    }
  }
  handleEmojiButtonClick() {
    const {
      showEmojiPicker
    } = this.state;
    if (this.textarea) this.textarea.focus();
    this.setState({
      showEmojiPicker: !showEmojiPicker
    });
  }
  handleEmojiSelect(emojiObject) {
    const {
      message
    } = this.state;
    if (this.textarea) this.textarea.focus();
    this.setState({
      message: message + emojiObject.native
    });
  }
  handleClickOutside() {
    if (this.emojiEnabled()) {
      const {
        showEmojiPicker
      } = this.state;
      if (showEmojiPicker) {
        this.setState({
          showEmojiPicker: false
        });
      }
    }
  }
  emojiEnabled() {
    if (isMobile) return false;
    const EMOJI_BUTTON = window.meetingClientSettings.public.app.enableEmojiButton;
    const {
      enableEmoji
    } = this.props;
    return enableEmoji && EMOJI_BUTTON;
  }
  renderEmojiPicker() {
    const {
      showEmojiPicker
    } = this.state;
    if (this.emojiEnabled() && showEmojiPicker) {
      return /*#__PURE__*/React.createElement(EmojiPicker, {
        onEmojiSelect: emojiObject => this.handleEmojiSelect(emojiObject)
      });
    }
    return null;
  }
  renderInput() {
    const {
      intl,
      maxLength,
      placeholder,
      emojiPickerDown
    } = this.props;
    const {
      message
    } = this.state;
    return /*#__PURE__*/React.createElement(Styled.Wrapper, null, /*#__PURE__*/React.createElement(Styled.TextArea, {
      emojiEnabled: this.emojiEnabled(),
      maxLength: maxLength,
      onChange: e => this.handleOnChange(e),
      onKeyDown: e => this.handleOnKeyDown(e),
      onPaste: e => {
        e.stopPropagation();
      },
      onCut: e => {
        e.stopPropagation();
      },
      onCopy: e => {
        e.stopPropagation();
      },
      placeholder: placeholder,
      value: message
    }), /*#__PURE__*/React.createElement(Styled.TextInputButton, {
      circle: true,
      color: "primary",
      hideLabel: true,
      icon: "send",
      label: intl.formatMessage(messages.sendLabel),
      onClick: () => this.handleOnClick()
    }));
  }
  render() {
    return this.hasClickOutsideActions() ? /*#__PURE__*/React.createElement(ClickOutside, {
      onClick: () => this.handleClickOutside()
    }, this.renderInput()) : this.renderInput();
  }
}
TextInput.propTypes = propTypes;
TextInput.defaultProps = defaultProps;
module.exportDefault(injectIntl(TextInput));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/text-input/styles.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let smPaddingX, smPaddingY, borderRadius, borderSize;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  smPaddingY(v) {
    smPaddingY = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  borderSize(v) {
    borderSize = v;
  }
}, 1);
let colorText, colorGrayLighter, colorBlueLight, colorPrimary;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorText(v) {
    colorText = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorBlueLight(v) {
    colorBlueLight = v;
  },
  colorPrimary(v) {
    colorPrimary = v;
  }
}, 2);
let fontSizeBase;
module.link("/imports/ui/stylesheets/styled-components/typography", {
  fontSizeBase(v) {
    fontSizeBase = v;
  }
}, 3);
let TextareaAutosize;
module.link("react-autosize-textarea", {
  default(v) {
    TextareaAutosize = v;
  }
}, 4);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 5);
const Wrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n"])));
const TextArea = styled(TextareaAutosize)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  flex: 1;\n  background: #fff;\n  background-clip: padding-box;\n  margin: 0;\n  color: ", ";\n  -webkit-appearance: none;\n  padding: calc(", " * 2.5) calc(", " * 1.25);\n  resize: none;\n  transition: none;\n  border-radius: ", ";\n  font-size: ", ";\n  min-height: 2.5rem;\n  max-height: 10rem;\n  border: 1px solid ", ";\n  box-shadow: 0 0 0 1px ", ";\n\n  &:hover {\n    outline: transparent;\n    outline-style: dotted;\n    outline-width: ", ";\n  }\n\n  &:active,\n  &:focus {\n    outline: transparent;\n    outline-width: ", ";\n    outline-style: solid;\n  }\n\n  &:focus {\n    outline: none;\n    border-radius: ", ";\n    box-shadow: 0 0 0 ", " ", ", inset 0 0 0 1px ", ";\n  }\n"])), colorText, smPaddingY, smPaddingX, borderRadius, fontSizeBase, colorGrayLighter, colorGrayLighter, borderSize, borderSize, borderSize, borderSize, colorBlueLight, colorPrimary);
const TextInputButton = styled(Button)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  margin:0 0 0 ", ";\n  align-self: center;\n  font-size: 0.9rem;\n\n  [dir=\"rtl\"]  & {\n    margin: 0 ", " 0 0;\n    -webkit-transform: scale(-1, 1);\n    -moz-transform: scale(-1, 1);\n    -ms-transform: scale(-1, 1);\n    -o-transform: scale(-1, 1);\n    transform: scale(-1, 1);\n  }\n"])), smPaddingX, smPaddingX);
module.exportDefault({
  Wrapper,
  TextArea,
  TextInputButton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-avatar":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-avatar/component.jsx                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 2);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 3);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 4);
const propTypes = {
  children: PropTypes.node,
  moderator: PropTypes.bool,
  presenter: PropTypes.bool,
  talking: PropTypes.bool,
  muted: PropTypes.bool,
  listenOnly: PropTypes.bool,
  voice: PropTypes.bool,
  noVoice: PropTypes.bool,
  color: PropTypes.string,
  emoji: PropTypes.bool,
  avatar: PropTypes.string,
  className: PropTypes.string,
  isSkeleton: PropTypes.bool
};
const {
  isChrome,
  isFirefox,
  isEdge
} = browserInfo;
const UserAvatar = _ref => {
  let {
    children = /*#__PURE__*/React.createElement(React.Fragment, null),
    moderator = false,
    presenter = false,
    className = '',
    talking = false,
    muted = false,
    listenOnly = false,
    color = '#000',
    voice = false,
    emoji = false,
    avatar = '',
    noVoice = false,
    whiteboardAccess = false,
    isSkeleton = false
  } = _ref;
  const Settings = getSettingsSingletonInstance();
  const {
    animations
  } = Settings.application;
  return /*#__PURE__*/React.createElement(React.Fragment, null, isSkeleton && /*#__PURE__*/React.createElement(Styled.Skeleton, null, children), !isSkeleton && /*#__PURE__*/React.createElement(Styled.Avatar, {
    "aria-hidden": "true",
    "data-test": moderator ? 'moderatorAvatar' : 'viewerAvatar',
    moderator: moderator,
    presenter: presenter,
    className: className,
    whiteboardAccess: whiteboardAccess && !presenter,
    muted: muted,
    listenOnly: listenOnly,
    voice: voice,
    noVoice: noVoice && !listenOnly,
    isChrome: isChrome,
    isFirefox: isFirefox,
    isEdge: isEdge,
    style: {
      backgroundColor: color,
      color // We need the same color on both for the border
    }
  }, /*#__PURE__*/React.createElement(Styled.Talking, {
    talking: talking && !muted,
    animations: animations
  }), avatar.length !== 0 && !emoji ? /*#__PURE__*/React.createElement(Styled.Image, null, /*#__PURE__*/React.createElement(Styled.Img, {
    moderator: moderator,
    src: avatar
  })) : /*#__PURE__*/React.createElement(Styled.Content, null, children)));
};
UserAvatar.propTypes = propTypes;
module.exportDefault(UserAvatar);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-avatar/styles.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled, css, keyframes;
module.link("styled-components", {
  default(v) {
    styled = v;
  },
  css(v) {
    css = v;
  },
  keyframes(v) {
    keyframes = v;
  }
}, 0);
let userIndicatorsOffset, mdPaddingY, indicatorPadding;
module.link("/imports/ui/stylesheets/styled-components/general", {
  userIndicatorsOffset(v) {
    userIndicatorsOffset = v;
  },
  mdPaddingY(v) {
    mdPaddingY = v;
  },
  indicatorPadding(v) {
    indicatorPadding = v;
  }
}, 1);
let colorPrimary, colorWhite, userListBg, colorSuccess, colorDanger, colorOffWhite;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  colorPrimary(v) {
    colorPrimary = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  userListBg(v) {
    userListBg = v;
  },
  colorSuccess(v) {
    colorSuccess = v;
  },
  colorDanger(v) {
    colorDanger = v;
  },
  colorOffWhite(v) {
    colorOffWhite = v;
  }
}, 2);
const Content = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  color: ", ";\n  top: 50%;\n  position: absolute;\n  text-align: center;\n  left: 0;\n  right: 0;\n  font-size: 110%;\n  text-transform: capitalize;\n\n  &,\n  & > * {\n    line-height: 0; // to keep centralized vertically\n  }\n"])), colorWhite);
const Image = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  height: 100%;\n  width: 100%;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n"])));
const Img = styled.img(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  object-fit: cover;\n  overflow: hidden;\n\n  ", "\n\n  ", "\n"])), _ref => {
  let {
    moderator
  } = _ref;
  return moderator && "\n    border-radius: 3px;\n  ";
}, _ref2 => {
  let {
    moderator
  } = _ref2;
  return !moderator && "\n    border-radius: 50%;\n  ";
});
const pulse = keyframes(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  0% {\n    opacity: 1;\n    transform: scale(1);\n  }\n  100% {\n    opacity: 0;\n    transform: scale(1.5);\n  }\n"])));
const Talking = styled.div(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  border-radius: inherit;\n\n  ", "\n\n  ", "\n\n  &::before {\n    ", "\n  }\n"])), _ref3 => {
  let {
    talking
  } = _ref3;
  return talking && css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n    background-color: currentColor;\n  "])));
}, _ref4 => {
  let {
    talking,
    animations
  } = _ref4;
  return talking && animations && css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n    animation: ", " 1s infinite ease-in;\n  "])), pulse);
}, _ref5 => {
  let {
    talking,
    animations
  } = _ref5;
  return talking && !animations && "\n      content: '';\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      background-color: currentColor;\n      border-radius: inherit;\n      box-shadow: 0 0 0 4px currentColor;\n      opacity: .5;\n    ";
});
const Avatar = styled.div(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  position: relative;\n  height: 2.25rem;\n  width: 2.25rem;\n  border-radius: 50%;\n  text-align: center;\n  font-size: .85rem;\n  border: 2px solid transparent;\n  user-select: none;\n\n  ", "\n\n  &:after,\n  &:before {\n    content: \"\";\n    position: absolute;\n    width: 0;\n    height: 0;\n    padding-top: .5rem;\n    padding-right: 0;\n    padding-left: 0;\n    padding-bottom: 0;\n    color: inherit;\n    top: auto;\n    left: auto;\n    bottom: ", ";\n    right: ", ";\n    border: 1.5px solid ", ";\n    border-radius: 50%;\n    background-color: ", ";\n    color: ", ";\n    opacity: 0;\n    font-family: 'bbb-icons';\n    font-size: .65rem;\n    line-height: 0;\n    text-align: center;\n    vertical-align: middle;\n    letter-spacing: -.65rem;\n    z-index: 1;\n\n    [dir=\"rtl\"] & {\n      left: ", ";\n      right: auto;\n      padding-right: .65rem;\n      padding-left: 0;\n    }\n\n    ", "\n  }\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n\n  ", "\n"])), _ref6 => {
  let {
    animations
  } = _ref6;
  return animations && "\n    transition: .3s ease-in-out;\n  ";
}, userIndicatorsOffset, userIndicatorsOffset, userListBg, colorSuccess, colorWhite, userIndicatorsOffset, _ref7 => {
  let {
    animations
  } = _ref7;
  return animations && "\n      transition: .3s ease-in-out;\n    ";
}, _ref8 => {
  let {
    moderator
  } = _ref8;
  return moderator && "\n    border-radius: 5px;\n  ";
}, _ref9 => {
  let {
    presenter
  } = _ref9;
  return presenter && "\n    &:before {\n      content: \"\\00a0\\e90b\\00a0\";\n      padding: ".concat(mdPaddingY, " !important;\n      opacity: 1;\n      top: ").concat(userIndicatorsOffset, ";\n      left: ").concat(userIndicatorsOffset, ";\n      bottom: auto;\n      right: auto;\n      border-radius: 5px;\n      background-color: ").concat(colorPrimary, ";\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: ").concat(userIndicatorsOffset, ";\n        letter-spacing: -.33rem;\n      }\n    }\n  ");
}, _ref10 => {
  let {
    presenter,
    isChrome,
    isFirefox,
    isEdge
  } = _ref10;
  return presenter && (isChrome || isFirefox || isEdge) && "\n    &:before {\n      padding: ".concat(indicatorPadding, " !important;\n    }\n  ");
}, _ref11 => {
  let {
    whiteboardAccess
  } = _ref11;
  return whiteboardAccess && "\n    &:before {\n      content: \"\\00a0\\e925\\00a0\";\n      padding: ".concat(mdPaddingY, " !important;\n      border-radius: 50% !important;\n      opacity: 1;\n      top: ").concat(userIndicatorsOffset, ";\n      left: ").concat(userIndicatorsOffset, ";\n      bottom: auto;\n      right: auto;\n      border-radius: 5px;\n      background-color: ").concat(colorPrimary, ";\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: ").concat(userIndicatorsOffset, ";\n        letter-spacing: -.33rem;\n        transform: scale(-1, 1);\n      }\n    }\n  ");
}, _ref12 => {
  let {
    whiteboardAccess,
    isChrome,
    isFirefox,
    isEdge
  } = _ref12;
  return whiteboardAccess && (isChrome || isFirefox || isEdge) && "\n    &:before {\n      padding: ".concat(indicatorPadding, ";\n    }\n  ");
}, _ref13 => {
  let {
    voice
  } = _ref13;
  return voice && "\n    &:after {\n      content: \"\\00a0\\e931\\00a0\";\n      background-color: ".concat(colorSuccess, ";\n      top: 1.375rem;\n      left: 1.375rem;\n      right: auto;\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: 1.375rem;\n      }\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref14 => {
  let {
    muted
  } = _ref14;
  return muted && "\n    &:after {\n      content: \"\\00a0\\e932\\00a0\";\n      background-color: ".concat(colorDanger, ";\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
}, _ref15 => {
  let {
    listenOnly
  } = _ref15;
  return listenOnly && "\n    &:after {\n      content: \"\\00a0\\e90c\\00a0\";\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ";
}, _ref16 => {
  let {
    noVoice
  } = _ref16;
  return noVoice && "\n    &:after {\n      content: \"\";\n      background-color: ".concat(colorOffWhite, ";\n      top: 1.375rem;\n      left: 1.375rem;\n      right: auto;\n\n      [dir=\"rtl\"] & {\n        left: auto;\n        right: 1.375rem;\n      }\n\n      opacity: 1;\n      width: 1.2rem;\n      height: 1.2rem;\n    }\n  ");
});
const Skeleton = styled.div(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  & .react-loading-skeleton {    \n    height: 2.25rem;\n    width: 2.25rem;\n  }\n"])));
module.exportDefault({
  Content,
  Image,
  Img,
  Talking,
  Avatar,
  Skeleton
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"user-reaction":{"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/user-reaction/service.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 0);
let useIsReactionsEnabled;
module.link("/imports/ui/services/features/index", {
  useIsReactionsEnabled(v) {
    useIsReactionsEnabled = v;
  }
}, 1);
const getEnabledSetting = () => window.meetingClientSettings.public.userReaction.enabled;
const useIsEnabled = () => useIsReactionsEnabled() && getFromUserSettings('enable-user-reaction', getEnabledSetting());
module.exportDefault({
  useIsEnabled
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"wake-lock":{"component.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/wake-lock/component.jsx                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let defineMessages, injectIntl;
module.link("react-intl", {
  defineMessages(v) {
    defineMessages = v;
  },
  injectIntl(v) {
    injectIntl = v;
  }
}, 2);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 3);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 4);
let Styled;
module.link("./styles", {
  default(v) {
    Styled = v;
  }
}, 5);
const intlMessages = defineMessages({
  wakeLockOfferTitle: {
    id: 'app.toast.wakeLock.offerTitle'
  },
  wakeLockAcquireSuccess: {
    id: 'app.toast.wakeLock.acquireSuccess'
  },
  wakeLockAcquireFailed: {
    id: 'app.toast.wakeLock.acquireFailed'
  },
  wakeLockNotSupported: {
    id: 'app.toast.wakeLock.notSupported'
  },
  wakeLockDisclaimer: {
    id: 'app.toast.wakeLock.disclaimer'
  }
});
const propTypes = {
  intl: PropTypes.objectOf(Object).isRequired,
  request: PropTypes.func.isRequired,
  release: PropTypes.func.isRequired,
  wakeLockSettings: PropTypes.bool.isRequired,
  setLocalSettings: PropTypes.func.isRequired
};
class WakeLock extends Component {
  constructor() {
    super();
  }
  componentDidMount() {
    const {
      wakeLockSettings
    } = this.props;
    if (wakeLockSettings) {
      this.requestWakeLock();
    }
  }
  componentDidUpdate(prevProps) {
    const {
      wakeLockSettings,
      release
    } = this.props;
    if (wakeLockSettings !== prevProps.wakeLockSettings) {
      if (wakeLockSettings) {
        this.requestWakeLock();
      } else {
        release();
      }
    }
  }
  getToast(id, message) {
    return /*#__PURE__*/React.createElement("div", {
      id: id
    }, /*#__PURE__*/React.createElement(Styled.Title, null, message));
  }
  feedbackToast(result) {
    const {
      intl
    } = this.props;
    const feedbackToastProps = {
      closeOnClick: true,
      autoClose: true,
      closeButton: false
    };
    const toastType = result.error ? 'error' : 'success';
    const message = result.error ? intl.formatMessage(intlMessages.wakeLockDisclaimer, {
      0: intl.formatMessage(intlMessages[result.locale])
    }) : intl.formatMessage(intlMessages.wakeLockAcquireSuccess);
    const feedbackToast = this.getToast('wakeLockToast', message);
    notify(feedbackToast, toastType, 'lock', feedbackToastProps, null, true);
  }
  requestWakeLock() {
    const Settings = getSettingsSingletonInstance();
    const {
      request,
      setLocalSettings
    } = this.props;
    request().then(result => {
      if (result && result.error) {
        Settings.application.wakeLock = false;
        Settings.save(setLocalSettings);
        this.feedbackToast(result);
      }
    });
  }
  render() {
    return null;
  }
}
WakeLock.propTypes = propTypes;
module.exportDefault(injectIntl(WakeLock));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"container.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/wake-lock/container.jsx                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _extends;
module.link("@babel/runtime/helpers/extends", {
  default(v) {
    _extends = v;
  }
}, 0);
let React, useEffect, useState, useRef;
module.link("react", {
  default(v) {
    React = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let PropTypes;
module.link("prop-types", {
  default(v) {
    PropTypes = v;
  }
}, 1);
let WakeLock;
module.link("./component", {
  default(v) {
    WakeLock = v;
  }
}, 2);
let Service;
module.link("./service", {
  default(v) {
    Service = v;
  }
}, 3);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 4);
let useUserChangedLocalSettings;
module.link("../../services/settings/hooks/useUserChangedLocalSettings", {
  default(v) {
    useUserChangedLocalSettings = v;
  }
}, 5);
let useSettings;
module.link("../../services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 6);
let SETTINGS;
module.link("../../services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 7);
let useStorageKey;
module.link("../../services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 8);
const propTypes = {
  areAudioModalsOpen: PropTypes.bool,
  autoJoin: PropTypes.bool.isRequired
};
function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  });
  return ref.current;
}
const WakeLockContainer = props => {
  if (!Service.isMobile()) return null;
  const APP_CONFIG = window.meetingClientSettings.public.app;
  const {
    autoJoin
  } = props;
  const inEchoTest = useStorageKey('inEchoTest');
  const audioModalIsOpen = useStorageKey('audioModalIsOpen');
  const areAudioModalsOpen = audioModalIsOpen || inEchoTest;
  const wereAudioModalsOpen = usePrevious(areAudioModalsOpen);
  const [endedAudioSetup, setEndedAudioSetup] = useState(false || !autoJoin);
  const setLocalSettings = useUserChangedLocalSettings();
  const {
    wakeLock: wakeLockSettings
  } = useSettings(SETTINGS.APPLICATION);
  useEffect(() => {
    if (wereAudioModalsOpen && !areAudioModalsOpen && !endedAudioSetup) {
      setEndedAudioSetup(true);
    }
  }, [areAudioModalsOpen]);
  return endedAudioSetup ? /*#__PURE__*/React.createElement(WakeLock, _extends({
    setLocalSettings: setLocalSettings,
    wakeLockSettings: wakeLockSettings,
    request: Service.request,
    release: Service.release,
    autoJoin: getFromUserSettings('bbb_auto_join_audio', APP_CONFIG.autoJoin),
    areAudioModalsOpen: areAudioModalsOpen
  }, props)) : null;
};
WakeLockContainer.propTypes = propTypes;
module.exportDefault(WakeLockContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/wake-lock/service.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 0);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 1);
const WAKELOCK_ERRORS = {
  NOT_SUPPORTED: {
    locale: 'wakeLockNotSupported',
    error: 'wake_lock_not_supported'
  },
  REQUEST_FAILED: {
    locale: 'wakeLockAcquireFailed',
    error: 'wake_lock_request_error'
  }
};
class WakeLock {
  constructor() {
    this.sentinel = null;
    this.apiSupport = 'wakeLock' in navigator;
  }
  static isEnabled() {
    const WAKELOCK_ENABLED = window.meetingClientSettings.public.app.wakeLock.enabled;
    return WAKELOCK_ENABLED;
  }
  isSupported() {
    const {
      isMobile
    } = deviceInfo;
    return WakeLock.isEnabled() && this.apiSupport && isMobile;
  }
  isMobile() {
    const {
      isMobile
    } = deviceInfo;
    return isMobile;
  }
  isActive() {
    return this.sentinel !== null;
  }
  handleVisibilityChanged() {
    if (document.visibilityState === 'visible') {
      this.request();
    }
  }
  handleRelease() {
    document.removeEventListener('visibilitychange', this.handleVisibilityChanged);
    this.sentinel = null;
  }
  async request() {
    if (!this.isSupported()) {
      logger.warn({
        logCode: WAKELOCK_ERRORS.NOT_SUPPORTED.error
      }, 'Wake lock API not supported');
      return _objectSpread(_objectSpread({}, WAKELOCK_ERRORS.NOT_SUPPORTED), {}, {
        msg: 'Wake lock API not supported'
      });
    }
    try {
      this.sentinel = await navigator.wakeLock.request('screen');
      this.sentinel.addEventListener('release', this.handleRelease);
      document.addEventListener('visibilitychange', this.handleVisibilityChanged.bind(this));
      document.addEventListener('fullscreenchange', this.handleVisibilityChanged.bind(this));
    } catch (err) {
      logger.warn({
        logCode: WAKELOCK_ERRORS.REQUEST_FAILED.error,
        extraInfo: {
          errorName: err.name,
          errorMessage: err.message
        }
      }, 'Error requesting wake lock.');
      return _objectSpread(_objectSpread({}, WAKELOCK_ERRORS.REQUEST_FAILED), {}, {
        msg: "".concat(err.name, " - ").concat(err.message)
      });
    }
    return {
      error: false
    };
  }
  release() {
    if (this.isActive()) this.sentinel.release();
  }
}
const wakeLock = new WakeLock();
module.exportDefault({
  isEnabled: () => wakeLock.isEnabled(),
  isSupported: () => wakeLock.isSupported(),
  isMobile: () => wakeLock.isMobile(),
  isActive: () => wakeLock.isActive(),
  request: () => wakeLock.request(),
  release: () => wakeLock.release()
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"styles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/components/wake-lock/styles.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
const Title = styled.h3(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  margin: 0;\n"])));
module.exportDefault({
  Title
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"core":{"graphql":{"apolloContextHolder":{"apolloContextHolder.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/apolloContextHolder/apolloContextHolder.ts                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
class ApolloContextHolder {
  constructor() {
    this.client = null;
    this.link = null;
    this.shouldRetry = true;
  }
  setClient(client) {
    this.client = client;
  }
  getClient() {
    if (!this.client) {
      throw new Error('ApolloClient has not been initialized yet');
    }
    return this.client;
  }
  setLink(link) {
    this.link = link;
  }
  getLink() {
    if (!this.link) {
      throw new Error('SubscriptionClient has not been initialized yet');
    }
    return this.link;
  }
  setShouldRetry(shouldRetry) {
    this.shouldRetry = shouldRetry;
  }
  getShouldRetry() {
    return this.shouldRetry;
  }
}
module.exportDefault(new ApolloContextHolder());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"mutations":{"userMutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/mutations/userMutations.ts                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  SET_CAMERA_PINNED: () => SET_CAMERA_PINNED,
  SET_RAISE_HAND: () => SET_RAISE_HAND,
  EJECT_FROM_MEETING: () => EJECT_FROM_MEETING,
  EJECT_FROM_VOICE: () => EJECT_FROM_VOICE,
  SET_PRESENTER: () => SET_PRESENTER,
  SET_REACTION_EMOJI: () => SET_REACTION_EMOJI,
  SET_LOCKED: () => SET_LOCKED,
  CLEAR_ALL_REACTION: () => CLEAR_ALL_REACTION,
  SET_EXIT_REASON: () => SET_EXIT_REASON,
  SET_SPEECH_LOCALE: () => SET_SPEECH_LOCALE,
  SET_CAPTION_LOCALE: () => SET_CAPTION_LOCALE,
  USER_LEAVE_MEETING: () => USER_LEAVE_MEETING
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const SET_CAMERA_PINNED = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation SetCameraPinned($userId: String!, $pinned: Boolean!) {\n    userSetCameraPinned(\n      userId: $userId,\n      pinned: $pinned,\n    )\n  }\n"])));
const SET_RAISE_HAND = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  mutation SetRaiseHand($userId: String!, $raiseHand: Boolean!) {\n    userSetRaiseHand(\n      userId: $userId,\n      raiseHand: $raiseHand,\n    )\n  }\n"])));
const EJECT_FROM_MEETING = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  mutation EjectFromMeeting($userId: String!, $banUser: Boolean!) {\n    userEjectFromMeeting(\n      userId: $userId,\n      banUser: $banUser,\n    )\n  }\n"])));
const EJECT_FROM_VOICE = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  mutation EjectFromVoice($userId: String!, $banUser: Boolean!) {\n    userEjectFromVoice(\n      userId: $userId,\n      banUser: $banUser,\n    )\n  }\n"])));
const SET_PRESENTER = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  mutation SetPresenter($userId: String!) {\n    userSetPresenter(\n      userId: $userId,\n    )\n  }\n"])));
const SET_REACTION_EMOJI = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  mutation SetReactionEmoji($reactionEmoji: String!) {\n    userSetReactionEmoji(\n      reactionEmoji: $reactionEmoji,\n    )\n  }\n"])));
const SET_LOCKED = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  mutation SetUserLocked($userId: String!, $locked: Boolean!) {\n    userSetLocked(\n      userId: $userId,\n      locked: $locked,\n    )\n  }\n"])));
const CLEAR_ALL_REACTION = gql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  mutation ClearAllUsersReaction {\n    allUsersClearReaction\n  }\n"])));
const SET_EXIT_REASON = gql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral(["\n  mutation SetExitReason($exitReason: String!) {\n    userSetExitReason(\n      exitReason: $exitReason,\n    )\n  }\n"])));
const SET_SPEECH_LOCALE = gql(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral(["\n  mutation SetSpeechLocale($locale: String!, $provider: String!) {\n    userSetSpeechLocale(\n      locale: $locale,\n      provider: $provider,\n    )\n  }\n"])));
const SET_CAPTION_LOCALE = gql(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral(["\n  mutation SetCaptionLocale($locale: String!, $provider: String!) {\n    userSetCaptionLocale(\n      locale: $locale,\n      provider: $provider,\n    )\n  }\n"])));
const USER_LEAVE_MEETING = gql(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral(["\n  mutation UserLeaveMeeting {\n    userLeaveMeeting\n  }\n"])));
module.exportDefault({
  SET_CAMERA_PINNED,
  SET_RAISE_HAND,
  EJECT_FROM_MEETING,
  EJECT_FROM_VOICE,
  SET_PRESENTER,
  SET_REACTION_EMOJI,
  SET_LOCKED,
  CLEAR_ALL_REACTION,
  SET_EXIT_REASON,
  SET_SPEECH_LOCALE,
  USER_LEAVE_MEETING
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"queries":{"chatSubscription.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/queries/chatSubscription.ts                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CHATS_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription ChatSubscription {\n    chat(\n      order_by: [\n        { public: desc }\n        { totalUnread: desc }\n        { participant: { name: asc, userId: asc } }\n      ]\n    ) {\n      chatId\n      participant {\n        userId\n        name\n        role\n        color\n        loggedOut\n        avatar\n        isOnline\n        isModerator\n      }\n      totalMessages\n      totalUnread\n      public\n      lastSeenAt\n    }\n  }\n"])));
module.exportDefault(CHATS_SUBSCRIPTION);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"currentPresentationSubscription.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/queries/currentPresentationSubscription.ts                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CURRENT_PRESENTATION_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\nsubscription currentPresentationSubscription {\n    pres_presentation (where: {current: {_eq: true}}) {\n        presentationId\n        pages (where: {isCurrentPage: {_eq: true}}) {\n            num\n            pageId\n            urlsJson\n            svgUrl: urlsJson(path: \"$.svg\")\n        }\n    }\n}\n"])));
module.exportDefault(CURRENT_PRESENTATION_SUBSCRIPTION);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"currentUserSubscription.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/queries/currentUserSubscription.ts                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  CURRENT_USER_SUBSCRIPTION: () => CURRENT_USER_SUBSCRIPTION
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const CURRENT_USER_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\nsubscription userCurrentSubscription {\n  user_current {\n    authToken\n    avatar\n    away\n    clientType\n    color\n    ejectReason\n    ejectReasonCode\n    ejected\n    reactionEmoji\n    enforceLayout\n    extId\n    guest\n    guestStatus\n    hasDrawPermissionOnCurrentPage\n    inactivityWarningDisplay\n    inactivityWarningTimeoutSecs\n    isDialIn\n    isModerator\n    isOnline\n    joinErrorCode\n    joinErrorMessage\n    joined\n    locked\n    loggedOut\n    mobile\n    name\n    nameSortable\n    pinned\n    presenter\n    raiseHand\n    registeredAt\n    role\n    speechLocale\n    captionLocale\n    userId\n    breakoutRooms {\n      hasJoined\n      assignedAt\n      breakoutRoomId\n      isLastAssignedRoom\n      durationInSeconds\n      endedAt\n      freeJoin\n      inviteDismissedAt\n      isDefaultName\n      joinURL\n      name\n      sendInvitationToModerators\n      sequence\n      shortName\n      showInvitation\n      startedAt\n      isUserCurrentlyInRoom\n    }\n    lastBreakoutRoom {\n      currentlyInRoom\n      sequence\n      shortName\n    }\n    cameras {\n      streamId\n    }\n    voice {\n      joined\n      spoke\n      listenOnly\n    }\n  }\n}\n"])));
module.exportDefault(CURRENT_USER_SUBSCRIPTION);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"meetingSubscription.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/queries/meetingSubscription.ts                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const MEETING_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription MeetingSubscription {\n      meeting {\n        disabledFeatures\n        durationInSeconds\n        extId\n        endWhenNoModerator\n        endWhenNoModeratorDelayInMinutes\n        createdTime\n        loginUrl\n        lockSettings {\n          disableCam\n          disableMic\n          disableNotes\n          disablePrivateChat\n          disablePublicChat\n          hasActiveLockSetting\n          hideUserList\n          hideViewersCursor\n          hideViewersAnnotation\n          webcamsOnlyForModerator\n          lockOnJoin\n          lockOnJoinConfigurable\n        }\n        metadata {\n          name\n          value\n        }\n        maxPinnedCameras\n        meetingCameraCap\n        meetingId\n        name\n        notifyRecordingIsOn\n        presentationUploadExternalDescription\n        presentationUploadExternalUrl\n        recordingPolicies {\n          allowStartStopRecording\n          autoStartRecording\n          record\n          keepEvents\n        }\n        groups {\n          groupId\n          name\n        }\n        learningDashboard {\n          learningDashboardAccessToken\n        }\n        screenshare {\n          contentType\n          hasAudio\n          screenshareConf\n          screenshareId\n          startedAt\n          stoppedAt\n          stream\n          vidHeight\n          vidWidth\n          voiceConf\n        }\n        usersPolicies {\n          allowModsToEjectCameras\n          allowModsToUnmuteUsers\n          authenticatedGuest\n          guestPolicy\n          maxUserConcurrentAccesses\n          maxUsers\n          meetingLayout\n          moderatorsCanMuteAudio\n          moderatorsCanUnmuteAudio\n          userCameraCap\n          webcamsOnlyForModerator\n          guestLobbyMessage\n        }\n        layout {\n          cameraDockAspectRatio\n          cameraDockIsResizing\n          cameraDockPlacement\n          cameraWithFocus\n          currentLayoutType\n          presentationMinimized\n          propagateLayout\n          updatedAt\n        }\n        isBreakout\n        breakoutPolicies {\n          breakoutRooms\n          captureNotes\n          captureNotesFilename\n          captureSlides\n          captureSlidesFilename\n          freeJoin\n          parentId\n          privateChatEnabled\n          record\n          sequence\n        }\n        voiceSettings {\n          dialNumber\n          muteOnStart\n          voiceConf\n          telVoice\n        }\n        externalVideo {\n          externalVideoId\n          playerCurrentTime\n          playerPlaybackRate\n          playerPlaying\n          externalVideoUrl\n          startedSharingAt\n          stoppedSharingAt\n          updatedAt\n        }\n        componentsFlags {\n          hasCaption\n          hasBreakoutRoom\n          hasExternalVideo\n          hasPoll\n          hasScreenshare\n          hasTimer\n          showRemainingTime\n          hasCameraAsContent\n        }\n      }\n  }\n"])));
module.exportDefault(MEETING_SUBSCRIPTION);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"pollSubscription.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/queries/pollSubscription.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const POLL_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription PollPublished {\n    poll {\n      published\n    }\n  }\n"])));
module.exportDefault(POLL_SUBSCRIPTION);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"timer.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/queries/timer.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  GET_TIMER: () => GET_TIMER
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const GET_TIMER = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription Timer {\n    timer {\n      accumulated\n      active\n      songTrack\n      time\n      stopwatch\n      running\n      startedOn\n      startedAt\n    }\n  }\n"])));
module.exportDefault(GET_TIMER);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"users.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/queries/users.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  USER_LIST_SUBSCRIPTION: () => USER_LIST_SUBSCRIPTION,
  USER_AGGREGATE_COUNT_SUBSCRIPTION: () => USER_AGGREGATE_COUNT_SUBSCRIPTION,
  GET_USER_IDS: () => GET_USER_IDS,
  GET_USER_NAMES: () => GET_USER_NAMES
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const USER_LIST_SUBSCRIPTION = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\nsubscription UserListSubscription($offset: Int!, $limit: Int!) {\n  user(limit:$limit, offset: $offset, \n                order_by: [\n                  {presenter: desc},\n                  {role: asc},\n                  {raiseHandTime: asc_nulls_last},\n                  {isDialIn: desc},\n                  {hasDrawPermissionOnCurrentPage: desc},\n                  {nameSortable: asc},\n                  {registeredAt: asc},\n                  {userId: asc}\n                ]) {\n    isDialIn\n    userId\n    extId\n    name\n    isModerator\n    role\n    color\n    avatar\n    away\n    raiseHand\n    reactionEmoji\n    avatar\n    presenter\n    pinned\n    locked\n    authed\n    mobile\n    guest\n    clientType\n    disconnected\n    loggedOut\n    voice {\n      joined\n      listenOnly\n      voiceUserId\n    }\n    cameras {\n      streamId\n    }\n    presPagesWritable {\n      isCurrentPage\n      pageId\n      userId\n    }\n    lastBreakoutRoom {\n      isDefaultName\n      sequence\n      shortName\n      currentlyInRoom\n    }\n  }\n}"])));
const USER_AGGREGATE_COUNT_SUBSCRIPTION = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  subscription UsersCount {\n    user_aggregate {\n      aggregate {\n        count\n      }\n    }\n  }\n"])));
const GET_USER_IDS = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  query Users {\n    user {\n      userId\n    }\n  }\n"])));
const GET_USER_NAMES = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  query Users {\n    user {\n      name\n    }\n  }\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"whoIsTalking.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/queries/whoIsTalking.ts                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  VOICE_ACTIVITY: () => VOICE_ACTIVITY
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const VOICE_ACTIVITY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  subscription UserVoiceActivity {\n    user_voice_activity_stream(\n      cursor: { initial_value: { voiceActivityAt: \"2020-01-01\" } },\n      batch_size: 10\n    ) {\n      muted\n      startTime\n      endTime\n      talking\n      userId\n      user {\n        color\n        name\n        speechLocale\n      }\n    }\n  }\n"])));
module.exportDefault(VOICE_ACTIVITY);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"singletons":{"connectionStatus.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/graphql/singletons/connectionStatus.ts                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let makeVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 1);
class ConnectionStatus {
  constructor() {
    this.connected = makeVar(false);
    this.serverIsResponding = makeVar(true);
    this.pingIsComing = makeVar(true);
    this.rttStatus = makeVar('normal');
    this.lastRttRequestSuccess = makeVar(true);
    this.rttValue = makeVar(0);
    this.networkData = makeVar({
      audio: {},
      video: {}
    });
    this.jitterStatus = makeVar('normal');
    this.packetLossStatus = makeVar('normal');
  }
  setPacketLossStatus(value) {
    if (value !== this.packetLossStatus()) {
      var _this$networkData, _this$networkData$aud;
      logger.info({
        logCode: 'stats_packet_loss_state'
      }, "Packet loss status changed to ".concat(value, " (packet loss=").concat((_this$networkData = this.networkData()) === null || _this$networkData === void 0 ? void 0 : (_this$networkData$aud = _this$networkData.audio) === null || _this$networkData$aud === void 0 ? void 0 : _this$networkData$aud.packetsLost, ")"));
      this.packetLossStatus(value);
    }
  }
  getPacketLossStatus() {
    return this.packetLossStatus();
  }
  getPacketLossStatusVar() {
    return this.packetLossStatus;
  }
  setJitterStatus(value) {
    if (value !== this.jitterStatus()) {
      var _this$networkData2, _this$networkData2$au;
      logger.info({
        logCode: 'stats_jitter_status_state'
      }, "Jitter status changed to ".concat(value, " (jitter=").concat((_this$networkData2 = this.networkData()) === null || _this$networkData2 === void 0 ? void 0 : (_this$networkData2$au = _this$networkData2.audio) === null || _this$networkData2$au === void 0 ? void 0 : _this$networkData2$au.jitter, ")"));
      this.jitterStatus(value);
    }
  }
  getJitterStatus() {
    return this.jitterStatus();
  }
  getJitterStatusVar() {
    return this.jitterStatus;
  }
  setNetworkData(data) {
    this.networkData(data);
  }
  getNetworkData() {
    return this.networkData();
  }
  getNetworkDataVar() {
    return this.networkData;
  }
  setRttValue(value) {
    if (value !== this.rttValue()) {
      logger.debug({
        logCode: 'stats_rtt_value_state'
      }, "RTT value changed to ".concat(value));
      this.rttValue(value);
    }
  }
  getRttValue() {
    return this.rttValue();
  }
  getRttValueVar() {
    return this.rttValue;
  }
  setLastRttRequestSuccess(value) {
    if (value !== this.lastRttRequestSuccess()) {
      logger.info({
        logCode: 'stats_rtt_success_state'
      }, "Last RTT request changed to ".concat(value));
      this.lastRttRequestSuccess(value);
    }
  }
  getLastRttRequestSuccess() {
    return this.lastRttRequestSuccess();
  }
  getLastRttRequestSuccessVar() {
    return this.lastRttRequestSuccess;
  }
  setRttStatus(value) {
    if (value !== this.rttStatus()) {
      logger.info({
        logCode: 'stats_rtt_status_state'
      }, "Connection status changed to ".concat(value, " (rtt=").concat(this.rttValue(), ")"));
      this.rttStatus(value);
    }
  }
  getRttStatus() {
    return this.rttStatus();
  }
  getRttStatusVar() {
    return this.rttStatus;
  }
  setPingIsComing(value) {
    if (value !== this.pingIsComing()) {
      logger.info({
        logCode: 'stats_ping_state'
      }, "Ping status changed to ".concat(value));
      this.pingIsComing(value);
    }
  }
  getPingIsComing() {
    return this.pingIsComing();
  }
  getPingIsComingVar() {
    return this.pingIsComing;
  }
  setServerIsResponding(value) {
    if (value !== this.serverIsResponding()) {
      logger.info({
        logCode: 'stats_server_state'
      }, "Server responding status changed to ".concat(value));
      this.serverIsResponding(value);
    }
  }
  getServerIsResponding() {
    return this.serverIsResponding();
  }
  getServerIsRespondingVar() {
    return this.serverIsResponding;
  }
  setConnectedStatus(value) {
    if (value !== this.connected()) {
      logger.info({
        logCode: 'stats_connection_state'
      }, "Connection status changed to ".concat(value));
      this.connected(value);
    }
  }
  getConnectedStatus() {
    return this.connected();
  }
  getConnectedStatusVar() {
    return this.connected;
  }
}
module.exportDefault(new ConnectionStatus());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"adapters":{"voice-activity.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/adapters/voice-activity.tsx                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let useVoiceActivity;
module.link("/imports/ui/core/hooks/useVoiceActivity", {
  default(v) {
    useVoiceActivity = v;
  }
}, 1);
let setWhoIsUnmutedLoading, useWhoIsUnmutedConsumersCount, dispatchWhoIsUnmutedUpdate;
module.link("/imports/ui/core/hooks/useWhoIsUnmuted", {
  setWhoIsUnmutedLoading(v) {
    setWhoIsUnmutedLoading = v;
  },
  useWhoIsUnmutedConsumersCount(v) {
    useWhoIsUnmutedConsumersCount = v;
  },
  dispatchWhoIsUnmutedUpdate(v) {
    dispatchWhoIsUnmutedUpdate = v;
  }
}, 2);
let setWhoIsTalkingLoading, useWhoIsTalkingConsumersCount, dispatchWhoIsTalkingUpdate;
module.link("/imports/ui/core/hooks/useWhoIsTalking", {
  setWhoIsTalkingLoading(v) {
    setWhoIsTalkingLoading = v;
  },
  useWhoIsTalkingConsumersCount(v) {
    useWhoIsTalkingConsumersCount = v;
  },
  dispatchWhoIsTalkingUpdate(v) {
    dispatchWhoIsTalkingUpdate = v;
  }
}, 3);
let dispatchTalkingUserUpdate, setTalkingUserLoading, useTalkingUserConsumersCount;
module.link("/imports/ui/core/hooks/useTalkingUsers", {
  dispatchTalkingUserUpdate(v) {
    dispatchTalkingUserUpdate = v;
  },
  setTalkingUserLoading(v) {
    setTalkingUserLoading = v;
  },
  useTalkingUserConsumersCount(v) {
    useTalkingUserConsumersCount = v;
  }
}, 4);
const VoiceActivityAdapter = () => {
  const whoIsUnmutedConsumersCount = useWhoIsUnmutedConsumersCount();
  const whoIsTalkingConsumersCount = useWhoIsTalkingConsumersCount();
  const talkingUserConsumersCount = useTalkingUserConsumersCount();
  const skip = !(whoIsUnmutedConsumersCount + whoIsTalkingConsumersCount + talkingUserConsumersCount > 0);
  const {
    data: voiceActivity,
    loading
  } = useVoiceActivity(skip);
  useEffect(() => {
    dispatchWhoIsUnmutedUpdate(voiceActivity);
    dispatchWhoIsTalkingUpdate(voiceActivity);
    dispatchTalkingUserUpdate(voiceActivity);
  }, [voiceActivity]);
  useEffect(() => {
    setWhoIsUnmutedLoading(loading);
    setWhoIsTalkingLoading(loading);
    setTalkingUserLoading(loading);
  }, [loading]);
  return null;
};
module.exportDefault(VoiceActivityAdapter);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"enums":{"chat.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/enums/chat.ts                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  ChatEvents: () => ChatEvents,
  ChatCommands: () => ChatCommands,
  ChatMessageType: () => ChatMessageType
});
var ChatEvents;
(function (ChatEvents) {
  ChatEvents["SENT_MESSAGE"] = "sentMessage";
})(ChatEvents || module.runSetters(ChatEvents = {}, ["ChatEvents"]));
var ChatCommands;
(function (ChatCommands) {
  ChatCommands["RESTORE_WELCOME_MESSAGES"] = "restoreWelcomeMessages";
})(ChatCommands || module.runSetters(ChatCommands = {}, ["ChatCommands"]));
var ChatMessageType;
(function (ChatMessageType) {
  ChatMessageType["TEXT"] = "default";
  ChatMessageType["API"] = "api";
  ChatMessageType["POLL"] = "poll";
  ChatMessageType["PRESENTATION"] = "presentation";
  ChatMessageType["CHAT_CLEAR"] = "publicChatHistoryCleared";
  ChatMessageType["BREAKOUT_ROOM"] = "breakoutRoomModeratorMsg";
  ChatMessageType["USER_AWAY_STATUS_MSG"] = "userAwayStatusMsg";
})(ChatMessageType || module.runSetters(ChatMessageType = {}, ["ChatMessageType"]));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"hooks":{"createUseSubscription.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/createUseSubscription.ts                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 1);
module.export({
  makePatchedQuery: () => makePatchedQuery,
  useSubscription: () => useSubscription,
  useCreateUseSubscription: () => useCreateUseSubscription
});
let useRef, useState, useEffect, useMemo;
module.link("react", {
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let gql, useApolloClient;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  },
  useApolloClient(v) {
    useApolloClient = v;
  }
}, 1);
let R;
module.link("ramda", {
  default(v) {
    R = v;
  }
}, 2);
let applyPatch, deepClone;
module.link("fast-json-patch", {
  applyPatch(v) {
    applyPatch = v;
  },
  deepClone(v) {
    deepClone = v;
  }
}, 3);
let useDeepComparison;
module.link("../../hooks/useDeepComparison", {
  default(v) {
    useDeepComparison = v;
  }
}, 4);
let GrahqlSubscriptionStore, stringToHash;
module.link("../singletons/subscriptionStore", {
  default(v) {
    GrahqlSubscriptionStore = v;
  },
  stringToHash(v) {
    stringToHash = v;
  }
}, 5);
const makePatchedQuery = query => {
  if (!query) {
    throw new Error('Error: query is not defined');
  }
  if (!query.loc) {
    throw new Error('Error: query.loc is not defined');
  }
  // Prepend `Patched_` to the query operationName to inform the middleware that this subscription support jsonPatch
  // It will also set {fetchPolicy: 'no-cache'} because the cache would not work properly when using json-patch
  const regexSubscriptionOperationName = /subscription\s+([^{]*)\{/g;
  if (!regexSubscriptionOperationName.exec(query.loc.source.body)) {
    throw new Error('Error prepending Patched_ to subscription name - check the provided gql');
  }
  const newQueryString = query.loc.source.body.replace(regexSubscriptionOperationName, 'subscription Patched_$1 {');
  return gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["", ""])), newQueryString);
};
function createUseSubscription(query) {
  let queryVariables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let usePatchedSubscription = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  let newSubscriptionGQL = query;
  if (usePatchedSubscription) {
    newSubscriptionGQL = makePatchedQuery(query);
  }
  const queryHash = stringToHash(JSON.stringify({
    subscription: newSubscriptionGQL,
    variables: queryVariables
  }));
  return function useGeneratedUseSubscription() {
    let projectionFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : element => element;
    const subscriptionHashRef = useRef('');
    const subscriptionRef = useRef(null);
    const optionsRef = useRef({});
    const subHash = stringToHash(JSON.stringify({
      subscription: newSubscriptionGQL,
      variables: queryVariables
    }));
    useEffect(() => {
      if (subscriptionHashRef.current !== subHash) {
        subscriptionHashRef.current = subHash;
        if (subscriptionRef.current && optionsRef.current) {
          GrahqlSubscriptionStore.unsubscribe(subscriptionRef.current, queryVariables);
        }
        subscriptionRef.current = query;
        optionsRef.current = queryVariables;
      }
    }, [subHash]);
    useEffect(() => {
      return () => {
        GrahqlSubscriptionStore.unsubscribe(newSubscriptionGQL, queryVariables);
      };
    }, []);
    const observer = useRef({
      //  @ts-ignore
      next(response) {
        const {
          data
        } = response;
        if (!data) {
          return;
        }
        const resultSetKey = Object.keys(data)[0];
        const newProjectionOfData = data[resultSetKey].map(element => projectionFunction(element));
        if (!R.equals(oldProjectionOfDataRef.current, newProjectionOfData)) {
          const loading = response.data === undefined && response.errors === undefined;
          const objectFromProjectionToSave = _objectSpread(_objectSpread({}, response), {}, {
            loading
          });
          objectFromProjectionToSave.data = newProjectionOfData;
          oldProjectionOfDataRef.current = newProjectionOfData;
          setProjectedData(objectFromProjectionToSave);
        }
      },
      //  @ts-ignore
      error(err) {
        // eslint-disable-next-line no-console
        console.error('err', err);
      }
    });
    const [projectedData, setProjectedData] = useState({
      loading: true
    });
    const oldProjectionOfDataRef = useRef([]);
    useEffect(() => {
      const listener = event => {
        if (event.detail.subscriptionHash === subHash) {
          //  @ts-ignore
          observer.current[event.detail.type](event.detail.response);
        }
      };
      //  @ts-ignore
      window.addEventListener('graphqlSubscription', listener);
      GrahqlSubscriptionStore.makeSubscription(newSubscriptionGQL, queryVariables, usePatchedSubscription ? 'no-cache' : undefined);
      return () => {
        //  @ts-ignore
        // window.removeEventListener('graphqlSubscription', listener);
      };
    }, [queryHash]);
    return projectedData;
  };
}
const useSubscription = function (query) {
  let variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let patched = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  let projection = arguments.length > 3 ? arguments[3] : undefined;
  const client = useApolloClient();
  const subscriptionRef = useRef();
  const oldDataToRetunRef = useRef();
  const dataRef = useRef([]);
  const paramsDidChange = useDeepComparison(query, variables, patched);
  const [response, setResponse] = useState();
  let newSubscriptionGql = query;
  if (patched) {
    newSubscriptionGql = makePatchedQuery(query);
  }
  useEffect(() => {
    if (paramsDidChange) {
      if (subscriptionRef.current) {
        subscriptionRef.current.unsubscribe();
      }
      const observable = client.subscribe({
        query: newSubscriptionGql,
        variables,
        fetchPolicy: patched ? 'no-cache' : undefined
      });
      const subscription = observable.subscribe({
        next(response) {
          setResponse(response);
        }
      });
      subscriptionRef.current = subscription;
    }
  });
  useEffect(() => () => {
    if (subscriptionRef.current) {
      subscriptionRef.current.unsubscribe();
    }
  }, []);
  if (!response) {
    return {
      loading: true
    };
  }
  const {
    data
  } = response;
  let currentData = [];
  if (patched && data && typeof data === 'object' && 'patch' in data && Array.isArray(data.patch)) {
    currentData = applyPatch(deepClone(dataRef.current), data.patch).newDocument;
  } else if (data && typeof data === 'object') {
    const resultSetKey = Object.keys(data)[0];
    currentData = data[resultSetKey];
  }
  if (patched) {
    dataRef.current = currentData;
  }
  const newProjectionOfData = projection ? currentData.map(projection) : currentData;
  if (!oldDataToRetunRef.current || !R.equals(oldDataToRetunRef.current.data, newProjectionOfData)) {
    const loading = response.data === undefined && response.errors === undefined;
    const dataToReturn = _objectSpread(_objectSpread({}, response), {}, {
      loading,
      data: newProjectionOfData
    });
    oldDataToRetunRef.current = dataToReturn;
    return dataToReturn;
  }
  return oldDataToRetunRef.current;
};
const useCreateUseSubscription = function (query) {
  let queryVariables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let usePatchedSubscription = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  const queryString = JSON.stringify(query);
  const queryVariablesString = JSON.stringify(queryVariables);
  const createdSubscription = useMemo(() => {
    return createUseSubscription(query, queryVariables, usePatchedSubscription);
  }, [queryString, queryVariablesString, usePatchedSubscription]);
  return createdSubscription;
};
module.exportDefault(createUseSubscription);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useChat.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useChat.ts                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let createUseSubscription;
module.link("./createUseSubscription", {
  default(v) {
    createUseSubscription = v;
  }
}, 0);
let CHATS_SUBSCRIPTION;
module.link("../graphql/queries/chatSubscription", {
  default(v) {
    CHATS_SUBSCRIPTION = v;
  }
}, 1);
const useChatSubscription = createUseSubscription(CHATS_SUBSCRIPTION);
const useChat = (fn, chatId) => {
  const response = useChatSubscription(fn);
  if (chatId && response.data) {
    var _response$data$find;
    const selectedChat = (_response$data$find = response.data.find(c => {
      return c.chatId === chatId;
    })) !== null && _response$data$find !== void 0 ? _response$data$find : null;
    return _objectSpread(_objectSpread({}, response), {}, {
      data: selectedChat
    });
  }
  return response;
};
module.exportDefault(useChat);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useCurrentPresentation.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useCurrentPresentation.ts                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useMemo;
module.link("react", {
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let createUseSubscription;
module.link("./createUseSubscription", {
  default(v) {
    createUseSubscription = v;
  }
}, 1);
let CURRENT_PRESENTATION_SUBSCRIPTION;
module.link("../graphql/queries/currentPresentationSubscription", {
  default(v) {
    CURRENT_PRESENTATION_SUBSCRIPTION = v;
  }
}, 2);
const useCurrentPresentationSubscription = createUseSubscription(CURRENT_PRESENTATION_SUBSCRIPTION);
const useCurrentPresentation = fn => {
  const response = useCurrentPresentationSubscription(fn);
  const returnObject = useMemo(() => {
    var _response$data;
    return _objectSpread(_objectSpread({}, response), {}, {
      data: (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data[0]
    });
  }, [response]);
  return returnObject;
};
module.exportDefault(useCurrentPresentation);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useCurrentUser.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useCurrentUser.ts                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let useMemo;
module.link("react", {
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let createUseSubscription;
module.link("./createUseSubscription", {
  default(v) {
    createUseSubscription = v;
  }
}, 1);
let CURRENT_USER_SUBSCRIPTION;
module.link("../graphql/queries/currentUserSubscription", {
  default(v) {
    CURRENT_USER_SUBSCRIPTION = v;
  }
}, 2);
const currentUserSubscription = createUseSubscription(CURRENT_USER_SUBSCRIPTION, {}, true);
const useCurrentUser = function () {
  let fn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : u => u;
  const response = currentUserSubscription(fn);
  const returnObject = useMemo(() => {
    var _response$data;
    return _objectSpread(_objectSpread({}, response), {}, {
      data: response.data ? response.data[0] : null,
      rawData: (_response$data = response.data) !== null && _response$data !== void 0 ? _response$data : null
    });
  }, [response]);
  return returnObject;
};
module.exportDefault(useCurrentUser);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useDeduplicatedSubscription.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useDeduplicatedSubscription.ts                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useEffect, useMemo, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
let GrahqlSubscriptionStore, stringToHash;
module.link("/imports/ui/core/singletons/subscriptionStore", {
  default(v) {
    GrahqlSubscriptionStore = v;
  },
  stringToHash(v) {
    stringToHash = v;
  }
}, 1);
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 2);
// same as useSubscription type
//  eslint-disable-next-line @typescript-eslint/no-explicit-any
const useDeduplicatedSubscription = (subscription, options) => {
  const subscriptionHashRef = useRef('');
  const subscriptionRef = useRef(null);
  const optionsRef = useRef(options);
  const subscriptionHash = stringToHash(JSON.stringify({
    subscription,
    variables: options === null || options === void 0 ? void 0 : options.variables,
    skip: options === null || options === void 0 ? void 0 : options.skip
  }));
  useEffect(() => {
    return () => {
      GrahqlSubscriptionStore.unsubscribe(subscription, options === null || options === void 0 ? void 0 : options.variables);
    };
  }, []);
  useEffect(() => {
    if (options !== null && options !== void 0 && options.skip) {
      subscriptionHashRef.current = '';
      if (subscriptionRef.current && optionsRef.current) {
        var _optionsRef$current;
        GrahqlSubscriptionStore.unsubscribe(subscriptionRef.current, (_optionsRef$current = optionsRef.current) === null || _optionsRef$current === void 0 ? void 0 : _optionsRef$current.variables);
        subscriptionRef.current = null;
        optionsRef.current = undefined;
      }
      return;
    }
    if (subscriptionHashRef.current !== subscriptionHash) {
      subscriptionHashRef.current = subscriptionHash;
      if (subscriptionRef.current && optionsRef.current) {
        var _optionsRef$current2;
        GrahqlSubscriptionStore.unsubscribe(subscriptionRef.current, (_optionsRef$current2 = optionsRef.current) === null || _optionsRef$current2 === void 0 ? void 0 : _optionsRef$current2.variables);
      }
      subscriptionRef.current = subscription;
      optionsRef.current = options;
    }
  }, [subscriptionHash]);
  const sub = useMemo(() => {
    if (options !== null && options !== void 0 && options.skip) {
      return makeVar({
        count: 0,
        data: null,
        error: null,
        loading: true,
        sub: null
      });
    }
    return GrahqlSubscriptionStore.makeSubscription(subscription, options === null || options === void 0 ? void 0 : options.variables);
  }, [subscriptionHash]);
  return useReactiveVar(sub);
};
module.exportDefault(useDeduplicatedSubscription);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useLoadedChatMessages.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useLoadedChatMessages.ts                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  setLoadedMessageGathering: () => setLoadedMessageGathering,
  useLoadedPageGathering: () => useLoadedPageGathering
});
let isEqual;
module.link("radash", {
  isEqual(v) {
    isEqual = v;
  }
}, 0);
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
const createLoadedPageGathering = () => {
  const loadedPages = makeVar({});
  const pagesGathering = (pageNumber, result) => {
    const pageMessages = loadedPages()[pageNumber];
    const hasMessages = pageMessages && pageMessages.length > 0;
    const shouldAdd = !hasMessages || !isEqual(pageMessages, result);
    if (shouldAdd) {
      const a = _objectSpread(_objectSpread({}, loadedPages()), {}, {
        [pageNumber]: result
      });
      loadedPages(a);
    }
  };
  const useResultPage = fn => {
    const gatheredPages = useReactiveVar(loadedPages);
    const messages = Object.values(gatheredPages).filter(i => Array.isArray(i)).flat();
    return [messages.map(fn), pagesGathering];
  };
  return [useResultPage, pagesGathering];
};
const [useLoadedPageGathering, setLoadedMessageGathering] = createLoadedPageGathering();
module.exportDefault(useLoadedPageGathering);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useLoadedUserList.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useLoadedUserList.ts                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  useLoadedUserList: () => useLoadedUserList,
  useLocalUserList: () => useLocalUserList,
  setLocalUserList: () => setLocalUserList
});
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 0);
let isEqual;
module.link("radash", {
  isEqual(v) {
    isEqual = v;
  }
}, 1);
let useCreateUseSubscription;
module.link("./createUseSubscription", {
  useCreateUseSubscription(v) {
    useCreateUseSubscription = v;
  }
}, 2);
let USER_LIST_SUBSCRIPTION;
module.link("../graphql/queries/users", {
  USER_LIST_SUBSCRIPTION(v) {
    USER_LIST_SUBSCRIPTION = v;
  }
}, 3);
const createLocalUserListDataGathering = () => {
  const loadedUserList = makeVar([]);
  const setLocalUserList = result => {
    const gatheredUserList = loadedUserList();
    const hasUsers = gatheredUserList && gatheredUserList.length > 0;
    const shouldAdd = !hasUsers || !isEqual(gatheredUserList, result);
    if (shouldAdd) {
      const a = _objectSpread(_objectSpread({}, loadedUserList()), {}, {
        result
      });
      loadedUserList(a);
    }
  };
  const useLocalUserList = fn => {
    const gatheredLoadedUserList = useReactiveVar(loadedUserList);
    const loadedUserListData = Object.values(gatheredLoadedUserList).filter(i => Array.isArray(i)).flat();
    return [loadedUserListData.map(fn), setLocalUserList];
  };
  return [useLocalUserList, setLocalUserList];
};
const useLoadedUserList = (variables, fn) => {
  const useLoadedUserListSubscription = useCreateUseSubscription(USER_LIST_SUBSCRIPTION, variables, true);
  const loadedUserList = useLoadedUserListSubscription(fn);
  return loadedUserList;
};
const [useLocalUserList, setLocalUserList] = createLocalUserListDataGathering();
module.exportDefault({
  useLoadedUserList,
  useLocalUserList,
  setLocalUserList
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useMeeting.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useMeeting.ts                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  useMeeting: () => useMeeting
});
let useMemo;
module.link("react", {
  useMemo(v) {
    useMemo = v;
  }
}, 0);
let useCreateUseSubscription;
module.link("./createUseSubscription", {
  default(v) {
    useCreateUseSubscription = v;
  }
}, 1);
let MEETING_SUBSCRIPTION;
module.link("../graphql/queries/meetingSubscription", {
  default(v) {
    MEETING_SUBSCRIPTION = v;
  }
}, 2);
const useMeetingSubscription = useCreateUseSubscription(MEETING_SUBSCRIPTION, {}, true);
const useMeeting = fn => {
  const response = useMeetingSubscription(fn);
  const returnObject = useMemo(() => {
    var _response$data;
    return _objectSpread(_objectSpread({}, response), {}, {
      data: (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data[0]
    });
  }, [response]);
  return returnObject;
};
module.exportDefault(useMeeting);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useShortcut.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useShortcut.tsx                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  useShortcut: () => useShortcut
});
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 0);
let useEffect, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useState(v) {
    useState = v;
  }
}, 1);
function useShortcut(param) {
  const [shortcut, setShortcut] = useState('');
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore - temporary, while meteor exists in the project
  const BASE_SHORTCUTS = window.meetingClientSettings.public.app.shortcuts;
  useEffect(() => {
    const ENABLED_SHORTCUTS = getFromUserSettings('bbb_shortcuts', null);
    const filteredShortcuts = Object.values(BASE_SHORTCUTS).filter(el => ENABLED_SHORTCUTS ? ENABLED_SHORTCUTS.includes(el.descId) : true);
    const shortcutsString = filteredShortcuts.filter(el => el.descId.toLowerCase() === param.toLowerCase()).map(el => el.accesskey).pop() || '';
    setShortcut(shortcutsString);
  }, [param]);
  return shortcut;
}
module.exportDefault({
  useShortcut
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useTImer.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useTImer.ts                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  useTimer: () => useTimer
});
let createUseSubscription;
module.link("./createUseSubscription", {
  default(v) {
    createUseSubscription = v;
  }
}, 0);
let GET_TIMER;
module.link("../graphql/queries/timer", {
  default(v) {
    GET_TIMER = v;
  }
}, 1);
const useTimerSubscription = createUseSubscription(GET_TIMER, {}, true);
const useTimer = function () {
  var _response$data;
  let fn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : t => t;
  const response = useTimerSubscription(fn);
  return _objectSpread(_objectSpread({}, response), {}, {
    data: (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data[0]
  });
};
module.exportDefault(useTimer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useTalkingIndicator.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useTalkingIndicator.ts                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  useTalkingIndicatorList: () => useTalkingIndicatorList,
  setTalkingIndicatorList: () => setTalkingIndicatorList
});
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 0);
let isEqual;
module.link("radash", {
  isEqual(v) {
    isEqual = v;
  }
}, 1);
const createTalkingIndicatorListDataGathering = () => {
  const talkingIndicatorList = makeVar([]);
  const setTalkingIndicatorList = result => {
    const talkingIndicators = talkingIndicatorList();
    const hasUserVoices = talkingIndicators && talkingIndicators.length > 0;
    const shouldAdd = !hasUserVoices || !isEqual(talkingIndicators, result);
    if (shouldAdd) {
      const a = _objectSpread(_objectSpread({}, talkingIndicatorList()), {}, {
        result
      });
      talkingIndicatorList(a);
    }
  };
  const useTalkingIndicatorList = fn => {
    const gatheredTalkingIndicator = useReactiveVar(talkingIndicatorList);
    const talkingIndicatorData = Object.values(gatheredTalkingIndicator).filter(i => Array.isArray(i)).flat();
    return [talkingIndicatorData.map(fn), setTalkingIndicatorList];
  };
  return [useTalkingIndicatorList, setTalkingIndicatorList];
};
const [useTalkingIndicatorList, setTalkingIndicatorList] = createTalkingIndicatorListDataGathering();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useTalkingUsers.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useTalkingUsers.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  useTalkingUserConsumersCount: () => useTalkingUserConsumersCount,
  dispatchTalkingUserUpdate: () => dispatchTalkingUserUpdate,
  setTalkingUserLoading: () => setTalkingUserLoading
});
let useEffect, useRef, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
let partition;
module.link("/imports/utils/array-utils", {
  partition(v) {
    partition = v;
  }
}, 2);
const TALKING_INDICATOR_TIMEOUT = 6000;
const createUseTalkingUsers = () => {
  const countVar = makeVar(0);
  const stateVar = makeVar([]);
  const loadingVar = makeVar(true);
  const dispatchTalkingUserUpdate = data => stateVar(data);
  const setTalkingUserLoading = loading => loadingVar(loading);
  const useTalkingUserConsumersCount = () => useReactiveVar(countVar);
  const useTalkingUsers = () => {
    const voiceActivity = useReactiveVar(stateVar);
    const loading = useReactiveVar(loadingVar);
    const mutedTimeoutRegistry = useRef({});
    const spokeTimeoutRegistry = useRef({});
    const [record, setRecord] = useState({});
    useEffect(() => {
      countVar(countVar() + 1);
      return () => {
        countVar(countVar() - 1);
      };
    }, []);
    useEffect(() => {
      if (!voiceActivity) {
        setRecord({});
        return;
      }
      const [muted, unmuted] = partition(voiceActivity, v => v.muted);
      unmuted.forEach(voice => {
        const {
          endTime,
          startTime,
          talking,
          userId
        } = voice;
        const currentSpokeTimeout = spokeTimeoutRegistry.current[userId];
        const currentMutedTimeout = mutedTimeoutRegistry.current[userId];
        // User has never talked
        if (!(endTime || startTime)) return;
        setRecord(previousRecord => {
          const previousIndicator = previousRecord[userId];
          if (!previousIndicator && !talking) {
            return previousRecord;
          }
          // Cancel any deletion if user has started talking
          if (talking) {
            if (currentSpokeTimeout) {
              clearTimeout(currentSpokeTimeout);
              spokeTimeoutRegistry.current[userId] = null;
            }
            if (currentMutedTimeout) {
              clearTimeout(currentMutedTimeout);
              mutedTimeoutRegistry.current[userId] = null;
            }
          }
          // User has stopped talking
          if (endTime && !currentSpokeTimeout) {
            spokeTimeoutRegistry.current[userId] = setTimeout(() => {
              setRecord(previousRecord => {
                const newRecord = _objectSpread({}, previousRecord);
                delete newRecord[userId];
                return newRecord;
              });
            }, TALKING_INDICATOR_TIMEOUT);
          }
          return _objectSpread(_objectSpread({}, previousRecord), {}, {
            [userId]: Object.assign(previousRecord[userId] || {}, voice)
          });
        });
      });
      muted.forEach(voice => {
        const {
          userId,
          endTime,
          startTime
        } = voice;
        const currentSpokeTimeout = spokeTimeoutRegistry.current[userId];
        const currentMutedTimeout = mutedTimeoutRegistry.current[userId];
        // User has never talked or exited audio
        if (!(endTime || startTime)) {
          setRecord(previousRecord => {
            const newRecord = _objectSpread({}, previousRecord);
            delete newRecord[userId];
            return newRecord;
          });
          return;
        }
        setRecord(previousRecord => {
          const previousIndicator = previousRecord[userId];
          if (!previousIndicator) {
            return previousRecord;
          }
          if (!currentMutedTimeout && !currentSpokeTimeout) {
            mutedTimeoutRegistry.current[userId] = setTimeout(() => {
              setRecord(previousRecord => {
                const newRecord = _objectSpread({}, previousRecord);
                delete newRecord[userId];
                return newRecord;
              });
              mutedTimeoutRegistry.current[userId] = null;
            }, TALKING_INDICATOR_TIMEOUT);
          }
          return _objectSpread(_objectSpread({}, previousRecord), {}, {
            [userId]: Object.assign(previousRecord[userId] || {}, voice)
          });
        });
      });
    }, [voiceActivity]);
    return {
      error: undefined,
      loading,
      data: record
    };
  };
  return [useTalkingUsers, useTalkingUserConsumersCount, dispatchTalkingUserUpdate, setTalkingUserLoading];
};
const [useTalkingUsers, useTalkingUserConsumersCount, dispatchTalkingUserUpdate, setTalkingUserLoading] = createUseTalkingUsers();
module.exportDefault(useTalkingUsers);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useVoiceActivity.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useVoiceActivity.ts                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 0);
let VOICE_ACTIVITY;
module.link("/imports/ui/core/graphql/queries/whoIsTalking", {
  default(v) {
    VOICE_ACTIVITY = v;
  }
}, 1);
let useDeduplicatedSubscription;
module.link("./useDeduplicatedSubscription", {
  default(v) {
    useDeduplicatedSubscription = v;
  }
}, 2);
const useVoiceActivity = function () {
  let skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  const {
    data,
    loading,
    error
  } = useDeduplicatedSubscription(VOICE_ACTIVITY, {
    skip
  });
  if (error) {
    logger.error({
      logCode: 'voice_activity_sub_error',
      extraInfo: {
        errorName: error.name,
        errorMessage: error.message
      }
    }, 'useVoiceActivity hook failed.');
  }
  return {
    error,
    loading,
    data: data === null || data === void 0 ? void 0 : data.user_voice_activity_stream
  };
};
module.exportDefault(useVoiceActivity);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useWhoIsTalking.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useWhoIsTalking.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  useWhoIsTalking: () => useWhoIsTalking,
  useWhoIsTalkingConsumersCount: () => useWhoIsTalkingConsumersCount,
  setWhoIsTalkingLoading: () => setWhoIsTalkingLoading,
  dispatchWhoIsTalkingUpdate: () => dispatchWhoIsTalkingUpdate
});
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
const createUseWhoIsTalking = () => {
  const countVar = makeVar(0);
  const stateVar = makeVar({});
  const loadingVar = makeVar(true);
  const setWhoIsTalkingState = newState => stateVar(newState);
  const setWhoIsTalkingLoading = loading => loadingVar(loading);
  const getWhoIsTalking = () => stateVar();
  const dispatchWhoIsTalkingUpdate = data => {
    if (countVar() === 0) return;
    if (!data) {
      stateVar({});
      return;
    }
    const newTalkingUsers = _objectSpread({}, getWhoIsTalking());
    data.forEach(voice => {
      const {
        userId,
        muted,
        talking
      } = voice;
      if (muted) {
        delete newTalkingUsers[userId];
        return;
      }
      newTalkingUsers[userId] = talking;
    });
    setWhoIsTalkingState(newTalkingUsers);
  };
  const useWhoIsTalkingConsumersCount = () => useReactiveVar(countVar);
  const useWhoIsTalking = () => {
    const talkingUsers = useReactiveVar(stateVar);
    const loading = useReactiveVar(loadingVar);
    useEffect(() => {
      countVar(countVar() + 1);
      return () => {
        countVar(countVar() - 1);
        if (countVar() === 0) {
          setWhoIsTalkingState({});
        }
      };
    }, []);
    return {
      data: talkingUsers,
      loading
    };
  };
  return [useWhoIsTalking, useWhoIsTalkingConsumersCount, setWhoIsTalkingLoading, dispatchWhoIsTalkingUpdate];
};
const [useWhoIsTalking, useWhoIsTalkingConsumersCount, setWhoIsTalkingLoading, dispatchWhoIsTalkingUpdate] = createUseWhoIsTalking();
module.exportDefault(useWhoIsTalking);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useWhoIsUnmuted.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/hooks/useWhoIsUnmuted.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  useWhoIsUnmuted: () => useWhoIsUnmuted,
  useWhoIsUnmutedConsumersCount: () => useWhoIsUnmutedConsumersCount,
  setWhoIsUnmutedLoading: () => setWhoIsUnmutedLoading,
  dispatchWhoIsUnmutedUpdate: () => dispatchWhoIsUnmutedUpdate
});
let useEffect;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 1);
const createUseWhoIsUnmuted = () => {
  const countVar = makeVar(0);
  const stateVar = makeVar({});
  const loadingVar = makeVar(true);
  const setWhoIsUnmutedState = newState => stateVar(newState);
  const setWhoIsUnmutedLoading = loading => loadingVar(loading);
  const getWhoIsUnmuted = () => stateVar();
  const dispatchWhoIsUnmutedUpdate = data => {
    if (countVar() === 0) return;
    if (!data) {
      stateVar({});
      return;
    }
    const newUnmutedUsers = _objectSpread({}, getWhoIsUnmuted());
    data.forEach(voice => {
      const {
        userId,
        muted
      } = voice;
      if (muted) {
        delete newUnmutedUsers[userId];
        return;
      }
      newUnmutedUsers[userId] = true;
    });
    setWhoIsUnmutedState(newUnmutedUsers);
  };
  const useWhoIsUnmutedConsumersCount = () => useReactiveVar(countVar);
  const useWhoIsUnmuted = () => {
    const unmutedUsers = useReactiveVar(stateVar);
    const loading = useReactiveVar(loadingVar);
    useEffect(() => {
      countVar(countVar() + 1);
      return () => {
        countVar(countVar() - 1);
        if (countVar() === 0) {
          setWhoIsUnmutedState({});
        }
      };
    }, []);
    return {
      data: unmutedUsers,
      loading
    };
  };
  return [useWhoIsUnmuted, useWhoIsUnmutedConsumersCount, setWhoIsUnmutedLoading, dispatchWhoIsUnmutedUpdate];
};
const [useWhoIsUnmuted, useWhoIsUnmutedConsumersCount, setWhoIsUnmutedLoading, dispatchWhoIsUnmutedUpdate] = createUseWhoIsUnmuted();
module.exportDefault(useWhoIsUnmuted);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"initial-values":{"meetingClientSettings.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/initial-values/meetingClientSettings.ts                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  meetingClientSettingsInitialValues: () => meetingClientSettingsInitialValues
});
const meetingClientSettingsInitialValues = {
  public: {
    app: {
      instanceId: '',
      mobileFontSize: '16px',
      desktopFontSize: '14px',
      audioChatNotification: false,
      autoJoin: true,
      listenOnlyMode: true,
      forceListenOnly: false,
      skipCheck: false,
      skipCheckOnJoin: false,
      enableDynamicAudioDeviceSelection: true,
      clientTitle: 'BigBlueButton',
      appName: 'BigBlueButton HTML5 Client',
      bbbServerVersion: 'HTML5_FULL_BBB_VERSION',
      displayBbbServerVersion: true,
      copyright: '©2023 BigBlueButton Inc.',
      html5ClientBuild: 'HTML5_CLIENT_VERSION',
      helpLink: 'https://bigbluebutton.org/html5/',
      delayForUnmountOfSharedNote: 120000,
      bbbTabletApp: {
        enabled: true,
        iosAppStoreUrl: 'https://apps.apple.com/us/app/bigbluebutton-tablet/id1641156756',
        iosAppUrlScheme: 'bigbluebutton-tablet'
      },
      lockOnJoin: true,
      cdn: '',
      basename: '/html5client',
      bbbWebBase: '/bigbluebutton',
      learningDashboardBase: '/learning-analytics-dashboard',
      customStyleUrl: null,
      darkTheme: {
        enabled: true
      },
      askForFeedbackOnLogout: false,
      askForConfirmationOnLeave: false,
      wakeLock: {
        enabled: true
      },
      allowDefaultLogoutUrl: true,
      dynamicGuestPolicy: true,
      enableGuestLobbyMessage: true,
      guestPolicyExtraAllowOptions: false,
      alwaysShowWaitingRoomUI: true,
      enableLimitOfViewersInWebcam: false,
      enableMultipleCameras: true,
      enableCameraAsContent: true,
      enableWebcamSelectorButton: true,
      enableTalkingIndicator: true,
      enableCameraBrightness: true,
      mirrorOwnWebcam: false,
      viewersInWebcam: 8,
      ipv4FallbackDomain: '',
      allowLogout: true,
      allowFullscreen: true,
      preloadNextSlides: 2,
      warnAboutUnsavedContentOnMeetingEnd: false,
      audioCaptions: {
        alwaysVisible: false,
        enabled: false,
        mobile: false,
        provider: 'webspeech',
        language: {
          available: ['en-US', 'es-ES', 'fr-FR', 'pt-BR'],
          forceLocale: false,
          defaultSelectLocale: true,
          locale: 'disabled'
        }
      },
      mutedAlert: {
        enabled: true,
        interval: 200,
        threshold: -50,
        duration: 4000
      },
      remainingTimeThreshold: 30,
      remainingTimeAlertThresholdArray: [1, 5],
      enableDebugWindow: true,
      breakouts: {
        allowUserChooseRoomByDefault: false,
        captureWhiteboardByDefault: false,
        captureSharedNotesByDefault: false,
        sendInvitationToAssignedModeratorsByDefault: false,
        breakoutRoomLimit: 16
      },
      customHeartbeat: false,
      showAllAvailableLocales: true,
      showAudioFilters: true,
      reactionsButton: {
        enabled: true
      },
      emojiRain: {
        enabled: false,
        intervalEmojis: 2000,
        numberOfEmojis: 5,
        emojiSize: 2
      },
      enableNetworkStats: true,
      enableCopyNetworkStatsButton: true,
      userSettingsStorage: 'session',
      defaultSettings: {
        application: {
          selectedLayout: 'custom',
          animations: true,
          chatAudioAlerts: false,
          chatPushAlerts: false,
          userJoinAudioAlerts: false,
          userJoinPushAlerts: false,
          userLeaveAudioAlerts: false,
          userLeavePushAlerts: false,
          raiseHandAudioAlerts: true,
          raiseHandPushAlerts: true,
          guestWaitingAudioAlerts: true,
          guestWaitingPushAlerts: true,
          wakeLock: true,
          paginationEnabled: true,
          whiteboardToolbarAutoHide: false,
          autoCloseReactionsBar: true,
          darkTheme: false,
          fallbackLocale: 'en',
          overrideLocale: null
        },
        audio: {
          inputDeviceId: 'undefined',
          outputDeviceId: 'undefined'
        },
        dataSaving: {
          viewParticipantsWebcams: true,
          viewScreenshare: true
        },
        transcription: {
          partialUtterances: true,
          minUtteranceLength: 1
        }
      },
      shortcuts: {
        openOptions: {
          accesskey: 'O',
          descId: 'openOptions'
        },
        toggleUserList: {
          accesskey: 'U',
          descId: 'toggleUserList'
        },
        toggleMute: {
          accesskey: 'M',
          descId: 'toggleMute'
        },
        joinAudio: {
          accesskey: 'J',
          descId: 'joinAudio'
        },
        leaveAudio: {
          accesskey: 'L',
          descId: 'leaveAudio'
        },
        togglePublicChat: {
          accesskey: 'P',
          descId: 'togglePublicChat'
        },
        hidePrivateChat: {
          accesskey: 'H',
          descId: 'hidePrivateChat'
        },
        closePrivateChat: {
          accesskey: 'G',
          descId: 'closePrivateChat'
        },
        raiseHand: {
          accesskey: 'R',
          descId: 'raiseHand'
        },
        openActions: {
          accesskey: 'A',
          descId: 'openActions'
        },
        openDebugWindow: {
          accesskey: 'K',
          descId: 'openDebugWindow'
        }
      },
      branding: {
        displayBrandingArea: true
      },
      connectionTimeout: 60000,
      showHelpButton: true,
      effectiveConnection: ['critical', 'danger', 'warning'],
      fallbackOnEmptyLocaleString: true,
      disableWebsocketFallback: true,
      maxMutationPayloadSize: 10485760 // 10MB
    },

    externalVideoPlayer: {
      enabled: true
    },
    kurento: {
      wsUrl: 'HOST',
      cameraWsOptions: {
        wsConnectionTimeout: 4000,
        maxRetries: 7,
        debug: false,
        heartbeat: {
          interval: 15000,
          delay: 3000,
          reconnectOnFailure: true
        }
      },
      gUMTimeout: 20000,
      signalCandidates: false,
      traceLogs: false,
      cameraTimeouts: {
        baseTimeout: 30000,
        maxTimeout: 60000
      },
      screenshare: {
        enableVolumeControl: true,
        subscriberOffering: false,
        bitrate: 1500,
        mediaTimeouts: {
          maxConnectionAttempts: 2,
          baseTimeout: 20000,
          baseReconnectionTimeout: 8000,
          maxTimeout: 25000,
          timeoutIncreaseFactor: 1.5
        },
        constraints: {
          video: {
            frameRate: {
              ideal: 5,
              max: 10
            },
            width: {
              max: 2560
            },
            height: {
              max: 1600
            }
          },
          audio: true
        }
      },
      cameraProfiles: [{
        id: 'low-u30',
        name: 'low-u30',
        bitrate: 30,
        hidden: true
      }, {
        id: 'low-u25',
        name: 'low-u25',
        bitrate: 40,
        hidden: true
      }, {
        id: 'low-u20',
        name: 'low-u20',
        bitrate: 50,
        hidden: true
      }, {
        id: 'low-u15',
        name: 'low-u15',
        bitrate: 70,
        hidden: true
      }, {
        id: 'low-u12',
        name: 'low-u12',
        bitrate: 90,
        hidden: true
      }, {
        id: 'low-u8',
        name: 'low-u8',
        bitrate: 100,
        hidden: true
      }, {
        id: 'low',
        name: 'Low',
        default: false,
        bitrate: 100
      }, {
        id: 'medium',
        name: 'Medium',
        default: true,
        bitrate: 200
      }, {
        id: 'high',
        name: 'High',
        default: false,
        bitrate: 500,
        constraints: {
          width: 1280,
          height: 720,
          frameRate: 15
        }
      }, {
        id: 'hd',
        name: 'High definition',
        default: false,
        bitrate: 800,
        constraints: {
          width: 1280,
          height: 720,
          frameRate: 30
        }
      }, {
        id: 'fhd',
        name: 'Camera as content',
        hidden: true,
        default: false,
        bitrate: 1500,
        constraints: {
          width: 1920,
          height: 1080
        }
      }],
      enableScreensharing: true,
      enableVideo: true,
      enableVideoMenu: true,
      enableVideoPin: true,
      autoShareWebcam: false,
      skipVideoPreview: false,
      skipVideoPreviewOnFirstJoin: false,
      cameraSortingModes: {
        defaultSorting: 'LOCAL_ALPHABETICAL',
        paginationSorting: 'VOICE_ACTIVITY_LOCAL'
      },
      cameraQualityThresholds: {
        enabled: true,
        applyConstraints: false,
        privilegedStreams: true,
        debounceTime: 2500,
        thresholds: [{
          threshold: 8,
          profile: 'low-u8'
        }, {
          threshold: 12,
          profile: 'low-u12'
        }, {
          threshold: 15,
          profile: 'low-u15'
        }, {
          threshold: 20,
          profile: 'low-u20'
        }, {
          threshold: 25,
          profile: 'low-u25'
        }, {
          threshold: 30,
          profile: 'low-u30'
        }]
      },
      pagination: {
        paginationToggleEnabled: true,
        pageChangeDebounceTime: 2500,
        desktopPageSizes: {
          moderator: 0,
          viewer: 5
        },
        mobilePageSizes: {
          moderator: 2,
          viewer: 2
        },
        desktopGridSizes: {
          moderator: 48,
          viewer: 48
        },
        mobileGridSizes: {
          moderator: 14,
          viewer: 14
        }
      },
      paginationThresholds: {
        enabled: false,
        thresholds: [{
          users: 30,
          desktopPageSizes: {
            moderator: 25,
            viewer: 25
          }
        }, {
          users: 40,
          desktopPageSizes: {
            moderator: 20,
            viewer: 20
          }
        }, {
          users: 50,
          desktopPageSizes: {
            moderator: 16,
            viewer: 16
          }
        }, {
          users: 60,
          desktopPageSizes: {
            moderator: 14,
            viewer: 12
          }
        }, {
          users: 70,
          desktopPageSizes: {
            moderator: 12,
            viewer: 10
          }
        }, {
          users: 80,
          desktopPageSizes: {
            moderator: 10,
            viewer: 8
          }
        }, {
          users: 90,
          desktopPageSizes: {
            moderator: 8,
            viewer: 6
          }
        }, {
          users: 100,
          desktopPageSizes: {
            moderator: 6,
            viewer: 4
          }
        }]
      }
    },
    syncUsersWithConnectionManager: {
      enabled: false,
      syncInterval: 60000
    },
    poll: {
      enabled: true,
      allowCustomResponseInput: true,
      maxCustom: 5,
      maxTypedAnswerLength: 45,
      chatMessage: true
    },
    captions: {
      enabled: true,
      id: 'captions',
      dictation: false,
      background: '#000000',
      font: {
        color: '#ffffff',
        family: 'Calibri',
        size: '24px'
      },
      locales: [{
        locale: 'en-US',
        name: 'English'
      }],
      lines: 2,
      time: 5000,
      showButton: false,
      defaultPad: 'en',
      captionLimit: 3,
      lineLimit: 60
    },
    timer: {
      enabled: true,
      alarm: true,
      music: {
        enabled: false,
        volume: 0.4,
        track1: 'RelaxingMusic',
        track2: 'CalmMusic',
        track3: 'aristocratDrums'
      },
      interval: {
        clock: 100,
        offset: 60000
      },
      time: 5,
      tabIndicator: false
    },
    chat: {
      enabled: true,
      itemsPerPage: 100,
      timeBetweenFetchs: 1000,
      enableSaveAndCopyPublicChat: true,
      bufferChatInsertsMs: 0,
      startClosed: false,
      min_message_length: 1,
      max_message_length: 5000,
      grouping_messages_window: 10000,
      type_system: 'SYSTEM_MESSAGE',
      type_public: 'PUBLIC_ACCESS',
      type_private: 'PRIVATE_ACCESS',
      system_userid: 'SYSTEM_MESSAGE',
      system_username: 'SYSTEM_MESSAGE',
      public_id: 'public',
      public_group_id: 'MAIN-PUBLIC-GROUP-CHAT',
      public_userid: 'public_chat_userid',
      public_username: 'public_chat_username',
      storage_key: 'UNREAD_CHATS',
      system_messages_keys: {
        chat_clear: 'PUBLIC_CHAT_CLEAR',
        chat_poll_result: 'PUBLIC_CHAT_POLL_RESULT',
        chat_exported_presentation: 'PUBLIC_CHAT_EXPORTED_PRESENTATION',
        chat_status_message: 'PUBLIC_CHAT_STATUS'
      },
      typingIndicator: {
        enabled: true,
        showNames: true
      },
      moderatorChatEmphasized: true,
      privateMessageReadFeedback: {
        enabled: false
      },
      autoConvertEmoji: true,
      emojiPicker: {
        enable: false
      },
      disableEmojis: [],
      allowedElements: ['a', 'code', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'ol', 'ul', 'p', 'strong']
    },
    userReaction: {
      enabled: true,
      expire: 60,
      reactions: [{
        id: 'smiley',
        native: '😃'
      }, {
        id: 'neutral_face',
        native: '😐'
      }, {
        id: 'slightly_frowning_face',
        native: '🙁'
      }, {
        id: '+1',
        native: '👍'
      }, {
        id: '-1',
        native: '👎'
      }, {
        id: 'clap',
        native: '👏'
      }]
    },
    notes: {
      enabled: true,
      id: 'notes',
      pinnable: true
    },
    layout: {
      hidePresentationOnJoin: false,
      showParticipantsOnLogin: true,
      showPushLayoutButton: true,
      showPushLayoutToggle: true
    },
    pads: {
      url: 'ETHERPAD_HOST',
      cookie: {
        path: '/',
        sameSite: 'None',
        secure: true
      }
    },
    media: {
      audio: {
        defaultFullAudioBridge: 'fullaudio',
        defaultListenOnlyBridge: 'fullaudio',
        bridges: [{
          name: 'sipjs',
          path: 'bridge/sip'
        }, {
          name: 'fullaudio',
          path: 'bridge/sfu-audio-bridge'
        }],
        retryThroughRelay: false
      },
      stunTurnServersFetchAddress: '/bigbluebutton/api/stuns',
      cacheStunTurnServers: true,
      fallbackStunServer: '',
      forceRelay: false,
      forceRelayOnFirefox: true,
      mediaTag: '#remote-media',
      callTransferTimeout: 5000,
      callHangupTimeout: 2000,
      callHangupMaximumRetries: 10,
      echoTestNumber: 'echo',
      listenOnlyCallTimeout: 15000,
      transparentListenOnly: false,
      fullAudioOffering: true,
      listenOnlyOffering: false,
      iceGatheringTimeout: 5000,
      audioConnectionTimeout: 5000,
      audioReconnectionDelay: 5000,
      audioReconnectionAttempts: 3,
      sipjsHackViaWs: false,
      sipjsAllowMdns: false,
      sip_ws_host: '',
      toggleMuteThrottleTime: 300,
      websocketKeepAliveInterval: 30,
      websocketKeepAliveDebounce: 10,
      traceSip: false,
      sdpSemantics: 'unified-plan',
      localEchoTest: {
        enabled: true,
        initialHearingState: true,
        useRtcLoopbackInChromium: true,
        delay: {
          enabled: true,
          delayTime: 0.5,
          maxDelayTime: 2
        }
      },
      showVolumeMeter: true
    },
    stats: {
      enabled: true,
      interval: 10000,
      timeout: 30000,
      log: true,
      notification: {
        warning: false,
        error: true
      },
      jitter: [10, 20, 30],
      loss: [0.05, 0.1, 0.2],
      rtt: [500, 1000, 2000],
      level: ['warning', 'danger', 'critical'],
      help: 'STATS_HELP_URL'
    },
    presentation: {
      allowDownloadOriginal: true,
      allowDownloadWithAnnotations: true,
      allowSnapshotOfCurrentSlide: true,
      panZoomThrottle: 32,
      restoreOnUpdate: true,
      uploadEndpoint: '/bigbluebutton/presentation/upload',
      fileUploadConstraintsHint: false,
      mirroredFromBBBCore: {
        uploadSizeMax: 30000000,
        uploadPagesMax: 200
      },
      uploadValidMimeTypes: [{
        extension: '.pdf',
        mime: 'application/pdf'
      }, {
        extension: '.doc',
        mime: 'application/msword'
      }, {
        extension: '.docx',
        mime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
      }, {
        extension: '.xls',
        mime: 'application/vnd.ms-excel'
      }, {
        extension: '.xlsx',
        mime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      }, {
        extension: '.ppt',
        mime: 'application/vnd.ms-powerpoint'
      }, {
        extension: '.pptx',
        mime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
      }, {
        extension: '.txt',
        mime: 'text/plain'
      }, {
        extension: '.rtf',
        mime: 'application/rtf'
      }, {
        extension: '.odt',
        mime: 'application/vnd.oasis.opendocument.text'
      }, {
        extension: '.ods',
        mime: 'application/vnd.oasis.opendocument.spreadsheet'
      }, {
        extension: '.odp',
        mime: 'application/vnd.oasis.opendocument.presentation'
      }, {
        extension: '.odg',
        mime: 'application/vnd.oasis.opendocument.graphics'
      }, {
        extension: '.odc',
        mime: 'application/vnd.oasis.opendocument.chart'
      }, {
        extension: '.odi',
        mime: 'application/vnd.oasis.opendocument.image'
      }, {
        extension: '.jpg',
        mime: 'image/jpeg'
      }, {
        extension: '.jpeg',
        mime: 'image/jpeg'
      }, {
        extension: '.png',
        mime: 'image/png'
      }, {
        extension: '.webp',
        mime: 'image/webp'
      }]
    },
    user: {
      role_moderator: 'MODERATOR',
      role_viewer: 'VIEWER',
      label: {
        moderator: false,
        mobile: true,
        guest: true,
        sharingWebcam: true
      }
    },
    whiteboard: {
      annotationsQueueProcessInterval: 60,
      cursorInterval: 150,
      pointerDiameter: 5,
      maxStickyNoteLength: 1000,
      maxNumberOfAnnotations: 300,
      allowInfiniteWhiteboard: false,
      allowInfiniteWhiteboardInBreakouts: false,
      annotations: {
        status: {
          start: 'DRAW_START',
          update: 'DRAW_UPDATE',
          end: 'DRAW_END'
        }
      },
      styles: {
        text: {
          family: 'script'
        }
      },
      toolbar: {
        multiUserPenOnly: false,
        colors: [{
          label: 'black',
          value: '#000000'
        }, {
          label: 'white',
          value: '#ffffff'
        }, {
          label: 'red',
          value: '#ff0000'
        }, {
          label: 'orange',
          value: '#ff8800'
        }, {
          label: 'eletricLime',
          value: '#ccff00'
        }, {
          label: 'Lime',
          value: '#00ff00'
        }, {
          label: 'Cyan',
          value: '#00ffff'
        }, {
          label: 'dodgerBlue',
          value: '#0088ff'
        }, {
          label: 'blue',
          value: '#0000ff'
        }, {
          label: 'violet',
          value: '#8800ff'
        }, {
          label: 'magenta',
          value: '#ff00ff'
        }, {
          label: 'silver',
          value: '#c0c0c0'
        }],
        thickness: [{
          value: 14
        }, {
          value: 12
        }, {
          value: 10
        }, {
          value: 8
        }, {
          value: 6
        }, {
          value: 4
        }, {
          value: 2
        }, {
          value: 1
        }],
        font_sizes: [{
          value: 36
        }, {
          value: 32
        }, {
          value: 28
        }, {
          value: 24
        }, {
          value: 20
        }, {
          value: 16
        }],
        tools: [{
          icon: 'select_tool',
          value: 'select'
        }, {
          icon: 'hand_tool',
          value: 'hand'
        }, {
          icon: 'draw_tool',
          value: 'draw'
        }, {
          icon: 'eraser_tool',
          value: 'eraser'
        }, {
          icon: 'arrow_tool',
          value: 'arrow'
        }, {
          icon: 'text_tool',
          value: 'text'
        }, {
          icon: 'note_tool',
          value: 'note'
        }, {
          icon: 'rectangle_tool',
          value: 'rectangle'
        }, {
          icon: 'more_tool',
          value: 'more'
        }],
        presenterTools: ['select', 'hand', 'draw', 'eraser', 'arrow', 'text', 'note', 'rectangle', 'more'],
        multiUserTools: ['select', 'hand', 'draw', 'eraser', 'arrow', 'text', 'note', 'rectangle', 'more']
      }
    },
    clientLog: {
      server: {
        enabled: false,
        level: 'info'
      },
      console: {
        enabled: true,
        level: 'debug'
      },
      external: {
        enabled: false,
        level: 'info',
        url: 'https://LOG_HOST/html5Log',
        method: 'POST',
        throttleInterval: 400,
        flushOnClose: true,
        logTag: ''
      }
    },
    virtualBackgrounds: {
      enabled: true,
      enableVirtualBackgroundUpload: true,
      storedOnBBB: true,
      showThumbnails: true,
      imagesPath: '/resources/images/virtual-backgrounds/',
      thumbnailsPath: '/resources/images/virtual-backgrounds/thumbnails/',
      fileNames: ['home.jpg', 'coffeeshop.jpg', 'board.jpg']
    }
  },
  private: {
    analytics: {
      includeChat: true
    },
    app: {
      host: '127.0.0.1',
      localesUrl: '/locale-list',
      pencilChunkLength: 100,
      loadSlidesFromHttpAlways: false
    },
    serverLog: {
      level: 'info',
      streamerLog: false,
      includeServerInfo: true,
      healthChecker: {
        enable: true,
        intervalMs: 30000
      }
    },
    minBrowserVersions: [{
      browser: 'chrome',
      version: 72
    }, {
      browser: 'chromeMobileIOS',
      version: 94
    }, {
      browser: 'firefox',
      version: 68
    }, {
      browser: 'firefoxMobile',
      version: 68
    }, {
      browser: 'edge',
      version: 79
    }, {
      browser: 'ie',
      version: 'Infinity'
    }, {
      browser: 'safari',
      version: [12, 1]
    }, {
      browser: 'mobileSafari',
      version: [12, 1]
    }, {
      browser: 'opera',
      version: 50
    }, {
      browser: 'electron',
      version: [0, 36]
    }, {
      browser: 'SamsungInternet',
      version: 10
    }, {
      browser: 'YandexBrowser',
      version: 19
    }],
    prometheus: {
      enabled: false,
      path: '/metrics',
      collectDefaultMetrics: false
    }
  }
};
module.exportDefault(meetingClientSettingsInitialValues);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"local-states":{"createUseLocalState.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/local-states/createUseLocalState.ts                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 0);
function createUseLocalState(initialValue) {
  const localState = makeVar(initialValue);
  function useLocalState() {
    const reactiveLocalState = useReactiveVar(localState);
    return [reactiveLocalState, changeLocalState];
  }
  // eslint-disable-next-line @typescript-eslint/ban-types
  function changeLocalState(value) {
    if (value instanceof Function) {
      return localState(value(localState()));
    }
    return localState(value);
  }
  return [useLocalState, changeLocalState, localState];
}
module.exportDefault(createUseLocalState);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useAudioCaptionEnable.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/local-states/useAudioCaptionEnable.ts                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  setAudioCaptionEnable: () => setAudioCaptionEnable
});
let createUseLocalState;
module.link("./createUseLocalState", {
  default(v) {
    createUseLocalState = v;
  }
}, 0);
const initialAudioCaptionEnable = false;
const [useAudioCaptionEnable, setAudioCaptionEnable] = createUseLocalState(initialAudioCaptionEnable);
module.exportDefault(useAudioCaptionEnable);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useAuthData.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/local-states/useAuthData.ts                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  setAuthData: () => setAuthData
});
let createUseLocalState;
module.link("./createUseLocalState", {
  default(v) {
    createUseLocalState = v;
  }
}, 0);
const initialAudioCaptionEnable = {
  meetingId: '',
  authToken: '',
  extId: '',
  logoutUrl: '',
  meetingName: '',
  sessionToken: '',
  userId: '',
  userName: ''
};
const [useAuthData, setAuthData] = createUseLocalState(initialAudioCaptionEnable);
module.exportDefault(useAuthData);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useCurrentLocale.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/local-states/useCurrentLocale.ts                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  setUseCurrentLocale: () => setUseCurrentLocale
});
let createUseLocalState;
module.link("./createUseLocalState", {
  default(v) {
    createUseLocalState = v;
  }
}, 0);
const initialLocale = navigator.languages ? navigator.languages[0] : navigator.language;
const [useCurrentLocale, setUseCurrentLocale] = createUseLocalState(initialLocale);
module.exportDefault(useCurrentLocale);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useMeetingSettings.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/local-states/useMeetingSettings.ts                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  setMeetingSettings: () => setMeetingSettings
});
let meetingClientSettingsInitialValues;
module.link("../initial-values/meetingClientSettings", {
  default(v) {
    meetingClientSettingsInitialValues = v;
  }
}, 0);
let createUseLocalState;
module.link("./createUseLocalState", {
  default(v) {
    createUseLocalState = v;
  }
}, 1);
const initialMeetingSeetings = meetingClientSettingsInitialValues;
const [useMeetingSettings, setMeetingSettings] = createUseLocalState(initialMeetingSeetings);
module.exportDefault(useMeetingSettings);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"usePendingChat.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/local-states/usePendingChat.ts                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  setPendingChat: () => setPendingChat
});
let createUseLocalState;
module.link("./createUseLocalState", {
  default(v) {
    createUseLocalState = v;
  }
}, 0);
const initialPendingChat = '';
const [usePendingChat, setPendingChat] = createUseLocalState(initialPendingChat);
module.exportDefault(usePendingChat);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useTimeSync.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/local-states/useTimeSync.ts                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  setTimeSync: () => setTimeSync
});
let createUseLocalState;
module.link("./createUseLocalState", {
  default(v) {
    createUseLocalState = v;
  }
}, 0);
const initialPendingChat = 0;
const [useTimeSync, setTimeSync] = createUseLocalState(initialPendingChat);
module.exportDefault(useTimeSync);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useUserSettings.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/local-states/useUserSettings.ts                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  setUserSettings: () => setUserSettings,
  localUserSettings: () => localUserSettings
});
let createUseLocalState;
module.link("./createUseLocalState", {
  default(v) {
    createUseLocalState = v;
  }
}, 0);
const initialUserSettings = {};
const [useUserSettings, setUserSettings, localUserSettings] = createUseLocalState(initialUserSettings);
module.exportDefault(useUserSettings);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"providers":{"current-user.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/providers/current-user.tsx                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  CurrentUserContext: () => CurrentUserContext
});
let React, createContext;
module.link("react", {
  default(v) {
    React = v;
  },
  createContext(v) {
    createContext = v;
  }
}, 0);
let useCurrentUser;
module.link("../hooks/useCurrentUser", {
  default(v) {
    useCurrentUser = v;
  }
}, 1);
const CurrentUserContext = /*#__PURE__*/createContext({
  loading: true
});
const CurrentUserProvider = _ref => {
  let {
    children
  } = _ref;
  const response = useCurrentUser();
  return /*#__PURE__*/React.createElement(CurrentUserContext.Provider, {
    value: {
      loading: response.loading,
      data: response.rawData,
      errors: response.errors
    }
  }, children);
};
module.exportDefault(CurrentUserProvider);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"singletons":{"intlHolder.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/singletons/intlHolder.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
class IntlHolder {
  constructor() {
    this.intl = null;
  }
  setIntl(intl) {
    this.intl = intl;
  }
  getIntl() {
    return this.intl;
  }
}
module.exportDefault(new IntlHolder());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"subscriptionStore.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/singletons/subscriptionStore.ts                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  stringToHash: () => stringToHash
});
let makeVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  }
}, 0);
let applyPatch, deepClone;
module.link("fast-json-patch", {
  applyPatch(v) {
    applyPatch = v;
  },
  deepClone(v) {
    deepClone = v;
  }
}, 1);
let apolloContextHolder;
module.link("../graphql/apolloContextHolder/apolloContextHolder", {
  default(v) {
    apolloContextHolder = v;
  }
}, 2);
function stringToHash(string) {
  return string.split('').reduce((hash, char) => {
    // It's a intended bitwise operation
    // eslint-disable-next-line no-bitwise
    return char.charCodeAt(0) + (hash << 6) + (hash << 16) - hash;
  }, 0).toString();
}
class GrahqlSubscriptionStore {
  constructor() {
    this.graphqlSubscriptions = {};
  }
  makeSubscription(subscription, variables, fetchPolicy) {
    const subscriptionHash = stringToHash(JSON.stringify({
      subscription,
      variables
    }));
    const subscriptionStored = this.graphqlSubscriptions[subscriptionHash];
    if (subscriptionStored) {
      const subStored = subscriptionStored();
      subscriptionStored(_objectSpread(_objectSpread({}, subStored), {}, {
        count: (subStored.count || 1) + 1
      }));
      window.dispatchEvent(new CustomEvent('graphqlSubscription', {
        detail: {
          subscriptionHash,
          type: 'next',
          response: subscriptionStored()
        }
      }));
      return subscriptionStored;
    }
    const newSubStructure = makeVar({
      count: 0,
      data: null,
      error: null,
      loading: true,
      sub: null
    });
    const apolloClient = apolloContextHolder.getClient();
    const sub = apolloClient.subscribe({
      query: subscription,
      variables,
      fetchPolicy: fetchPolicy || 'no-cache'
    }).subscribe({
      next: data => {
        const values = newSubStructure();
        values.loading = false;
        if (data.data.patch) {
          // @ts-ignore
          const accessKey = Object.keys(values.data)[0];
          // @ts-ignore
          const patchedData = applyPatch(deepClone(values.data[accessKey]), data.data.patch).newDocument;
          values.data = {
            [accessKey]: patchedData
          };
        } else {
          values.data = data.data;
        }
        newSubStructure(_objectSpread({}, values));
        window.dispatchEvent(new CustomEvent('graphqlSubscription', {
          detail: {
            subscriptionHash,
            type: 'next',
            response: values
          }
        }));
      },
      error: error => {
        const values = newSubStructure();
        values.error = error;
        values.loading = false;
        newSubStructure(values);
        window.dispatchEvent(new CustomEvent('graphqlSubscription', {
          detail: {
            subscriptionHash,
            type: 'error',
            error
          }
        }));
      }
    });
    const subValues = newSubStructure();
    subValues.sub = sub;
    subValues.count = 1;
    newSubStructure(subValues);
    this.graphqlSubscriptions[subscriptionHash] = newSubStructure;
    return newSubStructure;
  }
  unsubscribe(subscription, variables) {
    const subscriptionHash = stringToHash(JSON.stringify({
      subscription,
      variables
    }));
    const subscriptionStored = this.graphqlSubscriptions[subscriptionHash];
    if (!subscriptionStored) {
      return;
    }
    subscriptionStored(_objectSpread(_objectSpread({}, subscriptionStored()), {}, {
      count: subscriptionStored().count - 1
    }));
    if (subscriptionStored().count === 0) {
      var _subscriptionStored, _subscriptionStored$s;
      (_subscriptionStored = subscriptionStored()) === null || _subscriptionStored === void 0 ? void 0 : (_subscriptionStored$s = _subscriptionStored.sub) === null || _subscriptionStored$s === void 0 ? void 0 : _subscriptionStored$s.unsubscribe();
      delete this.graphqlSubscriptions[subscriptionHash];
    }
  }
}
module.exportDefault(new GrahqlSubscriptionStore());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"utils":{"getBaseUrl.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/core/utils/getBaseUrl.ts                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
function getBaseUrl() {
  // @ts-ignore
  const webApi = window.meetingClientSettings.public.app.bbbWebBase;
  return webApi;
}
module.exportDefault(getBaseUrl);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"services":{"settings":{"hooks":{"mutations.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/settings/hooks/mutations.ts                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  USER_CHANGED_LOCAL_SETTINGS: () => USER_CHANGED_LOCAL_SETTINGS
});
let gql;
module.link("@apollo/client", {
  gql(v) {
    gql = v;
  }
}, 0);
const USER_CHANGED_LOCAL_SETTINGS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  mutation UserChangedLocalSettings($settings: json!) {\n    userSetClientSettings(\n      userClientSettingsJson: $settings\n    )\n  }\n"])));
module.exportDefault({
  USER_CHANGED_LOCAL_SETTINGS
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useSettings.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/settings/hooks/useSettings.ts                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useReactiveVar;
module.link("@apollo/client", {
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 0);
let getSettingsSingletonInstance;
module.link("..", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 1);
const useSettings = setting => {
  const prop = "".concat(setting, "Var");
  // @ts-ignore JS code
  const Settings = getSettingsSingletonInstance();
  const variable = Settings[prop];
  return useReactiveVar(variable);
};
module.exportDefault(useSettings);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useUserChangedLocalSettings.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/settings/hooks/useUserChangedLocalSettings.ts                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useCallback;
module.link("react", {
  useCallback(v) {
    useCallback = v;
  }
}, 0);
let useMutation;
module.link("@apollo/client", {
  useMutation(v) {
    useMutation = v;
  }
}, 1);
let USER_CHANGED_LOCAL_SETTINGS;
module.link("./mutations", {
  USER_CHANGED_LOCAL_SETTINGS(v) {
    USER_CHANGED_LOCAL_SETTINGS = v;
  }
}, 2);
const useUserChangedLocalSettings = () => {
  const [userChangedLocalSettings] = useMutation(USER_CHANGED_LOCAL_SETTINGS);
  const setLocalSettings = settings => {
    return userChangedLocalSettings({
      variables: {
        settings
      }
    });
  };
  return useCallback(setLocalSettings, [userChangedLocalSettings]);
};
module.exportDefault(useUserChangedLocalSettings);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"enums.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/settings/enums.ts                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  SETTINGS: () => SETTINGS,
  CHANGED_SETTINGS: () => CHANGED_SETTINGS,
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS
});
const SETTINGS = {
  APPLICATION: 'application',
  AUDIO: 'audio',
  VIDEO: 'video',
  CC: 'cc',
  DATA_SAVING: 'dataSaving',
  ANIMATIONS: 'animations',
  SELF_VIEW_DISABLE: 'selfViewDisable',
  TRANSCRIPTION: 'transcription'
};
const CHANGED_SETTINGS = 'changed_settings';
const DEFAULT_SETTINGS = 'default_settings';
module.exportDefault({
  SETTINGS,
  CHANGED_SETTINGS,
  DEFAULT_SETTINGS
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/settings/index.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  getSettingsSingletonInstance: () => getSettingsSingletonInstance
});
let makeVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  }
}, 0);
let isEmpty;
module.link("radash", {
  isEmpty(v) {
    isEmpty = v;
  }
}, 1);
let LocalStorage;
module.link("/imports/ui/services/storage/local", {
  default(v) {
    LocalStorage = v;
  }
}, 2);
let SessionStorage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    SessionStorage = v;
  }
}, 3);
let CHANGED_SETTINGS, DEFAULT_SETTINGS, SETTINGS;
module.link("./enums", {
  CHANGED_SETTINGS(v) {
    CHANGED_SETTINGS = v;
  },
  DEFAULT_SETTINGS(v) {
    DEFAULT_SETTINGS = v;
  },
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 4);
class Settings {
  constructor() {
    let defaultValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const writableDefaultValues = JSON.parse(JSON.stringify(defaultValues));
    Object.values(SETTINGS).forEach(p => {
      const privateProp = "_".concat(p);
      this[privateProp] = {
        reactiveVar: makeVar(undefined)
      };
      const varProp = "".concat(p, "Var");
      Object.defineProperty(this, varProp, {
        get: () => this[privateProp].reactiveVar
      });
      Object.defineProperty(this, p, {
        get: () => this[privateProp].reactiveVar(),
        set: v => {
          this[privateProp].reactiveVar(v);
        }
      });
    });
    this.defaultSettings = {};
    // Sets default locale to browser locale
    writableDefaultValues.application.locale = navigator.languages ? navigator.languages[0] : false || navigator.language || writableDefaultValues.application.locale;
    this.setDefault(writableDefaultValues);
    this.loadChanged();
  }
  setDefault(defaultValues) {
    Object.keys(defaultValues).forEach(key => {
      this[key] = defaultValues[key];
      this.defaultSettings["_".concat(key)] = defaultValues[key];
    });
    this.save(undefined, DEFAULT_SETTINGS);
  }
  loadChanged() {
    const APP_CONFIG = window.meetingClientSettings.public.app;
    const Storage = APP_CONFIG.userSettingsStorage === 'local' ? LocalStorage : SessionStorage;
    const savedSettings = {};
    Object.values(SETTINGS).forEach(s => {
      savedSettings[s] = Storage.getItem("".concat(CHANGED_SETTINGS, "_").concat(s));
    });
    Object.keys(savedSettings).forEach(key => {
      const savedItem = savedSettings[key];
      if (!savedItem) return;
      this[key] = _objectSpread(_objectSpread({}, this[key]), savedItem);
    });
  }
  save(mutation) {
    let settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CHANGED_SETTINGS;
    const APP_CONFIG = window.meetingClientSettings.public.app;
    const Storage = APP_CONFIG.userSettingsStorage === 'local' ? LocalStorage : SessionStorage;
    if (settings === CHANGED_SETTINGS) {
      Object.keys(this).forEach(k => {
        const values = this[k].reactiveVar && this[k].reactiveVar();
        const defaultValues = this.defaultSettings[k];
        if (!values) return;
        const changedValues = Object.keys(values).filter(item => values[item] !== defaultValues[item]).reduce((acc, item) => _objectSpread(_objectSpread({}, acc), {}, {
          [item]: values[item]
        }), {});
        if (isEmpty(changedValues)) Storage.removeItem("".concat(settings).concat(k));
        Storage.setItem("".concat(settings).concat(k), changedValues);
      });
    } else {
      Object.keys(this).forEach(k => {
        Storage.setItem("".concat(settings).concat(k), this[k].value);
      });
    }
    const userSettings = {};
    Object.values(SETTINGS).forEach(e => {
      userSettings[e] = this[e];
    });
    if (typeof mutation === 'function') {
      mutation(userSettings);
    }
  }
}
let SettingsSingleton = null;
const getSettingsSingletonInstance = () => {
  if (!SettingsSingleton) {
    SettingsSingleton = new Settings(window.meetingClientSettings.public.app.defaultSettings);
  }
  return SettingsSingleton;
};
module.exportDefault(getSettingsSingletonInstance);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"audio-manager":{"error-codes.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/audio-manager/error-codes.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const MIC_ERROR = {
  UNKNOWN: 0,
  NO_SSL: 9,
  MAC_OS_BLOCK: 8,
  NO_PERMISSION: 7,
  DEVICE_NOT_FOUND: 6
};
module.exportDefault({
  MIC_ERROR
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/audio-manager/index.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 0);
let SIPBridge;
module.link("/imports/api/audio/client/bridge/sip", {
  default(v) {
    SIPBridge = v;
  }
}, 1);
let SFUAudioBridge;
module.link("/imports/api/audio/client/bridge/sfu-audio-bridge", {
  default(v) {
    SFUAudioBridge = v;
  }
}, 2);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 3);
let notify;
module.link("/imports/ui/services/notification", {
  notify(v) {
    notify = v;
  }
}, 4);
let playAndRetry;
module.link("/imports/utils/mediaElementPlayRetry", {
  default(v) {
    playAndRetry = v;
  }
}, 5);
let monitorAudioConnection;
module.link("/imports/utils/stats", {
  monitorAudioConnection(v) {
    monitorAudioConnection = v;
  }
}, 6);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 7);
let getFromMeetingSettings;
module.link("/imports/ui/services/meeting-settings", {
  default(v) {
    getFromMeetingSettings = v;
  }
}, 8);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 9);
let DEFAULT_INPUT_DEVICE_ID, reloadAudioElement, getCurrentAudioSinkId, getStoredAudioInputDeviceId, storeAudioInputDeviceId, getStoredAudioOutputDeviceId, storeAudioOutputDeviceId;
module.link("/imports/api/audio/client/bridge/service", {
  DEFAULT_INPUT_DEVICE_ID(v) {
    DEFAULT_INPUT_DEVICE_ID = v;
  },
  reloadAudioElement(v) {
    reloadAudioElement = v;
  },
  getCurrentAudioSinkId(v) {
    getCurrentAudioSinkId = v;
  },
  getStoredAudioInputDeviceId(v) {
    getStoredAudioInputDeviceId = v;
  },
  storeAudioInputDeviceId(v) {
    storeAudioInputDeviceId = v;
  },
  getStoredAudioOutputDeviceId(v) {
    getStoredAudioOutputDeviceId = v;
  },
  storeAudioOutputDeviceId(v) {
    storeAudioOutputDeviceId = v;
  }
}, 10);
let MediaStreamUtils;
module.link("/imports/utils/media-stream-utils", {
  default(v) {
    MediaStreamUtils = v;
  }
}, 11);
let makeVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  }
}, 12);
let AudioErrors;
module.link("/imports/ui/services/audio-manager/error-codes", {
  default(v) {
    AudioErrors = v;
  }
}, 13);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 14);
let GrahqlSubscriptionStore, stringToHash;
module.link("/imports/ui/core/singletons/subscriptionStore", {
  default(v) {
    GrahqlSubscriptionStore = v;
  },
  stringToHash(v) {
    stringToHash = v;
  }
}, 15);
let VOICE_ACTIVITY;
module.link("../../core/graphql/queries/whoIsTalking", {
  default(v) {
    VOICE_ACTIVITY = v;
  }
}, 16);
const DEFAULT_AUDIO_BRIDGES_PATH = '/imports/api/audio/client/';
const CALL_STATES = {
  STARTED: 'started',
  ENDED: 'ended',
  FAILED: 'failed',
  RECONNECTING: 'reconnecting',
  AUTOPLAY_BLOCKED: 'autoplayBlocked'
};
const BREAKOUT_AUDIO_TRANSFER_STATES = {
  CONNECTED: 'connected',
  DISCONNECTED: 'disconnected',
  RETURNING: 'returning'
};

/**
 * Audio status to be filtered in getStats()
 */
const FILTER_AUDIO_STATS = ['outbound-rtp', 'inbound-rtp', 'candidate-pair', 'local-candidate', 'transport'];
class AudioManager {
  constructor() {
    this._breakoutAudioTransferStatus = {
      status: BREAKOUT_AUDIO_TRANSFER_STATES.DISCONNECTED,
      breakoutMeetingId: null
    };
    this.defineProperties({
      isMuted: makeVar(false),
      isConnected: makeVar(false),
      isConnecting: makeVar(false),
      isHangingUp: makeVar(false),
      isListenOnly: makeVar(false),
      isEchoTest: makeVar(false),
      isTalking: makeVar(false),
      isWaitingPermissions: makeVar(false),
      error: makeVar(null),
      muteHandle: makeVar(null),
      autoplayBlocked: makeVar(false),
      isReconnecting: makeVar(false)
    });
    this.failedMediaElements = [];
    this.handlePlayElementFailed = this.handlePlayElementFailed.bind(this);
    this.monitor = this.monitor.bind(this);
    this.isUsingAudio = this.isUsingAudio.bind(this);
    this._inputStream = makeVar(null);
    this._inputDeviceId = {
      value: makeVar(DEFAULT_INPUT_DEVICE_ID)
    };
    this._outputDeviceId = {
      value: makeVar(null)
    };
    this.BREAKOUT_AUDIO_TRANSFER_STATES = BREAKOUT_AUDIO_TRANSFER_STATES;
    window.addEventListener('StopAudioTracks', () => this.forceExitAudio());
  }
  _applyCachedOutputDeviceId() {
    const cachedId = getStoredAudioOutputDeviceId();
    if (typeof cachedId === 'string') {
      this.changeOutputDevice(cachedId, false).then(() => {
        this.outputDeviceId = cachedId;
      }).catch(error => {
        logger.warn({
          logCode: 'audiomanager_output_device_storage_failed',
          extraInfo: {
            deviceId: cachedId,
            errorMessage: error.message
          }
        }, "Failed to apply output audio device from storage: ".concat(error.message));
      });
    }
  }
  set inputDeviceId(value) {
    if (this._inputDeviceId.value() !== value) {
      this._inputDeviceId.value(value);
    }
    if (this.fullAudioBridge) {
      this.fullAudioBridge.inputDeviceId = this._inputDeviceId.value();
    }
  }
  get inputDeviceId() {
    return this._inputDeviceId.value();
  }
  set outputDeviceId(value) {
    if (this._outputDeviceId.value() !== value) {
      this._outputDeviceId.value(value);
    }
    if (this.fullAudioBridge) {
      this.fullAudioBridge.outputDeviceId = this._outputDeviceId.value();
    }
    if (this.listenOnlyBridge) {
      this.listenOnlyBridge.outputDeviceId = this._outputDeviceId.value();
    }
  }
  get outputDeviceId() {
    return this._outputDeviceId.value();
  }
  async init(userData, audioEventHandler) {
    this.inputDeviceId = getStoredAudioInputDeviceId() || DEFAULT_INPUT_DEVICE_ID;
    this.outputDeviceId = getCurrentAudioSinkId();
    this._applyCachedOutputDeviceId();
    this.loadBridges(userData);
    this.userData = userData;
    this.initialized = true;
    this.audioEventHandler = audioEventHandler;
    await this.loadBridges(userData);
  }

  /**
   * Load audio bridges modules to be used the manager.
   *
   * Bridges can be configured in settings.yml file.
   * @param {Object} userData The Object representing user data to be passed to
   *                      the bridge.
   */
  async loadBridges(userData) {
    let FullAudioBridge = SIPBridge;
    let ListenOnlyBridge = SFUAudioBridge;
    const MEDIA = window.meetingClientSettings.public.media;
    if (MEDIA.audio) {
      const {
        bridges,
        defaultFullAudioBridge,
        defaultListenOnlyBridge
      } = MEDIA.audio;
      const _fullAudioBridge = getFromUserSettings('bbb_fullaudio_bridge', getFromMeetingSettings('fullaudio-bridge', defaultFullAudioBridge));
      this.bridges = {};
      await Promise.all(Object.values(bridges).map(async bridge => {
        // eslint-disable-next-line import/no-dynamic-require, global-require
        this.bridges[bridge.name] = ((await module.dynamicImport(DEFAULT_AUDIO_BRIDGES_PATH + bridge.path)) || {}).default;
      }));
      if (_fullAudioBridge && this.bridges[_fullAudioBridge]) {
        FullAudioBridge = this.bridges[_fullAudioBridge];
      }
      if (defaultListenOnlyBridge && this.bridges[defaultListenOnlyBridge]) {
        ListenOnlyBridge = this.bridges[defaultListenOnlyBridge];
      }
    }
    this.fullAudioBridge = new FullAudioBridge(userData);
    this.listenOnlyBridge = new ListenOnlyBridge(userData);
    // Initialize device IDs in configured bridges
    this.fullAudioBridge.inputDeviceId = this.inputDeviceId;
    this.fullAudioBridge.outputDeviceId = this.outputDeviceId;
    this.listenOnlyBridge.outputDeviceId = this.outputDeviceId;
  }
  setAudioMessages(messages, intl) {
    this.messages = messages;
    this.intl = intl;
  }
  defineProperties(obj) {
    Object.keys(obj).forEach(key => {
      const privateKey = "_".concat(key);
      this[privateKey] = {
        value: obj[key]
      };
      Object.defineProperty(this, key, {
        set: value => {
          this[privateKey].value(value);
        },
        get: () => this[privateKey].value(),
        ["getReferece".concat(key)]: () => this[privateKey]
      });
    });
  }
  async trickleIce() {
    const {
      isFirefox,
      isIe,
      isSafari
    } = browserInfo;
    if (!this.listenOnlyBridge || typeof this.listenOnlyBridge.trickleIce !== 'function' || isFirefox || isIe || isSafari) {
      return [];
    }
    if (this.validIceCandidates && this.validIceCandidates.length) {
      logger.info({
        logCode: 'audiomanager_trickle_ice_reuse_candidate'
      }, 'Reusing trickle ICE information before activating microphone');
      return this.validIceCandidates;
    }
    logger.info({
      logCode: 'audiomanager_trickle_ice_get_local_candidate'
    }, 'Performing trickle ICE before activating microphone');
    try {
      this.validIceCandidates = await this.listenOnlyBridge.trickleIce();
      return this.validIceCandidates;
    } catch (error) {
      logger.error({
        logCode: 'audiomanager_trickle_ice_failed',
        extraInfo: {
          errorName: error.name,
          errorMessage: error.message
        }
      }, "Trickle ICE before activating microphone failed: ".concat(error.message));
      return [];
    }
  }
  joinMicrophone() {
    this.audioJoinStartTime = new Date();
    this.logAudioJoinTime = false;
    this.isListenOnly = false;
    this.isEchoTest = false;
    return this.onAudioJoining.bind(this)().then(() => {
      const callOptions = {
        isListenOnly: false,
        extension: null,
        inputStream: this.inputStream
      };
      return this.joinAudio(callOptions, this.callStateCallback.bind(this));
    });
  }
  joinEchoTest() {
    this.audioJoinStartTime = new Date();
    this.logAudioJoinTime = false;
    this.isListenOnly = false;
    this.isEchoTest = true;
    const MEDIA = window.meetingClientSettings.public.media;
    const ECHO_TEST_NUMBER = MEDIA.echoTestNumber;
    const EXPERIMENTAL_USE_KMS_TRICKLE_ICE_FOR_MICROPHONE = window.meetingClientSettings.public.app.experimentalUseKmsTrickleIceForMicrophone;
    return this.onAudioJoining.bind(this)().then(async () => {
      let validIceCandidates = [];
      if (EXPERIMENTAL_USE_KMS_TRICKLE_ICE_FOR_MICROPHONE) {
        validIceCandidates = await this.trickleIce();
      }
      const callOptions = {
        isListenOnly: false,
        extension: ECHO_TEST_NUMBER,
        inputStream: this.inputStream,
        validIceCandidates
      };
      logger.info({
        logCode: 'audiomanager_join_echotest',
        extraInfo: {
          logType: 'user_action'
        }
      }, 'User requested to join audio conference with mic');
      return this.joinAudio(callOptions, this.callStateCallback.bind(this));
    });
  }
  joinAudio(callOptions, callStateCallback) {
    return this.bridge.joinAudio(callOptions, callStateCallback.bind(this)).catch(error => {
      const {
        name,
        message
      } = error;
      const errorPayload = {
        type: 'MEDIA_ERROR',
        errMessage: message || 'MEDIA_ERROR',
        errCode: AudioErrors.MIC_ERROR.UNKNOWN
      };
      switch (name) {
        case 'NotAllowedError':
          errorPayload.errCode = AudioErrors.MIC_ERROR.NO_PERMISSION;
          logger.error({
            logCode: 'audiomanager_error_getting_device',
            extraInfo: {
              errorName: error.name,
              errorMessage: error.message
            }
          }, "Error getting microphone - {".concat(error.name, ": ").concat(error.message, "}"));
          break;
        case 'NotFoundError':
          errorPayload.errCode = AudioErrors.MIC_ERROR.DEVICE_NOT_FOUND;
          logger.error({
            logCode: 'audiomanager_error_device_not_found',
            extraInfo: {
              errorName: error.name,
              errorMessage: error.message
            }
          }, "Error getting microphone - {".concat(error.name, ": ").concat(error.message, "}"));
          break;
        default:
          logger.error({
            logCode: 'audiomanager_error_unknown',
            extraInfo: {
              errorName: error.name,
              errorMessage: error.message
            }
          }, "Error enabling audio - {".concat(name, ": ").concat(message, "}"));
          break;
      }
      this.isConnecting = false;
      this.isWaitingPermissions = false;
      throw errorPayload;
    });
  }
  async joinListenOnly() {
    this.audioJoinStartTime = new Date();
    this.logAudioJoinTime = false;
    this.isListenOnly = true;
    this.isEchoTest = false;
    logger.info({
      logCode: 'audiomanager_join_listenonly',
      extraInfo: {
        logType: 'user_action'
      }
    }, 'user requested to connect to audio conference as listen only');
    window.addEventListener('audioPlayFailed', this.handlePlayElementFailed);
    return this.onAudioJoining.bind(this)().then(() => {
      const callOptions = {
        isListenOnly: true,
        extension: null
      };
      return this.joinAudio(callOptions, this.callStateCallback.bind(this));
    });
  }
  onAudioJoining() {
    this.isConnecting = true;
    this.isMuted = false;
    this.error = false;
    return Promise.resolve();
  }
  exitAudio() {
    if (!this.isConnected) return Promise.resolve();
    this.isHangingUp = true;
    return this.bridge.exitAudio();
  }
  forceExitAudio() {
    this.notifyAudioExit();
    this.isConnected = false;
    this.isConnecting = false;
    this.isHangingUp = false;
    if (this.inputStream) {
      this.inputStream.getTracks().forEach(track => track.stop());
      this.inputStream = null;
    }
    window.removeEventListener('audioPlayFailed', this.handlePlayElementFailed);
    return this.bridge && this.bridge.exitAudio();
  }
  transferCall() {
    this.onTransferStart();
    return this.bridge.transferCall(this.onAudioJoin.bind(this));
  }
  onVoiceUserChanges() {
    let fields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (fields.muted !== undefined && fields.muted !== this.isMuted) {
      let muteState;
      this.isMuted = fields.muted;
      if (this.isMuted) {
        muteState = 'selfMuted';
        this.mute();
      } else {
        muteState = 'selfUnmuted';
        this.unmute();
      }
    }
    if (fields.talking !== undefined && fields.talking !== this.isTalking) {
      this.isTalking = fields.talking;
    }
    if (this.isMuted) {
      this.isTalking = false;
    }
  }
  onAudioJoin() {
    this.isConnecting = false;
    this.isConnected = true;
    const STATS = window.meetingClientSettings.public.stats;

    // listen to the VoiceUsers changes and update the flag
    if (!this.muteHandle) {
      const subHash = stringToHash(JSON.stringify({
        subscription: VOICE_ACTIVITY
      }));
      this.muteHandle = GrahqlSubscriptionStore.makeSubscription(VOICE_ACTIVITY);
      window.addEventListener('graphqlSubscription', e => {
        const {
          subscriptionHash,
          response
        } = e.detail;
        if (subscriptionHash === subHash) {
          if (response) {
            const {
              data
            } = response;
            const voiceUser = data.user_voice_activity_stream.find(v => v.userId === Auth.userID);
            this.onVoiceUserChanges(voiceUser);
          }
        }
      });
    }
    const secondsToActivateAudio = (new Date() - this.audioJoinStartTime) / 1000;
    if (!this.logAudioJoinTime) {
      this.logAudioJoinTime = true;
      logger.info({
        logCode: 'audio_mic_join_time',
        extraInfo: {
          secondsToActivateAudio
        }
      }, "Time needed to connect audio (seconds): ".concat(secondsToActivateAudio));
    }
    if (!this.isEchoTest) {
      this.notify(this.intl.formatMessage(this.messages.info.JOINED_AUDIO));
      logger.info({
        logCode: 'audio_joined'
      }, 'Audio Joined');
      this.inputStream = this.bridge ? this.bridge.inputStream : null;
      if (STATS.enabled) this.monitor();
      this.audioEventHandler({
        name: 'started',
        isListenOnly: this.isListenOnly
      });
    }
    Session.setItem('audioModalIsOpen', false);

    // Enforce correct output device on audio join
    this.changeOutputDevice(this.outputDeviceId, true);
    storeAudioOutputDeviceId(this.outputDeviceId);

    // Extract the deviceId again from the stream to guarantee consistency
    // between stream DID vs chosen DID. That's necessary in scenarios where,
    // eg, there's no default/pre-set deviceId ('') and the browser's
    // default device has been altered by the user (browser default != system's
    // default).
    if (this.inputStream) {
      const extractedDeviceId = MediaStreamUtils.extractDeviceIdFromStream(this.inputStream, 'audio');
      if (extractedDeviceId && extractedDeviceId !== this.inputDeviceId) {
        this.changeInputDevice(extractedDeviceId);
      }
    }
    // Audio joined successfully - add device IDs to session storage so they
    // can be re-used on refreshes/other sessions
    storeAudioInputDeviceId(this.inputDeviceId);
  }
  onTransferStart() {
    this.isEchoTest = false;
    this.isConnecting = true;
  }

  // Must be called before the call is actually torn down (this.isConnected = true)
  notifyAudioExit() {
    try {
      if (!this.error && this.isConnected && !this.isEchoTest) {
        this.notify(this.intl.formatMessage(this.messages.info.LEFT_AUDIO), false, 'no_audio');
      }
    } catch (_unused) {}
  }
  onAudioExit() {
    this.notifyAudioExit();
    this.isConnected = false;
    this.isConnecting = false;
    this.isHangingUp = false;
    this.autoplayBlocked = false;
    this.failedMediaElements = [];
    if (this.inputStream) {
      this.inputStream.getTracks().forEach(track => track.stop());
      this.inputStream = null;
    }
    if (!this.isEchoTest) {
      this.playHangUpSound();
    }
    window.removeEventListener('audioPlayFailed', this.handlePlayElementFailed);
  }
  callStateCallback(response) {
    return new Promise(resolve => {
      const {
        STARTED,
        ENDED,
        FAILED,
        RECONNECTING,
        AUTOPLAY_BLOCKED
      } = CALL_STATES;
      const {
        status,
        error,
        bridgeError,
        silenceNotifications,
        bridge
      } = response;
      if (status === STARTED) {
        this.isReconnecting = false;
        this.onAudioJoin();
        resolve(STARTED);
      } else if (status === ENDED) {
        this.isReconnecting = false;
        this.setBreakoutAudioTransferStatus({
          breakoutMeetingId: '',
          status: BREAKOUT_AUDIO_TRANSFER_STATES.DISCONNECTED
        });
        logger.info({
          logCode: 'audio_ended'
        }, 'Audio ended without issue');
        this.onAudioExit();
      } else if (status === FAILED) {
        this.isReconnecting = false;
        this.setBreakoutAudioTransferStatus({
          breakoutMeetingId: '',
          status: BREAKOUT_AUDIO_TRANSFER_STATES.DISCONNECTED
        });
        const errorKey = this.messages.error[error] || this.messages.error.GENERIC_ERROR;
        const errorMsg = this.intl.formatMessage(errorKey, {
          0: bridgeError
        });
        this.error = !!error;
        logger.error({
          logCode: 'audio_failure',
          extraInfo: {
            errorCode: error,
            cause: bridgeError,
            bridge
          }
        }, "Audio error - errorCode=".concat(error, ", cause=").concat(bridgeError));
        if (silenceNotifications !== true) {
          this.notify(errorMsg, true);
          this.exitAudio();
          this.onAudioExit();
        }
      } else if (status === RECONNECTING) {
        this.isReconnecting = true;
        this.setBreakoutAudioTransferStatus({
          breakoutMeetingId: '',
          status: BREAKOUT_AUDIO_TRANSFER_STATES.DISCONNECTED
        });
        logger.info({
          logCode: 'audio_reconnecting'
        }, 'Attempting to reconnect audio');
        this.notify(this.intl.formatMessage(this.messages.info.RECONNECTING_AUDIO), true);
        this.playHangUpSound();
      } else if (status === AUTOPLAY_BLOCKED) {
        this.setBreakoutAudioTransferStatus({
          breakoutMeetingId: '',
          status: BREAKOUT_AUDIO_TRANSFER_STATES.DISCONNECTED
        });
        this.isReconnecting = false;
        this.autoplayBlocked = true;
        this.onAudioJoin();
        resolve(AUTOPLAY_BLOCKED);
      }
    });
  }
  isUsingAudio() {
    return Boolean(this.isConnected || this.isConnecting || this.isHangingUp || this.isEchoTest);
  }
  changeInputDevice(deviceId) {
    var _this$inputDeviceId;
    if (typeof deviceId !== 'string') throw new TypeError('Invalid inputDeviceId');
    if (deviceId === this.inputDeviceId) return this.inputDeviceId;
    const currentDeviceId = (_this$inputDeviceId = this.inputDeviceId) !== null && _this$inputDeviceId !== void 0 ? _this$inputDeviceId : 'none';
    this.inputDeviceId = deviceId;
    logger.debug({
      logCode: 'audiomanager_input_device_change',
      extraInfo: {
        deviceId: currentDeviceId,
        newDeviceId: deviceId
      }
    }, "Microphone input device changed: from ".concat(currentDeviceId, " to ").concat(deviceId));
    return this.inputDeviceId;
  }
  liveChangeInputDevice(deviceId) {
    var _this$inputDeviceId2;
    const currentDeviceId = (_this$inputDeviceId2 = this.inputDeviceId) !== null && _this$inputDeviceId2 !== void 0 ? _this$inputDeviceId2 : 'none';
    // we force stream to be null, so MutedAlert will deallocate it and
    // a new one will be created for the new stream
    this.inputStream = null;
    return this.bridge.liveChangeInputDevice(deviceId).then(stream => {
      this.inputStream = stream;
      const extractedDeviceId = MediaStreamUtils.extractDeviceIdFromStream(this.inputStream, 'audio');
      if (extractedDeviceId && extractedDeviceId !== this.inputDeviceId) {
        this.changeInputDevice(extractedDeviceId);
      }
      // Live input device change - add device ID to session storage so it
      // can be re-used on refreshes/other sessions
      storeAudioInputDeviceId(extractedDeviceId);
      this.setSenderTrackEnabled(!this.isMuted);
    }).catch(error => {
      logger.error({
        logCode: 'audiomanager_input_live_device_change_failure',
        extraInfo: {
          errorName: error.name,
          errorMessage: error.message,
          deviceId: currentDeviceId,
          newDeviceId: deviceId
        }
      }, "Input device live change failed - {".concat(error.name, ": ").concat(error.message, "}"));
      throw error;
    });
  }
  async changeOutputDevice(deviceId, isLive) {
    var _this$outputDeviceId;
    const targetDeviceId = deviceId;
    const currentDeviceId = (_this$outputDeviceId = this.outputDeviceId) !== null && _this$outputDeviceId !== void 0 ? _this$outputDeviceId : getCurrentAudioSinkId();
    const MEDIA = window.meetingClientSettings.public.media;
    const MEDIA_TAG = MEDIA.mediaTag;
    const audioElement = document.querySelector(MEDIA_TAG);
    const sinkIdSupported = audioElement && typeof audioElement.setSinkId === 'function';
    if (typeof deviceId === 'string' && sinkIdSupported && currentDeviceId !== targetDeviceId) {
      try {
        if (!isLive) audioElement.srcObject = null;
        await audioElement.setSinkId(deviceId);
        reloadAudioElement(audioElement);
        logger.debug({
          logCode: 'audiomanager_output_device_change',
          extraInfo: {
            deviceId: currentDeviceId,
            newDeviceId: deviceId
          }
        }, "Audio output device changed: from ".concat(currentDeviceId || 'default', " to ").concat(deviceId || 'default'));
        this.outputDeviceId = deviceId;

        // Live output device change - add device ID to session storage so it
        // can be re-used on refreshes/other sessions
        if (isLive) storeAudioOutputDeviceId(deviceId);
        return this.outputDeviceId;
      } catch (error) {
        logger.error({
          logCode: 'audiomanager_output_device_change_failure',
          extraInfo: {
            errorName: error.name,
            errorMessage: error.message,
            deviceId: currentDeviceId,
            newDeviceId: targetDeviceId
          }
        }, "Error changing output device - {".concat(error.name, ": ").concat(error.message, "}"));

        // Rollback/enforce current sinkId (if possible)
        if (sinkIdSupported) {
          this.outputDeviceId = getCurrentAudioSinkId();
        } else {
          this.outputDeviceId = currentDeviceId;
        }
        throw error;
      }
    }
    return this.outputDeviceId;
  }
  get inputStream() {
    return this._inputStream();
  }
  get bridge() {
    return this.isListenOnly ? this.listenOnlyBridge : this.fullAudioBridge;
  }
  set inputStream(stream) {
    // We store reactive information about input stream
    // because mutedalert component needs to track when it changes
    // and then update hark with the new value for inputStream

    this._inputStream(stream);
  }

  /**
   * Sets the current status for breakout audio transfer
   * @param {Object} newStatus                  The status Object to be set for
   *                                            audio transfer.
   * @param {string} newStatus.breakoutMeetingId The meeting id of the current
   *                                            breakout audio transfer.
   * @param {string} newStatus.status           The status of the current audio
   *                                            transfer. Valid values are
   *                                            'connected', 'disconnected' and
   *                                            'returning'.
   */
  setBreakoutAudioTransferStatus(newStatus) {
    const currentStatus = this._breakoutAudioTransferStatus;
    const {
      breakoutMeetingId,
      status
    } = newStatus;
    if (typeof breakoutMeetingId === 'string') {
      currentStatus.breakoutMeetingId = breakoutMeetingId;
    } else {
      currentStatus.breakoutMeetingId = null;
    }
    if (typeof status === 'string') {
      currentStatus.status = status;
      if (this.bridge && !this.isListenOnly) {
        if (status !== BREAKOUT_AUDIO_TRANSFER_STATES.CONNECTED) {
          this.bridge.ignoreCallState = false;
        } else {
          this.bridge.ignoreCallState = true;
        }
      }
    }
  }
  getBreakoutAudioTransferStatus() {
    return this._breakoutAudioTransferStatus;
  }
  set userData(value) {
    this._userData = value;
  }
  get userData() {
    return this._userData;
  }
  playHangUpSound() {
    this.playAlertSound("".concat(window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId) + '/resources/sounds/LeftCall.mp3');
  }
  notify(message) {
    let error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let icon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'unmute';
    const audioIcon = this.isListenOnly ? 'listen' : icon;
    notify(message, error ? 'error' : 'info', audioIcon);
  }
  monitor() {
    const peer = this.bridge.getPeerConnection();
    monitorAudioConnection(peer);
  }
  handleAllowAutoplay() {
    window.removeEventListener('audioPlayFailed', this.handlePlayElementFailed);
    logger.info({
      logCode: 'audiomanager_autoplay_allowed'
    }, 'Listen only autoplay allowed by the user');
    while (this.failedMediaElements.length) {
      const mediaElement = this.failedMediaElements.shift();
      if (mediaElement) {
        playAndRetry(mediaElement).then(played => {
          if (!played) {
            logger.error({
              logCode: 'audiomanager_autoplay_handling_failed'
            }, 'Listen only autoplay handling failed to play media');
          } else {
            // logCode is listenonly_* to make it consistent with the other tag play log
            logger.info({
              logCode: 'listenonly_media_play_success'
            }, 'Listen only media played successfully');
          }
        });
      }
    }
    this.autoplayBlocked = false;
  }
  handlePlayElementFailed(e) {
    const {
      mediaElement
    } = e.detail;
    e.stopPropagation();
    this.failedMediaElements.push(mediaElement);
    if (!this.autoplayBlocked) {
      logger.info({
        logCode: 'audiomanager_autoplay_prompt'
      }, 'Prompting user for action to play listen only media');
      this.autoplayBlocked = true;
    }
  }
  setSenderTrackEnabled(shouldEnable) {
    // If the bridge is set to listen only mode, nothing to do here. This method
    // is solely for muting outbound tracks.
    if (this.isListenOnly) return;

    // Bridge -> SIP.js bridge, the only full audio capable one right now
    const peer = this.bridge.getPeerConnection();
    if (!peer) {
      return;
    }
    peer.getSenders().forEach(sender => {
      const {
        track
      } = sender;
      if (track && track.kind === 'audio') {
        track.enabled = shouldEnable;
      }
    });
  }
  mute() {
    this.setSenderTrackEnabled(false);
  }
  unmute() {
    this.setSenderTrackEnabled(true);
  }
  playAlertSound(url) {
    if (!url || !this.bridge) {
      return Promise.resolve();
    }
    const audioAlert = new Audio(url);
    audioAlert.addEventListener('ended', () => {
      audioAlert.src = null;
    });
    const {
      outputDeviceId
    } = this.bridge;
    if (outputDeviceId && typeof audioAlert.setSinkId === 'function') {
      return audioAlert.setSinkId(outputDeviceId).then(() => audioAlert.play());
    }
    return audioAlert.play();
  }
  async updateAudioConstraints(constraints) {
    await this.bridge.updateAudioConstraints(constraints);
  }

  /**
   * Get the info about candidate-pair that is being used by the current peer.
   * For firefox, or any other browser that doesn't support iceTransport
   * property of RTCDtlsTransport, we retrieve the selected local candidate
   * by looking into stats returned from getStats() api. For other browsers,
   * we should use getSelectedCandidatePairFromPeer instead, because it has
   * relatedAddress and relatedPort information about local candidate.
   *
   * @param {Object} stats object returned by getStats() api
   * @returns An Object of type RTCIceCandidatePairStats containing information
   *          about the candidate-pair being used by the peer.
   *
   * For firefox, we can use the 'selected' flag to find the candidate pair
   * being used, while in chrome we can retrieved the selected pair
   * by looking for the corresponding transport of the active peer.
   * For more information see:
   * https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats
   * and
   * https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePairStats/selected#value
   */
  static getSelectedCandidatePairFromStats(stats) {
    if (!stats || typeof stats !== 'object') return null;
    const transport = Object.values(stats).find(stat => stat.type === 'transport') || {};
    return Object.values(stats).find(stat => stat.type === 'candidate-pair' && stat.nominated && (stat.selected || stat.id === transport.selectedCandidatePairId));
  }

  /**
   * Get the info about candidate-pair that is being used by the current peer.
   * This function's return value (RTCIceCandidatePair object ) is different
   * from getSelectedCandidatePairFromStats (RTCIceCandidatePairStats object).
   * The information returned here contains the relatedAddress and relatedPort
   * fields (only for candidates that are derived from another candidate, for
   * host candidates, these fields are null). These field can be helpful for
   * debugging network issues. For all the browsers that support iceTransport
   * field of RTCDtlsTransport, we use this function as default to retrieve
   * information about current selected-pair. For other browsers we retrieve it
   * from getSelectedCandidatePairFromStats
   *
   * @returns {Object} An RTCIceCandidatePair represented the selected
   *                   candidate-pair of the active peer.
   *
   * For more info see:
   * https://www.w3.org/TR/webrtc/#dom-rtcicecandidatepair
   * and
   * https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidatePair
   * and
   * https://developer.mozilla.org/en-US/docs/Web/API/RTCDtlsTransport
   */
  getSelectedCandidatePairFromPeer() {
    if (!this.bridge) return null;
    const peer = this.bridge.getPeerConnection();
    if (!peer) return null;
    let selectedPair = null;
    const receivers = peer.getReceivers();
    if (receivers && receivers[0] && receivers[0].transport && receivers[0].transport.iceTransport && typeof receivers[0].transport.iceTransport.getSelectedCandidatePair === 'function') {
      selectedPair = receivers[0].transport.iceTransport.getSelectedCandidatePair();
    }
    return selectedPair;
  }

  /**
   * Gets the selected local-candidate information. For browsers that support
   * iceTransport property (see getSelectedCandidatePairFromPeer) we get this
   * info from peer, otherwise we retrieve this information from getStats() api
   *
   * @param {Object} [stats] The status object returned from getStats() api
   * @returns {Object} An Object containing the information about the
   *                   local-candidate. For browsers that support iceTransport
   *                   property, the object's type is RCIceCandidate. A
   *                   RTCIceCandidateStats is returned, otherwise.
   *
   * For more info see:
   * https://www.w3.org/TR/webrtc/#dom-rtcicecandidate
   * and
   * https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatestats
   *
   */
  getSelectedLocalCandidate(stats) {
    let selectedPair = this.getSelectedCandidatePairFromPeer();
    if (selectedPair) return selectedPair.local;
    if (!stats) return null;
    selectedPair = AudioManager.getSelectedCandidatePairFromStats(stats);
    if (selectedPair) return stats[selectedPair.localCandidateId];
    return null;
  }

  /**
   * Gets the information about private/public ip address from peer
   * stats. The information retrieved from selected pair from the current
   * RTCIceTransport and returned in a new Object with format:
   * {
   *   address: String,
   *   relatedAddress: String,
   *   port: Number,
   *   relatedPort: Number,
   *   candidateType: String,
   *   selectedLocalCandidate: Object,
   * }
   *
   * If users isn't behind NAT, relatedAddress and relatedPort may be null.
   *
   * @returns An Object containing the information about private/public IP
   *          addresses and ports.
   *
   * For more information see:
   * https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats
   * and
   * https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatestats
   * and
   * https://www.w3.org/TR/webrtc/#rtcicecandidatetype-enum
   */
  async getInternalExternalIpAddresses(stats) {
    let transports = {};
    if (stats) {
      const selectedLocalCandidate = this.getSelectedLocalCandidate(stats);
      if (!selectedLocalCandidate) return transports;
      const candidateType = selectedLocalCandidate.candidateType || selectedLocalCandidate.type;
      transports = {
        isUsingTurn: candidateType === 'relay',
        address: selectedLocalCandidate.address,
        relatedAddress: selectedLocalCandidate.relatedAddress,
        port: selectedLocalCandidate.port,
        relatedPort: selectedLocalCandidate.relatedPort,
        candidateType,
        selectedLocalCandidate
      };
    }
    return transports;
  }

  /**
   * Get stats about active audio peer.
   * We filter the status based on FILTER_AUDIO_STATS constant.
   * We also append to the returned object the information about peer's
   * transport. This transport information is retrieved by
   * getInternalExternalIpAddressesFromPeer().
   *
   * @returns An Object containing the status about the active audio peer.
   *
   * For more information see:
   * https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getStats
   * and
   * https://developer.mozilla.org/en-US/docs/Web/API/RTCStatsReport
   */
  async getStats() {
    if (!this.bridge) return null;
    const peer = this.bridge.getPeerConnection();
    if (!peer) return null;
    const peerStats = await peer.getStats();
    const audioStats = {};
    peerStats.forEach(stat => {
      if (FILTER_AUDIO_STATS.includes(stat.type)) {
        audioStats[stat.id] = stat;
      }
    });
    const transportStats = await this.getInternalExternalIpAddresses(audioStats);
    return _objectSpread({
      transportStats
    }, audioStats);
  }
}
const audioManager = new AudioManager();
module.exportDefault(audioManager);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"auth":{"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/auth/index.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let makeVar, useReactiveVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  },
  useReactiveVar(v) {
    useReactiveVar = v;
  }
}, 0);
let Storage;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Storage = v;
  }
}, 1);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 2);
class Auth {
  constructor() {
    this._loggedIn = makeVar(false);
    const queryParams = new URLSearchParams(document.location.search);
    if (queryParams.has('sessionToken') && queryParams.get('sessionToken') !== Session.getItem('sessionToken')) {
      return;
    }
    this._meetingID = Storage.getItem('meetingID');
    this._userID = Storage.getItem('userID');
    this._authToken = Storage.getItem('authToken');
    this._sessionToken = makeVar(Storage.getItem('sessionToken'));
    this._logoutURL = Storage.getItem('logoutURL');
    this._confname = Storage.getItem('confname');
    this._externUserID = Storage.getItem('externUserID');
    this._fullname = Storage.getItem('fullname');
    this._connectionID = Storage.getItem('connectionID');
  }
  get meetingID() {
    return this._meetingID;
  }
  set meetingID(meetingID) {
    this._meetingID = meetingID;
    Storage.setItem('meetingID', this._meetingID);
  }
  set _connectionID(connectionId) {
    this._connectionID = connectionId;
    Storage.setItem('sessionToken', this._connectionID);
  }
  get sessionToken() {
    try {
      return this._sessionToken();
    } catch (_unused) {
      return null;
    }
  }
  set sessionToken(sessionToken) {
    if (this._sessionToken) {
      this._sessionToken(sessionToken);
    } else {
      this._sessionToken = makeVar(sessionToken);
    }
    Storage.setItem('sessionToken', this._sessionToken());
  }
  get userID() {
    return this._userID;
  }
  set userID(userID) {
    this._userID = userID;
    Storage.setItem('userID', this._userID);
  }
  get token() {
    return this._authToken;
  }
  set token(authToken) {
    this._authToken = authToken;
    Storage.setItem('authToken', this._authToken);
  }
  set logoutURL(logoutURL) {
    this._logoutURL = logoutURL;
    Storage.setItem('logoutURL', this._logoutURL);
  }
  get logoutURL() {
    return this._logoutURL;
  }
  set confname(confname) {
    this._confname = confname;
    Storage.setItem('confname', this._confname);
  }
  get confname() {
    return this._confname;
  }
  set externUserID(externUserID) {
    this._externUserID = externUserID;
    Storage.setItem('externUserID', this._externUserID);
  }
  get externUserID() {
    return this._externUserID;
  }
  set fullname(fullname) {
    this._fullname = fullname;
    Storage.setItem('fullname', this._fullname);
  }
  get fullname() {
    return this._fullname;
  }
  get loggedIn() {
    return this._loggedIn();
  }
  set loggedIn(value) {
    this._loggedIn(value);
  }
  useLoggedIn() {
    return useReactiveVar(this._loggedIn);
  }
  get credentials() {
    return {
      meetingId: this.meetingID,
      requesterUserId: this.userID,
      requesterToken: this.token,
      logoutURL: this.logoutURL,
      sessionToken: this.sessionToken,
      fullname: this.fullname,
      externUserID: this.externUserID,
      confname: this.confname
    };
  }
  get fullInfo() {
    return {
      sessionToken: this.sessionToken,
      meetingId: this.meetingID,
      requesterUserId: this.userID,
      fullname: this.fullname,
      confname: this.confname,
      externUserID: this.externUserID,
      uniqueClientSession: this.uniqueClientSession
    };
  }
  set(meetingId, requesterUserId, requesterToken, logoutURL, sessionToken, fullname, externUserID, confname) {
    this.meetingID = meetingId;
    this.userID = requesterUserId;
    this.token = requesterToken;
    this.logoutURL = logoutURL;
    this.sessionToken = sessionToken;
    this.fullname = fullname;
    this.externUserID = externUserID;
    this.confname = confname;
  }
  clearCredentials() {
    this.meetingID = null;
    this.userID = null;
    this.token = null;
    this.loggedIn = false;
    this.logoutURL = null;
    this.sessionToken = null;
    this.fullname = null;
    this.externUserID = null;
    this.confname = null;
    this.uniqueClientSession = null;
    return Promise.resolve(...arguments);
  }
  logout() {
    if (!this.loggedIn) {
      if (allowRedirectToLogoutURL()) {
        return Promise.resolve(this._logoutURL);
      }
      return Promise.resolve();
    }
    return new Promise(resolve => {
      if (allowRedirectToLogoutURL()) {
        resolve(this._logoutURL);
      }

      // do not redirect
      resolve();
    });
  }
  allowRedirectToLogoutURL() {
    const ALLOW_DEFAULT_LOGOUT_URL = window.meetingClientSettings.public.app.allowDefaultLogoutUrl;
    const protocolPattern = /^((http|https):\/\/)/;
    if (this.logoutURL) {
      // default logoutURL
      // compare only the host to ignore protocols
      const urlWithoutProtocolForAuthLogout = this.logoutURL.replace(protocolPattern, '');
      const urlWithoutProtocolForLocationOrigin = window.location.origin.replace(protocolPattern, '');
      if (urlWithoutProtocolForAuthLogout === urlWithoutProtocolForLocationOrigin) {
        return ALLOW_DEFAULT_LOGOUT_URL;
      }
      // custom logoutURL
      return true;
    }
    // no logout url
    return false;
  }
  authenticateURL(url) {
    let authURL = url;
    if (authURL.indexOf('sessionToken=') === -1) {
      if (authURL.indexOf('?') !== -1) {
        authURL = "".concat(authURL, "&sessionToken=").concat(this.sessionToken);
      } else {
        authURL = "".concat(authURL, "?sessionToken=").concat(this.sessionToken);
      }
    }
    return authURL;
  }
}
const AuthSingleton = new Auth();
module.exportDefault(AuthSingleton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"bbb-webrtc-sfu":{"audio-broker.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/bbb-webrtc-sfu/audio-broker.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 0);
let BaseBroker;
module.link("/imports/ui/services/bbb-webrtc-sfu/sfu-base-broker", {
  default(v) {
    BaseBroker = v;
  }
}, 1);
let WebRtcPeer;
module.link("/imports/ui/services/webrtc-base/peer", {
  default(v) {
    WebRtcPeer = v;
  }
}, 2);
const ON_ICE_CANDIDATE_MSG = 'iceCandidate';
const SUBSCRIBER_ANSWER = 'subscriberAnswer';
const DTMF = 'dtmf';
const SFU_COMPONENT_NAME = 'audio';
class AudioBroker extends BaseBroker {
  constructor(wsUrl, role) {
    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    super(SFU_COMPONENT_NAME, wsUrl);
    this.role = role;
    this.offering = true;

    // Optional parameters are:
    // clientSessionNumber
    // iceServers,
    // offering,
    // mediaServer,
    // extension,
    // constraints,
    // stream,
    // signalCandidates
    // traceLogs
    // networkPriority
    // gatheringTimeout
    // transparentListenOnly
    Object.assign(this, options);
  }
  getLocalStream() {
    if (this.webRtcPeer && typeof this.webRtcPeer.getLocalStream === 'function') {
      return this.webRtcPeer.getLocalStream();
    }
    return null;
  }
  setLocalStream(stream) {
    if (this.webRtcPeer == null || this.webRtcPeer.peerConnection == null) {
      throw new Error('Missing peer connection');
    }
    const {
      peerConnection
    } = this.webRtcPeer;
    const newTracks = stream.getAudioTracks();
    const localStream = this.getLocalStream();
    const oldTracks = localStream ? localStream.getAudioTracks() : [];
    peerConnection.getSenders().forEach((sender, index) => {
      if (sender.track && sender.track.kind === 'audio') {
        const newTrack = newTracks[index];
        if (newTrack == null) return;

        // Cleanup old tracks in the local MediaStream
        const oldTrack = oldTracks[index];
        sender.replaceTrack(newTrack);
        if (oldTrack) {
          oldTrack.stop();
          localStream.removeTrack(oldTrack);
        }
        localStream.addTrack(newTrack);
      }
    });
    return Promise.resolve();
  }
  _join() {
    return new Promise((resolve, reject) => {
      try {
        const options = {
          audioStream: this.stream,
          mediaConstraints: {
            audio: this.constraints ? this.constraints : true,
            video: false
          },
          configuration: this.populatePeerConfiguration(),
          onicecandidate: !this.signalCandidates ? null : candidate => {
            this.onIceCandidate(candidate, this.role);
          },
          trace: this.traceLogs,
          networkPriorities: this.networkPriority ? {
            audio: this.networkPriority
          } : undefined,
          mediaStreamFactory: this.mediaStreamFactory,
          gatheringTimeout: this.gatheringTimeout
        };
        const peerRole = this.role === 'sendrecv' ? this.role : 'recvonly';
        this.webRtcPeer = new WebRtcPeer(peerRole, options);
        this.webRtcPeer.iceQueue = [];
        this.webRtcPeer.start();
        this.webRtcPeer.peerConnection.onconnectionstatechange = this.handleConnectionStateChange.bind(this);
        if (this.offering) {
          // We are the offerer
          this.webRtcPeer.generateOffer().then(this.sendStartReq.bind(this)).catch(this._handleOfferGenerationFailure.bind(this));
        } else if (peerRole === 'recvonly') {
          // We are the answerer and we are only listening, so we don't need
          // to acquire local media
          this.sendStartReq();
        } else {
          // We are the answerer and we are sending audio, so we need to acquire
          // local media before sending the start request
          this.webRtcPeer.mediaStreamFactory().then(() => {
            this.sendStartReq();
          }).catch(this._handleOfferGenerationFailure.bind(this));
        }
        resolve();
      } catch (error) {
        // 1305: "PEER_NEGOTIATION_FAILED",
        const normalizedError = BaseBroker.assembleError(1305);
        logger.error({
          logCode: "".concat(this.logCodePrefix, "_peer_creation_failed"),
          extraInfo: {
            errorMessage: error.name || error.message || 'Unknown error',
            errorCode: normalizedError.errorCode,
            sfuComponent: this.sfuComponent,
            started: this.started
          }
        }, 'Audio peer creation failed');
        this.onerror(normalizedError);
        reject(normalizedError);
      }
    });
  }
  joinAudio() {
    return this.openWSConnection().then(this._join.bind(this));
  }
  onWSMessage(message) {
    const parsedMessage = JSON.parse(message.data);
    switch (parsedMessage.id) {
      case 'startResponse':
        this.onRemoteDescriptionReceived(parsedMessage);
        break;
      case 'iceCandidate':
        this.handleIceCandidate(parsedMessage.candidate);
        break;
      case 'webRTCAudioSuccess':
        this.onstart(parsedMessage.success);
        this.started = true;
        break;
      case 'webRTCAudioError':
      case 'error':
        this.handleSFUError(parsedMessage);
        break;
      case 'pong':
        break;
      default:
        logger.debug({
          logCode: "".concat(this.logCodePrefix, "_invalid_req"),
          extraInfo: {
            messageId: parsedMessage.id || 'Unknown',
            sfuComponent: this.sfuComponent
          }
        }, 'Discarded invalid SFU message');
    }
  }
  handleSFUError(sfuResponse) {
    const {
      code,
      reason,
      role
    } = sfuResponse;
    const error = BaseBroker.assembleError(code, reason);
    logger.error({
      logCode: "".concat(this.logCodePrefix, "_sfu_error"),
      extraInfo: {
        errorCode: code,
        errorMessage: error.errorMessage,
        role,
        sfuComponent: this.sfuComponent,
        started: this.started
      }
    }, 'Audio failed in SFU');
    this.onerror(error);
  }
  sendLocalDescription(localDescription) {
    const message = {
      id: SUBSCRIBER_ANSWER,
      type: this.sfuComponent,
      role: this.role,
      sdpOffer: localDescription
    };
    this.sendMessage(message);
  }
  onRemoteDescriptionReceived(sfuResponse) {
    if (this.offering) {
      return this.processAnswer(sfuResponse);
    }
    return this.processOffer(sfuResponse);
  }
  sendStartReq(offer) {
    const message = {
      id: 'start',
      type: this.sfuComponent,
      role: this.role,
      clientSessionNumber: this.clientSessionNumber,
      sdpOffer: offer,
      mediaServer: this.mediaServer,
      extension: this.extension,
      transparentListenOnly: this.transparentListenOnly
    };
    logger.debug({
      logCode: "".concat(this.logCodePrefix, "_offer_generated"),
      extraInfo: {
        sfuComponent: this.sfuComponent,
        role: this.role
      }
    }, 'SFU audio offer generated');
    this.sendMessage(message);
  }
  _handleOfferGenerationFailure(error) {
    if (error) {
      logger.error({
        logCode: "".concat(this.logCodePrefix, "_offer_failure"),
        extraInfo: {
          errorMessage: error.name || error.message || 'Unknown error',
          sfuComponent: this.sfuComponent
        }
      }, 'Audio offer generation failed');
      // 1305: "PEER_NEGOTIATION_FAILED",
      this.onerror(error);
    }
  }
  dtmf(tones) {
    const message = {
      id: DTMF,
      type: this.sfuComponent,
      tones
    };
    this.sendMessage(message);
  }
  onIceCandidate(candidate, role) {
    const message = {
      id: ON_ICE_CANDIDATE_MSG,
      role,
      type: this.sfuComponent,
      candidate
    };
    this.sendMessage(message);
  }
}
module.exportDefault(AudioBroker);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"broker-base-errors.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/bbb-webrtc-sfu/broker-base-errors.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  SFU_CLIENT_SIDE_ERRORS: () => SFU_CLIENT_SIDE_ERRORS,
  SFU_SERVER_SIDE_ERRORS: () => SFU_SERVER_SIDE_ERRORS,
  SFU_BROKER_ERRORS: () => SFU_BROKER_ERRORS
});
const SFU_CLIENT_SIDE_ERRORS = {
  // 13xx errors are client-side bbb-webrtc-sfu's base broker errors
  1301: "WEBSOCKET_DISCONNECTED",
  1302: "WEBSOCKET_CONNECTION_FAILED",
  1305: "PEER_NEGOTIATION_FAILED",
  1307: "ICE_STATE_FAILED",
  1310: "ENDED_WHILE_STARTING"
};
const SFU_SERVER_SIDE_ERRORS = {
  // 2xxx codes are server-side bbb-webrtc-sfu errors
  2000: "MEDIA_SERVER_CONNECTION_ERROR",
  2001: "MEDIA_SERVER_OFFLINE",
  2002: "MEDIA_SERVER_NO_RESOURCES",
  2003: "MEDIA_SERVER_REQUEST_TIMEOUT",
  2004: "MEDIA_SERVER_GENERIC_ERROR",
  2020: "ICE_ADD_CANDIDATE_FAILED",
  2021: "ICE_GATHERING_FAILED",
  2022: "ICE_STATE_FAILED",
  2200: "MEDIA_GENERIC_ERROR",
  2201: "MEDIA_NOT_FOUND",
  2202: "MEDIA_INVALID_SDP",
  2203: "MEDIA_NO_AVAILABLE_CODEC",
  2208: "MEDIA_GENERIC_PROCESS_ERROR",
  2209: "MEDIA_ADAPTER_OBJECT_NOT_FOUND",
  2210: "MEDIA_CONNECT_ERROR",
  2211: "MEDIA_NOT_FLOWING",
  2300: "SFU_INVALID_REQUEST"
};
const SFU_BROKER_ERRORS = _objectSpread(_objectSpread({}, SFU_SERVER_SIDE_ERRORS), SFU_CLIENT_SIDE_ERRORS);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"load-play.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/bbb-webrtc-sfu/load-play.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => loadAndPlayMediaStream
});
let playAndRetry;
module.link("/imports/utils/mediaElementPlayRetry", {
  default(v) {
    playAndRetry = v;
  }
}, 0);
const playMediaElement = mediaElement => {
  return new Promise((resolve, reject) => {
    if (mediaElement.paused) {
      // Tag isn't playing yet. Play it.
      mediaElement.play().then(resolve).catch(error => {
        if (error.name === 'NotAllowedError') return reject(error);
        // Tag failed for reasons other than autoplay. Log the error and
        // try playing again a few times until it works or fails for good
        const played = playAndRetry(mediaElement);
        if (!played) return reject(error);
        return resolve();
      });
    } else {
      // Media tag is already playing, so log a success. This is really a
      // logging fallback for a case that shouldn't happen. But if it does
      // (ie someone re-enables the autoPlay prop in the mediaElement), then it
      // means the mediaStream is playing properly and it'll be logged.
      return resolve();
    }
  });
};
function loadAndPlayMediaStream(mediaStream, mediaElement) {
  let muted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  mediaElement.muted = muted;
  mediaElement.pause();
  mediaElement.srcObject = mediaStream;
  return playMediaElement(mediaElement);
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"screenshare-broker.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/bbb-webrtc-sfu/screenshare-broker.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 0);
let BaseBroker;
module.link("/imports/ui/services/bbb-webrtc-sfu/sfu-base-broker", {
  default(v) {
    BaseBroker = v;
  }
}, 1);
let WebRtcPeer;
module.link("/imports/ui/services/webrtc-base/peer", {
  default(v) {
    WebRtcPeer = v;
  }
}, 2);
const ON_ICE_CANDIDATE_MSG = 'iceCandidate';
const SUBSCRIBER_ANSWER = 'subscriberAnswer';
const SFU_COMPONENT_NAME = 'screenshare';
class ScreenshareBroker extends BaseBroker {
  constructor(wsUrl, voiceBridge, userId, internalMeetingId, role) {
    let options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    super(SFU_COMPONENT_NAME, wsUrl);
    this.voiceBridge = voiceBridge;
    this.userId = userId;
    this.internalMeetingId = internalMeetingId;
    this.role = role;
    this.ws = null;
    this.webRtcPeer = null;
    this.hasAudio = false;
    this.contentType = "camera";
    this.offering = true;
    this.signalCandidates = true;
    this.ending = false;

    // Optional parameters are:
    // userName,
    // caleeName,
    // iceServers,
    // hasAudio,
    // contentType,
    // bitrate,
    // offering,
    // mediaServer,
    // signalCandidates,
    // traceLogs
    // networkPriority
    // gatheringTimeout
    Object.assign(this, options);
  }
  _onstreamended() {
    // Flag the broker as ending; we want to abort processing start responses
    this.ending = true;
    this.onstreamended();
  }
  onstreamended() {
    // To be implemented by instantiators
  }
  async share() {
    return new Promise((resolve, reject) => {
      if (this.stream == null) {
        logger.error({
          logCode: "".concat(this.logCodePrefix, "_missing_stream"),
          extraInfo: {
            role: this.role,
            sfuComponent: this.sfuComponent
          }
        }, 'Screenshare broker start failed: missing stream');
        return reject(BaseBroker.assembleError(1305));
      }
      return this.openWSConnection().then(this.startScreensharing.bind(this)).then(resolve).catch(reject);
    });
  }
  view() {
    return this.openWSConnection().then(this.subscribeToScreenStream.bind(this));
  }
  onWSMessage(message) {
    const parsedMessage = JSON.parse(message.data);
    switch (parsedMessage.id) {
      case 'startResponse':
        if (!this.ending && !this.started) {
          this.onRemoteDescriptionReceived(parsedMessage);
        }
        break;
      case 'playStart':
        if (!this.ending && !this.started) {
          this.onstart();
          this.started = true;
        }
        break;
      case 'stopSharing':
        this.stop();
        break;
      case 'iceCandidate':
        this.handleIceCandidate(parsedMessage.candidate);
        break;
      case 'error':
        this.handleSFUError(parsedMessage);
        break;
      case 'pong':
        break;
      default:
        logger.debug({
          logCode: "".concat(this.logCodePrefix, "_invalid_req"),
          extraInfo: {
            messageId: parsedMessage.id || 'Unknown',
            sfuComponent: this.sfuComponent,
            role: this.role
          }
        }, "Discarded invalid SFU message");
    }
  }
  handleSFUError(sfuResponse) {
    const {
      code,
      reason
    } = sfuResponse;
    const error = BaseBroker.assembleError(code, reason);
    logger.error({
      logCode: "".concat(this.logCodePrefix, "_sfu_error"),
      extraInfo: {
        errorCode: code,
        errorMessage: error.errorMessage,
        role: this.role,
        sfuComponent: this.sfuComponent,
        started: this.started
      }
    }, "Screen sharing failed in SFU");
    this.onerror(error);
  }
  sendLocalDescription(localDescription) {
    const message = {
      id: SUBSCRIBER_ANSWER,
      type: this.sfuComponent,
      role: this.role,
      voiceBridge: this.voiceBridge,
      callerName: this.userId,
      answer: localDescription
    };
    this.sendMessage(message);
  }
  onRemoteDescriptionReceived(sfuResponse) {
    if (this.offering) {
      return this.processAnswer(sfuResponse);
    }
    return this.processOffer(sfuResponse);
  }
  sendStartReq(offer) {
    const message = {
      id: 'start',
      type: this.sfuComponent,
      role: this.role,
      internalMeetingId: this.internalMeetingId,
      voiceBridge: this.voiceBridge,
      userName: this.userName,
      callerName: this.userId,
      sdpOffer: offer,
      hasAudio: !!this.hasAudio,
      contentType: this.contentType,
      bitrate: this.bitrate,
      mediaServer: this.mediaServer
    };
    this.sendMessage(message);
  }
  _handleOfferGenerationFailure(error) {
    logger.error({
      logCode: "".concat(this.logCodePrefix, "_offer_failure"),
      extraInfo: {
        errorMessage: error.name || error.message || 'Unknown error',
        role: this.role,
        sfuComponent: this.sfuComponent
      }
    }, 'Screenshare offer generation failed');
    // 1305: "PEER_NEGOTIATION_FAILED",
    return this.onerror(error);
  }
  startScreensharing() {
    return new Promise((resolve, reject) => {
      try {
        const options = {
          onicecandidate: this.signalCandidates ? this.onIceCandidate.bind(this) : null,
          videoStream: this.stream,
          configuration: this.populatePeerConfiguration(),
          trace: this.traceLogs,
          networkPriorities: this.networkPriority ? {
            video: this.networkPriority
          } : undefined,
          gatheringTimeout: this.gatheringTimeout
        };
        this.webRtcPeer = new WebRtcPeer('sendonly', options);
        this.webRtcPeer.iceQueue = [];
        this.webRtcPeer.start();
        this.webRtcPeer.peerConnection.onconnectionstatechange = () => {
          this.handleConnectionStateChange('screenshare');
        };
        if (this.offering) {
          this.webRtcPeer.generateOffer().then(this.sendStartReq.bind(this)).catch(this._handleOfferGenerationFailure.bind(this));
        } else {
          this.sendStartReq();
        }
        resolve();
      } catch (error) {
        // 1305: "PEER_NEGOTIATION_FAILED",
        const normalizedError = BaseBroker.assembleError(1305);
        logger.error({
          logCode: "".concat(this.logCodePrefix, "_peer_creation_failed"),
          extraInfo: {
            errorMessage: error.name || error.message || 'Unknown error',
            errorCode: normalizedError.errorCode,
            role: this.role,
            sfuComponent: this.sfuComponent,
            started: this.started
          }
        }, 'Screenshare peer creation failed');
        this.onerror(normalizedError);
        reject(normalizedError);
      }
    });
  }
  onIceCandidate(candidate) {
    const message = {
      id: ON_ICE_CANDIDATE_MSG,
      role: this.role,
      type: this.sfuComponent,
      voiceBridge: this.voiceBridge,
      candidate,
      callerName: this.userId
    };
    this.sendMessage(message);
  }
  subscribeToScreenStream() {
    return new Promise((resolve, reject) => {
      try {
        const options = {
          mediaConstraints: {
            audio: !!this.hasAudio
          },
          onicecandidate: this.signalCandidates ? this.onIceCandidate.bind(this) : null,
          configuration: this.populatePeerConfiguration(),
          trace: this.traceLogs,
          gatheringTimeout: this.gatheringTimeout
        };
        this.webRtcPeer = new WebRtcPeer('recvonly', options);
        this.webRtcPeer.iceQueue = [];
        this.webRtcPeer.start();
        this.webRtcPeer.peerConnection.onconnectionstatechange = () => {
          this.handleConnectionStateChange('screenshare');
        };
        if (this.offering) {
          this.webRtcPeer.generateOffer().then(this.sendStartReq.bind(this)).catch(this._handleOfferGenerationFailure.bind(this));
        } else {
          this.sendStartReq();
        }
        resolve();
      } catch (error) {
        // 1305: "PEER_NEGOTIATION_FAILED",
        const normalizedError = BaseBroker.assembleError(1305);
        logger.error({
          logCode: "".concat(this.logCodePrefix, "_peer_creation_failed"),
          extraInfo: {
            errorMessage: error.name || error.message || 'Unknown error',
            errorCode: normalizedError.errorCode,
            role: this.role,
            sfuComponent: this.sfuComponent,
            started: this.started
          }
        }, 'Screenshare peer creation failed');
        this.onerror(normalizedError);
        reject(normalizedError);
      }
    });
  }
}
module.exportDefault(ScreenshareBroker);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sfu-base-broker.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/bbb-webrtc-sfu/sfu-base-broker.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 0);
let notifyStreamStateChange;
module.link("/imports/ui/services/bbb-webrtc-sfu/stream-state-service", {
  notifyStreamStateChange(v) {
    notifyStreamStateChange = v;
  }
}, 1);
let SFU_BROKER_ERRORS;
module.link("/imports/ui/services/bbb-webrtc-sfu/broker-base-errors", {
  SFU_BROKER_ERRORS(v) {
    SFU_BROKER_ERRORS = v;
  }
}, 2);
const WS_HEARTBEAT_OPTS = {
  interval: 15000,
  delay: 3000
};
class BaseBroker {
  static assembleError(code, reason) {
    const message = reason || SFU_BROKER_ERRORS[code];
    const error = new Error(message);
    error.errorCode = code;
    // Duplicating key-vals because we can't settle on an error pattern... - prlanzarin
    error.errorCause = error.message;
    error.errorMessage = error.message;
    return error;
  }
  constructor(sfuComponent, wsUrl) {
    this.wsUrl = wsUrl;
    this.sfuComponent = sfuComponent;
    this.ws = null;
    this.webRtcPeer = null;
    this.wsHeartbeat = null;
    this.started = false;
    this.signallingTransportOpen = false;
    this.logCodePrefix = "".concat(this.sfuComponent, "_broker");
    this.peerConfiguration = {};
    this.onbeforeunload = this.onbeforeunload.bind(this);
    this._onWSError = this._onWSError.bind(this);
    window.addEventListener('beforeunload', this.onbeforeunload);
  }
  set started(val) {
    this._started = val;
  }
  get started() {
    return this._started;
  }
  onbeforeunload() {
    return this.stop();
  }
  onstart() {
    // To be implemented by inheritors
  }
  onerror(error) {
    // To be implemented by inheritors
  }
  onended() {
    // To be implemented by inheritors
  }
  handleSFUError(sfuResponse) {
    // To be implemented by inheritors
  }
  sendLocalDescription(localDescription) {
    // To be implemented by inheritors
  }
  _onWSMessage(message) {
    this._updateLastMsgTime();
    this.onWSMessage(message);
  }
  onWSMessage(message) {
    // To be implemented by inheritors
  }
  _onWSError(error) {
    let normalizedError;
    logger.error({
      logCode: "".concat(this.logCodePrefix, "_websocket_error"),
      extraInfo: {
        errorMessage: error.name || error.message || 'Unknown error',
        sfuComponent: this.sfuComponent
      }
    }, 'WebSocket connection to SFU failed');
    if (this.signallingTransportOpen) {
      // 1301: "WEBSOCKET_DISCONNECTED", transport was already open
      normalizedError = BaseBroker.assembleError(1301);
    } else {
      // 1302: "WEBSOCKET_CONNECTION_FAILED", transport errored before establishment
      normalizedError = BaseBroker.assembleError(1302);
    }
    this.onerror(normalizedError);
    return normalizedError;
  }
  openWSConnection() {
    return new Promise((resolve, reject) => {
      this.ws = new WebSocket(this.wsUrl);
      this.ws.onmessage = this._onWSMessage.bind(this);
      this.ws.onclose = () => {
        // 1301: "WEBSOCKET_DISCONNECTED",
        this.onerror(BaseBroker.assembleError(1301));
      };
      this.ws.onerror = error => reject(this._onWSError(error));
      this.ws.onopen = () => {
        this.setupWSHeartbeat();
        this.signallingTransportOpen = true;
        return resolve();
      };
    });
  }
  closeWs() {
    this.clearWSHeartbeat();
    if (this.ws !== null) {
      this.ws.onclose = function () {};
      this.ws.close();
    }
  }
  _updateLastMsgTime() {
    this.ws.isAlive = true;
    this.ws.lastMsgTime = Date.now();
  }
  _getTimeSinceLastMsg() {
    return Date.now() - this.ws.lastMsgTime;
  }
  setupWSHeartbeat() {
    if (WS_HEARTBEAT_OPTS.interval === 0 || this.ws == null) return;
    this.ws.isAlive = true;
    this.wsHeartbeat = setInterval(() => {
      if (this.ws.isAlive === false) {
        logger.warn({
          logCode: "".concat(this.logCodePrefix, "_ws_heartbeat_failed")
        }, "WS heartbeat failed (".concat(this.sfuComponent, ")"));
        this.closeWs();
        this._onWSError(new Error('HeartbeatFailed'));
        return;
      }
      if (this._getTimeSinceLastMsg() < WS_HEARTBEAT_OPTS.interval - WS_HEARTBEAT_OPTS.delay) {
        return;
      }
      this.ws.isAlive = false;
      this.ping();
    }, WS_HEARTBEAT_OPTS.interval);
    this.ping();
  }
  clearWSHeartbeat() {
    if (this.wsHeartbeat) {
      clearInterval(this.wsHeartbeat);
    }
  }
  sendMessage(message) {
    const jsonMessage = JSON.stringify(message);
    try {
      this.ws.send(jsonMessage);
    } catch (error) {
      logger.error({
        logCode: "".concat(this.logCodePrefix, "_ws_send_error"),
        extraInfo: {
          errorName: error.name,
          errorMessage: error.message,
          sfuComponent: this.sfuComponent
        }
      }, "Failed to send WebSocket message (".concat(this.sfuComponent, ")"));
    }
  }
  ping() {
    this.sendMessage({
      id: 'ping'
    });
  }
  _processRemoteDescription() {
    let localDescription = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    // There is a new local description; send it back to the server
    if (localDescription) this.sendLocalDescription(localDescription);
    // Mark the peer as negotiated and flush the ICE queue
    this.webRtcPeer.negotiated = true;
    this.processIceQueue();
  }
  _validateStartResponse(sfuResponse) {
    const {
      response,
      role
    } = sfuResponse;
    if (response !== 'accepted') {
      this.handleSFUError(sfuResponse);
      return false;
    }
    logger.debug({
      logCode: "".concat(this.logCodePrefix, "_start_success"),
      extraInfo: {
        role,
        sfuComponent: this.sfuComponent
      }
    }, "Start request accepted for ".concat(this.sfuComponent));
    return true;
  }
  processOffer(sfuResponse) {
    if (this._validateStartResponse(sfuResponse)) {
      this.webRtcPeer.processOffer(sfuResponse.sdpAnswer).then(this._processRemoteDescription.bind(this)).catch(error => {
        logger.error({
          logCode: "".concat(this.logCodePrefix, "_processoffer_error"),
          extraInfo: {
            errorMessage: error.name || error.message || 'Unknown error',
            sfuComponent: this.sfuComponent
          }
        }, "Error processing offer from SFU for ".concat(this.sfuComponent));
        // 1305: "PEER_NEGOTIATION_FAILED",
        this.onerror(BaseBroker.assembleError(1305));
      });
    }
  }
  processAnswer(sfuResponse) {
    if (this._validateStartResponse(sfuResponse)) {
      this.webRtcPeer.processAnswer(sfuResponse.sdpAnswer).then(this._processRemoteDescription.bind(this)).catch(error => {
        logger.error({
          logCode: "".concat(this.logCodePrefix, "_processanswer_error"),
          extraInfo: {
            errorMessage: error.name || error.message || 'Unknown error',
            sfuComponent: this.sfuComponent
          }
        }, "Error processing answer from SFU for ".concat(this.sfuComponent));
        // 1305: "PEER_NEGOTIATION_FAILED",
        this.onerror(BaseBroker.assembleError(1305));
      });
    }
  }
  populatePeerConfiguration() {
    this.addIceServers();
    if (this.forceRelay) {
      this.setRelayTransportPolicy();
    }
    return this.peerConfiguration;
  }
  addIceServers() {
    if (this.iceServers && this.iceServers.length > 0) {
      this.peerConfiguration.iceServers = this.iceServers;
    }
  }
  setRelayTransportPolicy() {
    this.peerConfiguration.iceTransportPolicy = 'relay';
  }
  handleConnectionStateChange(eventIdentifier) {
    if (this.webRtcPeer) {
      const {
        peerConnection
      } = this.webRtcPeer;
      const connectionState = peerConnection.connectionState;
      if (eventIdentifier) {
        notifyStreamStateChange(eventIdentifier, connectionState);
      }
      if (connectionState === 'failed' || connectionState === 'closed') {
        var _this$webRtcPeer;
        if ((_this$webRtcPeer = this.webRtcPeer) !== null && _this$webRtcPeer !== void 0 && _this$webRtcPeer.peerConnection) {
          this.webRtcPeer.peerConnection.onconnectionstatechange = null;
        }
        // 1307: "ICE_STATE_FAILED",
        const error = BaseBroker.assembleError(1307);
        this.onerror(error);
      }
    }
  }
  addIceCandidate(candidate) {
    this.webRtcPeer.addIceCandidate(candidate).catch(error => {
      // Just log the error. We can't be sure if a candidate failure on add is
      // fatal or not, so that's why we have a timeout set up for negotiations and
      // listeners for ICE state transitioning to failures, so we won't act on it here
      logger.error({
        logCode: "".concat(this.logCodePrefix, "_addicecandidate_error"),
        extraInfo: {
          errorMessage: error.name || error.message || 'Unknown error',
          errorCode: error.code || 'Unknown code',
          sfuComponent: this.sfuComponent,
          started: this.started
        }
      }, 'Adding ICE candidate failed');
    });
  }
  processIceQueue() {
    const peer = this.webRtcPeer;
    while (peer.iceQueue.length) {
      const candidate = peer.iceQueue.shift();
      this.addIceCandidate(candidate);
    }
  }
  handleIceCandidate(candidate) {
    const peer = this.webRtcPeer;
    if (peer.negotiated) {
      this.addIceCandidate(candidate);
    } else {
      // ICE candidates are queued until a SDP answer has been processed.
      // This was done due to a long term iOS/Safari quirk where it'd (as of 2018)
      // fail if candidates were added before the offer/answer cycle was completed.
      // IT STILL HAPPENS - prlanzarin sept 2019
      // still happens - prlanzarin sept 2020
      peer.iceQueue.push(candidate);
    }
  }
  disposePeer() {
    if (this.webRtcPeer) {
      this.webRtcPeer.dispose();
      this.webRtcPeer = null;
    }
  }
  stop() {
    var _this$webRtcPeer2;
    this.onstart = function () {};
    this.onerror = function () {};
    window.removeEventListener('beforeunload', this.onbeforeunload);
    if ((_this$webRtcPeer2 = this.webRtcPeer) !== null && _this$webRtcPeer2 !== void 0 && _this$webRtcPeer2.peerConnection) {
      this.webRtcPeer.peerConnection.onconnectionstatechange = null;
    }
    this.closeWs();
    this.disposePeer();
    this.started = false;
    logger.debug({
      logCode: "".concat(this.logCodePrefix, "_stop"),
      extraInfo: {
        sfuComponent: this.sfuComponent
      }
    }, "Stopped broker session for ".concat(this.sfuComponent));
    this.onended();
    this.onended = function () {};
  }
}
module.exportDefault(BaseBroker);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"stream-state-service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/bbb-webrtc-sfu/stream-state-service.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  notifyStreamStateChange: () => notifyStreamStateChange,
  subscribeToStreamStateChange: () => subscribeToStreamStateChange,
  unsubscribeFromStreamStateChange: () => unsubscribeFromStreamStateChange,
  isStreamStateUnhealthy: () => isStreamStateUnhealthy,
  isStreamStateHealthy: () => isStreamStateHealthy
});
/*
 * The idea behind this whole utilitary is proving a decoupled way of propagating
 * peer connection states up and down the component tree without coming up with
 * weird trackers, hooks and/or prop drilling. This is mainly aimed at component
 * trees that aren't well organized in the first place (ie video-provider).
 * The base use case for this is notifying stream state changes to correctly
 * handle UI for reconnection scenarios.
 */

const STREAM_STATE_CHANGED_EVENT_PREFIX = 'streamStateChanged';

/*
 * The event name format for notify/subscribe/unsubscribe is
 * `${STREAM_STATE_CHANGED_EVENT_PREFIX}:${eventTag}`. eventTag can be any string.
 * streamState must be a valid member of either RTCIceConnectionState or
 * RTCPeerConnectionState enums
 */
const notifyStreamStateChange = (eventTag, streamState) => {
  const eventName = "".concat(STREAM_STATE_CHANGED_EVENT_PREFIX, ":").concat(eventTag);
  const streamStateChanged = new CustomEvent(eventName, {
    detail: {
      eventTag,
      streamState
    }
  });
  window.dispatchEvent(streamStateChanged);
};
const subscribeToStreamStateChange = (eventTag, callback) => {
  const eventName = "".concat(STREAM_STATE_CHANGED_EVENT_PREFIX, ":").concat(eventTag);
  window.addEventListener(eventName, callback, false);
};
const unsubscribeFromStreamStateChange = (eventTag, callback) => {
  const eventName = "".concat(STREAM_STATE_CHANGED_EVENT_PREFIX, ":").concat(eventTag);
  window.removeEventListener(eventName, callback);
};
const isStreamStateUnhealthy = streamState => {
  return streamState === 'failed' || streamState === 'closed';
};
const isStreamStateHealthy = streamState => {
  return streamState === 'connected' || streamState === 'completed';
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/bbb-webrtc-sfu/utils.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  shouldForceRelay: () => shouldForceRelay
});
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 0);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 1);
let hasTurnServer;
module.link("/imports/utils/fetchStunTurnServers", {
  hasTurnServer(v) {
    hasTurnServer = v;
  }
}, 2);
/*
 * Whether TURN/relay usage should be forced to work around Firefox's lack of
 * support for regular nomination when dealing with ICE-litee peers (e.g.:
 * mediasoup). See: https://bugzilla.mozilla.org/show_bug.cgi?id=1034964
 *
 * iOS endpoints are ignored from the trigger because _all_ iOS browsers
 * are either native WebKit or WKWebView based (so they shouldn't be affected)
 */
const shouldForceRelay = () => {
  const {
    isFirefox
  } = browserInfo;
  const {
    isIos
  } = deviceInfo;
  const FORCE_RELAY_ON_FF = window.meetingClientSettings.public.media.forceRelayOnFirefox;
  const FORCE_RELAY = window.meetingClientSettings.public.media.forceRelay;
  return FORCE_RELAY || isFirefox && !isIos && FORCE_RELAY_ON_FF && hasTurnServer();
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"features":{"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/features/index.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  useDisabledFeatures: () => useDisabledFeatures,
  useIsScreenSharingEnabled: () => useIsScreenSharingEnabled,
  useIsLearningDashboardEnabled: () => useIsLearningDashboardEnabled,
  useIsPollingEnabled: () => useIsPollingEnabled,
  useIsPresentationEnabled: () => useIsPresentationEnabled,
  useIsExternalVideoEnabled: () => useIsExternalVideoEnabled,
  useIsChatEnabled: () => useIsChatEnabled,
  useIsSharedNotesEnabled: () => useIsSharedNotesEnabled,
  useIsLiveTranscriptionEnabled: () => useIsLiveTranscriptionEnabled,
  useIsBreakoutRoomsEnabled: () => useIsBreakoutRoomsEnabled,
  useIsLayoutsEnabled: () => useIsLayoutsEnabled,
  useIsVirtualBackgroundsEnabled: () => useIsVirtualBackgroundsEnabled,
  useIsCustomVirtualBackgroundsEnabled: () => useIsCustomVirtualBackgroundsEnabled,
  useIsDownloadPresentationWithAnnotationsEnabled: () => useIsDownloadPresentationWithAnnotationsEnabled,
  useIsDownloadPresentationConvertedToPdfEnabled: () => useIsDownloadPresentationConvertedToPdfEnabled,
  useIsDownloadPresentationOriginalFileEnabled: () => useIsDownloadPresentationOriginalFileEnabled,
  useIsSnapshotOfCurrentSlideEnabled: () => useIsSnapshotOfCurrentSlideEnabled,
  useIsImportPresentationWithAnnotationsFromBreakoutRoomsEnabled: () => useIsImportPresentationWithAnnotationsFromBreakoutRoomsEnabled,
  useIsImportSharedNotesFromBreakoutRoomsEnabled: () => useIsImportSharedNotesFromBreakoutRoomsEnabled,
  useIsReactionsEnabled: () => useIsReactionsEnabled,
  useIsTimerFeatureEnabled: () => useIsTimerFeatureEnabled,
  useIsCameraAsContentEnabled: () => useIsCameraAsContentEnabled,
  useIsInfiniteWhiteboardEnabled: () => useIsInfiniteWhiteboardEnabled
});
let useMeeting;
module.link("../../core/hooks/useMeeting", {
  default(v) {
    useMeeting = v;
  }
}, 0);
function useDisabledFeatures() {
  const {
    data: meetingData
  } = useMeeting(m => ({
    disabledFeatures: m.disabledFeatures
  }));
  const disabledFeatures = (meetingData === null || meetingData === void 0 ? void 0 : meetingData.disabledFeatures) || [];
  return disabledFeatures;
}
function useIsScreenSharingEnabled() {
  return useDisabledFeatures().indexOf('screenshare') === -1 && window.meetingClientSettings.public.kurento.enableScreensharing;
}
function useIsLearningDashboardEnabled() {
  return useDisabledFeatures().indexOf('learningDashboard') === -1;
}
function useIsPollingEnabled() {
  return useDisabledFeatures().indexOf('polls') === -1 && window.meetingClientSettings.public.poll.enabled;
}
function useIsPresentationEnabled() {
  return useDisabledFeatures().indexOf('presentation') === -1;
}
function useIsExternalVideoEnabled() {
  return useDisabledFeatures().indexOf('externalVideos') === -1 && window.meetingClientSettings.public.externalVideoPlayer.enabled;
}
function useIsChatEnabled() {
  return useDisabledFeatures().indexOf('chat') === -1 && window.meetingClientSettings.public.chat.enabled;
}
function useIsSharedNotesEnabled() {
  return useDisabledFeatures().indexOf('sharedNotes') === -1 && window.meetingClientSettings.public.notes.enabled;
}
function useIsLiveTranscriptionEnabled() {
  return useDisabledFeatures().indexOf('liveTranscription') === -1 && window.meetingClientSettings.public.app.audioCaptions.enabled;
}
function useIsBreakoutRoomsEnabled() {
  return useDisabledFeatures().indexOf('breakoutRooms') === -1;
}
function useIsLayoutsEnabled() {
  return useDisabledFeatures().indexOf('layouts') === -1;
}
function useIsVirtualBackgroundsEnabled() {
  return useDisabledFeatures().indexOf('virtualBackgrounds') === -1 && window.meetingClientSettings.public.virtualBackgrounds.enabled;
}
function useIsCustomVirtualBackgroundsEnabled() {
  return useDisabledFeatures().indexOf('customVirtualBackgrounds') === -1;
}
function useIsDownloadPresentationWithAnnotationsEnabled() {
  return useDisabledFeatures().indexOf('downloadPresentationWithAnnotations') === -1 && window.meetingClientSettings.public.presentation.allowDownloadWithAnnotations;
}
function useIsDownloadPresentationConvertedToPdfEnabled() {
  return useDisabledFeatures().indexOf('downloadPresentationConvertedToPdf') === -1;
}
function useIsDownloadPresentationOriginalFileEnabled() {
  return useDisabledFeatures().indexOf('downloadPresentationOriginalFile') === -1 && window.meetingClientSettings.public.presentation.allowDownloadOriginal;
}
function useIsSnapshotOfCurrentSlideEnabled() {
  return useDisabledFeatures().indexOf('snapshotOfCurrentSlide') === -1 && window.meetingClientSettings.public.presentation.allowSnapshotOfCurrentSlide;
}
function useIsImportPresentationWithAnnotationsFromBreakoutRoomsEnabled() {
  return useDisabledFeatures().indexOf('importPresentationWithAnnotationsFromBreakoutRooms') === -1;
}
function useIsImportSharedNotesFromBreakoutRoomsEnabled() {
  return useDisabledFeatures().indexOf('importSharedNotesFromBreakoutRooms') === -1;
}
function useIsReactionsEnabled() {
  const USER_REACTIONS_ENABLED = window.meetingClientSettings.public.userReaction.enabled;
  return useDisabledFeatures().indexOf('reactions') === -1 && USER_REACTIONS_ENABLED;
}
function useIsTimerFeatureEnabled() {
  return useDisabledFeatures().indexOf('timer') === -1 && window.meetingClientSettings.public.timer.enabled;
}
function useIsCameraAsContentEnabled() {
  return useDisabledFeatures().indexOf('cameraAsContent') === -1 && window.meetingClientSettings.public.app.enableCameraAsContent;
}
function useIsInfiniteWhiteboardEnabled() {
  return useDisabledFeatures().indexOf('infiniteWhiteboard') === -1 && window.meetingClientSettings.public.whiteboard.allowInfiniteWhiteboard;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"meeting-settings":{"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/meeting-settings/index.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => getFromMeetingSettings,
  getVoiceConf: () => getVoiceConf
});
let makeVar;
module.link("@apollo/client", {
  makeVar(v) {
    makeVar = v;
  }
}, 0);
let stringToHash;
module.link("/imports/ui/core/singletons/subscriptionStore", {
  stringToHash(v) {
    stringToHash = v;
  }
}, 1);
let makePatchedQuery;
module.link("/imports/ui/core/hooks/createUseSubscription", {
  makePatchedQuery(v) {
    makePatchedQuery = v;
  }
}, 2);
let MEETING_SUBSCRIPTION;
module.link("/imports/ui/core/graphql/queries/meetingSubscription", {
  default(v) {
    MEETING_SUBSCRIPTION = v;
  }
}, 3);
const settings = makeVar([]);
const voiceConf = makeVar();
const patchedSub = makePatchedQuery(MEETING_SUBSCRIPTION);
const subHash = stringToHash(JSON.stringify({
  subscription: patchedSub,
  variables: {}
}));
window.addEventListener('graphqlSubscription', e => {
  const {
    subscriptionHash,
    response
  } = e.detail;
  if (subscriptionHash === subHash) {
    const {
      data
    } = response;
    if (data) {
      const {
        metadata = [],
        voiceSettings
      } = data.meeting[0];
      settings(metadata);
      voiceConf(voiceSettings.voiceConf);
    }
  }
});
function getFromMeetingSettings(setting, defaultValue) {
  const metadata = settings();
  const value = metadata ? metadata[setting] : undefined;
  return value || defaultValue;
}
function getVoiceConf() {
  return voiceConf();
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"mobile-app":{"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/mobile-app/index.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 1);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 2);
let fetchStunTurnServers;
module.link("/imports/utils/fetchStunTurnServers", {
  fetchStunTurnServers(v) {
    fetchStunTurnServers = v;
  }
}, 3);
(function () {
  // This function must be executed during the import time, that's why it's not exported to the caller component.
  // It's needed because it changes some functions provided by browser, and these functions are verified during
  // import time (like in ScreenshareBridgeService)
  if (browserInfo.isTabletApp) {
    logger.debug("BBB-MOBILE - Mobile APP detected");
    const WEBRTC_CALL_TYPE_FULL_AUDIO = 'full_audio';
    const WEBRTC_CALL_TYPE_SCREEN_SHARE = 'screen_share';
    const WEBRTC_CALL_TYPE_STANDARD = 'standard';

    // This function detects if the call happened to publish a screenshare
    function detectWebRtcCallType(caller) {
      let peerConnection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      // Keep track of how many webRTC evaluations was done
      if (!peerConnection.detectWebRtcCallTypeEvaluations) peerConnection.detectWebRtcCallTypeEvaluations = 0;
      peerConnection.detectWebRtcCallTypeEvaluations++;

      // If already successfully evaluated, reuse
      if (peerConnection && peerConnection.webRtcCallType !== undefined) {
        logger.info("BBB-MOBILE - detectWebRtcCallType (already evaluated as ".concat(peerConnection.webRtcCallType, ")"), {
          caller,
          peerConnection
        });
        return peerConnection.webRtcCallType;
      }

      // Evaluate context otherwise
      const e = new Error('dummy');
      const stackTrace = e.stack;
      logger.info("BBB-MOBILE - detectWebRtcCallType (evaluating)", {
        caller,
        peerConnection,
        stackTrace: stackTrace.split('\n'),
        detectWebRtcCallTypeEvaluations: peerConnection.detectWebRtcCallTypeEvaluations,
        args
      });

      // addEventListener is the first call for screensharing and it has a startScreensharing in its stackTrace
      if (peerConnection.detectWebRtcCallTypeEvaluations == 1) {
        if (caller == 'addEventListener' && stackTrace.indexOf('startScreensharing') !== -1) {
          peerConnection.webRtcCallType = WEBRTC_CALL_TYPE_SCREEN_SHARE; // this uses mobile app broadcast upload extension
        } else if (caller == 'addEventListener' && stackTrace.indexOf('invite') !== -1) {
          peerConnection.webRtcCallType = WEBRTC_CALL_TYPE_FULL_AUDIO; // this uses mobile app webRTC
        } else {
          peerConnection.webRtcCallType = WEBRTC_CALL_TYPE_STANDARD; // this uses the webview webRTC
        }

        return peerConnection.webRtcCallType;
      }
    }
    // Store the method call sequential
    const sequenceHolder = {
      sequence: 0
    };

    // Store the promise for each method call
    const promisesHolder = {};

    // Call a method in the mobile application, returning a promise for its execution
    function callNativeMethod(method) {
      let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      try {
        const sequence = ++sequenceHolder.sequence;
        return new Promise((resolve, reject) => {
          promisesHolder[sequence] = {
            resolve,
            reject
          };
          window.ReactNativeWebView.postMessage(JSON.stringify({
            sequence: sequenceHolder.sequence,
            method: method,
            arguments: args
          }));
        });
      } catch (e) {
        logger.error("Error on callNativeMethod ".concat(e.message), e);
      }
    }

    // This method is called from the mobile app to notify us about a method invocation result
    window.nativeMethodCallResult = (sequence, isResolve, resultOrException) => {
      const promise = promisesHolder[sequence];
      if (promise) {
        if (isResolve) {
          promise.resolve(resultOrException);
          delete promisesHolder[sequence];
        } else {
          promise.reject(resultOrException);
          delete promisesHolder[sequence];
        }
      }
      return true;
    };

    // WebRTC replacement functions
    const buildVideoTrack = function () {};
    const stream = {};

    // Navigator
    navigator.getDisplayMedia = function () {
      logger.info("BBB-MOBILE - getDisplayMedia called", arguments);
      return new Promise((resolve, reject) => {
        callNativeMethod('initializeScreenShare').then(() => {
          const fakeVideoTrack = {};
          fakeVideoTrack.applyConstraints = function (constraints) {
            return new Promise((resolve, reject) => {
              resolve();
            });
          };
          fakeVideoTrack.onended = null; // callbacks added from screenshare (we can use it later)
          fakeVideoTrack.oninactive = null; // callbacks added from screenshare (we can use it later)
          fakeVideoTrack.addEventListener = function () {}; // skip listeners

          const videoTracks = [fakeVideoTrack];
          stream.getTracks = stream.getVideoTracks = function () {
            return videoTracks;
          };
          stream.active = true;
          resolve(stream);
        }).catch(e => {
          logger.error("Failure calling native initializeScreenShare", e.message);
        });
      });
    };

    // RTCPeerConnection
    const prototype = window.RTCPeerConnection.prototype;
    prototype.originalCreateOffer = prototype.createOffer;
    prototype.createOffer = async function (options) {
      const webRtcCallType = detectWebRtcCallType('createOffer', this);
      if (webRtcCallType === WEBRTC_CALL_TYPE_STANDARD) {
        return prototype.originalCreateOffer.call(this, ...arguments);
      }
      logger.info("BBB-MOBILE - createOffer called", {
        options
      });
      const stunTurn = await fetchStunTurnServers(Auth._authToken);
      const createOfferMethod = webRtcCallType === WEBRTC_CALL_TYPE_SCREEN_SHARE ? 'createScreenShareOffer' : 'createFullAudioOffer';
      return await new Promise((resolve, reject) => {
        callNativeMethod(createOfferMethod, [stunTurn]).then(sdp => {
          logger.info("BBB-MOBILE - createOffer resolved", {
            sdp
          });

          // send offer to BBB code
          resolve({
            type: 'offer',
            sdp
          });
        });
      });
    };
    prototype.originalAddEventListener = prototype.addEventListener;
    prototype.addEventListener = function (event, callback) {
      if (WEBRTC_CALL_TYPE_STANDARD === detectWebRtcCallType('addEventListener', this, arguments)) {
        return prototype.originalAddEventListener.call(this, ...arguments);
      }
      logger.info("BBB-MOBILE - addEventListener called", {
        event,
        callback
      });
      switch (event) {
        case 'icecandidate':
          window.bbbMobileScreenShareIceCandidateCallback = function () {
            logger.info("Received a bbbMobileScreenShareIceCandidateCallback call with arguments", arguments);
            if (callback) {
              callback.apply(this, arguments);
            }
            return true;
          };
          break;
        case 'signalingstatechange':
          window.bbbMobileScreenShareSignalingStateChangeCallback = function (newState) {
            this.signalingState = newState;
            callback();
          };
          break;
      }
    };
    prototype.originalSetLocalDescription = prototype.setLocalDescription;
    prototype.setLocalDescription = function (description, successCallback, failureCallback) {
      if (WEBRTC_CALL_TYPE_STANDARD === detectWebRtcCallType('setLocalDescription', this)) {
        return prototype.originalSetLocalDescription.call(this, ...arguments);
      }
      logger.info("BBB-MOBILE - setLocalDescription called", {
        description,
        successCallback,
        failureCallback
      });

      // store the value
      this._localDescription = JSON.parse(JSON.stringify(description));
      // replace getter of localDescription to return this value
      Object.defineProperty(this, 'localDescription', {
        get: function () {
          return this._localDescription;
        },
        set: function (newValue) {}
      });

      // return a promise that resolves immediately
      return new Promise((resolve, reject) => {
        resolve();
      });
    };
    prototype.originalSetRemoteDescription = prototype.setRemoteDescription;
    prototype.setRemoteDescription = function (description, successCallback, failureCallback) {
      const webRtcCallType = detectWebRtcCallType('setRemoteDescription', this);
      if (WEBRTC_CALL_TYPE_STANDARD === webRtcCallType) {
        return prototype.originalSetRemoteDescription.call(this, ...arguments);
      }
      logger.info("BBB-MOBILE - setRemoteDescription called", {
        description,
        successCallback,
        failureCallback
      });
      this._remoteDescription = JSON.parse(JSON.stringify(description));
      Object.defineProperty(this, 'remoteDescription', {
        get: function () {
          return this._remoteDescription;
        },
        set: function (newValue) {}
      });
      const setRemoteDescriptionMethod = webRtcCallType === WEBRTC_CALL_TYPE_SCREEN_SHARE ? 'setScreenShareRemoteSDP' : 'setFullAudioRemoteSDP';
      return new Promise((resolve, reject) => {
        callNativeMethod(setRemoteDescriptionMethod, [description]).then(() => {
          logger.info("BBB-MOBILE - setRemoteDescription resolved");
          resolve();
          if (webRtcCallType === WEBRTC_CALL_TYPE_FULL_AUDIO) {
            Object.defineProperty(this, "iceGatheringState", {
              get: function () {
                return "complete";
              },
              set: () => {}
            });
            Object.defineProperty(this, "iceConnectionState", {
              get: function () {
                return "completed";
              },
              set: () => {}
            });
            this.onicegatheringstatechange && this.onicegatheringstatechange({
              target: this
            });
            this.oniceconnectionstatechange && this.oniceconnectionstatechange({
              target: this
            });
          }
        });
      });
    };
    prototype.originalAddTrack = prototype.addTrack;
    prototype.addTrack = function (description, successCallback, failureCallback) {
      if (WEBRTC_CALL_TYPE_STANDARD === detectWebRtcCallType('addTrack', this)) {
        return prototype.originalAddTrack.call(this, ...arguments);
      }
      logger.info("BBB-MOBILE - addTrack called", {
        description,
        successCallback,
        failureCallback
      });
    };
    prototype.originalGetLocalStreams = prototype.getLocalStreams;
    prototype.getLocalStreams = function () {
      if (WEBRTC_CALL_TYPE_STANDARD === detectWebRtcCallType('getLocalStreams', this)) {
        return prototype.originalGetLocalStreams.call(this, ...arguments);
      }
      logger.info("BBB-MOBILE - getLocalStreams called", arguments);

      //
      return [stream];
    };
    prototype.originalAddTransceiver = prototype.addTransceiver;
    prototype.addTransceiver = function () {
      if (WEBRTC_CALL_TYPE_STANDARD === detectWebRtcCallType('addTransceiver', this)) {
        return prototype.originalAddTransceiver.call(this, ...arguments);
      }
      logger.info("BBB-MOBILE - addTransceiver called", arguments);
    };
    prototype.originalAddIceCandidate = prototype.addIceCandidate;
    prototype.addIceCandidate = function (candidate) {
      if (WEBRTC_CALL_TYPE_STANDARD === detectWebRtcCallType('addIceCandidate', this)) {
        return prototype.originalAddIceCandidate.call(this, ...arguments);
      }
      logger.info("BBB-MOBILE - addIceCandidate called", {
        candidate
      });
      return new Promise((resolve, reject) => {
        callNativeMethod('addRemoteIceCandidate', [candidate]).then(() => {
          logger.info("BBB-MOBILE - addRemoteIceCandidate resolved");
          resolve();
        });
      });
    };

    // Handle screenshare stop
    const KurentoScreenShareBridge = require('/imports/api/screenshare/client/bridge/index.js').default;
    //Kurento Screen Share
    var stopOriginal = KurentoScreenShareBridge.stop.bind(KurentoScreenShareBridge);
    KurentoScreenShareBridge.stop = function () {
      callNativeMethod('stopScreenShare');
      logger.debug("BBB-MOBILE - Click on stop screen share");
      stopOriginal();
    };

    // Handle screenshare stop requested by application (i.e. stopped the broadcast extension)
    window.bbbMobileScreenShareBroadcastFinishedCallback = function () {
      var _document$querySelect;
      (_document$querySelect = document.querySelector('[data-test="stopScreenShare"]')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.click();
    };
  }
})();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"notification":{"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/notification/index.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["id"];
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 0);
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 1);
module.export({
  notify: () => notify
});
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let toast;
module.link("react-toastify", {
  toast(v) {
    toast = v;
  }
}, 1);
let isEqual;
module.link("radash", {
  isEqual(v) {
    isEqual = v;
  }
}, 2);
let Toast;
module.link("/imports/ui/components/common/toast/component", {
  default(v) {
    Toast = v;
  }
}, 3);
let lastToast = {
  id: null,
  message: null,
  type: null,
  icon: null
};
function notify(message) {
  let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
  let icon = arguments.length > 2 ? arguments[2] : undefined;
  let options = arguments.length > 3 ? arguments[3] : undefined;
  let content = arguments.length > 4 ? arguments[4] : undefined;
  let small = arguments.length > 5 ? arguments[5] : undefined;
  const settings = _objectSpread({
    type
  }, options);
  const {
      id: lastToastId
    } = lastToast,
    lastToastProps = _objectWithoutProperties(lastToast, _excluded);
  const toastProps = {
    message,
    type,
    icon,
    content,
    small
  };
  if (!toast.isActive(lastToast.id) || !isEqual(lastToastProps, toastProps)) {
    if (toast.isActive(lastToast.id) && isEqual(lastToastProps.key, toastProps.key) && (options === null || options === void 0 ? void 0 : options.autoClose) > 0) {
      toast.update(lastToast.id, _objectSpread({
        render: /*#__PURE__*/React.createElement("div", {
          role: "alert"
        }, /*#__PURE__*/React.createElement(Toast, toastProps)),
        autoClose: options.autoClose
      }, toastProps));
    } else {
      const id = toast( /*#__PURE__*/React.createElement("div", {
        role: "alert"
      }, /*#__PURE__*/React.createElement(Toast, toastProps)), settings);
      lastToast = _objectSpread({
        id
      }, toastProps);
      return id;
    }
  }
  return null;
}
module.exportDefault({
  notify
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"storage":{"hooks.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/storage/hooks.ts                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  useStorageKey: () => useStorageKey
});
let useEffect, useMemo, useState;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
let Local;
module.link("./local", {
  default(v) {
    Local = v;
  }
}, 1);
let Session;
module.link("./session", {
  default(v) {
    Session = v;
  }
}, 2);
let InMemory;
module.link("./in-memory", {
  default(v) {
    InMemory = v;
  }
}, 3);
const STORAGES = {
  LOCAL: 'local',
  SESSION: 'session',
  IN_MEMORY: 'in-memory'
};
/**
 * Observer hook for a specific storage key.
 * @param key Key
 * @param storage Which storage to use. The default is `in-memory`.
 * @returns Last key value.
 */
const useStorageKey = (key, storage) => {
  const source = useMemo(() => {
    let source;
    switch (storage) {
      case STORAGES.LOCAL:
        {
          source = Local;
          break;
        }
      case STORAGES.SESSION:
        {
          source = Session;
          break;
        }
      case STORAGES.IN_MEMORY:
      default:
        {
          source = InMemory;
          break;
        }
    }
    return source;
  }, [storage]);
  const [value, setValue] = useState(source.getItem(key));
  useEffect(() => {
    const observer = newValue => {
      setValue(newValue);
    };
    source.registerObserver(key, observer);
    return () => {
      source.revokeObserver(key, observer);
    };
  }, [source, key]);
  return value;
};
module.exportDefault({
  useStorageKey
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"in-memory.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/storage/in-memory.ts                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let ObservableStorage;
module.link("./observable", {
  default(v) {
    ObservableStorage = v;
  }
}, 0);
class InMemoryStorage {
  constructor() {
    this.store = void 0;
    this.store = new Map();
  }
  get length() {
    return this.store.size;
  }
  clear() {
    this.store.clear();
  }
  getItem(key) {
    var _this$store$get;
    return (_this$store$get = this.store.get(key)) !== null && _this$store$get !== void 0 ? _this$store$get : null;
  }
  key(index) {
    var _Array$from$at;
    return (_Array$from$at = Array.from(this.store.keys()).at(index)) !== null && _Array$from$at !== void 0 ? _Array$from$at : null;
  }
  removeItem(key) {
    this.store.delete(key);
  }
  setItem(key, value) {
    this.store.set(key, value);
  }
}
const singleton = new ObservableStorage(new InMemoryStorage());
module.exportDefault(singleton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/storage/index.ts                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  getStorageSingletonInstance: () => getStorageSingletonInstance
});
let Local;
module.link("./local", {
  default(v) {
    Local = v;
  }
}, 0);
let Session;
module.link("./session", {
  default(v) {
    Session = v;
  }
}, 1);
let StorageSingleton = null;
const getStorageSingletonInstance = () => {
  const APP_CONFIG = window.meetingClientSettings.public.app;
  if (!StorageSingleton) {
    StorageSingleton = APP_CONFIG.userSettingsStorage === 'local' ? Local : Session;
  }
  return StorageSingleton;
};
module.exportDefault(getStorageSingletonInstance);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"local.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/storage/local.ts                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let ObservableStorage;
module.link("./observable", {
  default(v) {
    ObservableStorage = v;
  }
}, 0);
const singleton = new ObservableStorage(window.localStorage, 'BBB');
module.exportDefault(singleton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"observable.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/storage/observable.ts                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => ObservableStorage
});
let isString, isEqual;
module.link("radash", {
  isString(v) {
    isString = v;
  },
  isEqual(v) {
    isEqual = v;
  }
}, 0);
class ObservableStorage {
  constructor(storage) {
    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    this.observers = void 0;
    this.prefix = void 0;
    this.storage = void 0;
    this.observers = {};
    this.prefix = prefix;
    this.storage = storage;
  }
  registerObserver(key, observer) {
    const prefixedKey = this.prefixedKey(key);
    this.ensureDeps(prefixedKey);
    this.observers[prefixedKey].add(observer);
    if (typeof observer === 'function') {
      observer(this.getItem(key));
    }
  }
  revokeObserver(key, observer) {
    const prefixedKey = this.prefixedKey(key);
    this.ensureDeps(prefixedKey);
    this.observers[prefixedKey].delete(observer);
  }
  ensureDeps(key) {
    if (!(this.observers[key] instanceof Set)) {
      this.observers[key] = new Set();
    }
  }
  prefixedKey(key) {
    const unprefixedKey = key.replace(this.prefix, '');
    return "".concat(this.prefix).concat(unprefixedKey);
  }
  key(n) {
    return this.storage.key(n);
  }
  getItem(key) {
    const prefixedKey = this.prefixedKey(key);
    let value = this.storage.getItem(prefixedKey);
    if (value && isString(value)) {
      try {
        value = JSON.parse(value);
      } catch (e) {
        // Do nothing, keep the value as-is
      }
    }
    return value;
  }
  setItem(key, value) {
    const prefixedKey = this.prefixedKey(key);
    this.ensureDeps(prefixedKey);
    let stringifiedValue;
    if (isString(value)) {
      stringifiedValue = value;
    } else {
      stringifiedValue = JSON.stringify(value);
    }
    this.storage.setItem(prefixedKey, stringifiedValue);
    this.observers[prefixedKey].forEach(observer => {
      if (typeof observer === 'function') {
        observer(value);
      }
    });
  }
  removeItem(key) {
    const prefixedKey = this.prefixedKey(key);
    this.storage.removeItem(prefixedKey);
    if (!this.observers[prefixedKey]) return;
    this.observers[prefixedKey].forEach(observer => {
      if (typeof observer === 'function') {
        observer(null);
      }
    });
  }
  clear() {
    Object.keys(this.observers).forEach(key => {
      this.removeItem(key);
    });
  }
  equals(key, value) {
    return isEqual(this.getItem(key), value);
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"session.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/storage/session.ts                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let ObservableStorage;
module.link("./observable", {
  default(v) {
    ObservableStorage = v;
  }
}, 0);
const singleton = new ObservableStorage(window.sessionStorage, 'BBB_');
module.exportDefault(singleton);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"users-settings":{"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/users-settings/index.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => getFromUserSettings
});
let localUserSettings;
module.link("../../core/local-states/useUserSettings", {
  localUserSettings(v) {
    localUserSettings = v;
  }
}, 0);
function getFromUserSettings(setting, defaultValue) {
  const userSetting = localUserSettings()[setting];
  if (userSetting !== undefined) {
    return userSetting;
  }
  return defaultValue;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"virtual-background":{"TimeWorker.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/virtual-background/TimeWorker.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  SET_TIMEOUT: () => SET_TIMEOUT,
  CLEAR_TIMEOUT: () => CLEAR_TIMEOUT,
  TIMEOUT_TICK: () => TIMEOUT_TICK,
  timerWorkerScript: () => timerWorkerScript
});
const SET_TIMEOUT = 1;
const CLEAR_TIMEOUT = 2;
const TIMEOUT_TICK = 3;
/**
 * The following code is needed as string to create a URL from a Blob.
 * The URL is then passed to a WebWorker. Reason for this is to enable
 * use of setInterval that is not throttled when tab is inactive.
 */
const code = "\n     var timer;\n     onmessage = function(request) {\n         switch (request.data.id) {\n         case ".concat(SET_TIMEOUT, ": {\n             timer = setTimeout(() => {\n                 postMessage({ id: ").concat(TIMEOUT_TICK, " });\n             }, request.data.timeMs);\n             break;\n         }\n         case ").concat(CLEAR_TIMEOUT, ": {\n             if (timer) {\n                 clearTimeout(timer);\n             }\n             break;\n         }\n         }\n     };\n ");
const timerWorkerScript = URL.createObjectURL(new Blob([code], {
  type: 'application/javascript'
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/virtual-background/index.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  createVirtualBackgroundService: () => createVirtualBackgroundService
});
let CLEAR_TIMEOUT, TIMEOUT_TICK, SET_TIMEOUT, timerWorkerScript;
module.link("./TimeWorker", {
  CLEAR_TIMEOUT(v) {
    CLEAR_TIMEOUT = v;
  },
  TIMEOUT_TICK(v) {
    TIMEOUT_TICK = v;
  },
  SET_TIMEOUT(v) {
    SET_TIMEOUT = v;
  },
  timerWorkerScript(v) {
    timerWorkerScript = v;
  }
}, 0);
let getBasePath, MODELS, getVirtualBgImagePath;
module.link("/imports/ui/services/virtual-background/service", {
  getBasePath(v) {
    getBasePath = v;
  },
  MODELS(v) {
    MODELS = v;
  },
  getVirtualBgImagePath(v) {
    getVirtualBgImagePath = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
let simd;
module.link("wasm-feature-detect", {
  simd(v) {
    simd = v;
  }
}, 3);
const blurValue = '25px';
function drawImageProp(ctx, img, x, y, w, h, offsetX, offsetY) {
  if (arguments.length === 2) {
    x = y = 0;
    w = ctx.canvas.width;
    h = ctx.canvas.height;
  }

  // Default offset is center
  offsetX = typeof offsetX === 'number' ? offsetX : 0.5;
  offsetY = typeof offsetY === 'number' ? offsetY : 0.5;

  // Keep bounds [0.0, 1.0]
  if (offsetX < 0) offsetX = 0;
  if (offsetY < 0) offsetY = 0;
  if (offsetX > 1) offsetX = 1;
  if (offsetY > 1) offsetY = 1;
  const iw = img.width,
    ih = img.height,
    r = Math.min(w / iw, h / ih);
  let nw = iw * r,
    nh = ih * r,
    cx,
    cy,
    cw,
    ch,
    ar = 1;

  // Decide which gap to fill
  if (nw < w) ar = w / nw;
  if (Math.abs(ar - 1) < 1e-14 && nh < h) ar = h / nh;
  nw *= ar;
  nh *= ar;

  // Calc source rectangle
  cw = iw / (nw / w);
  ch = ih / (nh / h);
  cx = (iw - cw) * offsetX;
  cy = (ih - ch) * offsetY;

  // Make sure source rectangle is valid
  if (cx < 0) cx = 0;
  if (cy < 0) cy = 0;
  if (cw > iw) cw = iw;
  if (ch > ih) ch = ih;
  ctx.drawImage(img, cx, cy, cw, ch, x, y, w, h);
}
class VirtualBackgroundService {
  constructor(model, options) {
    this._model = void 0;
    this._options = void 0;
    this._segmentationMask = void 0;
    this._inputVideoElement = void 0;
    this._outputCanvasElement = void 0;
    this._segmentationMask = void 0;
    this._segmentationPixelCount = void 0;
    this._segmentationMaskCanvas = void 0;
    this._segmentationMaskCtx = void 0;
    this._virtualImage = void 0;
    this._maskFrameTimerWorker = void 0;
    this._model = model;
    this._options = options;
    this._options.brightness = 100;
    this._options.wholeImageBrightness = false;
    if (this._options.virtualBackground.backgroundType === 'image') {
      this._virtualImage = document.createElement('img');
      this._virtualImage.crossOrigin = 'anonymous';
      this._virtualImage.src = this._options.virtualBackground.virtualSource;
    }
    this._segmentationPixelCount = this._options.width * this._options.height;

    // Bind event handler so it is only bound once for every instance.
    this._onMaskFrameTimer = this._onMaskFrameTimer.bind(this);
    this._outputCanvasElement = document.createElement('canvas');
    this._outputCanvasElement.getContext('2d');
    this._inputVideoElement = document.createElement('video');
  }

  /**
   * EventHandler onmessage for the maskFrameTimerWorker WebWorker.
   * @param {EventHandler} response - The onmessage EventHandler parameter.
   * @returns {void}
   */
  _onMaskFrameTimer(response) {
    if (response.data.id === TIMEOUT_TICK) {
      this._renderMask();
    }
  }

  /**
   * Represents the run post processing.
   *
   * @returns {void}
   */
  runPostProcessing() {
    this._outputCanvasCtx.globalCompositeOperation = 'copy';

    // Draw segmentation mask.
    //

    // Smooth out the edges.
    if (this._options.virtualBackground.isVirtualBackground) {
      this._outputCanvasCtx.filter = 'blur(4px)';
    } else if (this._options.virtualBackground.backgroundType === 'blur') {
      this._outputCanvasCtx.filter = 'blur(8px)';
    }
    this._outputCanvasCtx.drawImage(this._segmentationMaskCanvas, 0, 0, this._options.width, this._options.height, 0, 0, this._inputVideoElement.width, this._inputVideoElement.height);
    this._outputCanvasCtx.globalCompositeOperation = 'source-in';
    this._outputCanvasCtx.filter = 'none';

    // Draw the foreground video.
    //

    this._outputCanvasCtx.filter = "brightness(".concat(this._options.brightness, "%)");
    this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);
    this._outputCanvasCtx.filter = 'none';

    // Draw the background.
    //

    if (this._options.wholeImageBrightness) {
      this._outputCanvasCtx.filter = "brightness(".concat(this._options.brightness, "%)");
    }
    this._outputCanvasCtx.globalCompositeOperation = 'destination-over';
    if (this._options.virtualBackground.isVirtualBackground) {
      drawImageProp(this._outputCanvasCtx, this._virtualImage, 0, 0, this._inputVideoElement.width, this._inputVideoElement.height, 0.5, 0.5);
    } else if (this._options.virtualBackground.backgroundType === 'blur') {
      this._outputCanvasCtx.filter = "blur(".concat(blurValue, ")");
      this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);
    } else {
      this._outputCanvasCtx.drawImage(this._inputVideoElement, 0, 0);
    }
  }

  /**
   * Represents the run Tensorflow Interference.
   *
   * @returns {void}
   */
  runInference() {
    this._model._runInference();
    const outputMemoryOffset = this._model._getOutputMemoryOffset() / 4;
    for (let i = 0; i < this._segmentationPixelCount; i++) {
      const background = this._model.HEAPF32[outputMemoryOffset + i * 2];
      const person = this._model.HEAPF32[outputMemoryOffset + i * 2 + 1];
      const shift = Math.max(background, person);
      const backgroundExp = Math.exp(background - shift);
      const personExp = Math.exp(person - shift);

      // Sets only the alpha component of each pixel.
      this._segmentationMask.data[i * 4 + 3] = 255 * personExp / (backgroundExp + personExp);
    }
    this._segmentationMaskCtx.putImageData(this._segmentationMask, 0, 0);
  }

  /**
   * Loop function to render the background mask.
   *
   * @private
   * @returns {void}
   */
  _renderMask() {
    try {
      this.resizeSource();
      this.runInference();
      this.runPostProcessing();
    } catch (error) {
      // TODO This is a high frequency log so that's why it's debug level.
      // Should be reviewed later when the actual problem with runPostProcessing
      // throwing on stalled pages/iframes - prlanzarin Jun 30 2022
      logger.debug({
        logCode: 'virtualbg_renderMask_failure',
        extraInfo: {
          errorMessage: error.message,
          errorCode: error.code,
          errorName: error.name
        }
      }, "Virtual background renderMask failed: ".concat(error.message || error.name));
    }
    this._maskFrameTimerWorker.postMessage({
      id: SET_TIMEOUT,
      timeMs: 1000 / 30
    });
  }

  /**
   * Represents the resize source process.
   *
   * @returns {void}
   */
  resizeSource() {
    this._segmentationMaskCtx.drawImage(this._inputVideoElement, 0, 0, this._inputVideoElement.width, this._inputVideoElement.height, 0, 0, this._options.width, this._options.height);
    const imageData = this._segmentationMaskCtx.getImageData(0, 0, this._options.width, this._options.height);
    const inputMemoryOffset = this._model._getInputMemoryOffset() / 4;
    for (let i = 0; i < this._segmentationPixelCount; i++) {
      this._model.HEAPF32[inputMemoryOffset + i * 3] = imageData.data[i * 4] / 255;
      this._model.HEAPF32[inputMemoryOffset + i * 3 + 1] = imageData.data[i * 4 + 1] / 255;
      this._model.HEAPF32[inputMemoryOffset + i * 3 + 2] = imageData.data[i * 4 + 2] / 255;
    }
  }
  changeBackgroundImage() {
    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    const virtualBackgroundImagePath = getVirtualBgImagePath();
    let name = '';
    let type = 'blur';
    let isVirtualBackground = false;
    if (parameters != null && Object.keys(parameters).length > 0) {
      name = parameters.name;
      type = parameters.type;
      isVirtualBackground = parameters.isVirtualBackground;
    }
    this._options.virtualBackground.virtualSource = virtualBackgroundImagePath + name;
    this._options.virtualBackground.backgroundType = type;
    this._options.virtualBackground.isVirtualBackground = isVirtualBackground;
    if (this._options.virtualBackground.backgroundType === 'image') {
      this._virtualImage = document.createElement('img');
      this._virtualImage.crossOrigin = 'anonymous';
      this._virtualImage.src = virtualBackgroundImagePath + name;
    }
    if (parameters.customParams) {
      this._virtualImage.src = parameters.customParams.file;
    }
  }

  /**
   * Starts loop to capture video frame and render the segmentation mask.
   *
   * @param {MediaStream} stream - Stream to be used for processing.
   * @returns {MediaStream} - The stream with the applied effect.
   */
  startEffect(stream) {
    this._maskFrameTimerWorker = new Worker(timerWorkerScript, {
      name: 'Blur effect worker'
    });
    this._maskFrameTimerWorker.onmessage = this._onMaskFrameTimer;
    const firstVideoTrack = stream.getVideoTracks()[0];
    const {
      height,
      frameRate,
      width
    } = firstVideoTrack.getSettings ? firstVideoTrack.getSettings() : firstVideoTrack.getConstraints();
    this._segmentationMask = new ImageData(this._options.width, this._options.height);
    this._segmentationMaskCanvas = document.createElement('canvas');
    this._segmentationMaskCanvas.width = this._options.width;
    this._segmentationMaskCanvas.height = this._options.height;
    this._segmentationMaskCtx = this._segmentationMaskCanvas.getContext('2d');
    this._outputCanvasElement.width = parseInt(width, 10);
    this._outputCanvasElement.height = parseInt(height, 10);
    this._outputCanvasCtx = this._outputCanvasElement.getContext('2d');
    this._inputVideoElement.width = parseInt(width, 10);
    this._inputVideoElement.height = parseInt(height, 10);
    this._inputVideoElement.autoplay = true;
    this._inputVideoElement.srcObject = stream;
    this._inputVideoElement.onloadeddata = () => {
      this._maskFrameTimerWorker.postMessage({
        id: SET_TIMEOUT,
        timeMs: 1000 / 30
      });
    };
    return this._outputCanvasElement.captureStream(parseInt(frameRate, 15));
  }

  /**
   * Stops the capture and render loop.
   *
   * @returns {void}
   */
  stopEffect() {
    this._maskFrameTimerWorker.postMessage({
      id: CLEAR_TIMEOUT
    });
    this._maskFrameTimerWorker.terminate();
  }
  set brightness(value) {
    this._options.brightness = value;
  }
  get brightness() {
    return this._options.brightness;
  }
  set wholeImageBrightness(value) {
    this._options.wholeImageBrightness = value;
  }
  get wholeImageBrightness() {
    return this._options.wholeImageBrightness;
  }
}

/**
 * Creates VirtualBackgroundService. If parameters are empty, the default
 * effect is blur. Parameters (if given) must contain the following:
 * isVirtualBackground (boolean) - false for blur, true for image
 * backgroundType (string) - 'image' for image, anything else for blur
 * backgroundFilename (string) - File name that is stored in /public/resources/images/virtual-backgrounds/
 * @param {Object} parameters
 * @returns {VirtualBackgroundService}
 */
async function createVirtualBackgroundService() {
  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  let tflite;
  let modelResponse;
  const simdSupported = await simd();
  const BASE_PATH = getBasePath();
  if (simdSupported) {
    tflite = await window.createTFLiteSIMDModule();
    modelResponse = await fetch(BASE_PATH + MODELS.model144.path);
  } else {
    tflite = await window.createTFLiteModule();
    modelResponse = await fetch(BASE_PATH + MODELS.model96.path);
  }
  const modelBufferOffset = tflite._getModelBufferMemoryOffset();
  const virtualBackgroundImagePath = getVirtualBgImagePath();
  if (parameters == null) {
    parameters = {};
    parameters.virtualSource = virtualBackgroundImagePath + '';
    parameters.backgroundType = 'blur';
    parameters.isVirtualBackground = false;
  } else {
    if (parameters.customParams) {
      parameters.virtualSource = parameters.customParams.file;
    } else {
      parameters.virtualSource = virtualBackgroundImagePath + parameters.backgroundFilename;
    }
  }
  if (!modelResponse.ok) {
    throw new Error('Failed to download tflite model!');
  }
  const model = await modelResponse.arrayBuffer();
  tflite.HEAPU8.set(new Uint8Array(model), modelBufferOffset);
  tflite._loadModel(model.byteLength);
  const options = _objectSpread(_objectSpread({}, simdSupported ? MODELS.model144.segmentationDimensions : MODELS.model96.segmentationDimensions), {}, {
    virtualBackground: parameters
  });
  return new VirtualBackgroundService(tflite, options);
}
module.exportDefault(VirtualBackgroundService);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/virtual-background/service.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  getBasePath: () => getBasePath,
  getImageNames: () => getImageNames,
  MODELS: () => MODELS,
  BLUR_FILENAME: () => BLUR_FILENAME,
  EFFECT_TYPES: () => EFFECT_TYPES,
  setSessionVirtualBackgroundInfo: () => setSessionVirtualBackgroundInfo,
  getSessionVirtualBackgroundInfo: () => getSessionVirtualBackgroundInfo,
  getSessionVirtualBackgroundInfoWithDefault: () => getSessionVirtualBackgroundInfoWithDefault,
  removeSessionVirtualBackgroundInfo: () => removeSessionVirtualBackgroundInfo,
  isVirtualBackgroundSupported: () => isVirtualBackgroundSupported,
  createVirtualBackgroundStream: () => createVirtualBackgroundStream,
  getVirtualBackgroundThumbnail: () => getVirtualBackgroundThumbnail,
  getVirtualBgImagePath: () => getVirtualBgImagePath
});
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 0);
let browserInfo;
module.link("/imports/utils/browserInfo", {
  default(v) {
    browserInfo = v;
  }
}, 1);
let createVirtualBackgroundService;
module.link("/imports/ui/services/virtual-background", {
  createVirtualBackgroundService(v) {
    createVirtualBackgroundService = v;
  }
}, 2);
let getStorageSingletonInstance;
module.link("/imports/ui/services/storage", {
  getStorageSingletonInstance(v) {
    getStorageSingletonInstance = v;
  }
}, 3);
const BLUR_FILENAME = 'blur.jpg';
const EFFECT_TYPES = {
  BLUR_TYPE: 'blur',
  IMAGE_TYPE: 'image',
  NONE_TYPE: 'none'
};
const MODELS = {
  model96: {
    path: '/resources/tfmodels/segm_lite_v681.tflite',
    segmentationDimensions: {
      height: 96,
      width: 160
    }
  },
  model144: {
    path: '/resources/tfmodels/segm_full_v679.tflite',
    segmentationDimensions: {
      height: 144,
      width: 256
    }
  }
};
const getBasePath = () => {
  const BASE_PATH = window.meetingClientSettings.public.app.cdn + window.meetingClientSettings.public.app.basename + window.meetingClientSettings.public.app.instanceId;
  return BASE_PATH;
};
const getThumbnailsPath = () => {
  const {
    thumbnailsPath: THUMBNAILS_PATH = '/resources/images/virtual-backgrounds/thumbnails/'
  } = window.meetingClientSettings.public.virtualBackgrounds;
  return THUMBNAILS_PATH;
};
const getImageNames = () => {
  const {
    fileNames: IMAGE_NAMES = ['home.jpg', 'coffeeshop.jpg', 'board.jpg']
  } = window.meetingClientSettings.public.virtualBackgrounds;
  return IMAGE_NAMES;
};
const getIsStoredOnBBB = () => {
  const {
    storedOnBBB: IS_STORED_ON_BBB = true
  } = window.meetingClientSettings.public.virtualBackgrounds;
  return IS_STORED_ON_BBB;
};
const createVirtualBackgroundStream = (type, name, isVirtualBackground, stream, customParams) => {
  const buildParams = {
    backgroundType: type,
    backgroundFilename: name,
    isVirtualBackground,
    customParams
  };
  return createVirtualBackgroundService(buildParams).then(service => {
    const effect = service.startEffect(stream);
    return {
      service,
      effect
    };
  });
};
const getVirtualBackgroundThumbnail = name => {
  if (name === BLUR_FILENAME) {
    return "".concat(getBasePath(), "/resources/images/virtual-backgrounds/thumbnails/").concat(name);
  }
  return (getIsStoredOnBBB() ? getBasePath() : '') + getThumbnailsPath() + name;
};

// Stores the last chosen camera effect into the session storage in the following format:
// {
//   type: <EFFECT_TYPES>,
//   name: effect filename, if any
// }
const setSessionVirtualBackgroundInfo = function (deviceId, type, name) {
  let uniqueId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  getStorageSingletonInstance().setItem("VirtualBackgroundInfo_".concat(deviceId), {
    type,
    name,
    uniqueId
  });
};
const getSessionVirtualBackgroundInfo = deviceId => getStorageSingletonInstance().getItem("VirtualBackgroundInfo_".concat(deviceId)) || {
  type: EFFECT_TYPES.NONE_TYPE
};
const getSessionVirtualBackgroundInfoWithDefault = deviceId => getStorageSingletonInstance().getItem("VirtualBackgroundInfo_".concat(deviceId)) || {
  type: EFFECT_TYPES.BLUR_TYPE,
  name: BLUR_FILENAME
};
const removeSessionVirtualBackgroundInfo = deviceId => getStorageSingletonInstance().removeItem("VirtualBackgroundInfo_".concat(deviceId));
const isVirtualBackgroundSupported = () => !(deviceInfo.isIos || browserInfo.isSafari);
const getVirtualBgImagePath = () => {
  const {
    imagesPath: IMAGES_PATH = '/resources/images/virtual-backgrounds/'
  } = window.meetingClientSettings.public.virtualBackgrounds;
  return (getIsStoredOnBBB() ? getBasePath() : '') + IMAGES_PATH;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"webrtc-base":{"bbb-video-stream.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/webrtc-base/bbb-video-stream.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => BBBVideoStream
});
let EFFECT_TYPES, BLUR_FILENAME, createVirtualBackgroundStream;
module.link("/imports/ui/services/virtual-background/service", {
  EFFECT_TYPES(v) {
    EFFECT_TYPES = v;
  },
  BLUR_FILENAME(v) {
    BLUR_FILENAME = v;
  },
  createVirtualBackgroundStream(v) {
    createVirtualBackgroundStream = v;
  }
}, 0);
let MediaStreamUtils;
module.link("/imports/utils/media-stream-utils", {
  default(v) {
    MediaStreamUtils = v;
  }
}, 1);
let EventEmitter2;
module.link("eventemitter2", {
  EventEmitter2(v) {
    EventEmitter2 = v;
  }
}, 2);
class BBBVideoStream extends EventEmitter2 {
  static isVirtualBackground(type) {
    return type === EFFECT_TYPES.IMAGE_TYPE;
  }
  static trackStreamTermination(stream, handler) {
    const _handler = () => {
      handler({
        id: stream === null || stream === void 0 ? void 0 : stream.id
      });
    };

    // Dirty, but effective way of checking whether the browser supports the 'inactive'
    // event. If the oninactive interface is null, it can be overridden === supported.
    // If undefined, it's not; so we fallback to the track 'ended' event.
    // The track ended listener should probably be reviewed once we create
    // thin wrapper classes for MediaStreamTracks as well, because we'll want a single
    // media stream holding multiple tracks in the future
    if (stream.oninactive === null) {
      stream.addEventListener('inactive', _handler, {
        once: true
      });
    } else {
      const track = MediaStreamUtils.getVideoTracks(stream)[0];
      if (track) {
        track.addEventListener('ended', _handler, {
          once: true
        });
        // Extra safeguard: Firefox doesn't fire the 'ended' when it should
        // but it invokes the callback (?), so hook up to both
        track.onended = _handler;
      }
    }
  }
  constructor(mediaStream) {
    super();
    this.mediaStream = mediaStream;
    this.originalStream = mediaStream;
    this.effect = null;
    this.virtualBgEnabled = false;
    this.virtualBgService = null;
    this.virtualBgType = EFFECT_TYPES.NONE_TYPE;
    this.virtualBgName = BLUR_FILENAME;
    this.virtualBgUniqueId = null;
    this._trackOriginalStreamTermination();
  }
  set mediaStream(mediaStream) {
    if (!this.mediaStream || mediaStream == null || mediaStream.id !== this.mediaStream.id) {
      const oldStream = this.mediaStream;
      this._mediaStream = mediaStream;
      this.emit('streamSwapped', {
        oldStream,
        newStream: this.mediaStream
      });
    }
  }
  get mediaStream() {
    return this._mediaStream;
  }
  set virtualBgService(service) {
    this._virtualBgService = service;
  }
  get virtualBgService() {
    return this._virtualBgService;
  }
  _trackOriginalStreamTermination() {
    const notify = _ref => {
      let {
        id
      } = _ref;
      this.emit('inactive', {
        id
      });
    };
    BBBVideoStream.trackStreamTermination(this.originalStream, notify);
  }
  _changeVirtualBackground(type, name, customParams) {
    try {
      this.virtualBgService.changeBackgroundImage({
        type,
        name,
        isVirtualBackground: BBBVideoStream.isVirtualBackground(type),
        customParams
      });
      this.virtualBgType = type;
      this.virtualBgName = name;
      this.virtualBgUniqueId = customParams === null || customParams === void 0 ? void 0 : customParams.uniqueId;
      return Promise.resolve();
    } catch (error) {
      return Promise.reject(error);
    }
  }
  startVirtualBackground(type) {
    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    let customParams = arguments.length > 2 ? arguments[2] : undefined;
    if (this.virtualBgService) return this._changeVirtualBackground(type, name, customParams);
    return createVirtualBackgroundStream(type, name, BBBVideoStream.isVirtualBackground(type), this.mediaStream, customParams).then(_ref2 => {
      let {
        service,
        effect
      } = _ref2;
      this.virtualBgService = service;
      this.virtualBgType = type;
      this.virtualBgName = name;
      this.virtualBgUniqueId = customParams === null || customParams === void 0 ? void 0 : customParams.uniqueId;
      this.originalStream = this.mediaStream;
      this.mediaStream = effect;
      this.isVirtualBackgroundEnabled = true;
    });
  }
  changeCameraBrightness(brightness) {
    if (!this.virtualBgService) return;
    this.virtualBgService.brightness = brightness;
  }
  toggleCameraBrightnessArea(value) {
    if (!this.virtualBgService) return;
    this.virtualBgService.wholeImageBrightness = value;
  }
  stopVirtualBackground() {
    if (this.virtualBgService != null) {
      this.virtualBgService.stopEffect();
      this.virtualBgService = null;
    }
    this.virtualBgType = EFFECT_TYPES.NONE_TYPE;
    this.virtualBgName = undefined;
    this.virtualBgUniqueId = null;
    this.mediaStream = this.originalStream;
    this.isVirtualBackgroundEnabled = false;
  }
  stop() {
    if (this.isVirtualBackgroundEnabled) {
      this.stopVirtualBackground();
    }
    MediaStreamUtils.stopMediaStreamTracks(this.mediaStream);
    this.originalStream = null;
    this.mediaStream = null;
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"local-pc-loopback.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/webrtc-base/local-pc-loopback.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => LocalPCLoopback
});
let MediaStreamUtils;
module.link("/imports/utils/media-stream-utils", {
  default(v) {
    MediaStreamUtils = v;
  }
}, 0);
class LocalPCLoopback {
  constructor(constraints) {
    this.constraints = constraints;
    this.inputStream = null;
    this.localPC = null;
    this.loopbackPC = null;
    this.loopbackStream = new MediaStream();
  }
  _initializeLocalPC() {
    this.localPC = new RTCPeerConnection();
    this.localPC.onicecandidate = _ref => {
      let {
        candidate
      } = _ref;
      if (candidate && this.loopbackPC) {
        this.loopbackPC.addIceCandidate(new RTCIceCandidate(candidate));
      }
    };
    this.inputStream.getTracks().forEach(track => this.localPC.addTrack(track, this.inputStream));
  }
  _initializeLoopbackPC() {
    this.loopbackPC = new RTCPeerConnection();
    this.loopbackPC.onicecandidate = _ref2 => {
      let {
        candidate
      } = _ref2;
      if (candidate && this.localPC) {
        this.localPC.addIceCandidate(new RTCIceCandidate(candidate));
      }
    };
    this.loopbackPC.ontrack = _ref3 => {
      let {
        streams
      } = _ref3;
      streams.forEach(stream => {
        stream.getTracks().forEach(track => this.loopbackStream.addTrack(track));
      });
    };
  }
  _replaceInputStream(inputStream) {
    let replaced = false;
    if (this.localPC == null || inputStream == null || !(inputStream !== null && inputStream !== void 0 && inputStream.active)) {
      return Promise.resolve(this.loopbackStream);
    }
    const newTracks = {
      audio: inputStream.getAudioTracks(),
      video: inputStream.getVideoTracks()
    };
    this.localPC.getSenders().forEach((sender, index) => {
      if (sender.track) {
        const {
          kind
        } = sender.track;
        if (this.constraints[kind]) {
          const newTrack = newTracks[kind][index];
          if (newTrack == null) return;
          sender.replaceTrack(newTrack);
          replaced = true;
        }
      }
    });
    if (replaced) this.inputStream = inputStream;
    return Promise.resolve(this.loopbackStream);
  }
  async start(inputStream) {
    if (inputStream == null || !(inputStream !== null && inputStream !== void 0 && inputStream.active)) throw new TypeError('Invalid input stream');
    if (this.localPC && this.loopbackPC) return this._replaceInputStream(inputStream);
    this.inputStream = inputStream;
    const nOptions = {
      offerAudio: this.constraints.audio,
      offerVideo: this.constraints.video,
      offerToReceiveAudio: false,
      offerToReceiveVideo: false
    };
    try {
      this._initializeLocalPC();
      this._initializeLoopbackPC();
      const offer = await this.localPC.createOffer(nOptions);
      await this.localPC.setLocalDescription(offer);
      await this.loopbackPC.setRemoteDescription(offer);
      const answer = await this.loopbackPC.createAnswer();
      await this.loopbackPC.setLocalDescription(answer);
      await this.localPC.setRemoteDescription(answer);
      return this.loopbackStream;
    } catch (error) {
      // Rollback
      this.stop();
      throw error;
    }
  }
  stop() {
    if (this.localPC) {
      this.localPC.close();
      this.localPC = null;
    }
    if (this.loopbackPC) {
      this.loopbackPC.close();
      this.loopbackPC = null;
    }
    if (this.loopbackStream) {
      MediaStreamUtils.stopMediaStreamTracks(this.loopbackStream);
      this.loopbackStream = null;
    }
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"peer.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/webrtc-base/peer.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => WebRtcPeer
});
let EventEmitter2;
module.link("eventemitter2", {
  EventEmitter2(v) {
    EventEmitter2 = v;
  }
}, 0);
let stopStream, stopTrack, silentConsole;
module.link("/imports/ui/services/webrtc-base/utils", {
  stopStream(v) {
    stopStream = v;
  },
  stopTrack(v) {
    stopTrack = v;
  },
  silentConsole(v) {
    silentConsole = v;
  }
}, 1);
class WebRtcPeer extends EventEmitter2 {
  constructor(mode) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    super({
      newListener: true
    });
    this.mode = mode;
    this.options = options;
    this.peerConnection = this.options.peerConnection;
    this.videoStream = this.options.videoStream;
    this.audioStream = this.options.audioStream;
    this.mediaConstraints = this.options.mediaConstraints;
    this.trace = this.options.trace;
    this.configuration = this.options.configuration;
    this.onicecandidate = this.options.onicecandidate;
    this.oncandidategatheringdone = this.options.oncandidategatheringdone;
    // this.networkPriorities: <{
    //  audio: <'very-low' | 'low' | 'medium' | 'high' | undefined>
    //  video: <'very-low' | 'low' | 'medium' | 'high' | undefined>
    // } | undefined >
    this.networkPriorities = this.options.networkPriorities;
    this.candidateGatheringDone = false;
    this._outboundCandidateQueue = [];
    this._inboundCandidateQueue = [];
    this._waitForGatheringPromise = null;
    this._waitForGatheringTimeout = null;
    this._handleIceCandidate = this._handleIceCandidate.bind(this);
    this._handleSignalingStateChange = this._handleSignalingStateChange.bind(this);
    this._gatheringTimeout = this.options.gatheringTimeout;
    this._assignOverrides();
  }
  _assignOverrides() {
    if (typeof this.onicecandidate === 'function') {
      this.on('icecandidate', this.onicecandidate);
    }
    if (typeof this.oncandidategatheringdone === 'function') {
      this.on('candidategatheringdone', this.oncandidategatheringdone);
    }
    if (typeof this.options.mediaStreamFactory === 'function') {
      this._mediaStreamFactory = this.options.mediaStreamFactory.bind(this);
    }
  }
  _processEncodingOptions() {
    var _this$peerConnection;
    (_this$peerConnection = this.peerConnection) === null || _this$peerConnection === void 0 ? void 0 : _this$peerConnection.getSenders().forEach(sender => {
      const {
        track
      } = sender;
      if (track) {
        // TODO: this is not ideal and a bit anti-spec. The correct thing to do
        // would be to set this in the transceiver creation via sendEncodings in
        // addTransceiver, but FF doesn't support that. So we should split this
        // between Chromium/WebKit (addTransceiver) and FF (this way) later - prlanzarin
        const parameters = sender.getParameters();
        // The encoder parameters might not be up yet; if that's the case,
        // add a filler object so we can alter the parameters anyways
        if (parameters.encodings == null || parameters.encodings.length === 0) {
          parameters.encodings = [{}];
        }
        parameters.encodings.forEach(encoding => {
          // networkPriority
          if (this.networkPriorities && this.networkPriorities[track.kind]) {
            // eslint-disable-next-line no-param-reassign
            encoding.networkPriority = this.networkPriorities[track.kind];
          }

          // Add further custom encoding parameters here
        });

        try {
          sender.setParameters(parameters);
        } catch (error) {
          this.logger.error('BBB::WebRtcPeer::_processEncodingOptions - setParameters failed', error);
        }
      }
    });
  }
  _flushInboundCandidateQueue() {
    while (this._inboundCandidateQueue.length) {
      const entry = this._inboundCandidateQueue.shift();
      if (entry.candidate && entry.promise) {
        try {
          if (this.isPeerConnectionClosed()) {
            entry.promise.resolve();
          } else {
            this.peerConnection.addIceCandidate(entry.candidate).then(entry.promise.resolve).catch(entry.promise.reject);
          }
        } catch (error) {
          entry.promise.reject(error);
        }
      }
    }
  }
  _trackQueueFlushEvents() {
    var _this$peerConnection2;
    this.on('newListener', event => {
      if (event === 'icecandidate' || event === 'candidategatheringdone') {
        while (this._outboundCandidateQueue.length) {
          const candidate = this._outboundCandidateQueue.shift();
          if (!candidate) this._emitCandidateGatheringDone();
        }
      }
    });
    (_this$peerConnection2 = this.peerConnection) === null || _this$peerConnection2 === void 0 ? void 0 : _this$peerConnection2.addEventListener('signalingstatechange', this._handleSignalingStateChange);
  }
  _emitCandidateGatheringDone() {
    if (!this.candidateGatheringDone) {
      this.emit('candidategatheringdone');
      this.candidateGatheringDone = true;
    }
  }
  _handleIceCandidate(_ref) {
    let {
      candidate
    } = _ref;
    if (this.hasListeners('icecandidate') || this.hasListeners('candidategatheringdone')) {
      if (candidate) {
        this.emit('icecandidate', candidate);
        this.candidateGatheringDone = false;
      } else this._emitCandidateGatheringDone();
    } else if (!this.candidateGatheringDone) {
      this._outboundCandidateQueue.push(candidate);
      if (!candidate) this.candidateGatheringDone = true;
    }
  }
  _handleSignalingStateChange() {
    var _this$peerConnection3;
    if (((_this$peerConnection3 = this.peerConnection) === null || _this$peerConnection3 === void 0 ? void 0 : _this$peerConnection3.signalingState) === 'stable') {
      this._flushInboundCandidateQueue();
    }
  }
  waitForGathering() {
    let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    if (timeout <= 0) return Promise.resolve();
    if (this.isPeerConnectionClosed()) throw new Error('PeerConnection is closed');
    if (this.peerConnection.iceGatheringState === 'complete') return Promise.resolve();
    if (this._waitForGatheringPromise) return this._waitForGatheringPromise;
    this._waitForGatheringPromise = new Promise(resolve => {
      this.once('candidategatheringdone', resolve);
      this._waitForGatheringTimeout = setTimeout(() => {
        this._emitCandidateGatheringDone();
      }, timeout);
    });
    return this._waitForGatheringPromise;
  }
  _setRemoteDescription(rtcSessionDescription) {
    if (this.isPeerConnectionClosed()) {
      this.logger.error('BBB::WebRtcPeer::_setRemoteDescription - peer connection closed');
      throw new Error('Peer connection is closed');
    }
    this.logger.debug('BBB::WebRtcPeer::_setRemoteDescription - setting remote description', rtcSessionDescription);
    return this.peerConnection.setRemoteDescription(rtcSessionDescription);
  }
  _setLocalDescription(rtcSessionDescription) {
    if (this.isPeerConnectionClosed()) {
      this.logger.error('BBB::WebRtcPeer::_setLocalDescription - peer connection closed');
      throw new Error('Peer connection is closed');
    }
    if (typeof this._gatheringTimeout === 'number' && this._gatheringTimeout > 0) {
      this.logger.debug('BBB::WebRtcPeer::_setLocalDescription - setting description with gathering timer', rtcSessionDescription, this._gatheringTimeout);
      return this.peerConnection.setLocalDescription(rtcSessionDescription).then(() => this.waitForGathering(this._gatheringTimeout));
    }
    this.logger.debug('BBB::WebRtcPeer::_setLocalDescription- setting description', rtcSessionDescription);
    return this.peerConnection.setLocalDescription(rtcSessionDescription);
  }

  // Public method can be overridden via options
  mediaStreamFactory() {
    if (this.videoStream || this.audioStream) {
      return Promise.resolve();
    }
    const handleGUMResolution = stream => {
      if (stream.getAudioTracks().length > 0) {
        this.audioStream = stream;
        this.logger.debug('BBB::WebRtcPeer::mediaStreamFactory - generated audio', this.audioStream);
      }
      if (stream.getVideoTracks().length > 0) {
        this.videoStream = stream;
        this.logger.debug('BBB::WebRtcPeer::mediaStreamFactory - generated video', this.videoStream);
      }
      return stream;
    };
    if (typeof this._mediaStreamFactory === 'function') {
      return this._mediaStreamFactory(this.mediaConstraints).then(handleGUMResolution);
    }
    this.logger.info('BBB::WebRtcPeer::mediaStreamFactory - running default factory', this.mediaConstraints);
    return navigator.mediaDevices.getUserMedia(this.mediaConstraints).then(handleGUMResolution).catch(error => {
      this.logger.error('BBB::WebRtcPeer::mediaStreamFactory - gUM failed', error);
      throw error;
    });
  }
  set peerConnection(pc) {
    this._pc = pc;
  }
  get peerConnection() {
    return this._pc;
  }
  get logger() {
    if (this.trace) return console;
    return silentConsole;
  }
  getLocalSessionDescriptor() {
    var _this$peerConnection4;
    return (_this$peerConnection4 = this.peerConnection) === null || _this$peerConnection4 === void 0 ? void 0 : _this$peerConnection4.localDescription;
  }
  getRemoteSessionDescriptor() {
    var _this$peerConnection5;
    return (_this$peerConnection5 = this.peerConnection) === null || _this$peerConnection5 === void 0 ? void 0 : _this$peerConnection5.remoteDescription;
  }
  getLocalStream() {
    if (this.peerConnection) {
      if (this.localStream == null) this.localStream = new MediaStream();
      const senders = this.peerConnection.getSenders();
      const oldTracks = this.localStream.getTracks();
      senders.forEach(_ref2 => {
        let {
          track
        } = _ref2;
        if (track && !oldTracks.includes(track)) {
          this.localStream.addTrack(track);
        }
      });
      oldTracks.forEach(oldTrack => {
        if (!senders.some(_ref3 => {
          let {
            track
          } = _ref3;
          return track && track.id === oldTrack.id;
        })) {
          this.localStream.removeTrack(oldTrack);
        }
      });
      return this.localStream;
    }
    return null;
  }
  getRemoteStream() {
    if (this.remoteStream) {
      return this.remoteStream;
    }
    if (this.peerConnection) {
      this.remoteStream = new MediaStream();
      this.peerConnection.getReceivers().forEach(_ref4 => {
        let {
          track
        } = _ref4;
        if (track) {
          this.remoteStream.addTrack(track);
        }
      });
      return this.remoteStream;
    }
    return null;
  }
  isPeerConnectionClosed() {
    return !this.peerConnection || this.peerConnection.signalingState === 'closed';
  }
  start() {
    // Init PeerConnection
    if (!this.peerConnection) {
      this.peerConnection = new RTCPeerConnection(this.configuration);
    }
    if (this.isPeerConnectionClosed()) {
      this.logger.trace('BBB::WebRtcPeer::start - peer connection closed');
      throw new Error('Invalid peer state: closed');
    }
    this.peerConnection.addEventListener('icecandidate', this._handleIceCandidate);
    this._trackQueueFlushEvents();
  }
  addIceCandidate(iceCandidate) {
    var _this$peerConnection6;
    const candidate = new RTCIceCandidate(iceCandidate);
    switch ((_this$peerConnection6 = this.peerConnection) === null || _this$peerConnection6 === void 0 ? void 0 : _this$peerConnection6.signalingState) {
      case 'closed':
        this.logger.trace('BBB::WebRtcPeer::addIceCandidate - peer connection closed');
        throw new Error('PeerConnection object is closed');
      case 'stable':
        {
          if (this.peerConnection.remoteDescription) {
            this.logger.debug('BBB::WebRtcPeer::addIceCandidate - adding candidate', candidate);
            return this.peerConnection.addIceCandidate(candidate);
          }
        }
      // eslint-ignore-next-line no-fallthrough
      default:
        {
          this.logger.debug('BBB::WebRtcPeer::addIceCandidate - buffering inbound candidate', candidate);
          const promise = new Promise();
          this._inboundCandidateQueue.push({
            candidate,
            promise
          });
          return promise;
        }
    }
  }
  async generateOffer() {
    switch (this.mode) {
      case 'recvonly':
        {
          const useAudio = this.mediaConstraints && (typeof this.mediaConstraints.audio === 'boolean' && this.mediaConstraints.audio || typeof this.mediaConstraints.audio === 'object');
          const useVideo = this.mediaConstraints && (typeof this.mediaConstraints.video === 'boolean' && this.mediaConstraints.video || typeof this.mediaConstraints.video === 'object');
          if (useAudio) {
            this.peerConnection.addTransceiver('audio', {
              direction: 'recvonly'
            });
          }
          if (useVideo) {
            this.peerConnection.addTransceiver('video', {
              direction: 'recvonly'
            });
          }
          break;
        }
      case 'sendonly':
      case 'sendrecv':
        {
          await this.mediaStreamFactory();
          if (this.videoStream) {
            this.videoStream.getTracks().forEach(track => {
              this.peerConnection.addTrack(track, this.videoStream);
            });
          }
          if (this.audioStream) {
            this.audioStream.getTracks().forEach(track => {
              this.peerConnection.addTrack(track, this.audioStream);
            });
          }
          this.peerConnection.getTransceivers().forEach(transceiver => {
            // eslint-disable-next-line no-param-reassign
            transceiver.direction = this.mode;
          });
          break;
        }
      default:
        break;
    }
    return this.peerConnection.createOffer().then(offer => {
      this.logger.debug('BBB::WebRtcPeer::generateOffer - created offer', offer);
      return this._setLocalDescription(offer);
    }).then(() => {
      this._processEncodingOptions();
      const localDescription = this.getLocalSessionDescriptor();
      this.logger.debug('BBB::WebRtcPeer::generateOffer - local description set', localDescription);
      return localDescription.sdp;
    });
  }
  processAnswer(sdp) {
    const answer = new RTCSessionDescription({
      type: 'answer',
      sdp
    });
    return this._setRemoteDescription(answer);
  }
  processOffer(sdp) {
    const offer = new RTCSessionDescription({
      type: 'offer',
      sdp
    });
    return this._setRemoteDescription(offer).then(async () => {
      if (this.mode === 'sendonly' || this.mode === 'sendrecv') {
        await this.mediaStreamFactory();
        if (this.videoStream) {
          this.videoStream.getTracks().forEach(track => {
            this.peerConnection.addTrack(track, this.videoStream);
          });
        }
        if (this.audioStream) {
          this.audioStream.getTracks().forEach(track => {
            this.peerConnection.addTrack(track, this.audioStream);
          });
        }
        this.peerConnection.getTransceivers().forEach(transceiver => {
          // eslint-disable-next-line no-param-reassign
          transceiver.direction = this.mode;
        });
      }
    }).then(() => this.peerConnection.createAnswer()).then(answer => {
      this.logger.debug('BBB::WebRtcPeer::processOffer - created answer', answer);
      return this._setLocalDescription(answer);
    }).then(() => {
      const localDescription = this.getLocalSessionDescriptor();
      this.logger.debug('BBB::WebRtcPeer::processOffer - local description set', localDescription.sdp);
      return localDescription.sdp;
    });
  }
  dispose() {
    this.logger.debug('BBB::WebRtcPeer::dispose');
    try {
      if (this.peerConnection) {
        this.peerConnection.getSenders().forEach(_ref5 => {
          let {
            track
          } = _ref5;
          return stopTrack(track);
        });
        if (!this.isPeerConnectionClosed()) this.peerConnection.close();
        this.peerConnection = null;
      }
      if (this.localStream) {
        stopStream(this.localStream);
        this.localStream = null;
      }
      if (this.remoteStream) {
        stopStream(this.remoteStream);
        this.remoteStream = null;
      }
      this._outboundCandidateQueue = [];
      this.candidateGatheringDone = false;
      if (this._waitForGatheringPromise) this._waitForGatheringPromise = null;
      if (this._waitForGatheringTimeout) {
        clearTimeout(this._waitForGatheringTimeout);
        this._waitForGatheringTimeout = null;
      }
    } catch (error) {
      this.logger.trace('BBB::WebRtcPeer::dispose - failed', error);
    }
    this.removeAllListeners();
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"utils.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/services/webrtc-base/utils.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  stopStream: () => stopStream,
  stopTrack: () => stopTrack,
  silentConsole: () => silentConsole
});
const stopTrack = track => {
  if (track && typeof track.stop === 'function' && track.readyState !== 'ended') {
    track.stop();
    // Manually emit the event as a safeguard; Firefox doesn't fire it when it
    // should with live MediaStreamTracks...
    const trackStoppedEvt = new MediaStreamTrackEvent('ended', {
      track
    });
    track.dispatchEvent(trackStoppedEvt);
  }
};
const stopStream = stream => {
  stream.getTracks().forEach(stopTrack);
};
const silentConsole = {
  log: () => {},
  info: () => {},
  error: () => {},
  warn: () => {},
  debug: () => {},
  trace: () => {},
  assert: () => {}
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"stylesheets":{"styled-components":{"breakpoints.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/stylesheets/styled-components/breakpoints.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  smallOnly: () => smallOnly,
  mediumOnly: () => mediumOnly,
  mediumUp: () => mediumUp,
  landscape: () => landscape,
  phoneLandscape: () => phoneLandscape,
  largeUp: () => largeUp,
  hasPhoneDimentions: () => hasPhoneDimentions,
  mediumDown: () => mediumDown,
  hasPhoneWidth: () => hasPhoneWidth
});
const smallOnly = 'only screen and (max-width: 40em)';
const mediumOnly = 'only screen and (min-width: 40.063em) and (max-width: 64em)';
const mediumUp = 'only screen and (min-width: 40.063em)';
const mediumDown = 'only screen and (max-width: 40.0629em)';
const landscape = "only screen and (orientation: landscape)";
const phoneLandscape = 'only screen and (max-width: 480px) and (orientation: landscape)';
const largeUp = 'only screen and (min-width: 64.063em)';
const hasPhoneDimentions = 'only screen and (max-height: 479px), only screen and (max-width: 479px)';
const hasPhoneWidth = 'only screen and (max-width: 479px)';
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"general.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/stylesheets/styled-components/general.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  borderSizeSmall: () => borderSizeSmall,
  borderSize: () => borderSize,
  borderSizeLarge: () => borderSizeLarge,
  borderRadius: () => borderRadius,
  smPaddingX: () => smPaddingX,
  smPaddingY: () => smPaddingY,
  mdPaddingX: () => mdPaddingX,
  mdPaddingY: () => mdPaddingY,
  lgPaddingX: () => lgPaddingX,
  lgPaddingY: () => lgPaddingY,
  jumboPaddingY: () => jumboPaddingY,
  jumboPaddingX: () => jumboPaddingX,
  whiteboardToolbarPadding: () => whiteboardToolbarPadding,
  whiteboardToolbarPaddingSm: () => whiteboardToolbarPaddingSm,
  minModalHeight: () => minModalHeight,
  descriptionMargin: () => descriptionMargin,
  navbarHeight: () => navbarHeight,
  barsPadding: () => barsPadding,
  pollHeaderOffset: () => pollHeaderOffset,
  toastContentWidth: () => toastContentWidth,
  modalMargin: () => modalMargin,
  titlePositionLeft: () => titlePositionLeft,
  userIndicatorsOffset: () => userIndicatorsOffset,
  indicatorPadding: () => indicatorPadding,
  actionsBarHeight: () => actionsBarHeight,
  audioIndicatorWidth: () => audioIndicatorWidth,
  audioIndicatorFs: () => audioIndicatorFs,
  chatPollMarginSm: () => chatPollMarginSm,
  talkerBorderRadius: () => talkerBorderRadius,
  talkerPaddingXsm: () => talkerPaddingXsm,
  talkerPaddingLg: () => talkerPaddingLg,
  talkerMaxWidth: () => talkerMaxWidth,
  talkerMarginSm: () => talkerMarginSm,
  spokeOpacity: () => spokeOpacity,
  talkerPaddingXl: () => talkerPaddingXl,
  toolbarButtonWidth: () => toolbarButtonWidth,
  toolbarButtonHeight: () => toolbarButtonHeight,
  toolbarItemOutlineOffset: () => toolbarItemOutlineOffset,
  toolbarButtonBorder: () => toolbarButtonBorder,
  toolbarButtonBorderRadius: () => toolbarButtonBorderRadius,
  toolbarItemTrianglePadding: () => toolbarItemTrianglePadding,
  toolbarMargin: () => toolbarMargin,
  whiteboardToolbarMargin: () => whiteboardToolbarMargin,
  fileLineWidth: () => fileLineWidth,
  iconPaddingMd: () => iconPaddingMd,
  statusIconSize: () => statusIconSize,
  toastMdMargin: () => toastMdMargin,
  toastMarginMobile: () => toastMarginMobile,
  uploadListHeight: () => uploadListHeight,
  modalInnerWidth: () => modalInnerWidth,
  statusInfoHeight: () => statusInfoHeight,
  itemActionsWidth: () => itemActionsWidth,
  uploadIconSize: () => uploadIconSize,
  iconLineHeight: () => iconLineHeight,
  innerToastWidth: () => innerToastWidth,
  toastIconSide: () => toastIconSide,
  pollStatsElementWidth: () => pollStatsElementWidth,
  pollSmMargin: () => pollSmMargin,
  pollMdMargin: () => pollMdMargin,
  pollResultWidth: () => pollResultWidth,
  pollInputHeight: () => pollInputHeight,
  pollWidth: () => pollWidth,
  overlayIndex: () => overlayIndex,
  overlayOpacity: () => overlayOpacity,
  pollIndex: () => pollIndex,
  pollBottomOffset: () => pollBottomOffset,
  pollColAmount: () => pollColAmount,
  toastMargin: () => toastMargin,
  avatarSide: () => avatarSide,
  avatarWrapperOffset: () => avatarWrapperOffset,
  avatarInset: () => avatarInset,
  dropdownCaretHeight: () => dropdownCaretHeight,
  dropdownCaretWidth: () => dropdownCaretWidth,
  toastOffsetSm: () => toastOffsetSm,
  btnSpacing: () => btnSpacing,
  toastIconMd: () => toastIconMd,
  toastIconSm: () => toastIconSm,
  presentationMenuHeight: () => presentationMenuHeight,
  styleMenuOffset: () => styleMenuOffset,
  styleMenuOffsetSmall: () => styleMenuOffsetSmall
});
const borderSizeSmall = '1px';
const borderSize = '2px';
const borderSizeLarge = '3px';
const borderRadius = '.2rem';
const smPaddingX = '.75rem';
const smPaddingY = '.3rem';
const mdPaddingY = '.45rem';
const mdPaddingX = '1rem';
const lgPaddingX = '1.25rem';
const lgPaddingY = '0.6rem';
const jumboPaddingY = '1.5rem';
const jumboPaddingX = '3.025rem';
const whiteboardToolbarPadding = '.5rem';
const whiteboardToolbarMargin = '.5rem';
const whiteboardToolbarPaddingSm = '.3rem';
const minModalHeight = '20rem';
const descriptionMargin = '3.5rem';
const navbarHeight = '3.9375rem';
const barsPadding = '0.8rem'; // so user-list and chat title is aligned with the presentation title
const pollHeaderOffset = '-0.875rem';
const toastContentWidth = '98%';
const modalMargin = '3rem';
const titlePositionLeft = '2.2rem';
const userIndicatorsOffset = '-5px';
const indicatorPadding = '.45rem'; // used to center presenter indicator icon in Chrome / Firefox / Edge
const actionsBarHeight = '75px'; // TODO: Change to ActionsBar real height
const audioIndicatorWidth = '1.12rem';
const audioIndicatorFs = '75%';
const chatPollMarginSm = '.5rem';
const talkerBorderRadius = '2rem';
const talkerPaddingXsm = '.13rem';
const talkerPaddingLg = '.75rem';
const talkerPaddingXl = '1.62rem';
const talkerMaxWidth = '10rem';
const talkerMarginSm = '.5rem';
const spokeOpacity = '.5';
const toolbarButtonWidth = '3rem';
const toolbarButtonHeight = '3rem';
const toolbarItemOutlineOffset = '-.19rem';
const toolbarButtonBorder = '1px';
const toolbarButtonBorderRadius = '5px';
const toolbarItemTrianglePadding = '2px';
const toolbarMargin = '.8rem';
const fileLineWidth = '16.75rem';
const iconPaddingMd = '.4rem';
const statusIconSize = '16px';
const toastMdMargin = '.5rem';
const toastMarginMobile = '.35rem';
const uploadListHeight = '30vh';
const modalInnerWidth = '40rem';
const statusInfoHeight = '8px';
const itemActionsWidth = '68px'; // size of the 2 icons (check/trash)
const uploadIconSize = '2.286rem';
const iconLineHeight = '2.35rem';
const innerToastWidth = '17rem';
const toastIconSide = '40px';
const pollStatsElementWidth = '17%';
const pollSmMargin = '0.3125rem';
const pollMdMargin = '0.7rem';
const pollResultWidth = '15rem';
const pollInputHeight = '2.5rem';
const pollWidth = '18rem';
const overlayIndex = '999';
const overlayOpacity = '0.349';
const pollIndex = '1016';
const pollBottomOffset = '4.5rem';
const pollColAmount = '2';
const toastMargin = '.5rem';
const avatarSide = '34px';
const avatarWrapperOffset = '14px';
const avatarInset = '-7px';
const dropdownCaretHeight = '8px';
const dropdownCaretWidth = '12px';
const toastOffsetSm = '.325rem';
const btnSpacing = '.35rem';
const toastIconMd = '2rem';
const toastIconSm = '1.2rem';
const presentationMenuHeight = '45px';
const styleMenuOffset = '6.25rem';
const styleMenuOffsetSmall = '5rem';
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"globalStyles.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/stylesheets/styled-components/globalStyles.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
let createGlobalStyle;
module.link("styled-components", {
  createGlobalStyle(v) {
    createGlobalStyle = v;
  }
}, 0);
let smallOnly;
module.link("/imports/ui/stylesheets/styled-components/breakpoints", {
  smallOnly(v) {
    smallOnly = v;
  }
}, 1);
let smPaddingX, borderRadius, borderSize, borderSizeSmall;
module.link("/imports/ui/stylesheets/styled-components/general", {
  smPaddingX(v) {
    smPaddingX = v;
  },
  borderRadius(v) {
    borderRadius = v;
  },
  borderSize(v) {
    borderSize = v;
  },
  borderSizeSmall(v) {
    borderSizeSmall = v;
  }
}, 2);
let dropdownBg, colorText, colorWhite, colorGrayLighter, colorOverlay;
module.link("/imports/ui/stylesheets/styled-components/palette", {
  dropdownBg(v) {
    dropdownBg = v;
  },
  colorText(v) {
    colorText = v;
  },
  colorWhite(v) {
    colorWhite = v;
  },
  colorGrayLighter(v) {
    colorGrayLighter = v;
  },
  colorOverlay(v) {
    colorOverlay = v;
  }
}, 3);
const GlobalStyle = createGlobalStyle(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  // BBBMenu\n  @media ", " {\n    .MuiPopover-root {\n      top: 0 !important;\n    }\n    .MuiPaper-root-mobile {\n      top: 0 !important;\n      left: 0 !important;\n      bottom: 0 !important;\n      right: 0 !important;\n      max-width: none !important;\n    }\n  }\n  .MuiList-padding {\n    padding: 0 !important;\n  }\n  .MuiPaper-root {\n    background-color: ", ";\n    border-radius: ", ";\n    border: 0;\n    z-index: 999;\n    max-width: 22rem;\n  }\n\n  // modal\n  @keyframes fade-in {\n    0% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n\n  .permissionsOverlay {\n    position: fixed;\n    z-index: 1002;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background-color: rgba(0, 0, 0, .85);\n    animation: fade-in .5s ease-in;\n  }\n\n  .modalOverlay {\n    z-index: 1000;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: ", ";\n  }\n\n  .fullscreenModalOverlay {\n    z-index: 1000;\n    background: #fff;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n  }\n\n  // toast\n  .toastClass {\n    position: relative;\n    margin-bottom: ", ";\n    padding: ", ";\n    border-radius: ", ";\n    box-shadow: 0 ", " 10px 0 rgba(0, 0, 0, 0.1), 0 ", " 15px 0 rgba(0, 0, 0, 0.05);\n    display: flex;\n    justify-content: space-between;\n    color: ", ";\n    -webkit-animation-duration: 0.75s;\n    animation-duration: 0.75s;\n    -webkit-animation-fill-mode: both;\n    animation-fill-mode: both;\n    max-width: 20rem !important;\n    min-width: 20rem !important;\n    width: 20rem !important;\n    cursor: pointer;\n    background-color: ", ";\n\n    &:hover,\n    &:focus {\n      background-color: #EEE;\n    }\n  }\n\n  .toastBodyClass {\n    margin: auto auto;\n    flex: 1;\n    background-color: inherit;\n    max-width: 17.75rem !important;\n  }\n\n  @keyframes track-progress {\n    0% {\n      width: 100%;\n    }\n    100% {\n      width: 0;\n    }\n  }\n\n  .toastProgressClass {\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: auto;\n    width: 0;\n    height: 5px;\n    z-index: 999;\n    animation: track-progress linear 1;\n    background-color: ", ";\n    border-radius: ", ";\n\n    [dir=\"rtl\"] & {\n      left: auto;\n      right: 0;\n    }\n  }\n\n  .actionToast {\n    background-color: ", ";\n    display: flex;\n    padding: ", ";\n    border-radius: ", ";\n\n    i.close {\n      left: none !important;\n    }\n  }\n\n  .raiseHandToast {\n    background-color: ", ";\n    padding: 1rem;\n\n    i.close {\n      left: none !important;\n    }\n  }\n"])), smallOnly, dropdownBg, borderRadius, colorOverlay, smPaddingX, smPaddingX, borderRadius, borderSizeSmall, borderSize, colorText, colorWhite, colorGrayLighter, borderRadius, colorWhite, smPaddingX, borderRadius, colorWhite);
module.exportDefault(GlobalStyle);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"palette.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/stylesheets/styled-components/palette.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  colorWhite: () => colorWhite,
  colorOffWhite: () => colorOffWhite,
  colorBlack: () => colorBlack,
  colorGray: () => colorGray,
  colorGrayDark: () => colorGrayDark,
  colorGrayLight: () => colorGrayLight,
  colorGrayLighter: () => colorGrayLighter,
  colorGrayLightest: () => colorGrayLightest,
  colorTransparent: () => colorTransparent,
  colorBlueLight: () => colorBlueLight,
  colorBlueLighter: () => colorBlueLighter,
  colorBlueLightest: () => colorBlueLightest,
  colorPrimary: () => colorPrimary,
  colorDanger: () => colorDanger,
  colorDangerDark: () => colorDangerDark,
  colorSuccess: () => colorSuccess,
  colorWarning: () => colorWarning,
  colorBackground: () => colorBackground,
  colorOverlay: () => colorOverlay,
  userListBg: () => userListBg,
  userListText: () => userListText,
  unreadMessagesBg: () => unreadMessagesBg,
  colorGrayLabel: () => colorGrayLabel,
  colorText: () => colorText,
  colorLink: () => colorLink,
  listItemBgHover: () => listItemBgHover,
  colorTipBg: () => colorTipBg,
  itemFocusBorder: () => itemFocusBorder,
  btnDefaultColor: () => btnDefaultColor,
  btnDefaultBg: () => btnDefaultBg,
  btnDefaultBorder: () => btnDefaultBorder,
  btnDefaultGhostColor: () => btnDefaultGhostColor,
  btnDefaultGhostBg: () => btnDefaultGhostBg,
  btnDefaultGhostBorder: () => btnDefaultGhostBorder,
  btnDefaultGhostActiveBg: () => btnDefaultGhostActiveBg,
  btnPrimaryBorder: () => btnPrimaryBorder,
  btnPrimaryColor: () => btnPrimaryColor,
  btnPrimaryBg: () => btnPrimaryBg,
  btnPrimaryHoverBg: () => btnPrimaryHoverBg,
  btnPrimaryActiveBg: () => btnPrimaryActiveBg,
  btnSuccessBorder: () => btnSuccessBorder,
  btnSuccessColor: () => btnSuccessColor,
  btnSuccessBg: () => btnSuccessBg,
  btnWarningBorder: () => btnWarningBorder,
  btnWarningColor: () => btnWarningColor,
  btnWarningBg: () => btnWarningBg,
  btnDangerBorder: () => btnDangerBorder,
  btnDangerColor: () => btnDangerColor,
  btnDangerBg: () => btnDangerBg,
  btnDarkBorder: () => btnDarkBorder,
  btnDarkColor: () => btnDarkColor,
  btnDarkBg: () => btnDarkBg,
  btnOfflineBorder: () => btnOfflineBorder,
  btnOfflineColor: () => btnOfflineColor,
  btnOfflineBg: () => btnOfflineBg,
  btnMutedBorder: () => btnMutedBorder,
  btnMutedColor: () => btnMutedColor,
  btnMutedBg: () => btnMutedBg,
  toolbarButtonColor: () => toolbarButtonColor,
  userThumbnailBorder: () => userThumbnailBorder,
  loaderBg: () => loaderBg,
  loaderBullet: () => loaderBullet,
  btnDangerBgHover: () => btnDangerBgHover,
  systemMessageBackgroundColor: () => systemMessageBackgroundColor,
  systemMessageBorderColor: () => systemMessageBorderColor,
  systemMessageFontColor: () => systemMessageFontColor,
  highlightedMessageBackgroundColor: () => highlightedMessageBackgroundColor,
  highlightedMessageBorderColor: () => highlightedMessageBorderColor,
  colorHeading: () => colorHeading,
  palettePlaceholderText: () => palettePlaceholderText,
  pollAnnotationGray: () => pollAnnotationGray,
  toolbarButtonBorderColor: () => toolbarButtonBorderColor,
  toolbarListColor: () => toolbarListColor,
  toolbarButtonBg: () => toolbarButtonBg,
  toolbarListBg: () => toolbarListBg,
  toolbarListBgFocus: () => toolbarListBgFocus,
  pollStatsBorderColor: () => pollStatsBorderColor,
  pollBlue: () => pollBlue,
  colorContentBackground: () => colorContentBackground,
  dropdownBg: () => dropdownBg,
  toastDefaultColor: () => toastDefaultColor,
  toastDefaultBg: () => toastDefaultBg,
  toastInfoColor: () => toastInfoColor,
  toastInfoBg: () => toastInfoBg,
  toastSuccessColor: () => toastSuccessColor,
  toastSuccessBg: () => toastSuccessBg,
  toastErrorColor: () => toastErrorColor,
  toastErrorBg: () => toastErrorBg,
  toastWarningColor: () => toastWarningColor,
  toastWarningBg: () => toastWarningBg,
  webcamBackgroundColor: () => webcamBackgroundColor,
  webcamPlaceholderBorder: () => webcamPlaceholderBorder
});
const colorWhite = 'var(--color-white, #FFF)';
const colorOffWhite = 'var(--color-off-white, #F3F6F9)';
const colorBlack = 'var(--color-black, #000000)';
const colorGray = 'var(--color-gray, #4E5A66)';
const colorGrayDark = 'var(--color-gray-dark, #06172A)';
const colorGrayLight = 'var(--color-gray-light, #8B9AA8)';
const colorGrayLighter = 'var(--color-gray-lighter, #A7B3BD)';
const colorGrayLightest = 'var(--color-gray-lightest, #D4D9DF)';
const colorBlueLight = 'var(--color-blue-light, #54a1f3)';
const colorBlueLighter = 'var(--color-blue-lighter, #92BCEA)';
const colorBlueLightest = 'var(--color-blue-lightest, #E4ECF2)';
const colorTransparent = 'var(--color-transparent, #ff000000)';
const colorPrimary = 'var(--color-primary, #0F70D7)';
const colorDanger = 'var(--color-danger, #DF2721)';
const colorDangerDark = 'var(--color-danger-dark, #AE1010)';
const colorSuccess = 'var(--color-success, #008081)';
const colorWarning = 'var(--color-warning, purple)';
const colorOffline = "var(--color-offline, ".concat(colorGrayLight, ")");
const colorMuted = 'var(--color-muted, #586571)';
const colorMutedBackground = 'var(--color-muted-background, #F3F6F9)';
const colorBackground = "var(--color-background, ".concat(colorGrayDark, ")");
const colorOverlay = 'var(--color-overlay, rgba(6, 23, 42, 0.75))';
const userListBg = "var(--user-list-bg, ".concat(colorOffWhite, ")");
const userListText = "var(--user-list-text, ".concat(colorGray, ")");
const unreadMessagesBg = "var(--unread-messages-bg, ".concat(colorDanger, ")");
const colorGrayLabel = "var(--color-gray-label, ".concat(colorGray, ")");
const colorText = "var(--color-text, ".concat(colorGray, ")");
const colorLink = "var(--color-link, ".concat(colorPrimary, ")");
const listItemBgHover = 'var(--list-item-bg-hover, #DCE4ED)';
const colorTipBg = 'var(--color-tip-bg, #333333)';
const itemFocusBorder = "var(--item-focus-border, ".concat(colorBlueLighter, ")");
const btnDefaultColor = "var(--btn-default-color, ".concat(colorGray, ")");
const btnDefaultBg = "var(--btn-default-bg, ".concat(colorWhite, ")");
const btnDefaultBorder = "var(--btn-default-border, ".concat(colorWhite, ")");
const btnDefaultGhostColor = "var(--btn-default-color, ".concat(colorWhite, ")");
const btnDefaultGhostBg = 'var(--btn-default-bg, rgba(255, 255, 255, 0.1))'; // colorWhite, 10%
const btnDefaultGhostBorder = 'var(--btn-default-border, rgba(255, 255, 255, 0.5))'; // colorWhite, 50%
const btnDefaultGhostActiveBg = 'var(--btn-default-active-bg, rgba(255, 255, 255, 0.2))'; // colorWhite, 20%

const btnPrimaryBorder = 'var(--btn-primary-border, rgba(15, 112, 215, 0.5))'; // colorPrimary, 50%
const btnPrimaryColor = "var(--btn-primary-color, ".concat(colorWhite, ")");
const btnPrimaryBg = "var(--btn-primary-bg, ".concat(colorPrimary, ")");
const btnPrimaryHoverBg = 'var(--btn-primary-hover-bg, #0C57A7)';
const btnPrimaryActiveBg = 'var(--btn-primary-active-bg, #0A4B8F)';
const btnSuccessBorder = "var(--btn-success-border, ".concat(colorSuccess, ")");
const btnSuccessColor = "var(--btn-success-color, ".concat(colorWhite, ")");
const btnSuccessBg = "var(--btn-success-bg, ".concat(colorSuccess, ")");
const btnWarningBorder = "var(--btn-warning-border, ".concat(colorWarning, ")");
const btnWarningColor = "var(--btn-warning-color, ".concat(colorWhite, ")");
const btnWarningBg = "var(--btn-warning-bg, ".concat(colorWarning, ")");
const btnDangerBorder = "var(--btn-danger-border, ".concat(colorDanger, ")");
const btnDangerColor = "var(--btn-danger-color, ".concat(colorWhite, ")");
const btnDangerBg = "var(--btn-danger-bg, ".concat(colorDanger, ")");
const btnDangerBgHover = 'var(--btn-danger-bg-hover, #C61C1C)';
const btnDarkBorder = "var(--btn-dark-border, ".concat(colorDanger, ")");
const btnDarkColor = "var(--btn-dark-color, ".concat(colorWhite, ")");
const btnDarkBg = "var(--btn-dark-bg, ".concat(colorGrayDark, ")");
const btnOfflineBorder = "var(--btn-offline-border, ".concat(colorOffline, ")");
const btnOfflineColor = "var(--btn-offline-color, ".concat(colorWhite, ")");
const btnOfflineBg = "var(--btn-offline-bg, ".concat(colorOffline, ")");
const btnMutedBorder = "var(--btn-muted-border, ".concat(colorMutedBackground, ")");
const btnMutedColor = "var(--btn-muted-color, ".concat(colorMuted, ")");
const btnMutedBg = "var(--btn-muted-bg, ".concat(colorMutedBackground, ")");
const toolbarButtonColor = "var(--toolbar-button-color, ".concat(btnDefaultColor, ")");
const userThumbnailBorder = "var(--user-thumbnail-border, ".concat(colorGrayLight, ")");
const loaderBg = "var(--loader-bg, ".concat(colorGrayDark, ")");
const loaderBullet = "var(--loader-bullet, ".concat(colorWhite, ")");
const systemMessageBackgroundColor = 'var(--system-message-background-color, #F9FBFC)';
const systemMessageBorderColor = 'var(--system-message-border-color, #C5CDD4)';
const systemMessageFontColor = "var(--system-message-font-color, ".concat(colorGrayDark, ")");
const highlightedMessageBackgroundColor = 'var(--system-message-background-color, #fef9f1)';
const highlightedMessageBorderColor = 'var(--system-message-border-color, #f5c67f)';
const colorHeading = "var(--color-heading, ".concat(colorGrayDark, ")");
const palettePlaceholderText = 'var(--palette-placeholder-text, #787675)';
const pollAnnotationGray = 'var(--poll-annotation-gray, #333333)';
const toolbarButtonBorderColor = "var(--toolbar-button-border-color, ".concat(colorGrayLighter, ")");
const toolbarListColor = "var(--toolbar-list-color, ".concat(colorGray, ")");
const toolbarButtonBg = "var(--toolbar-button-bg, ".concat(btnDefaultBg, ")");
const toolbarListBg = 'var(--toolbar-list-bg, #DDD)';
const toolbarListBgFocus = 'var(--toolbar-list-bg-focus, #C6C6C6)';
const colorContentBackground = 'var(--color-content-background, #1B2A3A)';
const dropdownBg = "var(--dropdown-bg, ".concat(colorWhite, ")");
const pollStatsBorderColor = 'var(--poll-stats-border-color, #D4D9DF)';
const pollBlue = "var(--poll-blue, ".concat(colorPrimary, ")");
const toastDefaultColor = "var(--toast-default-color, ".concat(colorWhite, ")");
const toastDefaultBg = "var(--toast-default-bg, ".concat(colorGray, ")");
const toastInfoColor = "var(--toast-info-color, ".concat(colorWhite, ")");
const toastInfoBg = "var(--toast-info-bg, ".concat(colorPrimary, ")");
const toastSuccessColor = "var(--toast-success-color, ".concat(colorWhite, ")");
const toastSuccessBg = "var(--toast-success-bg, ".concat(colorSuccess, ")");
const toastErrorColor = "var(--toast-error-color, ".concat(colorWhite, ")");
const toastErrorBg = "var(--toast-error-bg, ".concat(colorDanger, ")");
const webcamBackgroundColor = 'var(--webcam-background-color, #001428FF)';
const webcamPlaceholderBorder = 'var(--webcam-placeholder-border, rgba(255, 255, 255, 0.5))'; // colorWhite, 50%

const toastWarningColor = "var(--toast-warning-color, ".concat(colorWhite, ")");
const toastWarningBg = "var(--toast-warning-bg, ".concat(colorWarning, ")");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"placeholders.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/stylesheets/styled-components/placeholders.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  FlexColumn: () => FlexColumn,
  FlexRow: () => FlexRow,
  DivElipsis: () => DivElipsis,
  TextElipsis: () => TextElipsis,
  TitleElipsis: () => TitleElipsis,
  HeaderElipsis: () => HeaderElipsis,
  ButtonElipsis: () => ButtonElipsis
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let Button;
module.link("/imports/ui/components/common/button/component", {
  default(v) {
    Button = v;
  }
}, 1);
const FlexColumn = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: column;\n"])));
const FlexRow = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  display: flex;\n  flex-flow: row;\n"])));
const DivElipsis = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  min-width: 0;\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n"])));
const TextElipsis = styled.span(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  min-width: 0;\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n"])));
const TitleElipsis = styled.h2(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n  min-width: 0;\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n"])));
const HeaderElipsis = styled.h3(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral(["\n  min-width: 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n"])));
const ButtonElipsis = styled(Button)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  min-width: 0;\n  display: inline-block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"scrollable.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/stylesheets/styled-components/scrollable.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _templateObject, _templateObject2;
let _taggedTemplateLiteral;
module.link("@babel/runtime/helpers/taggedTemplateLiteral", {
  default(v) {
    _taggedTemplateLiteral = v;
  }
}, 0);
module.export({
  ScrollboxVertical: () => ScrollboxVertical,
  ModalScrollboxVertical: () => ModalScrollboxVertical
});
let styled;
module.link("styled-components", {
  default(v) {
    styled = v;
  }
}, 0);
let ReactModal;
module.link("react-modal", {
  default(v) {
    ReactModal = v;
  }
}, 1);
const ScrollboxVertical = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  overflow-y: auto;\n  background: linear-gradient(white 30%, rgba(255,255,255,0)),\n    linear-gradient(rgba(255,255,255,0), white 70%) 0 100%,\n    /* Shadows */\n    radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.2), rgba(0,0,0,0)),\n    radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;\n\n  background-repeat: no-repeat;\n  background-color: transparent;\n  background-size: 100% 40px, 100% 40px, 100% 14px, 100% 14px;\n  background-attachment: local, local, scroll, scroll;\n\n  // Fancy scroll\n  &::-webkit-scrollbar {\n    width: 5px;\n    height: 5px;\n  }\n  &::-webkit-scrollbar-button {\n    width: 0;\n    height: 0;\n  }\n  &::-webkit-scrollbar-thumb {\n    background: rgba(0,0,0,.25);\n    border: none;\n    border-radius: 50px;\n  }\n  &::-webkit-scrollbar-thumb:hover { background: rgba(0,0,0,.5); }\n  &::-webkit-scrollbar-thumb:active { background: rgba(0,0,0,.25); }\n  &::-webkit-scrollbar-track {\n    background: rgba(0,0,0,.25);\n    border: none;\n    border-radius: 50px;\n  }\n  &::-webkit-scrollbar-track:hover { background: rgba(0,0,0,.25); }\n  &::-webkit-scrollbar-track:active { background: rgba(0,0,0,.25); }\n  &::-webkit-scrollbar-corner { background: 0 0; }\n"])));
const ModalScrollboxVertical = styled(ReactModal)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  overflow-y: auto;\n  background: linear-gradient(white 30%, rgba(255,255,255,0)),\n    linear-gradient(rgba(255,255,255,0), white 70%) 0 100%,\n    /* Shadows */\n    radial-gradient(farthest-side at 50% 0, rgba(0,0,0,.2), rgba(0,0,0,0)),\n    radial-gradient(farthest-side at 50% 100%, rgba(0,0,0,.2), rgba(0,0,0,0)) 0 100%;\n\n  background-repeat: no-repeat;\n  background-color: transparent;\n  background-size: 100% 40px, 100% 40px, 100% 14px, 100% 14px;\n  background-attachment: local, local, scroll, scroll;\n\n  // Fancy scroll\n  &::-webkit-scrollbar {\n    width: 5px;\n    height: 5px;\n  }\n  &::-webkit-scrollbar-button {\n    width: 0;\n    height: 0;\n  }\n  &::-webkit-scrollbar-thumb {\n    background: rgba(0,0,0,.25);\n    border: none;\n    border-radius: 50px;\n  }\n  &::-webkit-scrollbar-thumb:hover { background: rgba(0,0,0,.5); }\n  &::-webkit-scrollbar-thumb:active { background: rgba(0,0,0,.25); }\n  &::-webkit-scrollbar-track {\n    background: rgba(0,0,0,.25);\n    border: none;\n    border-radius: 50px;\n  }\n  &::-webkit-scrollbar-track:hover { background: rgba(0,0,0,.25); }\n  &::-webkit-scrollbar-track:active { background: rgba(0,0,0,.25); }\n  &::-webkit-scrollbar-corner { background: 0 0; }\n"])));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"typography.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/stylesheets/styled-components/typography.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  lineHeightComputed: () => lineHeightComputed,
  lineHeightBase: () => lineHeightBase,
  fontSizeBase: () => fontSizeBase,
  fontSizeSmall: () => fontSizeSmall,
  fontSizeSmaller: () => fontSizeSmaller,
  fontSizeSmallest: () => fontSizeSmallest,
  fontSizeXS: () => fontSizeXS,
  fontSizeLarge: () => fontSizeLarge,
  fontSizeLarger: () => fontSizeLarger,
  fontSizeXL: () => fontSizeXL,
  fontSizeXXL: () => fontSizeXXL,
  fontSizeMD: () => fontSizeMD,
  headingsFontWeight: () => headingsFontWeight,
  btnFontWeight: () => btnFontWeight,
  talkerFontWeight: () => talkerFontWeight,
  toolbarButtonFontSize: () => toolbarButtonFontSize,
  modalTitleFw: () => modalTitleFw
});
const lineHeightComputed = '1rem';
const lineHeightBase = '1.25';
const fontSizeBase = '1rem';
const fontSizeSmall = '0.875rem';
const fontSizeSmaller = '.75rem';
const fontSizeSmallest = '.35rem';
const fontSizeXS = '.575rem';
const fontSizeLarge = '1.25rem';
const fontSizeLarger = '1.5rem';
const fontSizeXL = '1.75rem';
const fontSizeXXL = '2.75rem';
const fontSizeMD = '0.95rem';
const headingsFontWeight = '500';
const btnFontWeight = '600';
const talkerFontWeight = '400';
const toolbarButtonFontSize = '1.75rem';
const modalTitleFw = '400';
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"hooks":{"useDeepComparison.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/hooks/useDeepComparison.ts                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  useDeepComparison: () => useDeepComparison
});
let isEqual;
module.link("radash", {
  isEqual(v) {
    isEqual = v;
  }
}, 0);
let usePreviousValue;
module.link("./usePreviousValue", {
  default(v) {
    usePreviousValue = v;
  }
}, 1);
const useDeepComparison = function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  const prev = usePreviousValue(args);
  if (!prev) return true;
  return args.some((item, index) => !isEqual(item, prev[index]));
};
module.exportDefault(useDeepComparison);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useIntersectionObserver.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/hooks/useIntersectionObserver.ts                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useCallback, useMemo, useRef, useState;
module.link("react", {
  useCallback(v) {
    useCallback = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
const CURRENT_FIELD = 'current';
const useIntersectionObserver = function (parentRef, childRef) {
  let threshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;
  const observer = useRef(null);
  const [intersecting, setIntersecting] = useState(false);
  const updateIntersectionObserver = useCallback(root => {
    if (observer.current) {
      observer.current.disconnect();
    }
    const newObserver = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        const {
          isIntersecting
        } = entry;
        setIntersecting(isIntersecting);
      });
    }, {
      root,
      threshold
    });
    observer.current = newObserver;
  }, [setIntersecting]);
  const parentRefProxy = useMemo(() => new Proxy(parentRef, {
    set(target, field, newValue, receiver) {
      if (field === CURRENT_FIELD) {
        updateIntersectionObserver(newValue);
        if (childRef.current && observer.current) {
          observer.current.observe(childRef.current);
        }
      }
      return Reflect.set(target, field, newValue, receiver);
    }
  }), [parentRef]);
  const childRefProxy = useMemo(() => new Proxy(childRef, {
    set(target, field, newValue, receiver) {
      if (field === CURRENT_FIELD) {
        if (!observer.current) {
          updateIntersectionObserver(parentRef.current);
        } else if (childRef.current) {
          observer.current.unobserve(childRef.current);
        }
        if (newValue instanceof HTMLDivElement && observer.current) {
          observer.current.observe(newValue);
        }
      }
      return Reflect.set(target, field, newValue, receiver);
    }
  }), [childRef]);
  return {
    childRefProxy,
    parentRefProxy,
    intersecting
  };
};
module.exportDefault(useIntersectionObserver);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"usePreviousValue.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/hooks/usePreviousValue.ts                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  usePreviousValue: () => usePreviousValue
});
let useEffect, useRef;
module.link("react", {
  useEffect(v) {
    useEffect = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
const usePreviousValue = value => {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  });
  return ref.current;
};
module.exportDefault(usePreviousValue);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useReactiveRef.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/hooks/useReactiveRef.ts                                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useMemo, useRef, useState;
module.link("react", {
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  },
  useState(v) {
    useState = v;
  }
}, 0);
const CURRENT_FIELD = 'current';
const useReactiveRef = initialValue => {
  const [current, setCurrent] = useState(null);
  const ref = useRef(initialValue);
  const proxy = useMemo(() => new Proxy(ref, {
    set(target, field, newValue, receiver) {
      if (field === CURRENT_FIELD) {
        setCurrent(newValue);
      }
      return Reflect.set(target, field, newValue, receiver);
    }
  }), []);
  return {
    ref: proxy,
    current
  };
};
module.exportDefault(useReactiveRef);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"useStickyScroll.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/ui/hooks/useStickyScroll.ts                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useCallback, useEffect, useMemo, useRef;
module.link("react", {
  useCallback(v) {
    useCallback = v;
  },
  useEffect(v) {
    useEffect = v;
  },
  useMemo(v) {
    useMemo = v;
  },
  useRef(v) {
    useRef = v;
  }
}, 0);
const useStickyScroll = el => {
  const elHeight = useRef(0);
  const timeout = useRef();
  const handlers = useRef({
    startObserving: () => {},
    stopObserving: () => {}
  });
  const observer = useMemo(() => new ResizeObserver(entries => {
    entries.forEach(entry => {
      const {
        target
      } = entry;
      if (target instanceof HTMLElement) {
        if (target.offsetHeight > elHeight.current) {
          elHeight.current = target.offsetHeight;
          target.scrollTop = target.scrollHeight + target.clientHeight;
        } else {
          elHeight.current = 0;
        }
      }
    });
  }), []);
  handlers.current.startObserving = useCallback(() => {
    if (!el) return;
    clearTimeout(timeout.current);
    observer.observe(el);
  }, [el]);
  handlers.current.stopObserving = useCallback(() => {
    if (!el) return;
    timeout.current = setTimeout(() => {
      observer.unobserve(el);
    }, 500);
  }, [el]);
  useEffect(() => () => {
    observer.disconnect();
  }, []);
  return handlers.current;
};
module.exportDefault(useStickyScroll);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"api":{"audio":{"client":{"bridge":{"base.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/audio/client/bridge/base.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => BaseAudioBridge
});
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 0);
let getAudioConstraints, doGUM;
module.link("/imports/api/audio/client/bridge/service", {
  getAudioConstraints(v) {
    getAudioConstraints = v;
  },
  doGUM(v) {
    doGUM = v;
  }
}, 1);
const BASE_BRIDGE_NAME = 'base';
class BaseAudioBridge {
  constructor(userData) {
    this.userData = userData;
    this.baseErrorCodes = {
      INVALID_TARGET: 'INVALID_TARGET',
      CONNECTION_ERROR: 'CONNECTION_ERROR',
      REQUEST_TIMEOUT: 'REQUEST_TIMEOUT',
      GENERIC_ERROR: 'GENERIC_ERROR',
      MEDIA_ERROR: 'MEDIA_ERROR',
      WEBRTC_NOT_SUPPORTED: 'WEBRTC_NOT_SUPPORTED',
      ICE_NEGOTIATION_FAILED: 'ICE_NEGOTIATION_FAILED'
    };
    this.baseCallStates = {
      started: 'started',
      ended: 'ended',
      failed: 'failed',
      reconnecting: 'reconnecting',
      autoplayBlocked: 'autoplayBlocked'
    };
    this.bridgeName = BASE_BRIDGE_NAME;
  }
  getPeerConnection() {
    console.error('The Bridge must implement getPeerConnection');
  }
  exitAudio() {
    console.error('The Bridge must implement exitAudio');
  }
  joinAudio() {
    console.error('The Bridge must implement joinAudio');
  }
  changeInputDevice() {
    console.error('The Bridge must implement changeInputDevice');
  }
  setInputStream() {
    console.error('The Bridge must implement setInputStream');
  }
  sendDtmf() {
    console.error('The Bridge must implement sendDtmf');
  }
  set inputDeviceId(deviceId) {
    this._inputDeviceId = deviceId;
  }
  get inputDeviceId() {
    return this._inputDeviceId;
  }

  /**
   * Change the input device with the given deviceId, without renegotiating
   * peer.
   * A new MediaStream object is created for the given deviceId. This object
   * is returned by the resolved promise.
   * @param  {String}  deviceId The id of the device to be set as input
   * @return {Promise}          A promise that is resolved with the MediaStream
   *                            object after changing the input device.
   */
  async liveChangeInputDevice(deviceId) {
    let newStream;
    let backupStream;
    try {
      const constraints = {
        audio: getAudioConstraints({
          deviceId
        })
      };

      // Backup stream (current one) in case the switch fails
      if (this.inputStream && this.inputStream.active) {
        backupStream = this.inputStream ? this.inputStream.clone() : null;
        this.inputStream.getAudioTracks().forEach(track => track.stop());
      }
      newStream = await doGUM(constraints);
      await this.setInputStream(newStream);
      if (backupStream && backupStream.active) {
        backupStream.getAudioTracks().forEach(track => track.stop());
        backupStream = null;
      }
      return newStream;
    } catch (error) {
      // Device change failed. Clean up the tentative new stream to avoid lingering
      // stuff, then try to rollback to the previous input stream.
      if (newStream && typeof newStream.getAudioTracks === 'function') {
        newStream.getAudioTracks().forEach(t => t.stop());
        newStream = null;
      }

      // Rollback to backup stream
      if (backupStream && backupStream.active) {
        this.setInputStream(backupStream).catch(rollbackError => {
          logger.error({
            logCode: 'audio_changeinputdevice_rollback_failure',
            extraInfo: {
              bridgeName: this.bridgeName,
              deviceId,
              errorName: rollbackError.name,
              errorMessage: rollbackError.message
            }
          }, 'Microphone device change rollback failed - the device may become silent');
          backupStream.getAudioTracks().forEach(track => track.stop());
          backupStream = null;
        });
      }
      throw error;
    }
  }
  trackTransferState(transferCallback) {
    return new Promise(resolve => {
      transferCallback();
      resolve();
    });
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/audio/client/bridge/service.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  DEFAULT_INPUT_DEVICE_ID: () => DEFAULT_INPUT_DEVICE_ID,
  DEFAULT_OUTPUT_DEVICE_ID: () => DEFAULT_OUTPUT_DEVICE_ID,
  INPUT_DEVICE_ID_KEY: () => INPUT_DEVICE_ID_KEY,
  OUTPUT_DEVICE_ID_KEY: () => OUTPUT_DEVICE_ID_KEY,
  getAudioSessionNumber: () => getAudioSessionNumber,
  getCurrentAudioSessionNumber: () => getCurrentAudioSessionNumber,
  reloadAudioElement: () => reloadAudioElement,
  filterSupportedConstraints: () => filterSupportedConstraints,
  getAudioConstraints: () => getAudioConstraints,
  getCurrentAudioSinkId: () => getCurrentAudioSinkId,
  getStoredAudioInputDeviceId: () => getStoredAudioInputDeviceId,
  storeAudioInputDeviceId: () => storeAudioInputDeviceId,
  getStoredAudioOutputDeviceId: () => getStoredAudioOutputDeviceId,
  storeAudioOutputDeviceId: () => storeAudioOutputDeviceId,
  doGUM: () => doGUM,
  stereoUnsupported: () => stereoUnsupported
});
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 1);
let getStorageSingletonInstance;
module.link("/imports/ui/services/storage", {
  getStorageSingletonInstance(v) {
    getStorageSingletonInstance = v;
  }
}, 2);
const AUDIO_SESSION_NUM_KEY = 'AudioSessionNumber';
const DEFAULT_INPUT_DEVICE_ID = '';
const DEFAULT_OUTPUT_DEVICE_ID = '';
const INPUT_DEVICE_ID_KEY = 'audioInputDeviceId';
const OUTPUT_DEVICE_ID_KEY = 'audioOutputDeviceId';
const getAudioSessionNumber = () => {
  let currItem = parseInt(sessionStorage.getItem(AUDIO_SESSION_NUM_KEY), 10);
  if (!currItem) {
    currItem = 0;
  }
  currItem += 1;
  sessionStorage.setItem(AUDIO_SESSION_NUM_KEY, currItem);
  return currItem;
};
const getCurrentAudioSessionNumber = () => sessionStorage.getItem(AUDIO_SESSION_NUM_KEY) || '0';
const reloadAudioElement = audioElement => {
  if (audioElement && audioElement.readyState > 0) {
    audioElement.load();
    return true;
  }
  return false;
};
const getCurrentAudioSinkId = () => {
  const MEDIA_TAG = window.meetingClientSettings.public.media.mediaTag;
  const audioElement = document.querySelector(MEDIA_TAG);
  return (audioElement === null || audioElement === void 0 ? void 0 : audioElement.sinkId) || DEFAULT_OUTPUT_DEVICE_ID;
};
const getStoredAudioInputDeviceId = () => getStorageSingletonInstance().getItem(INPUT_DEVICE_ID_KEY);
const getStoredAudioOutputDeviceId = () => getStorageSingletonInstance().getItem(OUTPUT_DEVICE_ID_KEY);
const storeAudioInputDeviceId = deviceId => getStorageSingletonInstance().setItem(INPUT_DEVICE_ID_KEY, deviceId);
const storeAudioOutputDeviceId = deviceId => getStorageSingletonInstance().setItem(OUTPUT_DEVICE_ID_KEY, deviceId);

/**
 * Filter constraints set in audioDeviceConstraints, based on
 * constants supported by browser. This avoids setting a constraint
 * unsupported by browser. In currently safari version (13+), for example,
 * setting an unsupported constraint crashes the audio.
 * @param  {Object} audioDeviceConstraints Constraints to be set
 * see: https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints
 * @return {Object}                        A new Object of the same type as
 * input, containing only the supported constraints.
 */
const filterSupportedConstraints = audioDeviceConstraints => {
  try {
    const matchConstraints = {};
    const supportedConstraints = navigator.mediaDevices.getSupportedConstraints() || {};
    Object.entries(audioDeviceConstraints).forEach(_ref => {
      let [constraintName, constraintValue] = _ref;
      if (supportedConstraints[constraintName]) {
        matchConstraints[constraintName] = constraintValue;
      }
    });
    return matchConstraints;
  } catch (error) {
    logger.error({
      logCode: 'audio_unsupported_constraint_error'
    }, 'Unsupported audio constraints');
    return {};
  }
};
const getAudioConstraints = function () {
  let constraintFields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const {
    deviceId = ''
  } = constraintFields;
  const Settings = getSettingsSingletonInstance();
  const userSettingsConstraints = Settings.application.microphoneConstraints;
  const audioDeviceConstraints = userSettingsConstraints || window.meetingClientSettings.public.app.defaultSettings.application.microphoneConstraints || {};
  const matchConstraints = filterSupportedConstraints(audioDeviceConstraints);
  if (deviceId) {
    matchConstraints.deviceId = {
      exact: deviceId
    };
  }
  return matchConstraints;
};
const doGUM = async function (constraints) {
  let retryOnFailure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  try {
    const stream = await navigator.mediaDevices.getUserMedia(constraints);
    return stream;
  } catch (error) {
    // This is probably a deviceId mismatch. Retry with base constraints
    // without an exact deviceId.
    if (error.name === 'OverconstrainedError' && retryOnFailure) {
      logger.warn({
        logCode: 'audio_overconstrainederror_rollback',
        extraInfo: {
          constraints
        }
      }, 'Audio getUserMedia returned OverconstrainedError, rollback');
      return navigator.mediaDevices.getUserMedia({
        audio: getAudioConstraints()
      });
    }

    // Not OverconstrainedError - bubble up the error.
    throw error;
  }
};
const isEnabled = () => window.meetingClientSettings.public.app.audioCaptions.enabled;
const getProvider = () => window.meetingClientSettings.public.app.audioCaptions.provider;
const isWebSpeechApi = () => getProvider() === 'webspeech';
const isVosk = () => getProvider() === 'vosk';
const isWhispering = () => getProvider() === 'whisper';
const isDeepSpeech = () => getProvider() === 'deepSpeech';
const isActive = () => isEnabled() && (isWebSpeechApi() || isVosk() || isWhispering() || isDeepSpeech());
const stereoUnsupported = () => isActive() && isVosk();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sfu-audio-bridge.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/audio/client/bridge/sfu-audio-bridge.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function (module1) {
  let _objectSpread;
  module1.link("@babel/runtime/helpers/objectSpread2", {
    default(v) {
      _objectSpread = v;
    }
  }, 0);
  module1.export({
    default: () => SFUAudioBridge
  });
  let BaseAudioBridge;
  module1.link("./base", {
    default(v) {
      BaseAudioBridge = v;
    }
  }, 0);
  let Auth;
  module1.link("/imports/ui/services/auth", {
    default(v) {
      Auth = v;
    }
  }, 1);
  let logger;
  module1.link("/imports/startup/client/logger", {
    default(v) {
      logger = v;
    }
  }, 2);
  let AudioBroker;
  module1.link("/imports/ui/services/bbb-webrtc-sfu/audio-broker", {
    default(v) {
      AudioBroker = v;
    }
  }, 3);
  let loadAndPlayMediaStream;
  module1.link("/imports/ui/services/bbb-webrtc-sfu/load-play", {
    default(v) {
      loadAndPlayMediaStream = v;
    }
  }, 4);
  let fetchWebRTCMappedStunTurnServers, getMappedFallbackStun;
  module1.link("/imports/utils/fetchStunTurnServers", {
    fetchWebRTCMappedStunTurnServers(v) {
      fetchWebRTCMappedStunTurnServers = v;
    },
    getMappedFallbackStun(v) {
      getMappedFallbackStun = v;
    }
  }, 5);
  let getFromMeetingSettings;
  module1.link("/imports/ui/services/meeting-settings", {
    default(v) {
      getFromMeetingSettings = v;
    }
  }, 6);
  let getFromUserSettings;
  module1.link("/imports/ui/services/users-settings", {
    default(v) {
      getFromUserSettings = v;
    }
  }, 7);
  let browserInfo;
  module1.link("/imports/utils/browserInfo", {
    default(v) {
      browserInfo = v;
    }
  }, 8);
  let getAudioSessionNumber, getAudioConstraints, filterSupportedConstraints, doGUM;
  module1.link("/imports/api/audio/client/bridge/service", {
    getAudioSessionNumber(v) {
      getAudioSessionNumber = v;
    },
    getAudioConstraints(v) {
      getAudioConstraints = v;
    },
    filterSupportedConstraints(v) {
      filterSupportedConstraints = v;
    },
    doGUM(v) {
      doGUM = v;
    }
  }, 9);
  let shouldForceRelay;
  module1.link("/imports/ui/services/bbb-webrtc-sfu/utils", {
    shouldForceRelay(v) {
      shouldForceRelay = v;
    }
  }, 10);
  const SENDRECV_ROLE = 'sendrecv';
  const RECV_ROLE = 'recv';
  const BRIDGE_NAME = 'fullaudio';
  const IS_CHROME = browserInfo.isChrome;

  // SFU's base broker has distinct error codes so that it can be reused by different
  // modules. Errors that have a valid, localized counterpart in audio manager are
  // mapped so that the user gets a localized error message.
  // The ones that haven't (ie SFU's servers-side errors), aren't mapped.
  const errorCodeMap = {
    1301: 1001,
    1302: 1002,
    1305: 1005,
    1307: 1007
  };

  // Error codes that are prone to a retry according to RETRY_THROUGH_RELAY
  const RETRYABLE_ERRORS = [1007, 1010];
  const mapErrorCode = error => {
    const {
      errorCode
    } = error;
    const mappedErrorCode = errorCodeMap[errorCode];
    if (errorCode == null || mappedErrorCode == null) return error;
    // eslint-disable-next-line no-param-reassign
    error.errorCode = mappedErrorCode;
    return error;
  };
  const getMediaServerAdapter = function () {
    let listenOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    const SETTINGS = window.meetingClientSettings;
    const MEDIA = SETTINGS.public.media;
    const DEFAULT_LISTENONLY_MEDIA_SERVER = SETTINGS.public.kurento.listenOnlyMediaServer;
    const DEFAULT_FULLAUDIO_MEDIA_SERVER = MEDIA.audio.fullAudioMediaServer;
    if (listenOnly) {
      return getFromMeetingSettings('media-server-listenonly', DEFAULT_LISTENONLY_MEDIA_SERVER);
    }
    return getFromMeetingSettings('media-server-fullaudio', DEFAULT_FULLAUDIO_MEDIA_SERVER);
  };
  const isTransparentListenOnlyEnabled = () => {
    const SETTINGS = window.meetingClientSettings;
    const MEDIA = SETTINGS.public.media;
    const TRANSPARENT_LISTEN_ONLY = MEDIA.transparentListenOnly;
    return getFromUserSettings('bbb_transparent_listen_only', TRANSPARENT_LISTEN_ONLY);
  };
  class SFUAudioBridge extends BaseAudioBridge {
    static getOfferingRole(isListenOnly) {
      const SETTINGS = window.meetingClientSettings;
      const MEDIA = SETTINGS.public.media;
      const LISTEN_ONLY_OFFERING = MEDIA.listenOnlyOffering;
      const FULLAUDIO_OFFERING = MEDIA.fullAudioOffering;
      return isListenOnly ? LISTEN_ONLY_OFFERING : !isTransparentListenOnlyEnabled() && FULLAUDIO_OFFERING;
    }
    constructor(userData) {
      super();
      this.userId = userData.userId;
      this.name = userData.username;
      this.sessionToken = userData.sessionToken;
      this.broker = null;
      this.reconnecting = false;
      this.iceServers = [];
      this.bridgeName = BRIDGE_NAME;
      this.handleTermination = this.handleTermination.bind(this);
    }
    get inputStream() {
      if (this.broker) {
        return this.broker.getLocalStream();
      }
      return null;
    }
    get role() {
      var _this$broker;
      return (_this$broker = this.broker) === null || _this$broker === void 0 ? void 0 : _this$broker.role;
    }
    setInputStream(stream) {
      if (this.broker == null) return null;
      return this.broker.setLocalStream(stream);
    }
    getPeerConnection() {
      if (!this.broker) return null;
      const {
        webRtcPeer
      } = this.broker;
      if (webRtcPeer) return webRtcPeer.peerConnection;
      return null;
    }

    // eslint-disable-next-line class-methods-use-this
    mediaStreamFactory(constraints) {
      return doGUM(constraints, true);
    }
    setConnectionTimeout() {
      if (this.connectionTimeout) this.clearConnectionTimeout();
      const SETTINGS = window.meetingClientSettings;
      const MEDIA = SETTINGS.public.media;
      const CONNECTION_TIMEOUT_MS = MEDIA.listenOnlyCallTimeout || 15000;
      this.connectionTimeout = setTimeout(() => {
        const error = new Error("ICE negotiation timeout after ".concat(CONNECTION_TIMEOUT_MS / 1000, "s"));
        error.errorCode = 1010;
        // Duplicating key-vals because I can'decide settle on an error pattern - prlanzarin again
        error.errorCause = error.message;
        error.errorMessage = error.message;
        this.handleBrokerFailure(error);
      }, CONNECTION_TIMEOUT_MS);
    }
    clearConnectionTimeout() {
      if (this.connectionTimeout) {
        clearTimeout(this.connectionTimeout);
        this.connectionTimeout = null;
      }
    }
    dispatchAutoplayHandlingEvent(mediaElement) {
      const tagFailedEvent = new CustomEvent('audioPlayFailed', {
        detail: {
          mediaElement
        }
      });
      window.dispatchEvent(tagFailedEvent);
      this.callback({
        status: this.baseCallStates.autoplayBlocked,
        bridge: this.bridgeName
      });
    }
    reconnect() {
      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // If broker has already started, fire the reconnecting callback so the user
      // knows what's going on
      if (this.broker.started) {
        this.callback({
          status: this.baseCallStates.reconnecting,
          bridge: this.bridgeName
        });
      } else {
        // Otherwise: override termination handler so the ended callback doesn't get
        // triggered - this is a retry attempt and the user shouldn't be notified
        // yet.
        this.broker.onended = () => {};
      }
      this.broker.stop();
      this.reconnecting = true;
      this._startBroker(_objectSpread({
        isListenOnly: this.isListenOnly
      }, options)).catch(error => {
        // Error handling is a no-op because it will be "handled" in handleBrokerFailure
        logger.debug({
          logCode: 'sfuaudio_reconnect_failed',
          extraInfo: {
            errorMessage: error.errorMessage,
            reconnecting: this.reconnecting,
            bridge: this.bridgeName,
            role: this.role
          }
        }, 'SFU audio reconnect failed');
      });
    }
    handleBrokerFailure(error) {
      return new Promise((resolve, reject) => {
        this.clearConnectionTimeout();
        mapErrorCode(error);
        const {
          errorMessage,
          errorCause,
          errorCode
        } = error;
        const SETTINGS = window.meetingClientSettings;
        const MEDIA = SETTINGS.public.media;
        const RETRY_THROUGH_RELAY = MEDIA.audio.retryThroughRelay || false;
        if (!this.reconnecting) {
          if (this.broker.started) {
            logger.error({
              logCode: 'sfuaudio_error_try_to_reconnect',
              extraInfo: {
                errorMessage,
                errorCode,
                errorCause,
                bridge: this.bridgeName,
                role: this.role
              }
            }, 'SFU audio failed, try to reconnect');
            this.reconnect();
            return resolve();
          }
          if (RETRYABLE_ERRORS.includes(errorCode) && RETRY_THROUGH_RELAY) {
            logger.error({
              logCode: 'sfuaudio_error_retry_through_relay',
              extraInfo: {
                errorMessage,
                errorCode,
                errorCause,
                bridge: this.bridgeName,
                role: this.role
              }
            }, 'SFU audio failed to connect, retry through relay');
            this.reconnect({
              forceRelay: true
            });
            return resolve();
          }
        }

        // Already tried reconnecting once OR the user handn't successfully
        // connected firsthand and retrying isn't an option. Finish the session
        // and reject with the error
        logger.error({
          logCode: 'sfuaudio_error',
          extraInfo: {
            errorMessage,
            errorCode,
            errorCause,
            reconnecting: this.reconnecting,
            bridge: this.bridgeName,
            role: this.role
          }
        }, 'SFU audio failed');
        this.clearConnectionTimeout();
        this.broker.stop();
        this.callback({
          status: this.baseCallStates.failed,
          error: errorCode,
          bridgeError: errorMessage,
          bridge: this.bridgeName
        });
        return reject(error);
      });
    }
    handleTermination() {
      this.clearConnectionTimeout();
      return this.callback({
        status: this.baseCallStates.ended,
        bridge: this.bridgeName
      });
    }
    handleStart() {
      const SETTINGS = window.meetingClientSettings;
      const MEDIA = SETTINGS.public.media;
      const MEDIA_TAG = MEDIA.mediaTag.replace(/#/g, '');
      const stream = this.broker.webRtcPeer.getRemoteStream();
      const mediaElement = document.getElementById(MEDIA_TAG);
      return loadAndPlayMediaStream(stream, mediaElement, false).then(() => {
        this.callback({
          status: this.baseCallStates.started,
          bridge: this.bridgeName
        });
        this.clearConnectionTimeout();
        this.reconnecting = false;
      }).catch(error => {
        // NotAllowedError equals autoplay issues, fire autoplay handling event.
        // This will be handled in audio-manager.
        if (error.name === 'NotAllowedError') {
          logger.error({
            logCode: 'sfuaudio_error_autoplay',
            extraInfo: {
              errorName: error.name,
              bridge: this.bridgeName,
              role: this.role
            }
          }, 'SFU audio media play failed due to autoplay error');
          this.dispatchAutoplayHandlingEvent(mediaElement);
          // For connection purposes, this worked - the autoplay thing is a client
          // side soft issue to be handled at the UI/UX level, not WebRTC/negotiation
          // So: clear the connection timer
          this.clearConnectionTimeout();
          this.reconnecting = false;
        } else {
          const normalizedError = {
            errorCode: 1004,
            errorMessage: error.message || 'AUDIO_PLAY_FAILED'
          };
          this.callback({
            status: this.baseCallStates.failed,
            error: normalizedError.errorCode,
            bridgeError: normalizedError.errorMessage,
            bridge: this.bridgeName
          });
          throw normalizedError;
        }
      });
    }
    async _startBroker(options) {
      try {
        this.iceServers = await fetchWebRTCMappedStunTurnServers(this.sessionToken);
      } catch (error) {
        logger.error({
          logCode: 'sfuaudio_stun-turn_fetch_failed'
        }, 'SFU audio bridge failed to fetch STUN/TURN info, using default servers');
        this.iceServers = getMappedFallbackStun();
      }
      return new Promise((resolve, reject) => {
        const {
          isListenOnly,
          extension,
          inputStream,
          forceRelay: _forceRelay = false
        } = options;
        const SETTINGS = window.meetingClientSettings;
        const MEDIA = SETTINGS.public.media;
        const SIGNAL_CANDIDATES = SETTINGS.public.kurento.signalCandidates;
        const SFU_URL = SETTINGS.public.kurento.wsUrl;
        const TRACE_LOGS = SETTINGS.public.kurento.traceLogs;
        const GATHERING_TIMEOUT = SETTINGS.public.kurento.gatheringTimeout;
        const RETRY_THROUGH_RELAY = MEDIA.audio.retryThroughRelay || false;
        const {
          audio: NETWORK_PRIORITY
        } = MEDIA.networkPriorities || {};
        const handleInitError = _error => {
          mapErrorCode(_error);
          if (RETRYABLE_ERRORS.includes(_error === null || _error === void 0 ? void 0 : _error.errorCode) || !RETRY_THROUGH_RELAY || this.reconnecting) {
            reject(_error);
          }
        };
        try {
          this.inEchoTest = !!extension;
          this.isListenOnly = isListenOnly;
          const brokerOptions = {
            clientSessionNumber: getAudioSessionNumber(),
            extension,
            iceServers: this.iceServers,
            mediaServer: getMediaServerAdapter(isListenOnly),
            constraints: getAudioConstraints({
              deviceId: this.inputDeviceId
            }),
            forceRelay: _forceRelay || shouldForceRelay(),
            stream: inputStream && inputStream.active ? inputStream : undefined,
            offering: SFUAudioBridge.getOfferingRole(this.isListenOnly),
            signalCandidates: SIGNAL_CANDIDATES,
            traceLogs: TRACE_LOGS,
            networkPriority: NETWORK_PRIORITY,
            mediaStreamFactory: this.mediaStreamFactory,
            gatheringTimeout: GATHERING_TIMEOUT,
            transparentListenOnly: isTransparentListenOnlyEnabled()
          };
          this.broker = new AudioBroker(Auth.authenticateURL(SFU_URL), isListenOnly ? RECV_ROLE : SENDRECV_ROLE, brokerOptions);
          this.broker.onended = this.handleTermination.bind(this);
          this.broker.onerror = error => {
            this.handleBrokerFailure(error).catch(reject);
          };
          this.broker.onstart = () => {
            this.handleStart().then(resolve).catch(reject);
          };

          // Set up a connectionTimeout in case the server or network are botching
          // negotiation or conn checks.
          this.setConnectionTimeout();
          this.broker.joinAudio().catch(handleInitError);
        } catch (error) {
          handleInitError(error);
        }
      });
    }
    async joinAudio(options, callback) {
      this.callback = callback;
      this.reconnecting = false;
      return this._startBroker(options);
    }
    sendDtmf(tones) {
      if (this.broker) {
        this.broker.dtmf(tones);
      }
    }
    transferCall(onTransferSuccess) {
      this.inEchoTest = false;
      return this.trackTransferState(onTransferSuccess);
    }
    async updateAudioConstraints(constraints) {
      try {
        if (typeof constraints !== 'object') return;
        const matchConstraints = filterSupportedConstraints(constraints);
        if (IS_CHROME) {
          matchConstraints.deviceId = this.inputDeviceId;
          const stream = await doGUM({
            audio: matchConstraints
          });
          await this.setInputStream(stream);
        } else {
          this.inputStream.getAudioTracks().forEach(track => track.applyConstraints(matchConstraints));
        }
      } catch (error) {
        logger.error({
          logCode: 'sfuaudio_audio_constraint_error',
          extraInfo: {
            errorCode: error.code,
            errorMessage: error.message,
            bridgeName: this.bridgeName,
            role: this.role
          }
        }, 'Failed to update audio constraint');
      }
    }
    trickleIce() {
      return new Promise((resolve, reject) => {
        try {
          fetchWebRTCMappedStunTurnServers(this.sessionToken).then(iceServers => {
            const SETTINGS = window.meetingClientSettings;
            const MEDIA = SETTINGS.public.media;
            const SFU_URL = SETTINGS.public.kurento.wsUrl;
            const TRACE_LOGS = SETTINGS.public.kurento.traceLogs;
            const GATHERING_TIMEOUT = SETTINGS.public.kurento.gatheringTimeout;
            const LISTEN_ONLY_OFFERING = MEDIA.listenOnlyOffering;
            const options = {
              clientSessionNumber: getAudioSessionNumber(),
              iceServers,
              offering: LISTEN_ONLY_OFFERING,
              traceLogs: TRACE_LOGS,
              gatheringTimeout: GATHERING_TIMEOUT
            };
            this.broker = new AudioBroker(Auth.authenticateURL(SFU_URL), RECV_ROLE, options);
            this.broker.onstart = () => {
              const {
                peerConnection
              } = this.broker.webRtcPeer;
              if (!peerConnection) return resolve(null);
              const selectedCandidatePair = peerConnection.getReceivers()[0].transport.iceTransport.getSelectedCandidatePair();
              const validIceCandidate = [selectedCandidatePair.local];
              this.broker.stop();
              return resolve(validIceCandidate);
            };
            this.broker.joinAudio().catch(reject);
          });
        } catch (error) {
          // Rollback
          this.exitAudio();
          reject(error);
        }
      });
    }
    exitAudio() {
      const SETTINGS = window.meetingClientSettings;
      const MEDIA = SETTINGS.public.media;
      const MEDIA_TAG = MEDIA.mediaTag.replace(/#/g, '');
      const mediaElement = document.getElementById(MEDIA_TAG);
      this.clearConnectionTimeout();
      this.reconnecting = false;
      if (this.broker) {
        this.broker.stop();
        this.broker = null;
      }
      if (mediaElement && typeof mediaElement.pause === 'function') {
        mediaElement.pause();
        mediaElement.srcObject = null;
      }
      return Promise.resolve();
    }
  }
  module.exports = SFUAudioBridge;
}.call(this, module);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sip.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/audio/client/bridge/sip.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function (module1) {
  module1.export({
    default: () => SIPBridge
  });
  let BaseAudioBridge;
  module1.link("./base", {
    default(v) {
      BaseAudioBridge = v;
    }
  }, 0);
  let logger;
  module1.link("/imports/startup/client/logger", {
    default(v) {
      logger = v;
    }
  }, 1);
  let fetchWebRTCMappedStunTurnServers, getMappedFallbackStun;
  module1.link("/imports/utils/fetchStunTurnServers", {
    fetchWebRTCMappedStunTurnServers(v) {
      fetchWebRTCMappedStunTurnServers = v;
    },
    getMappedFallbackStun(v) {
      getMappedFallbackStun = v;
    }
  }, 2);
  let isUnifiedPlan, toUnifiedPlan, toPlanB, stripMDnsCandidates, filterValidIceCandidates, analyzeSdp, logSelectedCandidate, forceDisableStereo;
  module1.link("/imports/utils/sdpUtils", {
    isUnifiedPlan(v) {
      isUnifiedPlan = v;
    },
    toUnifiedPlan(v) {
      toUnifiedPlan = v;
    },
    toPlanB(v) {
      toPlanB = v;
    },
    stripMDnsCandidates(v) {
      stripMDnsCandidates = v;
    },
    filterValidIceCandidates(v) {
      filterValidIceCandidates = v;
    },
    analyzeSdp(v) {
      analyzeSdp = v;
    },
    logSelectedCandidate(v) {
      logSelectedCandidate = v;
    },
    forceDisableStereo(v) {
      forceDisableStereo = v;
    }
  }, 3);
  let browserInfo;
  module1.link("/imports/utils/browserInfo", {
    default(v) {
      browserInfo = v;
    }
  }, 4);
  let getAudioSessionNumber, getAudioConstraints, filterSupportedConstraints, doGUM, stereoUnsupported;
  module1.link("/imports/api/audio/client/bridge/service", {
    getAudioSessionNumber(v) {
      getAudioSessionNumber = v;
    },
    getAudioConstraints(v) {
      getAudioConstraints = v;
    },
    filterSupportedConstraints(v) {
      filterSupportedConstraints = v;
    },
    doGUM(v) {
      doGUM = v;
    },
    stereoUnsupported(v) {
      stereoUnsupported = v;
    }
  }, 5);
  const CALL_CONNECT_TIMEOUT = 20000;
  const ICE_NEGOTIATION_TIMEOUT = 20000;
  const BRIDGE_NAME = 'sip';

  /**
    * Get error code from SIP.js websocket messages.
   */
  const getErrorCode = error => {
    try {
      if (!error) return error;
      const match = error.message.match(/code: \d+/g);
      const _codeArray = match[0].split(':');
      return parseInt(_codeArray[1].trim(), 10);
    } catch (e) {
      return 0;
    }
  };
  class SIPSession {
    constructor(user, userData, protocol, hostname, baseCallStates, baseErrorCodes, reconnectAttempt) {
      this.user = user;
      this.userData = userData;
      this.protocol = protocol;
      this.hostname = hostname;
      this.baseCallStates = baseCallStates;
      this.baseErrorCodes = baseErrorCodes;
      this.reconnectAttempt = reconnectAttempt;
      this.currentSession = null;
      this.remoteStream = null;
      this.bridgeName = BRIDGE_NAME;
      this._inputDeviceId = null;
      this._outputDeviceId = null;
      this._hangupFlag = false;
      this._reconnecting = false;
      this._currentSessionState = null;
      this._ignoreCallState = false;
      this.mediaStreamFactory = this.mediaStreamFactory.bind(this);
    }
    get inputStream() {
      if (this.currentSession && this.currentSession.sessionDescriptionHandler) {
        return this.currentSession.sessionDescriptionHandler.localMediaStream;
      }
      return null;
    }

    /**
     * Set the input stream for the peer that represents the current session.
     * Internally, this will call the sender's replaceTrack function.
     * @param  {MediaStream}  stream The MediaStream object to be used as input
     *                               stream
     * @return {Promise}            A Promise that is resolved with the
     *                              MediaStream object that was set.
     */
    setInputStream(stream) {
      var _this$currentSession;
      if (!((_this$currentSession = this.currentSession) !== null && _this$currentSession !== void 0 && _this$currentSession.sessionDescriptionHandler)) return null;
      return this.currentSession.sessionDescriptionHandler.setLocalMediaStream(stream);
    }
    get inputDeviceId() {
      if (!this._inputDeviceId) {
        const stream = this.inputStream;
        if (stream) {
          const track = stream.getAudioTracks().find(t => t.getSettings().deviceId);
          if (track && typeof track.getSettings === 'function') {
            const {
              deviceId
            } = track.getSettings();
            this._inputDeviceId = deviceId;
          }
        }
      }
      return this._inputDeviceId;
    }
    set inputDeviceId(deviceId) {
      this._inputDeviceId = deviceId;
    }
    get outputDeviceId() {
      if (!this._outputDeviceId) {
        const MEDIA = window.meetingClientSettings.public.media;
        const MEDIA_TAG = MEDIA.mediaTag;
        const audioElement = document.querySelector(MEDIA_TAG);
        if (audioElement) {
          this._outputDeviceId = audioElement.sinkId;
        }
      }
      return this._outputDeviceId;
    }
    set outputDeviceId(deviceId) {
      this._outputDeviceId = deviceId;
    }

    /**
     * This _ignoreCallState flag is set to true when we want to ignore SIP's
     * call state retrieved directly from FreeSWITCH ESL, when doing some checks
     * (for example , when checking  if call stopped).
     * We need to ignore this , for example, when moderator is in
     * breakout audio transfer ("Join Audio" button in breakout panel): in this
     * case , we will monitor moderator's lifecycle in audio conference by
     * using the SIP state taken from SIP.js only (ignoring the ESL's call state).
     * @param {boolean} value true to ignore call state, false otherwise.
     */
    set ignoreCallState(value) {
      this._ignoreCallState = value;
    }
    get ignoreCallState() {
      return this._ignoreCallState;
    }
    joinAudio(_ref, managerCallback) {
      let {
        isListenOnly,
        extension,
        inputDeviceId,
        outputDeviceId,
        validIceCandidates,
        inputStream
      } = _ref;
      return new Promise((resolve, reject) => {
        const callExtension = extension ? "".concat(extension).concat(this.userData.voiceBridge) : this.userData.voiceBridge;
        this.ignoreCallState = false;
        const callback = message => {
          // There will sometimes we erroneous errors put out like timeouts and improper shutdowns,
          // but only the first error ever matters
          if (this.alreadyErrored) {
            logger.info({
              logCode: 'sip_js_absorbing_callback_message',
              extraInfo: {
                message
              }
            }, 'Absorbing a redundant callback message.');
            return;
          }
          if (message.status === this.baseCallStates.failed) {
            this.alreadyErrored = true;
          }
          managerCallback(message).then(resolve);
        };
        this.callback = callback;

        // If there's an extension passed it means that we're joining the echo test first
        this.inEchoTest = !!extension;
        this.validIceCandidates = validIceCandidates;
        return this.doCall({
          callExtension,
          isListenOnly,
          inputDeviceId,
          outputDeviceId,
          inputStream
        }).catch(reason => {
          reject(reason);
        });
      });
    }
    async getIceServers(sessionToken) {
      try {
        const iceServers = await fetchWebRTCMappedStunTurnServers(sessionToken);
        return iceServers;
      } catch (error) {
        logger.error({
          logCode: 'sip_js_fetchstunturninfo_error',
          extraInfo: {
            errorCode: error.code,
            errorMessage: error.message,
            callerIdName: this.user.callerIdName
          }
        }, 'Full audio bridge failed to fetch STUN/TURN info');
        return getMappedFallbackStun();
      }
    }
    doCall(options) {
      const {
        isListenOnly,
        inputDeviceId,
        outputDeviceId,
        inputStream
      } = options;
      this.inputDeviceId = inputDeviceId;
      this.outputDeviceId = outputDeviceId;
      // If a valid MediaStream was provided it means it was preloaded somewhere
      // else - let's use it so we don't call gUM needlessly
      if (inputStream && inputStream.active) this.preloadedInputStream = inputStream;
      const {
        userId,
        name,
        sessionToken
      } = this.user;
      const callerIdName = ["".concat(userId, "_").concat(getAudioSessionNumber()), 'bbbID', isListenOnly ? "LISTENONLY-".concat(name) : name].join('-').replace(/"/g, "'");
      this.user.callerIdName = callerIdName;
      this.callOptions = options;
      return this.getIceServers(sessionToken).then(this.createUserAgent.bind(this)).then(this.inviteUserAgent.bind(this));
    }

    /**
      *
      * sessionSupportRTPPayloadDtmf
      * tells if browser support RFC4733 DTMF.
      * Safari 13 doesn't support it yet
      */
    sessionSupportRTPPayloadDtmf(session) {
      try {
        const sessionDescriptionHandler = session ? session.sessionDescriptionHandler : this.currentSession.sessionDescriptionHandler;
        const senders = sessionDescriptionHandler.peerConnection.getSenders();
        return !!senders[0].dtmf;
      } catch (error) {
        return false;
      }
    }

    /**
      * sendDtmf - send DTMF Tones using INFO message
      *
      * same as SimpleUser's dtmf
      */
    sendDtmf(tone) {
      const dtmf = tone;
      const duration = 2000;
      const body = {
        contentDisposition: 'render',
        contentType: 'application/dtmf-relay',
        content: "Signal=".concat(dtmf, "\r\nDuration=").concat(duration)
      };
      const requestOptions = {
        body
      };
      return this.currentSession.info({
        requestOptions
      });
    }
    exitAudio() {
      return new Promise((resolve, reject) => {
        let hangupRetries = 0;
        this._hangupFlag = false;
        this.userRequestedHangup = true;
        const MEDIA = window.meetingClientSettings.public.media;
        const CALL_HANGUP_TIMEOUT = MEDIA.callHangupTimeout;
        const CALL_HANGUP_MAX_RETRIES = MEDIA.callHangupMaximumRetries;
        const tryHangup = () => {
          if (this._hangupFlag) {
            resolve();
          }
          if (this.currentSession && this.currentSession.state === SIP.SessionState.Terminated || this.userAgent && !this.userAgent.isConnected()) {
            this._hangupFlag = true;
            return resolve();
          }
          if (this.currentSession && this.currentSession.state === SIP.SessionState.Establishing) {
            this.currentSession.cancel().then(() => {
              this._hangupFlag = true;
              return resolve();
            });
          }
          if (this.currentSession && this.currentSession.state === SIP.SessionState.Established) {
            this.currentSession.bye().then(() => {
              this._hangupFlag = true;
              return resolve();
            });
          }
          if (this.userAgent && this.userAgent.isConnected()) {
            this.userAgent.stop();
            window.removeEventListener('beforeunload', this.onBeforeUnload);
          }
          hangupRetries += 1;
          setTimeout(() => {
            if (hangupRetries > CALL_HANGUP_MAX_RETRIES) {
              this.callback({
                status: this.baseCallStates.failed,
                error: 1006,
                bridgeError: 'Timeout on call hangup',
                bridge: this.bridgeName
              });
              return reject(this.baseErrorCodes.REQUEST_TIMEOUT);
            }
            if (!this._hangupFlag) return tryHangup();
            return resolve();
          }, CALL_HANGUP_TIMEOUT);
        };
        return tryHangup();
      });
    }
    stopUserAgent() {
      if (this.userAgent && typeof this.userAgent.stop === 'function') {
        return this.userAgent.stop();
      }
      return Promise.resolve();
    }
    onBeforeUnload() {
      this.userRequestedHangup = true;
      return this.stopUserAgent();
    }
    mediaStreamFactory(constraints) {
      if (this.preloadedInputStream && this.preloadedInputStream.active) {
        return Promise.resolve(this.preloadedInputStream);
      }
      // The rest of this mimics the default factory behavior.
      if (!constraints.audio && !constraints.video) {
        return Promise.resolve(new MediaStream());
      }
      return doGUM(constraints, true);
    }
    createUserAgent(iceServers) {
      return new Promise((resolve, reject) => {
        const MEDIA = window.meetingClientSettings.public.media;
        const SIPJS_HACK_VIA_WS = MEDIA.sipjsHackViaWs;
        const USER_AGENT_RECONNECTION_ATTEMPTS = MEDIA.audioReconnectionAttempts || 3;
        const USER_AGENT_CONNECTION_TIMEOUT_MS = MEDIA.audioConnectionTimeout || 5000;
        const WEBSOCKET_KEEP_ALIVE_INTERVAL = MEDIA.websocketKeepAliveInterval || 0;
        const WEBSOCKET_KEEP_ALIVE_DEBOUNCE = MEDIA.websocketKeepAliveDebounce || 10;
        const TRACE_SIP = MEDIA.traceSip || false;
        const SDP_SEMANTICS = MEDIA.sdpSemantics;
        const FORCE_RELAY = MEDIA.forceRelay;
        const UA_SERVER_VERSION = window.meetingClientSettings.public.app.bbbServerVersion;
        const UA_CLIENT_VERSION = window.meetingClientSettings.public.app.html5ClientBuild;
        if (this.userRequestedHangup === true) reject();
        const {
          hostname,
          protocol
        } = this;
        const {
          callerIdName,
          sessionToken
        } = this.user;
        logger.debug({
          logCode: 'sip_js_creating_user_agent',
          extraInfo: {
            callerIdName
          }
        }, 'Creating the user agent');
        if (this.userAgent && this.userAgent.isConnected()) {
          if (this.userAgent.configuration.hostPortParams === this.hostname) {
            logger.debug({
              logCode: 'sip_js_reusing_user_agent',
              extraInfo: {
                callerIdName
              }
            }, 'Reusing the user agent');
            resolve(this.userAgent);
            return;
          }
          logger.debug({
            logCode: 'sip_js_different_host_name',
            extraInfo: {
              callerIdName
            }
          }, 'Different host name. need to kill');
        }
        const localSdpCallback = sdp => {
          // For now we just need to call the utils function to parse and log the different pieces.
          // In the future we're going to want to be tracking whether there were TURN candidates
          // and IPv4 candidates to make informed decisions about what to do on fallbacks/reconnects.
          analyzeSdp(sdp);
        };
        const remoteSdpCallback = sdp => {
          // We have have to find the candidate that FS sends back to us to determine if the client
          // is connecting with IPv4 or IPv6
          const sdpInfo = analyzeSdp(sdp, false);
          this.protocolIsIpv6 = sdpInfo.v6Info.found;
        };
        let userAgentConnected = false;
        const token = "sessionToken=".concat(sessionToken);

        // Create session description handler factory
        const customSDHFactory = SIP.Web.defaultSessionDescriptionHandlerFactory(this.mediaStreamFactory);
        this.userAgent = new SIP.UserAgent({
          uri: SIP.UserAgent.makeURI("sip:".concat(encodeURIComponent(callerIdName), "@").concat(hostname)),
          transportOptions: {
            server: "".concat(protocol === 'https:' ? 'wss://' : 'ws://').concat(hostname, "/ws?").concat(token),
            connectionTimeout: USER_AGENT_CONNECTION_TIMEOUT_MS,
            keepAliveInterval: WEBSOCKET_KEEP_ALIVE_INTERVAL,
            keepAliveDebounce: WEBSOCKET_KEEP_ALIVE_DEBOUNCE,
            traceSip: TRACE_SIP
          },
          sessionDescriptionHandlerFactory: customSDHFactory,
          sessionDescriptionHandlerFactoryOptions: {
            peerConnectionConfiguration: {
              iceServers,
              sdpSemantics: SDP_SEMANTICS,
              iceTransportPolicy: FORCE_RELAY ? 'relay' : undefined
            }
          },
          displayName: callerIdName,
          register: false,
          userAgentString: "BigBlueButton/".concat(UA_SERVER_VERSION, " (HTML5, rv:").concat(UA_CLIENT_VERSION, ") ").concat(window.navigator.userAgent),
          hackViaWs: SIPJS_HACK_VIA_WS
        });
        const handleUserAgentConnection = () => {
          if (!userAgentConnected) {
            userAgentConnected = true;
            resolve(this.userAgent);
          }
        };
        const handleUserAgentDisconnection = () => {
          if (this.userAgent) {
            if (this.userRequestedHangup) {
              userAgentConnected = false;
              return;
            }
            let error;
            let bridgeError;
            if (!this._reconnecting) {
              logger.info({
                logCode: 'sip_js_session_ua_disconnected',
                extraInfo: {
                  callerIdName: this.user.callerIdName
                }
              }, 'User agent disconnected: trying to reconnect...' + " (userHangup = ".concat(!!this.userRequestedHangup, ")"));
              logger.info({
                logCode: 'sip_js_session_ua_reconnecting',
                extraInfo: {
                  callerIdName: this.user.callerIdName
                }
              }, 'User agent disconnected, reconnecting');
              this.reconnect().then(() => {
                logger.info({
                  logCode: 'sip_js_session_ua_reconnected',
                  extraInfo: {
                    callerIdName: this.user.callerIdName
                  }
                }, 'User agent successfully reconnected');
              }).catch(() => {
                if (userAgentConnected) {
                  error = 1001;
                  bridgeError = 'Websocket disconnected';
                } else {
                  error = 1002;
                  bridgeError = 'Websocket failed to connect';
                }
                this.stopUserAgent();
                this.callback({
                  status: this.baseCallStates.failed,
                  error,
                  bridgeError,
                  bridge: this.bridgeName
                });
                reject(this.baseErrorCodes.CONNECTION_ERROR);
              });
            }
          }
        };
        this.userAgent.transport.onConnect = handleUserAgentConnection;
        this.userAgent.transport.onDisconnect = handleUserAgentDisconnection;
        const preturn = this.userAgent.start().then(() => {
          logger.info({
            logCode: 'sip_js_session_ua_connected',
            extraInfo: {
              callerIdName: this.user.callerIdName
            }
          }, 'User agent successfully connected');
          window.addEventListener('beforeunload', this.onBeforeUnload.bind(this));
          resolve();
        }).catch(error => {
          logger.info({
            logCode: 'sip_js_session_ua_reconnecting',
            extraInfo: {
              callerIdName: this.user.callerIdName
            }
          }, 'User agent failed to connect, reconnecting');
          const code = getErrorCode(error);

          // Websocket's 1006 is currently mapped to BBB's 1002
          if (code === 1006) {
            this.stopUserAgent();
            this.callback({
              status: this.baseCallStates.failed,
              error: 1002,
              bridgeError: 'Websocket failed to connect',
              bridge: this.bridgeName
            });
            return reject({
              type: this.baseErrorCodes.CONNECTION_ERROR
            });
          }
          this.reconnect().then(() => {
            logger.info({
              logCode: 'sip_js_session_ua_reconnected',
              extraInfo: {
                callerIdName: this.user.callerIdName
              }
            }, 'User agent successfully reconnected');
            resolve();
          }).catch(() => {
            this.stopUserAgent();
            logger.info({
              logCode: 'sip_js_session_ua_disconnected',
              extraInfo: {
                callerIdName: this.user.callerIdName
              }
            }, 'User agent failed to reconnect after' + " ".concat(USER_AGENT_RECONNECTION_ATTEMPTS, " attempts"));
            this.callback({
              status: this.baseCallStates.failed,
              error: 1002,
              bridgeError: 'Websocket failed to connect',
              bridge: this.bridgeName
            });
            reject({
              type: this.baseErrorCodes.CONNECTION_ERROR
            });
          });
        });
        return preturn;
      });
    }
    reconnect() {
      let attempts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return new Promise((resolve, reject) => {
        if (this._reconnecting) {
          return resolve();
        }
        const MEDIA = window.meetingClientSettings.public.media;
        const USER_AGENT_RECONNECTION_ATTEMPTS = MEDIA.audioReconnectionAttempts || 3;
        const USER_AGENT_RECONNECTION_DELAY_MS = MEDIA.audioReconnectionDelay || 5000;
        if (attempts > USER_AGENT_RECONNECTION_ATTEMPTS) {
          return reject({
            type: this.baseErrorCodes.CONNECTION_ERROR
          });
        }
        this._reconnecting = true;
        logger.info({
          logCode: 'sip_js_session_ua_reconnection_attempt',
          extraInfo: {
            callerIdName: this.user.callerIdName
          }
        }, "User agent reconnection attempt ".concat(attempts));
        this.userAgent.reconnect().then(() => {
          this._reconnecting = false;
          resolve();
        }).catch(() => {
          setTimeout(() => {
            this._reconnecting = false;
            this.reconnect(++attempts).then(() => {
              resolve();
            }).catch(error => {
              reject(error);
            });
          }, USER_AGENT_RECONNECTION_DELAY_MS);
        });
      });
    }
    isValidIceCandidate(event) {
      return event.candidate && this.validIceCandidates && this.validIceCandidates.find(validCandidate => (validCandidate.address === event.candidate.address || validCandidate.relatedAddress === event.candidate.address) && validCandidate.protocol === event.candidate.protocol);
    }
    onIceGatheringStateChange(event) {
      const iceGatheringState = event.target ? event.target.iceGatheringState : null;
      if (iceGatheringState === 'gathering' && !this._iceGatheringStartTime) {
        this._iceGatheringStartTime = new Date();
      }
      if (iceGatheringState === 'complete') {
        const secondsToGatherIce = (new Date() - (this._iceGatheringStartTime || this._sessionStartTime)) / 1000;
        logger.info({
          logCode: 'sip_js_ice_gathering_time',
          extraInfo: {
            callerIdName: this.user.callerIdName,
            secondsToGatherIce
          }
        }, "ICE gathering candidates took (s): ".concat(secondsToGatherIce));
      }
    }
    onIceCandidate(sessionDescriptionHandler, event) {
      if (this.isValidIceCandidate(event)) {
        logger.info({
          logCode: 'sip_js_found_valid_candidate_from_trickle_ice',
          extraInfo: {
            callerIdName: this.user.callerIdName
          }
        }, 'Found a valid candidate from trickle ICE, finishing gathering');
        if (sessionDescriptionHandler.iceGatheringCompleteResolve) {
          sessionDescriptionHandler.iceGatheringCompleteResolve();
        }
      }
    }
    initSessionDescriptionHandler(sessionDescriptionHandler) {
      /* eslint-disable no-param-reassign */
      sessionDescriptionHandler.peerConnectionDelegate = {
        onicecandidate: this.onIceCandidate.bind(this, sessionDescriptionHandler),
        onicegatheringstatechange: this.onIceGatheringStateChange.bind(this)
      };
      /* eslint-enable no-param-reassign */
    }

    inviteUserAgent(userAgent) {
      return new Promise((resolve, reject) => {
        if (this.userRequestedHangup === true) reject();
        const {
          hostname
        } = this;
        const {
          callExtension,
          isListenOnly
        } = this.callOptions;
        this._sessionStartTime = new Date();
        const target = SIP.UserAgent.makeURI("sip:".concat(callExtension, "@").concat(hostname));
        const matchConstraints = getAudioConstraints({
          deviceId: this.inputDeviceId
        });
        const sessionDescriptionHandlerModifiers = [];
        const iceModifiers = [filterValidIceCandidates.bind(this, this.validIceCandidates)];
        const MEDIA = window.meetingClientSettings.public.media;
        const SIPJS_ALLOW_MDNS = MEDIA.sipjsAllowMdns || false;
        const ICE_GATHERING_TIMEOUT = MEDIA.iceGatheringTimeout || 5000;
        if (!SIPJS_ALLOW_MDNS) iceModifiers.push(stripMDnsCandidates);

        // The current Vosk provider does not support stereo when transcribing
        // microphone streams, so we need to make sure it is forcefully disabled
        // via SDP munging. Having it disabled on server side FS _does not suffice_
        // because the stereo parameter is client-mandated (ie replicated in the
        // answer)
        if (stereoUnsupported()) {
          logger.debug({
            logCode: 'sipjs_transcription_disable_stereo'
          }, 'Transcription provider does not support stereo, forcing stereo=0');
          sessionDescriptionHandlerModifiers.push(forceDisableStereo);
        }
        const inviterOptions = {
          sessionDescriptionHandlerOptions: {
            constraints: {
              audio: isListenOnly ? false : matchConstraints,
              video: false
            },
            iceGatheringTimeout: ICE_GATHERING_TIMEOUT
          },
          sessionDescriptionHandlerModifiers,
          sessionDescriptionHandlerModifiersPostICEGathering: iceModifiers,
          delegate: {
            onSessionDescriptionHandler: this.initSessionDescriptionHandler.bind(this)
          }
        };
        if (isListenOnly) {
          inviterOptions.sessionDescriptionHandlerOptions.offerOptions = {
            offerToReceiveAudio: true
          };
        }
        const inviter = new SIP.Inviter(userAgent, target, inviterOptions);
        this.currentSession = inviter;
        this.setupEventHandlers(inviter).then(() => {
          inviter.invite().then(() => {
            resolve();
          }).catch(e => reject(e));
        });
      });
    }
    setupEventHandlers(currentSession) {
      return new Promise((resolve, reject) => {
        if (this.userRequestedHangup === true) reject();
        let iceCompleted = false;
        let fsReady = false;
        let sessionTerminated = false;
        const setupRemoteMedia = () => {
          const MEDIA = window.meetingClientSettings.public.media;
          const MEDIA_TAG = MEDIA.mediaTag;
          const mediaElement = document.querySelector(MEDIA_TAG);
          const {
            sdp
          } = this.currentSession.sessionDescriptionHandler.peerConnection.remoteDescription;
          logger.info({
            logCode: 'sip_js_session_setup_remote_media',
            extraInfo: {
              callerIdName: this.user.callerIdName,
              sdp
            }
          }, 'Audio call - setup remote media');
          this.remoteStream = new MediaStream();
          this.currentSession.sessionDescriptionHandler.peerConnection.getReceivers().forEach(receiver => {
            if (receiver.track) {
              this.remoteStream.addTrack(receiver.track);
            }
          });
          logger.info({
            logCode: 'sip_js_session_playing_remote_media',
            extraInfo: {
              callerIdName: this.user.callerIdName
            }
          }, 'Audio call - playing remote media');
          mediaElement.srcObject = this.remoteStream;
          mediaElement.play();
        };
        const checkIfCallReady = () => {
          if (this.userRequestedHangup === true) {
            this.exitAudio();
            resolve();
          }
          logger.info({
            logCode: 'sip_js_session_check_if_call_ready',
            extraInfo: {
              iceCompleted,
              fsReady
            }
          }, 'Audio call - check if ICE is finished and FreeSWITCH is ready');
          if (iceCompleted) {
            this.webrtcConnected = true;
            setupRemoteMedia();
          }
          if (fsReady) {
            this.callback({
              status: this.baseCallStates.started,
              bridge: this.bridgeName
            });
            resolve();
          }
        };

        // Sometimes FreeSWITCH just won't respond with anything and hangs. This timeout is to
        // avoid that issue
        const callTimeout = setTimeout(() => {
          this.callback({
            status: this.baseCallStates.failed,
            error: 1006,
            bridgeError: "Call timed out on start after ".concat(CALL_CONNECT_TIMEOUT / 1000, "s"),
            bridge: this.bridgeName
          });
          this.exitAudio();
        }, CALL_CONNECT_TIMEOUT);
        let iceNegotiationTimeout;
        const handleSessionAccepted = () => {
          logger.info({
            logCode: 'sip_js_session_accepted',
            extraInfo: {
              callerIdName: this.user.callerIdName
            }
          }, 'Audio call session accepted');
          clearTimeout(callTimeout);

          // If ICE isn't connected yet then start timeout waiting for ICE to finish
          if (!iceCompleted) {
            iceNegotiationTimeout = setTimeout(() => {
              this.callback({
                status: this.baseCallStates.failed,
                error: 1010,
                bridgeError: 'ICE negotiation timeout after ' + "".concat(ICE_NEGOTIATION_TIMEOUT / 1000, "s"),
                bridge: this.bridgeName
              });
              this.exitAudio();
              reject({
                type: this.baseErrorCodes.CONNECTION_ERROR
              });
            }, ICE_NEGOTIATION_TIMEOUT);
          }
          checkIfCallReady();
        };
        const handleIceNegotiationFailed = peer => {
          if (iceCompleted) {
            logger.warn({
              logCode: 'sipjs_ice_failed_after',
              extraInfo: {
                callerIdName: this.user.callerIdName
              }
            }, 'ICE connection failed after success');
          } else {
            logger.warn({
              logCode: 'sipjs_ice_failed_before',
              extraInfo: {
                callerIdName: this.user.callerIdName
              }
            }, 'ICE connection failed before success');
          }
          clearTimeout(callTimeout);
          clearTimeout(iceNegotiationTimeout);
          this.callback({
            status: this.baseCallStates.failed,
            error: 1007,
            bridgeError: 'ICE negotiation failed. Current state ' + "- ".concat(peer.iceConnectionState),
            bridge: this.bridgeName
          });
        };
        const handleIceConnectionTerminated = peer => {
          if (!this.userRequestedHangup) {
            logger.warn({
              logCode: 'sipjs_ice_closed',
              extraInfo: {
                callerIdName: this.user.callerIdName
              }
            }, 'ICE connection closed');
          } else return;
          this.callback({
            status: this.baseCallStates.failed,
            error: 1012,
            bridgeError: 'ICE connection closed. Current state -' + "".concat(peer.iceConnectionState),
            bridge: this.bridgeName
          });
        };
        const handleSessionProgress = update => {
          logger.info({
            logCode: 'sip_js_session_progress',
            extraInfo: {
              callerIdName: this.user.callerIdName,
              update
            }
          }, 'Audio call session progress update');
          this.currentSession.sessionDescriptionHandler.peerConnectionDelegate.onconnectionstatechange = event => {
            const peer = event.target;
            logger.info({
              logCode: 'sip_js_connection_state_change',
              extraInfo: {
                connectionStateChange: peer.connectionState,
                callerIdName: this.user.callerIdName
              }
            }, 'ICE connection state change - Current connection state - ' + "".concat(peer.connectionState));
            switch (peer.connectionState) {
              case 'failed':
                // Chrome triggers 'failed' for connectionState event, only
                handleIceNegotiationFailed(peer);
                break;
              default:
                break;
            }
          };
          this.currentSession.sessionDescriptionHandler.peerConnectionDelegate.oniceconnectionstatechange = event => {
            const peer = event.target;
            switch (peer.iceConnectionState) {
              case 'completed':
              case 'connected':
                if (iceCompleted) {
                  logger.info({
                    logCode: 'sip_js_ice_connection_success_after_success',
                    extraInfo: {
                      currentState: peer.connectionState,
                      callerIdName: this.user.callerIdName
                    }
                  }, 'ICE connection success, but user is already connected, ' + 'ignoring it...' + "".concat(peer.iceConnectionState));
                  return;
                }
                logger.info({
                  logCode: 'sip_js_ice_connection_success',
                  extraInfo: {
                    currentState: peer.connectionState,
                    callerIdName: this.user.callerIdName
                  }
                }, 'ICE connection success. Current ICE Connection state - ' + "".concat(peer.iceConnectionState));
                clearTimeout(callTimeout);
                clearTimeout(iceNegotiationTimeout);
                iceCompleted = true;
                logSelectedCandidate(peer, this.protocolIsIpv6);
                checkIfCallReady();
                break;
              case 'failed':
                handleIceNegotiationFailed(peer);
                break;
              case 'closed':
                handleIceConnectionTerminated(peer);
                break;
              default:
                break;
            }
          };
        };
        const checkIfCallStopped = message => {
          if (!this.ignoreCallState && fsReady || !sessionTerminated) {
            return null;
          }
          if (!message && !!this.userRequestedHangup) {
            return this.callback({
              status: this.baseCallStates.ended,
              bridge: this.bridgeName
            });
          }

          // if session hasn't even started, we let audio-modal to handle
          // any possible errors
          if (!this._currentSessionState) return false;
          let mappedCause;
          let cause;
          if (!iceCompleted) {
            mappedCause = '1004';
            cause = 'ICE error';
          } else {
            cause = 'Audio Conference Error';
            mappedCause = '1005';
          }
          logger.warn({
            logCode: 'sip_js_call_terminated',
            extraInfo: {
              cause,
              callerIdName: this.user.callerIdName
            }
          }, "Audio call terminated. cause=".concat(cause));
          return this.callback({
            status: this.baseCallStates.failed,
            error: mappedCause,
            bridgeError: cause,
            bridge: this.bridgeName
          });
        };
        const handleSessionTerminated = message => {
          logger.info({
            logCode: 'sip_js_session_terminated',
            extraInfo: {
              callerIdName: this.user.callerIdName
            }
          }, 'SIP.js session terminated');
          clearTimeout(callTimeout);
          clearTimeout(iceNegotiationTimeout);
          sessionTerminated = true;
          checkIfCallStopped();
        };
        currentSession.stateChange.addListener(state => {
          switch (state) {
            case SIP.SessionState.Initial:
              break;
            case SIP.SessionState.Establishing:
              handleSessionProgress();
              break;
            case SIP.SessionState.Established:
              handleSessionAccepted();
              break;
            case SIP.SessionState.Terminating:
              break;
            case SIP.SessionState.Terminated:
              handleSessionTerminated();
              break;
            default:
              logger.warn({
                logCode: 'sipjs_ice_session_unknown_state',
                extraInfo: {
                  callerIdName: this.user.callerIdName
                }
              }, 'SIP.js unknown session state');
              break;
          }
          this._currentSessionState = state;
        });
        resolve();
      });
    }

    /**
     * Update audio constraints for current local MediaStream (microphone)
     * @param  {Object}  constraints MediaTrackConstraints object. See:
     * https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints
     * @return {Promise}             A Promise for this process
     */
    async updateAudioConstraints(constraints) {
      try {
        if (typeof constraints !== 'object') return;
        logger.info({
          logCode: 'sipjs_update_audio_constraint',
          extraInfo: {
            callerIdName: this.user.callerIdName
          }
        }, 'SIP.js updating audio constraint');
        const matchConstraints = filterSupportedConstraints(constraints);

        //Chromium bug - see: https://bugs.chromium.org/p/chromium/issues/detail?id=796964&q=applyConstraints&can=2
        const {
          isChrome
        } = browserInfo;
        if (isChrome) {
          matchConstraints.deviceId = this.inputDeviceId;
          const stream = await doGUM({
            audio: matchConstraints
          });
          this.currentSession.sessionDescriptionHandler.setLocalMediaStream(stream);
        } else {
          const {
            localMediaStream
          } = this.currentSession.sessionDescriptionHandler;
          localMediaStream.getAudioTracks().forEach(track => track.applyConstraints(matchConstraints));
        }
      } catch (error) {
        logger.error({
          logCode: 'sipjs_audio_constraint_error',
          extraInfo: {
            callerIdName: this.user.callerIdName
          }
        }, 'SIP.js failed to update audio constraint');
      }
    }
  }
  class SIPBridge extends BaseAudioBridge {
    constructor(userData) {
      super(userData);
      const MEDIA = window.meetingClientSettings.public.media;
      const {
        userId,
        username,
        sessionToken
      } = userData;
      this.user = {
        userId,
        sessionToken,
        name: username
      };
      this.protocol = window.document.location.protocol;
      if (MEDIA['sip_ws_host'] != null && MEDIA['sip_ws_host'] != '') {
        this.hostname = MEDIA.sip_ws_host;
      } else {
        this.hostname = window.document.location.hostname;
      }
      this.bridgeName = BRIDGE_NAME;

      // SDP conversion utilitary methods to be used inside SIP.js
      window.isUnifiedPlan = isUnifiedPlan;
      window.toUnifiedPlan = toUnifiedPlan;
      window.toPlanB = toPlanB;
      window.stripMDnsCandidates = stripMDnsCandidates;

      // No easy way to expose the client logger to sip.js code so we need to attach it globally
      window.clientLogger = logger;
    }
    get inputStream() {
      return this.activeSession ? this.activeSession.inputStream : null;
    }

    /**
     * Wrapper for SIPSession's ignoreCallState flag
     * @param {boolean} value
     */
    set ignoreCallState(value) {
      if (this.activeSession) {
        this.activeSession.ignoreCallState = value;
      }
    }
    get ignoreCallState() {
      return this.activeSession ? this.activeSession.ignoreCallState : false;
    }
    joinAudio(_ref2, managerCallback) {
      let {
        isListenOnly,
        extension,
        validIceCandidates,
        inputStream
      } = _ref2;
      const IPV4_FALLBACK_DOMAIN = window.meetingClientSettings.public.app.ipv4FallbackDomain;
      const hasFallbackDomain = typeof IPV4_FALLBACK_DOMAIN === 'string' && IPV4_FALLBACK_DOMAIN !== '';
      return new Promise((resolve, reject) => {
        let {
          hostname
        } = this;
        this.activeSession = new SIPSession(this.user, this.userData, this.protocol, hostname, this.baseCallStates, this.baseErrorCodes, false);
        const callback = message => {
          if (message.status === this.baseCallStates.failed) {
            let shouldTryReconnect = false;

            // Try and get the call to clean up and end on an error
            this.activeSession.exitAudio().catch(() => {});
            if (this.activeSession.webrtcConnected) {
              // webrtc was able to connect so just try again
              message.silenceNotifications = true;
              callback({
                status: this.baseCallStates.reconnecting,
                bridge: this.bridgeName
              });
              shouldTryReconnect = true;
            } else if (hasFallbackDomain === true && hostname !== IPV4_FALLBACK_DOMAIN) {
              message.silenceNotifications = true;
              logger.info({
                logCode: 'sip_js_attempt_ipv4_fallback',
                extraInfo: {
                  callerIdName: this.user.callerIdName
                }
              }, 'Attempting to fallback to IPv4 domain for audio');
              hostname = IPV4_FALLBACK_DOMAIN;
              shouldTryReconnect = true;
            }
            if (shouldTryReconnect) {
              const fallbackExtension = this.activeSession.inEchoTest ? extension : undefined;
              this.activeSession = new SIPSession(this.user, this.userData, this.protocol, hostname, this.baseCallStates, this.baseErrorCodes, true);
              const {
                inputDeviceId,
                outputDeviceId
              } = this;
              this.activeSession.joinAudio({
                isListenOnly,
                extension: fallbackExtension,
                inputDeviceId,
                outputDeviceId,
                validIceCandidates,
                inputStream
              }, callback).then(value => {
                resolve(value);
              }).catch(reason => {
                reject(reason);
              });
            }
          }
          return managerCallback(message);
        };
        const {
          inputDeviceId,
          outputDeviceId
        } = this;
        this.activeSession.joinAudio({
          isListenOnly,
          extension,
          inputDeviceId,
          outputDeviceId,
          validIceCandidates,
          inputStream
        }, callback).then(value => {
          resolve(value);
        }).catch(reason => {
          reject(reason);
        });
      });
    }
    transferCall(onTransferSuccess) {
      this.activeSession.inEchoTest = false;
      logger.debug({
        logCode: 'sip_js_rtp_payload_send_dtmf',
        extraInfo: {
          callerIdName: this.activeSession.user.callerIdName
        }
      }, 'Sending DTMF INFO to transfer user');
      return this.trackTransferState(onTransferSuccess);
    }
    sendDtmf(tones) {
      this.activeSession.sendDtmf(tones);
    }
    getPeerConnection() {
      if (!this.activeSession) return null;
      const {
        currentSession
      } = this.activeSession;
      if (currentSession && currentSession.sessionDescriptionHandler) {
        return currentSession.sessionDescriptionHandler.peerConnection;
      }
      return null;
    }
    exitAudio() {
      if (this.activeSession == null) return Promise.resolve();
      return this.activeSession.exitAudio();
    }
    setInputStream(stream) {
      return this.activeSession.setInputStream(stream);
    }
    async updateAudioConstraints(constraints) {
      return this.activeSession.updateAudioConstraints(constraints);
    }
  }
  module.exports = SIPBridge;
}.call(this, module);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"screenshare":{"client":{"bridge":{"errors.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/client/bridge/errors.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  GDM_ERRORS: () => GDM_ERRORS,
  SCREENSHARING_ERRORS: () => SCREENSHARING_ERRORS
});
let SFU_SERVER_SIDE_ERRORS;
module.link("/imports/ui/services/bbb-webrtc-sfu/broker-base-errors", {
  SFU_SERVER_SIDE_ERRORS(v) {
    SFU_SERVER_SIDE_ERRORS = v;
  }
}, 0);
// Mapped getDisplayMedia errors. These are bridge agnostic
// See: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia
const GDM_ERRORS = {
  // Fallback error: 1130
  1130: 'GetDisplayMediaGenericError',
  1131: 'AbortError',
  1132: 'InvalidStateError',
  1133: 'OverconstrainedError',
  1134: 'TypeError',
  1135: 'NotFoundError',
  1136: 'NotAllowedError',
  1137: 'NotSupportedError',
  1138: 'NotReadableError'
};

// Import as many bridge specific errors you want in this utilitary and shove
// them into the error class slots down below.
const CLIENT_SIDE_ERRORS = {
  1101: "SIGNALLING_TRANSPORT_DISCONNECTED",
  1102: "SIGNALLING_TRANSPORT_CONNECTION_FAILED",
  1104: "SCREENSHARE_PLAY_FAILED",
  1105: "PEER_NEGOTIATION_FAILED",
  1107: "ICE_STATE_FAILED",
  1110: "ENDED_WHILE_STARTING",
  1120: "MEDIA_TIMEOUT",
  1121: "UNKNOWN_ERROR"
};
const SERVER_SIDE_ERRORS = _objectSpread({}, SFU_SERVER_SIDE_ERRORS);
const AGGREGATED_ERRORS = _objectSpread(_objectSpread(_objectSpread({}, CLIENT_SIDE_ERRORS), SERVER_SIDE_ERRORS), GDM_ERRORS);
const expandErrors = () => {
  const expandedErrors = Object.keys(AGGREGATED_ERRORS).reduce((map, key) => {
    map[AGGREGATED_ERRORS[key]] = {
      errorCode: key,
      errorMessage: AGGREGATED_ERRORS[key]
    };
    return map;
  }, {});
  return _objectSpread(_objectSpread({}, AGGREGATED_ERRORS), expandedErrors);
};
const SCREENSHARING_ERRORS = expandErrors();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/client/bridge/index.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let KurentoBridge;
module.link("./kurento", {
  default(v) {
    KurentoBridge = v;
  }
}, 0);
const screenshareBridge = new KurentoBridge();
module.exportDefault(screenshareBridge);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"kurento.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/client/bridge/kurento.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => KurentoScreenshareBridge
});
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 1);
let BridgeService;
module.link("./service", {
  default(v) {
    BridgeService = v;
  }
}, 2);
let ScreenshareBroker;
module.link("/imports/ui/services/bbb-webrtc-sfu/screenshare-broker", {
  default(v) {
    ScreenshareBroker = v;
  }
}, 3);
let setIsSharing, screenShareEndAlert, setOutputDeviceId;
module.link("/imports/ui/components/screenshare/service", {
  setIsSharing(v) {
    setIsSharing = v;
  },
  screenShareEndAlert(v) {
    screenShareEndAlert = v;
  },
  setOutputDeviceId(v) {
    setOutputDeviceId = v;
  }
}, 4);
let SCREENSHARING_ERRORS;
module.link("./errors", {
  SCREENSHARING_ERRORS(v) {
    SCREENSHARING_ERRORS = v;
  }
}, 5);
let shouldForceRelay;
module.link("/imports/ui/services/bbb-webrtc-sfu/utils", {
  shouldForceRelay(v) {
    shouldForceRelay = v;
  }
}, 6);
let MediaStreamUtils;
module.link("/imports/utils/media-stream-utils", {
  default(v) {
    MediaStreamUtils = v;
  }
}, 7);
let notifyStreamStateChange;
module.link("/imports/ui/services/bbb-webrtc-sfu/stream-state-service", {
  notifyStreamStateChange(v) {
    notifyStreamStateChange = v;
  }
}, 8);
const BRIDGE_NAME = 'kurento';
const SCREENSHARE_VIDEO_TAG = 'screenshareVideo';
const SEND_ROLE = 'send';
const RECV_ROLE = 'recv';
const DEFAULT_VOLUME = 1;

// the error-code mapping is bridge specific; that's why it's not in the errors util
const ERROR_MAP = {
  1301: SCREENSHARING_ERRORS.SIGNALLING_TRANSPORT_DISCONNECTED,
  1302: SCREENSHARING_ERRORS.SIGNALLING_TRANSPORT_CONNECTION_FAILED,
  1305: SCREENSHARING_ERRORS.PEER_NEGOTIATION_FAILED,
  1307: SCREENSHARING_ERRORS.ICE_STATE_FAILED,
  1310: SCREENSHARING_ERRORS.ENDED_WHILE_STARTING
};
const mapErrorCode = error => {
  const {
    errorCode
  } = error;
  const mappedError = ERROR_MAP[errorCode];
  if (errorCode == null || mappedError == null) return error;
  error.errorCode = mappedError.errorCode;
  error.errorMessage = mappedError.errorMessage;
  error.message = mappedError.errorMessage;
  return error;
};
class KurentoScreenshareBridge {
  constructor() {
    this.role;
    this.broker;
    this._gdmStream;
    this.hasAudio = false;
    this.connectionAttempts = 0;
    this.reconnecting = false;
    this.reconnectionTimeout;
    this._restartIntervalMs = null;
    this.startedOnce = false;
    this.outputDeviceId = null;
  }
  get restartIntervalMs() {
    return this._restartIntervalMs || BridgeService.BASE_MEDIA_TIMEOUT();
  }
  set restartIntervalMs(value) {
    this._restartIntervalMs = value;
  }
  get gdmStream() {
    return this._gdmStream;
  }
  set gdmStream(stream) {
    this._gdmStream = stream;
  }
  _shouldReconnect() {
    // Sender/presenter reconnect is *not* implemented yet
    return this.reconnectionTimeout == null && this.role === RECV_ROLE;
  }

  /**
   * Get the RTCPeerConnection object related to the screensharing stream.
   * @returns {Object} The RTCPeerConnection object related to the presenter/
   *                   viewer peer. If there's no stream being shared, returns
   *                   null.
   */
  getPeerConnection() {
    try {
      let peerConnection = null;
      if (this.broker && this.broker.webRtcPeer) {
        peerConnection = this.broker.webRtcPeer.peerConnection;
      }
      return peerConnection;
    } catch (error) {
      return null;
    }
  }
  inboundStreamReconnect() {
    const currentRestartIntervalMs = this.restartIntervalMs;
    logger.warn({
      logCode: 'screenshare_viewer_reconnect',
      extraInfo: {
        reconnecting: this.reconnecting,
        role: this.role,
        bridge: BRIDGE_NAME
      }
    }, 'Screenshare viewer is reconnecting');

    // Cleanly stop everything before triggering a reconnect
    this._stop();
    // Create new reconnect interval time
    this.restartIntervalMs = BridgeService.getNextReconnectionInterval(currentRestartIntervalMs);
    this.view(this.hasAudio).then(() => {
      this.clearReconnectionTimeout();
    }).catch(error => {
      // Error handling is a no-op because it will be "handled" in handleViewerFailure
      logger.debug({
        logCode: 'screenshare_reconnect_failed',
        extraInfo: {
          errorCode: error.errorCode,
          errorMessage: error.errorMessage,
          reconnecting: this.reconnecting,
          role: this.role,
          bridge: BRIDGE_NAME
        }
      }, 'Screensharing reconnect failed');
    });
  }
  handleConnectionTimeoutExpiry() {
    var _this$broker, _this$broker2;
    this.reconnecting = true;
    switch (this.role) {
      case RECV_ROLE:
        return this.inboundStreamReconnect();

      // Sender/presenter reconnect is *not* implemented yet
      case SEND_ROLE:
      default:
        this.reconnecting = false;
        logger.error({
          logCode: 'screenshare_wont_reconnect',
          extraInfo: {
            role: ((_this$broker = this.broker) === null || _this$broker === void 0 ? void 0 : _this$broker.role) || this.role,
            started: !!((_this$broker2 = this.broker) !== null && _this$broker2 !== void 0 && _this$broker2.started),
            bridge: BRIDGE_NAME
          }
        }, 'Screen sharing will not reconnect');
        break;
    }
  }
  maxConnectionAttemptsReached() {
    return this.connectionAttempts > BridgeService.MAX_CONN_ATTEMPTS();
  }
  scheduleReconnect() {
    let {
      overrideTimeout
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    if (this.reconnectionTimeout == null) {
      let nextRestartInterval = this.restartIntervalMs;
      if (typeof overrideTimeout === 'number') nextRestartInterval = overrideTimeout;
      this.reconnectionTimeout = setTimeout(this.handleConnectionTimeoutExpiry.bind(this), nextRestartInterval);
    }
  }
  clearReconnectionTimeout() {
    this.reconnecting = false;
    this.restartIntervalMs = BridgeService.BASE_MEDIA_TIMEOUT();
    if (this.reconnectionTimeout) {
      clearTimeout(this.reconnectionTimeout);
      this.reconnectionTimeout = null;
    }
  }
  setVolume(volume) {
    const mediaElement = document.getElementById(SCREENSHARE_VIDEO_TAG);
    if (mediaElement) {
      if (typeof volume === 'number' && volume >= 0 && volume <= 1) {
        mediaElement.volume = volume;
      }
      return mediaElement.volume;
    }
    return DEFAULT_VOLUME;
  }
  getVolume() {
    const mediaElement = document.getElementById(SCREENSHARE_VIDEO_TAG);
    if (mediaElement) return mediaElement.volume;
    return DEFAULT_VOLUME;
  }
  handleViewerStart() {
    const mediaElement = document.getElementById(SCREENSHARE_VIDEO_TAG);
    if (mediaElement && this.broker && this.broker.webRtcPeer) {
      const stream = this.broker.webRtcPeer.getRemoteStream();
      if (this.hasAudio && this.outputDeviceId && typeof this.outputDeviceId === 'string') {
        setOutputDeviceId(this.outputDeviceId);
      }
      BridgeService.screenshareLoadAndPlayMediaStream(stream, mediaElement, !this.broker.hasAudio);
    }
    this.startedOnce = true;
    this.clearReconnectionTimeout();
    this.connectionAttempts = 0;
  }
  handleBrokerFailure(error) {
    mapErrorCode(error);
    const {
      errorMessage,
      errorCode
    } = error;
    logger.error({
      logCode: 'screenshare_broker_failure',
      extraInfo: {
        errorCode,
        errorMessage,
        role: this.broker.role,
        started: this.broker.started,
        reconnecting: this.reconnecting,
        bridge: BRIDGE_NAME
      }
    }, "Screenshare broker failure: ".concat(errorMessage));
    notifyStreamStateChange('screenshare', 'failed');
    // Screensharing was already successfully negotiated and error occurred during
    // during call; schedule a reconnect
    if (this._shouldReconnect()) {
      var _this$broker3;
      // this.broker.started => whether the reconnect should happen immediately.
      // If this session previously established connection (N-sessions back)
      // and it failed abruptly, then the timeout is overridden to a intermediate value
      // (BASE_RECONNECTION_TIMEOUT)
      let overrideTimeout;
      if ((_this$broker3 = this.broker) !== null && _this$broker3 !== void 0 && _this$broker3.started) {
        overrideTimeout = 0;
      } else if (this.startedOnce) {
        overrideTimeout = BridgeService.BASE_RECONNECTION_TIMEOUT();
      }
      this.scheduleReconnect({
        overrideTimeout
      });
    }
    return error;
  }
  async view() {
    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      hasAudio: false,
      outputDeviceId: null
    };
    const SETTINGS = window.meetingClientSettings;
    const SFU_CONFIG = SETTINGS.public.kurento;
    const SFU_URL = SFU_CONFIG.wsUrl;
    const OFFERING = SFU_CONFIG.screenshare.subscriberOffering;
    const SIGNAL_CANDIDATES = SFU_CONFIG.signalCandidates;
    const TRACE_LOGS = SFU_CONFIG.traceLogs;
    const GATHERING_TIMEOUT = SFU_CONFIG.gatheringTimeout;
    this.hasAudio = options.hasAudio;
    this.outputDeviceId = options.outputDeviceId;
    this.role = RECV_ROLE;
    const iceServers = await BridgeService.getIceServers(Auth.sessionToken);
    const brokerOptions = {
      iceServers,
      userName: Auth.fullname,
      hasAudio: options.hasAudio,
      offering: OFFERING,
      mediaServer: BridgeService.getMediaServerAdapter(),
      signalCandidates: SIGNAL_CANDIDATES,
      forceRelay: shouldForceRelay(),
      traceLogs: TRACE_LOGS,
      gatheringTimeout: GATHERING_TIMEOUT
    };
    this.broker = new ScreenshareBroker(Auth.authenticateURL(SFU_URL), BridgeService.getConferenceBridge(), Auth.userID, Auth.meetingID, this.role, brokerOptions);
    this.broker.onstart = this.handleViewerStart.bind(this);
    this.broker.onerror = this.handleBrokerFailure.bind(this);
    if (!this.reconnecting) {
      this.broker.onended = this.handleEnded.bind(this);
    }
    return this.broker.view().finally(this.scheduleReconnect.bind(this));
  }
  handlePresenterStart() {
    logger.info({
      logCode: 'screenshare_presenter_start_success'
    }, 'Screenshare presenter started succesfully');
    this.clearReconnectionTimeout();
    this.startedOnce = true;
    this.reconnecting = false;
    this.connectionAttempts = 0;
  }
  handleEnded() {
    screenShareEndAlert();
  }
  share(stream, onFailure, contentType) {
    return new Promise(async (resolve, reject) => {
      const SETTINGS = window.meetingClientSettings;
      const SFU_CONFIG = SETTINGS.public.kurento;
      const SFU_URL = SFU_CONFIG.wsUrl;
      const SIGNAL_CANDIDATES = SFU_CONFIG.signalCandidates;
      const TRACE_LOGS = SFU_CONFIG.traceLogs;
      const {
        screenshare: NETWORK_PRIORITY
      } = SETTINGS.public.media.networkPriorities || {};
      const GATHERING_TIMEOUT = SFU_CONFIG.gatheringTimeout;
      this.onerror = onFailure;
      this.connectionAttempts += 1;
      this.role = SEND_ROLE;
      this.hasAudio = BridgeService.streamHasAudioTrack(stream);
      this.gdmStream = stream;
      const onerror = error => {
        const normalizedError = this.handleBrokerFailure(error);
        if (!this.broker.started) {
          // Broker hasn't started - if there are retries left, try again.
          if (this.maxConnectionAttemptsReached()) {
            this.clearReconnectionTimeout();
            this.connectionAttempts = 0;
            onFailure(SCREENSHARING_ERRORS.MEDIA_TIMEOUT);
            reject(SCREENSHARING_ERRORS.MEDIA_TIMEOUT);
          }
        } else if (!this._shouldReconnect()) {
          // Broker has started - should reconnect? If it shouldn't, end it.
          onFailure(normalizedError);
        }
      };
      const iceServers = await BridgeService.getIceServers(Auth.sessionToken);
      const options = {
        iceServers,
        userName: Auth.fullname,
        stream,
        hasAudio: this.hasAudio,
        contentType: contentType,
        bitrate: BridgeService.BASE_BITRATE(),
        offering: true,
        mediaServer: BridgeService.getMediaServerAdapter(),
        signalCandidates: SIGNAL_CANDIDATES,
        forceRelay: shouldForceRelay(),
        traceLogs: TRACE_LOGS,
        networkPriority: NETWORK_PRIORITY,
        gatheringTimeout: GATHERING_TIMEOUT
      };
      this.broker = new ScreenshareBroker(Auth.authenticateURL(SFU_URL), BridgeService.getConferenceBridge(), Auth.userID, Auth.meetingID, this.role, options);
      this.broker.onerror = onerror.bind(this);
      this.broker.onstreamended = this.stop.bind(this);
      this.broker.onstart = this.handlePresenterStart.bind(this);
      this.broker.onended = this.handleEnded.bind(this);
      this.broker.share().then(() => {
        this.scheduleReconnect();
        return resolve();
      }).catch(error => reject(mapErrorCode(error)));
    });
  }

  // This is a reconnect-safe internal method. Should be used when one wants
  // to clear the internal components (ie broker, connection timeouts) without
  // affecting externally controlled components (ie gDM stream,
  // media tag, connectionAttempts, ...)
  _stop() {
    if (this.broker) {
      this.broker.stop();
      // Checks if this session is a sharer and if it's not reconnecting
      // If that's the case, clear the local sharing state in screen sharing UI
      // component tracker to be extra sure we won't have any client-side state
      // inconsistency - prlanzarin
      if (this.broker && this.broker.role === SEND_ROLE && !this.reconnecting) {
        setIsSharing(false);
      }
      this.broker = null;
    }
    this.clearReconnectionTimeout();
  }
  stop() {
    const mediaElement = document.getElementById(SCREENSHARE_VIDEO_TAG);
    this._stop();
    this.connectionAttempts = 0;
    if (mediaElement && typeof mediaElement.pause === 'function') {
      mediaElement.pause();
      mediaElement.srcObject = null;
    }
    if (this.gdmStream) {
      MediaStreamUtils.stopMediaStreamTracks(this.gdmStream);
      this.gdmStream = null;
    }
    this.outputDeviceId = null;
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"service.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/screenshare/client/bridge/service.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 0);
let fetchWebRTCMappedStunTurnServers, getMappedFallbackStun;
module.link("/imports/utils/fetchStunTurnServers", {
  fetchWebRTCMappedStunTurnServers(v) {
    fetchWebRTCMappedStunTurnServers = v;
  },
  getMappedFallbackStun(v) {
    getMappedFallbackStun = v;
  }
}, 1);
let loadAndPlayMediaStream;
module.link("/imports/ui/services/bbb-webrtc-sfu/load-play", {
  default(v) {
    loadAndPlayMediaStream = v;
  }
}, 2);
let SCREENSHARING_ERRORS;
module.link("./errors", {
  SCREENSHARING_ERRORS(v) {
    SCREENSHARING_ERRORS = v;
  }
}, 3);
let getFromMeetingSettings, getVoiceConf;
module.link("/imports/ui/services/meeting-settings", {
  default(v) {
    getFromMeetingSettings = v;
  },
  getVoiceConf(v) {
    getVoiceConf = v;
  }
}, 4);
const HAS_DISPLAY_MEDIA = typeof navigator.getDisplayMedia === 'function' || navigator.mediaDevices && typeof navigator.mediaDevices.getDisplayMedia === 'function';
const getConferenceBridge = () => getVoiceConf();
const normalizeGetDisplayMediaError = error => {
  return SCREENSHARING_ERRORS[error.name] || SCREENSHARING_ERRORS.GetDisplayMediaGenericError;
};
const getBoundGDM = () => {
  if (typeof navigator.getDisplayMedia === 'function') {
    return navigator.getDisplayMedia.bind(navigator);
  } else if (navigator.mediaDevices && typeof navigator.mediaDevices.getDisplayMedia === 'function') {
    return navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);
  }
};
const getScreenStream = async () => {
  const {
    constraints: GDM_CONSTRAINTS
  } = window.meetingClientSettings.public.kurento.screenshare;
  const gDMCallback = stream => {
    // Some older Chromium variants choke on gDM when audio: true by NOT generating
    // a promise rejection AND not generating a valid input screen stream, need to
    // work around that manually for now - prlanzarin
    if (stream == null) {
      return Promise.reject(SCREENSHARING_ERRORS.NotSupportedError);
    }
    if (typeof stream.getVideoTracks === 'function' && typeof GDM_CONSTRAINTS.video === 'object') {
      stream.getVideoTracks().forEach(track => {
        if (typeof track.applyConstraints === 'function') {
          track.applyConstraints(GDM_CONSTRAINTS.video).catch(error => {
            logger.warn({
              logCode: 'screenshare_videoconstraint_failed',
              extraInfo: {
                errorName: error.name,
                errorCode: error.code
              }
            }, 'Error applying screenshare video constraint');
          });
        }
      });
    }
    if (typeof stream.getAudioTracks === 'function' && typeof GDM_CONSTRAINTS.audio === 'object') {
      stream.getAudioTracks().forEach(track => {
        if (typeof track.applyConstraints === 'function') {
          track.applyConstraints(GDM_CONSTRAINTS.audio).catch(error => {
            logger.warn({
              logCode: 'screenshare_audioconstraint_failed',
              extraInfo: {
                errorName: error.name,
                errorCode: error.code
              }
            }, 'Error applying screenshare audio constraint');
          });
        }
      });
    }
    return Promise.resolve(stream);
  };
  const getDisplayMedia = getBoundGDM();
  if (typeof getDisplayMedia === 'function') {
    return getDisplayMedia(GDM_CONSTRAINTS).then(gDMCallback).catch(error => {
      const normalizedError = normalizeGetDisplayMediaError(error);
      logger.error({
        logCode: 'screenshare_getdisplaymedia_failed',
        extraInfo: {
          errorCode: normalizedError.errorCode,
          errorMessage: normalizedError.errorMessage
        }
      }, 'getDisplayMedia call failed');
      return Promise.reject(normalizedError);
    });
  } else {
    // getDisplayMedia isn't supported, error its way out
    return Promise.reject(SCREENSHARING_ERRORS.NotSupportedError);
  }
};
const getIceServers = sessionToken => {
  return fetchWebRTCMappedStunTurnServers(sessionToken).catch(error => {
    logger.error({
      logCode: 'screenshare_fetchstunturninfo_error',
      extraInfo: {
        error
      }
    }, 'Screenshare bridge failed to fetch STUN/TURN info');
    return getMappedFallbackStun();
  });
};
const getMediaServerAdapter = () => {
  const {
    mediaServer: DEFAULT_SCREENSHARE_MEDIA_SERVER
  } = window.meetingClientSettings.public.kurento.screenshare;
  return getFromMeetingSettings('media-server-screenshare', DEFAULT_SCREENSHARE_MEDIA_SERVER);
};
const getNextReconnectionInterval = oldInterval => {
  const {
    mediaTimeouts: MEDIA_TIMEOUTS
  } = window.meetingClientSettings.public.kurento.screenshare;
  const {
    maxTimeout: MAX_MEDIA_TIMEOUT,
    timeoutIncreaseFactor: TIMEOUT_INCREASE_FACTOR,
    baseReconnectionTimeout: BASE_RECONNECTION_TIMEOUT
  } = MEDIA_TIMEOUTS;
  return Math.min(TIMEOUT_INCREASE_FACTOR * Math.max(oldInterval, BASE_RECONNECTION_TIMEOUT), MAX_MEDIA_TIMEOUT);
};
const streamHasAudioTrack = stream => {
  return stream && typeof stream.getAudioTracks === 'function' && stream.getAudioTracks().length >= 1;
};
const dispatchAutoplayHandlingEvent = mediaElement => {
  const tagFailedEvent = new CustomEvent('screensharePlayFailed', {
    detail: {
      mediaElement
    }
  });
  window.dispatchEvent(tagFailedEvent);
};
const screenshareLoadAndPlayMediaStream = (stream, mediaElement, muted) => {
  return loadAndPlayMediaStream(stream, mediaElement, muted).catch(error => {
    // NotAllowedError equals autoplay issues, fire autoplay handling event.
    // This will be handled in the screenshare react component.
    if (error.name === 'NotAllowedError') {
      logger.error({
        logCode: 'screenshare_error_autoplay',
        extraInfo: {
          errorName: error.name
        }
      }, 'Screen share media play failed: autoplay error');
      dispatchAutoplayHandlingEvent(mediaElement);
    } else {
      throw {
        errorCode: SCREENSHARING_ERRORS.SCREENSHARE_PLAY_FAILED.errorCode,
        errorMessage: error.message || SCREENSHARING_ERRORS.SCREENSHARE_PLAY_FAILED.errorMessage
      };
    }
  });
};
class EXPORTED_CONFIGS {
  static BASE_MEDIA_TIMEOUT() {
    const {
      mediaTimeouts: MEDIA_TIMEOUTS
    } = window.meetingClientSettings.public.kurento.screenshare;
    const {
      baseTimeout: BASE_MEDIA_TIMEOUT
    } = MEDIA_TIMEOUTS;
    return BASE_MEDIA_TIMEOUT;
  }
  static BASE_RECONNECTION_TIMEOUT() {
    const {
      mediaTimeouts: MEDIA_TIMEOUTS
    } = window.meetingClientSettings.public.kurento.screenshare;
    const {
      baseReconnectionTimeout: BASE_RECONNECTION_TIMEOUT
    } = MEDIA_TIMEOUTS;
    return BASE_RECONNECTION_TIMEOUT;
  }
  static MAX_CONN_ATTEMPTS() {
    const {
      mediaTimeouts: MEDIA_TIMEOUTS
    } = window.meetingClientSettings.public.kurento.screenshare;
    const {
      maxConnectionAttempts: MAX_CONN_ATTEMPTS
    } = MEDIA_TIMEOUTS;
    return MAX_CONN_ATTEMPTS;
  }
  static BASE_BITRATE() {
    const {
      bitrate: BASE_BITRATE
    } = window.meetingClientSettings.public.kurento.screenshare;
    return BASE_BITRATE;
  }
}
module.exportDefault({
  HAS_DISPLAY_MEDIA,
  getConferenceBridge,
  getScreenStream,
  getIceServers,
  getNextReconnectionInterval,
  streamHasAudioTrack,
  screenshareLoadAndPlayMediaStream,
  getMediaServerAdapter,
  BASE_MEDIA_TIMEOUT: EXPORTED_CONFIGS.BASE_MEDIA_TIMEOUT,
  BASE_RECONNECTION_TIMEOUT: EXPORTED_CONFIGS.BASE_RECONNECTION_TIMEOUT,
  MAX_CONN_ATTEMPTS: EXPORTED_CONFIGS.MAX_CONN_ATTEMPTS,
  BASE_BITRATE: EXPORTED_CONFIGS.BASE_BITRATE
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}},"bbb-web-api":{"index.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/api/bbb-web-api/index.ts                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Session;
module.link("/imports/ui/services/storage/session", {
  default(v) {
    Session = v;
  }
}, 0);
class BBBWebApi {
  constructor() {
    this.cachePrefix = 'bbbWebApi';
    this.routes = {
      index: {
        path: '/bigbluebutton/api',
        cacheKey: "".concat(this.cachePrefix, "_index")
      }
    };
  }
  static buildURL(route) {
    const pathMatch = window.location.pathname.match('^(.*)/html5client/join$');
    const serverPathPrefix = pathMatch ? pathMatch[1] : '';
    const {
      hostname,
      protocol
    } = window.location;
    return new URL(route, "".concat(protocol, "//").concat(hostname).concat(serverPathPrefix));
  }
  async index(signal) {
    const cache = Session.getItem(this.routes.index.cacheKey);
    if (cache) {
      return {
        data: cache
      };
    }
    const response = await fetch(BBBWebApi.buildURL(this.routes.index.path), {
      headers: {
        'Content-Type': 'application/json'
      },
      signal
    });
    const body = await response.json();
    Session.setItem(this.routes.index.cacheKey, body.response);
    return {
      response,
      data: body.response
    };
  }
}
const BBBWeb = new BBBWebApi();
module.exportDefault(BBBWeb);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"startup":{"client":{"logger":{"ServerStream.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/logger/ServerStream.ts                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  default: () => ServerLoggerStream
});
let ServerStream;
module.link("@browser-bunyan/server-stream", {
  ServerStream(v) {
    ServerStream = v;
  }
}, 0);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 1);
class ServerLoggerStream extends ServerStream {
  constructor(params) {
    super(params);
    this.logTagString = null;
    this.rec = null;
    if (params.logTag) {
      this.logTagString = params.logTag;
    }
  }
  static getUserData() {
    let userInfo = {
      meetingId: Auth.meetingID,
      userId: Auth.userID,
      logoutUrl: Auth.logoutURL,
      sessionToken: Auth.sessionToken,
      userName: Auth.fullname,
      extId: Auth.externUserID,
      meetingName: Auth.confname
    };
    if (userInfo.meetingId) {
      userInfo = {
        sessionToken: sessionStorage.getItem('sessionToken')
      };
    }
    return {
      fullInfo: userInfo
    };
  }
  write(rec) {
    var _window$meetingClient, _window$meetingClient2, _window$meetingClient3;
    const {
      fullInfo
    } = ServerLoggerStream.getUserData();
    this.rec = rec;
    if (fullInfo.meetingId != null) {
      this.rec.userInfo = fullInfo;
    }
    this.rec.clientBuild = (_window$meetingClient = window.meetingClientSettings) === null || _window$meetingClient === void 0 ? void 0 : (_window$meetingClient2 = _window$meetingClient.public) === null || _window$meetingClient2 === void 0 ? void 0 : (_window$meetingClient3 = _window$meetingClient2.app) === null || _window$meetingClient3 === void 0 ? void 0 : _window$meetingClient3.html5ClientBuild;
    if (this.logTagString) {
      this.rec.logTag = this.logTagString;
    }
    return super.write(this.rec);
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.ts":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/logger/index.ts                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const _excluded = ["level"];
let _objectWithoutProperties;
module.link("@babel/runtime/helpers/objectWithoutProperties", {
  default(v) {
    _objectWithoutProperties = v;
  }
}, 0);
module.export({
  createStreamForTarget: () => createStreamForTarget,
  generateLoggerStreams: () => generateLoggerStreams
});
let createLogger, stdSerializers;
module.link("browser-bunyan", {
  createLogger(v) {
    createLogger = v;
  },
  stdSerializers(v) {
    stdSerializers = v;
  }
}, 0);
let ConsoleFormattedStream;
module.link("@browser-bunyan/console-formatted-stream", {
  ConsoleFormattedStream(v) {
    ConsoleFormattedStream = v;
  }
}, 1);
let ServerLoggerStream;
module.link("./ServerStream", {
  default(v) {
    ServerLoggerStream = v;
  }
}, 2);
let meetingClientSettingsInitialValues;
module.link("/imports/ui/core/initial-values/meetingClientSettings", {
  default(v) {
    meetingClientSettingsInitialValues = v;
  }
}, 3);
// The logger accepts "console","server", and "external" as targets
// Multiple targets can be set as an array in the settings under public.log
// To add more targets use the format { "target": "server", "level": "info" },
// and add it to the public.log array
// The accepted levels are "debug", "info", "warn", "error"
// To send to URL, use the format    {"target": "external","level": "info",
// "url": "","method": ""}
// externalURL is the end-point that logs will be sent to
// Call the logger by doing a function call with the level name, I.e, logger.warn('Hi on warn')
const FALLBACK_CONFIG = meetingClientSettingsInitialValues.public.clientLog;
function createStreamForTarget(target, options) {
  const TARGET_EXTERNAL = 'external';
  const TARGET_CONSOLE = 'console';
  let Stream;
  switch (target) {
    case TARGET_EXTERNAL:
      Stream = ServerLoggerStream;
      break;
    case TARGET_CONSOLE:
      Stream = ConsoleFormattedStream;
      break;
    default:
      Stream = ConsoleFormattedStream;
  }
  return new Stream(options);
}
function generateLoggerStreams(config) {
  let result = [];
  Object.keys(config).forEach(key => {
    const logOption = config[key];
    if (logOption && logOption.enabled) {
      const {
          level
        } = logOption,
        streamOptions = _objectWithoutProperties(logOption, _excluded);
      result = result.concat({
        level,
        stream: createStreamForTarget(key, streamOptions)
      });
    }
  });
  return result;
}
class BBBClientLogger {
  static get logger() {
    var _window$meetingClient, _window$meetingClient2;
    if (BBBClientLogger.default) return BBBClientLogger.default;
    const LOG_CONFIG = (_window$meetingClient = window.meetingClientSettings) === null || _window$meetingClient === void 0 ? void 0 : (_window$meetingClient2 = _window$meetingClient.public) === null || _window$meetingClient2 === void 0 ? void 0 : _window$meetingClient2.clientLog;
    if (LOG_CONFIG && !BBBClientLogger.default) {
      BBBClientLogger.default = createLogger({
        name: 'clientLogger',
        streams: generateLoggerStreams(LOG_CONFIG),
        serializers: stdSerializers,
        src: true
      });
    }
    if (!BBBClientLogger.fallback) {
      BBBClientLogger.fallback = createLogger({
        name: 'clientLogger',
        streams: generateLoggerStreams(FALLBACK_CONFIG),
        serializers: stdSerializers,
        src: true
      });
    }
    return BBBClientLogger.fallback;
  }
}
BBBClientLogger.fallback = null;
BBBClientLogger.default = null;
module.exportDefault(BBBClientLogger.logger);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"base.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/base.jsx                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
let React, Component;
module.link("react", {
  default(v) {
    React = v;
  },
  Component(v) {
    Component = v;
  }
}, 0);
let Auth;
module.link("/imports/ui/services/auth", {
  default(v) {
    Auth = v;
  }
}, 1);
let AppContainer;
module.link("/imports/ui/components/app/container", {
  default(v) {
    AppContainer = v;
  }
}, 2);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 3);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 4);
let deviceInfo;
module.link("/imports/utils/deviceInfo", {
  default(v) {
    deviceInfo = v;
  }
}, 5);
let getFromUserSettings;
module.link("/imports/ui/services/users-settings", {
  default(v) {
    getFromUserSettings = v;
  }
}, 6);
let layoutSelectInput, layoutDispatch;
module.link("../../ui/components/layout/context", {
  layoutSelectInput(v) {
    layoutSelectInput = v;
  },
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 7);
let useVideoStreams;
module.link("/imports/ui/components/video-provider/hooks", {
  useVideoStreams(v) {
    useVideoStreams = v;
  }
}, 8);
let DebugWindow;
module.link("/imports/ui/components/debug-window/component", {
  default(v) {
    DebugWindow = v;
  }
}, 9);
let ACTIONS, PANELS;
module.link("../../ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  },
  PANELS(v) {
    PANELS = v;
  }
}, 10);
let useIsChatEnabled;
module.link("/imports/ui/services/features", {
  useIsChatEnabled(v) {
    useIsChatEnabled = v;
  }
}, 11);
let useUserChangedLocalSettings;
module.link("/imports/ui/services/settings/hooks/useUserChangedLocalSettings", {
  default(v) {
    useUserChangedLocalSettings = v;
  }
}, 12);
let useSettings;
module.link("/imports/ui/services/settings/hooks/useSettings", {
  default(v) {
    useSettings = v;
  }
}, 13);
let SETTINGS;
module.link("/imports/ui/services/settings/enums", {
  SETTINGS(v) {
    SETTINGS = v;
  }
}, 14);
let useStorageKey;
module.link("/imports/ui/services/storage/hooks", {
  useStorageKey(v) {
    useStorageKey = v;
  }
}, 15);
const HTML = document.getElementsByTagName('html')[0];
let checkedUserSettings = false;
const fullscreenChangedEvents = ['fullscreenchange', 'webkitfullscreenchange', 'mozfullscreenchange', 'MSFullscreenChange'];
class Base extends Component {
  constructor(props) {
    super(props);
    this.handleFullscreenChange = this.handleFullscreenChange.bind(this);
  }
  handleFullscreenChange() {
    const {
      layoutContextDispatch
    } = this.props;
    if (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement) {
      Session.setItem('isFullscreen', true);
    } else {
      layoutContextDispatch({
        type: ACTIONS.SET_FULLSCREEN_ELEMENT,
        value: {
          element: '',
          group: ''
        }
      });
      Session.setItem('isFullscreen', false);
    }
  }
  componentDidMount() {
    const {
      animations,
      usersVideo,
      layoutContextDispatch
    } = this.props;
    const CAPTIONS_ALWAYS_VISIBLE = window.meetingClientSettings.public.app.audioCaptions.alwaysVisible;
    layoutContextDispatch({
      type: ACTIONS.SET_NUM_CAMERAS,
      value: usersVideo.length
    });
    if (animations) HTML.classList.add('animationsEnabled');
    if (!animations) HTML.classList.add('animationsDisabled');
    fullscreenChangedEvents.forEach(event => {
      document.addEventListener(event, this.handleFullscreenChange);
    });
    Session.setItem('isFullscreen', false);
    Session.setItem('audioCaptions', CAPTIONS_ALWAYS_VISIBLE);
  }
  componentDidUpdate(prevProps) {
    const {
      animations,
      layoutContextDispatch,
      sidebarContentPanel,
      usersVideo,
      setLocalSettings,
      isChatEnabled
    } = this.props;
    if (usersVideo !== prevProps.usersVideo) {
      layoutContextDispatch({
        type: ACTIONS.SET_NUM_CAMERAS,
        value: usersVideo.length
      });
    }
    const enabled = HTML.classList.contains('animationsEnabled');
    const disabled = HTML.classList.contains('animationsDisabled');
    if (animations && animations !== prevProps.animations) {
      if (disabled) HTML.classList.remove('animationsDisabled');
      HTML.classList.add('animationsEnabled');
    } else if (!animations && animations !== prevProps.animations) {
      if (enabled) HTML.classList.remove('animationsEnabled');
      HTML.classList.add('animationsDisabled');
    }
    if (Session.equals('layoutReady', true) && sidebarContentPanel === PANELS.NONE) {
      if (!checkedUserSettings) {
        const showAnimationsDefault = getFromUserSettings('bbb_show_animations_default', window.meetingClientSettings.public.app.defaultSettings.application.animations);
        const Settings = getSettingsSingletonInstance();
        Settings.application.animations = showAnimationsDefault;
        Settings.save(setLocalSettings);
        if (getFromUserSettings('bbb_show_participants_on_login', window.meetingClientSettings.public.layout.showParticipantsOnLogin) && !deviceInfo.isPhone) {
          if (isChatEnabled && getFromUserSettings('bbb_show_public_chat_on_login', !window.meetingClientSettings.public.chat.startClosed)) {
            const PUBLIC_CHAT_ID = window.meetingClientSettings.public.chat.public_group_id;
            layoutContextDispatch({
              type: ACTIONS.SET_SIDEBAR_NAVIGATION_IS_OPEN,
              value: true
            });
            layoutContextDispatch({
              type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
              value: true
            });
            layoutContextDispatch({
              type: ACTIONS.SET_SIDEBAR_CONTENT_PANEL,
              value: PANELS.CHAT
            });
            layoutContextDispatch({
              type: ACTIONS.SET_ID_CHAT_OPEN,
              value: PUBLIC_CHAT_ID
            });
          } else {
            layoutContextDispatch({
              type: ACTIONS.SET_SIDEBAR_NAVIGATION_IS_OPEN,
              value: true
            });
            layoutContextDispatch({
              type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
              value: false
            });
          }
        } else {
          layoutContextDispatch({
            type: ACTIONS.SET_SIDEBAR_NAVIGATION_IS_OPEN,
            value: false
          });
          layoutContextDispatch({
            type: ACTIONS.SET_SIDEBAR_CONTENT_IS_OPEN,
            value: false
          });
        }
        checkedUserSettings = true;
      }
    }
  }
  componentWillUnmount() {
    fullscreenChangedEvents.forEach(event => {
      document.removeEventListener(event, this.handleFullscreenChange);
    });
  }
  render() {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DebugWindow, null), /*#__PURE__*/React.createElement(AppContainer, this.props));
  }
}
const BaseContainer = props => {
  const codeError = useStorageKey('codeError');
  const sidebarContent = layoutSelectInput(i => i.sidebarContent);
  const {
    sidebarContentPanel
  } = sidebarContent;
  const layoutContextDispatch = layoutDispatch();
  const setLocalSettings = useUserChangedLocalSettings();
  const applicationSettings = useSettings(SETTINGS.APPLICATION);
  const animations = applicationSettings === null || applicationSettings === void 0 ? void 0 : applicationSettings.animations;
  const {
    viewScreenshare
  } = useSettings(SETTINGS.DATA_SAVING);
  const {
    streams: usersVideo
  } = useVideoStreams();
  const loggedIn = Auth.useLoggedIn();
  const isChatEnabled = useIsChatEnabled();
  return /*#__PURE__*/React.createElement(Base, _objectSpread({
    sidebarContentPanel,
    layoutContextDispatch,
    setLocalSettings,
    usersVideo,
    animations,
    viewScreenshare,
    codeError,
    loggedIn,
    isChatEnabled
  }, props));
};
module.exportDefault(BaseContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"intlAdapter.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/intlAdapter.tsx                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let useContext, useEffect;
module.link("react", {
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let useIntl;
module.link("react-intl", {
  useIntl(v) {
    useIntl = v;
  }
}, 1);
let PluginSdk;
module.link("bigbluebutton-html-plugin-sdk", {
  "*"(v) {
    PluginSdk = v;
  }
}, 2);
let getSettingsSingletonInstance;
module.link("/imports/ui/services/settings", {
  getSettingsSingletonInstance(v) {
    getSettingsSingletonInstance = v;
  }
}, 3);
let Session;
module.link("/imports/ui/services/storage/in-memory", {
  default(v) {
    Session = v;
  }
}, 4);
let formatLocaleCode;
module.link("/imports/utils/string-utils", {
  formatLocaleCode(v) {
    formatLocaleCode = v;
  }
}, 5);
let useCurrentLocale;
module.link("/imports/ui/core/local-states/useCurrentLocale", {
  default(v) {
    useCurrentLocale = v;
  }
}, 6);
let LoadingContext;
module.link("/imports/ui/components/common/loading-screen/loading-screen-HOC/component", {
  LoadingContext(v) {
    LoadingContext = v;
  }
}, 7);
let UI_DATA_LISTENER_SUBSCRIBED;
module.link("bigbluebutton-html-plugin-sdk/dist/cjs/ui-data-hooks/consts", {
  UI_DATA_LISTENER_SUBSCRIBED(v) {
    UI_DATA_LISTENER_SUBSCRIBED = v;
  }
}, 8);
let intlHolder;
module.link("/imports/ui/core/singletons/intlHolder", {
  default(v) {
    intlHolder = v;
  }
}, 9);
let useUserChangedLocalSettings;
module.link("/imports/ui/services/settings/hooks/useUserChangedLocalSettings", {
  default(v) {
    useUserChangedLocalSettings = v;
  }
}, 10);
let localUserSettings;
module.link("/imports/ui/core/local-states/useUserSettings", {
  localUserSettings(v) {
    localUserSettings = v;
  }
}, 11);
let layoutDispatch;
module.link("/imports/ui/components/layout/context", {
  layoutDispatch(v) {
    layoutDispatch = v;
  }
}, 12);
let ACTIONS;
module.link("/imports/ui/components/layout/enums", {
  ACTIONS(v) {
    ACTIONS = v;
  }
}, 13);
const RTL_LANGUAGES = ['ar', 'dv', 'fa', 'he'];
const LARGE_FONT_LANGUAGES = ['te', 'km'];
const IntlAdapter = _ref => {
  let {
    children
  } = _ref;
  const Settings = getSettingsSingletonInstance();
  const [currentLocale, setCurrentLocale] = useCurrentLocale();
  const intl = useIntl();
  const loadingContextInfo = useContext(LoadingContext);
  const setLocalSettings = useUserChangedLocalSettings();
  const layoutContextDispatch = layoutDispatch();
  const DEFAULT_LANGUAGE = window.meetingClientSettings.public.app.defaultSettings.application.fallbackLocale;
  useEffect(() => {
    intlHolder.setIntl(intl);
  }, []);
  const sendUiDataToPlugins = () => {
    window.dispatchEvent(new CustomEvent(PluginSdk.IntlLocaleUiDataNames.CURRENT_LOCALE, {
      detail: {
        locale: currentLocale,
        fallbackLocale: DEFAULT_LANGUAGE
      }
    }));
  };
  const setUp = () => {
    if (currentLocale) {
      const {
        language,
        formattedLocale
      } = formatLocaleCode(currentLocale);
      // @ts-ignore - JS code
      Settings.application.locale = currentLocale;
      if (RTL_LANGUAGES.includes(currentLocale.substring(0, 2))) {
        // @ts-ignore - JS code
        document.body.parentNode.setAttribute('dir', 'rtl');
        // @ts-ignore - JS code
        Settings.application.isRTL = true;
        layoutContextDispatch({
          type: ACTIONS.SET_IS_RTL,
          value: true
        });
      } else {
        // @ts-ignore - JS code
        document.body.parentNode.setAttribute('dir', 'ltr');
        // @ts-ignore - JS code
        Settings.application.isRTL = false;
        layoutContextDispatch({
          type: ACTIONS.SET_IS_RTL,
          value: false
        });
      }
      Session.setItem('isLargeFont', LARGE_FONT_LANGUAGES.includes(currentLocale.substring(0, 2)));
      document.getElementsByTagName('html')[0].lang = formattedLocale;
      document.body.classList.add("lang-".concat(language));
      Settings.save(setLocalSettings);
    }
  };
  const runOnMountAndUnmount = () => {
    window.addEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.IntlLocaleUiDataNames.CURRENT_LOCALE), sendUiDataToPlugins);
    // @ts-ignore - JS code
    const {
      locale
    } = Settings.application;
    const clientSettings = window.meetingClientSettings.public.app.defaultSettings.application;
    const {
      overrideLocale
    } = clientSettings;
    const {
      bbb_override_default_locale
    } = localUserSettings();
    if (typeof bbb_override_default_locale === 'string') {
      setCurrentLocale(bbb_override_default_locale);
    } else if (typeof locale === 'string' && locale !== currentLocale) {
      setCurrentLocale(overrideLocale || locale);
    } else {
      setUp();
    }
    return () => {
      window.removeEventListener("".concat(UI_DATA_LISTENER_SUBSCRIBED, "-").concat(PluginSdk.IntlLocaleUiDataNames.CURRENT_LOCALE), sendUiDataToPlugins);
    };
  };
  const runOnCurrentLocaleUpdate = () => {
    setUp();
    sendUiDataToPlugins();
  };
  useEffect(runOnMountAndUnmount, []);
  useEffect(runOnCurrentLocaleUpdate, [currentLocale]);
  return !loadingContextInfo.isLoading ? children : null;
};
module.exportDefault(IntlAdapter);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"intlLoader.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/startup/client/intlLoader.tsx                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useCallback, useContext, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useCallback(v) {
    useCallback = v;
  },
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let IntlProvider;
module.link("react-intl", {
  IntlProvider(v) {
    IntlProvider = v;
  }
}, 1);
let LoadingContext;
module.link("/imports/ui/components/common/loading-screen/loading-screen-HOC/component", {
  LoadingContext(v) {
    LoadingContext = v;
  }
}, 2);
let useCurrentLocale;
module.link("/imports/ui/core/local-states/useCurrentLocale", {
  default(v) {
    useCurrentLocale = v;
  }
}, 3);
let logger;
module.link("./logger", {
  default(v) {
    logger = v;
  }
}, 4);
const buildFetchLocale = locale => {
  const localesPath = 'locales';
  return new Promise(resolve => {
    fetch("".concat(localesPath, "/").concat(locale !== 'index' ? "".concat(locale, ".json") : '')).then(response => {
      if (!response.ok) {
        return resolve(false);
      }
      return response.json().then(jsonResponse => resolve(jsonResponse)).catch(() => {
        logger.error({
          logCode: 'intl_parse_locale_SyntaxError'
        }, "Could not parse locale file ".concat(locale, ".json, invalid json"));
        resolve(false);
      });
    });
  });
};
const fetchLocaleOptions = function (locale, init) {
  let localesList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  const clientSettings = window.meetingClientSettings.public;
  const {
    fallbackLocale: fallback,
    overrideLocale: override
  } = clientSettings.app.defaultSettings.application;
  const browserLocale = override && init ? override.split(/[-_]/g) : locale.split(/[-_]/g);
  const defaultLanguage = fallback;
  const fallbackOnEmptyString = clientSettings.app.fallbackOnEmptyLocaleString;
  let localeFile = fallback;
  let normalizedLocale = '';
  const usableLocales = localesList.map(file => file.replace('.json', '')).reduce((locales, locale) => locale.match(browserLocale[0]) ? [...locales, locale] : locales, []);
  const regionDefault = usableLocales.find(locale => browserLocale[0] === locale);
  if (browserLocale.length > 1) {
    var _browserLocale$;
    // browser asks for specific locale
    normalizedLocale = "".concat(browserLocale[0], "_").concat((_browserLocale$ = browserLocale[1]) === null || _browserLocale$ === void 0 ? void 0 : _browserLocale$.toUpperCase());
    const normDefault = usableLocales.find(locale => normalizedLocale === locale);
    if (normDefault) {
      localeFile = normDefault;
    } else if (regionDefault) {
      localeFile = regionDefault;
    } else {
      const specFallback = usableLocales.find(locale => browserLocale[0] === locale.split('_')[0]);
      if (specFallback) localeFile = specFallback;
    }
  } else {
    // browser asks for region default locale
    // eslint-disable-next-line no-lonely-if
    if (regionDefault && localeFile === fallback && regionDefault !== localeFile) {
      localeFile = regionDefault;
    } else {
      const normFallback = usableLocales.find(locale => browserLocale[0] === locale.split('_')[0]);
      if (normFallback) localeFile = normFallback;
    }
  }
  return {
    normalizedLocale: localeFile,
    regionDefaultLocale: regionDefault && regionDefault !== localeFile ? regionDefault : '',
    defaultLocale: defaultLanguage,
    fallbackOnEmptyLocaleString: fallbackOnEmptyString
  };
};
const IntlLoader = _ref => {
  let {
    children,
    currentLocale,
    setCurrentLocale
  } = _ref;
  const loadingContextInfo = useContext(LoadingContext);
  const [fetching, setFetching] = React.useState(false);
  const [normalizedLocale, setNormalizedLocale] = React.useState(navigator.language.replace('_', '-'));
  const [messages, setMessages] = React.useState({});
  const [fallbackOnEmptyLocaleString, setFallbackOnEmptyLocaleString] = React.useState(false);
  const fetchLocalizedMessages = useCallback((locale, init) => {
    setFetching(true);
    buildFetchLocale('index').then(resp => {
      const data = fetchLocaleOptions(locale, init, resp.map(l => l.name));
      const {
        defaultLocale,
        regionDefaultLocale,
        normalizedLocale,
        fallbackOnEmptyLocaleString: FOEL
      } = data;
      setFallbackOnEmptyLocaleString(FOEL);
      const languageSets = Array.from(new Set([defaultLocale, regionDefaultLocale, normalizedLocale])).filter(locale => locale);
      Promise.all(languageSets.map(locale => buildFetchLocale(locale))).then(resp => {
        const typedResp = resp;
        const foundLocales = typedResp.filter(locale => locale instanceof Object);
        if (foundLocales.length === 0) {
          const error = "".concat({
            logCode: 'intl_fetch_locale_error'
          }, ",Could not fetch any locale file for ").concat(languageSets.join(', '));
          loadingContextInfo.setLoading(false, '');
          logger.error(error);
          throw new Error(error);
        }
        const mergedLocale = foundLocales.reduce((acc, locale) => Object.assign(acc, locale), {});
        const replacedLocale = normalizedLocale.replace('_', '-');
        setNormalizedLocale(replacedLocale);
        setCurrentLocale(replacedLocale);
        setMessages(mergedLocale);
        if (!init) {
          loadingContextInfo.setLoading(false, '');
        }
      }).catch(error => {
        loadingContextInfo.setLoading(false, '');
        throw new Error(error);
      });
    }).catch(() => {
      loadingContextInfo.setLoading(false, '');
      throw new Error('unable to fetch localized messages');
    });
  }, []);
  useEffect(() => {
    const language = navigator.languages ? navigator.languages[0] : navigator.language;
    fetchLocalizedMessages(language, true);
  }, []);
  useEffect(() => {
    if (currentLocale !== normalizedLocale) {
      fetchLocalizedMessages(currentLocale, false);
    }
  }, [currentLocale]);
  useEffect(() => {
    if (fetching) {
      logger.info('Fetching locale');
    }
  }, [fetching]);
  return !fetching || Object.keys(messages).length > 0 ? /*#__PURE__*/React.createElement(IntlProvider, {
    fallbackOnEmptyString: fallbackOnEmptyLocaleString,
    locale: normalizedLocale.replace('_', '-').replace('@', '-'),
    messages: messages
  }, children) : null;
};
const IntlLoaderContainer = _ref2 => {
  let {
    children
  } = _ref2;
  const [currentLocale, setCurrentLocale] = useCurrentLocale();
  return /*#__PURE__*/React.createElement(IntlLoader, {
    currentLocale: currentLocale,
    setCurrentLocale: setCurrentLocale
  }, children);
};
module.exportDefault(IntlLoaderContainer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"utils":{"array-utils.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/array-utils.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _objectSpread;
module.link("@babel/runtime/helpers/objectSpread2", {
  default(v) {
    _objectSpread = v;
  }
}, 0);
module.export({
  range: () => range,
  partition: () => partition,
  indexOf: () => indexOf,
  without: () => without,
  defaultsDeep: () => defaultsDeep
});
let isObject;
module.link("radash", {
  isObject(v) {
    isObject = v;
  }
}, 0);
const range = (start, end) => {
  const length = end - start;
  return Array.from({
    length
  }, (_, i) => start + i);
};
const partition = (arr, criteria) => [arr.filter(item => criteria(item)), arr.filter(item => !criteria(item))];
const indexOf = (arr, value) => arr ? arr.findIndex(item => item === value) : -1;
const without = (arr, value) => arr.filter(item => item !== value);
const defaultsDeep = (override, initial) => {
  var _ref;
  if (!initial || !override) return (_ref = initial !== null && initial !== void 0 ? initial : override) !== null && _ref !== void 0 ? _ref : {};
  return Object.entries(_objectSpread(_objectSpread({}, initial), override)).reduce((acc, _ref2) => {
    let [key, value] = _ref2;
    return _objectSpread(_objectSpread({}, acc), {}, {
      [key]: (() => {
        if (isObject(initial[key])) {
          return defaultsDeep(value, initial[key]);
        }
        return value;
      })()
    });
  }, {});
};
module.exportDefault({
  range,
  partition,
  indexOf,
  without,
  defaultsDeep
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"browserInfo.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/browserInfo.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Bowser;
module.link("bowser", {
  default(v) {
    Bowser = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 1);
const userAgent = window.navigator.userAgent;
const BOWSER_RESULTS = Bowser.parse(userAgent);
const isChrome = BOWSER_RESULTS.browser.name === 'Chrome';
const isSafari = BOWSER_RESULTS.browser.name === 'Safari';
const isEdge = BOWSER_RESULTS.browser.name === 'Microsoft Edge';
const isIe = BOWSER_RESULTS.browser.name === 'Internet Explorer';
const isFirefox = BOWSER_RESULTS.browser.name === 'Firefox';
const browserName = BOWSER_RESULTS.browser.name;
const getVersionNumber = () => {
  if (BOWSER_RESULTS.browser.version) return BOWSER_RESULTS.browser.version;

  // There are some scenarios (e.g.; WKWebView) where Bowser can't detect the
  // Safari version. In such cases, we can use the WebKit version to determine
  // it.
  if (isSafari && BOWSER_RESULTS.engine.version) return BOWSER_RESULTS.engine.version;

  // If the version number is not available, log an warning and return Infinity
  // so that we do not deny access to the user (even if we're uncertain about
  // whether it's a supported browser).
  logger.warn({
    logCode: 'browserInfo_invalid_version',
    extraInfo: {
      userAgent
    }
  }, 'Unable to determine the browser version number');
  return 'Infinity';
};
const versionNumber = getVersionNumber();
const isValidSafariVersion = Bowser.getParser(userAgent).satisfies({
  safari: '>12'
});
const isTabletApp = !!userAgent.match(/BigBlueButton-Tablet/i);
const browserInfo = {
  isChrome,
  isSafari,
  isEdge,
  isIe,
  isFirefox,
  browserName,
  versionNumber,
  isValidSafariVersion,
  isTabletApp
};
module.exportDefault(browserInfo);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"caseInsensitiveReducer.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/caseInsensitiveReducer.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const caseInsensitiveReducer = (acc, item) => {
  const index = acc.findIndex(ans => ans.key.toLowerCase() === item.key.toLowerCase());
  if (index !== -1) {
    if (acc[index].numVotes >= item.numVotes) acc[index].numVotes += item.numVotes;else {
      const tempVotes = acc[index].numVotes;
      acc[index] = item;
      acc[index].numVotes += tempVotes;
    }
  } else {
    acc.push(item);
  }
  return acc;
};
module.exportDefault(caseInsensitiveReducer);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"debounce.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/debounce.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  debounce: () => debounce
});
function debounce(func, delay) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let timeoutId;
  let lastArgs;
  let lastThis;
  let calledOnce = false;
  const {
    leading = false,
    trailing = true
  } = options;
  function invokeFunc() {
    func.apply(lastThis, lastArgs);
    lastArgs = null;
    lastThis = null;
  }
  function scheduleTimeout() {
    timeoutId = setTimeout(() => {
      if (!trailing) {
        clearTimeout(timeoutId);
        timeoutId = null;
      } else {
        invokeFunc();
        timeoutId = null;
      }
      calledOnce = false;
    }, delay);
  }
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    lastArgs = args;
    lastThis = this;
    if (!timeoutId) {
      if (leading && !calledOnce) {
        invokeFunc();
        calledOnce = true;
      }
      scheduleTimeout();
    } else if (trailing) {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
        invokeFunc();
        timeoutId = null;
      }, delay);
    } else if (leading && calledOnce) {
      clearTimeout(timeoutId);
      scheduleTimeout();
    }
  };
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deviceInfo.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/deviceInfo.js                                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Bowser;
module.link("bowser", {
  default(v) {
    Bowser = v;
  }
}, 0);
const userAgent = window.navigator.userAgent;
const BOWSER_RESULTS = Bowser.parse(userAgent);
const isPhone = BOWSER_RESULTS.platform.type === 'mobile';
// we need a 'hack' to correctly detect ipads with ios > 13
const isTablet = BOWSER_RESULTS.platform.type === 'tablet' || BOWSER_RESULTS.os.name === 'macOS' && window.navigator.maxTouchPoints > 0;
const isMobile = isPhone || isTablet;
const hasMediaDevices = !!navigator.mediaDevices;
const osName = BOWSER_RESULTS.os.name;
const isIos = osName === 'iOS' || isTablet && osName == "macOS";
const isMacos = osName === 'macOS';
const isIphone = !!userAgent.match(/iPhone/i);
const isPortrait = () => window.innerHeight > window.innerWidth;
const deviceInfo = {
  isTablet,
  isPhone,
  isMobile,
  hasMediaDevices,
  osName,
  isPortrait,
  isIos,
  isMacos,
  isIphone
};
module.exportDefault(deviceInfo);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"dom-utils.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/dom-utils.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  registerTitleView: () => registerTitleView,
  unregisterTitleView: () => unregisterTitleView,
  convertRemToPixels: () => convertRemToPixels
});
const TITLE_WITH_VIEW = 3;
const getTitleData = () => {
  var _title$text;
  const title = document.getElementsByTagName('title')[0];
  return {
    title,
    data: title === null || title === void 0 ? void 0 : (_title$text = title.text) === null || _title$text === void 0 ? void 0 : _title$text.split(' - ')
  };
};
const registerTitleView = v => {
  const {
    title,
    data
  } = getTitleData();
  if (data.length < TITLE_WITH_VIEW) data.push("".concat(v));else data.splice(TITLE_WITH_VIEW - 1, TITLE_WITH_VIEW, v);
  title.text = data.join(' - ');
};
const unregisterTitleView = () => {
  const {
    title,
    data
  } = getTitleData();
  if (data.length === TITLE_WITH_VIEW) {
    data.splice(TITLE_WITH_VIEW - 1, TITLE_WITH_VIEW, 'Default');
  }
  title.text = data.join(' - ');
};
const convertRemToPixels = rem => {
  return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);
};
module.exportDefault({
  registerTitleView,
  unregisterTitleView,
  convertRemToPixels
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fetchStunTurnServers.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/fetchStunTurnServers.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  fetchStunTurnServers: () => fetchStunTurnServers,
  fetchWebRTCMappedStunTurnServers: () => fetchWebRTCMappedStunTurnServers,
  getFallbackStun: () => getFallbackStun,
  getMappedFallbackStun: () => getMappedFallbackStun,
  hasTurnServer: () => hasTurnServer
});
let STUN_TURN_DICT;
let MAPPED_STUN_TURN_DICT;
let TURN_CACHE_VALID_UNTIL = Math.floor(Date.now() / 1000);
let HAS_SEEN_TURN_SERVER = false;
const fetchStunTurnServers = function (sessionToken) {
  const now = Math.floor(Date.now() / 1000);
  const MEDIA = window.meetingClientSettings.public.media;
  const CACHE_STUN_TURN = MEDIA.cacheStunTurnServers;
  if (STUN_TURN_DICT && CACHE_STUN_TURN && now < TURN_CACHE_VALID_UNTIL) return Promise.resolve(STUN_TURN_DICT);
  const handleStunTurnResponse = _ref => {
    let {
      stunServers,
      turnServers
    } = _ref;
    if (!stunServers && !turnServers) {
      return Promise.reject(new Error('Could not fetch STUN/TURN servers'));
    }
    const turnReply = [];
    let max_ttl = null;
    turnServers.forEach(turnEntry => {
      const {
        password,
        url,
        username
      } = turnEntry;
      const valid_until = parseInt(username.split(':')[0]);
      if (!max_ttl) {
        max_ttl = valid_until;
      } else if (valid_until < max_ttl) {
        max_ttl = valid_until;
      }
      turnReply.push({
        urls: url,
        password,
        username
      });
      HAS_SEEN_TURN_SERVER = true;
    });
    TURN_CACHE_VALID_UNTIL = max_ttl;
    const stDictionary = {
      stun: stunServers.map(server => server.url),
      turn: turnReply
    };
    STUN_TURN_DICT = stDictionary;
    return Promise.resolve(stDictionary);
  };
  const STUN_TURN_FETCH_URL = window.meetingClientSettings.public.media.stunTurnServersFetchAddress;
  const url = "".concat(STUN_TURN_FETCH_URL, "?sessionToken=").concat(sessionToken);
  return fetch(url, {
    credentials: 'include'
  }).then(res => res.json()).then(handleStunTurnResponse);
};
const mapStunTurn = _ref2 => {
  let {
    stun,
    turn
  } = _ref2;
  const rtcStuns = stun.map(url => ({
    urls: url
  }));
  const rtcTurns = turn.map(t => ({
    urls: t.urls,
    credential: t.password,
    username: t.username
  }));
  return rtcStuns.concat(rtcTurns);
};
const getFallbackStun = () => {
  const FALLBACK_STUN_SERVER = window.meetingClientSettings.public.media.fallbackStunServer;
  const stun = FALLBACK_STUN_SERVER ? [FALLBACK_STUN_SERVER] : [];
  return {
    stun,
    turn: []
  };
};
const getMappedFallbackStun = () => {
  const FALLBACK_STUN_SERVER = window.meetingClientSettings.public.media.fallbackStunServer;
  return FALLBACK_STUN_SERVER ? [{
    urls: FALLBACK_STUN_SERVER
  }] : [];
};
const fetchWebRTCMappedStunTurnServers = function (sessionToken) {
  const MEDIA = window.meetingClientSettings.public.media;
  const CACHE_STUN_TURN = MEDIA.cacheStunTurnServers;
  return new Promise(async (resolve, reject) => {
    try {
      const now = Math.floor(Date.now() / 1000);
      if (MAPPED_STUN_TURN_DICT && CACHE_STUN_TURN && now < TURN_CACHE_VALID_UNTIL) {
        return resolve(MAPPED_STUN_TURN_DICT);
      }
      const stDictionary = await fetchStunTurnServers(sessionToken);
      MAPPED_STUN_TURN_DICT = mapStunTurn(stDictionary);
      return resolve(MAPPED_STUN_TURN_DICT);
    } catch (error) {
      return reject(error);
    }
  });
};
const hasTurnServer = () => {
  return HAS_SEEN_TURN_SERVER;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"humanizeSeconds.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/humanizeSeconds.js                                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const humanizeSeconds = time => {
  const hours = Math.floor(time / 3600);
  const minutes = Math.floor(time % 3600 / 60);
  const seconds = time % 60;
  const formatNumber = num => {
    if (num < 10) {
      return "0".concat(num);
    }
    return num.toString();
  };
  if (hours > 0) {
    return "".concat(formatNumber(hours), ":").concat(formatNumber(minutes), ":").concat(formatNumber(seconds));
  }
  return "".concat(formatNumber(minutes), ":").concat(formatNumber(seconds));
};
module.exportDefault(humanizeSeconds);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"keyCodes.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/keyCodes.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  SPACE: () => SPACE,
  ENTER: () => ENTER,
  TAB: () => TAB,
  ESCAPE: () => ESCAPE,
  ARROW_UP: () => ARROW_UP,
  ARROW_DOWN: () => ARROW_DOWN,
  ARROW_RIGHT: () => ARROW_RIGHT,
  ARROW_LEFT: () => ARROW_LEFT,
  PAGE_UP: () => PAGE_UP,
  PAGE_DOWN: () => PAGE_DOWN,
  A: () => A
});
const SPACE = 32;
const ENTER = 13;
const TAB = 9;
const ESCAPE = 27;
const ARROW_UP = 38;
const ARROW_DOWN = 40;
const ARROW_RIGHT = 39;
const ARROW_LEFT = 37;
const PAGE_UP = 33;
const PAGE_DOWN = 34;
const A = 65;
module.exportDefault({
  SPACE,
  ENTER,
  TAB,
  ESCAPE,
  ARROW_UP,
  ARROW_DOWN,
  ARROW_RIGHT,
  ARROW_LEFT,
  PAGE_UP,
  PAGE_DOWN,
  A
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"media-stream-utils.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/media-stream-utils.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const stopMediaStreamTracks = stream => {
  if (stream && typeof stream.getTracks === 'function') {
    stream.getTracks().forEach(track => {
      if (typeof track.stop === 'function' && track.readyState !== 'ended') {
        track.stop();
        // Manually emit the event as a safeguard; Firefox doesn't fire it when it
        // should with live MediaStreamTracks...
        const trackStoppedEvt = new MediaStreamTrackEvent('ended', {
          track
        });
        track.dispatchEvent(trackStoppedEvt);
      }
    });
  }
};
const getAudioTracks = stream => {
  if (stream) {
    if (typeof stream.getAudioTracks === 'function') {
      return stream.getAudioTracks();
    }
    if (typeof stream.getTracks === 'function') {
      return stream.getTracks().filter(track => track.kind === 'audio');
    }
  }
  return [];
};
const getVideoTracks = stream => {
  if (stream) {
    if (typeof stream.getVideoTracks === 'function') {
      return stream.getVideoTracks();
    }
    if (typeof stream.getTracks === 'function') {
      return stream.getTracks().filter(track => track.kind === 'video');
    }
  }
  return [];
};
const getDeviceIdFromTrack = track => {
  if (track && typeof track.getSettings === 'function') {
    const {
      deviceId
    } = track.getSettings();
    return deviceId;
  }
  return '';
};
const extractDeviceIdFromStream = (stream, kind) => {
  // An empty string is the browser's default...
  let tracks = [];
  switch (kind) {
    case 'audio':
      tracks = getAudioTracks(stream);
      return getDeviceIdFromTrack(tracks[0]);
    case 'video':
      tracks = getVideoTracks(stream);
      return getDeviceIdFromTrack(tracks[0]);
    default:
      {
        return '';
      }
  }
};
module.exportDefault({
  stopMediaStreamTracks,
  getVideoTracks,
  extractDeviceIdFromStream
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mediaElementPlayRetry.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/mediaElementPlayRetry.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const DEFAULT_MAX_RETRIES = 10;
const DEFAULT_RETRY_TIMEOUT = 500;
const playAndRetry = async function (mediaElement) {
  let maxRetries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_MAX_RETRIES;
  let attempt = 0;
  let played = false;
  const playElement = () => new Promise((resolve, reject) => {
    setTimeout(() => {
      mediaElement.play().then(resolve).catch(reject);
    }, DEFAULT_RETRY_TIMEOUT);
  });
  while (!played && attempt < maxRetries && mediaElement.paused) {
    try {
      await playElement();
      played = true;
      return played;
    } catch (error) {
      attempt += 1;
    }
  }
  return played || mediaElement.paused;
};
module.exportDefault(playAndRetry);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sdpUtils.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/sdpUtils.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  interop: () => interop,
  isUnifiedPlan: () => isUnifiedPlan,
  toPlanB: () => toPlanB,
  toUnifiedPlan: () => toUnifiedPlan,
  stripMDnsCandidates: () => stripMDnsCandidates,
  filterValidIceCandidates: () => filterValidIceCandidates,
  analyzeSdp: () => analyzeSdp,
  logSelectedCandidate: () => logSelectedCandidate,
  forceDisableStereo: () => forceDisableStereo
});
let Interop;
module.link("@jitsi/sdp-interop", {
  default(v) {
    Interop = v;
  }
}, 0);
let transform;
module.link("sdp-transform", {
  default(v) {
    transform = v;
  }
}, 1);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 2);
// sdp-interop library for unified-plan <-> plan-b translation
const interop = new Interop.Interop();

// Some heuristics to determine if the input SDP is Unified Plan
const isUnifiedPlan = sdp => {
  const parsedSDP = transform.parse(sdp);
  if (parsedSDP.media.length <= 3 && parsedSDP.media.every(m => ['video', 'audio', 'data'].indexOf(m.mid) !== -1)) {
    logger.info({
      logCode: 'sdp_utils_not_unified_plan'
    }, 'SDP does not look like Unified Plan');
    return false;
  }
  logger.info({
    logCode: 'sdp_utils_is_unified_plan'
  }, 'SDP looks like Unified Plan');
  return true;
};

// Some heuristics to determine if the input SDP is Plan B
const isPlanB = sdp => {
  const parsedSDP = transform.parse(sdp);
  if (parsedSDP.media.length > 3 || !parsedSDP.media.every(m => ['video', 'audio', 'data'].indexOf(m.mid) !== -1)) {
    logger.info({
      logCode: 'sdp_utils_not_plan_b'
    }, 'SDP does not look like Plan B');
    return false;
  }
  logger.info({
    logCode: 'sdp_utils_is_plan_b'
  }, 'SDP looks like Plan B');
  return true;
};

// Specific method for translating FS SDPs from Plan B to Unified Plan (vice-versa)
const toPlanB = unifiedPlanSDP => {
  const planBSDP = interop.toPlanB(unifiedPlanSDP);
  logger.info({
    logCode: 'sdp_utils_unified_plan_to_plan_b'
  }, "Converted Unified Plan to Plan B ".concat(JSON.stringify(planBSDP)));
  return planBSDP;
};
const toUnifiedPlan = planBSDP => {
  const unifiedPlanSDP = interop.toUnifiedPlan(planBSDP);
  logger.info({
    logCode: 'sdp_utils_plan_b_to_unified_plan'
  }, "Converted Plan B to Unified Plan ".concat(JSON.stringify(unifiedPlanSDP)));
  return unifiedPlanSDP;
};
const stripMDnsCandidates = sdp => {
  const parsedSDP = transform.parse(sdp.sdp);
  let strippedCandidates = 0;
  parsedSDP.media.forEach(media => {
    if (media.candidates) {
      media.candidates = media.candidates.filter(candidate => {
        if (candidate.ip && candidate.ip.indexOf('.local') === -1) {
          return true;
        }
        strippedCandidates += 1;
        return false;
      });
    }
  });
  if (strippedCandidates > 0) {
    logger.info({
      logCode: 'sdp_utils_mdns_candidate_strip'
    }, "Stripped ".concat(strippedCandidates, " mDNS candidates"));
  }
  return {
    sdp: transform.write(parsedSDP),
    type: sdp.type
  };
};
const filterValidIceCandidates = (validIceCandidates, sdp) => {
  if (!validIceCandidates || !validIceCandidates.length) return sdp;
  const matchCandidatesIp = (candidate, mediaCandidate) => candidate.address && candidate.address.includes(mediaCandidate.ip) || candidate.relatedAddress && candidate.relatedAddress.includes(mediaCandidate.ip);
  const parsedSDP = transform.parse(sdp.sdp);
  let strippedCandidates = 0;
  parsedSDP.media.forEach(media => {
    if (media.candidates) {
      media.candidates = media.candidates.filter(candidate => {
        if (candidate.ip && candidate.type && candidate.transport && validIceCandidates.find(c => c.protocol === candidate.transport && matchCandidatesIp(c, candidate))) {
          return true;
        }
        strippedCandidates += 1;
        return false;
      });
    }
  });
  if (strippedCandidates > 0) {
    logger.info({
      logCode: 'sdp_utils_mdns_candidate_strip'
    }, "Filtered ".concat(strippedCandidates, " invalid candidates from trickle SDP"));
  }
  return {
    sdp: transform.write(parsedSDP),
    type: sdp.type
  };
};
const isPublicIpv4 = ip => {
  const ipParts = ip.split('.');
  switch (ipParts[0]) {
    case 10:
    case 127:
      return false;
    case 172:
      return ipParts[1] <= 16 || ipParts[1] > 32;
    case 192:
      return ipParts[1] !== 168;
    default:
      return true;
  }
};
const parseIP = ip => {
  if (ip && typeof ip === 'string') {
    if (ip.indexOf(':') !== -1) return {
      type: 'v6',
      public: true
    };
    if (ip.indexOf('.local') !== -1) return {
      type: 'mdns',
      public: false
    };
    if (ip.indexOf('.')) return {
      type: 'v4',
      public: isPublicIpv4(ip)
    };
  }
  return {
    type: 'unknown',
    public: false
  };
};
const analyzeSdp = function (sdp) {
  let sendLogs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  // For now we just need to parse and log the different pieces. In the future we're going to want
  // to be tracking whether there were TURN candidates and IPv4 candidates to make informed
  // decisions about what to do on fallbacks/reconnects.
  const parsedSDP = transform.parse(sdp);
  const v4Info = {
    found: false,
    public: false
  };
  const v6Info = {
    found: false,
    public: false
  };
  const srflxInfo = {
    found: false,
    type: 'not found',
    public: false
  };
  const prflxInfo = {
    found: false,
    type: 'not found',
    public: false
  };
  const relayInfo = {
    found: false,
    type: 'not found',
    public: false
  };

  // Things to parse:
  // Are there any IPv4/IPv6
  // Is there a server reflexive candidate? (srflx) is a public or private IP
  // Is there a relay (TURN) candidate
  parsedSDP.media.forEach(media => {
    if (media.candidates) {
      // console.log("**** Found candidates ****")
      media.candidates.forEach(candidate => {
        // console.log(candidate)
        const ipInfo = parseIP(candidate.ip);
        switch (ipInfo.type) {
          case 'v4':
            v4Info.found = true;
            v4Info.public = v4Info.public || ipInfo.public;
            break;
          case 'v6':
            v6Info.found = true;
            v6Info.public = v6Info.public || ipInfo.public;
            break;
        }
        switch (candidate.type) {
          case 'srflx':
            srflxInfo.found = true;
            if (srflxInfo.type === 'not found') {
              srflxInfo.type = ipInfo.type;
            } else if (srflxInfo.type !== ipInfo.type) {
              srflxInfo.type = 'both';
            }
            srflxInfo.public = srflxInfo.public || ipInfo.public;
            break;
          case 'prflx':
            prflxInfo.found = true;
            if (prflxInfo.type === 'not found') {
              prflxInfo.type = ipInfo.type;
            } else if (prflxInfo.type !== ipInfo.type) {
              prflxInfo.type = 'both';
            }
            prflxInfo.public = prflxInfo.public || ipInfo.public;
            break;
          case 'relay':
            relayInfo.found = true;
            if (relayInfo.type === 'not found') {
              relayInfo.type = ipInfo.type;
            } else if (relayInfo.type !== ipInfo.type) {
              relayInfo.type = 'both';
            }
            relayInfo.public = relayInfo.public || ipInfo.public;
            break;
        }
      });
      // console.log("**** End of candidates ****")
    }
  });

  // candidate types
  if (sendLogs) {
    logger.info({
      logCode: 'sdp_utils_candidate_types',
      extraInfo: {
        foundV4Candidate: v4Info.found,
        foundV4PublicCandidate: v4Info.public,
        foundV6Candidate: v6Info.found
      }
    }, "Found candidates ".concat(v4Info.found ? 'with' : 'without', " type v4 (public? ").concat(v4Info.public, ") and ").concat(v6Info.found ? 'with' : 'without', " type v6"));

    // server reflexive
    if (srflxInfo.found) {
      logger.info({
        logCode: 'sdp_utils_server_reflexive_found',
        extraInfo: {
          candidateType: srflxInfo.type,
          candidatePublic: srflxInfo.public
        }
      }, 'Found a server reflexive candidate');
    } else {
      logger.info({
        logCode: 'sdp_utils_no_server_reflexive'
      }, 'No server reflexive candidate found');
    }

    // peer reflexive
    if (prflxInfo.found) {
      logger.info({
        logCode: 'sdp_utils_peer_reflexive_found',
        extraInfo: {
          candidateType: prflxInfo.type,
          candidatePublic: prflxInfo.public
        }
      }, 'Found a peer reflexive candidate');
    } else {
      logger.info({
        logCode: 'sdp_utils_no_peer_reflexive'
      }, 'No peer reflexive candidate found');
    }

    // relay
    if (relayInfo.found) {
      logger.info({
        logCode: 'sdp_utils_relay_found',
        extraInfo: {
          candidateType: relayInfo.type,
          candidatePublic: relayInfo.public
        }
      }, 'Found a relay candidate');
    } else {
      logger.info({
        logCode: 'sdp_utils_no_relay'
      }, 'No relay candidate found');
    }
  }
  return {
    v4Info,
    v6Info,
    srflxInfo,
    prflxInfo,
    relayInfo
  };
};

// We grab the protocol type from the answer SDP because Safari stats don't contain the
// candidate IP addresses
const logSelectedCandidate = async (peer, isIpv6) => {
  peer.getStats().then(report => {
    let localCandidate;
    const values = Array.from(report.values());
    const candidatePair = values.find(item => item.type === 'candidate-pair' && (item.selected || item.state === 'succeeded'));
    if (candidatePair) {
      localCandidate = values.find(item => item.id === candidatePair.localCandidateId);
    }
    const ipType = isIpv6 ? 'v6' : 'v4';
    if (candidatePair) {
      if (localCandidate) {
        // console.log(localCandidate);
        // Safari doesn't include the IP address in the candidate info so we can't rely on this
        // const candidateIp = localCandidate.ip || localCandidate.address;
        // const ipInfo = parseIP(candidateIp);

        logger.info({
          logCode: 'sip_js_candidate_selected',
          extraInfo: {
            candidateType: localCandidate.candidateType,
            candidateProtocol: localCandidate.protocol,
            ipType,
            networkType: localCandidate.networkType
          }
        }, "ICE Candidate selected - type: ".concat(localCandidate.candidateType, ", protocol: ").concat(localCandidate.protocol, ", ipProtocol: ").concat(ipType));
      } else {
        logger.info({
          logCode: 'sip_js_lcandidate_not_found',
          extraInfo: {
            ipType
          }
        }, "ICE Candidate selected, but could not find local candidate - ipProtocol: ".concat(ipType));
      }
    } else {
      logger.info({
        logCode: 'sip_js_candidate_pair_not_found',
        extraInfo: {
          ipType
        }
      }, "ICE Candidate selected, but could not find pair - ipProtocol: ".concat(ipType));
    }

    // TODO return the data back
  });
};

const forceDisableStereo = _ref => {
  let {
    sdp,
    type
  } = _ref;
  return {
    sdp: sdp.replace(/stereo=1/ig, 'stereo=0'),
    type
  };
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"slideCalcUtils.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/slideCalcUtils.js                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  HUNDRED_PERCENT: () => HUNDRED_PERCENT,
  MAX_PERCENT: () => MAX_PERCENT,
  MYSTERY_NUM: () => MYSTERY_NUM,
  STEP: () => STEP,
  default: () => SlideCalcUtil
});
const HUNDRED_PERCENT = 100;
const MAX_PERCENT = 400;
const MYSTERY_NUM = 2;
const STEP = 25;
class SlideCalcUtil {
  // After lots of trial and error on why syncing doesn't work properly, I found I had to
  // multiply the coordinates by 2. There's something I don't understand probably on the
  // canvas coordinate system. (ralam feb 22, 2012)

  /**
   * Calculate the viewed region width
   */
  static calcViewedRegionWidth(vpw, cpw) {
    const width = vpw / cpw * HUNDRED_PERCENT;
    if (width > HUNDRED_PERCENT) {
      return HUNDRED_PERCENT;
    }
    return width;
  }
  static calcViewedRegionHeight(vph, cph) {
    const height = vph / cph * HUNDRED_PERCENT;
    if (height > HUNDRED_PERCENT) {
      return HUNDRED_PERCENT;
    }
    return height;
  }
  static calcCalcPageSizeWidth(ftp, vpw, vrw) {
    if (ftp) {
      return vpw / vrw * HUNDRED_PERCENT;
    }
    return vpw;
  }
  static calcCalcPageSizeHeight(ftp, vph, vrh, cpw, cph, opw, oph) {
    if (ftp) {
      return vph / vrh * HUNDRED_PERCENT;
    }
    return cpw / opw * oph;
  }
  static calcViewedRegionX(cpx, cpw) {
    const viewX = -cpx / 2 / cpw * 100;
    if (viewX > 0) {
      return 0;
    }
    return viewX;
  }
  static calcViewedRegionY(cpy, cph) {
    const viewY = -cpy / 2 / cph * 100;
    if (viewY > 0) {
      return 0;
    }
    return viewY;
  }
  static calculateViewportX(vpw, pw) {
    if (vpw === pw) {
      return 0;
    }
    return (pw - vpw) / MYSTERY_NUM;
  }
  static calculateViewportY(vph, ph) {
    if (vph === ph) {
      return 0;
    }
    return (ph - vph) / MYSTERY_NUM;
  }
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"stats.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/stats.js                                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  monitorAudioConnection: () => monitorAudioConnection
});
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 0);
// Probes done in an interval
const PROBES = 5;
const stop = callback => {
  logger.debug({
    logCode: 'stats_stop_monitor'
  }, 'Lost peer connection. Stopping monitor');
  callback(clearResult());
  return;
};
const isActive = conn => {
  let active = false;
  if (conn) {
    const {
      connectionState
    } = conn;
    const logCode = 'stats_connection_state';
    switch (connectionState) {
      case 'new':
      case 'connecting':
      case 'connected':
      case 'disconnected':
        active = true;
        break;
      case 'failed':
      case 'closed':
      default:
        logger.warn({
          logCode
        }, connectionState);
    }
  } else {
    logger.error({
      logCode: 'stats_missing_connection'
    }, 'Missing connection');
  }
  return active;
};
const collect = (conn, callback) => {
  const INTERVAL = window.meetingClientSettings.public.stats.interval / PROBES;
  let stats = [];
  const monitor = (conn, stats) => {
    if (!isActive(conn)) return stop(callback);
    conn.getStats().then(results => {
      if (!results) return stop(callback);
      let inboundRTP;
      let remoteInboundRTP;
      results.forEach(res => {
        switch (res.type) {
          case 'inbound-rtp':
            inboundRTP = res;
            break;
          case 'remote-inbound-rtp':
            remoteInboundRTP = res;
            break;
          default:
        }
      });
      if (inboundRTP || remoteInboundRTP) {
        if (!inboundRTP) {
          logger.debug({
            logCode: 'stats_missing_inbound_rtc'
          }, 'Missing local inbound RTC. Using remote instead');
        }
        stats.push(buildData(inboundRTP || remoteInboundRTP));
        while (stats.length > PROBES) stats.shift();
        const interval = calculateInterval(stats);
        callback(buildResult(interval));
      }
      setTimeout(monitor, INTERVAL, conn, stats);
    }).catch(error => {
      logger.debug({
        logCode: 'stats_get_stats_error',
        extraInfo: {
          error
        }
      }, 'WebRTC stats not available');
    });
  };
  monitor(conn, stats);
};
const buildData = inboundRTP => {
  return {
    packets: {
      received: inboundRTP.packetsReceived,
      lost: inboundRTP.packetsLost
    },
    bytes: {
      received: inboundRTP.bytesReceived
    },
    jitter: inboundRTP.jitter
  };
};
const buildResult = interval => {
  const rate = calculateRate(interval.packets);
  return {
    packets: {
      received: interval.packets.received,
      lost: interval.packets.lost
    },
    bytes: {
      received: interval.bytes.received
    },
    jitter: interval.jitter,
    rate: rate,
    loss: calculateLoss(rate),
    MOS: calculateMOS(rate)
  };
};
const clearResult = () => {
  return {
    packets: {
      received: 0,
      lost: 0
    },
    bytes: {
      received: 0
    },
    jitter: 0,
    rate: 0,
    loss: 0,
    MOS: 0
  };
};
const diff = (single, first, last) => Math.abs((single ? 0 : last) - first);
const calculateInterval = stats => {
  const single = stats.length === 1;
  const first = stats[0];
  const last = stats[stats.length - 1];
  return {
    packets: {
      received: diff(single, first.packets.received, last.packets.received),
      lost: diff(single, first.packets.lost, last.packets.lost)
    },
    bytes: {
      received: diff(single, first.bytes.received, last.bytes.received)
    },
    jitter: Math.max.apply(Math, stats.map(s => s.jitter))
  };
};
const calculateRate = packets => {
  const {
    received,
    lost
  } = packets;
  const rate = received > 0 ? (received - lost) / received * 100 : 100;
  if (rate < 0 || rate > 100) return 100;
  return rate;
};
const calculateLoss = rate => {
  return 1 - rate / 100;
};
const calculateMOS = rate => {
  return 1 + 0.035 * rate + 0.000007 * rate * (rate - 60) * (100 - rate);
};
const monitorAudioConnection = conn => {
  if (!conn) return;
  logger.debug({
    logCode: 'stats_audio_monitor'
  }, 'Starting to monitor audio connection');
  collect(conn, result => {
    const event = new CustomEvent('audiostats', {
      detail: result
    });
    window.dispatchEvent(event);
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"string-utils.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/string-utils.js                                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  capitalizeFirstLetter: () => capitalizeFirstLetter,
  getDateString: () => getDateString,
  stripTags: () => stripTags,
  escapeHtml: () => escapeHtml,
  unescapeHtml: () => unescapeHtml,
  formatLocaleCode: () => formatLocaleCode,
  safeMatch: () => safeMatch,
  lowercaseTrim: () => lowercaseTrim,
  upperFirst: () => upperFirst,
  uniqueId: () => uniqueId
});
let sanitize;
module.link("sanitize-html", {
  default(v) {
    sanitize = v;
  }
}, 0);
const capitalizeFirstLetter = function () {
  let s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return s.charAt(0).toUpperCase() + s.slice(1);
};
const getDateString = function () {
  let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
  const hours = date.getHours().toString().padStart(2, 0);
  const minutes = date.getMinutes().toString().padStart(2, 0);
  const month = (date.getMonth() + 1).toString().padStart(2, 0);
  const dayOfMonth = date.getDate().toString().padStart(2, 0);
  const time = "".concat(hours, "-").concat(minutes);
  const dateString = "".concat(date.getFullYear(), "-").concat(month, "-").concat(dayOfMonth, "_").concat(time);
  return dateString;
};
const stripTags = text => sanitize(text, {
  allowedTags: []
});
const escapeHtml = text => {
  const div = document.createElement('div');
  div.appendChild(document.createTextNode(text));
  return div.innerHTML;
};
const unescapeHtml = input => {
  const e = document.createElement('textarea');
  e.innerHTML = input;
  return e.value;
};
const formatLocaleCode = locale => {
  const formattedLocale = locale === null || locale === void 0 ? void 0 : locale.replace('_', '-').replace('@', '-');
  return {
    language: formattedLocale === null || formattedLocale === void 0 ? void 0 : formattedLocale.split('-')[0],
    formattedLocale
  };
};
const safeMatch = (regex, content, defaultValue) => {
  const regexLimit = 50000;
  if (content.length > regexLimit) return defaultValue;
  return content.match(regex) || defaultValue;
};
const lowercaseTrim = text => {
  return text.trim().toLowerCase();
};
const upperFirst = string => {
  return string ? string.charAt(0).toUpperCase() + string.slice(1) : '';
};
const uniqueId = (() => {
  let num = 0;
  return function (prefix) {
    prefix = String(prefix) || '';
    num += 1;
    return prefix + num;
  };
})();
module.exportDefault({
  capitalizeFirstLetter,
  getDateString,
  stripTags,
  escapeHtml,
  unescapeHtml,
  formatLocaleCode,
  safeMatch,
  lowercaseTrim,
  upperFirst,
  uniqueId
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"throttle.js":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// imports/utils/throttle.js                                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  throttle: () => throttle
});
function throttle(func, delay) {
  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let timeoutId;
  let lastExecTime = 0;
  let leadingExec = true;
  const {
    leading = true,
    trailing = true
  } = options;
  let cancelPendingExecution = false; // Flag to track cancellation

  const throttledFunction = function () {
    const context = this;
    const args = arguments;
    const elapsed = Date.now() - lastExecTime;
    function execute() {
      if (!cancelPendingExecution) {
        // Only execute if not cancelled
        func.apply(context, args);
        lastExecTime = Date.now();
      }
    }
    if (leadingExec && leading) {
      execute();
      leadingExec = false;
      const nextExecDelay = elapsed < delay ? delay - elapsed : delay;
      setTimeout(function () {
        leadingExec = true;
      }, nextExecDelay);
    } else if (!timeoutId && trailing) {
      timeoutId = setTimeout(function () {
        execute();
        timeoutId = null;
      }, delay - elapsed);
    }
  };

  // Add a cancel method to the throttled function
  throttledFunction.cancel = function () {
    cancelPendingExecution = true;
    clearTimeout(timeoutId);
    timeoutId = null;
  };
  return throttledFunction;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"client":{"meetingClient.jsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/meetingClient.jsx                                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React, useContext, useEffect;
module.link("react", {
  default(v) {
    React = v;
  },
  useContext(v) {
    useContext = v;
  },
  useEffect(v) {
    useEffect = v;
  }
}, 0);
let logger;
module.link("/imports/startup/client/logger", {
  default(v) {
    logger = v;
  }
}, 1);
module.link("/imports/ui/services/mobile-app");
let Base;
module.link("/imports/startup/client/base", {
  default(v) {
    Base = v;
  }
}, 2);
let ContextProviders;
module.link("/imports/ui/components/context-providers/component", {
  default(v) {
    ContextProviders = v;
  }
}, 3);
let ConnectionManager;
module.link("/imports/ui/components/connection-manager/component", {
  default(v) {
    ConnectionManager = v;
  }
}, 4);
let adapter;
module.link("webrtc-adapter", {
  default(v) {
    adapter = v;
  }
}, 5);
let LoadingContext;
module.link("/imports/ui/components/common/loading-screen/loading-screen-HOC/component", {
  LoadingContext(v) {
    LoadingContext = v;
  }
}, 6);
let IntlAdapter;
module.link("/imports/startup/client/intlAdapter", {
  default(v) {
    IntlAdapter = v;
  }
}, 7);
let PresenceAdapter;
module.link("../imports/ui/components/presence-adapter/component", {
  default(v) {
    PresenceAdapter = v;
  }
}, 8);
let CustomUsersSettings;
module.link("/imports/ui/components/join-handler/custom-users-settings/component", {
  default(v) {
    CustomUsersSettings = v;
  }
}, 9);
// eslint-disable-next-line import/prefer-default-export
const Startup = () => {
  const loadingContextInfo = useContext(LoadingContext);
  useEffect(() => {
    loadingContextInfo.setLoading(false, '');
  }, []);
  // Logs all uncaught exceptions to the client logger
  window.addEventListener('error', e => {
    let message = e.message || e.error.toString();

    // Chrome will add on "Uncaught" to the start of the message for some reason. This
    // will strip that so the errors can hopefully be grouped better.
    if (message) message = message.replace(/^Uncaught/, '').trim();
    let {
      stack
    } = e.error;

    // Checks if stack includes the message, if not add the two together.
    if (!stack.includes(message)) {
      stack = "".concat(message, "\n").concat(stack);
    }
    logger.error({
      logCode: 'startup_error',
      extraInfo: {
        stackTrace: stack
      }
    }, message);
  });
  return /*#__PURE__*/React.createElement(ContextProviders, null, /*#__PURE__*/React.createElement(PresenceAdapter, null, /*#__PURE__*/React.createElement(IntlAdapter, null, /*#__PURE__*/React.createElement(Base, null))));
};
module.exportDefault(Startup);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"main.tsx":function module(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// client/main.tsx                                                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let React;
module.link("react", {
  default(v) {
    React = v;
  }
}, 0);
let ConnectionManager;
module.link("/imports/ui/components/connection-manager/component", {
  default(v) {
    ConnectionManager = v;
  }
}, 1);
let render;
module.link("react-dom", {
  render(v) {
    render = v;
  }
}, 2);
let SettingsLoader;
module.link("/imports/ui/components/settings-loader/component", {
  default(v) {
    SettingsLoader = v;
  }
}, 3);
let ErrorBoundary;
module.link("/imports/ui/components/common/error-boundary/component", {
  default(v) {
    ErrorBoundary = v;
  }
}, 4);
let ErrorScreen;
module.link("/imports/ui/components/error-screen/component", {
  ErrorScreen(v) {
    ErrorScreen = v;
  }
}, 5);
let PresenceManager;
module.link("/imports/ui/components/join-handler/presenceManager/component", {
  default(v) {
    PresenceManager = v;
  }
}, 6);
let LoadingScreenHOC;
module.link("/imports/ui/components/common/loading-screen/loading-screen-HOC/component", {
  default(v) {
    LoadingScreenHOC = v;
  }
}, 7);
let IntlLoaderContainer;
module.link("/imports/startup/client/intlLoader", {
  default(v) {
    IntlLoaderContainer = v;
  }
}, 8);
let LocatedErrorBoundary;
module.link("/imports/ui/components/common/error-boundary/located-error-boundary/component", {
  default(v) {
    LocatedErrorBoundary = v;
  }
}, 9);
let CustomUsersSettings;
module.link("/imports/ui/components/join-handler/custom-users-settings/component", {
  default(v) {
    CustomUsersSettings = v;
  }
}, 10);
let MeetingClient;
module.link("/client/meetingClient", {
  default(v) {
    MeetingClient = v;
  }
}, 11);
let GraphqlToMakeVarAdapterManager;
module.link("/imports/ui/components/components-data/graphqlToMakeVarAdapterManager/component", {
  default(v) {
    GraphqlToMakeVarAdapterManager = v;
  }
}, 12);
const STARTUP_CRASH_METADATA = {
  logCode: 'app_startup_crash',
  logMessage: 'Possible startup crash'
};
const APP_CRASH_METADATA = {
  logCode: 'app_crash',
  logMessage: 'Possible app crash'
};
const Main = () => {
  return /*#__PURE__*/React.createElement(SettingsLoader, null, /*#__PURE__*/React.createElement(ErrorBoundary, {
    Fallback: ErrorScreen,
    logMetadata: STARTUP_CRASH_METADATA
  }, /*#__PURE__*/React.createElement(LoadingScreenHOC, null, /*#__PURE__*/React.createElement(IntlLoaderContainer, null, /*#__PURE__*/React.createElement(LocatedErrorBoundary, {
    Fallback: ErrorScreen,
    logMetadata: APP_CRASH_METADATA
  }, /*#__PURE__*/React.createElement(ConnectionManager, null, /*#__PURE__*/React.createElement(PresenceManager, null, /*#__PURE__*/React.createElement(GraphqlToMakeVarAdapterManager, null, /*#__PURE__*/React.createElement(CustomUsersSettings, null, /*#__PURE__*/React.createElement(MeetingClient, null))))))))));
};
render( /*#__PURE__*/React.createElement(Main, null), document.getElementById('app'));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},{
  "extensions": [
    ".js",
    ".json",
    ".html",
    ".mjs",
    ".ts",
    ".tsx",
    ".css",
    ".jsx"
  ]
});

var exports = require("/client/main.tsx");