// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: core/service.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreService_IsMeetingRunning_FullMethodName   = "/org.bigbluebutton.protos.CoreService/isMeetingRunning"
	CoreService_GetMeetingInfo_FullMethodName     = "/org.bigbluebutton.protos.CoreService/getMeetingInfo"
	CoreService_ListMeetings_FullMethodName       = "/org.bigbluebutton.protos.CoreService/listMeetings"
	CoreService_GetMeetingsStream_FullMethodName  = "/org.bigbluebutton.protos.CoreService/getMeetingsStream"
	CoreService_IsVoiceBridgeInUse_FullMethodName = "/org.bigbluebutton.protos.CoreService/isVoiceBridgeInUse"
	CoreService_CreateMeeting_FullMethodName      = "/org.bigbluebutton.protos.CoreService/createMeeting"
)

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	IsMeetingRunning(ctx context.Context, in *MeetingRunningRequest, opts ...grpc.CallOption) (*MeetingRunningResponse, error)
	GetMeetingInfo(ctx context.Context, in *MeetingInfoRequest, opts ...grpc.CallOption) (*MeetingInfoResponse, error)
	ListMeetings(ctx context.Context, in *ListMeetingsRequest, opts ...grpc.CallOption) (*ListMeetingsResponse, error)
	GetMeetingsStream(ctx context.Context, in *GetMeetingsStreamRequest, opts ...grpc.CallOption) (CoreService_GetMeetingsStreamClient, error)
	IsVoiceBridgeInUse(ctx context.Context, in *VoiceBridgeInUseRequest, opts ...grpc.CallOption) (*VoiceBridgeInUseResponse, error)
	CreateMeeting(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*CreateMeetingResponse, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) IsMeetingRunning(ctx context.Context, in *MeetingRunningRequest, opts ...grpc.CallOption) (*MeetingRunningResponse, error) {
	out := new(MeetingRunningResponse)
	err := c.cc.Invoke(ctx, CoreService_IsMeetingRunning_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetMeetingInfo(ctx context.Context, in *MeetingInfoRequest, opts ...grpc.CallOption) (*MeetingInfoResponse, error) {
	out := new(MeetingInfoResponse)
	err := c.cc.Invoke(ctx, CoreService_GetMeetingInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) ListMeetings(ctx context.Context, in *ListMeetingsRequest, opts ...grpc.CallOption) (*ListMeetingsResponse, error) {
	out := new(ListMeetingsResponse)
	err := c.cc.Invoke(ctx, CoreService_ListMeetings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetMeetingsStream(ctx context.Context, in *GetMeetingsStreamRequest, opts ...grpc.CallOption) (CoreService_GetMeetingsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoreService_ServiceDesc.Streams[0], CoreService_GetMeetingsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &coreServiceGetMeetingsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreService_GetMeetingsStreamClient interface {
	Recv() (*MeetingInfoResponse, error)
	grpc.ClientStream
}

type coreServiceGetMeetingsStreamClient struct {
	grpc.ClientStream
}

func (x *coreServiceGetMeetingsStreamClient) Recv() (*MeetingInfoResponse, error) {
	m := new(MeetingInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreServiceClient) IsVoiceBridgeInUse(ctx context.Context, in *VoiceBridgeInUseRequest, opts ...grpc.CallOption) (*VoiceBridgeInUseResponse, error) {
	out := new(VoiceBridgeInUseResponse)
	err := c.cc.Invoke(ctx, CoreService_IsVoiceBridgeInUse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) CreateMeeting(ctx context.Context, in *CreateMeetingRequest, opts ...grpc.CallOption) (*CreateMeetingResponse, error) {
	out := new(CreateMeetingResponse)
	err := c.cc.Invoke(ctx, CoreService_CreateMeeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
// All implementations must embed UnimplementedCoreServiceServer
// for forward compatibility
type CoreServiceServer interface {
	IsMeetingRunning(context.Context, *MeetingRunningRequest) (*MeetingRunningResponse, error)
	GetMeetingInfo(context.Context, *MeetingInfoRequest) (*MeetingInfoResponse, error)
	ListMeetings(context.Context, *ListMeetingsRequest) (*ListMeetingsResponse, error)
	GetMeetingsStream(*GetMeetingsStreamRequest, CoreService_GetMeetingsStreamServer) error
	IsVoiceBridgeInUse(context.Context, *VoiceBridgeInUseRequest) (*VoiceBridgeInUseResponse, error)
	CreateMeeting(context.Context, *CreateMeetingRequest) (*CreateMeetingResponse, error)
	mustEmbedUnimplementedCoreServiceServer()
}

// UnimplementedCoreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (UnimplementedCoreServiceServer) IsMeetingRunning(context.Context, *MeetingRunningRequest) (*MeetingRunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMeetingRunning not implemented")
}
func (UnimplementedCoreServiceServer) GetMeetingInfo(context.Context, *MeetingInfoRequest) (*MeetingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeetingInfo not implemented")
}
func (UnimplementedCoreServiceServer) ListMeetings(context.Context, *ListMeetingsRequest) (*ListMeetingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeetings not implemented")
}
func (UnimplementedCoreServiceServer) GetMeetingsStream(*GetMeetingsStreamRequest, CoreService_GetMeetingsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMeetingsStream not implemented")
}
func (UnimplementedCoreServiceServer) IsVoiceBridgeInUse(context.Context, *VoiceBridgeInUseRequest) (*VoiceBridgeInUseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsVoiceBridgeInUse not implemented")
}
func (UnimplementedCoreServiceServer) CreateMeeting(context.Context, *CreateMeetingRequest) (*CreateMeetingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeeting not implemented")
}
func (UnimplementedCoreServiceServer) mustEmbedUnimplementedCoreServiceServer() {}

// UnsafeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServiceServer will
// result in compilation errors.
type UnsafeCoreServiceServer interface {
	mustEmbedUnimplementedCoreServiceServer()
}

func RegisterCoreServiceServer(s grpc.ServiceRegistrar, srv CoreServiceServer) {
	s.RegisterService(&CoreService_ServiceDesc, srv)
}

func _CoreService_IsMeetingRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetingRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).IsMeetingRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_IsMeetingRunning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).IsMeetingRunning(ctx, req.(*MeetingRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetMeetingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeetingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetMeetingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetMeetingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetMeetingInfo(ctx, req.(*MeetingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_ListMeetings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeetingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).ListMeetings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_ListMeetings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).ListMeetings(ctx, req.(*ListMeetingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetMeetingsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetMeetingsStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreServiceServer).GetMeetingsStream(m, &coreServiceGetMeetingsStreamServer{stream})
}

type CoreService_GetMeetingsStreamServer interface {
	Send(*MeetingInfoResponse) error
	grpc.ServerStream
}

type coreServiceGetMeetingsStreamServer struct {
	grpc.ServerStream
}

func (x *coreServiceGetMeetingsStreamServer) Send(m *MeetingInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreService_IsVoiceBridgeInUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceBridgeInUseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).IsVoiceBridgeInUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_IsVoiceBridgeInUse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).IsVoiceBridgeInUse(ctx, req.(*VoiceBridgeInUseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_CreateMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).CreateMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_CreateMeeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).CreateMeeting(ctx, req.(*CreateMeetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreService_ServiceDesc is the grpc.ServiceDesc for CoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.bigbluebutton.protos.CoreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "isMeetingRunning",
			Handler:    _CoreService_IsMeetingRunning_Handler,
		},
		{
			MethodName: "getMeetingInfo",
			Handler:    _CoreService_GetMeetingInfo_Handler,
		},
		{
			MethodName: "listMeetings",
			Handler:    _CoreService_ListMeetings_Handler,
		},
		{
			MethodName: "isVoiceBridgeInUse",
			Handler:    _CoreService_IsVoiceBridgeInUse_Handler,
		},
		{
			MethodName: "createMeeting",
			Handler:    _CoreService_CreateMeeting_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getMeetingsStream",
			Handler:       _CoreService_GetMeetingsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "core/service.proto",
}
